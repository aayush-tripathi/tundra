// GENERATED BY ISLE. DO NOT EDIT!
//
// Generated automatically from the instruction-selection DSL code in:
// - src\prelude.isle
// - src\prelude_lower.isle
// - src\isa\x64\inst.isle
// - src\isa\x64\lower.isle
// - <OUT_DIR>\clif_lower.isle
// - <OUT_DIR>\assembler.isle

use super::*;  // Pulls in all external types.
use std::marker::PhantomData;

/// Context during lowering: an implementation of this trait
/// must be provided with all external constructors and extractors.
/// A mutable borrow is passed along through all lowering logic.
pub trait Context {
    fn unit(&mut self, ) -> Unit;
    fn def_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn value_type(&mut self, arg0: Value) -> Type;
    fn u32_nonnegative(&mut self, arg0: u32) -> Option<u32>;
    fn offset32(&mut self, arg0: Offset32) -> i32;
    fn u32_lteq(&mut self, arg0: u32, arg1: u32) -> Option<Unit>;
    fn u8_lteq(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn u8_lt(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn u8_as_i8(&mut self, arg0: u8) -> i8;
    fn u8_as_u32(&mut self, arg0: u8) -> u32;
    fn u8_as_u64(&mut self, arg0: u8) -> u64;
    fn u16_as_i16(&mut self, arg0: u16) -> i16;
    fn u16_as_u32(&mut self, arg0: u16) -> u32;
    fn u16_as_u64(&mut self, arg0: u16) -> u64;
    fn u64_as_u8(&mut self, arg0: u64) -> u8;
    fn u64_as_u16(&mut self, arg0: u64) -> u16;
    fn u64_as_i64(&mut self, arg0: u64) -> i64;
    fn u8_try_from_u64(&mut self, arg0: u64) -> Option<u8>;
    fn u8_try_from_u16(&mut self, arg0: u16) -> Option<u8>;
    fn u8_try_from_i32(&mut self, arg0: i32) -> Option<u8>;
    fn u16_try_from_u64(&mut self, arg0: u64) -> Option<u16>;
    fn u32_try_from_u64(&mut self, arg0: u64) -> Option<u32>;
    fn u64_try_from_i64(&mut self, arg0: i64) -> Option<u64>;
    fn i8_try_from_u64(&mut self, arg0: u64) -> Option<i8>;
    fn i16_try_from_u64(&mut self, arg0: u64) -> Option<i16>;
    fn i32_try_from_u64(&mut self, arg0: u64) -> Option<i32>;
    fn u32_as_u64(&mut self, arg0: u32) -> u64;
    fn i32_as_i64(&mut self, arg0: i32) -> i64;
    fn i64_as_u64(&mut self, arg0: i64) -> u64;
    fn i64_neg(&mut self, arg0: i64) -> i64;
    fn i8_neg(&mut self, arg0: i8) -> i8;
    fn u128_as_u64(&mut self, arg0: u128) -> Option<u64>;
    fn u64_as_u32(&mut self, arg0: u64) -> Option<u32>;
    fn u32_as_u16(&mut self, arg0: u32) -> Option<u16>;
    fn i32_as_i8(&mut self, arg0: i32) -> Option<i8>;
    fn u64_as_i32(&mut self, arg0: u64) -> i32;
    fn u8_and(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_shl(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_shr(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_sub(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u32_add(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_sub(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_and(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_shl(&mut self, arg0: u32, arg1: u32) -> u32;
    fn s32_add_fallible(&mut self, arg0: i32, arg1: i32) -> Option<i32>;
    fn checked_add_with_type(&mut self, arg0: Type, arg1: u64, arg2: u64) -> Option<u64>;
    fn add_overflows_with_type(&mut self, arg0: Type, arg1: u64, arg2: u64) -> bool;
    fn u64_add(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sub(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_mul(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_udiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_and(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_or(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_xor(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_shl(&mut self, arg0: u64, arg1: u64) -> u64;
    fn imm64_sdiv(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Option<Imm64>;
    fn imm64_shl(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_ushr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_sshr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn u64_not(&mut self, arg0: u64) -> u64;
    fn u64_eq(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_le(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_lt(&mut self, arg0: u64, arg1: u64) -> bool;
    fn i64_shr(&mut self, arg0: i64, arg1: i64) -> i64;
    fn i64_ctz(&mut self, arg0: i64) -> i64;
    fn i64_sextend_u64(&mut self, arg0: Type, arg1: u64) -> i64;
    fn i64_sextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> i64;
    fn u64_uextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> u64;
    fn imm64_icmp(&mut self, arg0: Type, arg1: &IntCC, arg2: Imm64, arg3: Imm64) -> Imm64;
    fn u64_is_zero(&mut self, arg0: u64) -> bool;
    fn i64_is_zero(&mut self, arg0: i64) -> bool;
    fn u64_is_odd(&mut self, arg0: u64) -> bool;
    fn u128_replicated_u64(&mut self, arg0: u128) -> Option<u64>;
    fn u64_replicated_u32(&mut self, arg0: u64) -> Option<u64>;
    fn u32_replicated_u16(&mut self, arg0: u64) -> Option<u64>;
    fn u16_replicated_u8(&mut self, arg0: u64) -> Option<u8>;
    fn u128_low_bits(&mut self, arg0: u128) -> u64;
    fn u128_high_bits(&mut self, arg0: u128) -> u64;
    fn f16_min(&mut self, arg0: Ieee16, arg1: Ieee16) -> Option<Ieee16>;
    fn f16_max(&mut self, arg0: Ieee16, arg1: Ieee16) -> Option<Ieee16>;
    fn f16_neg(&mut self, arg0: Ieee16) -> Ieee16;
    fn f16_abs(&mut self, arg0: Ieee16) -> Ieee16;
    fn f16_copysign(&mut self, arg0: Ieee16, arg1: Ieee16) -> Ieee16;
    fn f32_add(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_sub(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_mul(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_div(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_sqrt(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_ceil(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_floor(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_trunc(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_nearest(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_min(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_max(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_neg(&mut self, arg0: Ieee32) -> Ieee32;
    fn f32_abs(&mut self, arg0: Ieee32) -> Ieee32;
    fn f32_copysign(&mut self, arg0: Ieee32, arg1: Ieee32) -> Ieee32;
    fn f64_add(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_sub(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_mul(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_div(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_sqrt(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_ceil(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_floor(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_trunc(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_nearest(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_min(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_max(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_neg(&mut self, arg0: Ieee64) -> Ieee64;
    fn f64_abs(&mut self, arg0: Ieee64) -> Ieee64;
    fn f64_copysign(&mut self, arg0: Ieee64, arg1: Ieee64) -> Ieee64;
    fn f128_min(&mut self, arg0: Ieee128, arg1: Ieee128) -> Option<Ieee128>;
    fn f128_max(&mut self, arg0: Ieee128, arg1: Ieee128) -> Option<Ieee128>;
    fn f128_neg(&mut self, arg0: Ieee128) -> Ieee128;
    fn f128_abs(&mut self, arg0: Ieee128) -> Ieee128;
    fn f128_copysign(&mut self, arg0: Ieee128, arg1: Ieee128) -> Ieee128;
    fn ty_umin(&mut self, arg0: Type) -> u64;
    fn ty_umax(&mut self, arg0: Type) -> u64;
    fn ty_smin(&mut self, arg0: Type) -> u64;
    fn ty_smax(&mut self, arg0: Type) -> u64;
    fn ty_bits(&mut self, arg0: Type) -> u8;
    fn ty_bits_u16(&mut self, arg0: Type) -> u16;
    fn ty_bits_u64(&mut self, arg0: Type) -> u64;
    fn ty_mask(&mut self, arg0: Type) -> u64;
    fn ty_lane_mask(&mut self, arg0: Type) -> u64;
    fn ty_lane_count(&mut self, arg0: Type) -> u64;
    fn ty_bytes(&mut self, arg0: Type) -> u16;
    fn lane_type(&mut self, arg0: Type) -> Type;
    fn ty_half_lanes(&mut self, arg0: Type) -> Option<Type>;
    fn ty_half_width(&mut self, arg0: Type) -> Option<Type>;
    fn ty_equal(&mut self, arg0: Type, arg1: Type) -> bool;
    fn mem_flags_trusted(&mut self, ) -> MemFlags;
    fn intcc_swap_args(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_complement(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_without_eq(&mut self, arg0: &IntCC) -> IntCC;
    fn floatcc_swap_args(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_complement(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_unordered(&mut self, arg0: &FloatCC) -> bool;
    fn fits_in_16(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn lane_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_16(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64_extract(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32_or_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_8_or_16(&mut self, arg0: Type) -> Option<Type>;
    fn ty_16_or_32(&mut self, arg0: Type) -> Option<Type>;
    fn int_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_16_to_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_float_or_vec(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_not_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_ctor(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_addr64(&mut self, arg0: Type) -> Option<Type>;
    fn not_vec32x2(&mut self, arg0: Type) -> Option<Type>;
    fn not_i64x2(&mut self, arg0: Type) -> Option<()>;
    fn u8_from_uimm8(&mut self, arg0: Uimm8) -> u8;
    fn u64_from_bool(&mut self, arg0: bool) -> u64;
    fn u64_from_imm64(&mut self, arg0: Imm64) -> u64;
    fn nonzero_u64_from_imm64(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64_power_of_two(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64(&mut self, arg0: u64) -> Imm64;
    fn imm64_masked(&mut self, arg0: Type, arg1: u64) -> Imm64;
    fn u16_from_ieee16(&mut self, arg0: Ieee16) -> u16;
    fn u32_from_ieee32(&mut self, arg0: Ieee32) -> u32;
    fn u64_from_ieee64(&mut self, arg0: Ieee64) -> u64;
    fn multi_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn ty_dyn64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn128_int(&mut self, arg0: Type) -> Option<Type>;
    fn offset32_to_i32(&mut self, arg0: Offset32) -> i32;
    fn i32_to_offset32(&mut self, arg0: i32) -> Offset32;
    fn intcc_unsigned(&mut self, arg0: &IntCC) -> IntCC;
    fn signed_cond_code(&mut self, arg0: &IntCC) -> Option<IntCC>;
    fn trap_code_division_by_zero(&mut self, ) -> TrapCode;
    fn trap_code_integer_overflow(&mut self, ) -> TrapCode;
    fn trap_code_bad_conversion_to_integer(&mut self, ) -> TrapCode;
    fn range(&mut self, arg0: usize, arg1: usize) -> Range;
    fn range_view(&mut self, arg0: Range) -> RangeView;
    fn value_reg(&mut self, arg0: Reg) -> ValueRegs;
    fn writable_value_reg(&mut self, arg0: WritableReg) -> WritableValueRegs;
    fn value_regs(&mut self, arg0: Reg, arg1: Reg) -> ValueRegs;
    fn writable_value_regs(&mut self, arg0: WritableReg, arg1: WritableReg) -> WritableValueRegs;
    fn value_regs_invalid(&mut self, ) -> ValueRegs;
    fn output_none(&mut self, ) -> InstOutput;
    fn output(&mut self, arg0: ValueRegs) -> InstOutput;
    fn output_pair(&mut self, arg0: ValueRegs, arg1: ValueRegs) -> InstOutput;
    fn output_builder_new(&mut self, ) -> InstOutputBuilder;
    fn output_builder_push(&mut self, arg0: &InstOutputBuilder, arg1: ValueRegs) -> Unit;
    fn output_builder_finish(&mut self, arg0: &InstOutputBuilder) -> InstOutput;
    fn temp_writable_reg(&mut self, arg0: Type) -> WritableReg;
    fn is_valid_reg(&mut self, arg0: Reg) -> bool;
    fn invalid_reg(&mut self, ) -> Reg;
    fn mark_value_used(&mut self, arg0: Value) -> Unit;
    fn put_in_reg(&mut self, arg0: Value) -> Reg;
    fn put_in_regs(&mut self, arg0: Value) -> ValueRegs;
    fn ensure_in_vreg(&mut self, arg0: Reg, arg1: Type) -> Reg;
    fn value_regs_get(&mut self, arg0: ValueRegs, arg1: usize) -> Reg;
    fn value_regs_len(&mut self, arg0: ValueRegs) -> usize;
    fn preg_to_reg(&mut self, arg0: PReg) -> Reg;
    fn add_range_fact(&mut self, arg0: Reg, arg1: u16, arg2: u64, arg3: u64) -> Reg;
    fn single_target(&mut self, arg0: &MachLabelSlice) -> Option<MachLabel>;
    fn two_targets(&mut self, arg0: &MachLabelSlice) -> Option<(MachLabel, MachLabel)>;
    fn jump_table_targets(&mut self, arg0: &MachLabelSlice) -> Option<(MachLabel, BoxVecMachLabel)>;
    fn jump_table_size(&mut self, arg0: &BoxVecMachLabel) -> u32;
    fn value_list_slice(&mut self, arg0: ValueList) -> ValueSlice;
    fn value_slice_empty(&mut self, arg0: ValueSlice) -> Option<()>;
    fn value_slice_unwrap(&mut self, arg0: ValueSlice) -> Option<(Value, ValueSlice)>;
    fn value_slice_len(&mut self, arg0: ValueSlice) -> usize;
    fn value_slice_get(&mut self, arg0: ValueSlice, arg1: usize) -> Value;
    fn writable_reg_to_reg(&mut self, arg0: WritableReg) -> Reg;
    fn inst_results(&mut self, arg0: Inst) -> ValueSlice;
    fn value_is_unused(&mut self, arg0: Value) -> bool;
    fn first_result(&mut self, arg0: Inst) -> Option<Value>;
    fn inst_data_value(&mut self, arg0: Inst) -> InstructionData;
    fn i32_from_iconst(&mut self, arg0: Value) -> Option<i32>;
    fn i64_from_iconst(&mut self, arg0: Value) -> Option<i64>;
    fn zero_value(&mut self, arg0: Value) -> Option<Value>;
    fn is_sinkable_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn maybe_uextend(&mut self, arg0: Value) -> Option<Value>;
    fn uimm8(&mut self, arg0: Imm64) -> Option<u8>;
    fn emit(&mut self, arg0: &MInst) -> Unit;
    fn sink_inst(&mut self, arg0: Inst) -> Unit;
    fn emit_u64_le_const(&mut self, arg0: u64) -> VCodeConstant;
    fn emit_u128_le_const(&mut self, arg0: u128) -> VCodeConstant;
    fn const_to_vconst(&mut self, arg0: Constant) -> VCodeConstant;
    fn tls_model(&mut self, arg0: Type) -> TlsModel;
    fn tls_model_is_elf_gd(&mut self, ) -> Option<Unit>;
    fn tls_model_is_macho(&mut self, ) -> Option<Unit>;
    fn tls_model_is_coff(&mut self, ) -> Option<Unit>;
    fn preserve_frame_pointers(&mut self, ) -> Option<Unit>;
    fn stack_switch_model(&mut self, ) -> Option<StackSwitchModel>;
    fn box_external_name(&mut self, arg0: ExternalName) -> BoxExternalName;
    fn func_ref_data(&mut self, arg0: FuncRef) -> (SigRef, ExternalName, RelocDistance);
    fn exception_sig(&mut self, arg0: ExceptionTable) -> SigRef;
    fn symbol_value_data(&mut self, arg0: GlobalValue) -> Option<(ExternalName, RelocDistance, i64)>;
    fn reloc_distance_near(&mut self, arg0: RelocDistance) -> Option<()>;
    fn vec_mask_from_immediate(&mut self, arg0: Immediate) -> Option<VecMask>;
    fn u128_from_immediate(&mut self, arg0: Immediate) -> Option<u128>;
    fn vconst_from_immediate(&mut self, arg0: Immediate) -> Option<VCodeConstant>;
    fn u128_from_constant(&mut self, arg0: Constant) -> Option<u128>;
    fn u64_from_constant(&mut self, arg0: Constant) -> Option<u64>;
    fn shuffle64_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8)>;
    fn shuffle32_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8, u8, u8)>;
    fn shuffle16_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8, u8, u8, u8, u8, u8, u8)>;
    fn only_writable_reg(&mut self, arg0: WritableValueRegs) -> Option<WritableReg>;
    fn writable_regs_get(&mut self, arg0: WritableValueRegs, arg1: usize) -> WritableReg;
    fn abi_num_args(&mut self, arg0: Sig) -> usize;
    fn abi_get_arg(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_num_rets(&mut self, arg0: Sig) -> usize;
    fn abi_get_ret(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_ret_arg(&mut self, arg0: Sig) -> Option<ABIArg>;
    fn abi_no_ret_arg(&mut self, arg0: Sig) -> Option<()>;
    fn abi_unwrap_ret_area_ptr(&mut self, ) -> Reg;
    fn abi_stackslot_addr(&mut self, arg0: WritableReg, arg1: StackSlot, arg2: Offset32) -> MInst;
    fn abi_dynamic_stackslot_addr(&mut self, arg0: WritableReg, arg1: DynamicStackSlot) -> MInst;
    fn abi_arg_only_slot(&mut self, arg0: &ABIArg) -> Option<ABIArgSlot>;
    fn abi_arg_implicit_pointer(&mut self, arg0: &ABIArg) -> Option<(ABIArgSlot, i64, Type)>;
    fn real_reg_to_reg(&mut self, arg0: RealReg) -> Reg;
    fn real_reg_to_writable_reg(&mut self, arg0: RealReg) -> WritableReg;
    fn gen_move(&mut self, arg0: Type, arg1: WritableReg, arg2: Reg) -> MInst;
    fn gen_return(&mut self, arg0: ValueSlice) -> Unit;
    fn gen_return_call(&mut self, arg0: SigRef, arg1: ExternalName, arg2: RelocDistance, arg3: ValueSlice) -> InstOutput;
    fn gen_return_call_indirect(&mut self, arg0: SigRef, arg1: Value, arg2: ValueSlice) -> InstOutput;
    fn safe_divisor_from_imm64(&mut self, arg0: Type, arg1: Imm64) -> Option<u64>;
    fn box_synthetic_amode(&mut self, arg0: &SyntheticAmode) -> BoxSyntheticAmode;
    fn operand_size_of_type_32_64(&mut self, arg0: Type) -> OperandSize;
    fn raw_operand_size_of_type(&mut self, arg0: Type) -> OperandSize;
    fn put_in_reg_mem_imm(&mut self, arg0: Value) -> RegMemImm;
    fn put_in_reg_mem(&mut self, arg0: Value) -> RegMem;
    fn synthetic_amode_to_reg_mem(&mut self, arg0: &SyntheticAmode) -> RegMem;
    fn amode_to_synthetic_amode(&mut self, arg0: &Amode) -> SyntheticAmode;
    fn sum_extend_fits_in_32_bits(&mut self, arg0: Type, arg1: Imm64, arg2: Offset32) -> Option<u32>;
    fn amode_offset(&mut self, arg0: &Amode, arg1: i32) -> Amode;
    fn zero_offset(&mut self, ) -> Offset32;
    fn intcc_to_cc(&mut self, arg0: &IntCC) -> CC;
    fn cc_invert(&mut self, arg0: &CC) -> CC;
    fn cc_nz_or_z(&mut self, arg0: &CC) -> Option<CC>;
    fn encode_fcmp_imm(&mut self, arg0: &FcmpImm) -> u8;
    fn encode_round_imm(&mut self, arg0: &RoundImm) -> u8;
    fn imm8_reg_to_imm8_gpr(&mut self, arg0: &Imm8Reg) -> Imm8Gpr;
    fn gpr_from_imm8_gpr(&mut self, arg0: &Imm8Gpr) -> Option<Gpr>;
    fn imm8_from_imm8_gpr(&mut self, arg0: &Imm8Gpr) -> Option<u8>;
    fn writable_gpr_to_reg(&mut self, arg0: WritableGpr) -> WritableReg;
    fn writable_xmm_to_reg(&mut self, arg0: WritableXmm) -> WritableReg;
    fn writable_reg_to_xmm(&mut self, arg0: WritableReg) -> WritableXmm;
    fn writable_xmm_to_xmm(&mut self, arg0: WritableXmm) -> Xmm;
    fn writable_gpr_to_gpr(&mut self, arg0: WritableGpr) -> Gpr;
    fn gpr_to_reg(&mut self, arg0: Gpr) -> Reg;
    fn gpr_to_gpr_mem(&mut self, arg0: Gpr) -> GprMem;
    fn gpr_to_gpr_mem_imm(&mut self, arg0: Gpr) -> GprMemImm;
    fn xmm_to_reg(&mut self, arg0: Xmm) -> Reg;
    fn xmm_to_xmm_mem_imm(&mut self, arg0: Xmm) -> XmmMemImm;
    fn xmm_mem_to_xmm_mem_imm(&mut self, arg0: &XmmMem) -> XmmMemImm;
    fn xmm_mem_to_xmm_mem_aligned(&mut self, arg0: &XmmMem) -> XmmMemAligned;
    fn xmm_mem_imm_to_xmm_mem_aligned_imm(&mut self, arg0: &XmmMemImm) -> XmmMemAlignedImm;
    fn temp_writable_gpr(&mut self, ) -> WritableGpr;
    fn temp_writable_xmm(&mut self, ) -> WritableXmm;
    fn reg_mem_to_xmm_mem(&mut self, arg0: &RegMem) -> XmmMem;
    fn reg_to_reg_mem_imm(&mut self, arg0: Reg) -> RegMemImm;
    fn gpr_mem_imm_new(&mut self, arg0: &RegMemImm) -> GprMemImm;
    fn xmm_mem_imm_new(&mut self, arg0: &RegMemImm) -> XmmMemImm;
    fn xmm_to_xmm_mem(&mut self, arg0: Xmm) -> XmmMem;
    fn xmm_mem_to_reg_mem(&mut self, arg0: &XmmMem) -> RegMem;
    fn gpr_mem_to_reg_mem(&mut self, arg0: &GprMem) -> RegMem;
    fn xmm_new(&mut self, arg0: Reg) -> Xmm;
    fn gpr_new(&mut self, arg0: Reg) -> Gpr;
    fn reg_mem_to_gpr_mem(&mut self, arg0: &RegMem) -> GprMem;
    fn reg_to_gpr_mem(&mut self, arg0: Reg) -> GprMem;
    fn put_in_xmm_mem(&mut self, arg0: Value) -> XmmMem;
    fn put_in_xmm_mem_imm(&mut self, arg0: Value) -> XmmMemImm;
    fn gpr_to_imm8_gpr(&mut self, arg0: Gpr) -> Imm8Gpr;
    fn imm8_to_imm8_gpr(&mut self, arg0: u8) -> Imm8Gpr;
    fn xmi_imm(&mut self, arg0: u32) -> XmmMemImm;
    fn type_register_class(&mut self, arg0: Type) -> Option<RegisterClass>;
    fn is_imm8(&mut self, arg0: &GprMemImm) -> Option<u8>;
    fn is_simm8(&mut self, arg0: &GprMemImm) -> Option<i8>;
    fn is_imm16(&mut self, arg0: &GprMemImm) -> Option<u16>;
    fn is_simm16(&mut self, arg0: &GprMemImm) -> Option<i16>;
    fn is_imm32(&mut self, arg0: &GprMemImm) -> Option<u32>;
    fn is_simm32(&mut self, arg0: &GprMemImm) -> Option<i32>;
    fn is_gpr(&mut self, arg0: &GprMemImm) -> Option<Gpr>;
    fn is_gpr_mem(&mut self, arg0: &GprMemImm) -> Option<GprMem>;
    fn is_xmm_mem(&mut self, arg0: &XmmMem) -> Option<XmmMem>;
    fn is_xmm(&mut self, arg0: &XmmMem) -> Option<Xmm>;
    fn use_avx512vl(&mut self, ) -> bool;
    fn use_avx512dq(&mut self, ) -> bool;
    fn use_avx512f(&mut self, ) -> bool;
    fn use_avx512bitalg(&mut self, ) -> bool;
    fn use_avx512vbmi(&mut self, ) -> bool;
    fn use_lzcnt(&mut self, ) -> bool;
    fn use_bmi1(&mut self, ) -> bool;
    fn use_bmi2(&mut self, ) -> bool;
    fn use_popcnt(&mut self, ) -> bool;
    fn use_fma(&mut self, ) -> bool;
    fn use_ssse3(&mut self, ) -> bool;
    fn use_sse41(&mut self, ) -> bool;
    fn use_sse42(&mut self, ) -> bool;
    fn use_avx(&mut self, ) -> bool;
    fn use_avx2(&mut self, ) -> bool;
    fn use_cmpxchg16b(&mut self, ) -> bool;
    fn imm8_from_value(&mut self, arg0: Value) -> Option<Imm8Reg>;
    fn const_to_type_masked_imm8(&mut self, arg0: u64, arg1: Type) -> Imm8Gpr;
    fn shift_mask(&mut self, arg0: Type) -> u8;
    fn shift_amount_masked(&mut self, arg0: Type, arg1: Imm64) -> u8;
    fn simm32_from_value(&mut self, arg0: Value) -> Option<GprMemImm>;
    fn sinkable_load(&mut self, arg0: Value) -> Option<SinkableLoad>;
    fn sinkable_load_exact(&mut self, arg0: Value) -> Option<SinkableLoad>;
    fn sink_load(&mut self, arg0: &SinkableLoad) -> SyntheticAmode;
    fn ext_mode(&mut self, arg0: u16, arg1: u16) -> ExtMode;
    fn gen_call(&mut self, arg0: SigRef, arg1: ExternalName, arg2: RelocDistance, arg3: ValueSlice) -> InstOutput;
    fn gen_call_indirect(&mut self, arg0: SigRef, arg1: Value, arg2: ValueSlice) -> InstOutput;
    fn gen_try_call(&mut self, arg0: SigRef, arg1: ExternalName, arg2: RelocDistance, arg3: ExceptionTable, arg4: ValueSlice, arg5: &MachLabelSlice) -> Unit;
    fn gen_try_call_indirect(&mut self, arg0: SigRef, arg1: Value, arg2: ExceptionTable, arg3: ValueSlice, arg4: &MachLabelSlice) -> Unit;
    fn writable_invalid_gpr(&mut self, ) -> WritableGpr;
    fn nonzero_u64_fits_in_u32(&mut self, arg0: u64) -> Option<u64>;
    fn ty_int_bool_or_ref(&mut self, arg0: Type) -> Option<()>;
    fn shuffle_0_31_mask(&mut self, arg0: &VecMask) -> VCodeConstant;
    fn shuffle_0_15_mask(&mut self, arg0: &VecMask) -> VCodeConstant;
    fn shuffle_16_31_mask(&mut self, arg0: &VecMask) -> VCodeConstant;
    fn perm_from_mask(&mut self, arg0: &VecMask) -> VCodeConstant;
    fn perm_from_mask_with_zeros(&mut self, arg0: &VecMask) -> Option<(VCodeConstant, VCodeConstant)>;
    fn const_to_synthetic_amode(&mut self, arg0: VCodeConstant) -> SyntheticAmode;
    fn preg_rbp(&mut self, ) -> PReg;
    fn preg_rsp(&mut self, ) -> PReg;
    fn preg_pinned(&mut self, ) -> PReg;
    fn libcall_1(&mut self, arg0: &LibCall, arg1: Reg) -> Reg;
    fn libcall_2(&mut self, arg0: &LibCall, arg1: Reg, arg2: Reg) -> Reg;
    fn libcall_3(&mut self, arg0: &LibCall, arg1: Reg, arg2: Reg, arg3: Reg) -> Reg;
    fn ishl_i8x16_mask_for_const(&mut self, arg0: u32) -> SyntheticAmode;
    fn ishl_i8x16_mask_table(&mut self, ) -> SyntheticAmode;
    fn ushr_i8x16_mask_for_const(&mut self, arg0: u32) -> SyntheticAmode;
    fn ushr_i8x16_mask_table(&mut self, ) -> SyntheticAmode;
    fn vconst_all_ones_or_all_zeros(&mut self, arg0: Constant) -> Option<()>;
    fn insert_i8x16_lane_hole(&mut self, arg0: u8) -> VCodeConstant;
    fn sse_insertps_lane_imm(&mut self, arg0: u8) -> u8;
    fn pblendw_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn palignr_imm_from_immediate(&mut self, arg0: Immediate) -> Option<u8>;
    fn pshuflw_lhs_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn pshuflw_rhs_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn pshufhw_lhs_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn pshufhw_rhs_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn pshufd_lhs_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn pshufd_rhs_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn shufps_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn shufps_rev_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn unpack_value_array_2(&mut self, arg0: &ValueArray2) -> (Value, Value);
    fn pack_value_array_2(&mut self, arg0: Value, arg1: Value) -> ValueArray2;
    fn unpack_value_array_3(&mut self, arg0: &ValueArray3) -> (Value, Value, Value);
    fn pack_value_array_3(&mut self, arg0: Value, arg1: Value, arg2: Value) -> ValueArray3;
    fn unpack_block_array_2(&mut self, arg0: &BlockArray2) -> (BlockCall, BlockCall);
    fn pack_block_array_2(&mut self, arg0: BlockCall, arg1: BlockCall) -> BlockArray2;
    fn x64_addb_i_raw(&mut self, arg0: Gpr, arg1: u8) -> AssemblerOutputs;
    fn x64_addw_i_raw(&mut self, arg0: Gpr, arg1: u16) -> AssemblerOutputs;
    fn x64_addl_i_raw(&mut self, arg0: Gpr, arg1: u32) -> AssemblerOutputs;
    fn x64_addq_i_sxl_raw(&mut self, arg0: Gpr, arg1: i32) -> AssemblerOutputs;
    fn x64_addb_mi_raw(&mut self, arg0: &GprMem, arg1: u8) -> AssemblerOutputs;
    fn x64_addw_mi_raw(&mut self, arg0: &GprMem, arg1: u16) -> AssemblerOutputs;
    fn x64_addl_mi_raw(&mut self, arg0: &GprMem, arg1: u32) -> AssemblerOutputs;
    fn x64_addq_mi_sxl_raw(&mut self, arg0: &GprMem, arg1: i32) -> AssemblerOutputs;
    fn x64_addl_mi_sxb_raw(&mut self, arg0: &GprMem, arg1: i8) -> AssemblerOutputs;
    fn x64_addq_mi_sxb_raw(&mut self, arg0: &GprMem, arg1: i8) -> AssemblerOutputs;
    fn x64_addb_mr_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_addw_mr_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_addl_mr_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_addq_mr_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_addb_rm_raw(&mut self, arg0: Gpr, arg1: &GprMem) -> AssemblerOutputs;
    fn x64_addw_rm_raw(&mut self, arg0: Gpr, arg1: &GprMem) -> AssemblerOutputs;
    fn x64_addl_rm_raw(&mut self, arg0: Gpr, arg1: &GprMem) -> AssemblerOutputs;
    fn x64_addq_rm_raw(&mut self, arg0: Gpr, arg1: &GprMem) -> AssemblerOutputs;
    fn x64_adcb_i_raw(&mut self, arg0: Gpr, arg1: u8) -> AssemblerOutputs;
    fn x64_adcw_i_raw(&mut self, arg0: Gpr, arg1: u16) -> AssemblerOutputs;
    fn x64_adcl_i_raw(&mut self, arg0: Gpr, arg1: u32) -> AssemblerOutputs;
    fn x64_adcq_i_sxl_raw(&mut self, arg0: Gpr, arg1: i32) -> AssemblerOutputs;
    fn x64_adcb_mi_raw(&mut self, arg0: &GprMem, arg1: u8) -> AssemblerOutputs;
    fn x64_adcw_mi_raw(&mut self, arg0: &GprMem, arg1: u16) -> AssemblerOutputs;
    fn x64_adcl_mi_raw(&mut self, arg0: &GprMem, arg1: u32) -> AssemblerOutputs;
    fn x64_adcq_mi_sxl_raw(&mut self, arg0: &GprMem, arg1: i32) -> AssemblerOutputs;
    fn x64_adcl_mi_sxb_raw(&mut self, arg0: &GprMem, arg1: i8) -> AssemblerOutputs;
    fn x64_adcq_mi_sxb_raw(&mut self, arg0: &GprMem, arg1: i8) -> AssemblerOutputs;
    fn x64_adcb_mr_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_adcw_mr_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_adcl_mr_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_adcq_mr_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_adcb_rm_raw(&mut self, arg0: Gpr, arg1: &GprMem) -> AssemblerOutputs;
    fn x64_adcw_rm_raw(&mut self, arg0: Gpr, arg1: &GprMem) -> AssemblerOutputs;
    fn x64_adcl_rm_raw(&mut self, arg0: Gpr, arg1: &GprMem) -> AssemblerOutputs;
    fn x64_adcq_rm_raw(&mut self, arg0: Gpr, arg1: &GprMem) -> AssemblerOutputs;
    fn x64_lock_addb_mi_raw(&mut self, arg0: &Amode, arg1: u8) -> AssemblerOutputs;
    fn x64_lock_addw_mi_raw(&mut self, arg0: &Amode, arg1: u16) -> AssemblerOutputs;
    fn x64_lock_addl_mi_raw(&mut self, arg0: &Amode, arg1: u32) -> AssemblerOutputs;
    fn x64_lock_addq_mi_sxl_raw(&mut self, arg0: &Amode, arg1: i32) -> AssemblerOutputs;
    fn x64_lock_addl_mi_sxb_raw(&mut self, arg0: &Amode, arg1: i8) -> AssemblerOutputs;
    fn x64_lock_addq_mi_sxb_raw(&mut self, arg0: &Amode, arg1: i8) -> AssemblerOutputs;
    fn x64_lock_addb_mr_raw(&mut self, arg0: &Amode, arg1: Gpr) -> AssemblerOutputs;
    fn x64_lock_addw_mr_raw(&mut self, arg0: &Amode, arg1: Gpr) -> AssemblerOutputs;
    fn x64_lock_addl_mr_raw(&mut self, arg0: &Amode, arg1: Gpr) -> AssemblerOutputs;
    fn x64_lock_addq_mr_raw(&mut self, arg0: &Amode, arg1: Gpr) -> AssemblerOutputs;
    fn x64_lock_adcb_mi_raw(&mut self, arg0: &Amode, arg1: u8) -> AssemblerOutputs;
    fn x64_lock_adcw_mi_raw(&mut self, arg0: &Amode, arg1: u16) -> AssemblerOutputs;
    fn x64_lock_adcl_mi_raw(&mut self, arg0: &Amode, arg1: u32) -> AssemblerOutputs;
    fn x64_lock_adcq_mi_sxl_raw(&mut self, arg0: &Amode, arg1: i32) -> AssemblerOutputs;
    fn x64_lock_adcl_mi_sxb_raw(&mut self, arg0: &Amode, arg1: i8) -> AssemblerOutputs;
    fn x64_lock_adcq_mi_sxb_raw(&mut self, arg0: &Amode, arg1: i8) -> AssemblerOutputs;
    fn x64_lock_adcb_mr_raw(&mut self, arg0: &Amode, arg1: Gpr) -> AssemblerOutputs;
    fn x64_lock_adcw_mr_raw(&mut self, arg0: &Amode, arg1: Gpr) -> AssemblerOutputs;
    fn x64_lock_adcl_mr_raw(&mut self, arg0: &Amode, arg1: Gpr) -> AssemblerOutputs;
    fn x64_lock_adcq_mr_raw(&mut self, arg0: &Amode, arg1: Gpr) -> AssemblerOutputs;
    fn x64_addss_a_raw(&mut self, arg0: Xmm, arg1: &XmmMem) -> AssemblerOutputs;
    fn x64_addsd_a_raw(&mut self, arg0: Xmm, arg1: &XmmMem) -> AssemblerOutputs;
    fn x64_addps_a_raw(&mut self, arg0: Xmm, arg1: &XmmMemAligned) -> AssemblerOutputs;
    fn x64_addpd_a_raw(&mut self, arg0: Xmm, arg1: &XmmMemAligned) -> AssemblerOutputs;
    fn x64_andb_i_raw(&mut self, arg0: Gpr, arg1: u8) -> AssemblerOutputs;
    fn x64_andw_i_raw(&mut self, arg0: Gpr, arg1: u16) -> AssemblerOutputs;
    fn x64_andl_i_raw(&mut self, arg0: Gpr, arg1: u32) -> AssemblerOutputs;
    fn x64_andq_i_sxl_raw(&mut self, arg0: Gpr, arg1: i32) -> AssemblerOutputs;
    fn x64_andb_mi_raw(&mut self, arg0: &GprMem, arg1: u8) -> AssemblerOutputs;
    fn x64_andw_mi_raw(&mut self, arg0: &GprMem, arg1: u16) -> AssemblerOutputs;
    fn x64_andl_mi_raw(&mut self, arg0: &GprMem, arg1: u32) -> AssemblerOutputs;
    fn x64_andq_mi_sxl_raw(&mut self, arg0: &GprMem, arg1: i32) -> AssemblerOutputs;
    fn x64_andl_mi_sxb_raw(&mut self, arg0: &GprMem, arg1: i8) -> AssemblerOutputs;
    fn x64_andq_mi_sxb_raw(&mut self, arg0: &GprMem, arg1: i8) -> AssemblerOutputs;
    fn x64_andb_mr_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_andw_mr_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_andl_mr_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_andq_mr_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_andb_rm_raw(&mut self, arg0: Gpr, arg1: &GprMem) -> AssemblerOutputs;
    fn x64_andw_rm_raw(&mut self, arg0: Gpr, arg1: &GprMem) -> AssemblerOutputs;
    fn x64_andl_rm_raw(&mut self, arg0: Gpr, arg1: &GprMem) -> AssemblerOutputs;
    fn x64_andq_rm_raw(&mut self, arg0: Gpr, arg1: &GprMem) -> AssemblerOutputs;
    fn x64_lock_andb_mi_raw(&mut self, arg0: &Amode, arg1: u8) -> AssemblerOutputs;
    fn x64_lock_andw_mi_raw(&mut self, arg0: &Amode, arg1: u16) -> AssemblerOutputs;
    fn x64_lock_andl_mi_raw(&mut self, arg0: &Amode, arg1: u32) -> AssemblerOutputs;
    fn x64_lock_andq_mi_sxl_raw(&mut self, arg0: &Amode, arg1: i32) -> AssemblerOutputs;
    fn x64_lock_andl_mi_sxb_raw(&mut self, arg0: &Amode, arg1: i8) -> AssemblerOutputs;
    fn x64_lock_andq_mi_sxb_raw(&mut self, arg0: &Amode, arg1: i8) -> AssemblerOutputs;
    fn x64_lock_andb_mr_raw(&mut self, arg0: &Amode, arg1: Gpr) -> AssemblerOutputs;
    fn x64_lock_andw_mr_raw(&mut self, arg0: &Amode, arg1: Gpr) -> AssemblerOutputs;
    fn x64_lock_andl_mr_raw(&mut self, arg0: &Amode, arg1: Gpr) -> AssemblerOutputs;
    fn x64_lock_andq_mr_raw(&mut self, arg0: &Amode, arg1: Gpr) -> AssemblerOutputs;
    fn x64_andps_a_raw(&mut self, arg0: Xmm, arg1: &XmmMemAligned) -> AssemblerOutputs;
    fn x64_andpd_a_raw(&mut self, arg0: Xmm, arg1: &XmmMemAligned) -> AssemblerOutputs;
    fn x64_orb_i_raw(&mut self, arg0: Gpr, arg1: u8) -> AssemblerOutputs;
    fn x64_orw_i_raw(&mut self, arg0: Gpr, arg1: u16) -> AssemblerOutputs;
    fn x64_orl_i_raw(&mut self, arg0: Gpr, arg1: u32) -> AssemblerOutputs;
    fn x64_orq_i_sxl_raw(&mut self, arg0: Gpr, arg1: i32) -> AssemblerOutputs;
    fn x64_orb_mi_raw(&mut self, arg0: &GprMem, arg1: u8) -> AssemblerOutputs;
    fn x64_orw_mi_raw(&mut self, arg0: &GprMem, arg1: u16) -> AssemblerOutputs;
    fn x64_orl_mi_raw(&mut self, arg0: &GprMem, arg1: u32) -> AssemblerOutputs;
    fn x64_orq_mi_sxl_raw(&mut self, arg0: &GprMem, arg1: i32) -> AssemblerOutputs;
    fn x64_orl_mi_sxb_raw(&mut self, arg0: &GprMem, arg1: i8) -> AssemblerOutputs;
    fn x64_orq_mi_sxb_raw(&mut self, arg0: &GprMem, arg1: i8) -> AssemblerOutputs;
    fn x64_orb_mr_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_orw_mr_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_orl_mr_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_orq_mr_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_orb_rm_raw(&mut self, arg0: Gpr, arg1: &GprMem) -> AssemblerOutputs;
    fn x64_orw_rm_raw(&mut self, arg0: Gpr, arg1: &GprMem) -> AssemblerOutputs;
    fn x64_orl_rm_raw(&mut self, arg0: Gpr, arg1: &GprMem) -> AssemblerOutputs;
    fn x64_orq_rm_raw(&mut self, arg0: Gpr, arg1: &GprMem) -> AssemblerOutputs;
    fn x64_lock_orb_mi_raw(&mut self, arg0: &Amode, arg1: u8) -> AssemblerOutputs;
    fn x64_lock_orw_mi_raw(&mut self, arg0: &Amode, arg1: u16) -> AssemblerOutputs;
    fn x64_lock_orl_mi_raw(&mut self, arg0: &Amode, arg1: u32) -> AssemblerOutputs;
    fn x64_lock_orq_mi_sxl_raw(&mut self, arg0: &Amode, arg1: i32) -> AssemblerOutputs;
    fn x64_lock_orl_mi_sxb_raw(&mut self, arg0: &Amode, arg1: i8) -> AssemblerOutputs;
    fn x64_lock_orq_mi_sxb_raw(&mut self, arg0: &Amode, arg1: i8) -> AssemblerOutputs;
    fn x64_lock_orb_mr_raw(&mut self, arg0: &Amode, arg1: Gpr) -> AssemblerOutputs;
    fn x64_lock_orw_mr_raw(&mut self, arg0: &Amode, arg1: Gpr) -> AssemblerOutputs;
    fn x64_lock_orl_mr_raw(&mut self, arg0: &Amode, arg1: Gpr) -> AssemblerOutputs;
    fn x64_lock_orq_mr_raw(&mut self, arg0: &Amode, arg1: Gpr) -> AssemblerOutputs;
    fn x64_orps_a_raw(&mut self, arg0: Xmm, arg1: &XmmMemAligned) -> AssemblerOutputs;
    fn x64_orpd_a_raw(&mut self, arg0: Xmm, arg1: &XmmMemAligned) -> AssemblerOutputs;
    fn x64_shldw_mri_raw(&mut self, arg0: &GprMem, arg1: Gpr, arg2: u8) -> AssemblerOutputs;
    fn x64_shldw_mrc_raw(&mut self, arg0: &GprMem, arg1: Gpr, arg2: Gpr) -> AssemblerOutputs;
    fn x64_shldl_mri_raw(&mut self, arg0: &GprMem, arg1: Gpr, arg2: u8) -> AssemblerOutputs;
    fn x64_shldq_mri_raw(&mut self, arg0: &GprMem, arg1: Gpr, arg2: u8) -> AssemblerOutputs;
    fn x64_shldl_mrc_raw(&mut self, arg0: &GprMem, arg1: Gpr, arg2: Gpr) -> AssemblerOutputs;
    fn x64_shldq_mrc_raw(&mut self, arg0: &GprMem, arg1: Gpr, arg2: Gpr) -> AssemblerOutputs;
    fn x64_subb_i_raw(&mut self, arg0: Gpr, arg1: u8) -> AssemblerOutputs;
    fn x64_subw_i_raw(&mut self, arg0: Gpr, arg1: u16) -> AssemblerOutputs;
    fn x64_subl_i_raw(&mut self, arg0: Gpr, arg1: u32) -> AssemblerOutputs;
    fn x64_subq_i_sxl_raw(&mut self, arg0: Gpr, arg1: i32) -> AssemblerOutputs;
    fn x64_subb_mi_raw(&mut self, arg0: &GprMem, arg1: u8) -> AssemblerOutputs;
    fn x64_subw_mi_raw(&mut self, arg0: &GprMem, arg1: u16) -> AssemblerOutputs;
    fn x64_subl_mi_raw(&mut self, arg0: &GprMem, arg1: u32) -> AssemblerOutputs;
    fn x64_subq_mi_sxl_raw(&mut self, arg0: &GprMem, arg1: i32) -> AssemblerOutputs;
    fn x64_subl_mi_sxb_raw(&mut self, arg0: &GprMem, arg1: i8) -> AssemblerOutputs;
    fn x64_subq_mi_sxb_raw(&mut self, arg0: &GprMem, arg1: i8) -> AssemblerOutputs;
    fn x64_subb_mr_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_subw_mr_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_subl_mr_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_subq_mr_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_subb_rm_raw(&mut self, arg0: Gpr, arg1: &GprMem) -> AssemblerOutputs;
    fn x64_subw_rm_raw(&mut self, arg0: Gpr, arg1: &GprMem) -> AssemblerOutputs;
    fn x64_subl_rm_raw(&mut self, arg0: Gpr, arg1: &GprMem) -> AssemblerOutputs;
    fn x64_subq_rm_raw(&mut self, arg0: Gpr, arg1: &GprMem) -> AssemblerOutputs;
    fn x64_sbbb_i_raw(&mut self, arg0: Gpr, arg1: u8) -> AssemblerOutputs;
    fn x64_sbbw_i_raw(&mut self, arg0: Gpr, arg1: u16) -> AssemblerOutputs;
    fn x64_sbbl_i_raw(&mut self, arg0: Gpr, arg1: u32) -> AssemblerOutputs;
    fn x64_sbbq_i_sxl_raw(&mut self, arg0: Gpr, arg1: i32) -> AssemblerOutputs;
    fn x64_sbbb_mi_raw(&mut self, arg0: &GprMem, arg1: u8) -> AssemblerOutputs;
    fn x64_sbbw_mi_raw(&mut self, arg0: &GprMem, arg1: u16) -> AssemblerOutputs;
    fn x64_sbbl_mi_raw(&mut self, arg0: &GprMem, arg1: u32) -> AssemblerOutputs;
    fn x64_sbbq_mi_sxl_raw(&mut self, arg0: &GprMem, arg1: i32) -> AssemblerOutputs;
    fn x64_sbbl_mi_sxb_raw(&mut self, arg0: &GprMem, arg1: i8) -> AssemblerOutputs;
    fn x64_sbbq_mi_sxb_raw(&mut self, arg0: &GprMem, arg1: i8) -> AssemblerOutputs;
    fn x64_sbbb_mr_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_sbbw_mr_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_sbbl_mr_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_sbbq_mr_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_sbbb_rm_raw(&mut self, arg0: Gpr, arg1: &GprMem) -> AssemblerOutputs;
    fn x64_sbbw_rm_raw(&mut self, arg0: Gpr, arg1: &GprMem) -> AssemblerOutputs;
    fn x64_sbbl_rm_raw(&mut self, arg0: Gpr, arg1: &GprMem) -> AssemblerOutputs;
    fn x64_sbbq_rm_raw(&mut self, arg0: Gpr, arg1: &GprMem) -> AssemblerOutputs;
    fn x64_lock_subb_mi_raw(&mut self, arg0: &Amode, arg1: u8) -> AssemblerOutputs;
    fn x64_lock_subw_mi_raw(&mut self, arg0: &Amode, arg1: u16) -> AssemblerOutputs;
    fn x64_lock_subl_mi_raw(&mut self, arg0: &Amode, arg1: u32) -> AssemblerOutputs;
    fn x64_lock_subq_mi_sxl_raw(&mut self, arg0: &Amode, arg1: i32) -> AssemblerOutputs;
    fn x64_lock_subl_mi_sxb_raw(&mut self, arg0: &Amode, arg1: i8) -> AssemblerOutputs;
    fn x64_lock_subq_mi_sxb_raw(&mut self, arg0: &Amode, arg1: i8) -> AssemblerOutputs;
    fn x64_lock_subb_mr_raw(&mut self, arg0: &Amode, arg1: Gpr) -> AssemblerOutputs;
    fn x64_lock_subw_mr_raw(&mut self, arg0: &Amode, arg1: Gpr) -> AssemblerOutputs;
    fn x64_lock_subl_mr_raw(&mut self, arg0: &Amode, arg1: Gpr) -> AssemblerOutputs;
    fn x64_lock_subq_mr_raw(&mut self, arg0: &Amode, arg1: Gpr) -> AssemblerOutputs;
    fn x64_lock_sbbb_mi_raw(&mut self, arg0: &Amode, arg1: u8) -> AssemblerOutputs;
    fn x64_lock_sbbw_mi_raw(&mut self, arg0: &Amode, arg1: u16) -> AssemblerOutputs;
    fn x64_lock_sbbl_mi_raw(&mut self, arg0: &Amode, arg1: u32) -> AssemblerOutputs;
    fn x64_lock_sbbq_mi_sxl_raw(&mut self, arg0: &Amode, arg1: i32) -> AssemblerOutputs;
    fn x64_lock_sbbl_mi_sxb_raw(&mut self, arg0: &Amode, arg1: i8) -> AssemblerOutputs;
    fn x64_lock_sbbq_mi_sxb_raw(&mut self, arg0: &Amode, arg1: i8) -> AssemblerOutputs;
    fn x64_lock_sbbb_mr_raw(&mut self, arg0: &Amode, arg1: Gpr) -> AssemblerOutputs;
    fn x64_lock_sbbw_mr_raw(&mut self, arg0: &Amode, arg1: Gpr) -> AssemblerOutputs;
    fn x64_lock_sbbl_mr_raw(&mut self, arg0: &Amode, arg1: Gpr) -> AssemblerOutputs;
    fn x64_lock_sbbq_mr_raw(&mut self, arg0: &Amode, arg1: Gpr) -> AssemblerOutputs;
    fn x64_subss_a_raw(&mut self, arg0: Xmm, arg1: &XmmMem) -> AssemblerOutputs;
    fn x64_subsd_a_raw(&mut self, arg0: Xmm, arg1: &XmmMem) -> AssemblerOutputs;
    fn x64_subps_a_raw(&mut self, arg0: Xmm, arg1: &XmmMemAligned) -> AssemblerOutputs;
    fn x64_subpd_a_raw(&mut self, arg0: Xmm, arg1: &XmmMemAligned) -> AssemblerOutputs;
    fn x64_xorb_i_raw(&mut self, arg0: Gpr, arg1: u8) -> AssemblerOutputs;
    fn x64_xorw_i_raw(&mut self, arg0: Gpr, arg1: u16) -> AssemblerOutputs;
    fn x64_xorl_i_raw(&mut self, arg0: Gpr, arg1: u32) -> AssemblerOutputs;
    fn x64_xorq_i_sxl_raw(&mut self, arg0: Gpr, arg1: i32) -> AssemblerOutputs;
    fn x64_xorb_mi_raw(&mut self, arg0: &GprMem, arg1: u8) -> AssemblerOutputs;
    fn x64_xorw_mi_raw(&mut self, arg0: &GprMem, arg1: u16) -> AssemblerOutputs;
    fn x64_xorl_mi_raw(&mut self, arg0: &GprMem, arg1: u32) -> AssemblerOutputs;
    fn x64_xorq_mi_sxl_raw(&mut self, arg0: &GprMem, arg1: i32) -> AssemblerOutputs;
    fn x64_xorl_mi_sxb_raw(&mut self, arg0: &GprMem, arg1: i8) -> AssemblerOutputs;
    fn x64_xorq_mi_sxb_raw(&mut self, arg0: &GprMem, arg1: i8) -> AssemblerOutputs;
    fn x64_xorb_mr_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_xorw_mr_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_xorl_mr_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_xorq_mr_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_xorb_rm_raw(&mut self, arg0: Gpr, arg1: &GprMem) -> AssemblerOutputs;
    fn x64_xorw_rm_raw(&mut self, arg0: Gpr, arg1: &GprMem) -> AssemblerOutputs;
    fn x64_xorl_rm_raw(&mut self, arg0: Gpr, arg1: &GprMem) -> AssemblerOutputs;
    fn x64_xorq_rm_raw(&mut self, arg0: Gpr, arg1: &GprMem) -> AssemblerOutputs;
    fn x64_lock_xorb_mi_raw(&mut self, arg0: &Amode, arg1: u8) -> AssemblerOutputs;
    fn x64_lock_xorw_mi_raw(&mut self, arg0: &Amode, arg1: u16) -> AssemblerOutputs;
    fn x64_lock_xorl_mi_raw(&mut self, arg0: &Amode, arg1: u32) -> AssemblerOutputs;
    fn x64_lock_xorq_mi_sxl_raw(&mut self, arg0: &Amode, arg1: i32) -> AssemblerOutputs;
    fn x64_lock_xorl_mi_sxb_raw(&mut self, arg0: &Amode, arg1: i8) -> AssemblerOutputs;
    fn x64_lock_xorq_mi_sxb_raw(&mut self, arg0: &Amode, arg1: i8) -> AssemblerOutputs;
    fn x64_lock_xorb_mr_raw(&mut self, arg0: &Amode, arg1: Gpr) -> AssemblerOutputs;
    fn x64_lock_xorw_mr_raw(&mut self, arg0: &Amode, arg1: Gpr) -> AssemblerOutputs;
    fn x64_lock_xorl_mr_raw(&mut self, arg0: &Amode, arg1: Gpr) -> AssemblerOutputs;
    fn x64_lock_xorq_mr_raw(&mut self, arg0: &Amode, arg1: Gpr) -> AssemblerOutputs;
    fn x64_xorps_a_raw(&mut self, arg0: Xmm, arg1: &XmmMemAligned) -> AssemblerOutputs;
    fn x64_xorpd_a_raw(&mut self, arg0: Xmm, arg1: &XmmMemAligned) -> AssemblerOutputs;
}

pub trait ContextIter {
    type Context;
    type Output;
    fn next(&mut self, ctx: &mut Self::Context) -> Option<Self::Output>;
    fn size_hint(&self) -> (usize, Option<usize>) { (0, None) }
}

pub trait IntoContextIter {
    type Context;
    type Output;
    type IntoIter: ContextIter<Context = Self::Context, Output = Self::Output>;
    fn into_context_iter(self) -> Self::IntoIter;
}

pub trait Length {
    fn len(&self) -> usize;
}

impl<T> Length for std::vec::Vec<T> {
    fn len(&self) -> usize {
        std::vec::Vec::len(self)
    }
}

pub struct ContextIterWrapper<I, C> {
    iter: I,
    _ctx: std::marker::PhantomData<C>,
}
impl<I: Default, C> Default for ContextIterWrapper<I, C> {
    fn default() -> Self {
        ContextIterWrapper {
            iter: I::default(),
            _ctx: std::marker::PhantomData
        }
    }
}
impl<I, C> std::ops::Deref for ContextIterWrapper<I, C> {
    type Target = I;
    fn deref(&self) -> &I {
        &self.iter
    }
}
impl<I, C> std::ops::DerefMut for ContextIterWrapper<I, C> {
    fn deref_mut(&mut self) -> &mut I {
        &mut self.iter
    }
}
impl<I: Iterator, C: Context> From<I> for ContextIterWrapper<I, C> {
    fn from(iter: I) -> Self {
        Self { iter, _ctx: std::marker::PhantomData }
    }
}
impl<I: Iterator, C: Context> ContextIter for ContextIterWrapper<I, C> {
    type Context = C;
    type Output = I::Item;
    fn next(&mut self, _ctx: &mut Self::Context) -> Option<Self::Output> {
        self.iter.next()
    }
    fn size_hint(&self) -> (usize, Option<usize>) {
        self.iter.size_hint()
    }
}
impl<I: IntoIterator, C: Context> IntoContextIter for ContextIterWrapper<I, C> {
    type Context = C;
    type Output = I::Item;
    type IntoIter = ContextIterWrapper<I::IntoIter, C>;
    fn into_context_iter(self) -> Self::IntoIter {
        ContextIterWrapper {
            iter: self.iter.into_iter(),
            _ctx: std::marker::PhantomData
        }
    }
}
impl<T, E: Extend<T>, C> Extend<T> for ContextIterWrapper<E, C> {
    fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
        self.iter.extend(iter);
    }
}
impl<L: Length, C> Length for ContextIterWrapper<L, C> {
    fn len(&self) -> usize {
        self.iter.len()
    }
}
           

/// Internal type MultiReg: defined at src\prelude_lower.isle line 17.
#[derive(Clone, Debug)]
pub enum MultiReg {
    Empty,
    One {
        a: Reg,
    },
    Two {
        a: Reg,
        b: Reg,
    },
    Three {
        a: Reg,
        b: Reg,
        c: Reg,
    },
    Four {
        a: Reg,
        b: Reg,
        c: Reg,
        d: Reg,
    },
}

/// Internal type SideEffectNoResult: defined at src\prelude_lower.isle line 422.
#[derive(Clone, Debug)]
pub enum SideEffectNoResult {
    Inst {
        inst: MInst,
    },
    Inst2 {
        inst1: MInst,
        inst2: MInst,
    },
    Inst3 {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
    },
}

/// Internal type ProducesFlags: defined at src\prelude_lower.isle line 475.
#[derive(Clone, Debug)]
pub enum ProducesFlags {
    AlreadyExistingFlags,
    ProducesFlagsSideEffect {
        inst: MInst,
    },
    ProducesFlagsTwiceSideEffect {
        inst1: MInst,
        inst2: MInst,
    },
    ProducesFlagsReturnsReg {
        inst: MInst,
        result: Reg,
    },
    ProducesFlagsReturnsResultWithConsumer {
        inst: MInst,
        result: Reg,
    },
}

/// Internal type ConsumesAndProducesFlags: defined at src\prelude_lower.isle line 494.
#[derive(Clone, Debug)]
pub enum ConsumesAndProducesFlags {
    SideEffect {
        inst: MInst,
    },
    ReturnsReg {
        inst: MInst,
        result: Reg,
    },
}

/// Internal type ConsumesFlags: defined at src\prelude_lower.isle line 502.
#[derive(Clone, Debug)]
pub enum ConsumesFlags {
    ConsumesFlagsSideEffect {
        inst: MInst,
    },
    ConsumesFlagsSideEffect2 {
        inst1: MInst,
        inst2: MInst,
    },
    ConsumesFlagsReturnsResultWithProducer {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsReturnsReg {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsTwiceReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        result: ValueRegs,
    },
    ConsumesFlagsFourTimesReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
        inst4: MInst,
        result: ValueRegs,
    },
}

/// Internal type MInst: defined at src\isa\x64\inst.isle line 7.
#[derive(Clone)]
pub enum MInst {
    Nop {
        len: u8,
    },
    AluRmRVex {
        size: OperandSize,
        op: AluRmROpcode,
        src1: Gpr,
        src2: GprMem,
        dst: WritableGpr,
    },
    UnaryRmR {
        size: OperandSize,
        op: UnaryRmROpcode,
        src: GprMem,
        dst: WritableGpr,
    },
    UnaryRmRVex {
        size: OperandSize,
        op: UnaryRmRVexOpcode,
        src: GprMem,
        dst: WritableGpr,
    },
    UnaryRmRImmVex {
        size: OperandSize,
        op: UnaryRmRImmVexOpcode,
        src: GprMem,
        dst: WritableGpr,
        imm: u8,
    },
    Not {
        size: OperandSize,
        src: Gpr,
        dst: WritableGpr,
    },
    Neg {
        size: OperandSize,
        src: Gpr,
        dst: WritableGpr,
    },
    Div {
        size: OperandSize,
        sign: DivSignedness,
        trap: TrapCode,
        divisor: GprMem,
        dividend_lo: Gpr,
        dividend_hi: Gpr,
        dst_quotient: WritableGpr,
        dst_remainder: WritableGpr,
    },
    Div8 {
        sign: DivSignedness,
        trap: TrapCode,
        divisor: GprMem,
        dividend: Gpr,
        dst: WritableGpr,
    },
    Mul {
        size: OperandSize,
        signed: bool,
        src1: Gpr,
        src2: GprMem,
        dst_lo: WritableGpr,
        dst_hi: WritableGpr,
    },
    MulX {
        size: OperandSize,
        src1: Gpr,
        src2: GprMem,
        dst_lo: WritableGpr,
        dst_hi: WritableGpr,
    },
    Mul8 {
        signed: bool,
        src1: Gpr,
        src2: GprMem,
        dst: WritableGpr,
    },
    IMul {
        size: OperandSize,
        src1: Gpr,
        src2: GprMem,
        dst: WritableGpr,
    },
    IMulImm {
        size: OperandSize,
        src1: GprMem,
        src2: i32,
        dst: WritableGpr,
    },
    CheckedSRemSeq {
        size: OperandSize,
        dividend_lo: Gpr,
        dividend_hi: Gpr,
        divisor: Gpr,
        dst_quotient: WritableGpr,
        dst_remainder: WritableGpr,
    },
    CheckedSRemSeq8 {
        dividend: Gpr,
        divisor: Gpr,
        dst: WritableGpr,
    },
    SignExtendData {
        size: OperandSize,
        src: Gpr,
        dst: WritableGpr,
    },
    Imm {
        dst_size: OperandSize,
        simm64: u64,
        dst: WritableGpr,
    },
    MovRR {
        size: OperandSize,
        src: Gpr,
        dst: WritableGpr,
    },
    MovFromPReg {
        src: PReg,
        dst: WritableGpr,
    },
    MovToPReg {
        src: Gpr,
        dst: PReg,
    },
    MovzxRmR {
        ext_mode: ExtMode,
        src: GprMem,
        dst: WritableGpr,
    },
    Mov64MR {
        src: SyntheticAmode,
        dst: WritableGpr,
    },
    LoadEffectiveAddress {
        addr: SyntheticAmode,
        dst: WritableGpr,
        size: OperandSize,
    },
    MovsxRmR {
        ext_mode: ExtMode,
        src: GprMem,
        dst: WritableGpr,
    },
    MovImmM {
        size: OperandSize,
        simm32: i32,
        dst: SyntheticAmode,
    },
    MovRM {
        size: OperandSize,
        src: Gpr,
        dst: SyntheticAmode,
    },
    ShiftR {
        size: OperandSize,
        kind: ShiftKind,
        src: Gpr,
        num_bits: Imm8Gpr,
        dst: WritableGpr,
    },
    XmmRmiReg {
        opcode: SseOpcode,
        src1: Xmm,
        src2: XmmMemAlignedImm,
        dst: WritableXmm,
    },
    CmpRmiR {
        size: OperandSize,
        opcode: CmpOpcode,
        src1: Gpr,
        src2: GprMemImm,
    },
    Setcc {
        cc: CC,
        dst: WritableGpr,
    },
    Bswap {
        size: OperandSize,
        src: Gpr,
        dst: WritableGpr,
    },
    Cmove {
        size: OperandSize,
        cc: CC,
        consequent: GprMem,
        alternative: Gpr,
        dst: WritableGpr,
    },
    XmmCmove {
        ty: Type,
        cc: CC,
        consequent: Xmm,
        alternative: Xmm,
        dst: WritableXmm,
    },
    Push64 {
        src: GprMemImm,
    },
    Pop64 {
        dst: WritableGpr,
    },
    StackProbeLoop {
        tmp: WritableReg,
        frame_size: u32,
        guard_size: u32,
    },
    XmmRmR {
        op: SseOpcode,
        src1: Xmm,
        src2: XmmMemAligned,
        dst: WritableXmm,
    },
    XmmRmRUnaligned {
        op: SseOpcode,
        src1: Xmm,
        src2: XmmMem,
        dst: WritableXmm,
    },
    XmmRmRBlend {
        op: SseOpcode,
        src1: Xmm,
        src2: XmmMemAligned,
        mask: Xmm,
        dst: WritableXmm,
    },
    XmmRmiRVex {
        op: AvxOpcode,
        src1: Xmm,
        src2: XmmMemImm,
        dst: WritableXmm,
    },
    XmmRmRImmVex {
        op: AvxOpcode,
        src1: Xmm,
        src2: XmmMem,
        dst: WritableXmm,
        imm: u8,
    },
    XmmVexPinsr {
        op: AvxOpcode,
        src1: Xmm,
        src2: GprMem,
        dst: WritableXmm,
        imm: u8,
    },
    XmmRmRVex3 {
        op: AvxOpcode,
        src1: Xmm,
        src2: Xmm,
        src3: XmmMem,
        dst: WritableXmm,
    },
    XmmRmRBlendVex {
        op: AvxOpcode,
        src1: Xmm,
        src2: XmmMem,
        mask: Xmm,
        dst: WritableXmm,
    },
    XmmUnaryRmRVex {
        op: AvxOpcode,
        src: XmmMem,
        dst: WritableXmm,
    },
    XmmUnaryRmRImmVex {
        op: AvxOpcode,
        src: XmmMem,
        dst: WritableXmm,
        imm: u8,
    },
    XmmMovRMVex {
        op: AvxOpcode,
        src: Xmm,
        dst: SyntheticAmode,
    },
    XmmMovRMImmVex {
        op: AvxOpcode,
        src: Xmm,
        dst: SyntheticAmode,
        imm: u8,
    },
    XmmToGprImmVex {
        op: AvxOpcode,
        src: Xmm,
        dst: WritableGpr,
        imm: u8,
    },
    GprToXmmVex {
        op: AvxOpcode,
        src: GprMem,
        dst: WritableXmm,
        src_size: OperandSize,
    },
    XmmToGprVex {
        op: AvxOpcode,
        src: Xmm,
        dst: WritableGpr,
        dst_size: OperandSize,
    },
    XmmCmpRmRVex {
        op: AvxOpcode,
        src1: Xmm,
        src2: XmmMem,
    },
    XmmRmREvex {
        op: Avx512Opcode,
        src1: Xmm,
        src2: XmmMem,
        dst: WritableXmm,
    },
    XmmUnaryRmRImmEvex {
        op: Avx512Opcode,
        src: XmmMem,
        dst: WritableXmm,
        imm: u8,
    },
    XmmRmREvex3 {
        op: Avx512Opcode,
        src1: Xmm,
        src2: Xmm,
        src3: XmmMem,
        dst: WritableXmm,
    },
    XmmUnaryRmR {
        op: SseOpcode,
        src: XmmMemAligned,
        dst: WritableXmm,
    },
    XmmUnaryRmRUnaligned {
        op: SseOpcode,
        src: XmmMem,
        dst: WritableXmm,
    },
    XmmUnaryRmRImm {
        op: SseOpcode,
        src: XmmMemAligned,
        imm: u8,
        dst: WritableXmm,
    },
    XmmUnaryRmREvex {
        op: Avx512Opcode,
        src: XmmMem,
        dst: WritableXmm,
    },
    XmmMovRM {
        op: SseOpcode,
        src: Xmm,
        dst: SyntheticAmode,
    },
    XmmMovRMImm {
        op: SseOpcode,
        src: Xmm,
        dst: SyntheticAmode,
        imm: u8,
    },
    XmmToGpr {
        op: SseOpcode,
        src: Xmm,
        dst: WritableGpr,
        dst_size: OperandSize,
    },
    XmmToGprImm {
        op: SseOpcode,
        src: Xmm,
        dst: WritableGpr,
        imm: u8,
    },
    GprToXmm {
        op: SseOpcode,
        src: GprMem,
        dst: WritableXmm,
        src_size: OperandSize,
    },
    CvtIntToFloat {
        op: SseOpcode,
        src1: Xmm,
        src2: GprMem,
        dst: WritableXmm,
        src2_size: OperandSize,
    },
    CvtIntToFloatVex {
        op: AvxOpcode,
        src1: Xmm,
        src2: GprMem,
        dst: WritableXmm,
        src2_size: OperandSize,
    },
    CvtUint64ToFloatSeq {
        dst_size: OperandSize,
        src: Gpr,
        dst: WritableXmm,
        tmp_gpr1: WritableGpr,
        tmp_gpr2: WritableGpr,
    },
    CvtFloatToSintSeq {
        dst_size: OperandSize,
        src_size: OperandSize,
        is_saturating: bool,
        src: Xmm,
        dst: WritableGpr,
        tmp_gpr: WritableGpr,
        tmp_xmm: WritableXmm,
    },
    CvtFloatToUintSeq {
        dst_size: OperandSize,
        src_size: OperandSize,
        is_saturating: bool,
        src: Xmm,
        dst: WritableGpr,
        tmp_gpr: WritableGpr,
        tmp_xmm: WritableXmm,
        tmp_xmm2: WritableXmm,
    },
    XmmMinMaxSeq {
        size: OperandSize,
        is_min: bool,
        lhs: Xmm,
        rhs: Xmm,
        dst: WritableXmm,
    },
    XmmCmpRmR {
        op: SseOpcode,
        src1: Xmm,
        src2: XmmMemAligned,
    },
    XmmRmRImm {
        op: SseOpcode,
        src1: Reg,
        src2: RegMem,
        dst: WritableReg,
        imm: u8,
        size: OperandSize,
    },
    CallKnown {
        info: BoxCallInfo,
    },
    CallUnknown {
        info: BoxCallIndInfo,
    },
    ReturnCallKnown {
        info: BoxReturnCallInfo,
    },
    ReturnCallUnknown {
        info: BoxReturnCallIndInfo,
    },
    Args {
        args: VecArgPair,
    },
    Rets {
        rets: VecRetPair,
    },
    Ret {
        stack_bytes_to_pop: u32,
    },
    StackSwitchBasic {
        store_context_ptr: Gpr,
        load_context_ptr: Gpr,
        in_payload0: Gpr,
        out_payload0: WritableGpr,
    },
    JmpKnown {
        dst: MachLabel,
    },
    WinchJmpIf {
        cc: CC,
        taken: MachLabel,
    },
    JmpCond {
        cc: CC,
        taken: MachLabel,
        not_taken: MachLabel,
    },
    JmpCondOr {
        cc1: CC,
        cc2: CC,
        taken: MachLabel,
        not_taken: MachLabel,
    },
    JmpTableSeq {
        idx: Reg,
        tmp1: WritableReg,
        tmp2: WritableReg,
        default_target: MachLabel,
        targets: BoxVecMachLabel,
    },
    JmpUnknown {
        target: RegMem,
    },
    TrapIf {
        cc: CC,
        trap_code: TrapCode,
    },
    TrapIfAnd {
        cc1: CC,
        cc2: CC,
        trap_code: TrapCode,
    },
    TrapIfOr {
        cc1: CC,
        cc2: CC,
        trap_code: TrapCode,
    },
    Hlt,
    Ud2 {
        trap_code: TrapCode,
    },
    LoadExtName {
        dst: WritableReg,
        name: BoxExternalName,
        offset: i64,
        distance: RelocDistance,
    },
    LockCmpxchg {
        ty: Type,
        replacement: Reg,
        expected: Reg,
        mem: SyntheticAmode,
        dst_old: WritableReg,
    },
    LockCmpxchg16b {
        replacement_low: Reg,
        replacement_high: Reg,
        expected_low: Reg,
        expected_high: Reg,
        mem: BoxSyntheticAmode,
        dst_old_low: WritableReg,
        dst_old_high: WritableReg,
    },
    LockXadd {
        size: OperandSize,
        operand: Reg,
        mem: SyntheticAmode,
        dst_old: WritableReg,
    },
    Xchg {
        size: OperandSize,
        operand: Reg,
        mem: SyntheticAmode,
        dst_old: WritableReg,
    },
    AtomicRmwSeq {
        ty: Type,
        op: AtomicRmwSeqOp,
        mem: SyntheticAmode,
        operand: Reg,
        temp: WritableReg,
        dst_old: WritableReg,
    },
    Atomic128RmwSeq {
        op: Atomic128RmwSeqOp,
        mem: BoxSyntheticAmode,
        operand_low: Reg,
        operand_high: Reg,
        temp_low: WritableReg,
        temp_high: WritableReg,
        dst_old_low: WritableReg,
        dst_old_high: WritableReg,
    },
    Atomic128XchgSeq {
        mem: SyntheticAmode,
        operand_low: Reg,
        operand_high: Reg,
        dst_old_low: WritableReg,
        dst_old_high: WritableReg,
    },
    Fence {
        kind: FenceKind,
    },
    XmmUninitializedValue {
        dst: WritableXmm,
    },
    GprUninitializedValue {
        dst: WritableGpr,
    },
    ElfTlsGetAddr {
        symbol: ExternalName,
        dst: WritableGpr,
    },
    MachOTlsGetAddr {
        symbol: ExternalName,
        dst: WritableGpr,
    },
    CoffTlsGetAddr {
        symbol: ExternalName,
        dst: WritableGpr,
        tmp: WritableGpr,
    },
    Unwind {
        inst: UnwindInst,
    },
    DummyUse {
        reg: Reg,
    },
    External {
        inst: AssemblerInst,
    },
}

/// Internal type DivSignedness: defined at src\isa\x64\inst.isle line 821.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum DivSignedness {
    Signed,
    Unsigned,
}

/// Internal type AluRmROpcode: defined at src\isa\x64\inst.isle line 855.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum AluRmROpcode {
    Andn,
    Sarx,
    Shrx,
    Shlx,
    Bzhi,
}

/// Internal type UnaryRmRVexOpcode: defined at src\isa\x64\inst.isle line 869.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum UnaryRmRVexOpcode {
    Blsi,
    Blsmsk,
    Blsr,
}

/// Internal type UnaryRmRImmVexOpcode: defined at src\isa\x64\inst.isle line 874.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum UnaryRmRImmVexOpcode {
    Rorx,
}

/// Internal type Amode: defined at src\isa\x64\inst.isle line 1114.
#[derive(Clone, Debug)]
pub enum Amode {
    ImmReg {
        simm32: i32,
        base: Reg,
        flags: MemFlags,
    },
    ImmRegRegShift {
        simm32: i32,
        base: Gpr,
        index: Gpr,
        shift: u8,
        flags: MemFlags,
    },
    RipRelative {
        target: MachLabel,
    },
}

/// Internal type AvxOpcode: defined at src\isa\x64\inst.isle line 1348.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum AvxOpcode {
    Vfmadd213ss,
    Vfmadd213sd,
    Vfmadd213ps,
    Vfmadd213pd,
    Vfmadd132ss,
    Vfmadd132sd,
    Vfmadd132ps,
    Vfmadd132pd,
    Vfnmadd213ss,
    Vfnmadd213sd,
    Vfnmadd213ps,
    Vfnmadd213pd,
    Vfnmadd132ss,
    Vfnmadd132sd,
    Vfnmadd132ps,
    Vfnmadd132pd,
    Vfmsub213ss,
    Vfmsub213sd,
    Vfmsub213ps,
    Vfmsub213pd,
    Vfmsub132ss,
    Vfmsub132sd,
    Vfmsub132ps,
    Vfmsub132pd,
    Vfnmsub213ss,
    Vfnmsub213sd,
    Vfnmsub213ps,
    Vfnmsub213pd,
    Vfnmsub132ss,
    Vfnmsub132sd,
    Vfnmsub132ps,
    Vfnmsub132pd,
    Vcmpps,
    Vcmppd,
    Vpsrlw,
    Vpsrld,
    Vpsrlq,
    Vpaddb,
    Vpaddw,
    Vpaddd,
    Vpaddq,
    Vpaddsb,
    Vpaddsw,
    Vpaddusb,
    Vpaddusw,
    Vpsubb,
    Vpsubw,
    Vpsubd,
    Vpsubq,
    Vpsubsb,
    Vpsubsw,
    Vpsubusb,
    Vpsubusw,
    Vpavgb,
    Vpavgw,
    Vpand,
    Vandps,
    Vandpd,
    Vpor,
    Vorps,
    Vorpd,
    Vpxor,
    Vxorps,
    Vxorpd,
    Vpmullw,
    Vpmulld,
    Vpmulhw,
    Vpmulhd,
    Vpmulhrsw,
    Vpmulhuw,
    Vpmuldq,
    Vpmuludq,
    Vpunpckhwd,
    Vpunpcklwd,
    Vunpcklps,
    Vunpcklpd,
    Vunpckhps,
    Vandnps,
    Vandnpd,
    Vpandn,
    Vaddps,
    Vaddpd,
    Vsubps,
    Vsubpd,
    Vmulps,
    Vmulpd,
    Vdivps,
    Vdivpd,
    Vpcmpeqb,
    Vpcmpeqw,
    Vpcmpeqd,
    Vpcmpeqq,
    Vpcmpgtb,
    Vpcmpgtw,
    Vpcmpgtd,
    Vpcmpgtq,
    Vminps,
    Vminpd,
    Vmaxps,
    Vmaxpd,
    Vblendvpd,
    Vblendvps,
    Vpblendvb,
    Vmovlhps,
    Vpmaxsb,
    Vpmaxsw,
    Vpmaxsd,
    Vpminsb,
    Vpminsw,
    Vpminsd,
    Vpmaxub,
    Vpmaxuw,
    Vpmaxud,
    Vpminub,
    Vpminuw,
    Vpminud,
    Vpunpcklbw,
    Vpunpckhbw,
    Vpacksswb,
    Vpackssdw,
    Vpackuswb,
    Vpackusdw,
    Vpalignr,
    Vpinsrb,
    Vpinsrw,
    Vpinsrd,
    Vpinsrq,
    Vpmaddwd,
    Vpmaddubsw,
    Vinsertps,
    Vpshufb,
    Vshufps,
    Vpsllw,
    Vpslld,
    Vpsllq,
    Vpsraw,
    Vpsrad,
    Vpmovsxbw,
    Vpmovzxbw,
    Vpmovsxwd,
    Vpmovzxwd,
    Vpmovsxdq,
    Vpmovzxdq,
    Vaddss,
    Vaddsd,
    Vmulss,
    Vmulsd,
    Vsubss,
    Vsubsd,
    Vdivss,
    Vdivsd,
    Vpabsb,
    Vpabsw,
    Vpabsd,
    Vminss,
    Vminsd,
    Vmaxss,
    Vmaxsd,
    Vsqrtps,
    Vsqrtpd,
    Vroundps,
    Vroundpd,
    Vcvtdq2pd,
    Vcvtdq2ps,
    Vcvtpd2ps,
    Vcvtps2pd,
    Vcvttpd2dq,
    Vcvttps2dq,
    Vphaddw,
    Vphaddd,
    Vpunpckhdq,
    Vpunpckldq,
    Vpunpckhqdq,
    Vpunpcklqdq,
    Vpshuflw,
    Vpshufhw,
    Vpshufd,
    Vmovss,
    Vmovsd,
    Vmovups,
    Vmovupd,
    Vmovdqu,
    Vpextrb,
    Vpextrw,
    Vpextrd,
    Vpextrq,
    Vpblendw,
    Vmovddup,
    Vpbroadcastb,
    Vpbroadcastw,
    Vpbroadcastd,
    Vbroadcastss,
    Vmovd,
    Vmovq,
    Vmovmskps,
    Vmovmskpd,
    Vpmovmskb,
    Vcvtsi2ss,
    Vcvtsi2sd,
    Vcvtss2sd,
    Vcvtsd2ss,
    Vsqrtss,
    Vsqrtsd,
    Vroundss,
    Vroundsd,
    Vucomiss,
    Vucomisd,
    Vptest,
}

/// Internal type Avx512Opcode: defined at src\isa\x64\inst.isle line 1559.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum Avx512Opcode {
    Vcvtudq2ps,
    Vpabsq,
    Vpermi2b,
    Vpmullq,
    Vpopcntb,
    Vpsraq,
    VpsraqImm,
}

/// Internal type RegisterClass: defined at src\isa\x64\inst.isle line 1850.
#[derive(Clone, Debug)]
pub enum RegisterClass {
    Gpr {
        single_register: bool,
    },
    Xmm,
}

/// Internal type ExtendKind: defined at src\isa\x64\inst.isle line 2334.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ExtendKind {
    Sign,
    Zero,
}

/// Internal type ProduceFlagsOp: defined at src\isa\x64\inst.isle line 2748.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ProduceFlagsOp {
    Add,
    Sub,
}

/// Internal type ChainFlagsOp: defined at src\isa\x64\inst.isle line 2763.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ChainFlagsOp {
    Adc,
    Sbb,
}

/// Internal type ProduceFlagsSideEffectOp: defined at src\isa\x64\inst.isle line 2777.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ProduceFlagsSideEffectOp {
    Or,
    Sbb,
}

/// Internal type ZeroCond: defined at src\isa\x64\inst.isle line 5156.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ZeroCond {
    Zero,
    NonZero,
}

/// Internal type IcmpCondResult: defined at src\isa\x64\inst.isle line 5273.
#[derive(Clone, Debug)]
pub enum IcmpCondResult {
    Condition {
        producer: ProducesFlags,
        cc: CC,
    },
}

/// Internal type FcmpCondResult: defined at src\isa\x64\inst.isle line 5365.
#[derive(Clone, Debug)]
pub enum FcmpCondResult {
    Condition {
        producer: ProducesFlags,
        cc: CC,
    },
    AndCondition {
        producer: ProducesFlags,
        cc1: CC,
        cc2: CC,
    },
    OrCondition {
        producer: ProducesFlags,
        cc1: CC,
        cc2: CC,
    },
}

/// Internal type AtomicRmwSeqOp: defined at src\isa\x64\inst.isle line 5565.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum AtomicRmwSeqOp {
    And,
    Nand,
    Or,
    Xor,
    Umin,
    Umax,
    Smin,
    Smax,
}

/// Internal type Atomic128RmwSeqOp: defined at src\isa\x64\inst.isle line 5585.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum Atomic128RmwSeqOp {
    Add,
    Sub,
    And,
    Nand,
    Or,
    Xor,
    Umin,
    Umax,
    Smin,
    Smax,
}

/// Internal type AssemblerOutputs: defined at <OUT_DIR>\assembler.isle line 0.
#[derive(Clone, Debug)]
pub enum AssemblerOutputs {
    SideEffect {
        inst: MInst,
    },
    RetGpr {
        inst: MInst,
        gpr: Gpr,
    },
    RetXmm {
        inst: MInst,
        xmm: Xmm,
    },
}

// Generated as internal constructor for term ty_shift_mask.
pub fn constructor_ty_shift_mask<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> u64 {
    let v1 = C::lane_type(ctx, arg0);
    let v2 = C::ty_bits(ctx, v1);
    let v3 = C::u8_as_u64(ctx, v2);
    let v5 = C::u64_sub(ctx, v3, 0x1_u64);
    // Rule at src\prelude.isle line 495.
    return v5;
}

// Generated as internal constructor for term output_reg.
pub fn constructor_output_reg<C: Context>(
    ctx: &mut C,
    arg0: Reg,
) -> InstOutput {
    let v1 = C::value_reg(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src\prelude_lower.isle line 82.
    return v2;
}

// Generated as internal constructor for term output_value.
pub fn constructor_output_value<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> InstOutput {
    let v1 = C::put_in_regs(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src\prelude_lower.isle line 86.
    return v2;
}

// Generated as internal constructor for term temp_reg.
pub fn constructor_temp_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> Reg {
    let v1 = C::temp_writable_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src\prelude_lower.isle line 106.
    return v2;
}

// Generated as internal constructor for term value_regs_range.
pub fn constructor_value_regs_range<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
) -> Range {
    let v2 = C::value_regs_len(ctx, arg0);
    let v3 = C::range(ctx, 0x0_usize, v2);
    // Rule at src\prelude_lower.isle line 160.
    return v3;
}

// Generated as internal constructor for term lo_reg.
pub fn constructor_lo_reg<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> Reg {
    let v1 = C::put_in_regs(ctx, arg0);
    let v3 = C::value_regs_get(ctx, v1, 0x0_usize);
    // Rule at src\prelude_lower.isle line 171.
    return v3;
}

// Generated as internal constructor for term multi_reg_to_pair_and_single.
pub fn constructor_multi_reg_to_pair_and_single<C: Context>(
    ctx: &mut C,
    arg0: &MultiReg,
) -> InstOutput {
    if let &MultiReg::Three {
        a: v1,
        b: v2,
        c: v3,
    } = arg0 {
        let v4 = C::value_regs(ctx, v1, v2);
        let v5 = C::value_reg(ctx, v3);
        let v6 = C::output_pair(ctx, v4, v5);
        // Rule at src\prelude_lower.isle line 182.
        return v6;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "multi_reg_to_pair_and_single", "src\\prelude_lower.isle line 181")
}

// Generated as internal constructor for term multi_reg_to_pair.
pub fn constructor_multi_reg_to_pair<C: Context>(
    ctx: &mut C,
    arg0: &MultiReg,
) -> InstOutput {
    if let &MultiReg::Two {
        a: v1,
        b: v2,
    } = arg0 {
        let v3 = C::value_regs(ctx, v1, v2);
        let v4 = C::output(ctx, v3);
        // Rule at src\prelude_lower.isle line 187.
        return v4;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "multi_reg_to_pair", "src\\prelude_lower.isle line 186")
}

// Generated as internal constructor for term multi_reg_to_single.
pub fn constructor_multi_reg_to_single<C: Context>(
    ctx: &mut C,
    arg0: &MultiReg,
) -> InstOutput {
    if let &MultiReg::One {
        a: v1,
    } = arg0 {
        let v2 = C::value_reg(ctx, v1);
        let v3 = C::output(ctx, v2);
        // Rule at src\prelude_lower.isle line 192.
        return v3;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "multi_reg_to_single", "src\\prelude_lower.isle line 191")
}

// Generated as internal constructor for term emit_side_effect.
pub fn constructor_emit_side_effect<C: Context>(
    ctx: &mut C,
    arg0: &SideEffectNoResult,
) -> Unit {
    match arg0 {
        &SideEffectNoResult::Inst {
            inst: ref v1,
        } => {
            let v2 = C::emit(ctx, v1);
            // Rule at src\prelude_lower.isle line 434.
            return v2;
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v3,
            inst2: ref v4,
        } => {
            let v5 = C::emit(ctx, v3);
            let v6 = C::emit(ctx, v4);
            // Rule at src\prelude_lower.isle line 436.
            return v6;
        }
        &SideEffectNoResult::Inst3 {
            inst1: ref v7,
            inst2: ref v8,
            inst3: ref v9,
        } => {
            let v10 = C::emit(ctx, v7);
            let v11 = C::emit(ctx, v8);
            let v12 = C::emit(ctx, v9);
            // Rule at src\prelude_lower.isle line 439.
            return v12;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "emit_side_effect", "src\\prelude_lower.isle line 433")
}

// Generated as internal constructor for term side_effect.
pub fn constructor_side_effect<C: Context>(
    ctx: &mut C,
    arg0: &SideEffectNoResult,
) -> InstOutput {
    let v1 = constructor_emit_side_effect(ctx, arg0);
    let v2 = C::output_none(ctx);
    // Rule at src\prelude_lower.isle line 449.
    return v2;
}

// Generated as internal constructor for term side_effect_concat.
pub fn constructor_side_effect_concat<C: Context>(
    ctx: &mut C,
    arg0: &SideEffectNoResult,
    arg1: &SideEffectNoResult,
) -> SideEffectNoResult {
    match arg0 {
        &SideEffectNoResult::Inst {
            inst: ref v1,
        } => {
            match arg1 {
                &SideEffectNoResult::Inst {
                    inst: ref v3,
                } => {
                    let v4 = SideEffectNoResult::Inst2 {
                        inst1: v1.clone(),
                        inst2: v3.clone(),
                    };
                    // Rule at src\prelude_lower.isle line 454.
                    return v4;
                }
                &SideEffectNoResult::Inst2 {
                    inst1: ref v5,
                    inst2: ref v6,
                } => {
                    let v7 = SideEffectNoResult::Inst3 {
                        inst1: v1.clone(),
                        inst2: v5.clone(),
                        inst3: v6.clone(),
                    };
                    // Rule at src\prelude_lower.isle line 456.
                    return v7;
                }
                _ => {}
            }
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v8,
            inst2: ref v9,
        } => {
            if let &SideEffectNoResult::Inst {
                inst: ref v3,
            } = arg1 {
                let v10 = SideEffectNoResult::Inst3 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                    inst3: v3.clone(),
                };
                // Rule at src\prelude_lower.isle line 458.
                return v10;
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "side_effect_concat", "src\\prelude_lower.isle line 453")
}

// Generated as internal constructor for term side_effect_as_invalid.
pub fn constructor_side_effect_as_invalid<C: Context>(
    ctx: &mut C,
    arg0: &SideEffectNoResult,
) -> InstOutput {
    let v1 = constructor_side_effect(ctx, arg0);
    let v2 = C::invalid_reg(ctx);
    let v3 = constructor_output_reg(ctx, v2);
    // Rule at src\prelude_lower.isle line 464.
    return v3;
}

// Generated as internal constructor for term produces_flags_concat.
pub fn constructor_produces_flags_concat<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ProducesFlags,
) -> ProducesFlags {
    if let &ProducesFlags::ProducesFlagsSideEffect {
        inst: ref v1,
    } = arg0 {
        if let &ProducesFlags::ProducesFlagsSideEffect {
            inst: ref v3,
        } = arg1 {
            let v4 = ProducesFlags::ProducesFlagsTwiceSideEffect {
                inst1: v1.clone(),
                inst2: v3.clone(),
            };
            // Rule at src\prelude_lower.isle line 490.
            return v4;
        }
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "produces_flags_concat", "src\\prelude_lower.isle line 489")
}

// Generated as internal constructor for term produces_flags_get_reg.
pub fn constructor_produces_flags_get_reg<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
) -> Reg {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            // Rule at src\prelude_lower.isle line 520.
            return v2;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v3,
            result: v4,
        } => {
            // Rule at src\prelude_lower.isle line 521.
            return v4;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "produces_flags_get_reg", "src\\prelude_lower.isle line 519")
}

// Generated as internal constructor for term produces_flags_ignore.
pub fn constructor_produces_flags_ignore<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
) -> ProducesFlags {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            let v3 = ProducesFlags::ProducesFlagsSideEffect {
                inst: v1.clone(),
            };
            // Rule at src\prelude_lower.isle line 526.
            return v3;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v4,
            result: v5,
        } => {
            let v6 = ProducesFlags::ProducesFlagsSideEffect {
                inst: v4.clone(),
            };
            // Rule at src\prelude_lower.isle line 528.
            return v6;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "produces_flags_ignore", "src\\prelude_lower.isle line 525")
}

// Generated as internal constructor for term consumes_flags_concat.
pub fn constructor_consumes_flags_concat<C: Context>(
    ctx: &mut C,
    arg0: &ConsumesFlags,
    arg1: &ConsumesFlags,
) -> ConsumesFlags {
    match arg0 {
        &ConsumesFlags::ConsumesFlagsSideEffect {
            inst: ref v8,
        } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect {
                inst: ref v9,
            } = arg1 {
                let v10 = ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                };
                // Rule at src\prelude_lower.isle line 541.
                return v10;
            }
        }
        &ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            if let &ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: ref v4,
                result: v5,
            } = arg1 {
                let v6 = C::value_regs(ctx, v2, v5);
                let v7 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: v1.clone(),
                    inst2: v4.clone(),
                    result: v6,
                };
                // Rule at src\prelude_lower.isle line 535.
                return v7;
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "consumes_flags_concat", "src\\prelude_lower.isle line 534")
}

// Generated as internal constructor for term with_flags.
pub fn constructor_with_flags<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> ValueRegs {
    match arg0 {
        &ProducesFlags::ProducesFlagsSideEffect {
            inst: ref v12,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v16 = C::emit(ctx, v13);
                    let v17 = C::value_reg(ctx, v14);
                    // Rule at src\prelude_lower.isle line 572.
                    return v17;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v21 = C::emit(ctx, v18);
                    let v22 = C::emit(ctx, v19);
                    // Rule at src\prelude_lower.isle line 578.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v28 = C::emit(ctx, v23);
                    let v29 = C::emit(ctx, v24);
                    let v30 = C::emit(ctx, v25);
                    let v31 = C::emit(ctx, v26);
                    // Rule at src\prelude_lower.isle line 590.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v32,
            inst2: ref v33,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v36 = C::emit(ctx, v13);
                    let v37 = C::value_reg(ctx, v14);
                    // Rule at src\prelude_lower.isle line 606.
                    return v37;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v38 = C::emit(ctx, v18);
                    let v39 = C::emit(ctx, v19);
                    // Rule at src\prelude_lower.isle line 613.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v40 = C::emit(ctx, v23);
                    let v41 = C::emit(ctx, v24);
                    let v42 = C::emit(ctx, v25);
                    let v43 = C::emit(ctx, v26);
                    // Rule at src\prelude_lower.isle line 626.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v1,
            result: v2,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect {
                    inst: ref v9,
                } => {
                    let v6 = C::emit(ctx, v1);
                    let v10 = C::emit(ctx, v9);
                    let v11 = C::value_reg(ctx, v2);
                    // Rule at src\prelude_lower.isle line 566.
                    return v11;
                }
                &ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
                    inst: ref v4,
                    result: v5,
                } => {
                    let v6 = C::emit(ctx, v1);
                    let v7 = C::emit(ctx, v4);
                    let v8 = C::value_regs(ctx, v2, v5);
                    // Rule at src\prelude_lower.isle line 558.
                    return v8;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "with_flags", "src\\prelude_lower.isle line 556")
}

// Generated as internal constructor for term with_flags_reg.
pub fn constructor_with_flags_reg<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> Reg {
    let v2 = constructor_with_flags(ctx, arg0, arg1);
    let v4 = C::value_regs_get(ctx, v2, 0x0_usize);
    // Rule at src\prelude_lower.isle line 644.
    return v4;
}

// Generated as internal constructor for term flags_to_producesflags.
pub fn constructor_flags_to_producesflags<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> ProducesFlags {
    let v1 = C::mark_value_used(ctx, arg0);
    // Rule at src\prelude_lower.isle line 651.
    return ProducesFlags::AlreadyExistingFlags;
}

// Generated as internal constructor for term with_flags_side_effect.
pub fn constructor_with_flags_side_effect<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> SideEffectNoResult {
    match arg0 {
        &ProducesFlags::AlreadyExistingFlags => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect {
                    inst: ref v2,
                } => {
                    let v3 = SideEffectNoResult::Inst {
                        inst: v2.clone(),
                    };
                    // Rule at src\prelude_lower.isle line 662.
                    return v3;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v6 = SideEffectNoResult::Inst2 {
                        inst1: v4.clone(),
                        inst2: v5.clone(),
                    };
                    // Rule at src\prelude_lower.isle line 667.
                    return v6;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsSideEffect {
            inst: ref v7,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect {
                    inst: ref v2,
                } => {
                    let v8 = SideEffectNoResult::Inst2 {
                        inst1: v7.clone(),
                        inst2: v2.clone(),
                    };
                    // Rule at src\prelude_lower.isle line 672.
                    return v8;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v9 = SideEffectNoResult::Inst3 {
                        inst1: v7.clone(),
                        inst2: v4.clone(),
                        inst3: v5.clone(),
                    };
                    // Rule at src\prelude_lower.isle line 677.
                    return v9;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v10,
            inst2: ref v11,
        } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect {
                inst: ref v2,
            } = arg1 {
                let v12 = SideEffectNoResult::Inst3 {
                    inst1: v10.clone(),
                    inst2: v11.clone(),
                    inst3: v2.clone(),
                };
                // Rule at src\prelude_lower.isle line 682.
                return v12;
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "with_flags_side_effect", "src\\prelude_lower.isle line 660")
}

// Generated as internal constructor for term with_flags_chained.
pub fn constructor_with_flags_chained<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesAndProducesFlags,
    arg2: &ConsumesFlags,
) -> MultiReg {
    match arg0 {
        &ProducesFlags::ProducesFlagsSideEffect {
            inst: ref v1,
        } => {
            match arg1 {
                &ConsumesAndProducesFlags::SideEffect {
                    inst: ref v3,
                } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect {
                            inst: ref v5,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v8 = C::emit(ctx, v5);
                            // Rule at src\prelude_lower.isle line 691.
                            return MultiReg::Empty;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            // Rule at src\prelude_lower.isle line 699.
                            return MultiReg::Empty;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v16 = C::emit(ctx, v14);
                            let v17 = MultiReg::One {
                                a: v15,
                            };
                            // Rule at src\prelude_lower.isle line 708.
                            return v17;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0_usize);
                            let v26 = C::value_regs_get(ctx, v20, 0x1_usize);
                            let v27 = MultiReg::Two {
                                a: v24,
                                b: v26,
                            };
                            // Rule at src\prelude_lower.isle line 716.
                            return v27;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0_usize);
                            let v38 = C::value_regs_get(ctx, v32, 0x1_usize);
                            let v39 = MultiReg::Two {
                                a: v37,
                                b: v38,
                            };
                            // Rule at src\prelude_lower.isle line 725.
                            return v39;
                        }
                        _ => {}
                    }
                }
                &ConsumesAndProducesFlags::ReturnsReg {
                    inst: ref v47,
                    result: v48,
                } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect {
                            inst: ref v5,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v8 = C::emit(ctx, v5);
                            let v50 = MultiReg::One {
                                a: v48,
                            };
                            // Rule at src\prelude_lower.isle line 785.
                            return v50;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v50 = MultiReg::One {
                                a: v48,
                            };
                            // Rule at src\prelude_lower.isle line 793.
                            return v50;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v16 = C::emit(ctx, v14);
                            let v51 = MultiReg::Two {
                                a: v48,
                                b: v15,
                            };
                            // Rule at src\prelude_lower.isle line 802.
                            return v51;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0_usize);
                            let v26 = C::value_regs_get(ctx, v20, 0x1_usize);
                            let v52 = MultiReg::Three {
                                a: v48,
                                b: v24,
                                c: v26,
                            };
                            // Rule at src\prelude_lower.isle line 810.
                            return v52;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0_usize);
                            let v38 = C::value_regs_get(ctx, v32, 0x1_usize);
                            let v53 = MultiReg::Three {
                                a: v48,
                                b: v37,
                                c: v38,
                            };
                            // Rule at src\prelude_lower.isle line 819.
                            return v53;
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v40,
            result: v41,
        } => {
            match arg1 {
                &ConsumesAndProducesFlags::SideEffect {
                    inst: ref v3,
                } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect {
                            inst: ref v5,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v8 = C::emit(ctx, v5);
                            let v43 = MultiReg::One {
                                a: v41,
                            };
                            // Rule at src\prelude_lower.isle line 738.
                            return v43;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v43 = MultiReg::One {
                                a: v41,
                            };
                            // Rule at src\prelude_lower.isle line 746.
                            return v43;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v16 = C::emit(ctx, v14);
                            let v44 = MultiReg::Two {
                                a: v41,
                                b: v15,
                            };
                            // Rule at src\prelude_lower.isle line 755.
                            return v44;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0_usize);
                            let v26 = C::value_regs_get(ctx, v20, 0x1_usize);
                            let v45 = MultiReg::Three {
                                a: v41,
                                b: v24,
                                c: v26,
                            };
                            // Rule at src\prelude_lower.isle line 763.
                            return v45;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0_usize);
                            let v38 = C::value_regs_get(ctx, v32, 0x1_usize);
                            let v46 = MultiReg::Three {
                                a: v41,
                                b: v37,
                                c: v38,
                            };
                            // Rule at src\prelude_lower.isle line 772.
                            return v46;
                        }
                        _ => {}
                    }
                }
                &ConsumesAndProducesFlags::ReturnsReg {
                    inst: ref v47,
                    result: v48,
                } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect {
                            inst: ref v5,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v8 = C::emit(ctx, v5);
                            let v54 = MultiReg::Two {
                                a: v41,
                                b: v48,
                            };
                            // Rule at src\prelude_lower.isle line 832.
                            return v54;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v54 = MultiReg::Two {
                                a: v41,
                                b: v48,
                            };
                            // Rule at src\prelude_lower.isle line 840.
                            return v54;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v16 = C::emit(ctx, v14);
                            let v55 = MultiReg::Three {
                                a: v41,
                                b: v48,
                                c: v15,
                            };
                            // Rule at src\prelude_lower.isle line 849.
                            return v55;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0_usize);
                            let v26 = C::value_regs_get(ctx, v20, 0x1_usize);
                            let v56 = MultiReg::Four {
                                a: v41,
                                b: v48,
                                c: v24,
                                d: v26,
                            };
                            // Rule at src\prelude_lower.isle line 857.
                            return v56;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0_usize);
                            let v38 = C::value_regs_get(ctx, v32, 0x1_usize);
                            let v57 = MultiReg::Four {
                                a: v41,
                                b: v48,
                                c: v37,
                                d: v38,
                            };
                            // Rule at src\prelude_lower.isle line 866.
                            return v57;
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v58,
            result: v59,
        } => {
            if let &ConsumesAndProducesFlags::ReturnsReg {
                inst: ref v47,
                result: v48,
            } = arg1 {
                match arg2 {
                    &ConsumesFlags::ConsumesFlagsSideEffect {
                        inst: ref v5,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v8 = C::emit(ctx, v5);
                        let v61 = MultiReg::Two {
                            a: v59,
                            b: v48,
                        };
                        // Rule at src\prelude_lower.isle line 878.
                        return v61;
                    }
                    &ConsumesFlags::ConsumesFlagsSideEffect2 {
                        inst1: ref v10,
                        inst2: ref v11,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v12 = C::emit(ctx, v10);
                        let v13 = C::emit(ctx, v11);
                        let v61 = MultiReg::Two {
                            a: v59,
                            b: v48,
                        };
                        // Rule at src\prelude_lower.isle line 886.
                        return v61;
                    }
                    &ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
                        inst: ref v63,
                        result: v64,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v65 = C::emit(ctx, v63);
                        let v66 = MultiReg::Three {
                            a: v59,
                            b: v48,
                            c: v64,
                        };
                        // Rule at src\prelude_lower.isle line 903.
                        return v66;
                    }
                    &ConsumesFlags::ConsumesFlagsReturnsReg {
                        inst: ref v14,
                        result: v15,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v16 = C::emit(ctx, v14);
                        let v62 = MultiReg::Three {
                            a: v59,
                            b: v48,
                            c: v15,
                        };
                        // Rule at src\prelude_lower.isle line 895.
                        return v62;
                    }
                    &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                        inst1: ref v18,
                        inst2: ref v19,
                        result: v20,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v21 = C::emit(ctx, v18);
                        let v22 = C::emit(ctx, v19);
                        let v24 = C::value_regs_get(ctx, v20, 0x0_usize);
                        let v26 = C::value_regs_get(ctx, v20, 0x1_usize);
                        let v67 = MultiReg::Four {
                            a: v59,
                            b: v48,
                            c: v24,
                            d: v26,
                        };
                        // Rule at src\prelude_lower.isle line 911.
                        return v67;
                    }
                    &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                        inst1: ref v28,
                        inst2: ref v29,
                        inst3: ref v30,
                        inst4: ref v31,
                        result: v32,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v33 = C::emit(ctx, v28);
                        let v34 = C::emit(ctx, v29);
                        let v35 = C::emit(ctx, v30);
                        let v36 = C::emit(ctx, v31);
                        let v37 = C::value_regs_get(ctx, v32, 0x0_usize);
                        let v38 = C::value_regs_get(ctx, v32, 0x1_usize);
                        let v68 = MultiReg::Four {
                            a: v59,
                            b: v48,
                            c: v37,
                            d: v38,
                        };
                        // Rule at src\prelude_lower.isle line 920.
                        return v68;
                    }
                    _ => {}
                }
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "with_flags_chained", "src\\prelude_lower.isle line 688")
}

// Generated as internal constructor for term lower_return.
pub fn constructor_lower_return<C: Context>(
    ctx: &mut C,
    arg0: ValueSlice,
) -> InstOutput {
    let v1 = C::gen_return(ctx, arg0);
    let v2 = C::output_none(ctx);
    // Rule at src\prelude_lower.isle line 1127.
    return v2;
}

// Generated as internal constructor for term operand_size_bits.
pub fn constructor_operand_size_bits<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
) -> u16 {
    match arg0 {
        &OperandSize::Size8 => {
            // Rule at src\isa\x64\inst.isle line 850.
            return 0x8_u16;
        }
        &OperandSize::Size16 => {
            // Rule at src\isa\x64\inst.isle line 851.
            return 0x10_u16;
        }
        &OperandSize::Size32 => {
            // Rule at src\isa\x64\inst.isle line 852.
            return 0x20_u16;
        }
        &OperandSize::Size64 => {
            // Rule at src\isa\x64\inst.isle line 853.
            return 0x40_u16;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "operand_size_bits", "src\\isa\\x64\\inst.isle line 849")
}

// Generated as internal constructor for term reg_mem_to_reg_mem_imm.
pub fn constructor_reg_mem_to_reg_mem_imm<C: Context>(
    ctx: &mut C,
    arg0: &RegMem,
) -> RegMemImm {
    match arg0 {
        &RegMem::Reg {
            reg: v1,
        } => {
            let v2 = RegMemImm::Reg {
                reg: v1,
            };
            // Rule at src\isa\x64\inst.isle line 1087.
            return v2;
        }
        &RegMem::Mem {
            addr: ref v3,
        } => {
            let v4 = RegMemImm::Mem {
                addr: v3.clone(),
            };
            // Rule at src\isa\x64\inst.isle line 1089.
            return v4;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "reg_mem_to_reg_mem_imm", "src\\isa\\x64\\inst.isle line 1086")
}

// Generated as internal constructor for term to_amode.
pub fn constructor_to_amode<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Offset32,
) -> Amode {
    let v4 = C::def_inst(ctx, arg1);
    if let Some(v5) = v4 {
        let v6 = &C::inst_data_value(ctx, v5);
        if let &InstructionData::Binary {
            opcode: ref v7,
            args: ref v8,
        } = v6 {
            if let &Opcode::Iadd = v7 {
                let v9 = C::unpack_value_array_2(ctx, v8);
                let v12 = &constructor_to_amode_add(ctx, arg0, v9.0, v9.1, arg2);
                // Rule at src\isa\x64\inst.isle line 1206.
                return v12.clone();
            }
        }
    }
    let v3 = &constructor_amode_imm_reg(ctx, arg0, arg1, arg2);
    // Rule at src\isa\x64\inst.isle line 1204.
    return v3.clone();
}

// Generated as internal constructor for term to_amode_add.
pub fn constructor_to_amode_add<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Value,
    arg3: Offset32,
) -> Amode {
    let v38 = C::def_inst(ctx, arg2);
    if let Some(v39) = v38 {
        let v40 = &C::inst_data_value(ctx, v39);
        if let &InstructionData::Binary {
            opcode: ref v41,
            args: ref v42,
        } = v40 {
            if let &Opcode::Iadd = v41 {
                let v43 = C::unpack_value_array_2(ctx, v42);
                let v52 = C::i32_from_iconst(ctx, v43.0);
                if let Some(v53) = v52 {
                    let v7 = C::offset32_to_i32(ctx, arg3);
                    let v54 = C::s32_add_fallible(ctx, v7, v53);
                    if let Some(v55) = v54 {
                        let v56 = C::i32_to_offset32(ctx, v55);
                        let v57 = &constructor_amode_imm_reg_reg_shift(ctx, arg0, arg1, v43.1, v56);
                        // Rule at src\isa\x64\inst.isle line 1244.
                        return v57.clone();
                    }
                }
                let v46 = C::i32_from_iconst(ctx, v43.1);
                if let Some(v47) = v46 {
                    let v7 = C::offset32_to_i32(ctx, arg3);
                    let v48 = C::s32_add_fallible(ctx, v7, v47);
                    if let Some(v49) = v48 {
                        let v50 = C::i32_to_offset32(ctx, v49);
                        let v51 = &constructor_amode_imm_reg_reg_shift(ctx, arg0, arg1, v43.0, v50);
                        // Rule at src\isa\x64\inst.isle line 1241.
                        return v51.clone();
                    }
                }
            }
        }
    }
    let v18 = C::def_inst(ctx, arg1);
    if let Some(v19) = v18 {
        let v20 = &C::inst_data_value(ctx, v19);
        if let &InstructionData::Binary {
            opcode: ref v21,
            args: ref v22,
        } = v20 {
            if let &Opcode::Iadd = v21 {
                let v23 = C::unpack_value_array_2(ctx, v22);
                let v32 = C::i32_from_iconst(ctx, v23.0);
                if let Some(v33) = v32 {
                    let v7 = C::offset32_to_i32(ctx, arg3);
                    let v34 = C::s32_add_fallible(ctx, v7, v33);
                    if let Some(v35) = v34 {
                        let v36 = C::i32_to_offset32(ctx, v35);
                        let v37 = &constructor_amode_imm_reg_reg_shift(ctx, arg0, v23.1, arg2, v36);
                        // Rule at src\isa\x64\inst.isle line 1238.
                        return v37.clone();
                    }
                }
                let v26 = C::i32_from_iconst(ctx, v23.1);
                if let Some(v27) = v26 {
                    let v7 = C::offset32_to_i32(ctx, arg3);
                    let v28 = C::s32_add_fallible(ctx, v7, v27);
                    if let Some(v29) = v28 {
                        let v30 = C::i32_to_offset32(ctx, v29);
                        let v31 = &constructor_amode_imm_reg_reg_shift(ctx, arg0, v23.0, arg2, v30);
                        // Rule at src\isa\x64\inst.isle line 1235.
                        return v31.clone();
                    }
                }
            }
        }
    }
    let v12 = C::i32_from_iconst(ctx, arg1);
    if let Some(v13) = v12 {
        let v7 = C::offset32_to_i32(ctx, arg3);
        let v14 = C::s32_add_fallible(ctx, v7, v13);
        if let Some(v15) = v14 {
            let v16 = C::i32_to_offset32(ctx, v15);
            let v17 = &constructor_amode_imm_reg(ctx, arg0, arg2, v16);
            // Rule at src\isa\x64\inst.isle line 1232.
            return v17.clone();
        }
    }
    let v5 = C::i32_from_iconst(ctx, arg2);
    if let Some(v6) = v5 {
        let v7 = C::offset32_to_i32(ctx, arg3);
        let v8 = C::s32_add_fallible(ctx, v7, v6);
        if let Some(v9) = v8 {
            let v10 = C::i32_to_offset32(ctx, v9);
            let v11 = &constructor_amode_imm_reg(ctx, arg0, arg1, v10);
            // Rule at src\isa\x64\inst.isle line 1229.
            return v11.clone();
        }
    }
    let v4 = &constructor_amode_imm_reg_reg_shift(ctx, arg0, arg1, arg2, arg3);
    // Rule at src\isa\x64\inst.isle line 1227.
    return v4.clone();
}

// Generated as internal constructor for term amode_imm_reg.
pub fn constructor_amode_imm_reg<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Offset32,
) -> Amode {
    let v6 = C::def_inst(ctx, arg1);
    if let Some(v7) = v6 {
        let v8 = &C::inst_data_value(ctx, v7);
        if let &InstructionData::Binary {
            opcode: ref v9,
            args: ref v10,
        } = v8 {
            if let &Opcode::Iadd = v9 {
                let v11 = C::unpack_value_array_2(ctx, v10);
                let v14 = &constructor_amode_imm_reg_reg_shift(ctx, arg0, v11.0, v11.1, arg2);
                // Rule at src\isa\x64\inst.isle line 1258.
                return v14.clone();
            }
        }
    }
    let v4 = C::put_in_reg(ctx, arg1);
    let v3 = C::offset32_to_i32(ctx, arg2);
    let v5 = Amode::ImmReg {
        simm32: v3,
        base: v4,
        flags: arg0,
    };
    // Rule at src\isa\x64\inst.isle line 1256.
    return v5;
}

// Generated as internal constructor for term amode_imm_reg_reg_shift.
pub fn constructor_amode_imm_reg_reg_shift<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Value,
    arg3: Offset32,
) -> Amode {
    let v30 = C::def_inst(ctx, arg1);
    if let Some(v31) = v30 {
        let v32 = &C::inst_data_value(ctx, v31);
        if let &InstructionData::Binary {
            opcode: ref v33,
            args: ref v34,
        } = v32 {
            if let &Opcode::Ishl = v33 {
                let v35 = C::unpack_value_array_2(ctx, v34);
                let v38 = C::def_inst(ctx, v35.1);
                if let Some(v39) = v38 {
                    let v40 = &C::inst_data_value(ctx, v39);
                    if let &InstructionData::UnaryImm {
                        opcode: ref v41,
                        imm: v42,
                    } = v40 {
                        if let &Opcode::Iconst = v41 {
                            let v43 = C::uimm8(ctx, v42);
                            if let Some(v44) = v43 {
                                let v45 = C::u8_as_u32(ctx, v44);
                                let v46 = C::u32_lteq(ctx, v45, 0x3_u32);
                                if let Some(v47) = v46 {
                                    let v48 = constructor_put_in_gpr(ctx, arg2);
                                    let v49 = constructor_put_in_gpr(ctx, v35.0);
                                    let v4 = C::offset32_to_i32(ctx, arg3);
                                    let v50 = Amode::ImmRegRegShift {
                                        simm32: v4,
                                        base: v48,
                                        index: v49,
                                        shift: v44,
                                        flags: arg0,
                                    };
                                    // Rule at src\isa\x64\inst.isle line 1275.
                                    return v50;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    let v9 = C::def_inst(ctx, arg2);
    if let Some(v10) = v9 {
        let v11 = &C::inst_data_value(ctx, v10);
        if let &InstructionData::Binary {
            opcode: ref v12,
            args: ref v13,
        } = v11 {
            if let &Opcode::Ishl = v12 {
                let v14 = C::unpack_value_array_2(ctx, v13);
                let v17 = C::def_inst(ctx, v14.1);
                if let Some(v18) = v17 {
                    let v19 = &C::inst_data_value(ctx, v18);
                    if let &InstructionData::UnaryImm {
                        opcode: ref v20,
                        imm: v21,
                    } = v19 {
                        if let &Opcode::Iconst = v20 {
                            let v22 = C::uimm8(ctx, v21);
                            if let Some(v23) = v22 {
                                let v24 = C::u8_as_u32(ctx, v23);
                                let v26 = C::u32_lteq(ctx, v24, 0x3_u32);
                                if let Some(v27) = v26 {
                                    let v5 = constructor_put_in_gpr(ctx, arg1);
                                    let v28 = constructor_put_in_gpr(ctx, v14.0);
                                    let v4 = C::offset32_to_i32(ctx, arg3);
                                    let v29 = Amode::ImmRegRegShift {
                                        simm32: v4,
                                        base: v5,
                                        index: v28,
                                        shift: v23,
                                        flags: arg0,
                                    };
                                    // Rule at src\isa\x64\inst.isle line 1272.
                                    return v29;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    let v5 = constructor_put_in_gpr(ctx, arg1);
    let v6 = constructor_put_in_gpr(ctx, arg2);
    let v4 = C::offset32_to_i32(ctx, arg3);
    let v8 = Amode::ImmRegRegShift {
        simm32: v4,
        base: v5,
        index: v6,
        shift: 0x0_u8,
        flags: arg0,
    };
    // Rule at src\isa\x64\inst.isle line 1270.
    return v8;
}

// Generated as internal constructor for term put_masked_in_imm8_gpr.
pub fn constructor_put_masked_in_imm8_gpr<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: Type,
) -> Imm8Gpr {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = &C::inst_data_value(ctx, v2);
        if let &InstructionData::UnaryImm {
            opcode: ref v4,
            imm: v5,
        } = v3 {
            if let &Opcode::Iconst = v4 {
                let v6 = C::u64_from_imm64(ctx, v5);
                let v8 = &C::const_to_type_masked_imm8(ctx, v6, arg1);
                // Rule at src\isa\x64\inst.isle line 1312.
                return v8.clone();
            }
        }
    }
    let v9 = C::fits_in_16(ctx, arg1);
    if let Some(v10) = v9 {
        let v12 = C::put_in_regs(ctx, arg0);
        let v14 = constructor_value_regs_get_gpr(ctx, v12, 0x0_usize);
        let v15 = C::shift_mask(ctx, v10);
        let v16 = C::u8_as_u32(ctx, v15);
        let v17 = RegMemImm::Imm {
            simm32: v16,
        };
        let v18 = &C::gpr_mem_imm_new(ctx, &v17);
        let v19 = constructor_x64_and(ctx, I64, v14, v18);
        let v20 = &C::gpr_to_imm8_gpr(ctx, v19);
        // Rule at src\isa\x64\inst.isle line 1314.
        return v20.clone();
    }
    let v12 = C::put_in_regs(ctx, arg0);
    let v14 = constructor_value_regs_get_gpr(ctx, v12, 0x0_usize);
    let v21 = &C::gpr_to_imm8_gpr(ctx, v14);
    // Rule at src\isa\x64\inst.isle line 1316.
    return v21.clone();
}

// Generated as internal constructor for term reg_to_gpr_mem_imm.
pub fn constructor_reg_to_gpr_mem_imm<C: Context>(
    ctx: &mut C,
    arg0: Reg,
) -> GprMemImm {
    let v1 = C::gpr_new(ctx, arg0);
    let v2 = &C::gpr_to_gpr_mem_imm(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 1752.
    return v2.clone();
}

// Generated as internal constructor for term put_in_gpr.
pub fn constructor_put_in_gpr<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> Gpr {
    let v1 = C::value_type(ctx, arg0);
    let v2 = &C::type_register_class(ctx, v1);
    if let Some(v3) = v2 {
        match v3 {
            &RegisterClass::Gpr {
                single_register: v4,
            } => {
                let v5 = C::put_in_reg(ctx, arg0);
                let v6 = C::gpr_new(ctx, v5);
                // Rule at src\isa\x64\inst.isle line 1763.
                return v6;
            }
            &RegisterClass::Xmm => {
                let v5 = C::put_in_reg(ctx, arg0);
                let v8 = C::xmm_new(ctx, v5);
                let v7 = C::ty_bits(ctx, v1);
                let v9 = constructor_bitcast_xmm_to_gpr(ctx, v7, v8);
                // Rule at src\isa\x64\inst.isle line 1770.
                return v9;
            }
            _ => {}
        }
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "put_in_gpr", "src\\isa\\x64\\inst.isle line 1760")
}

// Generated as internal constructor for term put_in_gpr_mem.
pub fn constructor_put_in_gpr_mem<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> GprMem {
    let v1 = &C::put_in_reg_mem(ctx, arg0);
    let v2 = &C::reg_mem_to_gpr_mem(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 1779.
    return v2.clone();
}

// Generated as internal constructor for term put_in_gpr_mem_imm.
pub fn constructor_put_in_gpr_mem_imm<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> GprMemImm {
    let v1 = &C::put_in_reg_mem_imm(ctx, arg0);
    let v2 = &C::gpr_mem_imm_new(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 1786.
    return v2.clone();
}

// Generated as internal constructor for term put_in_xmm.
pub fn constructor_put_in_xmm<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> Xmm {
    let v1 = C::put_in_reg(ctx, arg0);
    let v2 = C::xmm_new(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 1793.
    return v2;
}

// Generated as internal constructor for term output_gpr.
pub fn constructor_output_gpr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
) -> InstOutput {
    let v1 = C::gpr_to_reg(ctx, arg0);
    let v2 = constructor_output_reg(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 1812.
    return v2;
}

// Generated as internal constructor for term value_gprs.
pub fn constructor_value_gprs<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> ValueRegs {
    let v2 = C::gpr_to_reg(ctx, arg0);
    let v3 = C::gpr_to_reg(ctx, arg1);
    let v4 = C::value_regs(ctx, v2, v3);
    // Rule at src\isa\x64\inst.isle line 1817.
    return v4;
}

// Generated as internal constructor for term output_xmm.
pub fn constructor_output_xmm<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
) -> InstOutput {
    let v1 = C::xmm_to_reg(ctx, arg0);
    let v2 = constructor_output_reg(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 1822.
    return v2;
}

// Generated as internal constructor for term value_regs_get_gpr.
pub fn constructor_value_regs_get_gpr<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: usize,
) -> Gpr {
    let v2 = C::value_regs_get(ctx, arg0, arg1);
    let v3 = C::gpr_new(ctx, v2);
    // Rule at src\isa\x64\inst.isle line 1829.
    return v3;
}

// Generated as internal constructor for term lo_gpr.
pub fn constructor_lo_gpr<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> Gpr {
    let v1 = constructor_lo_reg(ctx, arg0);
    let v2 = C::gpr_new(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 1842.
    return v2;
}

// Generated as internal constructor for term sink_load_to_gpr_mem_imm.
pub fn constructor_sink_load_to_gpr_mem_imm<C: Context>(
    ctx: &mut C,
    arg0: &SinkableLoad,
) -> GprMemImm {
    let v1 = &constructor_sink_load_to_reg_mem_imm(ctx, arg0);
    let v2 = &C::gpr_mem_imm_new(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 2006.
    return v2.clone();
}

// Generated as internal constructor for term sink_load_to_xmm_mem.
pub fn constructor_sink_load_to_xmm_mem<C: Context>(
    ctx: &mut C,
    arg0: &SinkableLoad,
) -> XmmMem {
    let v1 = &constructor_sink_load_to_reg_mem(ctx, arg0);
    let v2 = &C::reg_mem_to_xmm_mem(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 2010.
    return v2.clone();
}

// Generated as internal constructor for term sink_load_to_reg_mem.
pub fn constructor_sink_load_to_reg_mem<C: Context>(
    ctx: &mut C,
    arg0: &SinkableLoad,
) -> RegMem {
    let v1 = &C::sink_load(ctx, arg0);
    let v2 = RegMem::Mem {
        addr: v1.clone(),
    };
    // Rule at src\isa\x64\inst.isle line 2014.
    return v2;
}

// Generated as internal constructor for term sink_load_to_gpr_mem.
pub fn constructor_sink_load_to_gpr_mem<C: Context>(
    ctx: &mut C,
    arg0: &SinkableLoad,
) -> GprMem {
    let v1 = &C::sink_load(ctx, arg0);
    let v2 = RegMem::Mem {
        addr: v1.clone(),
    };
    let v3 = &C::reg_mem_to_gpr_mem(ctx, &v2);
    // Rule at src\isa\x64\inst.isle line 2017.
    return v3.clone();
}

// Generated as internal constructor for term sink_load_to_reg_mem_imm.
pub fn constructor_sink_load_to_reg_mem_imm<C: Context>(
    ctx: &mut C,
    arg0: &SinkableLoad,
) -> RegMemImm {
    let v1 = &C::sink_load(ctx, arg0);
    let v2 = RegMemImm::Mem {
        addr: v1.clone(),
    };
    // Rule at src\isa\x64\inst.isle line 2022.
    return v2;
}

// Generated as internal constructor for term xmm_uninit_value.
pub fn constructor_xmm_uninit_value<C: Context>(
    ctx: &mut C,
) -> Xmm {
    let v0 = C::temp_writable_xmm(ctx);
    let v1 = MInst::XmmUninitializedValue {
        dst: v0,
    };
    let v2 = C::emit(ctx, &v1);
    let v3 = C::writable_xmm_to_xmm(ctx, v0);
    // Rule at src\isa\x64\inst.isle line 2034.
    return v3;
}

// Generated as internal constructor for term gpr_uninit_value.
pub fn constructor_gpr_uninit_value<C: Context>(
    ctx: &mut C,
) -> Gpr {
    let v0 = C::temp_writable_gpr(ctx);
    let v1 = MInst::GprUninitializedValue {
        dst: v0,
    };
    let v2 = C::emit(ctx, &v1);
    let v3 = C::writable_gpr_to_gpr(ctx, v0);
    // Rule at src\isa\x64\inst.isle line 2041.
    return v3;
}

// Generated as internal constructor for term load_ext_name.
pub fn constructor_load_ext_name<C: Context>(
    ctx: &mut C,
    arg0: ExternalName,
    arg1: i64,
    arg2: RelocDistance,
) -> Reg {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = C::writable_gpr_to_reg(ctx, v3);
    let v5 = C::box_external_name(ctx, arg0);
    let v6 = MInst::LoadExtName {
        dst: v4,
        name: v5,
        offset: arg1,
        distance: arg2,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = constructor_writable_gpr_to_r_reg(ctx, v3);
    // Rule at src\isa\x64\inst.isle line 2048.
    return v8;
}

// Generated as internal constructor for term mov64_mr.
pub fn constructor_mov64_mr<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
) -> Reg {
    let v1 = C::temp_writable_gpr(ctx);
    let v2 = MInst::Mov64MR {
        src: arg0.clone(),
        dst: v1,
    };
    let v3 = C::emit(ctx, &v2);
    let v4 = constructor_writable_gpr_to_r_reg(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 2055.
    return v4;
}

// Generated as internal constructor for term alu_rm_r_vex.
pub fn constructor_alu_rm_r_vex<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &AluRmROpcode,
    arg2: Gpr,
    arg3: &GprMem,
) -> Gpr {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v6 = MInst::AluRmRVex {
        size: v5.clone(),
        op: arg1.clone(),
        src1: arg2,
        src2: arg3.clone(),
        dst: v4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_gpr_to_gpr(ctx, v4);
    // Rule at src\isa\x64\inst.isle line 2062.
    return v8;
}

// Generated as internal constructor for term xmm_rm_r.
pub fn constructor_xmm_rm_r<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: Xmm,
    arg2: &XmmMemAligned,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::XmmRmR {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src\isa\x64\inst.isle line 2070.
    return v6;
}

// Generated as internal constructor for term xmm_rm_r_unaligned.
pub fn constructor_xmm_rm_r_unaligned<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: Xmm,
    arg2: &XmmMem,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::XmmRmRUnaligned {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src\isa\x64\inst.isle line 2077.
    return v6;
}

// Generated as internal constructor for term xmm_rm_r_blend.
pub fn constructor_xmm_rm_r_blend<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: Xmm,
    arg2: &XmmMemAligned,
    arg3: Xmm,
) -> Xmm {
    let v4 = C::temp_writable_xmm(ctx);
    let v5 = MInst::XmmRmRBlend {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        mask: arg3,
        dst: v4,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xmm_to_xmm(ctx, v4);
    // Rule at src\isa\x64\inst.isle line 2084.
    return v7;
}

// Generated as internal constructor for term xmm_rmr_blend_vex.
pub fn constructor_xmm_rmr_blend_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: Xmm,
    arg2: &XmmMem,
    arg3: Xmm,
) -> Xmm {
    let v4 = C::temp_writable_xmm(ctx);
    let v5 = MInst::XmmRmRBlendVex {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        mask: arg3,
        dst: v4,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xmm_to_xmm(ctx, v4);
    // Rule at src\isa\x64\inst.isle line 2091.
    return v7;
}

// Generated as internal constructor for term xmm_unary_rm_r_vex.
pub fn constructor_xmm_unary_rm_r_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: &XmmMem,
) -> Xmm {
    let v2 = C::temp_writable_xmm(ctx);
    let v3 = MInst::XmmUnaryRmRVex {
        op: arg0.clone(),
        src: arg1.clone(),
        dst: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_xmm_to_xmm(ctx, v2);
    // Rule at src\isa\x64\inst.isle line 2098.
    return v5;
}

// Generated as internal constructor for term xmm_unary_rm_r_imm_vex.
pub fn constructor_xmm_unary_rm_r_imm_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: &XmmMem,
    arg2: u8,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::XmmUnaryRmRImmVex {
        op: arg0.clone(),
        src: arg1.clone(),
        dst: v3,
        imm: arg2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src\isa\x64\inst.isle line 2105.
    return v6;
}

// Generated as internal constructor for term xmm_rm_r_imm.
pub fn constructor_xmm_rm_r_imm<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: Reg,
    arg2: &RegMem,
    arg3: u8,
    arg4: &OperandSize,
) -> Xmm {
    let v5 = C::temp_writable_xmm(ctx);
    let v6 = C::writable_xmm_to_reg(ctx, v5);
    let v7 = MInst::XmmRmRImm {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v6,
        imm: arg3,
        size: arg4.clone(),
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_xmm_to_xmm(ctx, v5);
    // Rule at src\isa\x64\inst.isle line 2112.
    return v9;
}

// Generated as internal constructor for term xmm_vex_pinsr.
pub fn constructor_xmm_vex_pinsr<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: Xmm,
    arg2: &GprMem,
    arg3: u8,
) -> Xmm {
    let v4 = C::temp_writable_xmm(ctx);
    let v5 = MInst::XmmVexPinsr {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v4,
        imm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xmm_to_xmm(ctx, v4);
    // Rule at src\isa\x64\inst.isle line 2124.
    return v7;
}

// Generated as internal constructor for term xmm_unary_rm_r_imm.
pub fn constructor_xmm_unary_rm_r_imm<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: &XmmMemAligned,
    arg2: u8,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::XmmUnaryRmRImm {
        op: arg0.clone(),
        src: arg1.clone(),
        imm: arg2,
        dst: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src\isa\x64\inst.isle line 2131.
    return v6;
}

// Generated as internal constructor for term xmm_unary_rm_r.
pub fn constructor_xmm_unary_rm_r<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: &XmmMemAligned,
) -> Xmm {
    let v2 = C::temp_writable_xmm(ctx);
    let v3 = MInst::XmmUnaryRmR {
        op: arg0.clone(),
        src: arg1.clone(),
        dst: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_xmm_to_xmm(ctx, v2);
    // Rule at src\isa\x64\inst.isle line 2138.
    return v5;
}

// Generated as internal constructor for term xmm_unary_rm_r_unaligned.
pub fn constructor_xmm_unary_rm_r_unaligned<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: &XmmMem,
) -> Xmm {
    let v2 = C::temp_writable_xmm(ctx);
    let v3 = MInst::XmmUnaryRmRUnaligned {
        op: arg0.clone(),
        src: arg1.clone(),
        dst: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_xmm_to_xmm(ctx, v2);
    // Rule at src\isa\x64\inst.isle line 2145.
    return v5;
}

// Generated as internal constructor for term xmm_unary_rm_r_evex.
pub fn constructor_xmm_unary_rm_r_evex<C: Context>(
    ctx: &mut C,
    arg0: &Avx512Opcode,
    arg1: &XmmMem,
) -> Xmm {
    let v2 = C::temp_writable_xmm(ctx);
    let v3 = MInst::XmmUnaryRmREvex {
        op: arg0.clone(),
        src: arg1.clone(),
        dst: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_xmm_to_xmm(ctx, v2);
    // Rule at src\isa\x64\inst.isle line 2152.
    return v5;
}

// Generated as internal constructor for term xmm_rm_r_evex.
pub fn constructor_xmm_rm_r_evex<C: Context>(
    ctx: &mut C,
    arg0: &Avx512Opcode,
    arg1: Xmm,
    arg2: &XmmMem,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::XmmRmREvex {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src\isa\x64\inst.isle line 2159.
    return v6;
}

// Generated as internal constructor for term xmm_unary_rm_r_imm_evex.
pub fn constructor_xmm_unary_rm_r_imm_evex<C: Context>(
    ctx: &mut C,
    arg0: &Avx512Opcode,
    arg1: &XmmMem,
    arg2: u8,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::XmmUnaryRmRImmEvex {
        op: arg0.clone(),
        src: arg1.clone(),
        dst: v3,
        imm: arg2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src\isa\x64\inst.isle line 2169.
    return v6;
}

// Generated as internal constructor for term xmm_rmi_xmm.
pub fn constructor_xmm_rmi_xmm<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: Xmm,
    arg2: &XmmMemAlignedImm,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::XmmRmiReg {
        opcode: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src\isa\x64\inst.isle line 2176.
    return v6;
}

// Generated as internal constructor for term xmm_to_gpr_imm.
pub fn constructor_xmm_to_gpr_imm<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: Xmm,
    arg2: u8,
) -> Gpr {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = MInst::XmmToGprImm {
        op: arg0.clone(),
        src: arg1,
        dst: v3,
        imm: arg2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v3);
    // Rule at src\isa\x64\inst.isle line 2186.
    return v6;
}

// Generated as internal constructor for term xmm_to_gpr_imm_vex.
pub fn constructor_xmm_to_gpr_imm_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: Xmm,
    arg2: u8,
) -> Gpr {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = MInst::XmmToGprImmVex {
        op: arg0.clone(),
        src: arg1,
        dst: v3,
        imm: arg2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v3);
    // Rule at src\isa\x64\inst.isle line 2193.
    return v6;
}

// Generated as internal constructor for term gpr_to_xmm.
pub fn constructor_gpr_to_xmm<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: &GprMem,
    arg2: &OperandSize,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::GprToXmm {
        op: arg0.clone(),
        src: arg1.clone(),
        dst: v3,
        src_size: arg2.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src\isa\x64\inst.isle line 2200.
    return v6;
}

// Generated as internal constructor for term gpr_to_xmm_vex.
pub fn constructor_gpr_to_xmm_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: &GprMem,
    arg2: &OperandSize,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::GprToXmmVex {
        op: arg0.clone(),
        src: arg1.clone(),
        dst: v3,
        src_size: arg2.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src\isa\x64\inst.isle line 2207.
    return v6;
}

// Generated as internal constructor for term xmm_to_gpr.
pub fn constructor_xmm_to_gpr<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: Xmm,
    arg2: &OperandSize,
) -> Gpr {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = MInst::XmmToGpr {
        op: arg0.clone(),
        src: arg1,
        dst: v3,
        dst_size: arg2.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v3);
    // Rule at src\isa\x64\inst.isle line 2214.
    return v6;
}

// Generated as internal constructor for term xmm_to_gpr_vex.
pub fn constructor_xmm_to_gpr_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: Xmm,
    arg2: &OperandSize,
) -> Gpr {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = MInst::XmmToGprVex {
        op: arg0.clone(),
        src: arg1,
        dst: v3,
        dst_size: arg2.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v3);
    // Rule at src\isa\x64\inst.isle line 2221.
    return v6;
}

// Generated as internal constructor for term xmm_min_max_seq.
pub fn constructor_xmm_min_max_seq<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: bool,
    arg2: Xmm,
    arg3: Xmm,
) -> Xmm {
    let v4 = C::temp_writable_xmm(ctx);
    let v5 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v6 = MInst::XmmMinMaxSeq {
        size: v5.clone(),
        is_min: arg1,
        lhs: arg2,
        rhs: arg3,
        dst: v4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_xmm_to_xmm(ctx, v4);
    // Rule at src\isa\x64\inst.isle line 2228.
    return v8;
}

// Generated as internal constructor for term xmm_rmir_vex.
pub fn constructor_xmm_rmir_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: Xmm,
    arg2: &XmmMemImm,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::XmmRmiRVex {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src\isa\x64\inst.isle line 2236.
    return v6;
}

// Generated as internal constructor for term xmm_rmr_imm_vex.
pub fn constructor_xmm_rmr_imm_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: Xmm,
    arg2: &XmmMem,
    arg3: u8,
) -> Xmm {
    let v4 = C::temp_writable_xmm(ctx);
    let v5 = MInst::XmmRmRImmVex {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v4,
        imm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xmm_to_xmm(ctx, v4);
    // Rule at src\isa\x64\inst.isle line 2243.
    return v7;
}

// Generated as internal constructor for term xmm_rmr_vex3.
pub fn constructor_xmm_rmr_vex3<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: Xmm,
    arg2: Xmm,
    arg3: &XmmMem,
) -> Xmm {
    let v4 = C::temp_writable_xmm(ctx);
    let v5 = MInst::XmmRmRVex3 {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2,
        src3: arg3.clone(),
        dst: v4,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xmm_to_xmm(ctx, v4);
    // Rule at src\isa\x64\inst.isle line 2250.
    return v7;
}

// Generated as internal constructor for term unary_rm_r.
pub fn constructor_unary_rm_r<C: Context>(
    ctx: &mut C,
    arg0: &UnaryRmROpcode,
    arg1: Gpr,
    arg2: &OperandSize,
) -> Gpr {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = &C::gpr_to_gpr_mem(ctx, arg1);
    let v5 = MInst::UnaryRmR {
        size: arg2.clone(),
        op: arg0.clone(),
        src: v4.clone(),
        dst: v3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_gpr_to_gpr(ctx, v3);
    // Rule at src\isa\x64\inst.isle line 2257.
    return v7;
}

// Generated as internal constructor for term unary_rm_r_vex.
pub fn constructor_unary_rm_r_vex<C: Context>(
    ctx: &mut C,
    arg0: &UnaryRmRVexOpcode,
    arg1: &GprMem,
    arg2: &OperandSize,
) -> Gpr {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = MInst::UnaryRmRVex {
        size: arg2.clone(),
        op: arg0.clone(),
        src: arg1.clone(),
        dst: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v3);
    // Rule at src\isa\x64\inst.isle line 2264.
    return v6;
}

// Generated as internal constructor for term unary_rm_r_imm_vex.
pub fn constructor_unary_rm_r_imm_vex<C: Context>(
    ctx: &mut C,
    arg0: &UnaryRmRImmVexOpcode,
    arg1: &GprMem,
    arg2: &OperandSize,
    arg3: u8,
) -> Gpr {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = MInst::UnaryRmRImmVex {
        size: arg2.clone(),
        op: arg0.clone(),
        src: arg1.clone(),
        dst: v4,
        imm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_gpr_to_gpr(ctx, v4);
    // Rule at src\isa\x64\inst.isle line 2271.
    return v7;
}

// Generated as internal constructor for term cvt_int_to_float.
pub fn constructor_cvt_int_to_float<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: Xmm,
    arg2: &GprMem,
    arg3: &OperandSize,
) -> Xmm {
    let v4 = C::temp_writable_xmm(ctx);
    let v5 = MInst::CvtIntToFloat {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v4,
        src2_size: arg3.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xmm_to_xmm(ctx, v4);
    // Rule at src\isa\x64\inst.isle line 2277.
    return v7;
}

// Generated as internal constructor for term cvt_int_to_float_vex.
pub fn constructor_cvt_int_to_float_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: Xmm,
    arg2: &GprMem,
    arg3: &OperandSize,
) -> Xmm {
    let v4 = C::temp_writable_xmm(ctx);
    let v5 = MInst::CvtIntToFloatVex {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v4,
        src2_size: arg3.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xmm_to_xmm(ctx, v4);
    // Rule at src\isa\x64\inst.isle line 2283.
    return v7;
}

// Generated as internal constructor for term cvt_u64_to_float_seq.
pub fn constructor_cvt_u64_to_float_seq<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
) -> Xmm {
    let v2 = &C::raw_operand_size_of_type(ctx, arg0);
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = C::temp_writable_gpr(ctx);
    let v6 = MInst::CvtUint64ToFloatSeq {
        dst_size: v2.clone(),
        src: arg1,
        dst: v3,
        tmp_gpr1: v4,
        tmp_gpr2: v5,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src\isa\x64\inst.isle line 2289.
    return v8;
}

// Generated as internal constructor for term cvt_float_to_uint_seq.
pub fn constructor_cvt_float_to_uint_seq<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: bool,
) -> Gpr {
    let v4 = &C::raw_operand_size_of_type(ctx, arg0);
    let v2 = C::value_type(ctx, arg1);
    let v5 = &C::raw_operand_size_of_type(ctx, v2);
    let v6 = C::temp_writable_gpr(ctx);
    let v7 = C::temp_writable_xmm(ctx);
    let v8 = C::temp_writable_xmm(ctx);
    let v9 = C::temp_writable_gpr(ctx);
    let v10 = constructor_put_in_xmm(ctx, arg1);
    let v11 = MInst::CvtFloatToUintSeq {
        dst_size: v4.clone(),
        src_size: v5.clone(),
        is_saturating: arg2,
        src: v10,
        dst: v6,
        tmp_gpr: v9,
        tmp_xmm: v7,
        tmp_xmm2: v8,
    };
    let v12 = C::emit(ctx, &v11);
    let v13 = C::writable_gpr_to_gpr(ctx, v6);
    // Rule at src\isa\x64\inst.isle line 2298.
    return v13;
}

// Generated as internal constructor for term cvt_float_to_sint_seq.
pub fn constructor_cvt_float_to_sint_seq<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: bool,
) -> Gpr {
    let v4 = &C::raw_operand_size_of_type(ctx, arg0);
    let v2 = C::value_type(ctx, arg1);
    let v5 = &C::raw_operand_size_of_type(ctx, v2);
    let v6 = C::temp_writable_gpr(ctx);
    let v7 = C::temp_writable_xmm(ctx);
    let v8 = C::temp_writable_gpr(ctx);
    let v9 = constructor_put_in_xmm(ctx, arg1);
    let v10 = MInst::CvtFloatToSintSeq {
        dst_size: v4.clone(),
        src_size: v5.clone(),
        is_saturating: arg2,
        src: v9,
        dst: v6,
        tmp_gpr: v8,
        tmp_xmm: v7,
    };
    let v11 = C::emit(ctx, &v10);
    let v12 = C::writable_gpr_to_gpr(ctx, v6);
    // Rule at src\isa\x64\inst.isle line 2310.
    return v12;
}

// Generated as internal constructor for term mov_from_preg.
pub fn constructor_mov_from_preg<C: Context>(
    ctx: &mut C,
    arg0: PReg,
) -> Reg {
    let v1 = C::temp_writable_gpr(ctx);
    let v2 = MInst::MovFromPReg {
        src: arg0,
        dst: v1,
    };
    let v3 = C::emit(ctx, &v2);
    let v4 = constructor_writable_gpr_to_r_reg(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 2322.
    return v4;
}

// Generated as internal constructor for term extend_to_gpr.
pub fn constructor_extend_to_gpr<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: Type,
    arg2: &ExtendKind,
) -> Gpr {
    let v1 = C::value_type(ctx, arg0);
    if v1 == arg1 {
        let v4 = constructor_put_in_gpr(ctx, arg0);
        // Rule at src\isa\x64\inst.isle line 2370.
        return v4;
    }
    if v1 == I32 {
        if arg1 == I64 {
            if let &ExtendKind::Zero = arg2 {
                let v5 = constructor_value32_zeros_upper32(ctx, arg0);
                if v5 == true {
                    let v6 = C::put_in_reg(ctx, arg0);
                    let v10 = C::add_range_fact(ctx, v6, 0x40_u16, 0x0_u64, 0xffffffff_u64);
                    let v11 = C::gpr_new(ctx, v10);
                    // Rule at src\isa\x64\inst.isle line 2378.
                    return v11;
                }
            }
        }
    }
    let v12 = &C::sinkable_load_exact(ctx, arg0);
    if let Some(v13) = v12 {
        let v14 = &constructor_sink_load_to_gpr_mem(ctx, v13);
        let v15 = constructor_extend_to_gpr_types(ctx, v14, v1, arg1, arg2);
        // Rule at src\isa\x64\inst.isle line 2384.
        return v15;
    }
    let v16 = &constructor_put_in_gpr_mem(ctx, arg0);
    let v17 = constructor_extend_to_gpr_types(ctx, v16, v1, arg1, arg2);
    // Rule at src\isa\x64\inst.isle line 2388.
    return v17;
}

// Generated as internal constructor for term extend_to_gpr_types.
pub fn constructor_extend_to_gpr_types<C: Context>(
    ctx: &mut C,
    arg0: &GprMem,
    arg1: Type,
    arg2: Type,
    arg3: &ExtendKind,
) -> Gpr {
    let v5 = &C::operand_size_of_type_32_64(ctx, arg2);
    let v6 = constructor_operand_size_bits(ctx, v5);
    let v4 = C::ty_bits_u16(ctx, arg1);
    let v7 = &C::ext_mode(ctx, v4, v6);
    let v8 = constructor_extend(ctx, arg3, arg2, v7, arg0);
    // Rule at src\isa\x64\inst.isle line 2393.
    return v8;
}

// Generated as internal constructor for term extend.
pub fn constructor_extend<C: Context>(
    ctx: &mut C,
    arg0: &ExtendKind,
    arg1: Type,
    arg2: &ExtMode,
    arg3: &GprMem,
) -> Gpr {
    match arg0 {
        &ExtendKind::Sign => {
            let v5 = constructor_x64_movsx(ctx, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 2412.
            return v5;
        }
        &ExtendKind::Zero => {
            let v4 = constructor_x64_movzx(ctx, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 2408.
            return v4;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "extend", "src\\isa\\x64\\inst.isle line 2405")
}

// Generated as internal constructor for term value32_zeros_upper32.
pub fn constructor_value32_zeros_upper32<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> bool {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = &C::inst_data_value(ctx, v2);
        match v3 {
            &InstructionData::Binary {
                opcode: ref v4,
                args: ref v5,
            } => {
                match v4 {
                    &Opcode::Iadd => {
                        let v9 = true;
                        // Rule at src\isa\x64\inst.isle line 2419.
                        return v9;
                    }
                    &Opcode::Isub => {
                        let v9 = true;
                        // Rule at src\isa\x64\inst.isle line 2420.
                        return v9;
                    }
                    &Opcode::Imul => {
                        let v9 = true;
                        // Rule at src\isa\x64\inst.isle line 2421.
                        return v9;
                    }
                    &Opcode::Band => {
                        let v9 = true;
                        // Rule at src\isa\x64\inst.isle line 2422.
                        return v9;
                    }
                    &Opcode::Bor => {
                        let v9 = true;
                        // Rule at src\isa\x64\inst.isle line 2423.
                        return v9;
                    }
                    &Opcode::Bxor => {
                        let v9 = true;
                        // Rule at src\isa\x64\inst.isle line 2424.
                        return v9;
                    }
                    &Opcode::Ishl => {
                        let v9 = true;
                        // Rule at src\isa\x64\inst.isle line 2425.
                        return v9;
                    }
                    &Opcode::Ushr => {
                        let v9 = true;
                        // Rule at src\isa\x64\inst.isle line 2426.
                        return v9;
                    }
                    _ => {}
                }
            }
            &InstructionData::Load {
                opcode: ref v10,
                arg: v11,
                flags: v12,
                offset: v13,
            } => {
                if let &Opcode::Uload32 = v10 {
                    let v9 = true;
                    // Rule at src\isa\x64\inst.isle line 2427.
                    return v9;
                }
            }
            _ => {}
        }
    }
    let v14 = false;
    // Rule at src\isa\x64\inst.isle line 2428.
    return v14;
}

// Generated as internal constructor for term vec_int_type.
pub fn constructor_vec_int_type<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> Type {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8_u32 => {
                if v2.1 == 0x10_u32 {
                    // Rule at src\isa\x64\inst.isle line 2434.
                    return I8X16;
                }
            }
            0x10_u32 => {
                if v2.1 == 0x8_u32 {
                    // Rule at src\isa\x64\inst.isle line 2435.
                    return I16X8;
                }
            }
            0x20_u32 => {
                if v2.1 == 0x4_u32 {
                    // Rule at src\isa\x64\inst.isle line 2436.
                    return I32X4;
                }
            }
            0x40_u32 => {
                if v2.1 == 0x2_u32 {
                    // Rule at src\isa\x64\inst.isle line 2437.
                    return I64X2;
                }
            }
            _ => {}
        }
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_int_type", "src\\isa\\x64\\inst.isle line 2433")
}

// Generated as internal constructor for term x64_xor_vector.
pub fn constructor_x64_xor_vector<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &XmmMem,
) -> Xmm {
    match arg0 {
        F16 => {
            let v3 = constructor_x64_xorps(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 2441.
            return v3;
        }
        F32 => {
            let v3 = constructor_x64_xorps(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 2442.
            return v3;
        }
        F64 => {
            let v4 = constructor_x64_xorpd(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 2443.
            return v4;
        }
        F128 => {
            let v3 = constructor_x64_xorps(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 2444.
            return v3;
        }
        F32X4 => {
            let v3 = constructor_x64_xorps(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 2445.
            return v3;
        }
        F64X2 => {
            let v4 = constructor_x64_xorpd(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 2446.
            return v4;
        }
        _ => {}
    }
    let v5 = C::multi_lane(ctx, arg0);
    if let Some(v6) = v5 {
        let v9 = constructor_x64_pxor(ctx, arg1, arg2);
        // Rule at src\isa\x64\inst.isle line 2447.
        return v9;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_xor_vector", "src\\isa\\x64\\inst.isle line 2440")
}

// Generated as internal constructor for term vector_all_ones.
pub fn constructor_vector_all_ones<C: Context>(
    ctx: &mut C,
) -> Xmm {
    let v0 = constructor_xmm_uninit_value(ctx);
    let v1 = &C::xmm_to_xmm_mem(ctx, v0);
    let v2 = constructor_x64_pcmpeqd(ctx, v0, v1);
    // Rule at src\isa\x64\inst.isle line 2459.
    return v2;
}

// Generated as internal constructor for term mov_rmi_to_xmm.
pub fn constructor_mov_rmi_to_xmm<C: Context>(
    ctx: &mut C,
    arg0: &RegMemImm,
) -> XmmMemImm {
    match arg0 {
        &RegMemImm::Reg {
            reg: v4,
        } => {
            let v5 = &C::reg_to_gpr_mem(ctx, v4);
            let v6 = constructor_x64_movd_to_xmm(ctx, v5);
            let v7 = &C::xmm_to_xmm_mem_imm(ctx, v6);
            // Rule at src\isa\x64\inst.isle line 2467.
            return v7.clone();
        }
        &RegMemImm::Mem {
            addr: ref v1,
        } => {
            let v2 = &C::xmm_mem_imm_new(ctx, arg0);
            // Rule at src\isa\x64\inst.isle line 2465.
            return v2.clone();
        }
        &RegMemImm::Imm {
            simm32: v3,
        } => {
            let v2 = &C::xmm_mem_imm_new(ctx, arg0);
            // Rule at src\isa\x64\inst.isle line 2466.
            return v2.clone();
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "mov_rmi_to_xmm", "src\\isa\\x64\\inst.isle line 2464")
}

// Generated as internal constructor for term x64_stack_switch_basic.
pub fn constructor_x64_stack_switch_basic<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
    arg2: Gpr,
) -> Gpr {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = MInst::StackSwitchBasic {
        store_context_ptr: arg0,
        load_context_ptr: arg1,
        in_payload0: arg2,
        out_payload0: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v3);
    // Rule at src\isa\x64\inst.isle line 2486.
    return v6;
}

// Generated as internal constructor for term x64_load.
pub fn constructor_x64_load<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &SyntheticAmode,
    arg2: &ExtKind,
) -> Reg {
    match arg0 {
        I64 => {
            let v11 = constructor_mov64_mr(ctx, arg1);
            // Rule at src\isa\x64\inst.isle line 2503.
            return v11;
        }
        F32 => {
            let v12 = constructor_x64_movss_load(ctx, arg1);
            let v13 = C::xmm_to_reg(ctx, v12);
            // Rule at src\isa\x64\inst.isle line 2506.
            return v13;
        }
        F64 => {
            let v14 = constructor_x64_movsd_load(ctx, arg1);
            let v15 = C::xmm_to_reg(ctx, v14);
            // Rule at src\isa\x64\inst.isle line 2509.
            return v15;
        }
        F128 => {
            let v16 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg1);
            let v17 = constructor_x64_movdqu_load(ctx, v16);
            let v18 = C::xmm_to_reg(ctx, v17);
            // Rule at src\isa\x64\inst.isle line 2512.
            return v18;
        }
        F32X4 => {
            let v19 = constructor_x64_movups_load(ctx, arg1);
            let v20 = C::xmm_to_reg(ctx, v19);
            // Rule at src\isa\x64\inst.isle line 2515.
            return v20;
        }
        F64X2 => {
            let v21 = constructor_x64_movupd_load(ctx, arg1);
            let v22 = C::xmm_to_reg(ctx, v21);
            // Rule at src\isa\x64\inst.isle line 2518.
            return v22;
        }
        _ => {}
    }
    let v1 = C::fits_in_32(ctx, arg0);
    if let Some(v2) = v1 {
        if let &ExtKind::SignExtend = arg2 {
            let v5 = C::ty_bytes(ctx, v2);
            let v7 = &C::ext_mode(ctx, v5, 0x8_u16);
            let v8 = &constructor_synthetic_amode_to_gpr_mem(ctx, arg1);
            let v9 = constructor_x64_movsx(ctx, v7, v8);
            let v10 = C::gpr_to_reg(ctx, v9);
            // Rule at src\isa\x64\inst.isle line 2499.
            return v10;
        }
    }
    let v23 = C::multi_lane(ctx, arg0);
    if let Some(v24) = v23 {
        let v16 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg1);
        let v17 = constructor_x64_movdqu_load(ctx, v16);
        let v18 = C::xmm_to_reg(ctx, v17);
        // Rule at src\isa\x64\inst.isle line 2521.
        return v18;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_load", "src\\isa\\x64\\inst.isle line 2497")
}

// Generated as internal constructor for term x64_mov.
pub fn constructor_x64_mov<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
) -> Reg {
    let v1 = &C::amode_to_synthetic_amode(ctx, arg0);
    let v2 = constructor_mov64_mr(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 2527.
    return v2;
}

// Generated as internal constructor for term x64_movzx.
pub fn constructor_x64_movzx<C: Context>(
    ctx: &mut C,
    arg0: &ExtMode,
    arg1: &GprMem,
) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = MInst::MovzxRmR {
        ext_mode: arg0.clone(),
        src: arg1.clone(),
        dst: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src\isa\x64\inst.isle line 2552.
    return v5;
}

// Generated as internal constructor for term x64_movsx.
pub fn constructor_x64_movsx<C: Context>(
    ctx: &mut C,
    arg0: &ExtMode,
    arg1: &GprMem,
) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = MInst::MovsxRmR {
        ext_mode: arg0.clone(),
        src: arg1.clone(),
        dst: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src\isa\x64\inst.isle line 2558.
    return v5;
}

// Generated as internal constructor for term x64_movss_load.
pub fn constructor_x64_movss_load<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v2 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg0);
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vmovss, v2);
        // Rule at src\isa\x64\inst.isle line 2566.
        return v6;
    }
    let v2 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Movss, v2);
    // Rule at src\isa\x64\inst.isle line 2564.
    return v3;
}

// Generated as internal constructor for term x64_movss_store.
pub fn constructor_x64_movss_store<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
    arg1: Xmm,
) -> SideEffectNoResult {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &constructor_xmm_movrm_vex(ctx, &AvxOpcode::Vmovss, arg0, arg1);
        // Rule at src\isa\x64\inst.isle line 2573.
        return v6.clone();
    }
    let v3 = &constructor_xmm_movrm(ctx, &SseOpcode::Movss, arg0, arg1);
    // Rule at src\isa\x64\inst.isle line 2571.
    return v3.clone();
}

// Generated as internal constructor for term x64_movsd_load.
pub fn constructor_x64_movsd_load<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v2 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg0);
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vmovsd, v2);
        // Rule at src\isa\x64\inst.isle line 2580.
        return v6;
    }
    let v2 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Movsd, v2);
    // Rule at src\isa\x64\inst.isle line 2578.
    return v3;
}

// Generated as internal constructor for term x64_movsd_store.
pub fn constructor_x64_movsd_store<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
    arg1: Xmm,
) -> SideEffectNoResult {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &constructor_xmm_movrm_vex(ctx, &AvxOpcode::Vmovsd, arg0, arg1);
        // Rule at src\isa\x64\inst.isle line 2587.
        return v6.clone();
    }
    let v3 = &constructor_xmm_movrm(ctx, &SseOpcode::Movsd, arg0, arg1);
    // Rule at src\isa\x64\inst.isle line 2585.
    return v3.clone();
}

// Generated as internal constructor for term x64_movups_load.
pub fn constructor_x64_movups_load<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v2 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg0);
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vmovups, v2);
        // Rule at src\isa\x64\inst.isle line 2594.
        return v6;
    }
    let v2 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Movups, v2);
    // Rule at src\isa\x64\inst.isle line 2592.
    return v3;
}

// Generated as internal constructor for term x64_movups_store.
pub fn constructor_x64_movups_store<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
    arg1: Xmm,
) -> SideEffectNoResult {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &constructor_xmm_movrm_vex(ctx, &AvxOpcode::Vmovups, arg0, arg1);
        // Rule at src\isa\x64\inst.isle line 2601.
        return v6.clone();
    }
    let v3 = &constructor_xmm_movrm(ctx, &SseOpcode::Movups, arg0, arg1);
    // Rule at src\isa\x64\inst.isle line 2599.
    return v3.clone();
}

// Generated as internal constructor for term x64_movupd_load.
pub fn constructor_x64_movupd_load<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v2 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg0);
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vmovupd, v2);
        // Rule at src\isa\x64\inst.isle line 2608.
        return v6;
    }
    let v2 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Movupd, v2);
    // Rule at src\isa\x64\inst.isle line 2606.
    return v3;
}

// Generated as internal constructor for term x64_movupd_store.
pub fn constructor_x64_movupd_store<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
    arg1: Xmm,
) -> SideEffectNoResult {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &constructor_xmm_movrm_vex(ctx, &AvxOpcode::Vmovupd, arg0, arg1);
        // Rule at src\isa\x64\inst.isle line 2615.
        return v6.clone();
    }
    let v3 = &constructor_xmm_movrm(ctx, &SseOpcode::Movupd, arg0, arg1);
    // Rule at src\isa\x64\inst.isle line 2613.
    return v3.clone();
}

// Generated as internal constructor for term x64_movd_to_gpr.
pub fn constructor_x64_movd_to_gpr<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
) -> Gpr {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_to_gpr_vex(ctx, &AvxOpcode::Vmovd, arg0, &OperandSize::Size32);
        // Rule at src\isa\x64\inst.isle line 2623.
        return v6;
    }
    let v3 = constructor_xmm_to_gpr(ctx, &SseOpcode::Movd, arg0, &OperandSize::Size32);
    // Rule at src\isa\x64\inst.isle line 2621.
    return v3;
}

// Generated as internal constructor for term x64_movd_to_xmm.
pub fn constructor_x64_movd_to_xmm<C: Context>(
    ctx: &mut C,
    arg0: &GprMem,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_gpr_to_xmm_vex(ctx, &AvxOpcode::Vmovd, arg0, &OperandSize::Size32);
        // Rule at src\isa\x64\inst.isle line 2631.
        return v6;
    }
    let v3 = constructor_gpr_to_xmm(ctx, &SseOpcode::Movd, arg0, &OperandSize::Size32);
    // Rule at src\isa\x64\inst.isle line 2629.
    return v3;
}

// Generated as internal constructor for term x64_movq_to_xmm.
pub fn constructor_x64_movq_to_xmm<C: Context>(
    ctx: &mut C,
    arg0: &GprMem,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_gpr_to_xmm_vex(ctx, &AvxOpcode::Vmovq, arg0, &OperandSize::Size64);
        // Rule at src\isa\x64\inst.isle line 2639.
        return v6;
    }
    let v3 = constructor_gpr_to_xmm(ctx, &SseOpcode::Movq, arg0, &OperandSize::Size64);
    // Rule at src\isa\x64\inst.isle line 2637.
    return v3;
}

// Generated as internal constructor for term x64_movq_to_gpr.
pub fn constructor_x64_movq_to_gpr<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
) -> Gpr {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_to_gpr_vex(ctx, &AvxOpcode::Vmovq, arg0, &OperandSize::Size64);
        // Rule at src\isa\x64\inst.isle line 2647.
        return v6;
    }
    let v3 = constructor_xmm_to_gpr(ctx, &SseOpcode::Movq, arg0, &OperandSize::Size64);
    // Rule at src\isa\x64\inst.isle line 2645.
    return v3;
}

// Generated as internal constructor for term x64_movdqu_load.
pub fn constructor_x64_movdqu_load<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
) -> Xmm {
    let v3 = C::use_avx(ctx);
    if v3 == true {
        let v5 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vmovdqu, arg0);
        // Rule at src\isa\x64\inst.isle line 2654.
        return v5;
    }
    let v2 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Movdqu, arg0);
    // Rule at src\isa\x64\inst.isle line 2652.
    return v2;
}

// Generated as internal constructor for term x64_movdqu_store.
pub fn constructor_x64_movdqu_store<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
    arg1: Xmm,
) -> SideEffectNoResult {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &constructor_xmm_movrm_vex(ctx, &AvxOpcode::Vmovdqu, arg0, arg1);
        // Rule at src\isa\x64\inst.isle line 2661.
        return v6.clone();
    }
    let v3 = &constructor_xmm_movrm(ctx, &SseOpcode::Movdqu, arg0, arg1);
    // Rule at src\isa\x64\inst.isle line 2659.
    return v3.clone();
}

// Generated as internal constructor for term x64_pmovsxbw.
pub fn constructor_x64_pmovsxbw<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
) -> Xmm {
    let v3 = C::use_avx(ctx);
    if v3 == true {
        let v5 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpmovsxbw, arg0);
        // Rule at src\isa\x64\inst.isle line 2668.
        return v5;
    }
    let v2 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Pmovsxbw, arg0);
    // Rule at src\isa\x64\inst.isle line 2666.
    return v2;
}

// Generated as internal constructor for term x64_pmovzxbw.
pub fn constructor_x64_pmovzxbw<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
) -> Xmm {
    let v3 = C::use_avx(ctx);
    if v3 == true {
        let v5 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpmovzxbw, arg0);
        // Rule at src\isa\x64\inst.isle line 2675.
        return v5;
    }
    let v2 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Pmovzxbw, arg0);
    // Rule at src\isa\x64\inst.isle line 2673.
    return v2;
}

// Generated as internal constructor for term x64_pmovsxwd.
pub fn constructor_x64_pmovsxwd<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
) -> Xmm {
    let v3 = C::use_avx(ctx);
    if v3 == true {
        let v5 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpmovsxwd, arg0);
        // Rule at src\isa\x64\inst.isle line 2682.
        return v5;
    }
    let v2 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Pmovsxwd, arg0);
    // Rule at src\isa\x64\inst.isle line 2680.
    return v2;
}

// Generated as internal constructor for term x64_pmovzxwd.
pub fn constructor_x64_pmovzxwd<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
) -> Xmm {
    let v3 = C::use_avx(ctx);
    if v3 == true {
        let v5 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpmovzxwd, arg0);
        // Rule at src\isa\x64\inst.isle line 2689.
        return v5;
    }
    let v2 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Pmovzxwd, arg0);
    // Rule at src\isa\x64\inst.isle line 2687.
    return v2;
}

// Generated as internal constructor for term x64_pmovsxdq.
pub fn constructor_x64_pmovsxdq<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
) -> Xmm {
    let v3 = C::use_avx(ctx);
    if v3 == true {
        let v5 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpmovsxdq, arg0);
        // Rule at src\isa\x64\inst.isle line 2696.
        return v5;
    }
    let v2 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Pmovsxdq, arg0);
    // Rule at src\isa\x64\inst.isle line 2694.
    return v2;
}

// Generated as internal constructor for term x64_pmovzxdq.
pub fn constructor_x64_pmovzxdq<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
) -> Xmm {
    let v3 = C::use_avx(ctx);
    if v3 == true {
        let v5 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpmovzxdq, arg0);
        // Rule at src\isa\x64\inst.isle line 2703.
        return v5;
    }
    let v2 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Pmovzxdq, arg0);
    // Rule at src\isa\x64\inst.isle line 2701.
    return v2;
}

// Generated as internal constructor for term x64_movrm.
pub fn constructor_x64_movrm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &SyntheticAmode,
    arg2: Gpr,
) -> SideEffectNoResult {
    let v3 = &C::raw_operand_size_of_type(ctx, arg0);
    let v4 = MInst::MovRM {
        size: v3.clone(),
        src: arg2,
        dst: arg1.clone(),
    };
    let v5 = SideEffectNoResult::Inst {
        inst: v4,
    };
    // Rule at src\isa\x64\inst.isle line 2710.
    return v5;
}

// Generated as internal constructor for term x64_movimm_m.
pub fn constructor_x64_movimm_m<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &SyntheticAmode,
    arg2: i32,
) -> SideEffectNoResult {
    let v3 = &C::raw_operand_size_of_type(ctx, arg0);
    let v4 = MInst::MovImmM {
        size: v3.clone(),
        simm32: arg2,
        dst: arg1.clone(),
    };
    let v5 = SideEffectNoResult::Inst {
        inst: v4,
    };
    // Rule at src\isa\x64\inst.isle line 2715.
    return v5;
}

// Generated as internal constructor for term xmm_movrm.
pub fn constructor_xmm_movrm<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: &SyntheticAmode,
    arg2: Xmm,
) -> SideEffectNoResult {
    let v3 = MInst::XmmMovRM {
        op: arg0.clone(),
        src: arg2,
        dst: arg1.clone(),
    };
    let v4 = SideEffectNoResult::Inst {
        inst: v3,
    };
    // Rule at src\isa\x64\inst.isle line 2720.
    return v4;
}

// Generated as internal constructor for term xmm_movrm_imm.
pub fn constructor_xmm_movrm_imm<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: &SyntheticAmode,
    arg2: Xmm,
    arg3: u8,
) -> SideEffectNoResult {
    let v4 = MInst::XmmMovRMImm {
        op: arg0.clone(),
        src: arg2,
        dst: arg1.clone(),
        imm: arg3,
    };
    let v5 = SideEffectNoResult::Inst {
        inst: v4,
    };
    // Rule at src\isa\x64\inst.isle line 2724.
    return v5;
}

// Generated as internal constructor for term xmm_movrm_vex.
pub fn constructor_xmm_movrm_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: &SyntheticAmode,
    arg2: Xmm,
) -> SideEffectNoResult {
    let v3 = MInst::XmmMovRMVex {
        op: arg0.clone(),
        src: arg2,
        dst: arg1.clone(),
    };
    let v4 = SideEffectNoResult::Inst {
        inst: v3,
    };
    // Rule at src\isa\x64\inst.isle line 2728.
    return v4;
}

// Generated as internal constructor for term xmm_movrm_imm_vex.
pub fn constructor_xmm_movrm_imm_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: &SyntheticAmode,
    arg2: Xmm,
    arg3: u8,
) -> SideEffectNoResult {
    let v4 = MInst::XmmMovRMImmVex {
        op: arg0.clone(),
        src: arg2,
        dst: arg1.clone(),
        imm: arg3,
    };
    let v5 = SideEffectNoResult::Inst {
        inst: v4,
    };
    // Rule at src\isa\x64\inst.isle line 2732.
    return v5;
}

// Generated as internal constructor for term x64_xmm_load_const.
pub fn constructor_x64_xmm_load_const<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: VCodeConstant,
) -> Xmm {
    let v2 = &C::const_to_synthetic_amode(ctx, arg1);
    let v4 = constructor_x64_load(ctx, arg0, v2, &ExtKind::None);
    let v5 = C::xmm_new(ctx, v4);
    // Rule at src\isa\x64\inst.isle line 2737.
    return v5;
}

// Generated as internal constructor for term x64_produce_flags.
pub fn constructor_x64_produce_flags<C: Context>(
    ctx: &mut C,
    arg0: &ProduceFlagsOp,
    arg1: Type,
    arg2: Gpr,
    arg3: &GprMemImm,
) -> ProducesFlags {
    match arg0 {
        &ProduceFlagsOp::Add => {
            let v4 = &constructor_x64_add_with_flags_paired(ctx, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 2751.
            return v4.clone();
        }
        &ProduceFlagsOp::Sub => {
            let v5 = &constructor_x64_sub_with_flags_paired(ctx, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 2753.
            return v5.clone();
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_produce_flags", "src\\isa\\x64\\inst.isle line 2750")
}

// Generated as internal constructor for term asm_produce_flags.
pub fn constructor_asm_produce_flags<C: Context>(
    ctx: &mut C,
    arg0: &AssemblerOutputs,
) -> ProducesFlags {
    if let &AssemblerOutputs::RetGpr {
        inst: ref v1,
        gpr: v2,
    } = arg0 {
        let v3 = C::gpr_to_reg(ctx, v2);
        let v4 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: v1.clone(),
            result: v3,
        };
        // Rule at src\isa\x64\inst.isle line 2759.
        return v4;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "asm_produce_flags", "src\\isa\\x64\\inst.isle line 2758")
}

// Generated as internal constructor for term x64_chain_flags.
pub fn constructor_x64_chain_flags<C: Context>(
    ctx: &mut C,
    arg0: &ChainFlagsOp,
    arg1: Type,
    arg2: Gpr,
    arg3: Gpr,
) -> ConsumesAndProducesFlags {
    match arg0 {
        &ChainFlagsOp::Adc => {
            let v4 = &C::gpr_to_gpr_mem_imm(ctx, arg3);
            let v5 = &constructor_x64_adc_chained(ctx, arg1, arg2, v4);
            // Rule at src\isa\x64\inst.isle line 2766.
            return v5.clone();
        }
        &ChainFlagsOp::Sbb => {
            let v4 = &C::gpr_to_gpr_mem_imm(ctx, arg3);
            let v6 = &constructor_x64_sbb_chained(ctx, arg1, arg2, v4);
            // Rule at src\isa\x64\inst.isle line 2768.
            return v6.clone();
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_chain_flags", "src\\isa\\x64\\inst.isle line 2765")
}

// Generated as internal constructor for term asm_chain_flags.
pub fn constructor_asm_chain_flags<C: Context>(
    ctx: &mut C,
    arg0: &AssemblerOutputs,
) -> ConsumesAndProducesFlags {
    if let &AssemblerOutputs::RetGpr {
        inst: ref v1,
        gpr: v2,
    } = arg0 {
        let v3 = C::gpr_to_reg(ctx, v2);
        let v4 = ConsumesAndProducesFlags::ReturnsReg {
            inst: v1.clone(),
            result: v3,
        };
        // Rule at src\isa\x64\inst.isle line 2772.
        return v4;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "asm_chain_flags", "src\\isa\\x64\\inst.isle line 2771")
}

// Generated as internal constructor for term x64_produce_flags_side_effect.
pub fn constructor_x64_produce_flags_side_effect<C: Context>(
    ctx: &mut C,
    arg0: &ProduceFlagsSideEffectOp,
    arg1: Type,
    arg2: Gpr,
    arg3: &GprMemImm,
) -> ProducesFlags {
    match arg0 {
        &ProduceFlagsSideEffectOp::Or => {
            let v2 = C::fits_in_64(ctx, arg1);
            if let Some(v3) = v2 {
                let v6 = &constructor_x64_or_with_flags_paired_side_effect(ctx, v3, arg2, arg3);
                // Rule at src\isa\x64\inst.isle line 2780.
                return v6.clone();
            }
        }
        &ProduceFlagsSideEffectOp::Sbb => {
            let v2 = C::fits_in_64(ctx, arg1);
            if let Some(v3) = v2 {
                let v7 = &constructor_x64_sbb_paired_side_effect(ctx, v3, arg2, arg3);
                // Rule at src\isa\x64\inst.isle line 2782.
                return v7.clone();
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_produce_flags_side_effect", "src\\isa\\x64\\inst.isle line 2779")
}

// Generated as internal constructor for term asm_produce_flags_side_effect.
pub fn constructor_asm_produce_flags_side_effect<C: Context>(
    ctx: &mut C,
    arg0: &AssemblerOutputs,
) -> ProducesFlags {
    if let &AssemblerOutputs::RetGpr {
        inst: ref v1,
        gpr: v2,
    } = arg0 {
        let v3 = ProducesFlags::ProducesFlagsSideEffect {
            inst: v1.clone(),
        };
        // Rule at src\isa\x64\inst.isle line 2786.
        return v3;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "asm_produce_flags_side_effect", "src\\isa\\x64\\inst.isle line 2785")
}

// Generated as internal constructor for term asm_consume_flags.
pub fn constructor_asm_consume_flags<C: Context>(
    ctx: &mut C,
    arg0: &AssemblerOutputs,
) -> ConsumesFlags {
    if let &AssemblerOutputs::RetGpr {
        inst: ref v1,
        gpr: v2,
    } = arg0 {
        let v3 = C::gpr_to_reg(ctx, v2);
        let v4 = ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
            inst: v1.clone(),
            result: v3,
        };
        // Rule at src\isa\x64\inst.isle line 2792.
        return v4;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "asm_consume_flags", "src\\isa\\x64\\inst.isle line 2791")
}

// Generated as internal constructor for term x64_add_raw.
pub fn constructor_x64_add_raw<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> AssemblerOutputs {
    match arg0 {
        I8 => {
            let v8 = C::is_imm8(ctx, arg2);
            if let Some(v9) = v8 {
                let v5 = &C::gpr_to_gpr_mem(ctx, arg1);
                let v10 = &C::x64_addb_mi_raw(ctx, v5, v9);
                // Rule at src\isa\x64\inst.isle line 2811.
                return v10.clone();
            }
            let v20 = &C::is_gpr_mem(ctx, arg2);
            if let Some(v21) = v20 {
                let v22 = &C::x64_addb_rm_raw(ctx, arg1, v21);
                // Rule at src\isa\x64\inst.isle line 2817.
                return v22.clone();
            }
        }
        I16 => {
            let v11 = C::is_imm16(ctx, arg2);
            if let Some(v12) = v11 {
                let v5 = &C::gpr_to_gpr_mem(ctx, arg1);
                let v13 = &C::x64_addw_mi_raw(ctx, v5, v12);
                // Rule at src\isa\x64\inst.isle line 2812.
                return v13.clone();
            }
            let v20 = &C::is_gpr_mem(ctx, arg2);
            if let Some(v21) = v20 {
                let v23 = &C::x64_addw_rm_raw(ctx, arg1, v21);
                // Rule at src\isa\x64\inst.isle line 2818.
                return v23.clone();
            }
        }
        I32 => {
            let v3 = C::is_simm8(ctx, arg2);
            if let Some(v4) = v3 {
                let v5 = &C::gpr_to_gpr_mem(ctx, arg1);
                let v6 = &C::x64_addl_mi_sxb_raw(ctx, v5, v4);
                // Rule at src\isa\x64\inst.isle line 2807.
                return v6.clone();
            }
            let v14 = C::is_imm32(ctx, arg2);
            if let Some(v15) = v14 {
                let v5 = &C::gpr_to_gpr_mem(ctx, arg1);
                let v16 = &C::x64_addl_mi_raw(ctx, v5, v15);
                // Rule at src\isa\x64\inst.isle line 2813.
                return v16.clone();
            }
            let v20 = &C::is_gpr_mem(ctx, arg2);
            if let Some(v21) = v20 {
                let v24 = &C::x64_addl_rm_raw(ctx, arg1, v21);
                // Rule at src\isa\x64\inst.isle line 2819.
                return v24.clone();
            }
        }
        I64 => {
            let v3 = C::is_simm8(ctx, arg2);
            if let Some(v4) = v3 {
                let v5 = &C::gpr_to_gpr_mem(ctx, arg1);
                let v7 = &C::x64_addq_mi_sxb_raw(ctx, v5, v4);
                // Rule at src\isa\x64\inst.isle line 2808.
                return v7.clone();
            }
            let v17 = C::is_simm32(ctx, arg2);
            if let Some(v18) = v17 {
                let v5 = &C::gpr_to_gpr_mem(ctx, arg1);
                let v19 = &C::x64_addq_mi_sxl_raw(ctx, v5, v18);
                // Rule at src\isa\x64\inst.isle line 2814.
                return v19.clone();
            }
            let v20 = &C::is_gpr_mem(ctx, arg2);
            if let Some(v21) = v20 {
                let v25 = &C::x64_addq_rm_raw(ctx, arg1, v21);
                // Rule at src\isa\x64\inst.isle line 2820.
                return v25.clone();
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_add_raw", "src\\isa\\x64\\inst.isle line 2804")
}

// Generated as internal constructor for term x64_add_break_deps.
pub fn constructor_x64_add_break_deps<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> AssemblerOutputs {
    match arg0 {
        I8 => {
            let v3 = C::is_gpr(ctx, arg2);
            if let Some(v4) = v3 {
                let v5 = &C::gpr_to_gpr_mem(ctx, v4);
                let v6 = &C::x64_addl_rm_raw(ctx, arg1, v5);
                // Rule at src\isa\x64\inst.isle line 2826.
                return v6.clone();
            }
        }
        I16 => {
            let v3 = C::is_gpr(ctx, arg2);
            if let Some(v4) = v3 {
                let v5 = &C::gpr_to_gpr_mem(ctx, v4);
                let v6 = &C::x64_addl_rm_raw(ctx, arg1, v5);
                // Rule at src\isa\x64\inst.isle line 2827.
                return v6.clone();
            }
        }
        _ => {}
    }
    let v7 = &constructor_x64_add_raw(ctx, arg0, arg1, arg2);
    // Rule at src\isa\x64\inst.isle line 2828.
    return v7.clone();
}

// Generated as internal constructor for term x64_add.
pub fn constructor_x64_add<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> Gpr {
    let v3 = &constructor_x64_add_break_deps(ctx, arg0, arg1, arg2);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at src\isa\x64\inst.isle line 2832.
    return v4;
}

// Generated as internal constructor for term x64_add_with_flags_paired.
pub fn constructor_x64_add_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> ProducesFlags {
    let v3 = &constructor_x64_add_raw(ctx, arg0, arg1, arg2);
    let v4 = &constructor_asm_produce_flags(ctx, v3);
    // Rule at src\isa\x64\inst.isle line 2839.
    return v4.clone();
}

// Generated as internal constructor for term x64_adc_raw.
pub fn constructor_x64_adc_raw<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> AssemblerOutputs {
    if arg0 == I64 {
        let v3 = C::is_simm8(ctx, arg2);
        if let Some(v4) = v3 {
            let v5 = &C::gpr_to_gpr_mem(ctx, arg1);
            let v6 = &C::x64_adcq_mi_sxb_raw(ctx, v5, v4);
            // Rule at src\isa\x64\inst.isle line 2848.
            return v6.clone();
        }
        let v7 = C::is_simm32(ctx, arg2);
        if let Some(v8) = v7 {
            let v5 = &C::gpr_to_gpr_mem(ctx, arg1);
            let v9 = &C::x64_adcq_mi_sxl_raw(ctx, v5, v8);
            // Rule at src\isa\x64\inst.isle line 2849.
            return v9.clone();
        }
        let v10 = &C::is_gpr_mem(ctx, arg2);
        if let Some(v11) = v10 {
            let v12 = &C::x64_adcq_rm_raw(ctx, arg1, v11);
            // Rule at src\isa\x64\inst.isle line 2850.
            return v12.clone();
        }
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_adc_raw", "src\\isa\\x64\\inst.isle line 2847")
}

// Generated as internal constructor for term x64_adc_paired.
pub fn constructor_x64_adc_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> ConsumesFlags {
    let v3 = &constructor_x64_adc_raw(ctx, arg0, arg1, arg2);
    let v4 = &constructor_asm_consume_flags(ctx, v3);
    // Rule at src\isa\x64\inst.isle line 2854.
    return v4.clone();
}

// Generated as internal constructor for term x64_adc_chained.
pub fn constructor_x64_adc_chained<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> ConsumesAndProducesFlags {
    let v3 = &constructor_x64_adc_raw(ctx, arg0, arg1, arg2);
    let v4 = &constructor_asm_chain_flags(ctx, v3);
    // Rule at src\isa\x64\inst.isle line 2859.
    return v4.clone();
}

// Generated as internal constructor for term x64_sub_raw.
pub fn constructor_x64_sub_raw<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> AssemblerOutputs {
    match arg0 {
        I8 => {
            let v8 = C::is_imm8(ctx, arg2);
            if let Some(v9) = v8 {
                let v5 = &C::gpr_to_gpr_mem(ctx, arg1);
                let v10 = &C::x64_subb_mi_raw(ctx, v5, v9);
                // Rule at src\isa\x64\inst.isle line 2872.
                return v10.clone();
            }
            let v20 = &C::is_gpr_mem(ctx, arg2);
            if let Some(v21) = v20 {
                let v22 = &C::x64_subb_rm_raw(ctx, arg1, v21);
                // Rule at src\isa\x64\inst.isle line 2878.
                return v22.clone();
            }
        }
        I16 => {
            let v11 = C::is_imm16(ctx, arg2);
            if let Some(v12) = v11 {
                let v5 = &C::gpr_to_gpr_mem(ctx, arg1);
                let v13 = &C::x64_subw_mi_raw(ctx, v5, v12);
                // Rule at src\isa\x64\inst.isle line 2873.
                return v13.clone();
            }
            let v20 = &C::is_gpr_mem(ctx, arg2);
            if let Some(v21) = v20 {
                let v23 = &C::x64_subw_rm_raw(ctx, arg1, v21);
                // Rule at src\isa\x64\inst.isle line 2879.
                return v23.clone();
            }
        }
        I32 => {
            let v3 = C::is_simm8(ctx, arg2);
            if let Some(v4) = v3 {
                let v5 = &C::gpr_to_gpr_mem(ctx, arg1);
                let v6 = &C::x64_subl_mi_sxb_raw(ctx, v5, v4);
                // Rule at src\isa\x64\inst.isle line 2868.
                return v6.clone();
            }
            let v14 = C::is_imm32(ctx, arg2);
            if let Some(v15) = v14 {
                let v5 = &C::gpr_to_gpr_mem(ctx, arg1);
                let v16 = &C::x64_subl_mi_raw(ctx, v5, v15);
                // Rule at src\isa\x64\inst.isle line 2874.
                return v16.clone();
            }
            let v20 = &C::is_gpr_mem(ctx, arg2);
            if let Some(v21) = v20 {
                let v24 = &C::x64_subl_rm_raw(ctx, arg1, v21);
                // Rule at src\isa\x64\inst.isle line 2880.
                return v24.clone();
            }
        }
        I64 => {
            let v3 = C::is_simm8(ctx, arg2);
            if let Some(v4) = v3 {
                let v5 = &C::gpr_to_gpr_mem(ctx, arg1);
                let v7 = &C::x64_subq_mi_sxb_raw(ctx, v5, v4);
                // Rule at src\isa\x64\inst.isle line 2869.
                return v7.clone();
            }
            let v17 = C::is_simm32(ctx, arg2);
            if let Some(v18) = v17 {
                let v5 = &C::gpr_to_gpr_mem(ctx, arg1);
                let v19 = &C::x64_subq_mi_sxl_raw(ctx, v5, v18);
                // Rule at src\isa\x64\inst.isle line 2875.
                return v19.clone();
            }
            let v20 = &C::is_gpr_mem(ctx, arg2);
            if let Some(v21) = v20 {
                let v25 = &C::x64_subq_rm_raw(ctx, arg1, v21);
                // Rule at src\isa\x64\inst.isle line 2881.
                return v25.clone();
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_sub_raw", "src\\isa\\x64\\inst.isle line 2865")
}

// Generated as internal constructor for term x64_sub_break_deps.
pub fn constructor_x64_sub_break_deps<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> AssemblerOutputs {
    match arg0 {
        I8 => {
            let v3 = C::is_gpr(ctx, arg2);
            if let Some(v4) = v3 {
                let v5 = &C::gpr_to_gpr_mem(ctx, v4);
                let v6 = &C::x64_subl_rm_raw(ctx, arg1, v5);
                // Rule at src\isa\x64\inst.isle line 2887.
                return v6.clone();
            }
        }
        I16 => {
            let v3 = C::is_gpr(ctx, arg2);
            if let Some(v4) = v3 {
                let v5 = &C::gpr_to_gpr_mem(ctx, v4);
                let v6 = &C::x64_subl_rm_raw(ctx, arg1, v5);
                // Rule at src\isa\x64\inst.isle line 2888.
                return v6.clone();
            }
        }
        _ => {}
    }
    let v7 = &constructor_x64_sub_raw(ctx, arg0, arg1, arg2);
    // Rule at src\isa\x64\inst.isle line 2889.
    return v7.clone();
}

// Generated as internal constructor for term x64_sub.
pub fn constructor_x64_sub<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> Gpr {
    let v3 = &constructor_x64_sub_break_deps(ctx, arg0, arg1, arg2);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at src\isa\x64\inst.isle line 2893.
    return v4;
}

// Generated as internal constructor for term x64_sub_with_flags_paired.
pub fn constructor_x64_sub_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> ProducesFlags {
    let v3 = &constructor_x64_sub_raw(ctx, arg0, arg1, arg2);
    let v4 = &constructor_asm_produce_flags(ctx, v3);
    // Rule at src\isa\x64\inst.isle line 2899.
    return v4.clone();
}

// Generated as internal constructor for term x64_sbb_raw.
pub fn constructor_x64_sbb_raw<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> AssemblerOutputs {
    match arg0 {
        I8 => {
            let v8 = C::is_imm8(ctx, arg2);
            if let Some(v9) = v8 {
                let v5 = &C::gpr_to_gpr_mem(ctx, arg1);
                let v10 = &C::x64_sbbb_mi_raw(ctx, v5, v9);
                // Rule at src\isa\x64\inst.isle line 2913.
                return v10.clone();
            }
            let v20 = &C::is_gpr_mem(ctx, arg2);
            if let Some(v21) = v20 {
                let v22 = &C::x64_sbbb_rm_raw(ctx, arg1, v21);
                // Rule at src\isa\x64\inst.isle line 2919.
                return v22.clone();
            }
        }
        I16 => {
            let v11 = C::is_imm16(ctx, arg2);
            if let Some(v12) = v11 {
                let v5 = &C::gpr_to_gpr_mem(ctx, arg1);
                let v13 = &C::x64_sbbw_mi_raw(ctx, v5, v12);
                // Rule at src\isa\x64\inst.isle line 2914.
                return v13.clone();
            }
            let v20 = &C::is_gpr_mem(ctx, arg2);
            if let Some(v21) = v20 {
                let v23 = &C::x64_sbbw_rm_raw(ctx, arg1, v21);
                // Rule at src\isa\x64\inst.isle line 2920.
                return v23.clone();
            }
        }
        I32 => {
            let v3 = C::is_simm8(ctx, arg2);
            if let Some(v4) = v3 {
                let v5 = &C::gpr_to_gpr_mem(ctx, arg1);
                let v6 = &C::x64_sbbl_mi_sxb_raw(ctx, v5, v4);
                // Rule at src\isa\x64\inst.isle line 2909.
                return v6.clone();
            }
            let v14 = C::is_imm32(ctx, arg2);
            if let Some(v15) = v14 {
                let v5 = &C::gpr_to_gpr_mem(ctx, arg1);
                let v16 = &C::x64_sbbl_mi_raw(ctx, v5, v15);
                // Rule at src\isa\x64\inst.isle line 2915.
                return v16.clone();
            }
            let v20 = &C::is_gpr_mem(ctx, arg2);
            if let Some(v21) = v20 {
                let v24 = &C::x64_sbbl_rm_raw(ctx, arg1, v21);
                // Rule at src\isa\x64\inst.isle line 2921.
                return v24.clone();
            }
        }
        I64 => {
            let v3 = C::is_simm8(ctx, arg2);
            if let Some(v4) = v3 {
                let v5 = &C::gpr_to_gpr_mem(ctx, arg1);
                let v7 = &C::x64_sbbq_mi_sxb_raw(ctx, v5, v4);
                // Rule at src\isa\x64\inst.isle line 2910.
                return v7.clone();
            }
            let v17 = C::is_simm32(ctx, arg2);
            if let Some(v18) = v17 {
                let v5 = &C::gpr_to_gpr_mem(ctx, arg1);
                let v19 = &C::x64_sbbq_mi_sxl_raw(ctx, v5, v18);
                // Rule at src\isa\x64\inst.isle line 2916.
                return v19.clone();
            }
            let v20 = &C::is_gpr_mem(ctx, arg2);
            if let Some(v21) = v20 {
                let v25 = &C::x64_sbbq_rm_raw(ctx, arg1, v21);
                // Rule at src\isa\x64\inst.isle line 2922.
                return v25.clone();
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_sbb_raw", "src\\isa\\x64\\inst.isle line 2906")
}

// Generated as internal constructor for term x64_sbb_break_deps.
pub fn constructor_x64_sbb_break_deps<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> AssemblerOutputs {
    match arg0 {
        I8 => {
            let v3 = C::is_gpr(ctx, arg2);
            if let Some(v4) = v3 {
                let v5 = &C::gpr_to_gpr_mem(ctx, v4);
                let v6 = &C::x64_sbbl_rm_raw(ctx, arg1, v5);
                // Rule at src\isa\x64\inst.isle line 2928.
                return v6.clone();
            }
        }
        I16 => {
            let v3 = C::is_gpr(ctx, arg2);
            if let Some(v4) = v3 {
                let v5 = &C::gpr_to_gpr_mem(ctx, v4);
                let v6 = &C::x64_sbbl_rm_raw(ctx, arg1, v5);
                // Rule at src\isa\x64\inst.isle line 2929.
                return v6.clone();
            }
        }
        _ => {}
    }
    let v7 = &constructor_x64_sbb_raw(ctx, arg0, arg1, arg2);
    // Rule at src\isa\x64\inst.isle line 2930.
    return v7.clone();
}

// Generated as internal constructor for term x64_sbb_paired.
pub fn constructor_x64_sbb_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> ConsumesFlags {
    let v3 = &constructor_x64_sbb_break_deps(ctx, arg0, arg1, arg2);
    let v4 = &constructor_asm_consume_flags(ctx, v3);
    // Rule at src\isa\x64\inst.isle line 2935.
    return v4.clone();
}

// Generated as internal constructor for term x64_sbb_chained.
pub fn constructor_x64_sbb_chained<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> ConsumesAndProducesFlags {
    let v3 = &constructor_x64_sbb_raw(ctx, arg0, arg1, arg2);
    let v4 = &constructor_asm_chain_flags(ctx, v3);
    // Rule at src\isa\x64\inst.isle line 2940.
    return v4.clone();
}

// Generated as internal constructor for term x64_sbb_paired_side_effect.
pub fn constructor_x64_sbb_paired_side_effect<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> ProducesFlags {
    let v3 = &constructor_x64_sbb_raw(ctx, arg0, arg1, arg2);
    let v4 = &constructor_asm_produce_flags_side_effect(ctx, v3);
    // Rule at src\isa\x64\inst.isle line 2945.
    return v4.clone();
}

// Generated as internal constructor for term x64_mul.
pub fn constructor_x64_mul<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: bool,
    arg2: Gpr,
    arg3: &GprMem,
) -> ValueRegs {
    if arg1 == false {
        let v12 = C::ty_32_or_64(ctx, arg0);
        if let Some(v13) = v12 {
            let v14 = C::use_bmi2(ctx);
            if v14 == true {
                let v4 = C::temp_writable_gpr(ctx);
                let v5 = C::temp_writable_gpr(ctx);
                let v15 = &C::raw_operand_size_of_type(ctx, v13);
                let v16 = MInst::MulX {
                    size: v15.clone(),
                    src1: arg2,
                    src2: arg3.clone(),
                    dst_lo: v4,
                    dst_hi: v5,
                };
                let v17 = C::emit(ctx, &v16);
                let v9 = C::writable_gpr_to_gpr(ctx, v4);
                let v10 = C::writable_gpr_to_gpr(ctx, v5);
                let v11 = constructor_value_gprs(ctx, v9, v10);
                // Rule at src\isa\x64\inst.isle line 2961.
                return v11;
            }
        }
    }
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = C::temp_writable_gpr(ctx);
    let v6 = &C::raw_operand_size_of_type(ctx, arg0);
    let v7 = MInst::Mul {
        size: v6.clone(),
        signed: arg1,
        src1: arg2,
        src2: arg3.clone(),
        dst_lo: v4,
        dst_hi: v5,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_gpr_to_gpr(ctx, v4);
    let v10 = C::writable_gpr_to_gpr(ctx, v5);
    let v11 = constructor_value_gprs(ctx, v9, v10);
    // Rule at src\isa\x64\inst.isle line 2953.
    return v11;
}

// Generated as internal constructor for term x64_mulx_hi.
pub fn constructor_x64_mulx_hi<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMem,
) -> Gpr {
    let v1 = C::ty_32_or_64(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = C::temp_writable_gpr(ctx);
        let v6 = &C::raw_operand_size_of_type(ctx, v2);
        let v7 = C::writable_invalid_gpr(ctx);
        let v8 = MInst::MulX {
            size: v6.clone(),
            src1: arg1,
            src2: arg2.clone(),
            dst_lo: v7,
            dst_hi: v5,
        };
        let v9 = C::emit(ctx, &v8);
        let v10 = C::writable_gpr_to_gpr(ctx, v5);
        // Rule at src\isa\x64\inst.isle line 2970.
        return v10;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_mulx_hi", "src\\isa\\x64\\inst.isle line 2969")
}

// Generated as internal constructor for term x64_mul8.
pub fn constructor_x64_mul8<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: Gpr,
    arg2: &GprMem,
) -> Gpr {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = MInst::Mul8 {
        signed: arg0,
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v3);
    // Rule at src\isa\x64\inst.isle line 2983.
    return v6;
}

// Generated as internal constructor for term x64_imul.
pub fn constructor_x64_imul<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMem,
) -> Gpr {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = &C::raw_operand_size_of_type(ctx, arg0);
    let v5 = MInst::IMul {
        size: v4.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_gpr_to_gpr(ctx, v3);
    // Rule at src\isa\x64\inst.isle line 2990.
    return v7;
}

// Generated as internal constructor for term x64_imul_imm.
pub fn constructor_x64_imul_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &GprMem,
    arg2: i32,
) -> Gpr {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = &C::raw_operand_size_of_type(ctx, arg0);
    let v5 = MInst::IMulImm {
        size: v4.clone(),
        src1: arg1.clone(),
        src2: arg2,
        dst: v3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_gpr_to_gpr(ctx, v3);
    // Rule at src\isa\x64\inst.isle line 2998.
    return v7;
}

// Generated as internal constructor for term x64_mul8_with_flags_paired.
pub fn constructor_x64_mul8_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: Gpr,
    arg2: &GprMem,
) -> ProducesFlags {
    let v3 = C::temp_writable_gpr(ctx);
    let v5 = constructor_writable_gpr_to_r_reg(ctx, v3);
    let v4 = MInst::Mul8 {
        signed: arg0,
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v6 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v4,
        result: v5,
    };
    // Rule at src\isa\x64\inst.isle line 3005.
    return v6;
}

// Generated as internal constructor for term x64_mul_lo_with_flags_paired.
pub fn constructor_x64_mul_lo_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: bool,
    arg2: Gpr,
    arg3: &GprMem,
) -> ProducesFlags {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = C::temp_writable_gpr(ctx);
    let v6 = &C::raw_operand_size_of_type(ctx, arg0);
    let v8 = constructor_writable_gpr_to_r_reg(ctx, v4);
    let v7 = MInst::Mul {
        size: v6.clone(),
        signed: arg1,
        src1: arg2,
        src2: arg3.clone(),
        dst_lo: v4,
        dst_hi: v5,
    };
    let v9 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v7,
        result: v8,
    };
    // Rule at src\isa\x64\inst.isle line 3012.
    return v9;
}

// Generated as internal constructor for term x64_and.
pub fn constructor_x64_and<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> Gpr {
    match arg0 {
        I8 => {
            let v7 = C::is_imm8(ctx, arg2);
            if let Some(v8) = v7 {
                let v9 = constructor_x64_andb_mi(ctx, arg1, v8);
                // Rule at src\isa\x64\inst.isle line 3030.
                return v9;
            }
            let v19 = C::is_gpr(ctx, arg2);
            if let Some(v20) = v19 {
                let v21 = &C::gpr_to_gpr_mem(ctx, v20);
                let v22 = constructor_x64_andl_rm(ctx, arg1, v21);
                // Rule at src\isa\x64\inst.isle line 3037.
                return v22;
            }
            let v23 = &C::is_gpr_mem(ctx, arg2);
            if let Some(v24) = v23 {
                let v25 = constructor_x64_andb_rm(ctx, arg1, v24);
                // Rule at src\isa\x64\inst.isle line 3041.
                return v25;
            }
        }
        I16 => {
            let v10 = C::is_imm16(ctx, arg2);
            if let Some(v11) = v10 {
                let v12 = constructor_x64_andw_mi(ctx, arg1, v11);
                // Rule at src\isa\x64\inst.isle line 3031.
                return v12;
            }
            let v19 = C::is_gpr(ctx, arg2);
            if let Some(v20) = v19 {
                let v21 = &C::gpr_to_gpr_mem(ctx, v20);
                let v22 = constructor_x64_andl_rm(ctx, arg1, v21);
                // Rule at src\isa\x64\inst.isle line 3038.
                return v22;
            }
            let v23 = &C::is_gpr_mem(ctx, arg2);
            if let Some(v24) = v23 {
                let v26 = constructor_x64_andw_rm(ctx, arg1, v24);
                // Rule at src\isa\x64\inst.isle line 3042.
                return v26;
            }
        }
        I32 => {
            let v3 = C::is_simm8(ctx, arg2);
            if let Some(v4) = v3 {
                let v5 = constructor_x64_andl_mi_sxb(ctx, arg1, v4);
                // Rule at src\isa\x64\inst.isle line 3026.
                return v5;
            }
            let v13 = C::is_imm32(ctx, arg2);
            if let Some(v14) = v13 {
                let v15 = constructor_x64_andl_mi(ctx, arg1, v14);
                // Rule at src\isa\x64\inst.isle line 3032.
                return v15;
            }
            let v23 = &C::is_gpr_mem(ctx, arg2);
            if let Some(v24) = v23 {
                let v27 = constructor_x64_andl_rm(ctx, arg1, v24);
                // Rule at src\isa\x64\inst.isle line 3043.
                return v27;
            }
        }
        I64 => {
            let v3 = C::is_simm8(ctx, arg2);
            if let Some(v4) = v3 {
                let v6 = constructor_x64_andq_mi_sxb(ctx, arg1, v4);
                // Rule at src\isa\x64\inst.isle line 3027.
                return v6;
            }
            let v16 = C::is_simm32(ctx, arg2);
            if let Some(v17) = v16 {
                let v18 = constructor_x64_andq_mi_sxl(ctx, arg1, v17);
                // Rule at src\isa\x64\inst.isle line 3033.
                return v18;
            }
            let v23 = &C::is_gpr_mem(ctx, arg2);
            if let Some(v24) = v23 {
                let v28 = constructor_x64_andq_rm(ctx, arg1, v24);
                // Rule at src\isa\x64\inst.isle line 3044.
                return v28;
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_and", "src\\isa\\x64\\inst.isle line 3023")
}

// Generated as internal constructor for term x64_or_raw.
pub fn constructor_x64_or_raw<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> AssemblerOutputs {
    match arg0 {
        I8 => {
            let v8 = C::is_imm8(ctx, arg2);
            if let Some(v9) = v8 {
                let v5 = &C::gpr_to_gpr_mem(ctx, arg1);
                let v10 = &C::x64_orb_mi_raw(ctx, v5, v9);
                // Rule at src\isa\x64\inst.isle line 3056.
                return v10.clone();
            }
            let v20 = &C::is_gpr_mem(ctx, arg2);
            if let Some(v21) = v20 {
                let v22 = &C::x64_orb_rm_raw(ctx, arg1, v21);
                // Rule at src\isa\x64\inst.isle line 3062.
                return v22.clone();
            }
        }
        I16 => {
            let v11 = C::is_imm16(ctx, arg2);
            if let Some(v12) = v11 {
                let v5 = &C::gpr_to_gpr_mem(ctx, arg1);
                let v13 = &C::x64_orw_mi_raw(ctx, v5, v12);
                // Rule at src\isa\x64\inst.isle line 3057.
                return v13.clone();
            }
            let v20 = &C::is_gpr_mem(ctx, arg2);
            if let Some(v21) = v20 {
                let v23 = &C::x64_orw_rm_raw(ctx, arg1, v21);
                // Rule at src\isa\x64\inst.isle line 3063.
                return v23.clone();
            }
        }
        I32 => {
            let v3 = C::is_simm8(ctx, arg2);
            if let Some(v4) = v3 {
                let v5 = &C::gpr_to_gpr_mem(ctx, arg1);
                let v6 = &C::x64_orl_mi_sxb_raw(ctx, v5, v4);
                // Rule at src\isa\x64\inst.isle line 3052.
                return v6.clone();
            }
            let v14 = C::is_imm32(ctx, arg2);
            if let Some(v15) = v14 {
                let v5 = &C::gpr_to_gpr_mem(ctx, arg1);
                let v16 = &C::x64_orl_mi_raw(ctx, v5, v15);
                // Rule at src\isa\x64\inst.isle line 3058.
                return v16.clone();
            }
            let v20 = &C::is_gpr_mem(ctx, arg2);
            if let Some(v21) = v20 {
                let v24 = &C::x64_orl_rm_raw(ctx, arg1, v21);
                // Rule at src\isa\x64\inst.isle line 3064.
                return v24.clone();
            }
        }
        I64 => {
            let v3 = C::is_simm8(ctx, arg2);
            if let Some(v4) = v3 {
                let v5 = &C::gpr_to_gpr_mem(ctx, arg1);
                let v7 = &C::x64_orq_mi_sxb_raw(ctx, v5, v4);
                // Rule at src\isa\x64\inst.isle line 3053.
                return v7.clone();
            }
            let v17 = C::is_simm32(ctx, arg2);
            if let Some(v18) = v17 {
                let v5 = &C::gpr_to_gpr_mem(ctx, arg1);
                let v19 = &C::x64_orq_mi_sxl_raw(ctx, v5, v18);
                // Rule at src\isa\x64\inst.isle line 3059.
                return v19.clone();
            }
            let v20 = &C::is_gpr_mem(ctx, arg2);
            if let Some(v21) = v20 {
                let v25 = &C::x64_orq_rm_raw(ctx, arg1, v21);
                // Rule at src\isa\x64\inst.isle line 3065.
                return v25.clone();
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_or_raw", "src\\isa\\x64\\inst.isle line 3049")
}

// Generated as internal constructor for term x64_or_break_deps.
pub fn constructor_x64_or_break_deps<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> AssemblerOutputs {
    match arg0 {
        I8 => {
            let v3 = C::is_gpr(ctx, arg2);
            if let Some(v4) = v3 {
                let v5 = &C::gpr_to_gpr_mem(ctx, v4);
                let v6 = &C::x64_orl_rm_raw(ctx, arg1, v5);
                // Rule at src\isa\x64\inst.isle line 3070.
                return v6.clone();
            }
        }
        I16 => {
            let v3 = C::is_gpr(ctx, arg2);
            if let Some(v4) = v3 {
                let v5 = &C::gpr_to_gpr_mem(ctx, v4);
                let v6 = &C::x64_orl_rm_raw(ctx, arg1, v5);
                // Rule at src\isa\x64\inst.isle line 3071.
                return v6.clone();
            }
        }
        _ => {}
    }
    let v7 = &constructor_x64_or_raw(ctx, arg0, arg1, arg2);
    // Rule at src\isa\x64\inst.isle line 3072.
    return v7.clone();
}

// Generated as internal constructor for term x64_or.
pub fn constructor_x64_or<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> Gpr {
    let v3 = &constructor_x64_or_break_deps(ctx, arg0, arg1, arg2);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at src\isa\x64\inst.isle line 3076.
    return v4;
}

// Generated as internal constructor for term x64_or_with_flags_paired_side_effect.
pub fn constructor_x64_or_with_flags_paired_side_effect<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> ProducesFlags {
    let v3 = &constructor_x64_or_raw(ctx, arg0, arg1, arg2);
    let v4 = &constructor_asm_produce_flags_side_effect(ctx, v3);
    // Rule at src\isa\x64\inst.isle line 3082.
    return v4.clone();
}

// Generated as internal constructor for term x64_xor.
pub fn constructor_x64_xor<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> Gpr {
    match arg0 {
        I8 => {
            let v7 = C::is_imm8(ctx, arg2);
            if let Some(v8) = v7 {
                let v9 = constructor_x64_xorb_mi(ctx, arg1, v8);
                // Rule at src\isa\x64\inst.isle line 3095.
                return v9;
            }
            let v19 = C::is_gpr(ctx, arg2);
            if let Some(v20) = v19 {
                let v21 = &C::gpr_to_gpr_mem(ctx, v20);
                let v22 = constructor_x64_xorl_rm(ctx, arg1, v21);
                // Rule at src\isa\x64\inst.isle line 3102.
                return v22;
            }
            let v23 = &C::is_gpr_mem(ctx, arg2);
            if let Some(v24) = v23 {
                let v25 = constructor_x64_xorb_rm(ctx, arg1, v24);
                // Rule at src\isa\x64\inst.isle line 3106.
                return v25;
            }
        }
        I16 => {
            let v10 = C::is_imm16(ctx, arg2);
            if let Some(v11) = v10 {
                let v12 = constructor_x64_xorw_mi(ctx, arg1, v11);
                // Rule at src\isa\x64\inst.isle line 3096.
                return v12;
            }
            let v19 = C::is_gpr(ctx, arg2);
            if let Some(v20) = v19 {
                let v21 = &C::gpr_to_gpr_mem(ctx, v20);
                let v22 = constructor_x64_xorl_rm(ctx, arg1, v21);
                // Rule at src\isa\x64\inst.isle line 3103.
                return v22;
            }
            let v23 = &C::is_gpr_mem(ctx, arg2);
            if let Some(v24) = v23 {
                let v26 = constructor_x64_xorw_rm(ctx, arg1, v24);
                // Rule at src\isa\x64\inst.isle line 3107.
                return v26;
            }
        }
        I32 => {
            let v3 = C::is_simm8(ctx, arg2);
            if let Some(v4) = v3 {
                let v5 = constructor_x64_xorl_mi_sxb(ctx, arg1, v4);
                // Rule at src\isa\x64\inst.isle line 3091.
                return v5;
            }
            let v13 = C::is_imm32(ctx, arg2);
            if let Some(v14) = v13 {
                let v15 = constructor_x64_xorl_mi(ctx, arg1, v14);
                // Rule at src\isa\x64\inst.isle line 3097.
                return v15;
            }
            let v23 = &C::is_gpr_mem(ctx, arg2);
            if let Some(v24) = v23 {
                let v27 = constructor_x64_xorl_rm(ctx, arg1, v24);
                // Rule at src\isa\x64\inst.isle line 3108.
                return v27;
            }
        }
        I64 => {
            let v3 = C::is_simm8(ctx, arg2);
            if let Some(v4) = v3 {
                let v6 = constructor_x64_xorq_mi_sxb(ctx, arg1, v4);
                // Rule at src\isa\x64\inst.isle line 3092.
                return v6;
            }
            let v16 = C::is_simm32(ctx, arg2);
            if let Some(v17) = v16 {
                let v18 = constructor_x64_xorq_mi_sxl(ctx, arg1, v17);
                // Rule at src\isa\x64\inst.isle line 3098.
                return v18;
            }
            let v23 = &C::is_gpr_mem(ctx, arg2);
            if let Some(v24) = v23 {
                let v28 = constructor_x64_xorq_rm(ctx, arg1, v24);
                // Rule at src\isa\x64\inst.isle line 3109.
                return v28;
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_xor", "src\\isa\\x64\\inst.isle line 3088")
}

// Generated as internal constructor for term x64_andn.
pub fn constructor_x64_andn<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMem,
) -> Gpr {
    let v4 = constructor_alu_rm_r_vex(ctx, arg0, &AluRmROpcode::Andn, arg1, arg2);
    // Rule at src\isa\x64\inst.isle line 3114.
    return v4;
}

// Generated as internal constructor for term imm_i64.
pub fn constructor_imm_i64<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: i64,
) -> Reg {
    let v2 = C::i64_as_u64(ctx, arg1);
    let v3 = constructor_imm(ctx, arg0, v2);
    // Rule at src\isa\x64\inst.isle line 3121.
    return v3;
}

// Generated as internal constructor for term imm.
pub fn constructor_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: u64,
) -> Reg {
    match arg0 {
        I64 => {
            let v26 = C::nonzero_u64_fits_in_u32(ctx, arg1);
            if let Some(v27) = v26 {
                let v5 = C::temp_writable_gpr(ctx);
                let v29 = MInst::Imm {
                    dst_size: OperandSize::Size32,
                    simm64: v27,
                    dst: v5,
                };
                let v30 = C::emit(ctx, &v29);
                let v31 = constructor_writable_gpr_to_r_reg(ctx, v5);
                // Rule at src\isa\x64\inst.isle line 3156.
                return v31;
            }
        }
        F16 => {
            let v4 = C::u64_is_zero(ctx, arg1);
            match v4 {
                false => {
                    let v12 = constructor_imm(ctx, I16, arg1);
                    let v13 = C::gpr_new(ctx, v12);
                    let v14 = constructor_bitcast_gpr_to_xmm(ctx, 0x10_u8, v13);
                    let v15 = C::xmm_to_reg(ctx, v14);
                    // Rule at src\isa\x64\inst.isle line 3143.
                    return v15;
                }
                true => {
                    let v40 = constructor_xmm_zero(ctx, arg0);
                    let v41 = C::xmm_to_reg(ctx, v40);
                    // Rule at src\isa\x64\inst.isle line 3172.
                    return v41;
                }
                _ => {}
            }
        }
        F32 => {
            let v4 = C::u64_is_zero(ctx, arg1);
            match v4 {
                false => {
                    let v17 = constructor_imm(ctx, I32, arg1);
                    let v18 = &C::reg_to_gpr_mem(ctx, v17);
                    let v19 = constructor_x64_movd_to_xmm(ctx, v18);
                    let v20 = C::xmm_to_reg(ctx, v19);
                    // Rule at src\isa\x64\inst.isle line 3147.
                    return v20;
                }
                true => {
                    let v40 = constructor_xmm_zero(ctx, arg0);
                    let v41 = C::xmm_to_reg(ctx, v40);
                    // Rule at src\isa\x64\inst.isle line 3175.
                    return v41;
                }
                _ => {}
            }
        }
        F64 => {
            let v4 = C::u64_is_zero(ctx, arg1);
            match v4 {
                false => {
                    let v22 = constructor_imm(ctx, I64, arg1);
                    let v23 = &C::reg_to_gpr_mem(ctx, v22);
                    let v24 = constructor_x64_movq_to_xmm(ctx, v23);
                    let v25 = C::xmm_to_reg(ctx, v24);
                    // Rule at src\isa\x64\inst.isle line 3151.
                    return v25;
                }
                true => {
                    let v40 = constructor_xmm_zero(ctx, arg0);
                    let v41 = C::xmm_to_reg(ctx, v40);
                    // Rule at src\isa\x64\inst.isle line 3180.
                    return v41;
                }
                _ => {}
            }
        }
        _ => {}
    }
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        let v4 = C::u64_is_zero(ctx, arg1);
        match v4 {
            false => {
                let v5 = C::temp_writable_gpr(ctx);
                let v6 = &C::operand_size_of_type_32_64(ctx, v2);
                let v7 = MInst::Imm {
                    dst_size: v6.clone(),
                    simm64: arg1,
                    dst: v5,
                };
                let v8 = C::emit(ctx, &v7);
                let v9 = constructor_writable_gpr_to_r_reg(ctx, v5);
                // Rule at src\isa\x64\inst.isle line 3136.
                return v9;
            }
            true => {
                let v32 = constructor_gpr_uninit_value(ctx);
                let v33 = &C::gpr_to_gpr_mem_imm(ctx, v32);
                let v34 = constructor_x64_xor(ctx, v2, v32, v33);
                let v35 = C::gpr_to_reg(ctx, v34);
                // Rule at src\isa\x64\inst.isle line 3162.
                return v35;
            }
            _ => {}
        }
    }
    if arg1 == 0x0_u64 {
        let v36 = C::multi_lane(ctx, arg0);
        if let Some(v37) = v36 {
            let v40 = constructor_xmm_zero(ctx, arg0);
            let v41 = C::xmm_to_reg(ctx, v40);
            // Rule at src\isa\x64\inst.isle line 3168.
            return v41;
        }
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "imm", "src\\isa\\x64\\inst.isle line 3133")
}

// Generated as internal constructor for term xmm_zero.
pub fn constructor_xmm_zero<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> Xmm {
    let v1 = constructor_xmm_uninit_value(ctx);
    let v2 = &C::xmm_to_xmm_mem(ctx, v1);
    let v3 = constructor_x64_xor_vector(ctx, arg0, v1, v2);
    // Rule at src\isa\x64\inst.isle line 3185.
    return v3;
}

// Generated as internal constructor for term shift_r.
pub fn constructor_shift_r<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ShiftKind,
    arg2: Gpr,
    arg3: &Imm8Gpr,
) -> Gpr {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = &C::raw_operand_size_of_type(ctx, arg0);
    let v6 = MInst::ShiftR {
        size: v5.clone(),
        kind: arg1.clone(),
        src: arg2,
        num_bits: arg3.clone(),
        dst: v4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_gpr_to_gpr(ctx, v4);
    // Rule at src\isa\x64\inst.isle line 3191.
    return v8;
}

// Generated as internal constructor for term x64_rotl.
pub fn constructor_x64_rotl<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &Imm8Gpr,
) -> Gpr {
    let v5 = C::ty_32_or_64(ctx, arg0);
    if let Some(v6) = v5 {
        let v7 = C::imm8_from_imm8_gpr(ctx, arg2);
        if let Some(v8) = v7 {
            let v9 = C::use_bmi2(ctx);
            if v9 == true {
                let v10 = &C::gpr_to_gpr_mem(ctx, arg1);
                let v11 = C::ty_bits(ctx, v6);
                let v12 = C::u8_sub(ctx, v11, v8);
                let v13 = constructor_x64_rorx(ctx, v6, v10, v12);
                // Rule at src\isa\x64\inst.isle line 3203.
                return v13;
            }
        }
    }
    let v4 = constructor_shift_r(ctx, arg0, &ShiftKind::RotateLeft, arg1, arg2);
    // Rule at src\isa\x64\inst.isle line 3201.
    return v4;
}

// Generated as internal constructor for term x64_rotr.
pub fn constructor_x64_rotr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &Imm8Gpr,
) -> Gpr {
    let v5 = C::ty_32_or_64(ctx, arg0);
    if let Some(v6) = v5 {
        let v7 = C::imm8_from_imm8_gpr(ctx, arg2);
        if let Some(v8) = v7 {
            let v9 = C::use_bmi2(ctx);
            if v9 == true {
                let v10 = &C::gpr_to_gpr_mem(ctx, arg1);
                let v11 = constructor_x64_rorx(ctx, v6, v10, v8);
                // Rule at src\isa\x64\inst.isle line 3211.
                return v11;
            }
        }
    }
    let v4 = constructor_shift_r(ctx, arg0, &ShiftKind::RotateRight, arg1, arg2);
    // Rule at src\isa\x64\inst.isle line 3209.
    return v4;
}

// Generated as internal constructor for term x64_shl.
pub fn constructor_x64_shl<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &Imm8Gpr,
) -> Gpr {
    let v5 = C::ty_32_or_64(ctx, arg0);
    if let Some(v6) = v5 {
        let v7 = C::gpr_from_imm8_gpr(ctx, arg2);
        if let Some(v8) = v7 {
            let v9 = C::use_bmi2(ctx);
            if v9 == true {
                let v10 = &C::gpr_to_gpr_mem(ctx, arg1);
                let v11 = constructor_x64_shlx(ctx, v6, v10, v8);
                // Rule at src\isa\x64\inst.isle line 3223.
                return v11;
            }
        }
    }
    let v4 = constructor_shift_r(ctx, arg0, &ShiftKind::ShiftLeft, arg1, arg2);
    // Rule at src\isa\x64\inst.isle line 3217.
    return v4;
}

// Generated as internal constructor for term x64_shr.
pub fn constructor_x64_shr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &Imm8Gpr,
) -> Gpr {
    let v5 = C::ty_32_or_64(ctx, arg0);
    if let Some(v6) = v5 {
        let v7 = C::gpr_from_imm8_gpr(ctx, arg2);
        if let Some(v8) = v7 {
            let v9 = C::use_bmi2(ctx);
            if v9 == true {
                let v10 = &C::gpr_to_gpr_mem(ctx, arg1);
                let v11 = constructor_x64_shrx(ctx, v6, v10, v8);
                // Rule at src\isa\x64\inst.isle line 3232.
                return v11;
            }
        }
    }
    let v4 = constructor_shift_r(ctx, arg0, &ShiftKind::ShiftRightLogical, arg1, arg2);
    // Rule at src\isa\x64\inst.isle line 3229.
    return v4;
}

// Generated as internal constructor for term x64_sar.
pub fn constructor_x64_sar<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &Imm8Gpr,
) -> Gpr {
    let v5 = C::ty_32_or_64(ctx, arg0);
    if let Some(v6) = v5 {
        let v7 = C::gpr_from_imm8_gpr(ctx, arg2);
        if let Some(v8) = v7 {
            let v9 = C::use_bmi2(ctx);
            if v9 == true {
                let v10 = &C::gpr_to_gpr_mem(ctx, arg1);
                let v11 = constructor_x64_sarx(ctx, v6, v10, v8);
                // Rule at src\isa\x64\inst.isle line 3241.
                return v11;
            }
        }
    }
    let v4 = constructor_shift_r(ctx, arg0, &ShiftKind::ShiftRightArithmetic, arg1, arg2);
    // Rule at src\isa\x64\inst.isle line 3238.
    return v4;
}

// Generated as internal constructor for term x64_shld.
pub fn constructor_x64_shld<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: Gpr,
    arg3: u8,
) -> Gpr {
    match arg0 {
        I16 => {
            let v4 = constructor_x64_shldw_mri(ctx, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 3248.
            return v4;
        }
        I32 => {
            let v5 = constructor_x64_shldl_mri(ctx, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 3249.
            return v5;
        }
        I64 => {
            let v6 = constructor_x64_shldq_mri(ctx, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 3250.
            return v6;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_shld", "src\\isa\\x64\\inst.isle line 3246")
}

// Generated as internal constructor for term x64_bzhi.
pub fn constructor_x64_bzhi<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &GprMem,
    arg2: Gpr,
) -> Gpr {
    let v4 = constructor_alu_rm_r_vex(ctx, arg0, &AluRmROpcode::Bzhi, arg2, arg1);
    // Rule at src\isa\x64\inst.isle line 3257.
    return v4;
}

// Generated as internal constructor for term x64_bswap.
pub fn constructor_x64_bswap<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v4 = MInst::Bswap {
        size: v3.clone(),
        src: arg1,
        dst: v2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src\isa\x64\inst.isle line 3264.
    return v6;
}

// Generated as internal constructor for term cmp_rmi_r.
pub fn constructor_cmp_rmi_r<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: &CmpOpcode,
    arg2: Gpr,
    arg3: &GprMemImm,
) -> ProducesFlags {
    let v4 = MInst::CmpRmiR {
        size: arg0.clone(),
        opcode: arg1.clone(),
        src1: arg2,
        src2: arg3.clone(),
    };
    let v5 = ProducesFlags::ProducesFlagsSideEffect {
        inst: v4,
    };
    // Rule at src\isa\x64\inst.isle line 3272.
    return v5;
}

// Generated as internal constructor for term x64_cmp.
pub fn constructor_x64_cmp<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> ProducesFlags {
    let v4 = &constructor_cmp_rmi_r(ctx, arg0, &CmpOpcode::Cmp, arg1, arg2);
    // Rule at src\isa\x64\inst.isle line 3281.
    return v4.clone();
}

// Generated as internal constructor for term x64_cmp_imm.
pub fn constructor_x64_cmp_imm<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Gpr,
    arg2: u32,
) -> ProducesFlags {
    let v3 = RegMemImm::Imm {
        simm32: arg2,
    };
    let v4 = &C::gpr_mem_imm_new(ctx, &v3);
    let v5 = &constructor_x64_cmp(ctx, arg0, arg1, v4);
    // Rule at src\isa\x64\inst.isle line 3286.
    return v5.clone();
}

// Generated as internal constructor for term xmm_cmp_rm_r.
pub fn constructor_xmm_cmp_rm_r<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: Xmm,
    arg2: &XmmMem,
) -> ProducesFlags {
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg2);
    let v4 = MInst::XmmCmpRmR {
        op: arg0.clone(),
        src1: arg1,
        src2: v3.clone(),
    };
    let v5 = ProducesFlags::ProducesFlagsSideEffect {
        inst: v4,
    };
    // Rule at src\isa\x64\inst.isle line 3291.
    return v5;
}

// Generated as internal constructor for term xmm_cmp_rm_r_vex.
pub fn constructor_xmm_cmp_rm_r_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: Xmm,
    arg2: &XmmMem,
) -> ProducesFlags {
    let v3 = MInst::XmmCmpRmRVex {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
    };
    let v4 = ProducesFlags::ProducesFlagsSideEffect {
        inst: v3,
    };
    // Rule at src\isa\x64\inst.isle line 3297.
    return v4;
}

// Generated as internal constructor for term x64_ucomis.
pub fn constructor_x64_ucomis<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &XmmMem,
) -> ProducesFlags {
    match arg0 {
        F32 => {
            let v7 = C::use_avx(ctx);
            if v7 == true {
                let v9 = &constructor_xmm_cmp_rm_r_vex(ctx, &AvxOpcode::Vucomiss, arg1, arg2);
                // Rule at src\isa\x64\inst.isle line 3307.
                return v9.clone();
            }
            let v4 = &constructor_xmm_cmp_rm_r(ctx, &SseOpcode::Ucomiss, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 3303.
            return v4.clone();
        }
        F64 => {
            let v7 = C::use_avx(ctx);
            if v7 == true {
                let v11 = &constructor_xmm_cmp_rm_r_vex(ctx, &AvxOpcode::Vucomisd, arg1, arg2);
                // Rule at src\isa\x64\inst.isle line 3310.
                return v11.clone();
            }
            let v6 = &constructor_xmm_cmp_rm_r(ctx, &SseOpcode::Ucomisd, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 3305.
            return v6.clone();
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_ucomis", "src\\isa\\x64\\inst.isle line 3302")
}

// Generated as internal constructor for term x64_test.
pub fn constructor_x64_test<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> ProducesFlags {
    let v4 = &constructor_cmp_rmi_r(ctx, arg0, &CmpOpcode::Test, arg1, arg2);
    // Rule at src\isa\x64\inst.isle line 3316.
    return v4.clone();
}

// Generated as internal constructor for term x64_ptest.
pub fn constructor_x64_ptest<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> ProducesFlags {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &constructor_xmm_cmp_rm_r_vex(ctx, &AvxOpcode::Vptest, arg0, arg1);
        // Rule at src\isa\x64\inst.isle line 3323.
        return v6.clone();
    }
    let v3 = &constructor_xmm_cmp_rm_r(ctx, &SseOpcode::Ptest, arg0, arg1);
    // Rule at src\isa\x64\inst.isle line 3321.
    return v3.clone();
}

// Generated as internal constructor for term cmove.
pub fn constructor_cmove<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &CC,
    arg2: &GprMem,
    arg3: Gpr,
) -> ConsumesFlags {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v7 = constructor_writable_gpr_to_r_reg(ctx, v4);
    let v6 = MInst::Cmove {
        size: v5.clone(),
        cc: arg1.clone(),
        consequent: arg2.clone(),
        alternative: arg3,
        dst: v4,
    };
    let v8 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v6,
        result: v7,
    };
    // Rule at src\isa\x64\inst.isle line 3331.
    return v8;
}

// Generated as internal constructor for term cmove_xmm.
pub fn constructor_cmove_xmm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &CC,
    arg2: Xmm,
    arg3: Xmm,
) -> ConsumesFlags {
    let v4 = C::temp_writable_xmm(ctx);
    let v6 = constructor_writable_xmm_to_r_reg(ctx, v4);
    let v5 = MInst::XmmCmove {
        ty: arg0,
        cc: arg1.clone(),
        consequent: arg2,
        alternative: arg3,
        dst: v4,
    };
    let v7 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v5,
        result: v6,
    };
    // Rule at src\isa\x64\inst.isle line 3339.
    return v7;
}

// Generated as internal constructor for term cmove_from_values.
pub fn constructor_cmove_from_values<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &CC,
    arg2: Value,
    arg3: Value,
) -> ConsumesFlags {
    let v1 = &C::type_register_class(ctx, arg0);
    if let Some(v2) = v1 {
        match v2 {
            &RegisterClass::Gpr {
                single_register: v3,
            } => {
                match v3 {
                    false => {
                        if arg0 == I128 {
                            let v7 = C::put_in_regs(ctx, arg2);
                            let v8 = C::put_in_regs(ctx, arg3);
                            let v9 = C::temp_writable_gpr(ctx);
                            let v10 = C::temp_writable_gpr(ctx);
                            let v13 = constructor_value_regs_get_gpr(ctx, v7, 0x0_usize);
                            let v14 = &C::gpr_to_gpr_mem(ctx, v13);
                            let v15 = constructor_value_regs_get_gpr(ctx, v8, 0x0_usize);
                            let v18 = constructor_value_regs_get_gpr(ctx, v7, 0x1_usize);
                            let v19 = &C::gpr_to_gpr_mem(ctx, v18);
                            let v20 = constructor_value_regs_get_gpr(ctx, v8, 0x1_usize);
                            let v22 = constructor_writable_gpr_to_r_reg(ctx, v9);
                            let v23 = constructor_writable_gpr_to_r_reg(ctx, v10);
                            let v24 = C::value_regs(ctx, v22, v23);
                            let v16 = MInst::Cmove {
                                size: OperandSize::Size64,
                                cc: arg1.clone(),
                                consequent: v14.clone(),
                                alternative: v15,
                                dst: v9,
                            };
                            let v21 = MInst::Cmove {
                                size: OperandSize::Size64,
                                cc: arg1.clone(),
                                consequent: v19.clone(),
                                alternative: v20,
                                dst: v10,
                            };
                            let v25 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                                inst1: v16,
                                inst2: v21,
                                result: v24,
                            };
                            // Rule at src\isa\x64\inst.isle line 3349.
                            return v25;
                        }
                    }
                    true => {
                        let v26 = &constructor_put_in_gpr_mem(ctx, arg2);
                        let v27 = constructor_put_in_gpr(ctx, arg3);
                        let v28 = &constructor_cmove(ctx, arg0, arg1, v26, v27);
                        // Rule at src\isa\x64\inst.isle line 3370.
                        return v28.clone();
                    }
                    _ => {}
                }
            }
            &RegisterClass::Xmm => {
                let v29 = constructor_put_in_xmm(ctx, arg2);
                let v30 = constructor_put_in_xmm(ctx, arg3);
                let v31 = &constructor_cmove_xmm(ctx, arg0, arg1, v29, v30);
                // Rule at src\isa\x64\inst.isle line 3373.
                return v31.clone();
            }
            _ => {}
        }
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "cmove_from_values", "src\\isa\\x64\\inst.isle line 3348")
}

// Generated as internal constructor for term cmove_or.
pub fn constructor_cmove_or<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &CC,
    arg2: &CC,
    arg3: &GprMem,
    arg4: Gpr,
) -> ConsumesFlags {
    let v5 = C::temp_writable_gpr(ctx);
    let v6 = C::temp_writable_gpr(ctx);
    let v7 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v9 = C::writable_gpr_to_gpr(ctx, v6);
    let v11 = constructor_writable_gpr_to_value_regs(ctx, v5);
    let v8 = MInst::Cmove {
        size: v7.clone(),
        cc: arg1.clone(),
        consequent: arg3.clone(),
        alternative: arg4,
        dst: v6,
    };
    let v10 = MInst::Cmove {
        size: v7.clone(),
        cc: arg2.clone(),
        consequent: arg3.clone(),
        alternative: v9,
        dst: v5,
    };
    let v12 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
        inst1: v8,
        inst2: v10,
        result: v11,
    };
    // Rule at src\isa\x64\inst.isle line 3380.
    return v12;
}

// Generated as internal constructor for term cmove_or_xmm.
pub fn constructor_cmove_or_xmm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &CC,
    arg2: &CC,
    arg3: Xmm,
    arg4: Xmm,
) -> ConsumesFlags {
    let v5 = C::temp_writable_xmm(ctx);
    let v6 = C::temp_writable_xmm(ctx);
    let v8 = C::writable_xmm_to_xmm(ctx, v6);
    let v10 = constructor_writable_xmm_to_value_regs(ctx, v5);
    let v7 = MInst::XmmCmove {
        ty: arg0,
        cc: arg1.clone(),
        consequent: arg3,
        alternative: arg4,
        dst: v6,
    };
    let v9 = MInst::XmmCmove {
        ty: arg0,
        cc: arg2.clone(),
        consequent: arg3,
        alternative: v8,
        dst: v5,
    };
    let v11 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
        inst1: v7,
        inst2: v9,
        result: v10,
    };
    // Rule at src\isa\x64\inst.isle line 3392.
    return v11;
}

// Generated as internal constructor for term cmove_or_from_values.
pub fn constructor_cmove_or_from_values<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &CC,
    arg2: &CC,
    arg3: Value,
    arg4: Value,
) -> ConsumesFlags {
    let v1 = &C::type_register_class(ctx, arg0);
    if let Some(v2) = v1 {
        match v2 {
            &RegisterClass::Gpr {
                single_register: v3,
            } => {
                match v3 {
                    false => {
                        if arg0 == I128 {
                            let v8 = C::put_in_regs(ctx, arg3);
                            let v9 = C::put_in_regs(ctx, arg4);
                            let v10 = C::temp_writable_gpr(ctx);
                            let v11 = C::temp_writable_gpr(ctx);
                            let v12 = C::temp_writable_gpr(ctx);
                            let v13 = C::temp_writable_gpr(ctx);
                            let v16 = constructor_value_regs_get_gpr(ctx, v8, 0x0_usize);
                            let v17 = &C::gpr_to_gpr_mem(ctx, v16);
                            let v18 = constructor_value_regs_get_gpr(ctx, v9, 0x0_usize);
                            let v20 = constructor_value_regs_get_gpr(ctx, v8, 0x0_usize);
                            let v21 = &C::gpr_to_gpr_mem(ctx, v20);
                            let v22 = C::writable_gpr_to_gpr(ctx, v12);
                            let v25 = constructor_value_regs_get_gpr(ctx, v8, 0x1_usize);
                            let v26 = &C::gpr_to_gpr_mem(ctx, v25);
                            let v27 = constructor_value_regs_get_gpr(ctx, v9, 0x1_usize);
                            let v29 = constructor_value_regs_get_gpr(ctx, v8, 0x1_usize);
                            let v30 = &C::gpr_to_gpr_mem(ctx, v29);
                            let v31 = C::writable_gpr_to_gpr(ctx, v13);
                            let v33 = constructor_writable_gpr_to_r_reg(ctx, v10);
                            let v34 = constructor_writable_gpr_to_r_reg(ctx, v11);
                            let v35 = C::value_regs(ctx, v33, v34);
                            let v19 = MInst::Cmove {
                                size: OperandSize::Size64,
                                cc: arg1.clone(),
                                consequent: v17.clone(),
                                alternative: v18,
                                dst: v12,
                            };
                            let v23 = MInst::Cmove {
                                size: OperandSize::Size64,
                                cc: arg2.clone(),
                                consequent: v21.clone(),
                                alternative: v22,
                                dst: v10,
                            };
                            let v28 = MInst::Cmove {
                                size: OperandSize::Size64,
                                cc: arg1.clone(),
                                consequent: v26.clone(),
                                alternative: v27,
                                dst: v13,
                            };
                            let v32 = MInst::Cmove {
                                size: OperandSize::Size64,
                                cc: arg2.clone(),
                                consequent: v30.clone(),
                                alternative: v31,
                                dst: v11,
                            };
                            let v36 = ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                                inst1: v19,
                                inst2: v23,
                                inst3: v28,
                                inst4: v32,
                                result: v35,
                            };
                            // Rule at src\isa\x64\inst.isle line 3406.
                            return v36;
                        }
                    }
                    true => {
                        let v37 = &constructor_put_in_gpr_mem(ctx, arg3);
                        let v38 = constructor_put_in_gpr(ctx, arg4);
                        let v39 = &constructor_cmove_or(ctx, arg0, arg1, arg2, v37, v38);
                        // Rule at src\isa\x64\inst.isle line 3425.
                        return v39.clone();
                    }
                    _ => {}
                }
            }
            &RegisterClass::Xmm => {
                let v40 = constructor_put_in_xmm(ctx, arg3);
                let v41 = constructor_put_in_xmm(ctx, arg4);
                let v42 = &constructor_cmove_or_xmm(ctx, arg0, arg1, arg2, v40, v41);
                // Rule at src\isa\x64\inst.isle line 3428.
                return v42.clone();
            }
            _ => {}
        }
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "cmove_or_from_values", "src\\isa\\x64\\inst.isle line 3405")
}

// Generated as internal constructor for term x64_setcc.
pub fn constructor_x64_setcc<C: Context>(
    ctx: &mut C,
    arg0: &CC,
) -> ConsumesFlags {
    let v1 = C::temp_writable_gpr(ctx);
    let v3 = constructor_writable_gpr_to_r_reg(ctx, v1);
    let v2 = MInst::Setcc {
        cc: arg0.clone(),
        dst: v1,
    };
    let v4 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v2,
        result: v3,
    };
    // Rule at src\isa\x64\inst.isle line 3433.
    return v4;
}

// Generated as internal constructor for term x64_setcc_paired.
pub fn constructor_x64_setcc_paired<C: Context>(
    ctx: &mut C,
    arg0: &CC,
) -> ConsumesFlags {
    let v1 = C::temp_writable_gpr(ctx);
    let v3 = constructor_writable_gpr_to_r_reg(ctx, v1);
    let v2 = MInst::Setcc {
        cc: arg0.clone(),
        dst: v1,
    };
    let v4 = ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
        inst: v2,
        result: v3,
    };
    // Rule at src\isa\x64\inst.isle line 3442.
    return v4;
}

// Generated as internal constructor for term x64_paddb.
pub fn constructor_x64_paddb<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpaddb, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3452.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Paddb, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3450.
    return v4;
}

// Generated as internal constructor for term x64_paddw.
pub fn constructor_x64_paddw<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpaddw, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3460.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Paddw, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3458.
    return v4;
}

// Generated as internal constructor for term x64_paddd.
pub fn constructor_x64_paddd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpaddd, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3468.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Paddd, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3466.
    return v4;
}

// Generated as internal constructor for term x64_paddq.
pub fn constructor_x64_paddq<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpaddq, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3476.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Paddq, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3474.
    return v4;
}

// Generated as internal constructor for term x64_paddsb.
pub fn constructor_x64_paddsb<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpaddsb, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3484.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Paddsb, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3482.
    return v4;
}

// Generated as internal constructor for term x64_paddsw.
pub fn constructor_x64_paddsw<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpaddsw, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3492.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Paddsw, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3490.
    return v4;
}

// Generated as internal constructor for term x64_phaddw.
pub fn constructor_x64_phaddw<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vphaddw, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3500.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Phaddw, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3498.
    return v4;
}

// Generated as internal constructor for term x64_phaddd.
pub fn constructor_x64_phaddd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vphaddd, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3508.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Phaddd, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3506.
    return v4;
}

// Generated as internal constructor for term x64_paddusb.
pub fn constructor_x64_paddusb<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpaddusb, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3516.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Paddusb, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3514.
    return v4;
}

// Generated as internal constructor for term x64_paddusw.
pub fn constructor_x64_paddusw<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpaddusw, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3524.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Paddusw, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3522.
    return v4;
}

// Generated as internal constructor for term x64_psubb.
pub fn constructor_x64_psubb<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsubb, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3532.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Psubb, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3530.
    return v4;
}

// Generated as internal constructor for term x64_psubw.
pub fn constructor_x64_psubw<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsubw, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3540.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Psubw, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3538.
    return v4;
}

// Generated as internal constructor for term x64_psubd.
pub fn constructor_x64_psubd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsubd, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3548.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Psubd, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3546.
    return v4;
}

// Generated as internal constructor for term x64_psubq.
pub fn constructor_x64_psubq<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsubq, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3556.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Psubq, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3554.
    return v4;
}

// Generated as internal constructor for term x64_psubsb.
pub fn constructor_x64_psubsb<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsubsb, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3564.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Psubsb, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3562.
    return v4;
}

// Generated as internal constructor for term x64_psubsw.
pub fn constructor_x64_psubsw<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsubsw, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3572.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Psubsw, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3570.
    return v4;
}

// Generated as internal constructor for term x64_psubusb.
pub fn constructor_x64_psubusb<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsubusb, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3580.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Psubusb, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3578.
    return v4;
}

// Generated as internal constructor for term x64_psubusw.
pub fn constructor_x64_psubusw<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsubusw, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3588.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Psubusw, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3586.
    return v4;
}

// Generated as internal constructor for term x64_pavgb.
pub fn constructor_x64_pavgb<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpavgb, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3596.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pavgb, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3594.
    return v4;
}

// Generated as internal constructor for term x64_pavgw.
pub fn constructor_x64_pavgw<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpavgw, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3604.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pavgw, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3602.
    return v4;
}

// Generated as internal constructor for term x64_pand.
pub fn constructor_x64_pand<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpand, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3612.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pand, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3610.
    return v4;
}

// Generated as internal constructor for term x64_andps.
pub fn constructor_x64_andps<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v2 = C::use_avx(ctx);
    if v2 == true {
        let v4 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v5 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vandps, arg0, v4);
        // Rule at src\isa\x64\inst.isle line 3618.
        return v5;
    }
    let v6 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v7 = constructor_x64_andps_a(ctx, arg0, v6);
    // Rule at src\isa\x64\inst.isle line 3621.
    return v7;
}

// Generated as internal constructor for term x64_andpd.
pub fn constructor_x64_andpd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v2 = C::use_avx(ctx);
    if v2 == true {
        let v4 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v5 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vandpd, arg0, v4);
        // Rule at src\isa\x64\inst.isle line 3625.
        return v5;
    }
    let v6 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v7 = constructor_x64_andpd_a(ctx, arg0, v6);
    // Rule at src\isa\x64\inst.isle line 3628.
    return v7;
}

// Generated as internal constructor for term x64_por.
pub fn constructor_x64_por<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpor, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3634.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Por, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3632.
    return v4;
}

// Generated as internal constructor for term x64_orps.
pub fn constructor_x64_orps<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v2 = C::use_avx(ctx);
    if v2 == true {
        let v4 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v5 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vorps, arg0, v4);
        // Rule at src\isa\x64\inst.isle line 3640.
        return v5;
    }
    let v6 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v7 = constructor_x64_orps_a(ctx, arg0, v6);
    // Rule at src\isa\x64\inst.isle line 3643.
    return v7;
}

// Generated as internal constructor for term x64_orpd.
pub fn constructor_x64_orpd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v2 = C::use_avx(ctx);
    if v2 == true {
        let v4 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v5 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vorpd, arg0, v4);
        // Rule at src\isa\x64\inst.isle line 3647.
        return v5;
    }
    let v6 = &C::is_xmm_mem(ctx, arg1);
    if let Some(v7) = v6 {
        let v8 = &C::xmm_mem_to_xmm_mem_aligned(ctx, v7);
        let v9 = constructor_x64_orpd_a(ctx, arg0, v8);
        // Rule at src\isa\x64\inst.isle line 3650.
        return v9;
    }
    let v11 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v12 = constructor_xmm_rm_r(ctx, &SseOpcode::Orpd, arg0, v11);
    // Rule at src\isa\x64\inst.isle line 3651.
    return v12;
}

// Generated as internal constructor for term x64_pxor.
pub fn constructor_x64_pxor<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpxor, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3658.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pxor, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3656.
    return v4;
}

// Generated as internal constructor for term x64_xorps.
pub fn constructor_x64_xorps<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v2 = C::use_avx(ctx);
    if v2 == true {
        let v4 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v5 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vxorps, arg0, v4);
        // Rule at src\isa\x64\inst.isle line 3664.
        return v5;
    }
    let v6 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v7 = constructor_x64_xorps_a(ctx, arg0, v6);
    // Rule at src\isa\x64\inst.isle line 3667.
    return v7;
}

// Generated as internal constructor for term x64_xorpd.
pub fn constructor_x64_xorpd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v2 = C::use_avx(ctx);
    if v2 == true {
        let v4 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v5 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vxorpd, arg0, v4);
        // Rule at src\isa\x64\inst.isle line 3671.
        return v5;
    }
    let v6 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v7 = constructor_x64_xorpd_a(ctx, arg0, v6);
    // Rule at src\isa\x64\inst.isle line 3674.
    return v7;
}

// Generated as internal constructor for term x64_pmullw.
pub fn constructor_x64_pmullw<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmullw, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3680.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmullw, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3678.
    return v4;
}

// Generated as internal constructor for term x64_pmulld.
pub fn constructor_x64_pmulld<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmulld, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3688.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmulld, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3686.
    return v4;
}

// Generated as internal constructor for term x64_pmulhw.
pub fn constructor_x64_pmulhw<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmulhw, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3696.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmulhw, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3694.
    return v4;
}

// Generated as internal constructor for term x64_pmulhrsw.
pub fn constructor_x64_pmulhrsw<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmulhrsw, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3704.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmulhrsw, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3702.
    return v4;
}

// Generated as internal constructor for term x64_pmulhuw.
pub fn constructor_x64_pmulhuw<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmulhuw, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3712.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmulhuw, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3710.
    return v4;
}

// Generated as internal constructor for term x64_pmuldq.
pub fn constructor_x64_pmuldq<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmuldq, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3720.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmuldq, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3718.
    return v4;
}

// Generated as internal constructor for term x64_pmuludq.
pub fn constructor_x64_pmuludq<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmuludq, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3728.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmuludq, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3726.
    return v4;
}

// Generated as internal constructor for term x64_punpckhwd.
pub fn constructor_x64_punpckhwd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpunpckhwd, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3736.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Punpckhwd, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3734.
    return v4;
}

// Generated as internal constructor for term x64_punpcklwd.
pub fn constructor_x64_punpcklwd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpunpcklwd, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3744.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Punpcklwd, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3742.
    return v4;
}

// Generated as internal constructor for term x64_punpckldq.
pub fn constructor_x64_punpckldq<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpunpckldq, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3752.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Punpckldq, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3750.
    return v4;
}

// Generated as internal constructor for term x64_punpckhdq.
pub fn constructor_x64_punpckhdq<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpunpckhdq, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3760.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Punpckhdq, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3758.
    return v4;
}

// Generated as internal constructor for term x64_punpcklqdq.
pub fn constructor_x64_punpcklqdq<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpunpcklqdq, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3768.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Punpcklqdq, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3766.
    return v4;
}

// Generated as internal constructor for term x64_punpckhqdq.
pub fn constructor_x64_punpckhqdq<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpunpckhqdq, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3776.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Punpckhqdq, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3774.
    return v4;
}

// Generated as internal constructor for term x64_unpcklps.
pub fn constructor_x64_unpcklps<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vunpcklps, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3784.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Unpcklps, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3782.
    return v4;
}

// Generated as internal constructor for term x64_unpcklpd.
pub fn constructor_x64_unpcklpd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vunpcklpd, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3792.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Unpcklpd, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3790.
    return v4;
}

// Generated as internal constructor for term x64_unpckhps.
pub fn constructor_x64_unpckhps<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vunpckhps, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3800.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Unpckhps, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3798.
    return v4;
}

// Generated as internal constructor for term x64_andnps.
pub fn constructor_x64_andnps<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vandnps, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3808.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Andnps, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3806.
    return v4;
}

// Generated as internal constructor for term x64_andnpd.
pub fn constructor_x64_andnpd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vandnpd, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3816.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Andnpd, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3814.
    return v4;
}

// Generated as internal constructor for term x64_pandn.
pub fn constructor_x64_pandn<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpandn, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3824.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pandn, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3822.
    return v4;
}

// Generated as internal constructor for term x64_addss.
pub fn constructor_x64_addss<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v2 = C::use_avx(ctx);
    if v2 == true {
        let v4 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v5 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vaddss, arg0, v4);
        // Rule at src\isa\x64\inst.isle line 3830.
        return v5;
    }
    let v6 = constructor_x64_addss_a(ctx, arg0, arg1);
    // Rule at src\isa\x64\inst.isle line 3833.
    return v6;
}

// Generated as internal constructor for term x64_addsd.
pub fn constructor_x64_addsd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v2 = C::use_avx(ctx);
    if v2 == true {
        let v4 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v5 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vaddsd, arg0, v4);
        // Rule at src\isa\x64\inst.isle line 3837.
        return v5;
    }
    let v6 = constructor_x64_addsd_a(ctx, arg0, arg1);
    // Rule at src\isa\x64\inst.isle line 3840.
    return v6;
}

// Generated as internal constructor for term x64_addps.
pub fn constructor_x64_addps<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v2 = C::use_avx(ctx);
    if v2 == true {
        let v4 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v5 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vaddps, arg0, v4);
        // Rule at src\isa\x64\inst.isle line 3844.
        return v5;
    }
    let v6 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v7 = constructor_x64_addps_a(ctx, arg0, v6);
    // Rule at src\isa\x64\inst.isle line 3847.
    return v7;
}

// Generated as internal constructor for term x64_addpd.
pub fn constructor_x64_addpd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v2 = C::use_avx(ctx);
    if v2 == true {
        let v4 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v5 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vaddpd, arg0, v4);
        // Rule at src\isa\x64\inst.isle line 3851.
        return v5;
    }
    let v6 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v7 = constructor_x64_addpd_a(ctx, arg0, v6);
    // Rule at src\isa\x64\inst.isle line 3854.
    return v7;
}

// Generated as internal constructor for term x64_subss.
pub fn constructor_x64_subss<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v2 = C::use_avx(ctx);
    if v2 == true {
        let v4 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v5 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vsubss, arg0, v4);
        // Rule at src\isa\x64\inst.isle line 3858.
        return v5;
    }
    let v6 = constructor_x64_subss_a(ctx, arg0, arg1);
    // Rule at src\isa\x64\inst.isle line 3861.
    return v6;
}

// Generated as internal constructor for term x64_subsd.
pub fn constructor_x64_subsd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v2 = C::use_avx(ctx);
    if v2 == true {
        let v4 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v5 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vsubsd, arg0, v4);
        // Rule at src\isa\x64\inst.isle line 3865.
        return v5;
    }
    let v6 = constructor_x64_subsd_a(ctx, arg0, arg1);
    // Rule at src\isa\x64\inst.isle line 3868.
    return v6;
}

// Generated as internal constructor for term x64_subps.
pub fn constructor_x64_subps<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v2 = C::use_avx(ctx);
    if v2 == true {
        let v4 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v5 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vsubps, arg0, v4);
        // Rule at src\isa\x64\inst.isle line 3872.
        return v5;
    }
    let v6 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v7 = constructor_x64_subps_a(ctx, arg0, v6);
    // Rule at src\isa\x64\inst.isle line 3875.
    return v7;
}

// Generated as internal constructor for term x64_subpd.
pub fn constructor_x64_subpd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v2 = C::use_avx(ctx);
    if v2 == true {
        let v4 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v5 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vsubpd, arg0, v4);
        // Rule at src\isa\x64\inst.isle line 3879.
        return v5;
    }
    let v6 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v7 = constructor_x64_subpd_a(ctx, arg0, v6);
    // Rule at src\isa\x64\inst.isle line 3882.
    return v7;
}

// Generated as internal constructor for term x64_mulss.
pub fn constructor_x64_mulss<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmulss, arg0, v6);
        // Rule at src\isa\x64\inst.isle line 3888.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Mulss, arg0, arg1);
    // Rule at src\isa\x64\inst.isle line 3886.
    return v3;
}

// Generated as internal constructor for term x64_mulsd.
pub fn constructor_x64_mulsd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmulsd, arg0, v6);
        // Rule at src\isa\x64\inst.isle line 3896.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Mulsd, arg0, arg1);
    // Rule at src\isa\x64\inst.isle line 3894.
    return v3;
}

// Generated as internal constructor for term x64_mulps.
pub fn constructor_x64_mulps<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmulps, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3904.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Mulps, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3902.
    return v4;
}

// Generated as internal constructor for term x64_mulpd.
pub fn constructor_x64_mulpd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmulpd, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3912.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Mulpd, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3910.
    return v4;
}

// Generated as internal constructor for term x64_divss.
pub fn constructor_x64_divss<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vdivss, arg0, v6);
        // Rule at src\isa\x64\inst.isle line 3920.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Divss, arg0, arg1);
    // Rule at src\isa\x64\inst.isle line 3918.
    return v3;
}

// Generated as internal constructor for term x64_divsd.
pub fn constructor_x64_divsd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vdivsd, arg0, v6);
        // Rule at src\isa\x64\inst.isle line 3928.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Divsd, arg0, arg1);
    // Rule at src\isa\x64\inst.isle line 3926.
    return v3;
}

// Generated as internal constructor for term x64_divps.
pub fn constructor_x64_divps<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vdivps, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3936.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Divps, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3934.
    return v4;
}

// Generated as internal constructor for term x64_divpd.
pub fn constructor_x64_divpd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vdivpd, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3944.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Divpd, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3942.
    return v4;
}

// Generated as internal constructor for term x64_blendvpd.
pub fn constructor_x64_blendvpd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
    arg2: Xmm,
) -> Xmm {
    let v6 = C::use_avx(ctx);
    if v6 == true {
        let v8 = constructor_xmm_rmr_blend_vex(ctx, &AvxOpcode::Vblendvpd, arg0, arg1, arg2);
        // Rule at src\isa\x64\inst.isle line 3952.
        return v8;
    }
    let v4 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v5 = constructor_xmm_rm_r_blend(ctx, &SseOpcode::Blendvpd, arg0, v4, arg2);
    // Rule at src\isa\x64\inst.isle line 3950.
    return v5;
}

// Generated as internal constructor for term x64_blendvps.
pub fn constructor_x64_blendvps<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
    arg2: Xmm,
) -> Xmm {
    let v6 = C::use_avx(ctx);
    if v6 == true {
        let v8 = constructor_xmm_rmr_blend_vex(ctx, &AvxOpcode::Vblendvps, arg0, arg1, arg2);
        // Rule at src\isa\x64\inst.isle line 3960.
        return v8;
    }
    let v4 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v5 = constructor_xmm_rm_r_blend(ctx, &SseOpcode::Blendvps, arg0, v4, arg2);
    // Rule at src\isa\x64\inst.isle line 3958.
    return v5;
}

// Generated as internal constructor for term x64_pblendvb.
pub fn constructor_x64_pblendvb<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
    arg2: Xmm,
) -> Xmm {
    let v6 = C::use_avx(ctx);
    if v6 == true {
        let v8 = constructor_xmm_rmr_blend_vex(ctx, &AvxOpcode::Vpblendvb, arg0, arg1, arg2);
        // Rule at src\isa\x64\inst.isle line 3968.
        return v8;
    }
    let v4 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v5 = constructor_xmm_rm_r_blend(ctx, &SseOpcode::Pblendvb, arg0, v4, arg2);
    // Rule at src\isa\x64\inst.isle line 3966.
    return v5;
}

// Generated as internal constructor for term x64_pblendw.
pub fn constructor_x64_pblendw<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
    arg2: u8,
) -> Xmm {
    let v8 = C::use_avx(ctx);
    if v8 == true {
        let v10 = constructor_xmm_rmr_imm_vex(ctx, &AvxOpcode::Vpblendw, arg0, arg1, arg2);
        // Rule at src\isa\x64\inst.isle line 3976.
        return v10;
    }
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v5 = &C::xmm_mem_to_reg_mem(ctx, arg1);
    let v7 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Pblendw, v4, v5, arg2, &OperandSize::Size32);
    // Rule at src\isa\x64\inst.isle line 3974.
    return v7;
}

// Generated as internal constructor for term x64_movsd_regmove.
pub fn constructor_x64_movsd_regmove<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: Xmm,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmovsd, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3991.
        return v8;
    }
    let v3 = &C::xmm_to_xmm_mem(ctx, arg1);
    let v4 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Movsd, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3989.
    return v4;
}

// Generated as internal constructor for term x64_movss_regmove.
pub fn constructor_x64_movss_regmove<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: Xmm,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmovss, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3998.
        return v8;
    }
    let v3 = &C::xmm_to_xmm_mem(ctx, arg1);
    let v4 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Movss, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3996.
    return v4;
}

// Generated as internal constructor for term x64_movlhps.
pub fn constructor_x64_movlhps<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmovlhps, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 4006.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Movlhps, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 4004.
    return v4;
}

// Generated as internal constructor for term x64_pmaxs.
pub fn constructor_x64_pmaxs<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &XmmMem,
) -> Xmm {
    match arg0 {
        I8X16 => {
            let v3 = constructor_x64_pmaxsb(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 4012.
            return v3;
        }
        I16X8 => {
            let v4 = constructor_x64_pmaxsw(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 4013.
            return v4;
        }
        I32X4 => {
            let v5 = constructor_x64_pmaxsd(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 4014.
            return v5;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_pmaxs", "src\\isa\\x64\\inst.isle line 4011")
}

// Generated as internal constructor for term x64_pmaxsb.
pub fn constructor_x64_pmaxsb<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmaxsb, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 4018.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmaxsb, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 4017.
    return v4;
}

// Generated as internal constructor for term x64_pmaxsw.
pub fn constructor_x64_pmaxsw<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmaxsw, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 4023.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmaxsw, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 4022.
    return v4;
}

// Generated as internal constructor for term x64_pmaxsd.
pub fn constructor_x64_pmaxsd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmaxsd, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 4028.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmaxsd, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 4027.
    return v4;
}

// Generated as internal constructor for term x64_pmins.
pub fn constructor_x64_pmins<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &XmmMem,
) -> Xmm {
    match arg0 {
        I8X16 => {
            let v3 = constructor_x64_pminsb(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 4034.
            return v3;
        }
        I16X8 => {
            let v4 = constructor_x64_pminsw(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 4035.
            return v4;
        }
        I32X4 => {
            let v5 = constructor_x64_pminsd(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 4036.
            return v5;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_pmins", "src\\isa\\x64\\inst.isle line 4033")
}

// Generated as internal constructor for term x64_pminsb.
pub fn constructor_x64_pminsb<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpminsb, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 4040.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pminsb, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 4039.
    return v4;
}

// Generated as internal constructor for term x64_pminsw.
pub fn constructor_x64_pminsw<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpminsw, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 4045.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pminsw, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 4044.
    return v4;
}

// Generated as internal constructor for term x64_pminsd.
pub fn constructor_x64_pminsd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpminsd, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 4050.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pminsd, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 4049.
    return v4;
}

// Generated as internal constructor for term x64_pmaxu.
pub fn constructor_x64_pmaxu<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &XmmMem,
) -> Xmm {
    match arg0 {
        I8X16 => {
            let v3 = constructor_x64_pmaxub(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 4056.
            return v3;
        }
        I16X8 => {
            let v4 = constructor_x64_pmaxuw(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 4057.
            return v4;
        }
        I32X4 => {
            let v5 = constructor_x64_pmaxud(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 4058.
            return v5;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_pmaxu", "src\\isa\\x64\\inst.isle line 4055")
}

// Generated as internal constructor for term x64_pmaxub.
pub fn constructor_x64_pmaxub<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmaxub, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 4062.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmaxub, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 4061.
    return v4;
}

// Generated as internal constructor for term x64_pmaxuw.
pub fn constructor_x64_pmaxuw<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmaxuw, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 4067.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmaxuw, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 4066.
    return v4;
}

// Generated as internal constructor for term x64_pmaxud.
pub fn constructor_x64_pmaxud<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmaxud, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 4072.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmaxud, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 4071.
    return v4;
}

// Generated as internal constructor for term x64_pminu.
pub fn constructor_x64_pminu<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &XmmMem,
) -> Xmm {
    match arg0 {
        I8X16 => {
            let v3 = constructor_x64_pminub(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 4078.
            return v3;
        }
        I16X8 => {
            let v4 = constructor_x64_pminuw(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 4079.
            return v4;
        }
        I32X4 => {
            let v5 = constructor_x64_pminud(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 4080.
            return v5;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_pminu", "src\\isa\\x64\\inst.isle line 4077")
}

// Generated as internal constructor for term x64_pminub.
pub fn constructor_x64_pminub<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpminub, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 4084.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pminub, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 4083.
    return v4;
}

// Generated as internal constructor for term x64_pminuw.
pub fn constructor_x64_pminuw<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpminuw, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 4089.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pminuw, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 4088.
    return v4;
}

// Generated as internal constructor for term x64_pminud.
pub fn constructor_x64_pminud<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpminud, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 4094.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pminud, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 4093.
    return v4;
}

// Generated as internal constructor for term x64_punpcklbw.
pub fn constructor_x64_punpcklbw<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpunpcklbw, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 4102.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Punpcklbw, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 4100.
    return v4;
}

// Generated as internal constructor for term x64_punpckhbw.
pub fn constructor_x64_punpckhbw<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpunpckhbw, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 4110.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Punpckhbw, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 4108.
    return v4;
}

// Generated as internal constructor for term x64_packsswb.
pub fn constructor_x64_packsswb<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpacksswb, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 4118.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Packsswb, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 4116.
    return v4;
}

// Generated as internal constructor for term x64_packssdw.
pub fn constructor_x64_packssdw<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpackssdw, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 4126.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Packssdw, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 4124.
    return v4;
}

// Generated as internal constructor for term x64_packuswb.
pub fn constructor_x64_packuswb<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpackuswb, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 4134.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Packuswb, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 4132.
    return v4;
}

// Generated as internal constructor for term x64_packusdw.
pub fn constructor_x64_packusdw<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpackusdw, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 4142.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Packusdw, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 4140.
    return v4;
}

// Generated as internal constructor for term x64_palignr.
pub fn constructor_x64_palignr<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
    arg2: u8,
) -> Xmm {
    let v8 = C::use_avx(ctx);
    if v8 == true {
        let v10 = constructor_xmm_rmr_imm_vex(ctx, &AvxOpcode::Vpalignr, arg0, arg1, arg2);
        // Rule at src\isa\x64\inst.isle line 4154.
        return v10;
    }
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v5 = &C::xmm_mem_to_reg_mem(ctx, arg1);
    let v7 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Palignr, v4, v5, arg2, &OperandSize::Size32);
    // Rule at src\isa\x64\inst.isle line 4148.
    return v7;
}

// Generated as internal constructor for term x64_cmpp.
pub fn constructor_x64_cmpp<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &XmmMem,
    arg3: &FcmpImm,
) -> Xmm {
    match arg0 {
        F32X4 => {
            let v4 = constructor_x64_cmpps(ctx, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4160.
            return v4;
        }
        F64X2 => {
            let v5 = constructor_x64_cmppd(ctx, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4161.
            return v5;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_cmpp", "src\\isa\\x64\\inst.isle line 4159")
}

// Generated as internal constructor for term x64_cmpps.
pub fn constructor_x64_cmpps<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
    arg2: &FcmpImm,
) -> Xmm {
    let v9 = C::use_avx(ctx);
    if v9 == true {
        let v11 = C::encode_fcmp_imm(ctx, arg2);
        let v12 = constructor_xmm_rmr_imm_vex(ctx, &AvxOpcode::Vcmpps, arg0, arg1, v11);
        // Rule at src\isa\x64\inst.isle line 4170.
        return v12;
    }
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v6 = C::encode_fcmp_imm(ctx, arg2);
    let v5 = &C::xmm_mem_to_reg_mem(ctx, arg1);
    let v8 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Cmpps, v4, v5, v6, &OperandSize::Size32);
    // Rule at src\isa\x64\inst.isle line 4164.
    return v8;
}

// Generated as internal constructor for term x64_cmppd.
pub fn constructor_x64_cmppd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
    arg2: &FcmpImm,
) -> Xmm {
    let v9 = C::use_avx(ctx);
    if v9 == true {
        let v11 = C::encode_fcmp_imm(ctx, arg2);
        let v12 = constructor_xmm_rmr_imm_vex(ctx, &AvxOpcode::Vcmppd, arg0, arg1, v11);
        // Rule at src\isa\x64\inst.isle line 4187.
        return v12;
    }
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v6 = C::encode_fcmp_imm(ctx, arg2);
    let v5 = &C::xmm_mem_to_reg_mem(ctx, arg1);
    let v8 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Cmppd, v4, v5, v6, &OperandSize::Size32);
    // Rule at src\isa\x64\inst.isle line 4181.
    return v8;
}

// Generated as internal constructor for term x64_pinsrb.
pub fn constructor_x64_pinsrb<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &GprMem,
    arg2: u8,
) -> Xmm {
    let v8 = C::use_avx(ctx);
    if v8 == true {
        let v10 = constructor_xmm_vex_pinsr(ctx, &AvxOpcode::Vpinsrb, arg0, arg1, arg2);
        // Rule at src\isa\x64\inst.isle line 4202.
        return v10;
    }
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v5 = &C::gpr_mem_to_reg_mem(ctx, arg1);
    let v7 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Pinsrb, v4, v5, arg2, &OperandSize::Size32);
    // Rule at src\isa\x64\inst.isle line 4196.
    return v7;
}

// Generated as internal constructor for term x64_pinsrw.
pub fn constructor_x64_pinsrw<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &GprMem,
    arg2: u8,
) -> Xmm {
    let v8 = C::use_avx(ctx);
    if v8 == true {
        let v10 = constructor_xmm_vex_pinsr(ctx, &AvxOpcode::Vpinsrw, arg0, arg1, arg2);
        // Rule at src\isa\x64\inst.isle line 4214.
        return v10;
    }
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v5 = &C::gpr_mem_to_reg_mem(ctx, arg1);
    let v7 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Pinsrw, v4, v5, arg2, &OperandSize::Size32);
    // Rule at src\isa\x64\inst.isle line 4208.
    return v7;
}

// Generated as internal constructor for term x64_pinsrd.
pub fn constructor_x64_pinsrd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &GprMem,
    arg2: u8,
) -> Xmm {
    let v8 = C::use_avx(ctx);
    if v8 == true {
        let v10 = constructor_xmm_vex_pinsr(ctx, &AvxOpcode::Vpinsrd, arg0, arg1, arg2);
        // Rule at src\isa\x64\inst.isle line 4226.
        return v10;
    }
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v5 = &C::gpr_mem_to_reg_mem(ctx, arg1);
    let v7 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Pinsrd, v4, v5, arg2, &OperandSize::Size32);
    // Rule at src\isa\x64\inst.isle line 4220.
    return v7;
}

// Generated as internal constructor for term x64_pinsrq.
pub fn constructor_x64_pinsrq<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &GprMem,
    arg2: u8,
) -> Xmm {
    let v8 = C::use_avx(ctx);
    if v8 == true {
        let v10 = constructor_xmm_vex_pinsr(ctx, &AvxOpcode::Vpinsrq, arg0, arg1, arg2);
        // Rule at src\isa\x64\inst.isle line 4238.
        return v10;
    }
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v5 = &C::gpr_mem_to_reg_mem(ctx, arg1);
    let v7 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Pinsrd, v4, v5, arg2, &OperandSize::Size64);
    // Rule at src\isa\x64\inst.isle line 4232.
    return v7;
}

// Generated as internal constructor for term x64_roundss.
pub fn constructor_x64_roundss<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
    arg1: &RoundImm,
) -> Xmm {
    let v8 = C::use_avx(ctx);
    if v8 == true {
        let v10 = C::encode_round_imm(ctx, arg1);
        let v11 = constructor_xmm_unary_rm_r_imm_vex(ctx, &AvxOpcode::Vroundss, arg0, v10);
        // Rule at src\isa\x64\inst.isle line 4263.
        return v11;
    }
    let v4 = constructor_put_xmm_mem_in_xmm(ctx, F32, arg0);
    let v5 = &constructor_xmm_to_xmm_mem_aligned(ctx, v4);
    let v6 = C::encode_round_imm(ctx, arg1);
    let v7 = constructor_xmm_unary_rm_r_imm(ctx, &SseOpcode::Roundss, v5, v6);
    // Rule at src\isa\x64\inst.isle line 4261.
    return v7;
}

// Generated as internal constructor for term x64_roundsd.
pub fn constructor_x64_roundsd<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
    arg1: &RoundImm,
) -> Xmm {
    let v8 = C::use_avx(ctx);
    if v8 == true {
        let v10 = C::encode_round_imm(ctx, arg1);
        let v11 = constructor_xmm_unary_rm_r_imm_vex(ctx, &AvxOpcode::Vroundsd, arg0, v10);
        // Rule at src\isa\x64\inst.isle line 4273.
        return v11;
    }
    let v4 = constructor_put_xmm_mem_in_xmm(ctx, F64, arg0);
    let v5 = &constructor_xmm_to_xmm_mem_aligned(ctx, v4);
    let v6 = C::encode_round_imm(ctx, arg1);
    let v7 = constructor_xmm_unary_rm_r_imm(ctx, &SseOpcode::Roundsd, v5, v6);
    // Rule at src\isa\x64\inst.isle line 4271.
    return v7;
}

// Generated as internal constructor for term put_xmm_mem_in_xmm.
pub fn constructor_put_xmm_mem_in_xmm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &XmmMem,
) -> Xmm {
    let v2 = &C::xmm_mem_to_reg_mem(ctx, arg1);
    match v2 {
        &RegMem::Reg {
            reg: v3,
        } => {
            let v4 = C::xmm_new(ctx, v3);
            // Rule at src\isa\x64\inst.isle line 4282.
            return v4;
        }
        &RegMem::Mem {
            addr: ref v5,
        } => {
            let v7 = constructor_x64_load(ctx, arg0, v5, &ExtKind::None);
            let v8 = C::xmm_new(ctx, v7);
            // Rule at src\isa\x64\inst.isle line 4285.
            return v8;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "put_xmm_mem_in_xmm", "src\\isa\\x64\\inst.isle line 4281")
}

// Generated as internal constructor for term x64_roundps.
pub fn constructor_x64_roundps<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
    arg1: &RoundImm,
) -> Xmm {
    let v6 = C::use_avx(ctx);
    if v6 == true {
        let v8 = C::encode_round_imm(ctx, arg1);
        let v9 = constructor_xmm_unary_rm_r_imm_vex(ctx, &AvxOpcode::Vroundps, arg0, v8);
        // Rule at src\isa\x64\inst.isle line 4293.
        return v9;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v4 = C::encode_round_imm(ctx, arg1);
    let v5 = constructor_xmm_unary_rm_r_imm(ctx, &SseOpcode::Roundps, v3, v4);
    // Rule at src\isa\x64\inst.isle line 4291.
    return v5;
}

// Generated as internal constructor for term x64_roundpd.
pub fn constructor_x64_roundpd<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
    arg1: &RoundImm,
) -> Xmm {
    let v6 = C::use_avx(ctx);
    if v6 == true {
        let v8 = C::encode_round_imm(ctx, arg1);
        let v9 = constructor_xmm_unary_rm_r_imm_vex(ctx, &AvxOpcode::Vroundpd, arg0, v8);
        // Rule at src\isa\x64\inst.isle line 4301.
        return v9;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v4 = C::encode_round_imm(ctx, arg1);
    let v5 = constructor_xmm_unary_rm_r_imm(ctx, &SseOpcode::Roundpd, v3, v4);
    // Rule at src\isa\x64\inst.isle line 4299.
    return v5;
}

// Generated as internal constructor for term x64_pmaddwd.
pub fn constructor_x64_pmaddwd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmaddwd, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 4309.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmaddwd, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 4307.
    return v4;
}

// Generated as internal constructor for term x64_pmaddubsw.
pub fn constructor_x64_pmaddubsw<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmaddubsw, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 4316.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmaddubsw, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 4314.
    return v4;
}

// Generated as internal constructor for term x64_insertps.
pub fn constructor_x64_insertps<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
    arg2: u8,
) -> Xmm {
    let v8 = C::use_avx(ctx);
    if v8 == true {
        let v10 = constructor_xmm_rmr_imm_vex(ctx, &AvxOpcode::Vinsertps, arg0, arg1, arg2);
        // Rule at src\isa\x64\inst.isle line 4328.
        return v10;
    }
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v5 = &C::xmm_mem_to_reg_mem(ctx, arg1);
    let v7 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Insertps, v4, v5, arg2, &OperandSize::Size32);
    // Rule at src\isa\x64\inst.isle line 4322.
    return v7;
}

// Generated as internal constructor for term x64_pshufd.
pub fn constructor_x64_pshufd<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
    arg1: u8,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_unary_rm_r_imm_vex(ctx, &AvxOpcode::Vpshufd, arg0, arg1);
        // Rule at src\isa\x64\inst.isle line 4336.
        return v7;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v4 = constructor_xmm_unary_rm_r_imm(ctx, &SseOpcode::Pshufd, v3, arg1);
    // Rule at src\isa\x64\inst.isle line 4334.
    return v4;
}

// Generated as internal constructor for term x64_pshufb.
pub fn constructor_x64_pshufb<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpshufb, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 4344.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pshufb, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 4342.
    return v4;
}

// Generated as internal constructor for term x64_pshuflw.
pub fn constructor_x64_pshuflw<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
    arg1: u8,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_unary_rm_r_imm_vex(ctx, &AvxOpcode::Vpshuflw, arg0, arg1);
        // Rule at src\isa\x64\inst.isle line 4352.
        return v7;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v4 = constructor_xmm_unary_rm_r_imm(ctx, &SseOpcode::Pshuflw, v3, arg1);
    // Rule at src\isa\x64\inst.isle line 4350.
    return v4;
}

// Generated as internal constructor for term x64_pshufhw.
pub fn constructor_x64_pshufhw<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
    arg1: u8,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_unary_rm_r_imm_vex(ctx, &AvxOpcode::Vpshufhw, arg0, arg1);
        // Rule at src\isa\x64\inst.isle line 4360.
        return v7;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v4 = constructor_xmm_unary_rm_r_imm(ctx, &SseOpcode::Pshufhw, v3, arg1);
    // Rule at src\isa\x64\inst.isle line 4358.
    return v4;
}

// Generated as internal constructor for term x64_shufps.
pub fn constructor_x64_shufps<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
    arg2: u8,
) -> Xmm {
    let v8 = C::use_avx(ctx);
    if v8 == true {
        let v10 = constructor_xmm_rmr_imm_vex(ctx, &AvxOpcode::Vshufps, arg0, arg1, arg2);
        // Rule at src\isa\x64\inst.isle line 4372.
        return v10;
    }
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v5 = &C::xmm_mem_to_reg_mem(ctx, arg1);
    let v7 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Shufps, v4, v5, arg2, &OperandSize::Size32);
    // Rule at src\isa\x64\inst.isle line 4366.
    return v7;
}

// Generated as internal constructor for term x64_pabsb.
pub fn constructor_x64_pabsb<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpabsb, arg0);
        // Rule at src\isa\x64\inst.isle line 4380.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Pabsb, v2);
    // Rule at src\isa\x64\inst.isle line 4378.
    return v3;
}

// Generated as internal constructor for term x64_pabsw.
pub fn constructor_x64_pabsw<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpabsw, arg0);
        // Rule at src\isa\x64\inst.isle line 4388.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Pabsw, v2);
    // Rule at src\isa\x64\inst.isle line 4386.
    return v3;
}

// Generated as internal constructor for term x64_pabsd.
pub fn constructor_x64_pabsd<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpabsd, arg0);
        // Rule at src\isa\x64\inst.isle line 4396.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Pabsd, v2);
    // Rule at src\isa\x64\inst.isle line 4394.
    return v3;
}

// Generated as internal constructor for term x64_vcvtudq2ps.
pub fn constructor_x64_vcvtudq2ps<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r_evex(ctx, &Avx512Opcode::Vcvtudq2ps, arg0);
    // Rule at src\isa\x64\inst.isle line 4402.
    return v2;
}

// Generated as internal constructor for term x64_vpabsq.
pub fn constructor_x64_vpabsq<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r_evex(ctx, &Avx512Opcode::Vpabsq, arg0);
    // Rule at src\isa\x64\inst.isle line 4407.
    return v2;
}

// Generated as internal constructor for term x64_vpopcntb.
pub fn constructor_x64_vpopcntb<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r_evex(ctx, &Avx512Opcode::Vpopcntb, arg0);
    // Rule at src\isa\x64\inst.isle line 4412.
    return v2;
}

// Generated as internal constructor for term x64_vpmullq.
pub fn constructor_x64_vpmullq<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v3 = constructor_xmm_rm_r_evex(ctx, &Avx512Opcode::Vpmullq, arg0, arg1);
    // Rule at src\isa\x64\inst.isle line 4419.
    return v3;
}

// Generated as internal constructor for term x64_vpermi2b.
pub fn constructor_x64_vpermi2b<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: Xmm,
    arg2: &XmmMem,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v5 = MInst::XmmRmREvex3 {
        op: Avx512Opcode::Vpermi2b,
        src1: arg0,
        src2: arg1,
        src3: arg2.clone(),
        dst: v3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src\isa\x64\inst.isle line 4428.
    return v7;
}

// Generated as internal constructor for term x64_psllw.
pub fn constructor_x64_psllw<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMemImm,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsllw, arg0, arg1);
        // Rule at src\isa\x64\inst.isle line 4441.
        return v7;
    }
    let v3 = &C::xmm_mem_imm_to_xmm_mem_aligned_imm(ctx, arg1);
    let v4 = constructor_xmm_rmi_xmm(ctx, &SseOpcode::Psllw, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 4439.
    return v4;
}

// Generated as internal constructor for term x64_pslld.
pub fn constructor_x64_pslld<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMemImm,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpslld, arg0, arg1);
        // Rule at src\isa\x64\inst.isle line 4449.
        return v7;
    }
    let v3 = &C::xmm_mem_imm_to_xmm_mem_aligned_imm(ctx, arg1);
    let v4 = constructor_xmm_rmi_xmm(ctx, &SseOpcode::Pslld, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 4447.
    return v4;
}

// Generated as internal constructor for term x64_psllq.
pub fn constructor_x64_psllq<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMemImm,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsllq, arg0, arg1);
        // Rule at src\isa\x64\inst.isle line 4457.
        return v7;
    }
    let v3 = &C::xmm_mem_imm_to_xmm_mem_aligned_imm(ctx, arg1);
    let v4 = constructor_xmm_rmi_xmm(ctx, &SseOpcode::Psllq, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 4455.
    return v4;
}

// Generated as internal constructor for term x64_psrlw.
pub fn constructor_x64_psrlw<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMemImm,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsrlw, arg0, arg1);
        // Rule at src\isa\x64\inst.isle line 4465.
        return v7;
    }
    let v3 = &C::xmm_mem_imm_to_xmm_mem_aligned_imm(ctx, arg1);
    let v4 = constructor_xmm_rmi_xmm(ctx, &SseOpcode::Psrlw, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 4463.
    return v4;
}

// Generated as internal constructor for term x64_psrld.
pub fn constructor_x64_psrld<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMemImm,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsrld, arg0, arg1);
        // Rule at src\isa\x64\inst.isle line 4473.
        return v7;
    }
    let v3 = &C::xmm_mem_imm_to_xmm_mem_aligned_imm(ctx, arg1);
    let v4 = constructor_xmm_rmi_xmm(ctx, &SseOpcode::Psrld, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 4471.
    return v4;
}

// Generated as internal constructor for term x64_psrlq.
pub fn constructor_x64_psrlq<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMemImm,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsrlq, arg0, arg1);
        // Rule at src\isa\x64\inst.isle line 4481.
        return v7;
    }
    let v3 = &C::xmm_mem_imm_to_xmm_mem_aligned_imm(ctx, arg1);
    let v4 = constructor_xmm_rmi_xmm(ctx, &SseOpcode::Psrlq, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 4479.
    return v4;
}

// Generated as internal constructor for term x64_psraw.
pub fn constructor_x64_psraw<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMemImm,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsraw, arg0, arg1);
        // Rule at src\isa\x64\inst.isle line 4489.
        return v7;
    }
    let v3 = &C::xmm_mem_imm_to_xmm_mem_aligned_imm(ctx, arg1);
    let v4 = constructor_xmm_rmi_xmm(ctx, &SseOpcode::Psraw, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 4487.
    return v4;
}

// Generated as internal constructor for term x64_psrad.
pub fn constructor_x64_psrad<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMemImm,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsrad, arg0, arg1);
        // Rule at src\isa\x64\inst.isle line 4497.
        return v7;
    }
    let v3 = &C::xmm_mem_imm_to_xmm_mem_aligned_imm(ctx, arg1);
    let v4 = constructor_xmm_rmi_xmm(ctx, &SseOpcode::Psrad, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 4495.
    return v4;
}

// Generated as internal constructor for term x64_vpsraq.
pub fn constructor_x64_vpsraq<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v3 = constructor_xmm_rm_r_evex(ctx, &Avx512Opcode::Vpsraq, arg0, arg1);
    // Rule at src\isa\x64\inst.isle line 4503.
    return v3;
}

// Generated as internal constructor for term x64_vpsraq_imm.
pub fn constructor_x64_vpsraq_imm<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
    arg1: u8,
) -> Xmm {
    let v3 = constructor_xmm_unary_rm_r_imm_evex(ctx, &Avx512Opcode::VpsraqImm, arg0, arg1);
    // Rule at src\isa\x64\inst.isle line 4508.
    return v3;
}

// Generated as internal constructor for term x64_pextrb.
pub fn constructor_x64_pextrb<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: u8,
) -> Gpr {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_to_gpr_imm_vex(ctx, &AvxOpcode::Vpextrb, arg0, arg1);
        // Rule at src\isa\x64\inst.isle line 4515.
        return v6;
    }
    let v3 = constructor_xmm_to_gpr_imm(ctx, &SseOpcode::Pextrb, arg0, arg1);
    // Rule at src\isa\x64\inst.isle line 4513.
    return v3;
}

// Generated as internal constructor for term x64_pextrb_store.
pub fn constructor_x64_pextrb_store<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
    arg1: Xmm,
    arg2: u8,
) -> SideEffectNoResult {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &constructor_xmm_movrm_imm_vex(ctx, &AvxOpcode::Vpextrb, arg0, arg1, arg2);
        // Rule at src\isa\x64\inst.isle line 4522.
        return v7.clone();
    }
    let v4 = &constructor_xmm_movrm_imm(ctx, &SseOpcode::Pextrb, arg0, arg1, arg2);
    // Rule at src\isa\x64\inst.isle line 4520.
    return v4.clone();
}

// Generated as internal constructor for term x64_pextrw.
pub fn constructor_x64_pextrw<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: u8,
) -> Gpr {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_to_gpr_imm_vex(ctx, &AvxOpcode::Vpextrw, arg0, arg1);
        // Rule at src\isa\x64\inst.isle line 4530.
        return v6;
    }
    let v3 = constructor_xmm_to_gpr_imm(ctx, &SseOpcode::Pextrw, arg0, arg1);
    // Rule at src\isa\x64\inst.isle line 4528.
    return v3;
}

// Generated as internal constructor for term x64_pextrw_store.
pub fn constructor_x64_pextrw_store<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
    arg1: Xmm,
    arg2: u8,
) -> SideEffectNoResult {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &constructor_xmm_movrm_imm_vex(ctx, &AvxOpcode::Vpextrw, arg0, arg1, arg2);
        // Rule at src\isa\x64\inst.isle line 4537.
        return v7.clone();
    }
    let v4 = &constructor_xmm_movrm_imm(ctx, &SseOpcode::Pextrw, arg0, arg1, arg2);
    // Rule at src\isa\x64\inst.isle line 4535.
    return v4.clone();
}

// Generated as internal constructor for term x64_pextrd.
pub fn constructor_x64_pextrd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: u8,
) -> Gpr {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_to_gpr_imm_vex(ctx, &AvxOpcode::Vpextrd, arg0, arg1);
        // Rule at src\isa\x64\inst.isle line 4545.
        return v6;
    }
    let v3 = constructor_xmm_to_gpr_imm(ctx, &SseOpcode::Pextrd, arg0, arg1);
    // Rule at src\isa\x64\inst.isle line 4543.
    return v3;
}

// Generated as internal constructor for term x64_pextrd_store.
pub fn constructor_x64_pextrd_store<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
    arg1: Xmm,
    arg2: u8,
) -> SideEffectNoResult {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &constructor_xmm_movrm_imm_vex(ctx, &AvxOpcode::Vpextrd, arg0, arg1, arg2);
        // Rule at src\isa\x64\inst.isle line 4552.
        return v7.clone();
    }
    let v4 = &constructor_xmm_movrm_imm(ctx, &SseOpcode::Pextrd, arg0, arg1, arg2);
    // Rule at src\isa\x64\inst.isle line 4550.
    return v4.clone();
}

// Generated as internal constructor for term x64_pextrq.
pub fn constructor_x64_pextrq<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: u8,
) -> Gpr {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_to_gpr_imm_vex(ctx, &AvxOpcode::Vpextrq, arg0, arg1);
        // Rule at src\isa\x64\inst.isle line 4560.
        return v6;
    }
    let v3 = constructor_xmm_to_gpr_imm(ctx, &SseOpcode::Pextrq, arg0, arg1);
    // Rule at src\isa\x64\inst.isle line 4558.
    return v3;
}

// Generated as internal constructor for term x64_pextrq_store.
pub fn constructor_x64_pextrq_store<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
    arg1: Xmm,
    arg2: u8,
) -> SideEffectNoResult {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &constructor_xmm_movrm_imm_vex(ctx, &AvxOpcode::Vpextrq, arg0, arg1, arg2);
        // Rule at src\isa\x64\inst.isle line 4567.
        return v7.clone();
    }
    let v4 = &constructor_xmm_movrm_imm(ctx, &SseOpcode::Pextrq, arg0, arg1, arg2);
    // Rule at src\isa\x64\inst.isle line 4565.
    return v4.clone();
}

// Generated as internal constructor for term x64_pmovmskb.
pub fn constructor_x64_pmovmskb<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Xmm,
) -> Gpr {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_to_gpr_vex(ctx, &AvxOpcode::Vpmovmskb, arg1, arg0);
        // Rule at src\isa\x64\inst.isle line 4575.
        return v6;
    }
    let v3 = constructor_xmm_to_gpr(ctx, &SseOpcode::Pmovmskb, arg1, arg0);
    // Rule at src\isa\x64\inst.isle line 4573.
    return v3;
}

// Generated as internal constructor for term x64_movmskps.
pub fn constructor_x64_movmskps<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Xmm,
) -> Gpr {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_to_gpr_vex(ctx, &AvxOpcode::Vmovmskps, arg1, arg0);
        // Rule at src\isa\x64\inst.isle line 4583.
        return v6;
    }
    let v3 = constructor_xmm_to_gpr(ctx, &SseOpcode::Movmskps, arg1, arg0);
    // Rule at src\isa\x64\inst.isle line 4581.
    return v3;
}

// Generated as internal constructor for term x64_movmskpd.
pub fn constructor_x64_movmskpd<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Xmm,
) -> Gpr {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_to_gpr_vex(ctx, &AvxOpcode::Vmovmskpd, arg1, arg0);
        // Rule at src\isa\x64\inst.isle line 4591.
        return v6;
    }
    let v3 = constructor_xmm_to_gpr(ctx, &SseOpcode::Movmskpd, arg1, arg0);
    // Rule at src\isa\x64\inst.isle line 4589.
    return v3;
}

// Generated as internal constructor for term x64_not.
pub fn constructor_x64_not<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v4 = MInst::Not {
        size: v3.clone(),
        src: arg1,
        dst: v2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src\isa\x64\inst.isle line 4597.
    return v6;
}

// Generated as internal constructor for term x64_neg.
pub fn constructor_x64_neg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = &C::raw_operand_size_of_type(ctx, arg0);
    let v4 = MInst::Neg {
        size: v3.clone(),
        src: arg1,
        dst: v2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src\isa\x64\inst.isle line 4605.
    return v6;
}

// Generated as internal constructor for term x64_neg_paired.
pub fn constructor_x64_neg_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
) -> ProducesFlags {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = &C::raw_operand_size_of_type(ctx, arg0);
    let v5 = constructor_writable_gpr_to_r_reg(ctx, v2);
    let v4 = MInst::Neg {
        size: v3.clone(),
        src: arg1,
        dst: v2,
    };
    let v6 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v4,
        result: v5,
    };
    // Rule at src\isa\x64\inst.isle line 4613.
    return v6;
}

// Generated as internal constructor for term x64_lea.
pub fn constructor_x64_lea<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &SyntheticAmode,
) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v4 = MInst::LoadEffectiveAddress {
        addr: arg1.clone(),
        dst: v2,
        size: v3.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src\isa\x64\inst.isle line 4623.
    return v6;
}

// Generated as internal constructor for term x64_ud2.
pub fn constructor_x64_ud2<C: Context>(
    ctx: &mut C,
    arg0: &TrapCode,
) -> SideEffectNoResult {
    let v1 = MInst::Ud2 {
        trap_code: arg0.clone(),
    };
    let v2 = SideEffectNoResult::Inst {
        inst: v1,
    };
    // Rule at src\isa\x64\inst.isle line 4630.
    return v2;
}

// Generated as internal constructor for term x64_hlt.
pub fn constructor_x64_hlt<C: Context>(
    ctx: &mut C,
) -> SideEffectNoResult {
    let v1 = SideEffectNoResult::Inst {
        inst: MInst::Hlt,
    };
    // Rule at src\isa\x64\inst.isle line 4635.
    return v1;
}

// Generated as internal constructor for term x64_lzcnt.
pub fn constructor_x64_lzcnt<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
) -> Gpr {
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v4 = constructor_unary_rm_r(ctx, &UnaryRmROpcode::Lzcnt, arg1, v3);
    // Rule at src\isa\x64\inst.isle line 4640.
    return v4;
}

// Generated as internal constructor for term x64_tzcnt.
pub fn constructor_x64_tzcnt<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
) -> Gpr {
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v4 = constructor_unary_rm_r(ctx, &UnaryRmROpcode::Tzcnt, arg1, v3);
    // Rule at src\isa\x64\inst.isle line 4645.
    return v4;
}

// Generated as internal constructor for term x64_bsr.
pub fn constructor_x64_bsr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
) -> ProducesFlags {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v5 = &C::gpr_to_gpr_mem(ctx, arg1);
    let v7 = constructor_writable_gpr_to_r_reg(ctx, v2);
    let v6 = MInst::UnaryRmR {
        size: v3.clone(),
        op: UnaryRmROpcode::Bsr,
        src: v5.clone(),
        dst: v2,
    };
    let v8 = ProducesFlags::ProducesFlagsReturnsReg {
        inst: v6,
        result: v7,
    };
    // Rule at src\isa\x64\inst.isle line 4650.
    return v8;
}

// Generated as internal constructor for term bsr_or_else.
pub fn constructor_bsr_or_else<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: Gpr,
) -> Gpr {
    let v3 = &constructor_x64_bsr(ctx, arg0, arg1);
    let v4 = constructor_produces_flags_get_reg(ctx, v3);
    let v5 = C::gpr_new(ctx, v4);
    let v7 = &C::gpr_to_gpr_mem(ctx, arg2);
    let v8 = &constructor_cmove(ctx, arg0, &CC::Z, v7, v5);
    let v9 = &constructor_produces_flags_ignore(ctx, v3);
    let v10 = constructor_with_flags_reg(ctx, v9, v8);
    let v11 = C::gpr_new(ctx, v10);
    // Rule at src\isa\x64\inst.isle line 4659.
    return v11;
}

// Generated as internal constructor for term x64_bsf.
pub fn constructor_x64_bsf<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
) -> ProducesFlags {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v5 = &C::gpr_to_gpr_mem(ctx, arg1);
    let v7 = constructor_writable_gpr_to_r_reg(ctx, v2);
    let v6 = MInst::UnaryRmR {
        size: v3.clone(),
        op: UnaryRmROpcode::Bsf,
        src: v5.clone(),
        dst: v2,
    };
    let v8 = ProducesFlags::ProducesFlagsReturnsReg {
        inst: v6,
        result: v7,
    };
    // Rule at src\isa\x64\inst.isle line 4670.
    return v8;
}

// Generated as internal constructor for term bsf_or_else.
pub fn constructor_bsf_or_else<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: Gpr,
) -> Gpr {
    let v3 = &constructor_x64_bsf(ctx, arg0, arg1);
    let v4 = constructor_produces_flags_get_reg(ctx, v3);
    let v5 = C::gpr_new(ctx, v4);
    let v7 = &C::gpr_to_gpr_mem(ctx, arg2);
    let v8 = &constructor_cmove(ctx, arg0, &CC::Z, v7, v5);
    let v9 = &constructor_produces_flags_ignore(ctx, v3);
    let v10 = constructor_with_flags_reg(ctx, v9, v8);
    let v11 = C::gpr_new(ctx, v10);
    // Rule at src\isa\x64\inst.isle line 4679.
    return v11;
}

// Generated as internal constructor for term x64_blsi.
pub fn constructor_x64_blsi<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &GprMem,
) -> Gpr {
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v4 = constructor_unary_rm_r_vex(ctx, &UnaryRmRVexOpcode::Blsi, arg1, v3);
    // Rule at src\isa\x64\inst.isle line 4690.
    return v4;
}

// Generated as internal constructor for term x64_blsmsk.
pub fn constructor_x64_blsmsk<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &GprMem,
) -> Gpr {
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v4 = constructor_unary_rm_r_vex(ctx, &UnaryRmRVexOpcode::Blsmsk, arg1, v3);
    // Rule at src\isa\x64\inst.isle line 4695.
    return v4;
}

// Generated as internal constructor for term x64_blsr.
pub fn constructor_x64_blsr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &GprMem,
) -> Gpr {
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v4 = constructor_unary_rm_r_vex(ctx, &UnaryRmRVexOpcode::Blsr, arg1, v3);
    // Rule at src\isa\x64\inst.isle line 4700.
    return v4;
}

// Generated as internal constructor for term x64_sarx.
pub fn constructor_x64_sarx<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &GprMem,
    arg2: Gpr,
) -> Gpr {
    let v4 = constructor_alu_rm_r_vex(ctx, arg0, &AluRmROpcode::Sarx, arg2, arg1);
    // Rule at src\isa\x64\inst.isle line 4705.
    return v4;
}

// Generated as internal constructor for term x64_shrx.
pub fn constructor_x64_shrx<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &GprMem,
    arg2: Gpr,
) -> Gpr {
    let v4 = constructor_alu_rm_r_vex(ctx, arg0, &AluRmROpcode::Shrx, arg2, arg1);
    // Rule at src\isa\x64\inst.isle line 4710.
    return v4;
}

// Generated as internal constructor for term x64_shlx.
pub fn constructor_x64_shlx<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &GprMem,
    arg2: Gpr,
) -> Gpr {
    let v4 = constructor_alu_rm_r_vex(ctx, arg0, &AluRmROpcode::Shlx, arg2, arg1);
    // Rule at src\isa\x64\inst.isle line 4715.
    return v4;
}

// Generated as internal constructor for term x64_rorx.
pub fn constructor_x64_rorx<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &GprMem,
    arg2: u8,
) -> Gpr {
    let v4 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v5 = constructor_unary_rm_r_imm_vex(ctx, &UnaryRmRImmVexOpcode::Rorx, arg1, v4, arg2);
    // Rule at src\isa\x64\inst.isle line 4720.
    return v5;
}

// Generated as internal constructor for term x64_popcnt.
pub fn constructor_x64_popcnt<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
) -> Gpr {
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v4 = constructor_unary_rm_r(ctx, &UnaryRmROpcode::Popcnt, arg1, v3);
    // Rule at src\isa\x64\inst.isle line 4728.
    return v4;
}

// Generated as internal constructor for term x64_minss.
pub fn constructor_x64_minss<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vminss, arg0, v6);
        // Rule at src\isa\x64\inst.isle line 4735.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Minss, arg0, arg1);
    // Rule at src\isa\x64\inst.isle line 4733.
    return v3;
}

// Generated as internal constructor for term x64_minsd.
pub fn constructor_x64_minsd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vminsd, arg0, v6);
        // Rule at src\isa\x64\inst.isle line 4743.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Minsd, arg0, arg1);
    // Rule at src\isa\x64\inst.isle line 4741.
    return v3;
}

// Generated as internal constructor for term x64_minps.
pub fn constructor_x64_minps<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vminps, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 4751.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Minps, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 4749.
    return v4;
}

// Generated as internal constructor for term x64_minpd.
pub fn constructor_x64_minpd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vminpd, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 4759.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Minpd, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 4757.
    return v4;
}

// Generated as internal constructor for term x64_maxss.
pub fn constructor_x64_maxss<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmaxss, arg0, v6);
        // Rule at src\isa\x64\inst.isle line 4767.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Maxss, arg0, arg1);
    // Rule at src\isa\x64\inst.isle line 4765.
    return v3;
}

// Generated as internal constructor for term x64_maxsd.
pub fn constructor_x64_maxsd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmaxsd, arg0, v6);
        // Rule at src\isa\x64\inst.isle line 4775.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Maxsd, arg0, arg1);
    // Rule at src\isa\x64\inst.isle line 4773.
    return v3;
}

// Generated as internal constructor for term x64_maxps.
pub fn constructor_x64_maxps<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmaxps, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 4783.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Maxps, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 4781.
    return v4;
}

// Generated as internal constructor for term x64_maxpd.
pub fn constructor_x64_maxpd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmaxpd, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 4791.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Maxpd, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 4789.
    return v4;
}

// Generated as internal constructor for term x64_vfmadd213.
pub fn constructor_x64_vfmadd213<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: Xmm,
    arg3: &XmmMem,
) -> Xmm {
    match arg0 {
        F32 => {
            let v5 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmadd213ss, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4797.
            return v5;
        }
        F64 => {
            let v7 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmadd213sd, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4798.
            return v7;
        }
        F32X4 => {
            let v9 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmadd213ps, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4799.
            return v9;
        }
        F64X2 => {
            let v11 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmadd213pd, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4800.
            return v11;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_vfmadd213", "src\\isa\\x64\\inst.isle line 4796")
}

// Generated as internal constructor for term x64_vfmadd132.
pub fn constructor_x64_vfmadd132<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: Xmm,
    arg3: &XmmMem,
) -> Xmm {
    match arg0 {
        F32 => {
            let v5 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmadd132ss, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4804.
            return v5;
        }
        F64 => {
            let v7 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmadd132sd, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4805.
            return v7;
        }
        F32X4 => {
            let v9 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmadd132ps, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4806.
            return v9;
        }
        F64X2 => {
            let v11 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmadd132pd, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4807.
            return v11;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_vfmadd132", "src\\isa\\x64\\inst.isle line 4803")
}

// Generated as internal constructor for term x64_vfnmadd213.
pub fn constructor_x64_vfnmadd213<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: Xmm,
    arg3: &XmmMem,
) -> Xmm {
    match arg0 {
        F32 => {
            let v5 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmadd213ss, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4811.
            return v5;
        }
        F64 => {
            let v7 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmadd213sd, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4812.
            return v7;
        }
        F32X4 => {
            let v9 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmadd213ps, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4813.
            return v9;
        }
        F64X2 => {
            let v11 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmadd213pd, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4814.
            return v11;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_vfnmadd213", "src\\isa\\x64\\inst.isle line 4810")
}

// Generated as internal constructor for term x64_vfnmadd132.
pub fn constructor_x64_vfnmadd132<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: Xmm,
    arg3: &XmmMem,
) -> Xmm {
    match arg0 {
        F32 => {
            let v5 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmadd132ss, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4818.
            return v5;
        }
        F64 => {
            let v7 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmadd132sd, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4819.
            return v7;
        }
        F32X4 => {
            let v9 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmadd132ps, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4820.
            return v9;
        }
        F64X2 => {
            let v11 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmadd132pd, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4821.
            return v11;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_vfnmadd132", "src\\isa\\x64\\inst.isle line 4817")
}

// Generated as internal constructor for term x64_vfmsub213.
pub fn constructor_x64_vfmsub213<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: Xmm,
    arg3: &XmmMem,
) -> Xmm {
    match arg0 {
        F32 => {
            let v5 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmsub213ss, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4825.
            return v5;
        }
        F64 => {
            let v7 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmsub213sd, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4826.
            return v7;
        }
        F32X4 => {
            let v9 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmsub213ps, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4827.
            return v9;
        }
        F64X2 => {
            let v11 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmsub213pd, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4828.
            return v11;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_vfmsub213", "src\\isa\\x64\\inst.isle line 4824")
}

// Generated as internal constructor for term x64_vfmsub132.
pub fn constructor_x64_vfmsub132<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: Xmm,
    arg3: &XmmMem,
) -> Xmm {
    match arg0 {
        F32 => {
            let v5 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmsub132ss, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4832.
            return v5;
        }
        F64 => {
            let v7 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmsub132sd, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4833.
            return v7;
        }
        F32X4 => {
            let v9 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmsub132ps, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4834.
            return v9;
        }
        F64X2 => {
            let v11 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmsub132pd, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4835.
            return v11;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_vfmsub132", "src\\isa\\x64\\inst.isle line 4831")
}

// Generated as internal constructor for term x64_vfnmsub213.
pub fn constructor_x64_vfnmsub213<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: Xmm,
    arg3: &XmmMem,
) -> Xmm {
    match arg0 {
        F32 => {
            let v5 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmsub213ss, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4839.
            return v5;
        }
        F64 => {
            let v7 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmsub213sd, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4840.
            return v7;
        }
        F32X4 => {
            let v9 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmsub213ps, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4841.
            return v9;
        }
        F64X2 => {
            let v11 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmsub213pd, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4842.
            return v11;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_vfnmsub213", "src\\isa\\x64\\inst.isle line 4838")
}

// Generated as internal constructor for term x64_vfnmsub132.
pub fn constructor_x64_vfnmsub132<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: Xmm,
    arg3: &XmmMem,
) -> Xmm {
    match arg0 {
        F32 => {
            let v5 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmsub132ss, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4846.
            return v5;
        }
        F64 => {
            let v7 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmsub132sd, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4847.
            return v7;
        }
        F32X4 => {
            let v9 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmsub132ps, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4848.
            return v9;
        }
        F64X2 => {
            let v11 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmsub132pd, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4849.
            return v11;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_vfnmsub132", "src\\isa\\x64\\inst.isle line 4845")
}

// Generated as internal constructor for term x64_sqrtss.
pub fn constructor_x64_sqrtss<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vsqrtss, arg0, v6);
        // Rule at src\isa\x64\inst.isle line 4865.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Sqrtss, arg0, arg1);
    // Rule at src\isa\x64\inst.isle line 4864.
    return v3;
}

// Generated as internal constructor for term x64_sqrtsd.
pub fn constructor_x64_sqrtsd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vsqrtsd, arg0, v6);
        // Rule at src\isa\x64\inst.isle line 4874.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Sqrtsd, arg0, arg1);
    // Rule at src\isa\x64\inst.isle line 4873.
    return v3;
}

// Generated as internal constructor for term x64_sqrtps.
pub fn constructor_x64_sqrtps<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vsqrtps, arg0);
        // Rule at src\isa\x64\inst.isle line 4881.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Sqrtps, v2);
    // Rule at src\isa\x64\inst.isle line 4880.
    return v3;
}

// Generated as internal constructor for term x64_sqrtpd.
pub fn constructor_x64_sqrtpd<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vsqrtpd, arg0);
        // Rule at src\isa\x64\inst.isle line 4888.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Sqrtpd, v2);
    // Rule at src\isa\x64\inst.isle line 4887.
    return v3;
}

// Generated as internal constructor for term x64_cvtss2sd.
pub fn constructor_x64_cvtss2sd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vcvtss2sd, arg0, v6);
        // Rule at src\isa\x64\inst.isle line 4897.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Cvtss2sd, arg0, arg1);
    // Rule at src\isa\x64\inst.isle line 4896.
    return v3;
}

// Generated as internal constructor for term x64_cvtsd2ss.
pub fn constructor_x64_cvtsd2ss<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vcvtsd2ss, arg0, v6);
        // Rule at src\isa\x64\inst.isle line 4906.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Cvtsd2ss, arg0, arg1);
    // Rule at src\isa\x64\inst.isle line 4905.
    return v3;
}

// Generated as internal constructor for term x64_cvtdq2ps.
pub fn constructor_x64_cvtdq2ps<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vcvtdq2ps, arg0);
        // Rule at src\isa\x64\inst.isle line 4913.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Cvtdq2ps, v2);
    // Rule at src\isa\x64\inst.isle line 4912.
    return v3;
}

// Generated as internal constructor for term x64_cvtps2pd.
pub fn constructor_x64_cvtps2pd<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vcvtps2pd, arg0);
        // Rule at src\isa\x64\inst.isle line 4920.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Cvtps2pd, v2);
    // Rule at src\isa\x64\inst.isle line 4919.
    return v3;
}

// Generated as internal constructor for term x64_cvtpd2ps.
pub fn constructor_x64_cvtpd2ps<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vcvtpd2ps, arg0);
        // Rule at src\isa\x64\inst.isle line 4927.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Cvtpd2ps, v2);
    // Rule at src\isa\x64\inst.isle line 4926.
    return v3;
}

// Generated as internal constructor for term x64_cvtdq2pd.
pub fn constructor_x64_cvtdq2pd<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vcvtdq2pd, arg0);
        // Rule at src\isa\x64\inst.isle line 4934.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Cvtdq2pd, v2);
    // Rule at src\isa\x64\inst.isle line 4933.
    return v3;
}

// Generated as internal constructor for term x64_cvtsi2ss.
pub fn constructor_x64_cvtsi2ss<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &GprMem,
) -> Xmm {
    let v6 = C::use_avx(ctx);
    if v6 == true {
        let v4 = &C::raw_operand_size_of_type(ctx, arg0);
        let v8 = constructor_cvt_int_to_float_vex(ctx, &AvxOpcode::Vcvtsi2ss, arg1, arg2, v4);
        // Rule at src\isa\x64\inst.isle line 4942.
        return v8;
    }
    let v4 = &C::raw_operand_size_of_type(ctx, arg0);
    let v5 = constructor_cvt_int_to_float(ctx, &SseOpcode::Cvtsi2ss, arg1, arg2, v4);
    // Rule at src\isa\x64\inst.isle line 4940.
    return v5;
}

// Generated as internal constructor for term x64_cvtsi2sd.
pub fn constructor_x64_cvtsi2sd<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &GprMem,
) -> Xmm {
    let v6 = C::use_avx(ctx);
    if v6 == true {
        let v4 = &C::raw_operand_size_of_type(ctx, arg0);
        let v8 = constructor_cvt_int_to_float_vex(ctx, &AvxOpcode::Vcvtsi2sd, arg1, arg2, v4);
        // Rule at src\isa\x64\inst.isle line 4950.
        return v8;
    }
    let v4 = &C::raw_operand_size_of_type(ctx, arg0);
    let v5 = constructor_cvt_int_to_float(ctx, &SseOpcode::Cvtsi2sd, arg1, arg2, v4);
    // Rule at src\isa\x64\inst.isle line 4948.
    return v5;
}

// Generated as internal constructor for term x64_cvttps2dq.
pub fn constructor_x64_cvttps2dq<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vcvttps2dq, arg0);
        // Rule at src\isa\x64\inst.isle line 4958.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Cvttps2dq, v2);
    // Rule at src\isa\x64\inst.isle line 4956.
    return v3;
}

// Generated as internal constructor for term x64_cvttpd2dq.
pub fn constructor_x64_cvttpd2dq<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vcvttpd2dq, arg0);
        // Rule at src\isa\x64\inst.isle line 4966.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Cvttpd2dq, v2);
    // Rule at src\isa\x64\inst.isle line 4964.
    return v3;
}

// Generated as internal constructor for term x64_pcmpeq.
pub fn constructor_x64_pcmpeq<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &XmmMem,
) -> Xmm {
    match arg0 {
        I8X16 => {
            let v3 = constructor_x64_pcmpeqb(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 4972.
            return v3;
        }
        I16X8 => {
            let v4 = constructor_x64_pcmpeqw(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 4973.
            return v4;
        }
        I32X4 => {
            let v5 = constructor_x64_pcmpeqd(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 4974.
            return v5;
        }
        I64X2 => {
            let v6 = C::use_sse41(ctx);
            if v6 == true {
                let v7 = constructor_x64_pcmpeqq(ctx, arg1, arg2);
                // Rule at src\isa\x64\inst.isle line 4975.
                return v7;
            }
            let v5 = constructor_x64_pcmpeqd(ctx, arg1, arg2);
            let v8 = &C::xmm_to_xmm_mem(ctx, v5);
            let v10 = constructor_x64_pshufd(ctx, v8, 0xb1_u8);
            let v11 = &C::xmm_to_xmm_mem(ctx, v10);
            let v12 = constructor_x64_pand(ctx, v5, v11);
            // Rule at src\isa\x64\inst.isle line 4984.
            return v12;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_pcmpeq", "src\\isa\\x64\\inst.isle line 4971")
}

// Generated as internal constructor for term x64_pcmpeqb.
pub fn constructor_x64_pcmpeqb<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpcmpeqb, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 4991.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pcmpeqb, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 4990.
    return v4;
}

// Generated as internal constructor for term x64_pcmpeqw.
pub fn constructor_x64_pcmpeqw<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpcmpeqw, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 4996.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pcmpeqw, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 4995.
    return v4;
}

// Generated as internal constructor for term x64_pcmpeqd.
pub fn constructor_x64_pcmpeqd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpcmpeqd, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 5001.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pcmpeqd, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 5000.
    return v4;
}

// Generated as internal constructor for term x64_pcmpeqq.
pub fn constructor_x64_pcmpeqq<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpcmpeqq, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 5006.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pcmpeqq, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 5005.
    return v4;
}

// Generated as internal constructor for term x64_pcmpgt.
pub fn constructor_x64_pcmpgt<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &XmmMem,
) -> Xmm {
    match arg0 {
        I8X16 => {
            let v3 = constructor_x64_pcmpgtb(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 5012.
            return v3;
        }
        I16X8 => {
            let v4 = constructor_x64_pcmpgtw(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 5013.
            return v4;
        }
        I32X4 => {
            let v5 = constructor_x64_pcmpgtd(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 5014.
            return v5;
        }
        I64X2 => {
            let v6 = C::use_sse42(ctx);
            if v6 == true {
                let v7 = constructor_x64_pcmpgtq(ctx, arg1, arg2);
                // Rule at src\isa\x64\inst.isle line 5018.
                return v7;
            }
            let v9 = C::emit_u128_le_const(ctx, 0x800000000000000080000000_u128);
            let v10 = &constructor_const_to_xmm_mem(ctx, v9);
            let v11 = constructor_x64_movdqu_load(ctx, v10);
            let v12 = &C::xmm_to_xmm_mem(ctx, arg1);
            let v13 = constructor_x64_pxor(ctx, v11, v12);
            let v14 = constructor_x64_pxor(ctx, v11, arg2);
            let v15 = &C::xmm_to_xmm_mem(ctx, v14);
            let v16 = constructor_x64_pcmpgtd(ctx, v13, v15);
            let v17 = &C::xmm_to_xmm_mem(ctx, v16);
            let v19 = constructor_x64_pshufd(ctx, v17, 0xa0_u8);
            let v20 = &C::xmm_to_xmm_mem(ctx, v16);
            let v22 = constructor_x64_pshufd(ctx, v20, 0xf5_u8);
            let v23 = &C::xmm_to_xmm_mem(ctx, v14);
            let v24 = constructor_x64_pcmpeqd(ctx, v13, v23);
            let v25 = &C::xmm_to_xmm_mem(ctx, v24);
            let v26 = constructor_x64_pshufd(ctx, v25, 0xf5_u8);
            let v27 = &C::xmm_to_xmm_mem(ctx, v26);
            let v28 = constructor_x64_pand(ctx, v19, v27);
            let v29 = &C::xmm_to_xmm_mem(ctx, v22);
            let v30 = constructor_x64_por(ctx, v28, v29);
            // Rule at src\isa\x64\inst.isle line 5047.
            return v30;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_pcmpgt", "src\\isa\\x64\\inst.isle line 5011")
}

// Generated as internal constructor for term x64_pcmpgtb.
pub fn constructor_x64_pcmpgtb<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpcmpgtb, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 5063.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pcmpgtb, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 5062.
    return v4;
}

// Generated as internal constructor for term x64_pcmpgtw.
pub fn constructor_x64_pcmpgtw<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpcmpgtw, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 5068.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pcmpgtw, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 5067.
    return v4;
}

// Generated as internal constructor for term x64_pcmpgtd.
pub fn constructor_x64_pcmpgtd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpcmpgtd, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 5073.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pcmpgtd, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 5072.
    return v4;
}

// Generated as internal constructor for term x64_pcmpgtq.
pub fn constructor_x64_pcmpgtq<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpcmpgtq, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 5078.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pcmpgtq, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 5077.
    return v4;
}

// Generated as internal constructor for term x64_add_mem.
pub fn constructor_x64_add_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Amode,
    arg2: Gpr,
) -> SideEffectNoResult {
    match arg0 {
        I8 => {
            let v3 = &constructor_x64_addb_mr_mem(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 5093.
            return v3.clone();
        }
        I16 => {
            let v4 = &constructor_x64_addw_mr_mem(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 5094.
            return v4.clone();
        }
        I32 => {
            let v5 = &constructor_x64_addl_mr_mem(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 5095.
            return v5.clone();
        }
        I64 => {
            let v6 = &constructor_x64_addq_mr_mem(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 5096.
            return v6.clone();
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_add_mem", "src\\isa\\x64\\inst.isle line 5082")
}

// Generated as internal constructor for term x64_sub_mem.
pub fn constructor_x64_sub_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Amode,
    arg2: Gpr,
) -> SideEffectNoResult {
    match arg0 {
        I8 => {
            let v3 = &constructor_x64_subb_mr_mem(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 5099.
            return v3.clone();
        }
        I16 => {
            let v4 = &constructor_x64_subw_mr_mem(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 5100.
            return v4.clone();
        }
        I32 => {
            let v5 = &constructor_x64_subl_mr_mem(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 5101.
            return v5.clone();
        }
        I64 => {
            let v6 = &constructor_x64_subq_mr_mem(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 5102.
            return v6.clone();
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_sub_mem", "src\\isa\\x64\\inst.isle line 5098")
}

// Generated as internal constructor for term x64_and_mem.
pub fn constructor_x64_and_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Amode,
    arg2: Gpr,
) -> SideEffectNoResult {
    match arg0 {
        I8 => {
            let v3 = &constructor_x64_andb_mr_mem(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 5105.
            return v3.clone();
        }
        I16 => {
            let v4 = &constructor_x64_andw_mr_mem(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 5106.
            return v4.clone();
        }
        I32 => {
            let v5 = &constructor_x64_andl_mr_mem(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 5107.
            return v5.clone();
        }
        I64 => {
            let v6 = &constructor_x64_andq_mr_mem(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 5109.
            return v6.clone();
        }
        F32 => {
            let v5 = &constructor_x64_andl_mr_mem(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 5108.
            return v5.clone();
        }
        F64 => {
            let v6 = &constructor_x64_andq_mr_mem(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 5110.
            return v6.clone();
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_and_mem", "src\\isa\\x64\\inst.isle line 5104")
}

// Generated as internal constructor for term x64_or_mem.
pub fn constructor_x64_or_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Amode,
    arg2: Gpr,
) -> SideEffectNoResult {
    match arg0 {
        I8 => {
            let v3 = &constructor_x64_orb_mr_mem(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 5113.
            return v3.clone();
        }
        I16 => {
            let v4 = &constructor_x64_orw_mr_mem(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 5114.
            return v4.clone();
        }
        I32 => {
            let v5 = &constructor_x64_orl_mr_mem(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 5115.
            return v5.clone();
        }
        I64 => {
            let v6 = &constructor_x64_orq_mr_mem(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 5117.
            return v6.clone();
        }
        F32 => {
            let v5 = &constructor_x64_orl_mr_mem(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 5116.
            return v5.clone();
        }
        F64 => {
            let v6 = &constructor_x64_orq_mr_mem(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 5118.
            return v6.clone();
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_or_mem", "src\\isa\\x64\\inst.isle line 5112")
}

// Generated as internal constructor for term x64_xor_mem.
pub fn constructor_x64_xor_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Amode,
    arg2: Gpr,
) -> SideEffectNoResult {
    match arg0 {
        I8 => {
            let v3 = &constructor_x64_xorb_mr_mem(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 5121.
            return v3.clone();
        }
        I16 => {
            let v4 = &constructor_x64_xorw_mr_mem(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 5122.
            return v4.clone();
        }
        I32 => {
            let v5 = &constructor_x64_xorl_mr_mem(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 5123.
            return v5.clone();
        }
        I64 => {
            let v6 = &constructor_x64_xorq_mr_mem(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 5125.
            return v6.clone();
        }
        F32 => {
            let v5 = &constructor_x64_xorl_mr_mem(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 5124.
            return v5.clone();
        }
        F64 => {
            let v6 = &constructor_x64_xorq_mr_mem(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 5126.
            return v6.clone();
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_xor_mem", "src\\isa\\x64\\inst.isle line 5120")
}

// Generated as internal constructor for term trap_if.
pub fn constructor_trap_if<C: Context>(
    ctx: &mut C,
    arg0: &CC,
    arg1: &TrapCode,
) -> ConsumesFlags {
    let v2 = MInst::TrapIf {
        cc: arg0.clone(),
        trap_code: arg1.clone(),
    };
    let v3 = ConsumesFlags::ConsumesFlagsSideEffect {
        inst: v2,
    };
    // Rule at src\isa\x64\inst.isle line 5130.
    return v3;
}

// Generated as internal constructor for term trap_if_and.
pub fn constructor_trap_if_and<C: Context>(
    ctx: &mut C,
    arg0: &CC,
    arg1: &CC,
    arg2: &TrapCode,
) -> ConsumesFlags {
    let v3 = MInst::TrapIfAnd {
        cc1: arg0.clone(),
        cc2: arg1.clone(),
        trap_code: arg2.clone(),
    };
    let v4 = ConsumesFlags::ConsumesFlagsSideEffect {
        inst: v3,
    };
    // Rule at src\isa\x64\inst.isle line 5135.
    return v4;
}

// Generated as internal constructor for term trap_if_or.
pub fn constructor_trap_if_or<C: Context>(
    ctx: &mut C,
    arg0: &CC,
    arg1: &CC,
    arg2: &TrapCode,
) -> ConsumesFlags {
    let v3 = MInst::TrapIfOr {
        cc1: arg0.clone(),
        cc2: arg1.clone(),
        trap_code: arg2.clone(),
    };
    let v4 = ConsumesFlags::ConsumesFlagsSideEffect {
        inst: v3,
    };
    // Rule at src\isa\x64\inst.isle line 5140.
    return v4;
}

// Generated as internal constructor for term trap_if_icmp.
pub fn constructor_trap_if_icmp<C: Context>(
    ctx: &mut C,
    arg0: &IcmpCondResult,
    arg1: &TrapCode,
) -> SideEffectNoResult {
    if let &IcmpCondResult::Condition {
        producer: ref v1,
        cc: ref v2,
    } = arg0 {
        let v4 = &constructor_trap_if(ctx, v2, arg1);
        let v5 = &constructor_with_flags_side_effect(ctx, v1, v4);
        // Rule at src\isa\x64\inst.isle line 5144.
        return v5.clone();
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "trap_if_icmp", "src\\isa\\x64\\inst.isle line 5143")
}

// Generated as internal constructor for term trap_if_fcmp.
pub fn constructor_trap_if_fcmp<C: Context>(
    ctx: &mut C,
    arg0: &FcmpCondResult,
    arg1: &TrapCode,
) -> SideEffectNoResult {
    match arg0 {
        &FcmpCondResult::Condition {
            producer: ref v1,
            cc: ref v2,
        } => {
            let v4 = &constructor_trap_if(ctx, v2, arg1);
            let v5 = &constructor_with_flags_side_effect(ctx, v1, v4);
            // Rule at src\isa\x64\inst.isle line 5148.
            return v5.clone();
        }
        &FcmpCondResult::AndCondition {
            producer: ref v6,
            cc1: ref v7,
            cc2: ref v8,
        } => {
            let v9 = &constructor_trap_if_and(ctx, v7, v8, arg1);
            let v10 = &constructor_with_flags_side_effect(ctx, v6, v9);
            // Rule at src\isa\x64\inst.isle line 5150.
            return v10.clone();
        }
        &FcmpCondResult::OrCondition {
            producer: ref v11,
            cc1: ref v12,
            cc2: ref v13,
        } => {
            let v14 = &constructor_trap_if_or(ctx, v12, v13, arg1);
            let v15 = &constructor_with_flags_side_effect(ctx, v11, v14);
            // Rule at src\isa\x64\inst.isle line 5152.
            return v15.clone();
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "trap_if_fcmp", "src\\isa\\x64\\inst.isle line 5147")
}

// Generated as internal constructor for term zero_cond_to_cc.
pub fn constructor_zero_cond_to_cc<C: Context>(
    ctx: &mut C,
    arg0: &ZeroCond,
) -> CC {
    match arg0 {
        &ZeroCond::Zero => {
            // Rule at src\isa\x64\inst.isle line 5162.
            return CC::Z;
        }
        &ZeroCond::NonZero => {
            // Rule at src\isa\x64\inst.isle line 5163.
            return CC::NZ;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "zero_cond_to_cc", "src\\isa\\x64\\inst.isle line 5161")
}

// Generated as internal constructor for term trap_if_val.
pub fn constructor_trap_if_val<C: Context>(
    ctx: &mut C,
    arg0: &ZeroCond,
    arg1: Value,
    arg2: &TrapCode,
) -> SideEffectNoResult {
    let v2 = C::value_type(ctx, arg1);
    if v2 == I128 {
        let v14 = C::put_in_regs(ctx, arg1);
        let v16 = constructor_value_regs_get_gpr(ctx, v14, 0x0_usize);
        let v17 = C::put_in_regs(ctx, arg1);
        let v19 = constructor_value_regs_get_gpr(ctx, v17, 0x1_usize);
        let v21 = &C::gpr_to_gpr_mem_imm(ctx, v16);
        let v22 = constructor_x64_or(ctx, I64, v19, v21);
        let v24 = &C::gpr_to_gpr_mem_imm(ctx, v22);
        let v25 = &constructor_x64_test(ctx, &OperandSize::Size64, v22, v24);
        let v26 = &constructor_zero_cond_to_cc(ctx, arg0);
        let v27 = &constructor_trap_if(ctx, v26, arg2);
        let v28 = &constructor_with_flags_side_effect(ctx, v25, v27);
        // Rule at src\isa\x64\inst.isle line 5172.
        return v28.clone();
    }
    let v3 = C::fits_in_64(ctx, v2);
    if let Some(v4) = v3 {
        let v6 = &C::raw_operand_size_of_type(ctx, v4);
        let v7 = C::put_in_reg(ctx, arg1);
        let v8 = C::gpr_new(ctx, v7);
        let v9 = &C::gpr_to_gpr_mem_imm(ctx, v8);
        let v10 = &constructor_x64_test(ctx, v6, v8, v9);
        let v11 = &constructor_zero_cond_to_cc(ctx, arg0);
        let v12 = &constructor_trap_if(ctx, v11, arg2);
        let v13 = &constructor_with_flags_side_effect(ctx, v10, v12);
        // Rule at src\isa\x64\inst.isle line 5166.
        return v13.clone();
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "trap_if_val", "src\\isa\\x64\\inst.isle line 5165")
}

// Generated as internal constructor for term x64_movddup.
pub fn constructor_x64_movddup<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
) -> Xmm {
    let v3 = C::use_avx(ctx);
    if v3 == true {
        let v5 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vmovddup, arg0);
        // Rule at src\isa\x64\inst.isle line 5183.
        return v5;
    }
    let v2 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Movddup, arg0);
    // Rule at src\isa\x64\inst.isle line 5181.
    return v2;
}

// Generated as internal constructor for term x64_vpbroadcastb.
pub fn constructor_x64_vpbroadcastb<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpbroadcastb, arg0);
    // Rule at src\isa\x64\inst.isle line 5189.
    return v2;
}

// Generated as internal constructor for term x64_vpbroadcastw.
pub fn constructor_x64_vpbroadcastw<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpbroadcastw, arg0);
    // Rule at src\isa\x64\inst.isle line 5194.
    return v2;
}

// Generated as internal constructor for term x64_vpbroadcastd.
pub fn constructor_x64_vpbroadcastd<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpbroadcastd, arg0);
    // Rule at src\isa\x64\inst.isle line 5199.
    return v2;
}

// Generated as internal constructor for term x64_vbroadcastss.
pub fn constructor_x64_vbroadcastss<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vbroadcastss, arg0);
    // Rule at src\isa\x64\inst.isle line 5204.
    return v2;
}

// Generated as internal constructor for term jmp_known.
pub fn constructor_jmp_known<C: Context>(
    ctx: &mut C,
    arg0: MachLabel,
) -> SideEffectNoResult {
    let v1 = MInst::JmpKnown {
        dst: arg0,
    };
    let v2 = SideEffectNoResult::Inst {
        inst: v1,
    };
    // Rule at src\isa\x64\inst.isle line 5211.
    return v2;
}

// Generated as internal constructor for term jmp_cond.
pub fn constructor_jmp_cond<C: Context>(
    ctx: &mut C,
    arg0: &CC,
    arg1: MachLabel,
    arg2: MachLabel,
) -> ConsumesFlags {
    let v3 = MInst::JmpCond {
        cc: arg0.clone(),
        taken: arg1,
        not_taken: arg2,
    };
    let v4 = ConsumesFlags::ConsumesFlagsSideEffect {
        inst: v3,
    };
    // Rule at src\isa\x64\inst.isle line 5216.
    return v4;
}

// Generated as internal constructor for term jmp_cond_or.
pub fn constructor_jmp_cond_or<C: Context>(
    ctx: &mut C,
    arg0: &CC,
    arg1: &CC,
    arg2: MachLabel,
    arg3: MachLabel,
) -> ConsumesFlags {
    let v4 = MInst::JmpCondOr {
        cc1: arg0.clone(),
        cc2: arg1.clone(),
        taken: arg2,
        not_taken: arg3,
    };
    let v5 = ConsumesFlags::ConsumesFlagsSideEffect {
        inst: v4,
    };
    // Rule at src\isa\x64\inst.isle line 5221.
    return v5;
}

// Generated as internal constructor for term jmp_cond_icmp.
pub fn constructor_jmp_cond_icmp<C: Context>(
    ctx: &mut C,
    arg0: &IcmpCondResult,
    arg1: MachLabel,
    arg2: MachLabel,
) -> SideEffectNoResult {
    if let &IcmpCondResult::Condition {
        producer: ref v1,
        cc: ref v2,
    } = arg0 {
        let v5 = &constructor_jmp_cond(ctx, v2, arg1, arg2);
        let v6 = &constructor_with_flags_side_effect(ctx, v1, v5);
        // Rule at src\isa\x64\inst.isle line 5226.
        return v6.clone();
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "jmp_cond_icmp", "src\\isa\\x64\\inst.isle line 5225")
}

// Generated as internal constructor for term jmp_cond_fcmp.
pub fn constructor_jmp_cond_fcmp<C: Context>(
    ctx: &mut C,
    arg0: &FcmpCondResult,
    arg1: MachLabel,
    arg2: MachLabel,
) -> SideEffectNoResult {
    match arg0 {
        &FcmpCondResult::Condition {
            producer: ref v1,
            cc: ref v2,
        } => {
            let v5 = &constructor_jmp_cond(ctx, v2, arg1, arg2);
            let v6 = &constructor_with_flags_side_effect(ctx, v1, v5);
            // Rule at src\isa\x64\inst.isle line 5231.
            return v6.clone();
        }
        &FcmpCondResult::AndCondition {
            producer: ref v7,
            cc1: ref v8,
            cc2: ref v9,
        } => {
            let v10 = &C::cc_invert(ctx, v8);
            let v11 = &C::cc_invert(ctx, v9);
            let v12 = &constructor_jmp_cond_or(ctx, v10, v11, arg2, arg1);
            let v13 = &constructor_with_flags_side_effect(ctx, v7, v12);
            // Rule at src\isa\x64\inst.isle line 5233.
            return v13.clone();
        }
        &FcmpCondResult::OrCondition {
            producer: ref v14,
            cc1: ref v15,
            cc2: ref v16,
        } => {
            let v17 = &constructor_jmp_cond_or(ctx, v15, v16, arg1, arg2);
            let v18 = &constructor_with_flags_side_effect(ctx, v14, v17);
            // Rule at src\isa\x64\inst.isle line 5238.
            return v18.clone();
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "jmp_cond_fcmp", "src\\isa\\x64\\inst.isle line 5230")
}

// Generated as internal constructor for term jmp_table_seq.
pub fn constructor_jmp_table_seq<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: MachLabel,
    arg3: &BoxVecMachLabel,
) -> SideEffectNoResult {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = C::temp_writable_gpr(ctx);
    let v6 = C::gpr_to_reg(ctx, arg1);
    let v7 = C::writable_gpr_to_reg(ctx, v4);
    let v8 = C::writable_gpr_to_reg(ctx, v5);
    let v9 = MInst::JmpTableSeq {
        idx: v6,
        tmp1: v7,
        tmp2: v8,
        default_target: arg2,
        targets: arg3.clone(),
    };
    let v10 = SideEffectNoResult::Inst {
        inst: v9,
    };
    // Rule at src\isa\x64\inst.isle line 5256.
    return v10;
}

// Generated as internal constructor for term icmp_cond_result.
pub fn constructor_icmp_cond_result<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &CC,
) -> IcmpCondResult {
    let v2 = IcmpCondResult::Condition {
        producer: arg0.clone(),
        cc: arg1.clone(),
    };
    // Rule at src\isa\x64\inst.isle line 5276.
    return v2;
}

// Generated as internal constructor for term invert_icmp_cond_result.
pub fn constructor_invert_icmp_cond_result<C: Context>(
    ctx: &mut C,
    arg0: &IcmpCondResult,
) -> IcmpCondResult {
    if let &IcmpCondResult::Condition {
        producer: ref v1,
        cc: ref v2,
    } = arg0 {
        let v3 = &C::cc_invert(ctx, v2);
        let v4 = &constructor_icmp_cond_result(ctx, v1, v3);
        // Rule at src\isa\x64\inst.isle line 5279.
        return v4.clone();
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "invert_icmp_cond_result", "src\\isa\\x64\\inst.isle line 5278")
}

// Generated as internal constructor for term lower_icmp_bool.
pub fn constructor_lower_icmp_bool<C: Context>(
    ctx: &mut C,
    arg0: &IcmpCondResult,
) -> ValueRegs {
    if let &IcmpCondResult::Condition {
        producer: ref v1,
        cc: ref v2,
    } = arg0 {
        let v3 = &constructor_x64_setcc(ctx, v2);
        let v4 = constructor_with_flags(ctx, v1, v3);
        // Rule at src\isa\x64\inst.isle line 5284.
        return v4;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "lower_icmp_bool", "src\\isa\\x64\\inst.isle line 5283")
}

// Generated as internal constructor for term select_icmp.
pub fn constructor_select_icmp<C: Context>(
    ctx: &mut C,
    arg0: &IcmpCondResult,
    arg1: Value,
    arg2: Value,
) -> ValueRegs {
    if let &IcmpCondResult::Condition {
        producer: ref v1,
        cc: ref v2,
    } = arg0 {
        let v4 = C::value_type(ctx, arg1);
        let v5 = &C::type_register_class(ctx, v4);
        if let Some(v6) = v5 {
            if let &RegisterClass::Gpr {
                single_register: v7,
            } = v6 {
                if v7 == true {
                    let v9 = constructor_put_in_gpr(ctx, arg1);
                    let v10 = &C::gpr_to_gpr_mem(ctx, v9);
                    let v11 = constructor_put_in_gpr(ctx, arg2);
                    let v12 = &constructor_cmove(ctx, v4, v2, v10, v11);
                    let v13 = constructor_with_flags(ctx, v1, v12);
                    // Rule at src\isa\x64\inst.isle line 5293.
                    return v13;
                }
            }
        }
        let v14 = &constructor_cmove_from_values(ctx, v4, v2, arg1, arg2);
        let v15 = constructor_with_flags(ctx, v1, v14);
        // Rule at src\isa\x64\inst.isle line 5297.
        return v15;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "select_icmp", "src\\isa\\x64\\inst.isle line 5288")
}

// Generated as internal constructor for term emit_cmp.
pub fn constructor_emit_cmp<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Value,
    arg2: Value,
) -> IcmpCondResult {
    let v2 = C::value_type(ctx, arg1);
    if v2 == I128 {
        let v44 = C::put_in_regs(ctx, arg1);
        let v46 = constructor_value_regs_get_gpr(ctx, v44, 0x0_usize);
        let v47 = C::put_in_regs(ctx, arg1);
        let v49 = constructor_value_regs_get_gpr(ctx, v47, 0x1_usize);
        let v50 = C::put_in_regs(ctx, arg2);
        let v51 = constructor_value_regs_get_gpr(ctx, v50, 0x0_usize);
        let v52 = C::put_in_regs(ctx, arg2);
        let v53 = constructor_value_regs_get_gpr(ctx, v52, 0x1_usize);
        let v54 = &C::intcc_to_cc(ctx, arg0);
        let v55 = &constructor_emit_cmp_i128(ctx, v54, v49, v46, v53, v51);
        // Rule at src\isa\x64\inst.isle line 5328.
        return v55.clone();
    }
    let v29 = C::def_inst(ctx, arg1);
    if let Some(v30) = v29 {
        let v31 = &C::inst_data_value(ctx, v30);
        if let &InstructionData::UnaryImm {
            opcode: ref v32,
            imm: v33,
        } = v31 {
            if let &Opcode::Iconst = v32 {
                let v34 = C::u64_from_imm64(ctx, v33);
                if v34 == 0x0_u64 {
                    let v35 = C::value_type(ctx, arg2);
                    let v36 = &C::raw_operand_size_of_type(ctx, v35);
                    let v37 = C::put_in_reg(ctx, arg2);
                    let v38 = C::gpr_new(ctx, v37);
                    let v39 = &C::gpr_to_gpr_mem_imm(ctx, v38);
                    let v40 = &constructor_x64_test(ctx, v36, v38, v39);
                    let v41 = &C::intcc_swap_args(ctx, arg0);
                    let v42 = &C::intcc_to_cc(ctx, v41);
                    let v43 = &constructor_icmp_cond_result(ctx, v40, v42);
                    // Rule at src\isa\x64\inst.isle line 5321.
                    return v43.clone();
                }
            }
        }
    }
    let v17 = C::def_inst(ctx, arg2);
    if let Some(v18) = v17 {
        let v19 = &C::inst_data_value(ctx, v18);
        if let &InstructionData::UnaryImm {
            opcode: ref v20,
            imm: v21,
        } = v19 {
            if let &Opcode::Iconst = v20 {
                let v22 = C::u64_from_imm64(ctx, v21);
                if v22 == 0x0_u64 {
                    let v4 = &C::raw_operand_size_of_type(ctx, v2);
                    let v23 = C::put_in_reg(ctx, arg1);
                    let v24 = C::gpr_new(ctx, v23);
                    let v25 = &C::gpr_to_gpr_mem_imm(ctx, v24);
                    let v26 = &constructor_x64_test(ctx, v4, v24, v25);
                    let v27 = &C::intcc_to_cc(ctx, arg0);
                    let v28 = &constructor_icmp_cond_result(ctx, v26, v27);
                    // Rule at src\isa\x64\inst.isle line 5316.
                    return v28.clone();
                }
            }
        }
    }
    let v10 = &C::simm32_from_value(ctx, arg1);
    if let Some(v11) = v10 {
        let v4 = &C::raw_operand_size_of_type(ctx, v2);
        let v12 = constructor_put_in_gpr(ctx, arg2);
        let v13 = &constructor_x64_cmp(ctx, v4, v12, v11);
        let v14 = &C::intcc_swap_args(ctx, arg0);
        let v15 = &C::intcc_to_cc(ctx, v14);
        let v16 = &constructor_icmp_cond_result(ctx, v13, v15);
        // Rule at src\isa\x64\inst.isle line 5311.
        return v16.clone();
    }
    let v4 = &C::raw_operand_size_of_type(ctx, v2);
    let v5 = constructor_put_in_gpr(ctx, arg1);
    let v6 = &constructor_put_in_gpr_mem_imm(ctx, arg2);
    let v7 = &constructor_x64_cmp(ctx, v4, v5, v6);
    let v8 = &C::intcc_to_cc(ctx, arg0);
    let v9 = &constructor_icmp_cond_result(ctx, v7, v8);
    // Rule at src\isa\x64\inst.isle line 5304.
    return v9.clone();
}

// Generated as internal constructor for term emit_cmp_i128.
pub fn constructor_emit_cmp_i128<C: Context>(
    ctx: &mut C,
    arg0: &CC,
    arg1: Gpr,
    arg2: Gpr,
    arg3: Gpr,
    arg4: Gpr,
) -> IcmpCondResult {
    match arg0 {
        &CC::BE => {
            let v12 = &constructor_emit_cmp_i128(ctx, &CC::NB, arg3, arg4, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 5343.
            return v12.clone();
        }
        &CC::NBE => {
            let v10 = &constructor_emit_cmp_i128(ctx, &CC::B, arg3, arg4, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 5341.
            return v10.clone();
        }
        &CC::LE => {
            let v8 = &constructor_emit_cmp_i128(ctx, &CC::NL, arg3, arg4, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 5339.
            return v8.clone();
        }
        &CC::NLE => {
            let v6 = &constructor_emit_cmp_i128(ctx, &CC::L, arg3, arg4, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 5337.
            return v6.clone();
        }
        _ => {}
    }
    let v13 = &C::cc_nz_or_z(ctx, arg0);
    if let Some(v14) = v13 {
        let v16 = &C::gpr_to_gpr_mem_imm(ctx, arg4);
        let v17 = constructor_x64_xor(ctx, I64, arg2, v16);
        let v18 = C::gpr_to_reg(ctx, v17);
        let v19 = &C::gpr_to_gpr_mem_imm(ctx, arg3);
        let v20 = constructor_x64_xor(ctx, I64, arg1, v19);
        let v21 = C::gpr_to_reg(ctx, v20);
        let v23 = C::gpr_new(ctx, v18);
        let v24 = &constructor_reg_to_gpr_mem_imm(ctx, v21);
        let v25 = &constructor_x64_produce_flags_side_effect(ctx, &ProduceFlagsSideEffectOp::Or, I64, v23, v24);
        let v26 = &constructor_icmp_cond_result(ctx, v25, v14);
        // Rule at src\isa\x64\inst.isle line 5348.
        return v26.clone();
    }
    let v16 = &C::gpr_to_gpr_mem_imm(ctx, arg4);
    let v28 = &constructor_x64_cmp(ctx, &OperandSize::Size64, arg2, v16);
    let v30 = &C::gpr_to_gpr_mem_imm(ctx, arg3);
    let v31 = &constructor_x64_produce_flags_side_effect(ctx, &ProduceFlagsSideEffectOp::Sbb, I64, arg1, v30);
    let v32 = &constructor_produces_flags_concat(ctx, v28, v31);
    let v33 = &constructor_icmp_cond_result(ctx, v32, arg0);
    // Rule at src\isa\x64\inst.isle line 5358.
    return v33.clone();
}

// Generated as internal constructor for term lower_fcmp_bool.
pub fn constructor_lower_fcmp_bool<C: Context>(
    ctx: &mut C,
    arg0: &FcmpCondResult,
) -> ValueRegs {
    match arg0 {
        &FcmpCondResult::Condition {
            producer: ref v1,
            cc: ref v2,
        } => {
            let v3 = &constructor_x64_setcc(ctx, v2);
            let v4 = constructor_with_flags(ctx, v1, v3);
            // Rule at src\isa\x64\inst.isle line 5379.
            return v4;
        }
        &FcmpCondResult::AndCondition {
            producer: ref v5,
            cc1: ref v6,
            cc2: ref v7,
        } => {
            let v8 = &constructor_x64_setcc(ctx, v6);
            let v9 = &constructor_x64_setcc(ctx, v7);
            let v10 = &constructor_consumes_flags_concat(ctx, v8, v9);
            let v11 = constructor_with_flags(ctx, v5, v10);
            let v13 = constructor_value_regs_get_gpr(ctx, v11, 0x0_usize);
            let v15 = constructor_value_regs_get_gpr(ctx, v11, 0x1_usize);
            let v17 = &C::gpr_to_gpr_mem_imm(ctx, v15);
            let v18 = constructor_x64_and(ctx, I8, v13, v17);
            let v19 = C::gpr_to_reg(ctx, v18);
            let v20 = C::value_reg(ctx, v19);
            // Rule at src\isa\x64\inst.isle line 5382.
            return v20;
        }
        &FcmpCondResult::OrCondition {
            producer: ref v21,
            cc1: ref v22,
            cc2: ref v23,
        } => {
            let v24 = &constructor_x64_setcc(ctx, v22);
            let v25 = &constructor_x64_setcc(ctx, v23);
            let v26 = &constructor_consumes_flags_concat(ctx, v24, v25);
            let v27 = constructor_with_flags(ctx, v21, v26);
            let v28 = constructor_value_regs_get_gpr(ctx, v27, 0x0_usize);
            let v29 = constructor_value_regs_get_gpr(ctx, v27, 0x1_usize);
            let v30 = &C::gpr_to_gpr_mem_imm(ctx, v29);
            let v31 = constructor_x64_or(ctx, I8, v28, v30);
            let v32 = C::gpr_to_reg(ctx, v31);
            let v33 = C::value_reg(ctx, v32);
            // Rule at src\isa\x64\inst.isle line 5391.
            return v33;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "lower_fcmp_bool", "src\\isa\\x64\\inst.isle line 5377")
}

// Generated as internal constructor for term emit_fcmp.
pub fn constructor_emit_fcmp<C: Context>(
    ctx: &mut C,
    arg0: &FloatCC,
    arg1: Value,
    arg2: Value,
) -> FcmpCondResult {
    match arg0 {
        &FloatCC::Equal => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = constructor_put_in_xmm(ctx, arg1);
                let v7 = &C::put_in_xmm_mem(ctx, arg2);
                let v8 = &constructor_x64_ucomis(ctx, v4, v6, v7);
                let v11 = FcmpCondResult::AndCondition {
                    producer: v8.clone(),
                    cc1: CC::NP,
                    cc2: CC::Z,
                };
                // Rule at src\isa\x64\inst.isle line 5418.
                return v11;
            }
        }
        &FloatCC::GreaterThan => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = constructor_put_in_xmm(ctx, arg1);
                let v7 = &C::put_in_xmm_mem(ctx, arg2);
                let v8 = &constructor_x64_ucomis(ctx, v4, v6, v7);
                let v20 = FcmpCondResult::Condition {
                    producer: v8.clone(),
                    cc: CC::NBE,
                };
                // Rule at src\isa\x64\inst.isle line 5434.
                return v20;
            }
        }
        &FloatCC::GreaterThanOrEqual => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = constructor_put_in_xmm(ctx, arg1);
                let v7 = &C::put_in_xmm_mem(ctx, arg2);
                let v8 = &constructor_x64_ucomis(ctx, v4, v6, v7);
                let v22 = FcmpCondResult::Condition {
                    producer: v8.clone(),
                    cc: CC::NB,
                };
                // Rule at src\isa\x64\inst.isle line 5436.
                return v22;
            }
        }
        &FloatCC::LessThan => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v27 = constructor_put_in_xmm(ctx, arg2);
                let v28 = &C::put_in_xmm_mem(ctx, arg1);
                let v29 = &constructor_x64_ucomis(ctx, v4, v27, v28);
                let v30 = FcmpCondResult::Condition {
                    producer: v29.clone(),
                    cc: CC::NBE,
                };
                // Rule at src\isa\x64\inst.isle line 5446.
                return v30;
            }
        }
        &FloatCC::LessThanOrEqual => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v27 = constructor_put_in_xmm(ctx, arg2);
                let v28 = &C::put_in_xmm_mem(ctx, arg1);
                let v29 = &constructor_x64_ucomis(ctx, v4, v27, v28);
                let v31 = FcmpCondResult::Condition {
                    producer: v29.clone(),
                    cc: CC::NB,
                };
                // Rule at src\isa\x64\inst.isle line 5449.
                return v31;
            }
        }
        &FloatCC::NotEqual => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = constructor_put_in_xmm(ctx, arg1);
                let v7 = &C::put_in_xmm_mem(ctx, arg2);
                let v8 = &constructor_x64_ucomis(ctx, v4, v6, v7);
                let v14 = FcmpCondResult::OrCondition {
                    producer: v8.clone(),
                    cc1: CC::P,
                    cc2: CC::NZ,
                };
                // Rule at src\isa\x64\inst.isle line 5421.
                return v14;
            }
        }
        &FloatCC::Ordered => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = constructor_put_in_xmm(ctx, arg1);
                let v7 = &C::put_in_xmm_mem(ctx, arg2);
                let v8 = &constructor_x64_ucomis(ctx, v4, v6, v7);
                let v15 = FcmpCondResult::Condition {
                    producer: v8.clone(),
                    cc: CC::NP,
                };
                // Rule at src\isa\x64\inst.isle line 5426.
                return v15;
            }
        }
        &FloatCC::OrderedNotEqual => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = constructor_put_in_xmm(ctx, arg1);
                let v7 = &C::put_in_xmm_mem(ctx, arg2);
                let v8 = &constructor_x64_ucomis(ctx, v4, v6, v7);
                let v17 = FcmpCondResult::Condition {
                    producer: v8.clone(),
                    cc: CC::NZ,
                };
                // Rule at src\isa\x64\inst.isle line 5430.
                return v17;
            }
        }
        &FloatCC::Unordered => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = constructor_put_in_xmm(ctx, arg1);
                let v7 = &C::put_in_xmm_mem(ctx, arg2);
                let v8 = &constructor_x64_ucomis(ctx, v4, v6, v7);
                let v16 = FcmpCondResult::Condition {
                    producer: v8.clone(),
                    cc: CC::P,
                };
                // Rule at src\isa\x64\inst.isle line 5428.
                return v16;
            }
        }
        &FloatCC::UnorderedOrEqual => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = constructor_put_in_xmm(ctx, arg1);
                let v7 = &C::put_in_xmm_mem(ctx, arg2);
                let v8 = &constructor_x64_ucomis(ctx, v4, v6, v7);
                let v18 = FcmpCondResult::Condition {
                    producer: v8.clone(),
                    cc: CC::Z,
                };
                // Rule at src\isa\x64\inst.isle line 5432.
                return v18;
            }
        }
        &FloatCC::UnorderedOrGreaterThan => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v27 = constructor_put_in_xmm(ctx, arg2);
                let v28 = &C::put_in_xmm_mem(ctx, arg1);
                let v29 = &constructor_x64_ucomis(ctx, v4, v27, v28);
                let v32 = FcmpCondResult::Condition {
                    producer: v29.clone(),
                    cc: CC::B,
                };
                // Rule at src\isa\x64\inst.isle line 5452.
                return v32;
            }
        }
        &FloatCC::UnorderedOrGreaterThanOrEqual => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v27 = constructor_put_in_xmm(ctx, arg2);
                let v28 = &C::put_in_xmm_mem(ctx, arg1);
                let v29 = &constructor_x64_ucomis(ctx, v4, v27, v28);
                let v33 = FcmpCondResult::Condition {
                    producer: v29.clone(),
                    cc: CC::BE,
                };
                // Rule at src\isa\x64\inst.isle line 5455.
                return v33;
            }
        }
        &FloatCC::UnorderedOrLessThan => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = constructor_put_in_xmm(ctx, arg1);
                let v7 = &C::put_in_xmm_mem(ctx, arg2);
                let v8 = &constructor_x64_ucomis(ctx, v4, v6, v7);
                let v24 = FcmpCondResult::Condition {
                    producer: v8.clone(),
                    cc: CC::B,
                };
                // Rule at src\isa\x64\inst.isle line 5438.
                return v24;
            }
        }
        &FloatCC::UnorderedOrLessThanOrEqual => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = constructor_put_in_xmm(ctx, arg1);
                let v7 = &C::put_in_xmm_mem(ctx, arg2);
                let v8 = &constructor_x64_ucomis(ctx, v4, v6, v7);
                let v26 = FcmpCondResult::Condition {
                    producer: v8.clone(),
                    cc: CC::BE,
                };
                // Rule at src\isa\x64\inst.isle line 5440.
                return v26;
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "emit_fcmp", "src\\isa\\x64\\inst.isle line 5416")
}

// Generated as internal constructor for term x64_mfence.
pub fn constructor_x64_mfence<C: Context>(
    ctx: &mut C,
) -> SideEffectNoResult {
    let v1 = MInst::Fence {
        kind: FenceKind::MFence,
    };
    let v2 = SideEffectNoResult::Inst {
        inst: v1,
    };
    // Rule at src\isa\x64\inst.isle line 5468.
    return v2;
}

// Generated as internal constructor for term x64_cmpxchg.
pub fn constructor_x64_cmpxchg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: Gpr,
    arg3: &SyntheticAmode,
) -> Gpr {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = C::gpr_to_reg(ctx, arg2);
    let v6 = C::gpr_to_reg(ctx, arg1);
    let v7 = C::writable_gpr_to_reg(ctx, v4);
    let v8 = MInst::LockCmpxchg {
        ty: arg0,
        replacement: v5,
        expected: v6,
        mem: arg3.clone(),
        dst_old: v7,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_gpr_to_gpr(ctx, v4);
    // Rule at src\isa\x64\inst.isle line 5472.
    return v10;
}

// Generated as internal constructor for term x64_cmpxchg16b.
pub fn constructor_x64_cmpxchg16b<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: ValueRegs,
    arg2: &SyntheticAmode,
) -> ValueRegs {
    let v4 = constructor_value_regs_get_gpr(ctx, arg0, 0x0_usize);
    let v6 = constructor_value_regs_get_gpr(ctx, arg0, 0x1_usize);
    let v7 = constructor_value_regs_get_gpr(ctx, arg1, 0x0_usize);
    let v8 = constructor_value_regs_get_gpr(ctx, arg1, 0x1_usize);
    let v9 = C::temp_writable_gpr(ctx);
    let v10 = C::temp_writable_gpr(ctx);
    let v11 = C::gpr_to_reg(ctx, v7);
    let v12 = C::gpr_to_reg(ctx, v8);
    let v13 = C::gpr_to_reg(ctx, v4);
    let v14 = C::gpr_to_reg(ctx, v6);
    let v16 = C::writable_gpr_to_reg(ctx, v9);
    let v17 = C::writable_gpr_to_reg(ctx, v10);
    let v15 = &C::box_synthetic_amode(ctx, arg2);
    let v18 = MInst::LockCmpxchg16b {
        replacement_low: v11,
        replacement_high: v12,
        expected_low: v13,
        expected_high: v14,
        mem: v15.clone(),
        dst_old_low: v16,
        dst_old_high: v17,
    };
    let v19 = C::emit(ctx, &v18);
    let v20 = constructor_writable_gpr_to_r_reg(ctx, v9);
    let v21 = constructor_writable_gpr_to_r_reg(ctx, v10);
    let v22 = C::value_regs(ctx, v20, v21);
    // Rule at src\isa\x64\inst.isle line 5478.
    return v22;
}

// Generated as internal constructor for term x64_xadd.
pub fn constructor_x64_xadd<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: &SyntheticAmode,
    arg2: Gpr,
) -> Gpr {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = C::gpr_to_reg(ctx, arg2);
    let v5 = C::writable_gpr_to_reg(ctx, v3);
    let v6 = MInst::LockXadd {
        size: arg0.clone(),
        operand: v4,
        mem: arg1.clone(),
        dst_old: v5,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_gpr_to_gpr(ctx, v3);
    // Rule at src\isa\x64\inst.isle line 5489.
    return v8;
}

// Generated as internal constructor for term x64_xchg.
pub fn constructor_x64_xchg<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: &SyntheticAmode,
    arg2: Gpr,
) -> Gpr {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = C::gpr_to_reg(ctx, arg2);
    let v5 = C::writable_gpr_to_reg(ctx, v3);
    let v6 = MInst::Xchg {
        size: arg0.clone(),
        operand: v4,
        mem: arg1.clone(),
        dst_old: v5,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_gpr_to_gpr(ctx, v3);
    // Rule at src\isa\x64\inst.isle line 5495.
    return v8;
}

// Generated as internal constructor for term x64_lock_add.
pub fn constructor_x64_lock_add<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: &Amode,
    arg2: Gpr,
) -> SideEffectNoResult {
    match arg0 {
        &OperandSize::Size8 => {
            let v3 = &constructor_x64_lock_addb_mr_mem(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 5501.
            return v3.clone();
        }
        &OperandSize::Size16 => {
            let v4 = &constructor_x64_lock_addw_mr_mem(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 5502.
            return v4.clone();
        }
        &OperandSize::Size32 => {
            let v5 = &constructor_x64_lock_addl_mr_mem(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 5503.
            return v5.clone();
        }
        &OperandSize::Size64 => {
            let v6 = &constructor_x64_lock_addq_mr_mem(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 5504.
            return v6.clone();
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_lock_add", "src\\isa\\x64\\inst.isle line 5500")
}

// Generated as internal constructor for term x64_lock_sub.
pub fn constructor_x64_lock_sub<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: &Amode,
    arg2: Gpr,
) -> SideEffectNoResult {
    match arg0 {
        &OperandSize::Size8 => {
            let v3 = &constructor_x64_lock_subb_mr_mem(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 5507.
            return v3.clone();
        }
        &OperandSize::Size16 => {
            let v4 = &constructor_x64_lock_subw_mr_mem(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 5508.
            return v4.clone();
        }
        &OperandSize::Size32 => {
            let v5 = &constructor_x64_lock_subl_mr_mem(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 5509.
            return v5.clone();
        }
        &OperandSize::Size64 => {
            let v6 = &constructor_x64_lock_subq_mr_mem(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 5510.
            return v6.clone();
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_lock_sub", "src\\isa\\x64\\inst.isle line 5506")
}

// Generated as internal constructor for term x64_lock_and.
pub fn constructor_x64_lock_and<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: &Amode,
    arg2: Gpr,
) -> SideEffectNoResult {
    match arg0 {
        &OperandSize::Size8 => {
            let v3 = &constructor_x64_lock_andb_mr_mem(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 5513.
            return v3.clone();
        }
        &OperandSize::Size16 => {
            let v4 = &constructor_x64_lock_andw_mr_mem(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 5514.
            return v4.clone();
        }
        &OperandSize::Size32 => {
            let v5 = &constructor_x64_lock_andl_mr_mem(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 5515.
            return v5.clone();
        }
        &OperandSize::Size64 => {
            let v6 = &constructor_x64_lock_andq_mr_mem(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 5516.
            return v6.clone();
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_lock_and", "src\\isa\\x64\\inst.isle line 5512")
}

// Generated as internal constructor for term x64_lock_or.
pub fn constructor_x64_lock_or<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: &Amode,
    arg2: Gpr,
) -> SideEffectNoResult {
    match arg0 {
        &OperandSize::Size8 => {
            let v3 = &constructor_x64_lock_orb_mr_mem(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 5519.
            return v3.clone();
        }
        &OperandSize::Size16 => {
            let v4 = &constructor_x64_lock_orw_mr_mem(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 5520.
            return v4.clone();
        }
        &OperandSize::Size32 => {
            let v5 = &constructor_x64_lock_orl_mr_mem(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 5521.
            return v5.clone();
        }
        &OperandSize::Size64 => {
            let v6 = &constructor_x64_lock_orq_mr_mem(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 5522.
            return v6.clone();
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_lock_or", "src\\isa\\x64\\inst.isle line 5518")
}

// Generated as internal constructor for term x64_lock_xor.
pub fn constructor_x64_lock_xor<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: &Amode,
    arg2: Gpr,
) -> SideEffectNoResult {
    match arg0 {
        &OperandSize::Size8 => {
            let v3 = &constructor_x64_lock_xorb_mr_mem(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 5525.
            return v3.clone();
        }
        &OperandSize::Size16 => {
            let v4 = &constructor_x64_lock_xorw_mr_mem(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 5526.
            return v4.clone();
        }
        &OperandSize::Size32 => {
            let v5 = &constructor_x64_lock_xorl_mr_mem(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 5527.
            return v5.clone();
        }
        &OperandSize::Size64 => {
            let v6 = &constructor_x64_lock_xorq_mr_mem(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 5528.
            return v6.clone();
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_lock_xor", "src\\isa\\x64\\inst.isle line 5524")
}

// Generated as internal constructor for term x64_atomic_rmw_seq.
pub fn constructor_x64_atomic_rmw_seq<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &AtomicRmwSeqOp,
    arg2: &SyntheticAmode,
    arg3: Gpr,
) -> Gpr {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = C::temp_writable_gpr(ctx);
    let v6 = C::gpr_to_reg(ctx, arg3);
    let v7 = C::writable_gpr_to_reg(ctx, v5);
    let v8 = C::writable_gpr_to_reg(ctx, v4);
    let v9 = MInst::AtomicRmwSeq {
        ty: arg0,
        op: arg1.clone(),
        mem: arg2.clone(),
        operand: v6,
        temp: v7,
        dst_old: v8,
    };
    let v10 = C::emit(ctx, &v9);
    let v11 = C::writable_gpr_to_gpr(ctx, v4);
    // Rule at src\isa\x64\inst.isle line 5531.
    return v11;
}

// Generated as internal constructor for term x64_atomic_128_rmw_seq.
pub fn constructor_x64_atomic_128_rmw_seq<C: Context>(
    ctx: &mut C,
    arg0: &AtomicRmwOp,
    arg1: &SyntheticAmode,
    arg2: ValueRegs,
) -> ValueRegs {
    if let &AtomicRmwOp::Xchg = arg0 {
        let v3 = C::temp_writable_gpr(ctx);
        let v4 = C::temp_writable_gpr(ctx);
        let v24 = constructor_value_regs_get_gpr(ctx, arg2, 0x0_usize);
        let v25 = constructor_value_regs_get_gpr(ctx, arg2, 0x1_usize);
        let v26 = C::gpr_to_reg(ctx, v24);
        let v27 = C::gpr_to_reg(ctx, v25);
        let v28 = C::writable_gpr_to_reg(ctx, v3);
        let v29 = C::writable_gpr_to_reg(ctx, v4);
        let v30 = MInst::Atomic128XchgSeq {
            mem: arg1.clone(),
            operand_low: v26,
            operand_high: v27,
            dst_old_low: v28,
            dst_old_high: v29,
        };
        let v31 = C::emit(ctx, &v30);
        let v32 = constructor_writable_gpr_to_r_reg(ctx, v3);
        let v33 = constructor_writable_gpr_to_r_reg(ctx, v4);
        let v34 = C::value_regs(ctx, v32, v33);
        // Rule at src\isa\x64\inst.isle line 5548.
        return v34;
    }
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = C::temp_writable_gpr(ctx);
    let v6 = C::temp_writable_gpr(ctx);
    let v8 = constructor_value_regs_get_gpr(ctx, arg2, 0x0_usize);
    let v10 = constructor_value_regs_get_gpr(ctx, arg2, 0x1_usize);
    let v11 = &constructor_atomic_128_rmw_seq_op(ctx, arg0);
    let v13 = C::gpr_to_reg(ctx, v8);
    let v14 = C::gpr_to_reg(ctx, v10);
    let v15 = C::writable_gpr_to_reg(ctx, v5);
    let v16 = C::writable_gpr_to_reg(ctx, v6);
    let v17 = C::writable_gpr_to_reg(ctx, v3);
    let v18 = C::writable_gpr_to_reg(ctx, v4);
    let v12 = &C::box_synthetic_amode(ctx, arg1);
    let v19 = MInst::Atomic128RmwSeq {
        op: v11.clone(),
        mem: v12.clone(),
        operand_low: v13,
        operand_high: v14,
        temp_low: v15,
        temp_high: v16,
        dst_old_low: v17,
        dst_old_high: v18,
    };
    let v20 = C::emit(ctx, &v19);
    let v21 = constructor_writable_gpr_to_r_reg(ctx, v3);
    let v22 = constructor_writable_gpr_to_r_reg(ctx, v4);
    let v23 = C::value_regs(ctx, v21, v22);
    // Rule at src\isa\x64\inst.isle line 5538.
    return v23;
}

// Generated as internal constructor for term x64_atomic_128_store_seq.
pub fn constructor_x64_atomic_128_store_seq<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
    arg1: ValueRegs,
) -> SideEffectNoResult {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = C::temp_writable_gpr(ctx);
    let v5 = constructor_value_regs_get_gpr(ctx, arg1, 0x0_usize);
    let v7 = constructor_value_regs_get_gpr(ctx, arg1, 0x1_usize);
    let v8 = C::gpr_to_reg(ctx, v5);
    let v9 = C::gpr_to_reg(ctx, v7);
    let v10 = C::writable_gpr_to_reg(ctx, v2);
    let v11 = C::writable_gpr_to_reg(ctx, v3);
    let v12 = MInst::Atomic128XchgSeq {
        mem: arg0.clone(),
        operand_low: v8,
        operand_high: v9,
        dst_old_low: v10,
        dst_old_high: v11,
    };
    let v13 = SideEffectNoResult::Inst {
        inst: v12,
    };
    // Rule at src\isa\x64\inst.isle line 5557.
    return v13;
}

// Generated as internal constructor for term atomic_rmw_seq_op.
pub fn constructor_atomic_rmw_seq_op<C: Context>(
    ctx: &mut C,
    arg0: &AtomicRmwOp,
) -> AtomicRmwSeqOp {
    match arg0 {
        &AtomicRmwOp::And => {
            // Rule at src\isa\x64\inst.isle line 5576.
            return AtomicRmwSeqOp::And;
        }
        &AtomicRmwOp::Nand => {
            // Rule at src\isa\x64\inst.isle line 5577.
            return AtomicRmwSeqOp::Nand;
        }
        &AtomicRmwOp::Or => {
            // Rule at src\isa\x64\inst.isle line 5578.
            return AtomicRmwSeqOp::Or;
        }
        &AtomicRmwOp::Smax => {
            // Rule at src\isa\x64\inst.isle line 5583.
            return AtomicRmwSeqOp::Smax;
        }
        &AtomicRmwOp::Smin => {
            // Rule at src\isa\x64\inst.isle line 5582.
            return AtomicRmwSeqOp::Smin;
        }
        &AtomicRmwOp::Umax => {
            // Rule at src\isa\x64\inst.isle line 5581.
            return AtomicRmwSeqOp::Umax;
        }
        &AtomicRmwOp::Umin => {
            // Rule at src\isa\x64\inst.isle line 5580.
            return AtomicRmwSeqOp::Umin;
        }
        &AtomicRmwOp::Xor => {
            // Rule at src\isa\x64\inst.isle line 5579.
            return AtomicRmwSeqOp::Xor;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "atomic_rmw_seq_op", "src\\isa\\x64\\inst.isle line 5575")
}

// Generated as internal constructor for term atomic_128_rmw_seq_op.
pub fn constructor_atomic_128_rmw_seq_op<C: Context>(
    ctx: &mut C,
    arg0: &AtomicRmwOp,
) -> Atomic128RmwSeqOp {
    match arg0 {
        &AtomicRmwOp::Add => {
            // Rule at src\isa\x64\inst.isle line 5598.
            return Atomic128RmwSeqOp::Add;
        }
        &AtomicRmwOp::And => {
            // Rule at src\isa\x64\inst.isle line 5600.
            return Atomic128RmwSeqOp::And;
        }
        &AtomicRmwOp::Nand => {
            // Rule at src\isa\x64\inst.isle line 5601.
            return Atomic128RmwSeqOp::Nand;
        }
        &AtomicRmwOp::Or => {
            // Rule at src\isa\x64\inst.isle line 5602.
            return Atomic128RmwSeqOp::Or;
        }
        &AtomicRmwOp::Smax => {
            // Rule at src\isa\x64\inst.isle line 5607.
            return Atomic128RmwSeqOp::Smax;
        }
        &AtomicRmwOp::Smin => {
            // Rule at src\isa\x64\inst.isle line 5606.
            return Atomic128RmwSeqOp::Smin;
        }
        &AtomicRmwOp::Sub => {
            // Rule at src\isa\x64\inst.isle line 5599.
            return Atomic128RmwSeqOp::Sub;
        }
        &AtomicRmwOp::Umax => {
            // Rule at src\isa\x64\inst.isle line 5605.
            return Atomic128RmwSeqOp::Umax;
        }
        &AtomicRmwOp::Umin => {
            // Rule at src\isa\x64\inst.isle line 5604.
            return Atomic128RmwSeqOp::Umin;
        }
        &AtomicRmwOp::Xor => {
            // Rule at src\isa\x64\inst.isle line 5603.
            return Atomic128RmwSeqOp::Xor;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "atomic_128_rmw_seq_op", "src\\isa\\x64\\inst.isle line 5597")
}

// Generated as internal constructor for term bitcast_xmm_to_gpr.
pub fn constructor_bitcast_xmm_to_gpr<C: Context>(
    ctx: &mut C,
    arg0: u8,
    arg1: Xmm,
) -> Gpr {
    match arg0 {
        0x10_u8 => {
            let v3 = constructor_x64_pextrw(ctx, arg1, 0x0_u8);
            // Rule at src\isa\x64\inst.isle line 5612.
            return v3;
        }
        0x20_u8 => {
            let v4 = constructor_x64_movd_to_gpr(ctx, arg1);
            // Rule at src\isa\x64\inst.isle line 5614.
            return v4;
        }
        0x40_u8 => {
            let v5 = constructor_x64_movq_to_gpr(ctx, arg1);
            // Rule at src\isa\x64\inst.isle line 5616.
            return v5;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "bitcast_xmm_to_gpr", "src\\isa\\x64\\inst.isle line 5611")
}

// Generated as internal constructor for term bitcast_xmm_to_gprs.
pub fn constructor_bitcast_xmm_to_gprs<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
) -> ValueRegs {
    let v1 = constructor_x64_movq_to_gpr(ctx, arg0);
    let v2 = C::gpr_to_reg(ctx, v1);
    let v3 = &C::xmm_to_xmm_mem(ctx, arg0);
    let v5 = constructor_x64_pshufd(ctx, v3, 0xee_u8);
    let v6 = constructor_x64_movq_to_gpr(ctx, v5);
    let v7 = C::gpr_to_reg(ctx, v6);
    let v8 = C::value_regs(ctx, v2, v7);
    // Rule at src\isa\x64\inst.isle line 5620.
    return v8;
}

// Generated as internal constructor for term bitcast_gpr_to_xmm.
pub fn constructor_bitcast_gpr_to_xmm<C: Context>(
    ctx: &mut C,
    arg0: u8,
    arg1: Gpr,
) -> Xmm {
    match arg0 {
        0x10_u8 => {
            let v2 = constructor_xmm_uninit_value(ctx);
            let v3 = &C::gpr_to_gpr_mem(ctx, arg1);
            let v5 = constructor_x64_pinsrw(ctx, v2, v3, 0x0_u8);
            // Rule at src\isa\x64\inst.isle line 5624.
            return v5;
        }
        0x20_u8 => {
            let v6 = &C::gpr_to_gpr_mem(ctx, arg1);
            let v7 = constructor_x64_movd_to_xmm(ctx, v6);
            // Rule at src\isa\x64\inst.isle line 5626.
            return v7;
        }
        0x40_u8 => {
            let v6 = &C::gpr_to_gpr_mem(ctx, arg1);
            let v8 = constructor_x64_movq_to_xmm(ctx, v6);
            // Rule at src\isa\x64\inst.isle line 5628.
            return v8;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "bitcast_gpr_to_xmm", "src\\isa\\x64\\inst.isle line 5623")
}

// Generated as internal constructor for term bitcast_gprs_to_xmm.
pub fn constructor_bitcast_gprs_to_xmm<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
) -> Xmm {
    let v2 = constructor_value_regs_get_gpr(ctx, arg0, 0x0_usize);
    let v3 = &C::gpr_to_gpr_mem(ctx, v2);
    let v4 = constructor_x64_movq_to_xmm(ctx, v3);
    let v6 = constructor_value_regs_get_gpr(ctx, arg0, 0x1_usize);
    let v7 = &C::gpr_to_gpr_mem(ctx, v6);
    let v8 = constructor_x64_movq_to_xmm(ctx, v7);
    let v9 = &C::xmm_to_xmm_mem(ctx, v8);
    let v10 = constructor_x64_punpcklqdq(ctx, v4, v9);
    // Rule at src\isa\x64\inst.isle line 5632.
    return v10;
}

// Generated as internal constructor for term stack_addr_impl.
pub fn constructor_stack_addr_impl<C: Context>(
    ctx: &mut C,
    arg0: StackSlot,
    arg1: Offset32,
) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = C::writable_gpr_to_reg(ctx, v2);
    let v4 = &C::abi_stackslot_addr(ctx, v3, arg0, arg1);
    let v5 = C::emit(ctx, v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src\isa\x64\inst.isle line 5638.
    return v6;
}

// Generated as internal constructor for term x64_checked_srem_seq.
pub fn constructor_x64_checked_srem_seq<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Gpr,
    arg2: Gpr,
    arg3: Gpr,
) -> ValueRegs {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = C::temp_writable_gpr(ctx);
    let v6 = MInst::CheckedSRemSeq {
        size: arg0.clone(),
        dividend_lo: arg1,
        dividend_hi: arg2,
        divisor: arg3,
        dst_quotient: v4,
        dst_remainder: v5,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = constructor_writable_gpr_to_r_reg(ctx, v4);
    let v9 = constructor_writable_gpr_to_r_reg(ctx, v5);
    let v10 = C::value_regs(ctx, v8, v9);
    // Rule at src\isa\x64\inst.isle line 5647.
    return v10;
}

// Generated as internal constructor for term x64_checked_srem_seq8.
pub fn constructor_x64_checked_srem_seq8<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = MInst::CheckedSRemSeq8 {
        dividend: arg0,
        divisor: arg1,
        dst: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src\isa\x64\inst.isle line 5654.
    return v5;
}

// Generated as internal constructor for term x64_div8.
pub fn constructor_x64_div8<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
    arg2: &DivSignedness,
    arg3: &TrapCode,
) -> Gpr {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = MInst::Div8 {
        sign: arg2.clone(),
        trap: arg3.clone(),
        divisor: arg1.clone(),
        dividend: arg0,
        dst: v4,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_gpr_to_gpr(ctx, v4);
    // Rule at src\isa\x64\inst.isle line 5661.
    return v7;
}

// Generated as internal constructor for term x64_div.
pub fn constructor_x64_div<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
    arg2: &GprMem,
    arg3: &OperandSize,
    arg4: &DivSignedness,
    arg5: &TrapCode,
) -> ValueRegs {
    let v6 = C::temp_writable_gpr(ctx);
    let v7 = C::temp_writable_gpr(ctx);
    let v8 = MInst::Div {
        size: arg3.clone(),
        sign: arg4.clone(),
        trap: arg5.clone(),
        divisor: arg2.clone(),
        dividend_lo: arg0,
        dividend_hi: arg1,
        dst_quotient: v6,
        dst_remainder: v7,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = constructor_writable_gpr_to_r_reg(ctx, v6);
    let v11 = constructor_writable_gpr_to_r_reg(ctx, v7);
    let v12 = C::value_regs(ctx, v10, v11);
    // Rule at src\isa\x64\inst.isle line 5671.
    return v12;
}

// Generated as internal constructor for term x64_div_quotient.
pub fn constructor_x64_div_quotient<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
    arg2: &GprMem,
    arg3: &OperandSize,
    arg4: &DivSignedness,
    arg5: &TrapCode,
) -> ValueRegs {
    let v6 = constructor_x64_div(ctx, arg0, arg1, arg2, arg3, arg4, arg5);
    let v8 = C::value_regs_get(ctx, v6, 0x0_usize);
    let v9 = C::value_reg(ctx, v8);
    // Rule at src\isa\x64\inst.isle line 5679.
    return v9;
}

// Generated as internal constructor for term x64_div_remainder.
pub fn constructor_x64_div_remainder<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
    arg2: &GprMem,
    arg3: &OperandSize,
    arg4: &DivSignedness,
    arg5: &TrapCode,
) -> ValueRegs {
    let v6 = constructor_x64_div(ctx, arg0, arg1, arg2, arg3, arg4, arg5);
    let v8 = C::value_regs_get(ctx, v6, 0x1_usize);
    let v9 = C::value_reg(ctx, v8);
    // Rule at src\isa\x64\inst.isle line 5684.
    return v9;
}

// Generated as internal constructor for term x64_sign_extend_data.
pub fn constructor_x64_sign_extend_data<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &OperandSize,
) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = MInst::SignExtendData {
        size: arg1.clone(),
        src: arg0,
        dst: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src\isa\x64\inst.isle line 5689.
    return v5;
}

// Generated as internal constructor for term read_pinned_gpr.
pub fn constructor_read_pinned_gpr<C: Context>(
    ctx: &mut C,
) -> Gpr {
    let v0 = C::preg_pinned(ctx);
    let v1 = constructor_mov_from_preg(ctx, v0);
    let v2 = C::gpr_new(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 5697.
    return v2;
}

// Generated as internal constructor for term write_pinned_gpr.
pub fn constructor_write_pinned_gpr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
) -> SideEffectNoResult {
    let v1 = C::preg_pinned(ctx);
    let v2 = &constructor_mov_to_preg(ctx, v1, arg0);
    // Rule at src\isa\x64\inst.isle line 5701.
    return v2.clone();
}

// Generated as internal constructor for term elf_tls_get_addr.
pub fn constructor_elf_tls_get_addr<C: Context>(
    ctx: &mut C,
    arg0: ExternalName,
) -> Gpr {
    let v1 = C::temp_writable_gpr(ctx);
    let v2 = MInst::ElfTlsGetAddr {
        symbol: arg0,
        dst: v1,
    };
    let v3 = C::emit(ctx, &v2);
    let v4 = C::writable_gpr_to_gpr(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 5743.
    return v4;
}

// Generated as internal constructor for term macho_tls_get_addr.
pub fn constructor_macho_tls_get_addr<C: Context>(
    ctx: &mut C,
    arg0: ExternalName,
) -> Gpr {
    let v1 = C::temp_writable_gpr(ctx);
    let v2 = MInst::MachOTlsGetAddr {
        symbol: arg0,
        dst: v1,
    };
    let v3 = C::emit(ctx, &v2);
    let v4 = C::writable_gpr_to_gpr(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 5750.
    return v4;
}

// Generated as internal constructor for term coff_tls_get_addr.
pub fn constructor_coff_tls_get_addr<C: Context>(
    ctx: &mut C,
    arg0: ExternalName,
) -> Gpr {
    let v1 = C::temp_writable_gpr(ctx);
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = MInst::CoffTlsGetAddr {
        symbol: arg0,
        dst: v1,
        tmp: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_gpr_to_gpr(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 5757.
    return v5;
}

// Generated as internal constructor for term reg_to_xmm_mem.
pub fn constructor_reg_to_xmm_mem<C: Context>(
    ctx: &mut C,
    arg0: Reg,
) -> XmmMem {
    let v1 = C::xmm_new(ctx, arg0);
    let v2 = &C::xmm_to_xmm_mem(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 5844.
    return v2.clone();
}

// Generated as internal constructor for term xmm_to_reg_mem.
pub fn constructor_xmm_to_reg_mem<C: Context>(
    ctx: &mut C,
    arg0: Reg,
) -> XmmMem {
    let v1 = C::xmm_new(ctx, arg0);
    let v2 = C::xmm_to_reg(ctx, v1);
    let v3 = RegMem::Reg {
        reg: v2,
    };
    let v4 = &C::reg_mem_to_xmm_mem(ctx, &v3);
    // Rule at src\isa\x64\inst.isle line 5847.
    return v4.clone();
}

// Generated as internal constructor for term writable_gpr_to_r_reg.
pub fn constructor_writable_gpr_to_r_reg<C: Context>(
    ctx: &mut C,
    arg0: WritableGpr,
) -> Reg {
    let v1 = C::writable_gpr_to_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 5851.
    return v2;
}

// Generated as internal constructor for term writable_gpr_to_gpr_mem.
pub fn constructor_writable_gpr_to_gpr_mem<C: Context>(
    ctx: &mut C,
    arg0: WritableGpr,
) -> GprMem {
    let v1 = C::writable_gpr_to_gpr(ctx, arg0);
    let v2 = &C::gpr_to_gpr_mem(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 5854.
    return v2.clone();
}

// Generated as internal constructor for term writable_gpr_to_gpr_mem_imm.
pub fn constructor_writable_gpr_to_gpr_mem_imm<C: Context>(
    ctx: &mut C,
    arg0: WritableGpr,
) -> GprMemImm {
    let v1 = C::writable_gpr_to_gpr(ctx, arg0);
    let v2 = &C::gpr_to_gpr_mem_imm(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 5857.
    return v2.clone();
}

// Generated as internal constructor for term writable_gpr_to_value_regs.
pub fn constructor_writable_gpr_to_value_regs<C: Context>(
    ctx: &mut C,
    arg0: WritableGpr,
) -> ValueRegs {
    let v1 = constructor_writable_gpr_to_r_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 5860.
    return v2;
}

// Generated as internal constructor for term writable_xmm_to_r_reg.
pub fn constructor_writable_xmm_to_r_reg<C: Context>(
    ctx: &mut C,
    arg0: WritableXmm,
) -> Reg {
    let v1 = C::writable_xmm_to_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 5863.
    return v2;
}

// Generated as internal constructor for term writable_xmm_to_xmm_mem.
pub fn constructor_writable_xmm_to_xmm_mem<C: Context>(
    ctx: &mut C,
    arg0: WritableXmm,
) -> XmmMem {
    let v1 = C::writable_xmm_to_xmm(ctx, arg0);
    let v2 = &C::xmm_to_xmm_mem(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 5866.
    return v2.clone();
}

// Generated as internal constructor for term writable_xmm_to_value_regs.
pub fn constructor_writable_xmm_to_value_regs<C: Context>(
    ctx: &mut C,
    arg0: WritableXmm,
) -> ValueRegs {
    let v1 = constructor_writable_xmm_to_r_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 5869.
    return v2;
}

// Generated as internal constructor for term synthetic_amode_to_gpr_mem.
pub fn constructor_synthetic_amode_to_gpr_mem<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
) -> GprMem {
    let v1 = &C::synthetic_amode_to_reg_mem(ctx, arg0);
    let v2 = &C::reg_mem_to_gpr_mem(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 5879.
    return v2.clone();
}

// Generated as internal constructor for term amode_to_gpr_mem.
pub fn constructor_amode_to_gpr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
) -> GprMem {
    let v1 = &C::amode_to_synthetic_amode(ctx, arg0);
    let v2 = &constructor_synthetic_amode_to_gpr_mem(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 5877.
    return v2.clone();
}

// Generated as internal constructor for term amode_to_xmm_mem.
pub fn constructor_amode_to_xmm_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
) -> XmmMem {
    let v1 = &C::amode_to_synthetic_amode(ctx, arg0);
    let v2 = &constructor_synthetic_amode_to_xmm_mem(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 5882.
    return v2.clone();
}

// Generated as internal constructor for term synthetic_amode_to_xmm_mem.
pub fn constructor_synthetic_amode_to_xmm_mem<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
) -> XmmMem {
    let v1 = &C::synthetic_amode_to_reg_mem(ctx, arg0);
    let v2 = &C::reg_mem_to_xmm_mem(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 5885.
    return v2.clone();
}

// Generated as internal constructor for term const_to_xmm_mem.
pub fn constructor_const_to_xmm_mem<C: Context>(
    ctx: &mut C,
    arg0: VCodeConstant,
) -> XmmMem {
    let v1 = &C::const_to_synthetic_amode(ctx, arg0);
    let v2 = &constructor_synthetic_amode_to_xmm_mem(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 5890.
    return v2.clone();
}

// Generated as internal constructor for term const_to_reg_mem.
pub fn constructor_const_to_reg_mem<C: Context>(
    ctx: &mut C,
    arg0: VCodeConstant,
) -> RegMem {
    let v1 = &C::const_to_synthetic_amode(ctx, arg0);
    let v2 = RegMem::Mem {
        addr: v1.clone(),
    };
    // Rule at src\isa\x64\inst.isle line 5892.
    return v2;
}

// Generated as internal constructor for term xmm_to_xmm_mem_aligned.
pub fn constructor_xmm_to_xmm_mem_aligned<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
) -> XmmMemAligned {
    let v1 = &C::xmm_to_xmm_mem(ctx, arg0);
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 5895.
    return v2.clone();
}

// Generated as internal constructor for term amode_to_xmm_mem_aligned.
pub fn constructor_amode_to_xmm_mem_aligned<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
) -> XmmMemAligned {
    let v1 = &constructor_amode_to_xmm_mem(ctx, arg0);
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 5897.
    return v2.clone();
}

// Generated as internal constructor for term synthetic_amode_to_xmm_mem_aligned.
pub fn constructor_synthetic_amode_to_xmm_mem_aligned<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
) -> XmmMemAligned {
    let v1 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg0);
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 5899.
    return v2.clone();
}

// Generated as internal constructor for term put_in_xmm_mem_aligned.
pub fn constructor_put_in_xmm_mem_aligned<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> XmmMemAligned {
    let v1 = &C::put_in_xmm_mem(ctx, arg0);
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 5901.
    return v2.clone();
}

// Generated as internal constructor for term mov_to_preg.
pub fn constructor_mov_to_preg<C: Context>(
    ctx: &mut C,
    arg0: PReg,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = MInst::MovToPReg {
        src: arg1,
        dst: arg0,
    };
    let v3 = SideEffectNoResult::Inst {
        inst: v2,
    };
    // Rule at src\isa\x64\inst.isle line 5904.
    return v3;
}

// Generated as internal constructor for term x64_rbp.
pub fn constructor_x64_rbp<C: Context>(
    ctx: &mut C,
) -> Reg {
    let v0 = C::preg_rbp(ctx);
    let v1 = constructor_mov_from_preg(ctx, v0);
    // Rule at src\isa\x64\inst.isle line 5917.
    return v1;
}

// Generated as internal constructor for term x64_rsp.
pub fn constructor_x64_rsp<C: Context>(
    ctx: &mut C,
) -> Reg {
    let v0 = C::preg_rsp(ctx);
    let v1 = constructor_mov_from_preg(ctx, v0);
    // Rule at src\isa\x64\inst.isle line 5921.
    return v1;
}

// Generated as internal constructor for term lower.
pub fn constructor_lower<C: Context>(
    ctx: &mut C,
    arg0: Inst,
) -> Option<InstOutput> {
    let v6 = &C::inst_data_value(ctx, arg0);
    match v6 {
        &InstructionData::AtomicCas {
            opcode: ref v2387,
            args: ref v2388,
            flags: v2389,
        } => {
            if let &Opcode::AtomicCas = v2387 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    if v3 == I128 {
                        let v2353 = C::use_cmpxchg16b(ctx);
                        if v2353 == true {
                            let v2390 = C::unpack_value_array_3(ctx, v2388);
                            let v2402 = C::put_in_regs(ctx, v2390.1);
                            let v2403 = C::put_in_regs(ctx, v2390.2);
                            let v2396 = C::zero_offset(ctx);
                            let v2397 = &constructor_to_amode(ctx, v2389, v2390.0, v2396);
                            let v2398 = &C::amode_to_synthetic_amode(ctx, v2397);
                            let v2404 = constructor_x64_cmpxchg16b(ctx, v2402, v2403, v2398);
                            let v2405 = C::output(ctx, v2404);
                            let v2406 = Some(v2405);
                            // Rule at src\isa\x64\lower.isle line 3411.
                            return v2406;
                        }
                    }
                    let v4 = C::fits_in_64(ctx, v3);
                    if let Some(v5) = v4 {
                        let v2345 = C::ty_int(ctx, v3);
                        if let Some(v2346) = v2345 {
                            let v2390 = C::unpack_value_array_3(ctx, v2388);
                            let v2394 = constructor_put_in_gpr(ctx, v2390.1);
                            let v2395 = constructor_put_in_gpr(ctx, v2390.2);
                            let v2396 = C::zero_offset(ctx);
                            let v2397 = &constructor_to_amode(ctx, v2389, v2390.0, v2396);
                            let v2398 = &C::amode_to_synthetic_amode(ctx, v2397);
                            let v2399 = constructor_x64_cmpxchg(ctx, v5, v2394, v2395, v2398);
                            let v2400 = constructor_output_gpr(ctx, v2399);
                            let v2401 = Some(v2400);
                            // Rule at src\isa\x64\lower.isle line 3408.
                            return v2401;
                        }
                    }
                }
            }
        }
        &InstructionData::AtomicRmw {
            opcode: ref v2407,
            args: ref v2408,
            flags: v2409,
            op: ref v2410,
        } => {
            if let &Opcode::AtomicRmw = v2407 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    if v3 == I128 {
                        let v2353 = C::use_cmpxchg16b(ctx);
                        if v2353 == true {
                            let v70 = C::zero_offset(ctx);
                            let v2411 = C::unpack_value_array_2(ctx, v2408);
                            let v2452 = &constructor_to_amode(ctx, v2409, v2411.0, v70);
                            let v2453 = &C::amode_to_synthetic_amode(ctx, v2452);
                            let v2454 = C::put_in_regs(ctx, v2411.1);
                            let v2455 = constructor_x64_atomic_128_rmw_seq(ctx, v2410, v2453, v2454);
                            let v2456 = C::output(ctx, v2455);
                            let v2457 = Some(v2456);
                            // Rule at src\isa\x64\lower.isle line 3464.
                            return v2457;
                        }
                    }
                    let v4 = C::fits_in_64(ctx, v3);
                    if let Some(v5) = v4 {
                        match v2410 {
                            &AtomicRmwOp::Add => {
                                let v2432 = C::ty_int(ctx, v5);
                                if let Some(v2433) = v2432 {
                                    let v2434 = C::value_is_unused(ctx, v2);
                                    if v2434 == true {
                                        let v2435 = &C::raw_operand_size_of_type(ctx, v2433);
                                        let v2347 = C::zero_offset(ctx);
                                        let v2411 = C::unpack_value_array_2(ctx, v2408);
                                        let v2415 = &constructor_to_amode(ctx, v2409, v2411.0, v2347);
                                        let v2436 = constructor_put_in_gpr(ctx, v2411.1);
                                        let v2437 = &constructor_x64_lock_add(ctx, v2435, v2415, v2436);
                                        let v2438 = constructor_side_effect_as_invalid(ctx, v2437);
                                        let v2439 = Some(v2438);
                                        // Rule at src\isa\x64\lower.isle line 3437.
                                        return v2439;
                                    }
                                }
                                let v2345 = C::ty_int(ctx, v3);
                                if let Some(v2346) = v2345 {
                                    let v2421 = &C::raw_operand_size_of_type(ctx, v5);
                                    let v2347 = C::zero_offset(ctx);
                                    let v2411 = C::unpack_value_array_2(ctx, v2408);
                                    let v2415 = &constructor_to_amode(ctx, v2409, v2411.0, v2347);
                                    let v2416 = &C::amode_to_synthetic_amode(ctx, v2415);
                                    let v2417 = constructor_put_in_gpr(ctx, v2411.1);
                                    let v2422 = constructor_x64_xadd(ctx, v2421, v2416, v2417);
                                    let v2423 = constructor_output_gpr(ctx, v2422);
                                    let v2424 = Some(v2423);
                                    // Rule at src\isa\x64\lower.isle line 3424.
                                    return v2424;
                                }
                            }
                            &AtomicRmwOp::And => {
                                let v2432 = C::ty_int(ctx, v5);
                                if let Some(v2433) = v2432 {
                                    let v2434 = C::value_is_unused(ctx, v2);
                                    if v2434 == true {
                                        let v2435 = &C::raw_operand_size_of_type(ctx, v2433);
                                        let v2347 = C::zero_offset(ctx);
                                        let v2411 = C::unpack_value_array_2(ctx, v2408);
                                        let v2415 = &constructor_to_amode(ctx, v2409, v2411.0, v2347);
                                        let v2436 = constructor_put_in_gpr(ctx, v2411.1);
                                        let v2443 = &constructor_x64_lock_and(ctx, v2435, v2415, v2436);
                                        let v2444 = constructor_side_effect_as_invalid(ctx, v2443);
                                        let v2445 = Some(v2444);
                                        // Rule at src\isa\x64\lower.isle line 3447.
                                        return v2445;
                                    }
                                }
                            }
                            &AtomicRmwOp::Or => {
                                let v2432 = C::ty_int(ctx, v5);
                                if let Some(v2433) = v2432 {
                                    let v2434 = C::value_is_unused(ctx, v2);
                                    if v2434 == true {
                                        let v2435 = &C::raw_operand_size_of_type(ctx, v2433);
                                        let v2347 = C::zero_offset(ctx);
                                        let v2411 = C::unpack_value_array_2(ctx, v2408);
                                        let v2415 = &constructor_to_amode(ctx, v2409, v2411.0, v2347);
                                        let v2436 = constructor_put_in_gpr(ctx, v2411.1);
                                        let v2446 = &constructor_x64_lock_or(ctx, v2435, v2415, v2436);
                                        let v2447 = constructor_side_effect_as_invalid(ctx, v2446);
                                        let v2448 = Some(v2447);
                                        // Rule at src\isa\x64\lower.isle line 3452.
                                        return v2448;
                                    }
                                }
                            }
                            &AtomicRmwOp::Sub => {
                                let v2432 = C::ty_int(ctx, v5);
                                if let Some(v2433) = v2432 {
                                    let v2434 = C::value_is_unused(ctx, v2);
                                    if v2434 == true {
                                        let v2435 = &C::raw_operand_size_of_type(ctx, v2433);
                                        let v2347 = C::zero_offset(ctx);
                                        let v2411 = C::unpack_value_array_2(ctx, v2408);
                                        let v2415 = &constructor_to_amode(ctx, v2409, v2411.0, v2347);
                                        let v2436 = constructor_put_in_gpr(ctx, v2411.1);
                                        let v2440 = &constructor_x64_lock_sub(ctx, v2435, v2415, v2436);
                                        let v2441 = constructor_side_effect_as_invalid(ctx, v2440);
                                        let v2442 = Some(v2441);
                                        // Rule at src\isa\x64\lower.isle line 3442.
                                        return v2442;
                                    }
                                }
                                let v2345 = C::ty_int(ctx, v3);
                                if let Some(v2346) = v2345 {
                                    let v2421 = &C::raw_operand_size_of_type(ctx, v5);
                                    let v2347 = C::zero_offset(ctx);
                                    let v2411 = C::unpack_value_array_2(ctx, v2408);
                                    let v2415 = &constructor_to_amode(ctx, v2409, v2411.0, v2347);
                                    let v2416 = &C::amode_to_synthetic_amode(ctx, v2415);
                                    let v2417 = constructor_put_in_gpr(ctx, v2411.1);
                                    let v2425 = constructor_x64_neg(ctx, v5, v2417);
                                    let v2426 = constructor_x64_xadd(ctx, v2421, v2416, v2425);
                                    let v2427 = constructor_output_gpr(ctx, v2426);
                                    let v2428 = Some(v2427);
                                    // Rule at src\isa\x64\lower.isle line 3427.
                                    return v2428;
                                }
                            }
                            &AtomicRmwOp::Xchg => {
                                let v2345 = C::ty_int(ctx, v3);
                                if let Some(v2346) = v2345 {
                                    let v2421 = &C::raw_operand_size_of_type(ctx, v5);
                                    let v2347 = C::zero_offset(ctx);
                                    let v2411 = C::unpack_value_array_2(ctx, v2408);
                                    let v2415 = &constructor_to_amode(ctx, v2409, v2411.0, v2347);
                                    let v2416 = &C::amode_to_synthetic_amode(ctx, v2415);
                                    let v2417 = constructor_put_in_gpr(ctx, v2411.1);
                                    let v2429 = constructor_x64_xchg(ctx, v2421, v2416, v2417);
                                    let v2430 = constructor_output_gpr(ctx, v2429);
                                    let v2431 = Some(v2430);
                                    // Rule at src\isa\x64\lower.isle line 3431.
                                    return v2431;
                                }
                            }
                            &AtomicRmwOp::Xor => {
                                let v2432 = C::ty_int(ctx, v5);
                                if let Some(v2433) = v2432 {
                                    let v2434 = C::value_is_unused(ctx, v2);
                                    if v2434 == true {
                                        let v2435 = &C::raw_operand_size_of_type(ctx, v2433);
                                        let v2347 = C::zero_offset(ctx);
                                        let v2411 = C::unpack_value_array_2(ctx, v2408);
                                        let v2415 = &constructor_to_amode(ctx, v2409, v2411.0, v2347);
                                        let v2436 = constructor_put_in_gpr(ctx, v2411.1);
                                        let v2449 = &constructor_x64_lock_xor(ctx, v2435, v2415, v2436);
                                        let v2450 = constructor_side_effect_as_invalid(ctx, v2449);
                                        let v2451 = Some(v2450);
                                        // Rule at src\isa\x64\lower.isle line 3457.
                                        return v2451;
                                    }
                                }
                            }
                            _ => {}
                        }
                        let v2345 = C::ty_int(ctx, v3);
                        if let Some(v2346) = v2345 {
                            let v2414 = &constructor_atomic_rmw_seq_op(ctx, v2410);
                            let v2347 = C::zero_offset(ctx);
                            let v2411 = C::unpack_value_array_2(ctx, v2408);
                            let v2415 = &constructor_to_amode(ctx, v2409, v2411.0, v2347);
                            let v2416 = &C::amode_to_synthetic_amode(ctx, v2415);
                            let v2417 = constructor_put_in_gpr(ctx, v2411.1);
                            let v2418 = constructor_x64_atomic_rmw_seq(ctx, v5, v2414, v2416, v2417);
                            let v2419 = constructor_output_gpr(ctx, v2418);
                            let v2420 = Some(v2419);
                            // Rule at src\isa\x64\lower.isle line 3419.
                            return v2420;
                        }
                    }
                }
            }
        }
        &InstructionData::Binary {
            opcode: ref v57,
            args: ref v58,
        } => {
            match v57 {
                &Opcode::Swizzle => {
                    let v59 = C::unpack_value_array_2(ctx, v58);
                    let v1770 = constructor_put_in_xmm(ctx, v59.1);
                    let v3198 = C::emit_u128_le_const(ctx, 0x70707070707070707070707070707070_u128);
                    let v3199 = &constructor_const_to_xmm_mem(ctx, v3198);
                    let v3200 = constructor_x64_paddusb(ctx, v1770, v3199);
                    let v528 = constructor_put_in_xmm(ctx, v59.0);
                    let v3201 = C::xmm_to_reg(ctx, v3200);
                    let v3202 = &constructor_xmm_to_reg_mem(ctx, v3201);
                    let v3203 = &C::xmm_mem_to_reg_mem(ctx, v3202);
                    let v3204 = constructor_lower_pshufb(ctx, v528, v3203);
                    let v3205 = constructor_output_xmm(ctx, v3204);
                    let v3206 = Some(v3205);
                    // Rule at src\isa\x64\lower.isle line 4643.
                    return v3206;
                }
                &Opcode::X86Pshufb => {
                    let v764 = C::use_ssse3(ctx);
                    if v764 == true {
                        let v59 = C::unpack_value_array_2(ctx, v58);
                        let v93 = constructor_put_in_xmm(ctx, v59.0);
                        let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                        let v3207 = constructor_x64_pshufb(ctx, v93, v94);
                        let v3208 = constructor_output_xmm(ctx, v3207);
                        let v3209 = Some(v3208);
                        // Rule at src\isa\x64\lower.isle line 4649.
                        return v3209;
                    }
                }
                &Opcode::Smin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1149 = C::ty_vec128(ctx, v3);
                        if let Some(v1150) = v1149 {
                            let v1154 = constructor_has_pmins(ctx, v1150);
                            if v1154 == true {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                let v1155 = constructor_x64_pmins(ctx, v1150, v93, v94);
                                let v1156 = constructor_output_xmm(ctx, v1155);
                                let v1157 = Some(v1156);
                                // Rule at src\isa\x64\lower.isle line 1816.
                                return v1157;
                            }
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v93 = constructor_put_in_xmm(ctx, v59.0);
                            let v674 = constructor_put_in_xmm(ctx, v59.1);
                            let v497 = &C::xmm_to_xmm_mem(ctx, v93);
                            let v1158 = constructor_x64_pcmpgt(ctx, v1150, v674, v497);
                            let v499 = &C::xmm_to_xmm_mem(ctx, v93);
                            let v1159 = constructor_x64_pand(ctx, v1158, v499);
                            let v679 = &C::xmm_to_xmm_mem(ctx, v674);
                            let v1160 = constructor_x64_pandn(ctx, v1158, v679);
                            let v1161 = &C::xmm_to_xmm_mem(ctx, v1160);
                            let v1162 = constructor_x64_por(ctx, v1159, v1161);
                            let v1163 = constructor_output_xmm(ctx, v1162);
                            let v1164 = Some(v1163);
                            // Rule at src\isa\x64\lower.isle line 1820.
                            return v1164;
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v1142 = constructor_cmp_and_choose(ctx, v5, &CC::L, v59.0, v59.1);
                            let v1143 = C::output(ctx, v1142);
                            let v1144 = Some(v1143);
                            // Rule at src\isa\x64\lower.isle line 1766.
                            return v1144;
                        }
                    }
                }
                &Opcode::Umin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1149 = C::ty_vec128(ctx, v3);
                        if let Some(v1150) = v1149 {
                            let v1189 = constructor_has_pminu(ctx, v1150);
                            if v1189 == true {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                let v1190 = constructor_x64_pminu(ctx, v1150, v93, v94);
                                let v1191 = constructor_output_xmm(ctx, v1190);
                                let v1192 = Some(v1191);
                                // Rule at src\isa\x64\lower.isle line 1868.
                                return v1192;
                            }
                        }
                        if v3 == I16X8 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v93 = constructor_put_in_xmm(ctx, v59.0);
                            let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                            let v254 = constructor_x64_psubusw(ctx, v93, v94);
                            let v1193 = &C::xmm_to_xmm_mem(ctx, v254);
                            let v1194 = constructor_x64_psubw(ctx, v93, v1193);
                            let v1195 = constructor_output_xmm(ctx, v1194);
                            let v1196 = Some(v1195);
                            // Rule at src\isa\x64\lower.isle line 1874.
                            return v1196;
                        }
                        if let Some(v1150) = v1149 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v93 = constructor_put_in_xmm(ctx, v59.0);
                            let v674 = constructor_put_in_xmm(ctx, v59.1);
                            let v1174 = constructor_flip_high_bit_mask(ctx, v1150);
                            let v1175 = &C::xmm_to_xmm_mem(ctx, v1174);
                            let v1176 = constructor_x64_pxor(ctx, v93, v1175);
                            let v1177 = &C::xmm_to_xmm_mem(ctx, v1174);
                            let v1178 = constructor_x64_pxor(ctx, v674, v1177);
                            let v1197 = &C::xmm_to_xmm_mem(ctx, v1176);
                            let v1198 = constructor_x64_pcmpgt(ctx, v1150, v1178, v1197);
                            let v1181 = &C::xmm_to_xmm_mem(ctx, v93);
                            let v1199 = constructor_x64_pand(ctx, v1198, v1181);
                            let v1183 = &C::xmm_to_xmm_mem(ctx, v674);
                            let v1200 = constructor_x64_pandn(ctx, v1198, v1183);
                            let v1201 = &C::xmm_to_xmm_mem(ctx, v1200);
                            let v1202 = constructor_x64_por(ctx, v1199, v1201);
                            let v1203 = constructor_output_xmm(ctx, v1202);
                            let v1204 = Some(v1203);
                            // Rule at src\isa\x64\lower.isle line 1879.
                            return v1204;
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v1134 = constructor_cmp_and_choose(ctx, v5, &CC::B, v59.0, v59.1);
                            let v1135 = C::output(ctx, v1134);
                            let v1136 = Some(v1135);
                            // Rule at src\isa\x64\lower.isle line 1760.
                            return v1136;
                        }
                    }
                }
                &Opcode::Smax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1149 = C::ty_vec128(ctx, v3);
                        if let Some(v1150) = v1149 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v93 = constructor_put_in_xmm(ctx, v59.0);
                            let v674 = constructor_put_in_xmm(ctx, v59.1);
                            let v1151 = constructor_lower_vec_smax(ctx, v1150, v93, v674);
                            let v1152 = constructor_output_xmm(ctx, v1151);
                            let v1153 = Some(v1152);
                            // Rule at src\isa\x64\lower.isle line 1796.
                            return v1153;
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v1146 = constructor_cmp_and_choose(ctx, v5, &CC::NL, v59.0, v59.1);
                            let v1147 = C::output(ctx, v1146);
                            let v1148 = Some(v1147);
                            // Rule at src\isa\x64\lower.isle line 1769.
                            return v1148;
                        }
                    }
                }
                &Opcode::Umax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1149 = C::ty_vec128(ctx, v3);
                        if let Some(v1150) = v1149 {
                            let v1165 = constructor_has_pmaxu(ctx, v1150);
                            if v1165 == true {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                let v1166 = constructor_x64_pmaxu(ctx, v1150, v93, v94);
                                let v1167 = constructor_output_xmm(ctx, v1166);
                                let v1168 = Some(v1167);
                                // Rule at src\isa\x64\lower.isle line 1832.
                                return v1168;
                            }
                        }
                        if v3 == I16X8 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v93 = constructor_put_in_xmm(ctx, v59.0);
                            let v674 = constructor_put_in_xmm(ctx, v59.1);
                            let v497 = &C::xmm_to_xmm_mem(ctx, v93);
                            let v1169 = constructor_x64_psubusw(ctx, v674, v497);
                            let v1170 = &C::xmm_to_xmm_mem(ctx, v1169);
                            let v1171 = constructor_x64_paddw(ctx, v93, v1170);
                            let v1172 = constructor_output_xmm(ctx, v1171);
                            let v1173 = Some(v1172);
                            // Rule at src\isa\x64\lower.isle line 1838.
                            return v1173;
                        }
                        if let Some(v1150) = v1149 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v93 = constructor_put_in_xmm(ctx, v59.0);
                            let v674 = constructor_put_in_xmm(ctx, v59.1);
                            let v1174 = constructor_flip_high_bit_mask(ctx, v1150);
                            let v1175 = &C::xmm_to_xmm_mem(ctx, v1174);
                            let v1176 = constructor_x64_pxor(ctx, v93, v1175);
                            let v1177 = &C::xmm_to_xmm_mem(ctx, v1174);
                            let v1178 = constructor_x64_pxor(ctx, v674, v1177);
                            let v1179 = &C::xmm_to_xmm_mem(ctx, v1178);
                            let v1180 = constructor_x64_pcmpgt(ctx, v1150, v1176, v1179);
                            let v1181 = &C::xmm_to_xmm_mem(ctx, v93);
                            let v1182 = constructor_x64_pand(ctx, v1180, v1181);
                            let v1183 = &C::xmm_to_xmm_mem(ctx, v674);
                            let v1184 = constructor_x64_pandn(ctx, v1180, v1183);
                            let v1185 = &C::xmm_to_xmm_mem(ctx, v1184);
                            let v1186 = constructor_x64_por(ctx, v1182, v1185);
                            let v1187 = constructor_output_xmm(ctx, v1186);
                            let v1188 = Some(v1187);
                            // Rule at src\isa\x64\lower.isle line 1845.
                            return v1188;
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v1138 = constructor_cmp_and_choose(ctx, v5, &CC::NB, v59.0, v59.1);
                            let v1139 = C::output(ctx, v1138);
                            let v1140 = Some(v1139);
                            // Rule at src\isa\x64\lower.isle line 1763.
                            return v1140;
                        }
                    }
                }
                &Opcode::AvgRound => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v89 = C::multi_lane(ctx, v3);
                        if let Some(v90) = v89 {
                            match v90.0 {
                                0x8_u32 => {
                                    if v90.1 == 0x10_u32 {
                                        let v59 = C::unpack_value_array_2(ctx, v58);
                                        let v93 = constructor_put_in_xmm(ctx, v59.0);
                                        let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                        let v613 = constructor_x64_pavgb(ctx, v93, v94);
                                        let v614 = constructor_output_xmm(ctx, v613);
                                        let v615 = Some(v614);
                                        // Rule at src\isa\x64\lower.isle line 1023.
                                        return v615;
                                    }
                                }
                                0x10_u32 => {
                                    if v90.1 == 0x8_u32 {
                                        let v59 = C::unpack_value_array_2(ctx, v58);
                                        let v93 = constructor_put_in_xmm(ctx, v59.0);
                                        let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                        let v616 = constructor_x64_pavgw(ctx, v93, v94);
                                        let v617 = constructor_output_xmm(ctx, v616);
                                        let v618 = Some(v617);
                                        // Rule at src\isa\x64\lower.isle line 1027.
                                        return v618;
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::UaddSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v89 = C::multi_lane(ctx, v3);
                        if let Some(v90) = v89 {
                            match v90.0 {
                                0x8_u32 => {
                                    if v90.1 == 0x10_u32 {
                                        let v59 = C::unpack_value_array_2(ctx, v58);
                                        let v93 = constructor_put_in_xmm(ctx, v59.0);
                                        let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                        let v215 = constructor_x64_paddusb(ctx, v93, v94);
                                        let v216 = constructor_output_xmm(ctx, v215);
                                        let v217 = Some(v216);
                                        // Rule at src\isa\x64\lower.isle line 234.
                                        return v217;
                                    }
                                }
                                0x10_u32 => {
                                    if v90.1 == 0x8_u32 {
                                        let v59 = C::unpack_value_array_2(ctx, v58);
                                        let v93 = constructor_put_in_xmm(ctx, v59.0);
                                        let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                        let v218 = constructor_x64_paddusw(ctx, v93, v94);
                                        let v219 = constructor_output_xmm(ctx, v218);
                                        let v220 = Some(v219);
                                        // Rule at src\isa\x64\lower.isle line 238.
                                        return v220;
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::SaddSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v89 = C::multi_lane(ctx, v3);
                        if let Some(v90) = v89 {
                            match v90.0 {
                                0x8_u32 => {
                                    if v90.1 == 0x10_u32 {
                                        let v59 = C::unpack_value_array_2(ctx, v58);
                                        let v93 = constructor_put_in_xmm(ctx, v59.0);
                                        let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                        let v209 = constructor_x64_paddsb(ctx, v93, v94);
                                        let v210 = constructor_output_xmm(ctx, v209);
                                        let v211 = Some(v210);
                                        // Rule at src\isa\x64\lower.isle line 224.
                                        return v211;
                                    }
                                }
                                0x10_u32 => {
                                    if v90.1 == 0x8_u32 {
                                        let v59 = C::unpack_value_array_2(ctx, v58);
                                        let v93 = constructor_put_in_xmm(ctx, v59.0);
                                        let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                        let v212 = constructor_x64_paddsw(ctx, v93, v94);
                                        let v213 = constructor_output_xmm(ctx, v212);
                                        let v214 = Some(v213);
                                        // Rule at src\isa\x64\lower.isle line 228.
                                        return v214;
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::UsubSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v89 = C::multi_lane(ctx, v3);
                        if let Some(v90) = v89 {
                            match v90.0 {
                                0x8_u32 => {
                                    if v90.1 == 0x10_u32 {
                                        let v59 = C::unpack_value_array_2(ctx, v58);
                                        let v93 = constructor_put_in_xmm(ctx, v59.0);
                                        let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                        let v251 = constructor_x64_psubusb(ctx, v93, v94);
                                        let v252 = constructor_output_xmm(ctx, v251);
                                        let v253 = Some(v252);
                                        // Rule at src\isa\x64\lower.isle line 307.
                                        return v253;
                                    }
                                }
                                0x10_u32 => {
                                    if v90.1 == 0x8_u32 {
                                        let v59 = C::unpack_value_array_2(ctx, v58);
                                        let v93 = constructor_put_in_xmm(ctx, v59.0);
                                        let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                        let v254 = constructor_x64_psubusw(ctx, v93, v94);
                                        let v255 = constructor_output_xmm(ctx, v254);
                                        let v256 = Some(v255);
                                        // Rule at src\isa\x64\lower.isle line 311.
                                        return v256;
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::SsubSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v89 = C::multi_lane(ctx, v3);
                        if let Some(v90) = v89 {
                            match v90.0 {
                                0x8_u32 => {
                                    if v90.1 == 0x10_u32 {
                                        let v59 = C::unpack_value_array_2(ctx, v58);
                                        let v93 = constructor_put_in_xmm(ctx, v59.0);
                                        let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                        let v245 = constructor_x64_psubsb(ctx, v93, v94);
                                        let v246 = constructor_output_xmm(ctx, v245);
                                        let v247 = Some(v246);
                                        // Rule at src\isa\x64\lower.isle line 297.
                                        return v247;
                                    }
                                }
                                0x10_u32 => {
                                    if v90.1 == 0x8_u32 {
                                        let v59 = C::unpack_value_array_2(ctx, v58);
                                        let v93 = constructor_put_in_xmm(ctx, v59.0);
                                        let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                        let v248 = constructor_x64_psubsw(ctx, v93, v94);
                                        let v249 = constructor_output_xmm(ctx, v248);
                                        let v250 = Some(v249);
                                        // Rule at src\isa\x64\lower.isle line 301.
                                        return v250;
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::Iadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v120 = C::def_inst(ctx, v59.1);
                            if let Some(v121) = v120 {
                                let v122 = &C::inst_data_value(ctx, v121);
                                match v122 {
                                    &InstructionData::Binary {
                                        opcode: ref v123,
                                        args: ref v124,
                                    } => {
                                        if let &Opcode::Iconcat = v123 {
                                            let v107 = C::put_in_regs(ctx, v59.0);
                                            let v128 = C::put_in_regs(ctx, v59.0);
                                            let v129 = constructor_value_regs_get_gpr(ctx, v128, 0x0_usize);
                                            let v130 = C::put_in_regs(ctx, v59.0);
                                            let v131 = constructor_value_regs_get_gpr(ctx, v130, 0x1_usize);
                                            let v125 = C::unpack_value_array_2(ctx, v124);
                                            let v132 = &constructor_put_in_gpr_mem_imm(ctx, v125.0);
                                            let v133 = &constructor_put_in_gpr_mem_imm(ctx, v125.1);
                                            let v134 = constructor_iadd128(ctx, v129, v131, v132, v133);
                                            let v135 = C::output(ctx, v134);
                                            let v136 = Some(v135);
                                            // Rule at src\isa\x64\lower.isle line 106.
                                            return v136;
                                        }
                                    }
                                    &InstructionData::Unary {
                                        opcode: ref v137,
                                        arg: v138,
                                    } => {
                                        if let &Opcode::Uextend = v137 {
                                            let v139 = C::value_type(ctx, v138);
                                            if v139 == I64 {
                                                let v147 = C::def_inst(ctx, v59.0);
                                                if let Some(v148) = v147 {
                                                    let v149 = &C::inst_data_value(ctx, v148);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v150,
                                                        arg: v151,
                                                    } = v149 {
                                                        if let &Opcode::Uextend = v150 {
                                                            let v153 = constructor_extend_to_gpr(ctx, v151, I64, &ExtendKind::Zero);
                                                            let v154 = &constructor_put_in_gpr_mem_imm(ctx, v138);
                                                            let v155 = &constructor_x64_add_with_flags_paired(ctx, I64, v153, v154);
                                                            let v157 = &constructor_x64_setcc_paired(ctx, &CC::B);
                                                            let v158 = constructor_with_flags(ctx, v155, v157);
                                                            let v159 = C::value_regs_get(ctx, v158, 0x0_usize);
                                                            let v161 = C::value_regs_get(ctx, v158, 0x1_usize);
                                                            let v162 = &C::reg_to_gpr_mem(ctx, v161);
                                                            let v163 = constructor_x64_movzx(ctx, &ExtMode::BQ, v162);
                                                            let v164 = C::gpr_to_reg(ctx, v163);
                                                            let v165 = C::value_regs(ctx, v159, v164);
                                                            let v166 = C::output(ctx, v165);
                                                            let v167 = Some(v166);
                                                            // Rule at src\isa\x64\lower.isle line 117.
                                                            return v167;
                                                        }
                                                    }
                                                }
                                                let v107 = C::put_in_regs(ctx, v59.0);
                                                let v128 = C::put_in_regs(ctx, v59.0);
                                                let v129 = constructor_value_regs_get_gpr(ctx, v128, 0x0_usize);
                                                let v130 = C::put_in_regs(ctx, v59.0);
                                                let v131 = constructor_value_regs_get_gpr(ctx, v130, 0x1_usize);
                                                let v140 = &constructor_put_in_gpr_mem_imm(ctx, v138);
                                                let v142 = RegMemImm::Imm {
                                                    simm32: 0x0_u32,
                                                };
                                                let v143 = &C::gpr_mem_imm_new(ctx, &v142);
                                                let v144 = constructor_iadd128(ctx, v129, v131, v140, v143);
                                                let v145 = C::output(ctx, v144);
                                                let v146 = Some(v145);
                                                // Rule at src\isa\x64\lower.isle line 109.
                                                return v146;
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                            let v107 = C::put_in_regs(ctx, v59.0);
                            let v108 = C::put_in_regs(ctx, v59.1);
                            let v110 = constructor_value_regs_get_gpr(ctx, v107, 0x0_usize);
                            let v112 = constructor_value_regs_get_gpr(ctx, v107, 0x1_usize);
                            let v113 = constructor_value_regs_get_gpr(ctx, v108, 0x0_usize);
                            let v114 = &C::gpr_to_gpr_mem_imm(ctx, v113);
                            let v115 = constructor_value_regs_get_gpr(ctx, v108, 0x1_usize);
                            let v116 = &C::gpr_to_gpr_mem_imm(ctx, v115);
                            let v117 = constructor_iadd128(ctx, v110, v112, v114, v116);
                            let v118 = C::output(ctx, v117);
                            let v119 = Some(v118);
                            // Rule at src\isa\x64\lower.isle line 97.
                            return v119;
                        }
                        let v89 = C::multi_lane(ctx, v3);
                        if let Some(v90) = v89 {
                            match v90.0 {
                                0x8_u32 => {
                                    if v90.1 == 0x10_u32 {
                                        let v59 = C::unpack_value_array_2(ctx, v58);
                                        let v93 = constructor_put_in_xmm(ctx, v59.0);
                                        let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                        let v95 = constructor_x64_paddb(ctx, v93, v94);
                                        let v96 = constructor_output_xmm(ctx, v95);
                                        let v97 = Some(v96);
                                        // Rule at src\isa\x64\lower.isle line 80.
                                        return v97;
                                    }
                                }
                                0x10_u32 => {
                                    if v90.1 == 0x8_u32 {
                                        let v59 = C::unpack_value_array_2(ctx, v58);
                                        let v93 = constructor_put_in_xmm(ctx, v59.0);
                                        let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                        let v98 = constructor_x64_paddw(ctx, v93, v94);
                                        let v99 = constructor_output_xmm(ctx, v98);
                                        let v100 = Some(v99);
                                        // Rule at src\isa\x64\lower.isle line 84.
                                        return v100;
                                    }
                                }
                                0x20_u32 => {
                                    if v90.1 == 0x4_u32 {
                                        let v59 = C::unpack_value_array_2(ctx, v58);
                                        let v93 = constructor_put_in_xmm(ctx, v59.0);
                                        let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                        let v101 = constructor_x64_paddd(ctx, v93, v94);
                                        let v102 = constructor_output_xmm(ctx, v101);
                                        let v103 = Some(v102);
                                        // Rule at src\isa\x64\lower.isle line 88.
                                        return v103;
                                    }
                                }
                                0x40_u32 => {
                                    if v90.1 == 0x2_u32 {
                                        let v59 = C::unpack_value_array_2(ctx, v58);
                                        let v93 = constructor_put_in_xmm(ctx, v59.0);
                                        let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                        let v104 = constructor_x64_paddq(ctx, v93, v94);
                                        let v105 = constructor_output_xmm(ctx, v104);
                                        let v106 = Some(v105);
                                        // Rule at src\isa\x64\lower.isle line 92.
                                        return v106;
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v82 = &C::sinkable_load(ctx, v59.0);
                            if let Some(v83) = v82 {
                                let v84 = constructor_put_in_gpr(ctx, v59.1);
                                let v85 = &constructor_sink_load_to_gpr_mem_imm(ctx, v83);
                                let v86 = constructor_x64_add(ctx, v5, v84, v85);
                                let v87 = constructor_output_gpr(ctx, v86);
                                let v88 = Some(v87);
                                // Rule at src\isa\x64\lower.isle line 74.
                                return v88;
                            }
                            let v76 = &C::sinkable_load(ctx, v59.1);
                            if let Some(v77) = v76 {
                                let v62 = constructor_put_in_gpr(ctx, v59.0);
                                let v78 = &constructor_sink_load_to_gpr_mem_imm(ctx, v77);
                                let v79 = constructor_x64_add(ctx, v5, v62, v78);
                                let v80 = constructor_output_gpr(ctx, v79);
                                let v81 = Some(v80);
                                // Rule at src\isa\x64\lower.isle line 71.
                                return v81;
                            }
                        }
                        let v67 = C::ty_32_or_64(ctx, v3);
                        if let Some(v68) = v67 {
                            let v70 = C::zero_offset(ctx);
                            let v69 = C::mem_flags_trusted(ctx);
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v71 = &constructor_to_amode_add(ctx, v69, v59.0, v59.1, v70);
                            let v72 = &C::amode_to_synthetic_amode(ctx, v71);
                            let v73 = constructor_x64_lea(ctx, v68, v72);
                            let v74 = constructor_output_gpr(ctx, v73);
                            let v75 = Some(v74);
                            // Rule at src\isa\x64\lower.isle line 65.
                            return v75;
                        }
                        let v55 = C::fits_in_16(ctx, v3);
                        if let Some(v56) = v55 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v62 = constructor_put_in_gpr(ctx, v59.0);
                            let v63 = &constructor_put_in_gpr_mem_imm(ctx, v59.1);
                            let v64 = constructor_x64_add(ctx, v56, v62, v63);
                            let v65 = constructor_output_gpr(ctx, v64);
                            let v66 = Some(v65);
                            // Rule at src\isa\x64\lower.isle line 54.
                            return v66;
                        }
                    }
                }
                &Opcode::Isub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v120 = C::def_inst(ctx, v59.1);
                            if let Some(v121) = v120 {
                                let v122 = &C::inst_data_value(ctx, v121);
                                match v122 {
                                    &InstructionData::Binary {
                                        opcode: ref v123,
                                        args: ref v124,
                                    } => {
                                        if let &Opcode::Iconcat = v123 {
                                            let v107 = C::put_in_regs(ctx, v59.0);
                                            let v128 = C::put_in_regs(ctx, v59.0);
                                            let v129 = constructor_value_regs_get_gpr(ctx, v128, 0x0_usize);
                                            let v130 = C::put_in_regs(ctx, v59.0);
                                            let v131 = constructor_value_regs_get_gpr(ctx, v130, 0x1_usize);
                                            let v125 = C::unpack_value_array_2(ctx, v124);
                                            let v132 = &constructor_put_in_gpr_mem_imm(ctx, v125.0);
                                            let v133 = &constructor_put_in_gpr_mem_imm(ctx, v125.1);
                                            let v239 = constructor_isub128(ctx, v129, v131, v132, v133);
                                            let v240 = C::output(ctx, v239);
                                            let v241 = Some(v240);
                                            // Rule at src\isa\x64\lower.isle line 279.
                                            return v241;
                                        }
                                    }
                                    &InstructionData::Unary {
                                        opcode: ref v137,
                                        arg: v138,
                                    } => {
                                        if let &Opcode::Uextend = v137 {
                                            let v139 = C::value_type(ctx, v138);
                                            if v139 == I64 {
                                                let v107 = C::put_in_regs(ctx, v59.0);
                                                let v128 = C::put_in_regs(ctx, v59.0);
                                                let v129 = constructor_value_regs_get_gpr(ctx, v128, 0x0_usize);
                                                let v130 = C::put_in_regs(ctx, v59.0);
                                                let v131 = constructor_value_regs_get_gpr(ctx, v130, 0x1_usize);
                                                let v140 = &constructor_put_in_gpr_mem_imm(ctx, v138);
                                                let v142 = RegMemImm::Imm {
                                                    simm32: 0x0_u32,
                                                };
                                                let v143 = &C::gpr_mem_imm_new(ctx, &v142);
                                                let v242 = constructor_isub128(ctx, v129, v131, v140, v143);
                                                let v243 = C::output(ctx, v242);
                                                let v244 = Some(v243);
                                                // Rule at src\isa\x64\lower.isle line 282.
                                                return v244;
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                            let v107 = C::put_in_regs(ctx, v59.0);
                            let v108 = C::put_in_regs(ctx, v59.1);
                            let v110 = constructor_value_regs_get_gpr(ctx, v107, 0x0_usize);
                            let v112 = constructor_value_regs_get_gpr(ctx, v107, 0x1_usize);
                            let v113 = constructor_value_regs_get_gpr(ctx, v108, 0x0_usize);
                            let v114 = &C::gpr_to_gpr_mem_imm(ctx, v113);
                            let v115 = constructor_value_regs_get_gpr(ctx, v108, 0x1_usize);
                            let v116 = &C::gpr_to_gpr_mem_imm(ctx, v115);
                            let v236 = constructor_isub128(ctx, v110, v112, v114, v116);
                            let v237 = C::output(ctx, v236);
                            let v238 = Some(v237);
                            // Rule at src\isa\x64\lower.isle line 270.
                            return v238;
                        }
                        let v89 = C::multi_lane(ctx, v3);
                        if let Some(v90) = v89 {
                            match v90.0 {
                                0x8_u32 => {
                                    if v90.1 == 0x10_u32 {
                                        let v59 = C::unpack_value_array_2(ctx, v58);
                                        let v93 = constructor_put_in_xmm(ctx, v59.0);
                                        let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                        let v224 = constructor_x64_psubb(ctx, v93, v94);
                                        let v225 = constructor_output_xmm(ctx, v224);
                                        let v226 = Some(v225);
                                        // Rule at src\isa\x64\lower.isle line 253.
                                        return v226;
                                    }
                                }
                                0x10_u32 => {
                                    if v90.1 == 0x8_u32 {
                                        let v59 = C::unpack_value_array_2(ctx, v58);
                                        let v93 = constructor_put_in_xmm(ctx, v59.0);
                                        let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                        let v227 = constructor_x64_psubw(ctx, v93, v94);
                                        let v228 = constructor_output_xmm(ctx, v227);
                                        let v229 = Some(v228);
                                        // Rule at src\isa\x64\lower.isle line 257.
                                        return v229;
                                    }
                                }
                                0x20_u32 => {
                                    if v90.1 == 0x4_u32 {
                                        let v59 = C::unpack_value_array_2(ctx, v58);
                                        let v93 = constructor_put_in_xmm(ctx, v59.0);
                                        let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                        let v230 = constructor_x64_psubd(ctx, v93, v94);
                                        let v231 = constructor_output_xmm(ctx, v230);
                                        let v232 = Some(v231);
                                        // Rule at src\isa\x64\lower.isle line 261.
                                        return v232;
                                    }
                                }
                                0x40_u32 => {
                                    if v90.1 == 0x2_u32 {
                                        let v59 = C::unpack_value_array_2(ctx, v58);
                                        let v93 = constructor_put_in_xmm(ctx, v59.0);
                                        let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                        let v233 = constructor_x64_psubq(ctx, v93, v94);
                                        let v234 = constructor_output_xmm(ctx, v233);
                                        let v235 = Some(v234);
                                        // Rule at src\isa\x64\lower.isle line 265.
                                        return v235;
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v62 = constructor_put_in_gpr(ctx, v59.0);
                            let v63 = &constructor_put_in_gpr_mem_imm(ctx, v59.1);
                            let v221 = constructor_x64_sub(ctx, v5, v62, v63);
                            let v222 = constructor_output_gpr(ctx, v221);
                            let v223 = Some(v222);
                            // Rule at src\isa\x64\lower.isle line 247.
                            return v223;
                        }
                    }
                }
                &Opcode::Imul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v120 = C::def_inst(ctx, v59.1);
                            if let Some(v121) = v120 {
                                let v122 = &C::inst_data_value(ctx, v121);
                                match v122 {
                                    &InstructionData::Binary {
                                        opcode: ref v123,
                                        args: ref v124,
                                    } => {
                                        if let &Opcode::Iconcat = v123 {
                                            let v147 = C::def_inst(ctx, v59.0);
                                            if let Some(v148) = v147 {
                                                let v149 = &C::inst_data_value(ctx, v148);
                                                if let &InstructionData::Binary {
                                                    opcode: ref v365,
                                                    args: ref v366,
                                                } = v149 {
                                                    if let &Opcode::Iconcat = v365 {
                                                        let v367 = C::unpack_value_array_2(ctx, v366);
                                                        let v390 = constructor_put_in_gpr(ctx, v367.0);
                                                        let v654 = constructor_put_in_gpr(ctx, v367.1);
                                                        let v125 = C::unpack_value_array_2(ctx, v124);
                                                        let v655 = &constructor_put_in_gpr_mem(ctx, v125.0);
                                                        let v656 = &constructor_put_in_gpr_mem(ctx, v125.1);
                                                        let v657 = constructor_imul128(ctx, v390, v654, v655, v656);
                                                        let v658 = C::output(ctx, v657);
                                                        let v659 = Some(v658);
                                                        // Rule at src\isa\x64\lower.isle line 1071.
                                                        return v659;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    &InstructionData::Unary {
                                        opcode: ref v137,
                                        arg: v138,
                                    } => {
                                        match v137 {
                                            &Opcode::Uextend => {
                                                let v139 = C::value_type(ctx, v138);
                                                if v139 == I64 {
                                                    let v147 = C::def_inst(ctx, v59.0);
                                                    if let Some(v148) = v147 {
                                                        let v149 = &C::inst_data_value(ctx, v148);
                                                        if let &InstructionData::Unary {
                                                            opcode: ref v150,
                                                            arg: v151,
                                                        } = v149 {
                                                            if let &Opcode::Uextend = v150 {
                                                                let v660 = C::value_type(ctx, v151);
                                                                if v660 == I64 {
                                                                    let v296 = constructor_put_in_gpr(ctx, v151);
                                                                    let v642 = &constructor_put_in_gpr_mem(ctx, v138);
                                                                    let v192 = false;
                                                                    let v661 = constructor_x64_mul(ctx, I64, v192, v296, v642);
                                                                    let v662 = C::output(ctx, v661);
                                                                    let v663 = Some(v662);
                                                                    // Rule at src\isa\x64\lower.isle line 1113.
                                                                    return v663;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::Sextend => {
                                                let v139 = C::value_type(ctx, v138);
                                                if v139 == I64 {
                                                    let v147 = C::def_inst(ctx, v59.0);
                                                    if let Some(v148) = v147 {
                                                        let v149 = &C::inst_data_value(ctx, v148);
                                                        if let &InstructionData::Unary {
                                                            opcode: ref v150,
                                                            arg: v151,
                                                        } = v149 {
                                                            if let &Opcode::Sextend = v150 {
                                                                let v660 = C::value_type(ctx, v151);
                                                                if v660 == I64 {
                                                                    let v296 = constructor_put_in_gpr(ctx, v151);
                                                                    let v642 = &constructor_put_in_gpr_mem(ctx, v138);
                                                                    let v202 = true;
                                                                    let v664 = constructor_x64_mul(ctx, I64, v202, v296, v642);
                                                                    let v665 = C::output(ctx, v664);
                                                                    let v666 = Some(v665);
                                                                    // Rule at src\isa\x64\lower.isle line 1116.
                                                                    return v666;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        let v89 = C::multi_lane(ctx, v3);
                        if let Some(v90) = v89 {
                            if v90.0 == 0x40_u32 {
                                if v90.1 == 0x2_u32 {
                                    let v516 = C::use_avx512vl(ctx);
                                    if v516 == true {
                                        let v692 = C::use_avx512dq(ctx);
                                        if v692 == true {
                                            let v59 = C::unpack_value_array_2(ctx, v58);
                                            let v93 = constructor_put_in_xmm(ctx, v59.0);
                                            let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                            let v693 = constructor_x64_vpmullq(ctx, v93, v94);
                                            let v694 = constructor_output_xmm(ctx, v693);
                                            let v695 = Some(v694);
                                            // Rule at src\isa\x64\lower.isle line 1147.
                                            return v695;
                                        }
                                    }
                                }
                            }
                        }
                        if v3 == I128 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v107 = C::put_in_regs(ctx, v59.0);
                            let v108 = C::put_in_regs(ctx, v59.1);
                            let v110 = constructor_value_regs_get_gpr(ctx, v107, 0x0_usize);
                            let v112 = constructor_value_regs_get_gpr(ctx, v107, 0x1_usize);
                            let v113 = constructor_value_regs_get_gpr(ctx, v108, 0x0_usize);
                            let v649 = &C::gpr_to_gpr_mem(ctx, v113);
                            let v115 = constructor_value_regs_get_gpr(ctx, v108, 0x1_usize);
                            let v650 = &C::gpr_to_gpr_mem(ctx, v115);
                            let v651 = constructor_imul128(ctx, v110, v112, v649, v650);
                            let v652 = C::output(ctx, v651);
                            let v653 = Some(v652);
                            // Rule at src\isa\x64\lower.isle line 1062.
                            return v653;
                        }
                        if let Some(v90) = v89 {
                            match v90.0 {
                                0x10_u32 => {
                                    if v90.1 == 0x8_u32 {
                                        let v59 = C::unpack_value_array_2(ctx, v58);
                                        let v93 = constructor_put_in_xmm(ctx, v59.0);
                                        let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                        let v667 = constructor_x64_pmullw(ctx, v93, v94);
                                        let v668 = constructor_output_xmm(ctx, v667);
                                        let v669 = Some(v668);
                                        // Rule at src\isa\x64\lower.isle line 1124.
                                        return v669;
                                    }
                                }
                                0x20_u32 => {
                                    if v90.1 == 0x4_u32 {
                                        let v59 = C::unpack_value_array_2(ctx, v58);
                                        let v120 = C::def_inst(ctx, v59.1);
                                        if let Some(v121) = v120 {
                                            let v122 = &C::inst_data_value(ctx, v121);
                                            if let &InstructionData::Unary {
                                                opcode: ref v137,
                                                arg: v138,
                                            } = v122 {
                                                match v137 {
                                                    &Opcode::SwidenLow => {
                                                        let v147 = C::def_inst(ctx, v59.0);
                                                        if let Some(v148) = v147 {
                                                            let v149 = &C::inst_data_value(ctx, v148);
                                                            if let &InstructionData::Unary {
                                                                opcode: ref v150,
                                                                arg: v151,
                                                            } = v149 {
                                                                if let &Opcode::SwidenLow = v150 {
                                                                    let v660 = C::value_type(ctx, v151);
                                                                    let v714 = C::multi_lane(ctx, v660);
                                                                    if let Some(v715) = v714 {
                                                                        if v715.0 == 0x10_u32 {
                                                                            if v715.1 == 0x8_u32 {
                                                                                let v139 = C::value_type(ctx, v138);
                                                                                let v718 = C::multi_lane(ctx, v139);
                                                                                if let Some(v719) = v718 {
                                                                                    if v719.0 == 0x10_u32 {
                                                                                        if v719.1 == 0x8_u32 {
                                                                                            let v286 = constructor_put_in_xmm(ctx, v151);
                                                                                            let v722 = constructor_put_in_xmm(ctx, v138);
                                                                                            let v723 = &C::xmm_to_xmm_mem(ctx, v722);
                                                                                            let v724 = constructor_x64_pmullw(ctx, v286, v723);
                                                                                            let v725 = &C::xmm_to_xmm_mem(ctx, v722);
                                                                                            let v726 = constructor_x64_pmulhw(ctx, v286, v725);
                                                                                            let v727 = &C::xmm_to_xmm_mem(ctx, v726);
                                                                                            let v740 = constructor_x64_punpcklwd(ctx, v724, v727);
                                                                                            let v741 = constructor_output_xmm(ctx, v740);
                                                                                            let v742 = Some(v741);
                                                                                            // Rule at src\isa\x64\lower.isle line 1217.
                                                                                            return v742;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &Opcode::SwidenHigh => {
                                                        let v147 = C::def_inst(ctx, v59.0);
                                                        if let Some(v148) = v147 {
                                                            let v149 = &C::inst_data_value(ctx, v148);
                                                            if let &InstructionData::Unary {
                                                                opcode: ref v150,
                                                                arg: v151,
                                                            } = v149 {
                                                                if let &Opcode::SwidenHigh = v150 {
                                                                    let v660 = C::value_type(ctx, v151);
                                                                    let v714 = C::multi_lane(ctx, v660);
                                                                    if let Some(v715) = v714 {
                                                                        if v715.0 == 0x10_u32 {
                                                                            if v715.1 == 0x8_u32 {
                                                                                let v139 = C::value_type(ctx, v138);
                                                                                let v718 = C::multi_lane(ctx, v139);
                                                                                if let Some(v719) = v718 {
                                                                                    if v719.0 == 0x10_u32 {
                                                                                        if v719.1 == 0x8_u32 {
                                                                                            let v286 = constructor_put_in_xmm(ctx, v151);
                                                                                            let v722 = constructor_put_in_xmm(ctx, v138);
                                                                                            let v723 = &C::xmm_to_xmm_mem(ctx, v722);
                                                                                            let v724 = constructor_x64_pmullw(ctx, v286, v723);
                                                                                            let v725 = &C::xmm_to_xmm_mem(ctx, v722);
                                                                                            let v726 = constructor_x64_pmulhw(ctx, v286, v725);
                                                                                            let v727 = &C::xmm_to_xmm_mem(ctx, v726);
                                                                                            let v728 = constructor_x64_punpckhwd(ctx, v724, v727);
                                                                                            let v729 = constructor_output_xmm(ctx, v728);
                                                                                            let v730 = Some(v729);
                                                                                            // Rule at src\isa\x64\lower.isle line 1194.
                                                                                            return v730;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &Opcode::UwidenLow => {
                                                        let v147 = C::def_inst(ctx, v59.0);
                                                        if let Some(v148) = v147 {
                                                            let v149 = &C::inst_data_value(ctx, v148);
                                                            if let &InstructionData::Unary {
                                                                opcode: ref v150,
                                                                arg: v151,
                                                            } = v149 {
                                                                if let &Opcode::UwidenLow = v150 {
                                                                    let v660 = C::value_type(ctx, v151);
                                                                    let v714 = C::multi_lane(ctx, v660);
                                                                    if let Some(v715) = v714 {
                                                                        if v715.0 == 0x10_u32 {
                                                                            if v715.1 == 0x8_u32 {
                                                                                let v139 = C::value_type(ctx, v138);
                                                                                let v718 = C::multi_lane(ctx, v139);
                                                                                if let Some(v719) = v718 {
                                                                                    if v719.0 == 0x10_u32 {
                                                                                        if v719.1 == 0x8_u32 {
                                                                                            let v286 = constructor_put_in_xmm(ctx, v151);
                                                                                            let v722 = constructor_put_in_xmm(ctx, v138);
                                                                                            let v723 = &C::xmm_to_xmm_mem(ctx, v722);
                                                                                            let v724 = constructor_x64_pmullw(ctx, v286, v723);
                                                                                            let v725 = &C::xmm_to_xmm_mem(ctx, v722);
                                                                                            let v750 = constructor_x64_pmulhuw(ctx, v286, v725);
                                                                                            let v751 = &C::xmm_to_xmm_mem(ctx, v750);
                                                                                            let v758 = constructor_x64_punpcklwd(ctx, v724, v751);
                                                                                            let v759 = constructor_output_xmm(ctx, v758);
                                                                                            let v760 = Some(v759);
                                                                                            // Rule at src\isa\x64\lower.isle line 1262.
                                                                                            return v760;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &Opcode::UwidenHigh => {
                                                        let v147 = C::def_inst(ctx, v59.0);
                                                        if let Some(v148) = v147 {
                                                            let v149 = &C::inst_data_value(ctx, v148);
                                                            if let &InstructionData::Unary {
                                                                opcode: ref v150,
                                                                arg: v151,
                                                            } = v149 {
                                                                if let &Opcode::UwidenHigh = v150 {
                                                                    let v660 = C::value_type(ctx, v151);
                                                                    let v714 = C::multi_lane(ctx, v660);
                                                                    if let Some(v715) = v714 {
                                                                        if v715.0 == 0x10_u32 {
                                                                            if v715.1 == 0x8_u32 {
                                                                                let v139 = C::value_type(ctx, v138);
                                                                                let v718 = C::multi_lane(ctx, v139);
                                                                                if let Some(v719) = v718 {
                                                                                    if v719.0 == 0x10_u32 {
                                                                                        if v719.1 == 0x8_u32 {
                                                                                            let v286 = constructor_put_in_xmm(ctx, v151);
                                                                                            let v722 = constructor_put_in_xmm(ctx, v138);
                                                                                            let v723 = &C::xmm_to_xmm_mem(ctx, v722);
                                                                                            let v724 = constructor_x64_pmullw(ctx, v286, v723);
                                                                                            let v725 = &C::xmm_to_xmm_mem(ctx, v722);
                                                                                            let v750 = constructor_x64_pmulhuw(ctx, v286, v725);
                                                                                            let v751 = &C::xmm_to_xmm_mem(ctx, v750);
                                                                                            let v752 = constructor_x64_punpckhwd(ctx, v724, v751);
                                                                                            let v753 = constructor_output_xmm(ctx, v752);
                                                                                            let v754 = Some(v753);
                                                                                            // Rule at src\isa\x64\lower.isle line 1240.
                                                                                            return v754;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                        let v670 = C::use_sse41(ctx);
                                        if v670 == true {
                                            let v93 = constructor_put_in_xmm(ctx, v59.0);
                                            let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                            let v671 = constructor_x64_pmulld(ctx, v93, v94);
                                            let v672 = constructor_output_xmm(ctx, v671);
                                            let v673 = Some(v672);
                                            // Rule at src\isa\x64\lower.isle line 1127.
                                            return v673;
                                        }
                                        let v93 = constructor_put_in_xmm(ctx, v59.0);
                                        let v674 = constructor_put_in_xmm(ctx, v59.1);
                                        let v497 = &C::xmm_to_xmm_mem(ctx, v93);
                                        let v676 = constructor_x64_pshufd(ctx, v497, 0x31_u8);
                                        let v677 = &C::xmm_to_xmm_mem(ctx, v674);
                                        let v678 = constructor_x64_pshufd(ctx, v677, 0x31_u8);
                                        let v679 = &C::xmm_to_xmm_mem(ctx, v674);
                                        let v680 = constructor_x64_pmuludq(ctx, v93, v679);
                                        let v681 = &C::xmm_to_xmm_mem(ctx, v680);
                                        let v683 = constructor_x64_pshufd(ctx, v681, 0x8_u8);
                                        let v684 = &C::xmm_to_xmm_mem(ctx, v678);
                                        let v685 = constructor_x64_pmuludq(ctx, v676, v684);
                                        let v686 = &C::xmm_to_xmm_mem(ctx, v685);
                                        let v687 = constructor_x64_pshufd(ctx, v686, 0x8_u8);
                                        let v688 = &C::xmm_to_xmm_mem(ctx, v687);
                                        let v689 = constructor_x64_punpckldq(ctx, v683, v688);
                                        let v690 = constructor_output_xmm(ctx, v689);
                                        let v691 = Some(v690);
                                        // Rule at src\isa\x64\lower.isle line 1134.
                                        return v691;
                                    }
                                }
                                0x40_u32 => {
                                    if v90.1 == 0x2_u32 {
                                        let v59 = C::unpack_value_array_2(ctx, v58);
                                        let v120 = C::def_inst(ctx, v59.1);
                                        if let Some(v121) = v120 {
                                            let v122 = &C::inst_data_value(ctx, v121);
                                            if let &InstructionData::Unary {
                                                opcode: ref v137,
                                                arg: v138,
                                            } = v122 {
                                                match v137 {
                                                    &Opcode::SwidenLow => {
                                                        let v147 = C::def_inst(ctx, v59.0);
                                                        if let Some(v148) = v147 {
                                                            let v149 = &C::inst_data_value(ctx, v148);
                                                            if let &InstructionData::Unary {
                                                                opcode: ref v150,
                                                                arg: v151,
                                                            } = v149 {
                                                                if let &Opcode::SwidenLow = v150 {
                                                                    let v670 = C::use_sse41(ctx);
                                                                    if v670 == true {
                                                                        let v660 = C::value_type(ctx, v151);
                                                                        let v714 = C::multi_lane(ctx, v660);
                                                                        if let Some(v715) = v714 {
                                                                            if v715.0 == 0x20_u32 {
                                                                                if v715.1 == 0x4_u32 {
                                                                                    let v139 = C::value_type(ctx, v138);
                                                                                    let v718 = C::multi_lane(ctx, v139);
                                                                                    if let Some(v719) = v718 {
                                                                                        if v719.0 == 0x20_u32 {
                                                                                            if v719.1 == 0x4_u32 {
                                                                                                let v731 = &C::put_in_xmm_mem(ctx, v151);
                                                                                                let v744 = constructor_x64_pshufd(ctx, v731, 0x50_u8);
                                                                                                let v734 = &C::put_in_xmm_mem(ctx, v138);
                                                                                                let v745 = constructor_x64_pshufd(ctx, v734, 0x50_u8);
                                                                                                let v746 = &C::xmm_to_xmm_mem(ctx, v745);
                                                                                                let v747 = constructor_x64_pmuldq(ctx, v744, v746);
                                                                                                let v748 = constructor_output_xmm(ctx, v747);
                                                                                                let v749 = Some(v748);
                                                                                                // Rule at src\isa\x64\lower.isle line 1229.
                                                                                                return v749;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &Opcode::SwidenHigh => {
                                                        let v147 = C::def_inst(ctx, v59.0);
                                                        if let Some(v148) = v147 {
                                                            let v149 = &C::inst_data_value(ctx, v148);
                                                            if let &InstructionData::Unary {
                                                                opcode: ref v150,
                                                                arg: v151,
                                                            } = v149 {
                                                                if let &Opcode::SwidenHigh = v150 {
                                                                    let v670 = C::use_sse41(ctx);
                                                                    if v670 == true {
                                                                        let v660 = C::value_type(ctx, v151);
                                                                        let v714 = C::multi_lane(ctx, v660);
                                                                        if let Some(v715) = v714 {
                                                                            if v715.0 == 0x20_u32 {
                                                                                if v715.1 == 0x4_u32 {
                                                                                    let v139 = C::value_type(ctx, v138);
                                                                                    let v718 = C::multi_lane(ctx, v139);
                                                                                    if let Some(v719) = v718 {
                                                                                        if v719.0 == 0x20_u32 {
                                                                                            if v719.1 == 0x4_u32 {
                                                                                                let v731 = &C::put_in_xmm_mem(ctx, v151);
                                                                                                let v733 = constructor_x64_pshufd(ctx, v731, 0xfa_u8);
                                                                                                let v734 = &C::put_in_xmm_mem(ctx, v138);
                                                                                                let v735 = constructor_x64_pshufd(ctx, v734, 0xfa_u8);
                                                                                                let v736 = &C::xmm_to_xmm_mem(ctx, v735);
                                                                                                let v737 = constructor_x64_pmuldq(ctx, v733, v736);
                                                                                                let v738 = constructor_output_xmm(ctx, v737);
                                                                                                let v739 = Some(v738);
                                                                                                // Rule at src\isa\x64\lower.isle line 1206.
                                                                                                return v739;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &Opcode::UwidenLow => {
                                                        let v147 = C::def_inst(ctx, v59.0);
                                                        if let Some(v148) = v147 {
                                                            let v149 = &C::inst_data_value(ctx, v148);
                                                            if let &InstructionData::Unary {
                                                                opcode: ref v150,
                                                                arg: v151,
                                                            } = v149 {
                                                                if let &Opcode::UwidenLow = v150 {
                                                                    let v660 = C::value_type(ctx, v151);
                                                                    let v714 = C::multi_lane(ctx, v660);
                                                                    if let Some(v715) = v714 {
                                                                        if v715.0 == 0x20_u32 {
                                                                            if v715.1 == 0x4_u32 {
                                                                                let v139 = C::value_type(ctx, v138);
                                                                                let v718 = C::multi_lane(ctx, v139);
                                                                                if let Some(v719) = v718 {
                                                                                    if v719.0 == 0x20_u32 {
                                                                                        if v719.1 == 0x4_u32 {
                                                                                            let v731 = &C::put_in_xmm_mem(ctx, v151);
                                                                                            let v744 = constructor_x64_pshufd(ctx, v731, 0x50_u8);
                                                                                            let v734 = &C::put_in_xmm_mem(ctx, v138);
                                                                                            let v745 = constructor_x64_pshufd(ctx, v734, 0x50_u8);
                                                                                            let v746 = &C::xmm_to_xmm_mem(ctx, v745);
                                                                                            let v761 = constructor_x64_pmuludq(ctx, v744, v746);
                                                                                            let v762 = constructor_output_xmm(ctx, v761);
                                                                                            let v763 = Some(v762);
                                                                                            // Rule at src\isa\x64\lower.isle line 1274.
                                                                                            return v763;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &Opcode::UwidenHigh => {
                                                        let v147 = C::def_inst(ctx, v59.0);
                                                        if let Some(v148) = v147 {
                                                            let v149 = &C::inst_data_value(ctx, v148);
                                                            if let &InstructionData::Unary {
                                                                opcode: ref v150,
                                                                arg: v151,
                                                            } = v149 {
                                                                if let &Opcode::UwidenHigh = v150 {
                                                                    let v660 = C::value_type(ctx, v151);
                                                                    let v714 = C::multi_lane(ctx, v660);
                                                                    if let Some(v715) = v714 {
                                                                        if v715.0 == 0x20_u32 {
                                                                            if v715.1 == 0x4_u32 {
                                                                                let v139 = C::value_type(ctx, v138);
                                                                                let v718 = C::multi_lane(ctx, v139);
                                                                                if let Some(v719) = v718 {
                                                                                    if v719.0 == 0x20_u32 {
                                                                                        if v719.1 == 0x4_u32 {
                                                                                            let v731 = &C::put_in_xmm_mem(ctx, v151);
                                                                                            let v733 = constructor_x64_pshufd(ctx, v731, 0xfa_u8);
                                                                                            let v734 = &C::put_in_xmm_mem(ctx, v138);
                                                                                            let v735 = constructor_x64_pshufd(ctx, v734, 0xfa_u8);
                                                                                            let v736 = &C::xmm_to_xmm_mem(ctx, v735);
                                                                                            let v755 = constructor_x64_pmuludq(ctx, v733, v736);
                                                                                            let v756 = constructor_output_xmm(ctx, v755);
                                                                                            let v757 = Some(v756);
                                                                                            // Rule at src\isa\x64\lower.isle line 1252.
                                                                                            return v757;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                        let v93 = constructor_put_in_xmm(ctx, v59.0);
                                        let v674 = constructor_put_in_xmm(ctx, v59.1);
                                        let v697 = &C::xmi_imm(ctx, 0x20_u32);
                                        let v698 = constructor_x64_psrlq(ctx, v93, v697);
                                        let v677 = &C::xmm_to_xmm_mem(ctx, v674);
                                        let v699 = constructor_x64_pmuludq(ctx, v698, v677);
                                        let v700 = &C::xmi_imm(ctx, 0x20_u32);
                                        let v701 = constructor_x64_psrlq(ctx, v674, v700);
                                        let v702 = &C::xmm_to_xmm_mem(ctx, v701);
                                        let v703 = constructor_x64_pmuludq(ctx, v93, v702);
                                        let v704 = &C::xmm_to_xmm_mem(ctx, v703);
                                        let v705 = constructor_x64_paddq(ctx, v699, v704);
                                        let v706 = &C::xmi_imm(ctx, 0x20_u32);
                                        let v707 = constructor_x64_psllq(ctx, v705, v706);
                                        let v708 = &C::xmm_to_xmm_mem(ctx, v674);
                                        let v709 = constructor_x64_pmuludq(ctx, v93, v708);
                                        let v710 = &C::xmm_to_xmm_mem(ctx, v707);
                                        let v711 = constructor_x64_paddq(ctx, v709, v710);
                                        let v712 = constructor_output_xmm(ctx, v711);
                                        let v713 = Some(v712);
                                        // Rule at src\isa\x64\lower.isle line 1172.
                                        return v713;
                                    }
                                }
                                _ => {}
                            }
                        }
                        if v3 == I16 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v120 = C::def_inst(ctx, v59.1);
                            if let Some(v121) = v120 {
                                let v122 = &C::inst_data_value(ctx, v121);
                                if let &InstructionData::Unary {
                                    opcode: ref v137,
                                    arg: v138,
                                } = v122 {
                                    match v137 {
                                        &Opcode::Uextend => {
                                            let v147 = C::def_inst(ctx, v59.0);
                                            if let Some(v148) = v147 {
                                                let v149 = &C::inst_data_value(ctx, v148);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v150,
                                                    arg: v151,
                                                } = v149 {
                                                    if let &Opcode::Uextend = v150 {
                                                        let v296 = constructor_put_in_gpr(ctx, v151);
                                                        let v642 = &constructor_put_in_gpr_mem(ctx, v138);
                                                        let v192 = false;
                                                        let v646 = constructor_x64_mul8(ctx, v192, v296, v642);
                                                        let v647 = constructor_output_gpr(ctx, v646);
                                                        let v648 = Some(v647);
                                                        // Rule at src\isa\x64\lower.isle line 1057.
                                                        return v648;
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Sextend => {
                                            let v147 = C::def_inst(ctx, v59.0);
                                            if let Some(v148) = v147 {
                                                let v149 = &C::inst_data_value(ctx, v148);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v150,
                                                    arg: v151,
                                                } = v149 {
                                                    if let &Opcode::Sextend = v150 {
                                                        let v296 = constructor_put_in_gpr(ctx, v151);
                                                        let v642 = &constructor_put_in_gpr_mem(ctx, v138);
                                                        let v202 = true;
                                                        let v643 = constructor_x64_mul8(ctx, v202, v296, v642);
                                                        let v644 = constructor_output_gpr(ctx, v643);
                                                        let v645 = Some(v644);
                                                        // Rule at src\isa\x64\lower.isle line 1055.
                                                        return v645;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                        }
                        let v363 = C::ty_int_ref_16_to_64(ctx, v3);
                        if let Some(v364) = v363 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v637 = C::i32_from_iconst(ctx, v59.0);
                            if let Some(v638) = v637 {
                                let v308 = &constructor_put_in_gpr_mem(ctx, v59.1);
                                let v639 = constructor_x64_imul_imm(ctx, v364, v308, v638);
                                let v640 = constructor_output_gpr(ctx, v639);
                                let v641 = Some(v640);
                                // Rule at src\isa\x64\lower.isle line 1049.
                                return v641;
                            }
                            let v632 = C::i32_from_iconst(ctx, v59.1);
                            if let Some(v633) = v632 {
                                let v302 = &constructor_put_in_gpr_mem(ctx, v59.0);
                                let v634 = constructor_x64_imul_imm(ctx, v364, v302, v633);
                                let v635 = constructor_output_gpr(ctx, v634);
                                let v636 = Some(v635);
                                // Rule at src\isa\x64\lower.isle line 1047.
                                return v636;
                            }
                            let v82 = &C::sinkable_load(ctx, v59.0);
                            if let Some(v83) = v82 {
                                let v84 = constructor_put_in_gpr(ctx, v59.1);
                                let v622 = &constructor_sink_load_to_gpr_mem(ctx, v83);
                                let v629 = constructor_x64_imul(ctx, v364, v84, v622);
                                let v630 = constructor_output_gpr(ctx, v629);
                                let v631 = Some(v630);
                                // Rule at src\isa\x64\lower.isle line 1043.
                                return v631;
                            }
                            let v62 = constructor_put_in_gpr(ctx, v59.0);
                            let v193 = &constructor_put_in_gpr_mem(ctx, v59.1);
                            let v626 = constructor_x64_imul(ctx, v364, v62, v193);
                            let v627 = constructor_output_gpr(ctx, v626);
                            let v628 = Some(v627);
                            // Rule at src\isa\x64\lower.isle line 1041.
                            return v628;
                        }
                        if v3 == I8 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v82 = &C::sinkable_load(ctx, v59.0);
                            if let Some(v83) = v82 {
                                let v84 = constructor_put_in_gpr(ctx, v59.1);
                                let v622 = &constructor_sink_load_to_gpr_mem(ctx, v83);
                                let v192 = false;
                                let v623 = constructor_x64_mul8(ctx, v192, v84, v622);
                                let v624 = constructor_output_gpr(ctx, v623);
                                let v625 = Some(v624);
                                // Rule at src\isa\x64\lower.isle line 1038.
                                return v625;
                            }
                            let v62 = constructor_put_in_gpr(ctx, v59.0);
                            let v193 = &constructor_put_in_gpr_mem(ctx, v59.1);
                            let v192 = false;
                            let v619 = constructor_x64_mul8(ctx, v192, v62, v193);
                            let v620 = constructor_output_gpr(ctx, v619);
                            let v621 = Some(v620);
                            // Rule at src\isa\x64\lower.isle line 1037.
                            return v621;
                        }
                    }
                }
                &Opcode::Umulhi => {
                    let v319 = C::use_bmi2(ctx);
                    if v319 == true {
                        let v59 = C::unpack_value_array_2(ctx, v58);
                        let v2859 = C::value_type(ctx, v59.0);
                        let v3040 = C::ty_32_or_64(ctx, v2859);
                        if let Some(v3041) = v3040 {
                            let v62 = constructor_put_in_gpr(ctx, v59.0);
                            let v193 = &constructor_put_in_gpr_mem(ctx, v59.1);
                            let v3042 = constructor_x64_mulx_hi(ctx, v3041, v62, v193);
                            let v3043 = constructor_output_gpr(ctx, v3042);
                            let v3044 = Some(v3043);
                            // Rule at src\isa\x64\lower.isle line 4456.
                            return v3044;
                        }
                    }
                    let v59 = C::unpack_value_array_2(ctx, v58);
                    let v2859 = C::value_type(ctx, v59.0);
                    let v3034 = C::ty_int_ref_16_to_64(ctx, v2859);
                    if let Some(v3035) = v3034 {
                        let v62 = constructor_put_in_gpr(ctx, v59.0);
                        let v193 = &constructor_put_in_gpr_mem(ctx, v59.1);
                        let v192 = false;
                        let v3036 = constructor_x64_mul(ctx, v3035, v192, v62, v193);
                        let v3037 = constructor_value_regs_get_gpr(ctx, v3036, 0x1_usize);
                        let v3038 = constructor_output_gpr(ctx, v3037);
                        let v3039 = Some(v3038);
                        // Rule at src\isa\x64\lower.isle line 4449.
                        return v3039;
                    }
                    if v2859 == I8 {
                        let v62 = constructor_put_in_gpr(ctx, v59.0);
                        let v193 = &constructor_put_in_gpr_mem(ctx, v59.1);
                        let v192 = false;
                        let v619 = constructor_x64_mul8(ctx, v192, v62, v193);
                        let v3030 = &C::imm8_to_imm8_gpr(ctx, 0x8_u8);
                        let v3031 = constructor_x64_shr(ctx, I16, v619, v3030);
                        let v3032 = constructor_output_gpr(ctx, v3031);
                        let v3033 = Some(v3032);
                        // Rule at src\isa\x64\lower.isle line 4446.
                        return v3033;
                    }
                }
                &Opcode::Smulhi => {
                    let v59 = C::unpack_value_array_2(ctx, v58);
                    let v2859 = C::value_type(ctx, v59.0);
                    let v3034 = C::ty_int_ref_16_to_64(ctx, v2859);
                    if let Some(v3035) = v3034 {
                        let v62 = constructor_put_in_gpr(ctx, v59.0);
                        let v193 = &constructor_put_in_gpr_mem(ctx, v59.1);
                        let v202 = true;
                        let v3049 = constructor_x64_mul(ctx, v3035, v202, v62, v193);
                        let v3050 = constructor_value_regs_get_gpr(ctx, v3049, 0x1_usize);
                        let v3051 = constructor_output_gpr(ctx, v3050);
                        let v3052 = Some(v3051);
                        // Rule at src\isa\x64\lower.isle line 4465.
                        return v3052;
                    }
                    if v2859 == I8 {
                        let v62 = constructor_put_in_gpr(ctx, v59.0);
                        let v193 = &constructor_put_in_gpr_mem(ctx, v59.1);
                        let v202 = true;
                        let v3045 = constructor_x64_mul8(ctx, v202, v62, v193);
                        let v3030 = &C::imm8_to_imm8_gpr(ctx, 0x8_u8);
                        let v3046 = constructor_x64_sar(ctx, I16, v3045, v3030);
                        let v3047 = constructor_output_gpr(ctx, v3046);
                        let v3048 = Some(v3047);
                        // Rule at src\isa\x64\lower.isle line 4462.
                        return v3048;
                    }
                }
                &Opcode::SqmulRoundSat => {
                    let v59 = C::unpack_value_array_2(ctx, v58);
                    let v2859 = C::value_type(ctx, v59.0);
                    if v2859 == I16X8 {
                        let v764 = C::use_ssse3(ctx);
                        if v764 == true {
                            let v93 = constructor_put_in_xmm(ctx, v59.0);
                            let v674 = constructor_put_in_xmm(ctx, v59.1);
                            let v3414 = C::emit_u128_le_const(ctx, 0x80008000800080008000800080008000_u128);
                            let v3415 = &constructor_const_to_xmm_mem(ctx, v3414);
                            let v677 = &C::xmm_to_xmm_mem(ctx, v674);
                            let v3416 = constructor_x64_pmulhrsw(ctx, v93, v677);
                            let v3417 = constructor_x64_pcmpeqw(ctx, v3416, v3415);
                            let v3418 = &C::xmm_to_xmm_mem(ctx, v3417);
                            let v3419 = constructor_x64_pxor(ctx, v3416, v3418);
                            let v3420 = constructor_output_xmm(ctx, v3419);
                            let v3421 = Some(v3420);
                            // Rule at src\isa\x64\lower.isle line 4941.
                            return v3421;
                        }
                        let v93 = constructor_put_in_xmm(ctx, v59.0);
                        let v674 = constructor_put_in_xmm(ctx, v59.1);
                        let v1883 = &C::xmm_to_xmm_mem(ctx, v674);
                        let v3422 = constructor_x64_pmullw(ctx, v93, v1883);
                        let v677 = &C::xmm_to_xmm_mem(ctx, v674);
                        let v3423 = constructor_x64_pmulhw(ctx, v93, v677);
                        let v3424 = &C::xmm_to_xmm_mem(ctx, v3423);
                        let v3425 = constructor_x64_punpcklwd(ctx, v3422, v3424);
                        let v3426 = &C::xmm_to_xmm_mem(ctx, v3423);
                        let v3427 = constructor_x64_punpckhwd(ctx, v3422, v3426);
                        let v3429 = C::emit_u128_le_const(ctx, 0x4000000040000000400000004000_u128);
                        let v3430 = &constructor_const_to_xmm_mem(ctx, v3429);
                        let v3431 = constructor_x64_movdqu_load(ctx, v3430);
                        let v3432 = &C::xmm_to_xmm_mem(ctx, v3431);
                        let v3433 = constructor_x64_paddd(ctx, v3425, v3432);
                        let v3434 = &C::xmm_to_xmm_mem(ctx, v3431);
                        let v3435 = constructor_x64_paddd(ctx, v3427, v3434);
                        let v3437 = &C::xmi_imm(ctx, 0xf_u32);
                        let v3438 = constructor_x64_psrad(ctx, v3433, v3437);
                        let v3439 = &C::xmi_imm(ctx, 0xf_u32);
                        let v3440 = constructor_x64_psrad(ctx, v3435, v3439);
                        let v3441 = &C::xmm_to_xmm_mem(ctx, v3440);
                        let v3442 = constructor_x64_packssdw(ctx, v3438, v3441);
                        let v3443 = constructor_output_xmm(ctx, v3442);
                        let v3444 = Some(v3443);
                        // Rule at src\isa\x64\lower.isle line 4957.
                        return v3444;
                    }
                }
                &Opcode::X86Pmulhrsw => {
                    let v764 = C::use_ssse3(ctx);
                    if v764 == true {
                        let v59 = C::unpack_value_array_2(ctx, v58);
                        let v2859 = C::value_type(ctx, v59.0);
                        if v2859 == I16X8 {
                            let v93 = constructor_put_in_xmm(ctx, v59.0);
                            let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                            let v3445 = constructor_x64_pmulhrsw(ctx, v93, v94);
                            let v3446 = constructor_output_xmm(ctx, v3445);
                            let v3447 = Some(v3446);
                            // Rule at src\isa\x64\lower.isle line 4983.
                            return v3447;
                        }
                    }
                }
                &Opcode::Udiv => {
                    let v59 = C::unpack_value_array_2(ctx, v58);
                    let v2859 = C::value_type(ctx, v59.0);
                    if v2859 == I8 {
                        let v2964 = constructor_extend_to_gpr(ctx, v59.0, I32, &ExtendKind::Zero);
                        let v543 = constructor_put_in_gpr(ctx, v59.1);
                        let v2965 = &C::gpr_to_gpr_mem(ctx, v543);
                        let v2968 = constructor_x64_div8(ctx, v2964, v2965, &DivSignedness::Unsigned, &TrapCode::INTEGER_DIVISION_BY_ZERO);
                        let v2969 = constructor_output_gpr(ctx, v2968);
                        let v2970 = Some(v2969);
                        // Rule at src\isa\x64\lower.isle line 4325.
                        return v2970;
                    }
                    let v2971 = C::fits_in_64(ctx, v2859);
                    if let Some(v2972) = v2971 {
                        let v62 = constructor_put_in_gpr(ctx, v59.0);
                        let v16 = constructor_imm(ctx, I64, 0x0_u64);
                        let v2973 = C::gpr_new(ctx, v16);
                        let v2974 = constructor_put_in_gpr(ctx, v59.1);
                        let v2975 = &C::gpr_to_gpr_mem(ctx, v2974);
                        let v2976 = &C::raw_operand_size_of_type(ctx, v2972);
                        let v2977 = constructor_x64_div_quotient(ctx, v62, v2973, v2975, v2976, &DivSignedness::Unsigned, &TrapCode::INTEGER_DIVISION_BY_ZERO);
                        let v2978 = C::output(ctx, v2977);
                        let v2979 = Some(v2978);
                        // Rule at src\isa\x64\lower.isle line 4334.
                        return v2979;
                    }
                }
                &Opcode::Sdiv => {
                    let v59 = C::unpack_value_array_2(ctx, v58);
                    let v2859 = C::value_type(ctx, v59.0);
                    if v2859 == I8 {
                        let v62 = constructor_put_in_gpr(ctx, v59.0);
                        let v2981 = constructor_x64_sign_extend_data(ctx, v62, &OperandSize::Size8);
                        let v2982 = constructor_nonzero_sdiv_divisor(ctx, I8, v59.1);
                        let v2983 = &C::reg_to_gpr_mem(ctx, v2982);
                        let v2986 = constructor_x64_div8(ctx, v2981, v2983, &DivSignedness::Signed, &TrapCode::INTEGER_OVERFLOW);
                        let v2987 = constructor_output_gpr(ctx, v2986);
                        let v2988 = Some(v2987);
                        // Rule at src\isa\x64\lower.isle line 4344.
                        return v2988;
                    }
                    let v2971 = C::fits_in_64(ctx, v2859);
                    if let Some(v2972) = v2971 {
                        let v62 = constructor_put_in_gpr(ctx, v59.0);
                        let v2989 = &C::raw_operand_size_of_type(ctx, v2972);
                        let v2990 = constructor_x64_sign_extend_data(ctx, v62, v2989);
                        let v2991 = constructor_nonzero_sdiv_divisor(ctx, v2972, v59.1);
                        let v2992 = &C::reg_to_gpr_mem(ctx, v2991);
                        let v2993 = constructor_x64_div_quotient(ctx, v62, v2990, v2992, v2989, &DivSignedness::Signed, &TrapCode::INTEGER_OVERFLOW);
                        let v2994 = C::output(ctx, v2993);
                        let v2995 = Some(v2994);
                        // Rule at src\isa\x64\lower.isle line 4350.
                        return v2995;
                    }
                }
                &Opcode::Urem => {
                    let v59 = C::unpack_value_array_2(ctx, v58);
                    let v2859 = C::value_type(ctx, v59.0);
                    if v2859 == I8 {
                        let v2964 = constructor_extend_to_gpr(ctx, v59.0, I32, &ExtendKind::Zero);
                        let v543 = constructor_put_in_gpr(ctx, v59.1);
                        let v2965 = &C::gpr_to_gpr_mem(ctx, v543);
                        let v2968 = constructor_x64_div8(ctx, v2964, v2965, &DivSignedness::Unsigned, &TrapCode::INTEGER_DIVISION_BY_ZERO);
                        let v1721 = Imm8Reg::Imm8 {
                            imm: 0x8_u8,
                        };
                        let v2996 = &C::imm8_reg_to_imm8_gpr(ctx, &v1721);
                        let v2997 = constructor_x64_shr(ctx, I64, v2968, v2996);
                        let v2998 = constructor_output_gpr(ctx, v2997);
                        let v2999 = Some(v2998);
                        // Rule at src\isa\x64\lower.isle line 4383.
                        return v2999;
                    }
                    let v2971 = C::fits_in_64(ctx, v2859);
                    if let Some(v2972) = v2971 {
                        let v62 = constructor_put_in_gpr(ctx, v59.0);
                        let v16 = constructor_imm(ctx, I64, 0x0_u64);
                        let v2973 = C::gpr_new(ctx, v16);
                        let v2974 = constructor_put_in_gpr(ctx, v59.1);
                        let v2975 = &C::gpr_to_gpr_mem(ctx, v2974);
                        let v2976 = &C::raw_operand_size_of_type(ctx, v2972);
                        let v3000 = constructor_x64_div_remainder(ctx, v62, v2973, v2975, v2976, &DivSignedness::Unsigned, &TrapCode::INTEGER_DIVISION_BY_ZERO);
                        let v3001 = C::output(ctx, v3000);
                        let v3002 = Some(v3001);
                        // Rule at src\isa\x64\lower.isle line 4392.
                        return v3002;
                    }
                }
                &Opcode::Srem => {
                    let v59 = C::unpack_value_array_2(ctx, v58);
                    let v120 = C::def_inst(ctx, v59.1);
                    if let Some(v121) = v120 {
                        let v122 = &C::inst_data_value(ctx, v121);
                        if let &InstructionData::UnaryImm {
                            opcode: ref v514,
                            imm: v515,
                        } = v122 {
                            if let &Opcode::Iconst = v514 {
                                let v2859 = C::value_type(ctx, v59.0);
                                if v2859 == I8 {
                                    let v3003 = C::safe_divisor_from_imm64(ctx, I8, v515);
                                    if let Some(v3004) = v3003 {
                                        let v62 = constructor_put_in_gpr(ctx, v59.0);
                                        let v2981 = constructor_x64_sign_extend_data(ctx, v62, &OperandSize::Size8);
                                        let v3005 = constructor_imm(ctx, I8, v3004);
                                        let v3006 = &C::reg_to_gpr_mem(ctx, v3005);
                                        let v3007 = constructor_x64_div8(ctx, v2981, v3006, &DivSignedness::Signed, &TrapCode::INTEGER_DIVISION_BY_ZERO);
                                        let v1721 = Imm8Reg::Imm8 {
                                            imm: 0x8_u8,
                                        };
                                        let v3008 = &C::imm8_reg_to_imm8_gpr(ctx, &v1721);
                                        let v3009 = constructor_x64_shr(ctx, I64, v3007, v3008);
                                        let v3010 = constructor_output_gpr(ctx, v3009);
                                        let v3011 = Some(v3010);
                                        // Rule at src\isa\x64\lower.isle line 4407.
                                        return v3011;
                                    }
                                }
                                let v3012 = C::safe_divisor_from_imm64(ctx, v2859, v515);
                                if let Some(v3013) = v3012 {
                                    let v62 = constructor_put_in_gpr(ctx, v59.0);
                                    let v3014 = &C::raw_operand_size_of_type(ctx, v2859);
                                    let v3015 = constructor_x64_sign_extend_data(ctx, v62, v3014);
                                    let v3016 = constructor_imm(ctx, v2859, v3013);
                                    let v3017 = &C::reg_to_gpr_mem(ctx, v3016);
                                    let v3018 = constructor_x64_div_remainder(ctx, v62, v3015, v3017, v3014, &DivSignedness::Signed, &TrapCode::INTEGER_DIVISION_BY_ZERO);
                                    let v3019 = C::output(ctx, v3018);
                                    let v3020 = Some(v3019);
                                    // Rule at src\isa\x64\lower.isle line 4416.
                                    return v3020;
                                }
                            }
                        }
                    }
                    let v2859 = C::value_type(ctx, v59.0);
                    if v2859 == I8 {
                        let v62 = constructor_put_in_gpr(ctx, v59.0);
                        let v2981 = constructor_x64_sign_extend_data(ctx, v62, &OperandSize::Size8);
                        let v3021 = constructor_put_in_gpr(ctx, v59.1);
                        let v3022 = constructor_x64_checked_srem_seq8(ctx, v2981, v3021);
                        let v1721 = Imm8Reg::Imm8 {
                            imm: 0x8_u8,
                        };
                        let v2996 = &C::imm8_reg_to_imm8_gpr(ctx, &v1721);
                        let v3023 = constructor_x64_shr(ctx, I64, v3022, v2996);
                        let v3024 = constructor_output_gpr(ctx, v3023);
                        let v3025 = Some(v3024);
                        // Rule at src\isa\x64\lower.isle line 4429.
                        return v3025;
                    }
                    let v62 = constructor_put_in_gpr(ctx, v59.0);
                    let v3014 = &C::raw_operand_size_of_type(ctx, v2859);
                    let v3015 = constructor_x64_sign_extend_data(ctx, v62, v3014);
                    let v2974 = constructor_put_in_gpr(ctx, v59.1);
                    let v3026 = constructor_x64_checked_srem_seq(ctx, v3014, v62, v3015, v2974);
                    let v3027 = C::value_regs_get(ctx, v3026, 0x1_usize);
                    let v3028 = constructor_output_reg(ctx, v3027);
                    let v3029 = Some(v3028);
                    // Rule at src\isa\x64\lower.isle line 4435.
                    return v3029;
                }
                &Opcode::UaddOverflow => {
                    let v59 = C::unpack_value_array_2(ctx, v58);
                    let v168 = C::value_type(ctx, v59.1);
                    let v169 = C::fits_in_64(ctx, v168);
                    if let Some(v170) = v169 {
                        let v62 = constructor_put_in_gpr(ctx, v59.0);
                        let v63 = &constructor_put_in_gpr_mem_imm(ctx, v59.1);
                        let v172 = constructor_construct_overflow_op_alu(ctx, v170, &CC::B, &ProduceFlagsOp::Add, v62, v63);
                        let v173 = Some(v172);
                        // Rule at src\isa\x64\lower.isle line 175.
                        return v173;
                    }
                    if v168 == I128 {
                        let v175 = constructor_construct_overflow_op_alu_128(ctx, &CC::B, &ProduceFlagsOp::Add, &ChainFlagsOp::Adc, v59.0, v59.1);
                        let v176 = Some(v175);
                        // Rule at src\isa\x64\lower.isle line 179.
                        return v176;
                    }
                }
                &Opcode::SaddOverflow => {
                    let v59 = C::unpack_value_array_2(ctx, v58);
                    let v168 = C::value_type(ctx, v59.1);
                    let v169 = C::fits_in_64(ctx, v168);
                    if let Some(v170) = v169 {
                        let v62 = constructor_put_in_gpr(ctx, v59.0);
                        let v63 = &constructor_put_in_gpr_mem_imm(ctx, v59.1);
                        let v178 = constructor_construct_overflow_op_alu(ctx, v170, &CC::O, &ProduceFlagsOp::Add, v62, v63);
                        let v179 = Some(v178);
                        // Rule at src\isa\x64\lower.isle line 184.
                        return v179;
                    }
                    if v168 == I128 {
                        let v180 = constructor_construct_overflow_op_alu_128(ctx, &CC::O, &ProduceFlagsOp::Add, &ChainFlagsOp::Adc, v59.0, v59.1);
                        let v181 = Some(v180);
                        // Rule at src\isa\x64\lower.isle line 187.
                        return v181;
                    }
                }
                &Opcode::UsubOverflow => {
                    let v59 = C::unpack_value_array_2(ctx, v58);
                    let v168 = C::value_type(ctx, v59.1);
                    let v169 = C::fits_in_64(ctx, v168);
                    if let Some(v170) = v169 {
                        let v62 = constructor_put_in_gpr(ctx, v59.0);
                        let v63 = &constructor_put_in_gpr_mem_imm(ctx, v59.1);
                        let v183 = constructor_construct_overflow_op_alu(ctx, v170, &CC::B, &ProduceFlagsOp::Sub, v62, v63);
                        let v184 = Some(v183);
                        // Rule at src\isa\x64\lower.isle line 192.
                        return v184;
                    }
                    if v168 == I128 {
                        let v186 = constructor_construct_overflow_op_alu_128(ctx, &CC::B, &ProduceFlagsOp::Sub, &ChainFlagsOp::Sbb, v59.0, v59.1);
                        let v187 = Some(v186);
                        // Rule at src\isa\x64\lower.isle line 195.
                        return v187;
                    }
                }
                &Opcode::SsubOverflow => {
                    let v59 = C::unpack_value_array_2(ctx, v58);
                    let v168 = C::value_type(ctx, v59.1);
                    let v169 = C::fits_in_64(ctx, v168);
                    if let Some(v170) = v169 {
                        let v62 = constructor_put_in_gpr(ctx, v59.0);
                        let v63 = &constructor_put_in_gpr_mem_imm(ctx, v59.1);
                        let v188 = constructor_construct_overflow_op_alu(ctx, v170, &CC::O, &ProduceFlagsOp::Sub, v62, v63);
                        let v189 = Some(v188);
                        // Rule at src\isa\x64\lower.isle line 200.
                        return v189;
                    }
                    if v168 == I128 {
                        let v190 = constructor_construct_overflow_op_alu_128(ctx, &CC::O, &ProduceFlagsOp::Sub, &ChainFlagsOp::Sbb, v59.0, v59.1);
                        let v191 = Some(v190);
                        // Rule at src\isa\x64\lower.isle line 203.
                        return v191;
                    }
                }
                &Opcode::UmulOverflow => {
                    let v59 = C::unpack_value_array_2(ctx, v58);
                    let v168 = C::value_type(ctx, v59.1);
                    let v197 = C::ty_int_ref_16_to_64(ctx, v168);
                    if let Some(v198) = v197 {
                        let v62 = constructor_put_in_gpr(ctx, v59.0);
                        let v193 = &constructor_put_in_gpr_mem(ctx, v59.1);
                        let v192 = false;
                        let v199 = &constructor_x64_mul_lo_with_flags_paired(ctx, v198, v192, v62, v193);
                        let v200 = constructor_construct_overflow_op(ctx, &CC::O, v199);
                        let v201 = Some(v200);
                        // Rule at src\isa\x64\lower.isle line 211.
                        return v201;
                    }
                    if v168 == I8 {
                        let v62 = constructor_put_in_gpr(ctx, v59.0);
                        let v193 = &constructor_put_in_gpr_mem(ctx, v59.1);
                        let v192 = false;
                        let v194 = &constructor_x64_mul8_with_flags_paired(ctx, v192, v62, v193);
                        let v195 = constructor_construct_overflow_op(ctx, &CC::O, v194);
                        let v196 = Some(v195);
                        // Rule at src\isa\x64\lower.isle line 208.
                        return v196;
                    }
                }
                &Opcode::SmulOverflow => {
                    let v59 = C::unpack_value_array_2(ctx, v58);
                    let v168 = C::value_type(ctx, v59.1);
                    let v197 = C::ty_int_ref_16_to_64(ctx, v168);
                    if let Some(v198) = v197 {
                        let v62 = constructor_put_in_gpr(ctx, v59.0);
                        let v193 = &constructor_put_in_gpr_mem(ctx, v59.1);
                        let v202 = true;
                        let v206 = &constructor_x64_mul_lo_with_flags_paired(ctx, v198, v202, v62, v193);
                        let v207 = constructor_construct_overflow_op(ctx, &CC::O, v206);
                        let v208 = Some(v207);
                        // Rule at src\isa\x64\lower.isle line 219.
                        return v208;
                    }
                    if v168 == I8 {
                        let v62 = constructor_put_in_gpr(ctx, v59.0);
                        let v193 = &constructor_put_in_gpr_mem(ctx, v59.1);
                        let v202 = true;
                        let v203 = &constructor_x64_mul8_with_flags_paired(ctx, v202, v62, v193);
                        let v204 = constructor_construct_overflow_op(ctx, &CC::O, v203);
                        let v205 = Some(v204);
                        // Rule at src\isa\x64\lower.isle line 216.
                        return v205;
                    }
                }
                &Opcode::Band => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v67 = C::ty_32_or_64(ctx, v3);
                        if let Some(v68) = v67 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v300 = constructor_val_minus_one(ctx, v59.1);
                            if let Some(v301) = v300 {
                                let v319 = C::use_bmi2(ctx);
                                if v319 == true {
                                    let v320 = C::def_inst(ctx, v301);
                                    if let Some(v321) = v320 {
                                        let v322 = &C::inst_data_value(ctx, v321);
                                        if let &InstructionData::Binary {
                                            opcode: ref v323,
                                            args: ref v324,
                                        } = v322 {
                                            if let &Opcode::Ishl = v323 {
                                                let v325 = C::unpack_value_array_2(ctx, v324);
                                                let v328 = C::def_inst(ctx, v325.0);
                                                if let Some(v329) = v328 {
                                                    let v330 = &C::inst_data_value(ctx, v329);
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v331,
                                                        imm: v332,
                                                    } = v330 {
                                                        if let &Opcode::Iconst = v331 {
                                                            let v333 = C::u64_from_imm64(ctx, v332);
                                                            if v333 == 0x1_u64 {
                                                                let v302 = &constructor_put_in_gpr_mem(ctx, v59.0);
                                                                let v334 = constructor_put_in_gpr(ctx, v325.1);
                                                                let v335 = C::ty_bits(ctx, v68);
                                                                let v336 = C::u8_as_u32(ctx, v335);
                                                                let v338 = C::u32_sub(ctx, v336, 0x1_u32);
                                                                let v339 = RegMemImm::Imm {
                                                                    simm32: v338,
                                                                };
                                                                let v340 = &C::gpr_mem_imm_new(ctx, &v339);
                                                                let v341 = constructor_x64_and(ctx, v68, v334, v340);
                                                                let v342 = constructor_x64_bzhi(ctx, v68, v302, v341);
                                                                let v343 = constructor_output_gpr(ctx, v342);
                                                                let v344 = Some(v343);
                                                                // Rule at src\isa\x64\lower.isle line 434.
                                                                return v344;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let v290 = C::use_bmi1(ctx);
                            if v290 == true {
                                let v120 = C::def_inst(ctx, v59.1);
                                if let Some(v121) = v120 {
                                    let v122 = &C::inst_data_value(ctx, v121);
                                    if let &InstructionData::Unary {
                                        opcode: ref v137,
                                        arg: v138,
                                    } = v122 {
                                        if let &Opcode::Ineg = v137 {
                                            if v59.0 == v138 {
                                                let v302 = &constructor_put_in_gpr_mem(ctx, v59.0);
                                                let v316 = constructor_x64_blsi(ctx, v68, v302);
                                                let v317 = constructor_output_gpr(ctx, v316);
                                                let v318 = Some(v317);
                                                // Rule at src\isa\x64\lower.isle line 421.
                                                return v318;
                                            }
                                        }
                                    }
                                }
                                let v147 = C::def_inst(ctx, v59.0);
                                if let Some(v148) = v147 {
                                    let v149 = &C::inst_data_value(ctx, v148);
                                    if let &InstructionData::Unary {
                                        opcode: ref v150,
                                        arg: v151,
                                    } = v149 {
                                        if let &Opcode::Ineg = v150 {
                                            if v59.1 == v151 {
                                                let v312 = &constructor_put_in_gpr_mem(ctx, v151);
                                                let v313 = constructor_x64_blsi(ctx, v68, v312);
                                                let v314 = constructor_output_gpr(ctx, v313);
                                                let v315 = Some(v314);
                                                // Rule at src\isa\x64\lower.isle line 418.
                                                return v315;
                                            }
                                        }
                                    }
                                }
                                let v306 = constructor_val_minus_one(ctx, v59.0);
                                if let Some(v307) = v306 {
                                    if v59.1 == v307 {
                                        let v308 = &constructor_put_in_gpr_mem(ctx, v59.1);
                                        let v309 = constructor_x64_blsr(ctx, v68, v308);
                                        let v310 = constructor_output_gpr(ctx, v309);
                                        let v311 = Some(v310);
                                        // Rule at src\isa\x64\lower.isle line 411.
                                        return v311;
                                    }
                                }
                                if let Some(v301) = v300 {
                                    if v59.0 == v301 {
                                        let v302 = &constructor_put_in_gpr_mem(ctx, v59.0);
                                        let v303 = constructor_x64_blsr(ctx, v68, v302);
                                        let v304 = constructor_output_gpr(ctx, v303);
                                        let v305 = Some(v304);
                                        // Rule at src\isa\x64\lower.isle line 407.
                                        return v305;
                                    }
                                }
                            }
                        }
                        let v257 = C::ty_int_ref_scalar_64(ctx, v3);
                        if let Some(v258) = v257 {
                            let v290 = C::use_bmi1(ctx);
                            if v290 == true {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v147 = C::def_inst(ctx, v59.0);
                                if let Some(v148) = v147 {
                                    let v149 = &C::inst_data_value(ctx, v148);
                                    if let &InstructionData::Unary {
                                        opcode: ref v150,
                                        arg: v151,
                                    } = v149 {
                                        if let &Opcode::Bnot = v150 {
                                            let v296 = constructor_put_in_gpr(ctx, v151);
                                            let v193 = &constructor_put_in_gpr_mem(ctx, v59.1);
                                            let v297 = constructor_x64_andn(ctx, v3, v296, v193);
                                            let v298 = constructor_output_gpr(ctx, v297);
                                            let v299 = Some(v298);
                                            // Rule at src\isa\x64\lower.isle line 395.
                                            return v299;
                                        }
                                    }
                                }
                                let v120 = C::def_inst(ctx, v59.1);
                                if let Some(v121) = v120 {
                                    let v122 = &C::inst_data_value(ctx, v121);
                                    if let &InstructionData::Unary {
                                        opcode: ref v137,
                                        arg: v138,
                                    } = v122 {
                                        if let &Opcode::Bnot = v137 {
                                            let v291 = constructor_put_in_gpr(ctx, v138);
                                            let v292 = &constructor_put_in_gpr_mem(ctx, v59.0);
                                            let v293 = constructor_x64_andn(ctx, v3, v291, v292);
                                            let v294 = constructor_output_gpr(ctx, v293);
                                            let v295 = Some(v294);
                                            // Rule at src\isa\x64\lower.isle line 390.
                                            return v295;
                                        }
                                    }
                                }
                            }
                        }
                        let v89 = C::multi_lane(ctx, v3);
                        if let Some(v90) = v89 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v147 = C::def_inst(ctx, v59.0);
                            if let Some(v148) = v147 {
                                let v149 = &C::inst_data_value(ctx, v148);
                                if let &InstructionData::Unary {
                                    opcode: ref v150,
                                    arg: v151,
                                } = v149 {
                                    if let &Opcode::Bnot = v150 {
                                        let v286 = constructor_put_in_xmm(ctx, v151);
                                        let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                        let v287 = constructor_sse_and_not(ctx, v3, v286, v94);
                                        let v288 = constructor_output_xmm(ctx, v287);
                                        let v289 = Some(v288);
                                        // Rule at src\isa\x64\lower.isle line 387.
                                        return v289;
                                    }
                                }
                            }
                            let v120 = C::def_inst(ctx, v59.1);
                            if let Some(v121) = v120 {
                                let v122 = &C::inst_data_value(ctx, v121);
                                if let &InstructionData::Unary {
                                    opcode: ref v137,
                                    arg: v138,
                                } = v122 {
                                    if let &Opcode::Bnot = v137 {
                                        let v281 = constructor_put_in_xmm(ctx, v138);
                                        let v282 = &C::put_in_xmm_mem(ctx, v59.0);
                                        let v283 = constructor_sse_and_not(ctx, v3, v281, v282);
                                        let v284 = constructor_output_xmm(ctx, v283);
                                        let v285 = Some(v284);
                                        // Rule at src\isa\x64\lower.isle line 385.
                                        return v285;
                                    }
                                }
                            }
                        }
                        if v3 == I128 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v107 = C::put_in_regs(ctx, v59.0);
                            let v108 = C::put_in_regs(ctx, v59.1);
                            let v278 = constructor_and_i128(ctx, v107, v108);
                            let v279 = C::output(ctx, v278);
                            let v280 = Some(v279);
                            // Rule at src\isa\x64\lower.isle line 366.
                            return v280;
                        }
                        if let Some(v90) = v89 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v93 = constructor_put_in_xmm(ctx, v59.0);
                            let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                            let v275 = constructor_sse_and(ctx, v3, v93, v94);
                            let v276 = constructor_output_xmm(ctx, v275);
                            let v277 = Some(v276);
                            // Rule at src\isa\x64\lower.isle line 349.
                            return v277;
                        }
                        let v270 = C::ty_scalar_float(ctx, v3);
                        if let Some(v271) = v270 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v93 = constructor_put_in_xmm(ctx, v59.0);
                            let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                            let v272 = constructor_sse_and(ctx, v271, v93, v94);
                            let v273 = constructor_output_xmm(ctx, v272);
                            let v274 = Some(v273);
                            // Rule at src\isa\x64\lower.isle line 337.
                            return v274;
                        }
                        if let Some(v258) = v257 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v265 = &C::simm32_from_value(ctx, v59.0);
                            if let Some(v266) = v265 {
                                let v84 = constructor_put_in_gpr(ctx, v59.1);
                                let v267 = constructor_x64_and(ctx, v3, v84, v266);
                                let v268 = constructor_output_gpr(ctx, v267);
                                let v269 = Some(v268);
                                // Rule at src\isa\x64\lower.isle line 331.
                                return v269;
                            }
                            let v82 = &C::sinkable_load(ctx, v59.0);
                            if let Some(v83) = v82 {
                                let v84 = constructor_put_in_gpr(ctx, v59.1);
                                let v85 = &constructor_sink_load_to_gpr_mem_imm(ctx, v83);
                                let v262 = constructor_x64_and(ctx, v3, v84, v85);
                                let v263 = constructor_output_gpr(ctx, v262);
                                let v264 = Some(v263);
                                // Rule at src\isa\x64\lower.isle line 327.
                                return v264;
                            }
                            let v62 = constructor_put_in_gpr(ctx, v59.0);
                            let v63 = &constructor_put_in_gpr_mem_imm(ctx, v59.1);
                            let v259 = constructor_x64_and(ctx, v3, v62, v63);
                            let v260 = constructor_output_gpr(ctx, v259);
                            let v261 = Some(v260);
                            // Rule at src\isa\x64\lower.isle line 320.
                            return v261;
                        }
                    }
                }
                &Opcode::Bor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v59 = C::unpack_value_array_2(ctx, v58);
                        let v120 = C::def_inst(ctx, v59.1);
                        if let Some(v121) = v120 {
                            let v122 = &C::inst_data_value(ctx, v121);
                            if let &InstructionData::Binary {
                                opcode: ref v123,
                                args: ref v124,
                            } = v122 {
                                match v123 {
                                    &Opcode::Ishl => {
                                        let v147 = C::def_inst(ctx, v59.0);
                                        if let Some(v148) = v147 {
                                            let v149 = &C::inst_data_value(ctx, v148);
                                            if let &InstructionData::Binary {
                                                opcode: ref v365,
                                                args: ref v366,
                                            } = v149 {
                                                if let &Opcode::Ushr = v365 {
                                                    let v3 = C::value_type(ctx, v2);
                                                    let v363 = C::ty_int_ref_16_to_64(ctx, v3);
                                                    if let Some(v364) = v363 {
                                                        let v367 = C::unpack_value_array_2(ctx, v366);
                                                        let v370 = C::def_inst(ctx, v367.1);
                                                        if let Some(v371) = v370 {
                                                            let v372 = &C::inst_data_value(ctx, v371);
                                                            if let &InstructionData::UnaryImm {
                                                                opcode: ref v373,
                                                                imm: v374,
                                                            } = v372 {
                                                                if let &Opcode::Iconst = v373 {
                                                                    let v375 = C::uimm8(ctx, v374);
                                                                    if let Some(v376) = v375 {
                                                                        let v125 = C::unpack_value_array_2(ctx, v124);
                                                                        let v377 = C::def_inst(ctx, v125.1);
                                                                        if let Some(v378) = v377 {
                                                                            let v379 = &C::inst_data_value(ctx, v378);
                                                                            if let &InstructionData::UnaryImm {
                                                                                opcode: ref v380,
                                                                                imm: v381,
                                                                            } = v379 {
                                                                                if let &Opcode::Iconst = v380 {
                                                                                    let v382 = C::uimm8(ctx, v381);
                                                                                    if let Some(v383) = v382 {
                                                                                        let v384 = C::ty_bits(ctx, v364);
                                                                                        let v385 = C::u8_as_u64(ctx, v384);
                                                                                        let v387 = C::u8_as_u64(ctx, v383);
                                                                                        let v386 = C::u8_as_u64(ctx, v376);
                                                                                        let v395 = C::u64_add(ctx, v387, v386);
                                                                                        let v396 = C::u64_eq(ctx, v385, v395);
                                                                                        if v396 == true {
                                                                                            let v397 = constructor_put_in_gpr(ctx, v125.0);
                                                                                            let v398 = constructor_put_in_gpr(ctx, v367.0);
                                                                                            let v399 = constructor_x64_shld(ctx, v364, v397, v398, v383);
                                                                                            let v400 = constructor_output_gpr(ctx, v399);
                                                                                            let v401 = Some(v400);
                                                                                            // Rule at src\isa\x64\lower.isle line 500.
                                                                                            return v401;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    &Opcode::Ushr => {
                                        let v147 = C::def_inst(ctx, v59.0);
                                        if let Some(v148) = v147 {
                                            let v149 = &C::inst_data_value(ctx, v148);
                                            if let &InstructionData::Binary {
                                                opcode: ref v365,
                                                args: ref v366,
                                            } = v149 {
                                                if let &Opcode::Ishl = v365 {
                                                    let v3 = C::value_type(ctx, v2);
                                                    let v363 = C::ty_int_ref_16_to_64(ctx, v3);
                                                    if let Some(v364) = v363 {
                                                        let v367 = C::unpack_value_array_2(ctx, v366);
                                                        let v370 = C::def_inst(ctx, v367.1);
                                                        if let Some(v371) = v370 {
                                                            let v372 = &C::inst_data_value(ctx, v371);
                                                            if let &InstructionData::UnaryImm {
                                                                opcode: ref v373,
                                                                imm: v374,
                                                            } = v372 {
                                                                if let &Opcode::Iconst = v373 {
                                                                    let v375 = C::uimm8(ctx, v374);
                                                                    if let Some(v376) = v375 {
                                                                        let v125 = C::unpack_value_array_2(ctx, v124);
                                                                        let v377 = C::def_inst(ctx, v125.1);
                                                                        if let Some(v378) = v377 {
                                                                            let v379 = &C::inst_data_value(ctx, v378);
                                                                            if let &InstructionData::UnaryImm {
                                                                                opcode: ref v380,
                                                                                imm: v381,
                                                                            } = v379 {
                                                                                if let &Opcode::Iconst = v380 {
                                                                                    let v382 = C::uimm8(ctx, v381);
                                                                                    if let Some(v383) = v382 {
                                                                                        let v384 = C::ty_bits(ctx, v364);
                                                                                        let v385 = C::u8_as_u64(ctx, v384);
                                                                                        let v386 = C::u8_as_u64(ctx, v376);
                                                                                        let v387 = C::u8_as_u64(ctx, v383);
                                                                                        let v388 = C::u64_add(ctx, v386, v387);
                                                                                        let v389 = C::u64_eq(ctx, v385, v388);
                                                                                        if v389 == true {
                                                                                            let v390 = constructor_put_in_gpr(ctx, v367.0);
                                                                                            let v391 = constructor_put_in_gpr(ctx, v125.0);
                                                                                            let v392 = constructor_x64_shld(ctx, v364, v390, v391, v376);
                                                                                            let v393 = constructor_output_gpr(ctx, v392);
                                                                                            let v394 = Some(v393);
                                                                                            // Rule at src\isa\x64\lower.isle line 496.
                                                                                            return v394;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v107 = C::put_in_regs(ctx, v59.0);
                            let v108 = C::put_in_regs(ctx, v59.1);
                            let v360 = constructor_or_i128(ctx, v107, v108);
                            let v361 = C::output(ctx, v360);
                            let v362 = Some(v361);
                            // Rule at src\isa\x64\lower.isle line 488.
                            return v362;
                        }
                        let v89 = C::multi_lane(ctx, v3);
                        if let Some(v90) = v89 {
                            let v93 = constructor_put_in_xmm(ctx, v59.0);
                            let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                            let v357 = constructor_sse_or(ctx, v3, v93, v94);
                            let v358 = constructor_output_xmm(ctx, v357);
                            let v359 = Some(v358);
                            // Rule at src\isa\x64\lower.isle line 473.
                            return v359;
                        }
                        let v270 = C::ty_scalar_float(ctx, v3);
                        if let Some(v271) = v270 {
                            let v93 = constructor_put_in_xmm(ctx, v59.0);
                            let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                            let v354 = constructor_sse_or(ctx, v271, v93, v94);
                            let v355 = constructor_output_xmm(ctx, v354);
                            let v356 = Some(v355);
                            // Rule at src\isa\x64\lower.isle line 461.
                            return v356;
                        }
                        let v257 = C::ty_int_ref_scalar_64(ctx, v3);
                        if let Some(v258) = v257 {
                            let v265 = &C::simm32_from_value(ctx, v59.0);
                            if let Some(v266) = v265 {
                                let v84 = constructor_put_in_gpr(ctx, v59.1);
                                let v351 = constructor_x64_or(ctx, v3, v84, v266);
                                let v352 = constructor_output_gpr(ctx, v351);
                                let v353 = Some(v352);
                                // Rule at src\isa\x64\lower.isle line 455.
                                return v353;
                            }
                            let v82 = &C::sinkable_load(ctx, v59.0);
                            if let Some(v83) = v82 {
                                let v84 = constructor_put_in_gpr(ctx, v59.1);
                                let v85 = &constructor_sink_load_to_gpr_mem_imm(ctx, v83);
                                let v348 = constructor_x64_or(ctx, v3, v84, v85);
                                let v349 = constructor_output_gpr(ctx, v348);
                                let v350 = Some(v349);
                                // Rule at src\isa\x64\lower.isle line 451.
                                return v350;
                            }
                            let v62 = constructor_put_in_gpr(ctx, v59.0);
                            let v63 = &constructor_put_in_gpr_mem_imm(ctx, v59.1);
                            let v345 = constructor_x64_or(ctx, v3, v62, v63);
                            let v346 = constructor_output_gpr(ctx, v345);
                            let v347 = Some(v346);
                            // Rule at src\isa\x64\lower.isle line 444.
                            return v347;
                        }
                    }
                }
                &Opcode::Bxor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v67 = C::ty_32_or_64(ctx, v3);
                        if let Some(v68) = v67 {
                            let v290 = C::use_bmi1(ctx);
                            if v290 == true {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v306 = constructor_val_minus_one(ctx, v59.0);
                                if let Some(v307) = v306 {
                                    if v59.1 == v307 {
                                        let v308 = &constructor_put_in_gpr_mem(ctx, v59.1);
                                        let v432 = constructor_x64_blsmsk(ctx, v68, v308);
                                        let v433 = constructor_output_gpr(ctx, v432);
                                        let v434 = Some(v433);
                                        // Rule at src\isa\x64\lower.isle line 554.
                                        return v434;
                                    }
                                }
                                let v300 = constructor_val_minus_one(ctx, v59.1);
                                if let Some(v301) = v300 {
                                    if v59.0 == v301 {
                                        let v302 = &constructor_put_in_gpr_mem(ctx, v59.0);
                                        let v429 = constructor_x64_blsmsk(ctx, v68, v302);
                                        let v430 = constructor_output_gpr(ctx, v429);
                                        let v431 = Some(v430);
                                        // Rule at src\isa\x64\lower.isle line 550.
                                        return v431;
                                    }
                                }
                            }
                        }
                        if v3 == I128 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v107 = C::put_in_regs(ctx, v59.0);
                            let v417 = constructor_value_regs_get_gpr(ctx, v107, 0x0_usize);
                            let v418 = constructor_value_regs_get_gpr(ctx, v107, 0x1_usize);
                            let v419 = C::put_in_regs(ctx, v59.1);
                            let v420 = constructor_value_regs_get_gpr(ctx, v419, 0x0_usize);
                            let v421 = constructor_value_regs_get_gpr(ctx, v419, 0x1_usize);
                            let v422 = &C::gpr_to_gpr_mem_imm(ctx, v420);
                            let v423 = constructor_x64_xor(ctx, I64, v417, v422);
                            let v424 = &C::gpr_to_gpr_mem_imm(ctx, v421);
                            let v425 = constructor_x64_xor(ctx, I64, v418, v424);
                            let v426 = constructor_value_gprs(ctx, v423, v425);
                            let v427 = C::output(ctx, v426);
                            let v428 = Some(v427);
                            // Rule at src\isa\x64\lower.isle line 538.
                            return v428;
                        }
                        let v89 = C::multi_lane(ctx, v3);
                        if let Some(v90) = v89 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v93 = constructor_put_in_xmm(ctx, v59.0);
                            let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                            let v414 = constructor_x64_xor_vector(ctx, v3, v93, v94);
                            let v415 = constructor_output_xmm(ctx, v414);
                            let v416 = Some(v415);
                            // Rule at src\isa\x64\lower.isle line 533.
                            return v416;
                        }
                        let v270 = C::ty_scalar_float(ctx, v3);
                        if let Some(v271) = v270 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v93 = constructor_put_in_xmm(ctx, v59.0);
                            let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                            let v411 = constructor_x64_xor_vector(ctx, v271, v93, v94);
                            let v412 = constructor_output_xmm(ctx, v411);
                            let v413 = Some(v412);
                            // Rule at src\isa\x64\lower.isle line 528.
                            return v413;
                        }
                        let v257 = C::ty_int_ref_scalar_64(ctx, v3);
                        if let Some(v258) = v257 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v265 = &C::simm32_from_value(ctx, v59.0);
                            if let Some(v266) = v265 {
                                let v84 = constructor_put_in_gpr(ctx, v59.1);
                                let v408 = constructor_x64_xor(ctx, v3, v84, v266);
                                let v409 = constructor_output_gpr(ctx, v408);
                                let v410 = Some(v409);
                                // Rule at src\isa\x64\lower.isle line 522.
                                return v410;
                            }
                            let v82 = &C::sinkable_load(ctx, v59.0);
                            if let Some(v83) = v82 {
                                let v84 = constructor_put_in_gpr(ctx, v59.1);
                                let v85 = &constructor_sink_load_to_gpr_mem_imm(ctx, v83);
                                let v405 = constructor_x64_xor(ctx, v3, v84, v85);
                                let v406 = constructor_output_gpr(ctx, v405);
                                let v407 = Some(v406);
                                // Rule at src\isa\x64\lower.isle line 518.
                                return v407;
                            }
                            let v62 = constructor_put_in_gpr(ctx, v59.0);
                            let v63 = &constructor_put_in_gpr_mem_imm(ctx, v59.1);
                            let v402 = constructor_x64_xor(ctx, v3, v62, v63);
                            let v403 = constructor_output_gpr(ctx, v402);
                            let v404 = Some(v403);
                            // Rule at src\isa\x64\lower.isle line 511.
                            return v404;
                        }
                    }
                }
                &Opcode::Rotl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v107 = C::put_in_regs(ctx, v59.0);
                            let v553 = constructor_lo_gpr(ctx, v59.1);
                            let v554 = constructor_shl_i128(ctx, v107, v553);
                            let v556 = constructor_imm(ctx, I64, 0x80_u64);
                            let v557 = C::gpr_new(ctx, v556);
                            let v558 = &C::gpr_to_gpr_mem_imm(ctx, v553);
                            let v559 = constructor_x64_sub(ctx, I64, v557, v558);
                            let v560 = constructor_shr_i128(ctx, v107, v559);
                            let v561 = constructor_or_i128(ctx, v554, v560);
                            let v562 = C::output(ctx, v561);
                            let v563 = Some(v562);
                            // Rule at src\isa\x64\lower.isle line 960.
                            return v563;
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v62 = constructor_put_in_gpr(ctx, v59.0);
                            let v435 = &constructor_put_masked_in_imm8_gpr(ctx, v59.1, v5);
                            let v550 = constructor_x64_rotl(ctx, v5, v62, v435);
                            let v551 = constructor_output_gpr(ctx, v550);
                            let v552 = Some(v551);
                            // Rule at src\isa\x64\lower.isle line 954.
                            return v552;
                        }
                    }
                }
                &Opcode::Rotr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v107 = C::put_in_regs(ctx, v59.0);
                            let v553 = constructor_lo_gpr(ctx, v59.1);
                            let v567 = constructor_shr_i128(ctx, v107, v553);
                            let v556 = constructor_imm(ctx, I64, 0x80_u64);
                            let v557 = C::gpr_new(ctx, v556);
                            let v558 = &C::gpr_to_gpr_mem_imm(ctx, v553);
                            let v559 = constructor_x64_sub(ctx, I64, v557, v558);
                            let v568 = constructor_shl_i128(ctx, v107, v559);
                            let v569 = constructor_or_i128(ctx, v567, v568);
                            let v570 = C::output(ctx, v569);
                            let v571 = Some(v570);
                            // Rule at src\isa\x64\lower.isle line 981.
                            return v571;
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v62 = constructor_put_in_gpr(ctx, v59.0);
                            let v435 = &constructor_put_masked_in_imm8_gpr(ctx, v59.1, v5);
                            let v564 = constructor_x64_rotr(ctx, v5, v62, v435);
                            let v565 = constructor_output_gpr(ctx, v564);
                            let v566 = Some(v565);
                            // Rule at src\isa\x64\lower.isle line 975.
                            return v566;
                        }
                    }
                }
                &Opcode::Ishl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I128 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v439 = constructor_lo_gpr(ctx, v59.1);
                                let v128 = C::put_in_regs(ctx, v59.0);
                                let v440 = constructor_shl_i128(ctx, v128, v439);
                                let v441 = C::output(ctx, v440);
                                let v442 = Some(v441);
                                // Rule at src\isa\x64\lower.isle line 602.
                                return v442;
                            }
                            I8X16 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v443 = &constructor_mask_xmm_shift(ctx, v3, v59.1);
                                let v444 = constructor_put_in_xmm(ctx, v59.0);
                                let v445 = &constructor_mov_rmi_to_xmm(ctx, v443);
                                let v446 = constructor_x64_psllw(ctx, v444, v445);
                                let v447 = &constructor_ishl_i8x16_mask(ctx, v443);
                                let v450 = constructor_x64_load(ctx, I8X16, v447, &ExtKind::None);
                                let v451 = RegMem::Reg {
                                    reg: v450,
                                };
                                let v452 = &C::reg_mem_to_xmm_mem(ctx, &v451);
                                let v453 = constructor_sse_and(ctx, I8X16, v446, v452);
                                let v454 = constructor_output_xmm(ctx, v453);
                                let v455 = Some(v454);
                                // Rule at src\isa\x64\lower.isle line 614.
                                return v455;
                            }
                            I16X8 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v456 = &constructor_mask_xmm_shift(ctx, v3, v59.1);
                                let v457 = &constructor_mov_rmi_to_xmm(ctx, v456);
                                let v458 = constructor_x64_psllw(ctx, v93, v457);
                                let v459 = constructor_output_xmm(ctx, v458);
                                let v460 = Some(v459);
                                // Rule at src\isa\x64\lower.isle line 659.
                                return v460;
                            }
                            I32X4 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v456 = &constructor_mask_xmm_shift(ctx, v3, v59.1);
                                let v457 = &constructor_mov_rmi_to_xmm(ctx, v456);
                                let v461 = constructor_x64_pslld(ctx, v93, v457);
                                let v462 = constructor_output_xmm(ctx, v461);
                                let v463 = Some(v462);
                                // Rule at src\isa\x64\lower.isle line 662.
                                return v463;
                            }
                            I64X2 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v456 = &constructor_mask_xmm_shift(ctx, v3, v59.1);
                                let v457 = &constructor_mov_rmi_to_xmm(ctx, v456);
                                let v464 = constructor_x64_psllq(ctx, v93, v457);
                                let v465 = constructor_output_xmm(ctx, v464);
                                let v466 = Some(v465);
                                // Rule at src\isa\x64\lower.isle line 665.
                                return v466;
                            }
                            _ => {}
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v62 = constructor_put_in_gpr(ctx, v59.0);
                            let v435 = &constructor_put_masked_in_imm8_gpr(ctx, v59.1, v5);
                            let v436 = constructor_x64_shl(ctx, v5, v62, v435);
                            let v437 = constructor_output_gpr(ctx, v436);
                            let v438 = Some(v437);
                            // Rule at src\isa\x64\lower.isle line 563.
                            return v438;
                        }
                    }
                }
                &Opcode::Ushr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I128 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v439 = constructor_lo_gpr(ctx, v59.1);
                                let v128 = C::put_in_regs(ctx, v59.0);
                                let v471 = constructor_shr_i128(ctx, v128, v439);
                                let v472 = C::output(ctx, v471);
                                let v473 = Some(v472);
                                // Rule at src\isa\x64\lower.isle line 709.
                                return v473;
                            }
                            I8X16 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v443 = &constructor_mask_xmm_shift(ctx, v3, v59.1);
                                let v444 = constructor_put_in_xmm(ctx, v59.0);
                                let v445 = &constructor_mov_rmi_to_xmm(ctx, v443);
                                let v474 = constructor_x64_psrlw(ctx, v444, v445);
                                let v475 = &constructor_ushr_i8x16_mask(ctx, v443);
                                let v476 = &constructor_synthetic_amode_to_xmm_mem(ctx, v475);
                                let v477 = constructor_sse_and(ctx, I8X16, v474, v476);
                                let v478 = constructor_output_xmm(ctx, v477);
                                let v479 = Some(v478);
                                // Rule at src\isa\x64\lower.isle line 719.
                                return v479;
                            }
                            I16X8 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v456 = &constructor_mask_xmm_shift(ctx, v3, v59.1);
                                let v457 = &constructor_mov_rmi_to_xmm(ctx, v456);
                                let v480 = constructor_x64_psrlw(ctx, v93, v457);
                                let v481 = constructor_output_xmm(ctx, v480);
                                let v482 = Some(v481);
                                // Rule at src\isa\x64\lower.isle line 765.
                                return v482;
                            }
                            I32X4 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v456 = &constructor_mask_xmm_shift(ctx, v3, v59.1);
                                let v457 = &constructor_mov_rmi_to_xmm(ctx, v456);
                                let v483 = constructor_x64_psrld(ctx, v93, v457);
                                let v484 = constructor_output_xmm(ctx, v483);
                                let v485 = Some(v484);
                                // Rule at src\isa\x64\lower.isle line 768.
                                return v485;
                            }
                            I64X2 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v456 = &constructor_mask_xmm_shift(ctx, v3, v59.1);
                                let v457 = &constructor_mov_rmi_to_xmm(ctx, v456);
                                let v486 = constructor_x64_psrlq(ctx, v93, v457);
                                let v487 = constructor_output_xmm(ctx, v486);
                                let v488 = Some(v487);
                                // Rule at src\isa\x64\lower.isle line 771.
                                return v488;
                            }
                            _ => {}
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v467 = constructor_extend_to_gpr(ctx, v59.0, v5, &ExtendKind::Zero);
                            let v435 = &constructor_put_masked_in_imm8_gpr(ctx, v59.1, v5);
                            let v468 = constructor_x64_shr(ctx, v5, v467, v435);
                            let v469 = constructor_output_gpr(ctx, v468);
                            let v470 = Some(v469);
                            // Rule at src\isa\x64\lower.isle line 672.
                            return v470;
                        }
                    }
                }
                &Opcode::Sshr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I128 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v439 = constructor_lo_gpr(ctx, v59.1);
                                let v128 = C::put_in_regs(ctx, v59.0);
                                let v494 = constructor_sar_i128(ctx, v128, v439);
                                let v495 = C::output(ctx, v494);
                                let v496 = Some(v495);
                                // Rule at src\isa\x64\lower.isle line 821.
                                return v496;
                            }
                            I8X16 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v456 = &constructor_mask_xmm_shift(ctx, v3, v59.1);
                                let v497 = &C::xmm_to_xmm_mem(ctx, v93);
                                let v498 = constructor_x64_punpcklbw(ctx, v93, v497);
                                let v499 = &C::xmm_to_xmm_mem(ctx, v93);
                                let v500 = constructor_x64_punpckhbw(ctx, v93, v499);
                                let v168 = C::value_type(ctx, v59.1);
                                let v501 = &constructor_sshr_i8x16_bigger_shift(ctx, v168, v456);
                                let v502 = constructor_x64_psraw(ctx, v498, v501);
                                let v503 = constructor_x64_psraw(ctx, v500, v501);
                                let v504 = &C::xmm_to_xmm_mem(ctx, v503);
                                let v505 = constructor_x64_packsswb(ctx, v502, v504);
                                let v506 = constructor_output_xmm(ctx, v505);
                                let v507 = Some(v506);
                                // Rule at src\isa\x64\lower.isle line 842.
                                return v507;
                            }
                            I16X8 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v456 = &constructor_mask_xmm_shift(ctx, v3, v59.1);
                                let v457 = &constructor_mov_rmi_to_xmm(ctx, v456);
                                let v508 = constructor_x64_psraw(ctx, v93, v457);
                                let v509 = constructor_output_xmm(ctx, v508);
                                let v510 = Some(v509);
                                // Rule at src\isa\x64\lower.isle line 871.
                                return v510;
                            }
                            I32X4 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v456 = &constructor_mask_xmm_shift(ctx, v3, v59.1);
                                let v457 = &constructor_mov_rmi_to_xmm(ctx, v456);
                                let v511 = constructor_x64_psrad(ctx, v93, v457);
                                let v512 = constructor_output_xmm(ctx, v511);
                                let v513 = Some(v512);
                                // Rule at src\isa\x64\lower.isle line 874.
                                return v513;
                            }
                            I64X2 => {
                                let v516 = C::use_avx512vl(ctx);
                                if v516 == true {
                                    let v517 = C::use_avx512f(ctx);
                                    if v517 == true {
                                        let v59 = C::unpack_value_array_2(ctx, v58);
                                        let v120 = C::def_inst(ctx, v59.1);
                                        if let Some(v121) = v120 {
                                            let v122 = &C::inst_data_value(ctx, v121);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v514,
                                                imm: v515,
                                            } = v122 {
                                                if let &Opcode::Iconst = v514 {
                                                    let v518 = &C::put_in_xmm_mem(ctx, v59.0);
                                                    let v519 = C::shift_amount_masked(ctx, v3, v515);
                                                    let v520 = constructor_x64_vpsraq_imm(ctx, v518, v519);
                                                    let v521 = constructor_output_xmm(ctx, v520);
                                                    let v522 = Some(v521);
                                                    // Rule at src\isa\x64\lower.isle line 880.
                                                    return v522;
                                                }
                                            }
                                        }
                                        let v84 = constructor_put_in_gpr(ctx, v59.1);
                                        let v523 = C::shift_mask(ctx, v3);
                                        let v524 = C::u8_as_u32(ctx, v523);
                                        let v525 = RegMemImm::Imm {
                                            simm32: v524,
                                        };
                                        let v526 = &C::gpr_mem_imm_new(ctx, &v525);
                                        let v527 = constructor_x64_and(ctx, I64, v84, v526);
                                        let v528 = constructor_put_in_xmm(ctx, v59.0);
                                        let v529 = &C::gpr_to_gpr_mem(ctx, v527);
                                        let v530 = constructor_x64_movd_to_xmm(ctx, v529);
                                        let v531 = &C::xmm_to_xmm_mem(ctx, v530);
                                        let v532 = constructor_x64_vpsraq(ctx, v528, v531);
                                        let v533 = constructor_output_xmm(ctx, v532);
                                        let v534 = Some(v533);
                                        // Rule at src\isa\x64\lower.isle line 885.
                                        return v534;
                                    }
                                }
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v120 = C::def_inst(ctx, v59.1);
                                if let Some(v121) = v120 {
                                    let v122 = &C::inst_data_value(ctx, v121);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v514,
                                        imm: v515,
                                    } = v122 {
                                        if let &Opcode::Iconst = v514 {
                                            let v535 = C::u64_from_imm64(ctx, v515);
                                            let v536 = C::u64_as_u32(ctx, v535);
                                            if let Some(v537) = v536 {
                                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                                let v539 = C::u32_and(ctx, v537, 0x3f_u32);
                                                let v540 = constructor_lower_i64x2_sshr_imm(ctx, v93, v539);
                                                let v541 = constructor_output_xmm(ctx, v540);
                                                let v542 = Some(v541);
                                                // Rule at src\isa\x64\lower.isle line 891.
                                                return v542;
                                            }
                                        }
                                    }
                                }
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v543 = constructor_put_in_gpr(ctx, v59.1);
                                let v544 = RegMemImm::Imm {
                                    simm32: 0x3f_u32,
                                };
                                let v545 = &C::gpr_mem_imm_new(ctx, &v544);
                                let v546 = constructor_x64_and(ctx, I64, v543, v545);
                                let v547 = constructor_lower_i64x2_sshr_gpr(ctx, v93, v546);
                                let v548 = constructor_output_xmm(ctx, v547);
                                let v549 = Some(v548);
                                // Rule at src\isa\x64\lower.isle line 894.
                                return v549;
                            }
                            _ => {}
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v490 = constructor_extend_to_gpr(ctx, v59.0, v5, &ExtendKind::Sign);
                            let v435 = &constructor_put_masked_in_imm8_gpr(ctx, v59.1, v5);
                            let v491 = constructor_x64_sar(ctx, v5, v490, v435);
                            let v492 = constructor_output_gpr(ctx, v491);
                            let v493 = Some(v492);
                            // Rule at src\isa\x64\lower.isle line 784.
                            return v493;
                        }
                    }
                }
                &Opcode::Fadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v82 = &C::sinkable_load(ctx, v59.0);
                                if let Some(v83) = v82 {
                                    let v1770 = constructor_put_in_xmm(ctx, v59.1);
                                    let v1786 = &constructor_sink_load_to_xmm_mem(ctx, v83);
                                    let v1787 = constructor_x64_addss(ctx, v1770, v1786);
                                    let v1788 = constructor_output_xmm(ctx, v1787);
                                    let v1789 = Some(v1788);
                                    // Rule at src\isa\x64\lower.isle line 2629.
                                    return v1789;
                                }
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                let v1774 = constructor_x64_addss(ctx, v93, v94);
                                let v1775 = constructor_output_xmm(ctx, v1774);
                                let v1776 = Some(v1775);
                                // Rule at src\isa\x64\lower.isle line 2618.
                                return v1776;
                            }
                            F64 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v82 = &C::sinkable_load(ctx, v59.0);
                                if let Some(v83) = v82 {
                                    let v1770 = constructor_put_in_xmm(ctx, v59.1);
                                    let v1786 = &constructor_sink_load_to_xmm_mem(ctx, v83);
                                    let v1790 = constructor_x64_addsd(ctx, v1770, v1786);
                                    let v1791 = constructor_output_xmm(ctx, v1790);
                                    let v1792 = Some(v1791);
                                    // Rule at src\isa\x64\lower.isle line 2631.
                                    return v1792;
                                }
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                let v1777 = constructor_x64_addsd(ctx, v93, v94);
                                let v1778 = constructor_output_xmm(ctx, v1777);
                                let v1779 = Some(v1778);
                                // Rule at src\isa\x64\lower.isle line 2620.
                                return v1779;
                            }
                            F32X4 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v82 = &C::sinkable_load(ctx, v59.0);
                                if let Some(v83) = v82 {
                                    let v1770 = constructor_put_in_xmm(ctx, v59.1);
                                    let v1786 = &constructor_sink_load_to_xmm_mem(ctx, v83);
                                    let v1793 = constructor_x64_addps(ctx, v1770, v1786);
                                    let v1794 = constructor_output_xmm(ctx, v1793);
                                    let v1795 = Some(v1794);
                                    // Rule at src\isa\x64\lower.isle line 2633.
                                    return v1795;
                                }
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                let v1780 = constructor_x64_addps(ctx, v93, v94);
                                let v1781 = constructor_output_xmm(ctx, v1780);
                                let v1782 = Some(v1781);
                                // Rule at src\isa\x64\lower.isle line 2622.
                                return v1782;
                            }
                            F64X2 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v82 = &C::sinkable_load(ctx, v59.0);
                                if let Some(v83) = v82 {
                                    let v1770 = constructor_put_in_xmm(ctx, v59.1);
                                    let v1786 = &constructor_sink_load_to_xmm_mem(ctx, v83);
                                    let v1796 = constructor_x64_addpd(ctx, v1770, v1786);
                                    let v1797 = constructor_output_xmm(ctx, v1796);
                                    let v1798 = Some(v1797);
                                    // Rule at src\isa\x64\lower.isle line 2635.
                                    return v1798;
                                }
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                let v1783 = constructor_x64_addpd(ctx, v93, v94);
                                let v1784 = constructor_output_xmm(ctx, v1783);
                                let v1785 = Some(v1784);
                                // Rule at src\isa\x64\lower.isle line 2624.
                                return v1785;
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fsub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                let v1799 = constructor_x64_subss(ctx, v93, v94);
                                let v1800 = constructor_output_xmm(ctx, v1799);
                                let v1801 = Some(v1800);
                                // Rule at src\isa\x64\lower.isle line 2640.
                                return v1801;
                            }
                            F64 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                let v1802 = constructor_x64_subsd(ctx, v93, v94);
                                let v1803 = constructor_output_xmm(ctx, v1802);
                                let v1804 = Some(v1803);
                                // Rule at src\isa\x64\lower.isle line 2642.
                                return v1804;
                            }
                            F32X4 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                let v1805 = constructor_x64_subps(ctx, v93, v94);
                                let v1806 = constructor_output_xmm(ctx, v1805);
                                let v1807 = Some(v1806);
                                // Rule at src\isa\x64\lower.isle line 2644.
                                return v1807;
                            }
                            F64X2 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                let v1808 = constructor_x64_subpd(ctx, v93, v94);
                                let v1809 = constructor_output_xmm(ctx, v1808);
                                let v1810 = Some(v1809);
                                // Rule at src\isa\x64\lower.isle line 2646.
                                return v1810;
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fmul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v82 = &C::sinkable_load(ctx, v59.0);
                                if let Some(v83) = v82 {
                                    let v1770 = constructor_put_in_xmm(ctx, v59.1);
                                    let v1786 = &constructor_sink_load_to_xmm_mem(ctx, v83);
                                    let v1823 = constructor_x64_mulss(ctx, v1770, v1786);
                                    let v1824 = constructor_output_xmm(ctx, v1823);
                                    let v1825 = Some(v1824);
                                    // Rule at src\isa\x64\lower.isle line 2662.
                                    return v1825;
                                }
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                let v1811 = constructor_x64_mulss(ctx, v93, v94);
                                let v1812 = constructor_output_xmm(ctx, v1811);
                                let v1813 = Some(v1812);
                                // Rule at src\isa\x64\lower.isle line 2651.
                                return v1813;
                            }
                            F64 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v82 = &C::sinkable_load(ctx, v59.0);
                                if let Some(v83) = v82 {
                                    let v1770 = constructor_put_in_xmm(ctx, v59.1);
                                    let v1786 = &constructor_sink_load_to_xmm_mem(ctx, v83);
                                    let v1826 = constructor_x64_mulsd(ctx, v1770, v1786);
                                    let v1827 = constructor_output_xmm(ctx, v1826);
                                    let v1828 = Some(v1827);
                                    // Rule at src\isa\x64\lower.isle line 2664.
                                    return v1828;
                                }
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                let v1814 = constructor_x64_mulsd(ctx, v93, v94);
                                let v1815 = constructor_output_xmm(ctx, v1814);
                                let v1816 = Some(v1815);
                                // Rule at src\isa\x64\lower.isle line 2653.
                                return v1816;
                            }
                            F32X4 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v82 = &C::sinkable_load(ctx, v59.0);
                                if let Some(v83) = v82 {
                                    let v1770 = constructor_put_in_xmm(ctx, v59.1);
                                    let v1786 = &constructor_sink_load_to_xmm_mem(ctx, v83);
                                    let v1829 = constructor_x64_mulps(ctx, v1770, v1786);
                                    let v1830 = constructor_output_xmm(ctx, v1829);
                                    let v1831 = Some(v1830);
                                    // Rule at src\isa\x64\lower.isle line 2666.
                                    return v1831;
                                }
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                let v1817 = constructor_x64_mulps(ctx, v93, v94);
                                let v1818 = constructor_output_xmm(ctx, v1817);
                                let v1819 = Some(v1818);
                                // Rule at src\isa\x64\lower.isle line 2655.
                                return v1819;
                            }
                            F64X2 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v82 = &C::sinkable_load(ctx, v59.0);
                                if let Some(v83) = v82 {
                                    let v1770 = constructor_put_in_xmm(ctx, v59.1);
                                    let v1786 = &constructor_sink_load_to_xmm_mem(ctx, v83);
                                    let v1832 = constructor_x64_mulpd(ctx, v1770, v1786);
                                    let v1833 = constructor_output_xmm(ctx, v1832);
                                    let v1834 = Some(v1833);
                                    // Rule at src\isa\x64\lower.isle line 2668.
                                    return v1834;
                                }
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                let v1820 = constructor_x64_mulpd(ctx, v93, v94);
                                let v1821 = constructor_output_xmm(ctx, v1820);
                                let v1822 = Some(v1821);
                                // Rule at src\isa\x64\lower.isle line 2657.
                                return v1822;
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fdiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                let v1835 = constructor_x64_divss(ctx, v93, v94);
                                let v1836 = constructor_output_xmm(ctx, v1835);
                                let v1837 = Some(v1836);
                                // Rule at src\isa\x64\lower.isle line 2673.
                                return v1837;
                            }
                            F64 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                let v1838 = constructor_x64_divsd(ctx, v93, v94);
                                let v1839 = constructor_output_xmm(ctx, v1838);
                                let v1840 = Some(v1839);
                                // Rule at src\isa\x64\lower.isle line 2675.
                                return v1840;
                            }
                            F32X4 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                let v1841 = constructor_x64_divps(ctx, v93, v94);
                                let v1842 = constructor_output_xmm(ctx, v1841);
                                let v1843 = Some(v1842);
                                // Rule at src\isa\x64\lower.isle line 2677.
                                return v1843;
                            }
                            F64X2 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                let v1844 = constructor_x64_divpd(ctx, v93, v94);
                                let v1845 = constructor_output_xmm(ctx, v1844);
                                let v1846 = Some(v1845);
                                // Rule at src\isa\x64\lower.isle line 2679.
                                return v1846;
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fcopysign => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v2859 = C::value_type(ctx, v59.0);
                                if v2859 == F32 {
                                    let v2923 = constructor_imm(ctx, F32, 0x80000000_u64);
                                    let v2924 = C::xmm_new(ctx, v2923);
                                    let v2925 = &C::put_in_xmm_mem(ctx, v59.0);
                                    let v2926 = constructor_x64_andnps(ctx, v2924, v2925);
                                    let v2927 = &C::put_in_xmm_mem(ctx, v59.1);
                                    let v2928 = constructor_x64_andps(ctx, v2924, v2927);
                                    let v2929 = &C::xmm_to_xmm_mem(ctx, v2928);
                                    let v2930 = constructor_x64_orps(ctx, v2926, v2929);
                                    let v2931 = constructor_output_xmm(ctx, v2930);
                                    let v2932 = Some(v2931);
                                    // Rule at src\isa\x64\lower.isle line 4225.
                                    return v2932;
                                }
                            }
                            F64 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v2859 = C::value_type(ctx, v59.0);
                                if v2859 == F64 {
                                    let v2933 = constructor_imm(ctx, F64, 0x8000000000000000_u64);
                                    let v2934 = C::xmm_new(ctx, v2933);
                                    let v2925 = &C::put_in_xmm_mem(ctx, v59.0);
                                    let v2935 = constructor_x64_andnpd(ctx, v2934, v2925);
                                    let v2927 = &C::put_in_xmm_mem(ctx, v59.1);
                                    let v2936 = constructor_x64_andpd(ctx, v2934, v2927);
                                    let v2937 = &C::xmm_to_xmm_mem(ctx, v2936);
                                    let v2938 = constructor_x64_orpd(ctx, v2935, v2937);
                                    let v2939 = constructor_output_xmm(ctx, v2938);
                                    let v2940 = Some(v2939);
                                    // Rule at src\isa\x64\lower.isle line 4231.
                                    return v2940;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fmin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v674 = constructor_put_in_xmm(ctx, v59.1);
                                let v202 = true;
                                let v1877 = constructor_xmm_min_max_seq(ctx, F32, v202, v93, v674);
                                let v1878 = constructor_output_xmm(ctx, v1877);
                                let v1879 = Some(v1878);
                                // Rule at src\isa\x64\lower.isle line 2710.
                                return v1879;
                            }
                            F64 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v674 = constructor_put_in_xmm(ctx, v59.1);
                                let v202 = true;
                                let v1880 = constructor_xmm_min_max_seq(ctx, F64, v202, v93, v674);
                                let v1881 = constructor_output_xmm(ctx, v1880);
                                let v1882 = Some(v1881);
                                // Rule at src\isa\x64\lower.isle line 2712.
                                return v1882;
                            }
                            F32X4 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v674 = constructor_put_in_xmm(ctx, v59.1);
                                let v1883 = &C::xmm_to_xmm_mem(ctx, v674);
                                let v1884 = constructor_x64_minps(ctx, v93, v1883);
                                let v499 = &C::xmm_to_xmm_mem(ctx, v93);
                                let v1885 = constructor_x64_minps(ctx, v674, v499);
                                let v1886 = &C::xmm_to_xmm_mem(ctx, v1885);
                                let v1887 = constructor_x64_orps(ctx, v1884, v1886);
                                let v1888 = &C::xmm_to_xmm_mem(ctx, v1885);
                                let v1889 = constructor_x64_cmpps(ctx, v1887, v1888, &FcmpImm::Unordered);
                                let v1890 = &C::xmm_to_xmm_mem(ctx, v1889);
                                let v1891 = constructor_x64_orps(ctx, v1887, v1890);
                                let v1893 = &C::xmi_imm(ctx, 0xa_u32);
                                let v1894 = constructor_x64_psrld(ctx, v1889, v1893);
                                let v1895 = &C::xmm_to_xmm_mem(ctx, v1891);
                                let v1896 = constructor_x64_andnps(ctx, v1894, v1895);
                                let v1897 = constructor_output_xmm(ctx, v1896);
                                let v1898 = Some(v1897);
                                // Rule at src\isa\x64\lower.isle line 2727.
                                return v1898;
                            }
                            F64X2 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v674 = constructor_put_in_xmm(ctx, v59.1);
                                let v1883 = &C::xmm_to_xmm_mem(ctx, v674);
                                let v1899 = constructor_x64_minpd(ctx, v93, v1883);
                                let v499 = &C::xmm_to_xmm_mem(ctx, v93);
                                let v1900 = constructor_x64_minpd(ctx, v674, v499);
                                let v1901 = &C::xmm_to_xmm_mem(ctx, v1900);
                                let v1902 = constructor_x64_orpd(ctx, v1899, v1901);
                                let v1903 = &C::xmm_to_xmm_mem(ctx, v1900);
                                let v1904 = constructor_x64_cmppd(ctx, v1899, v1903, &FcmpImm::Unordered);
                                let v1905 = &C::xmm_to_xmm_mem(ctx, v1904);
                                let v1906 = constructor_x64_orpd(ctx, v1902, v1905);
                                let v1908 = &C::xmi_imm(ctx, 0xd_u32);
                                let v1909 = constructor_x64_psrlq(ctx, v1904, v1908);
                                let v1910 = &C::xmm_to_xmm_mem(ctx, v1906);
                                let v1911 = constructor_x64_andnpd(ctx, v1909, v1910);
                                let v1912 = constructor_output_xmm(ctx, v1911);
                                let v1913 = Some(v1912);
                                // Rule at src\isa\x64\lower.isle line 2772.
                                return v1913;
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fmax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v674 = constructor_put_in_xmm(ctx, v59.1);
                                let v192 = false;
                                let v1914 = constructor_xmm_min_max_seq(ctx, F32, v192, v93, v674);
                                let v1915 = constructor_output_xmm(ctx, v1914);
                                let v1916 = Some(v1915);
                                // Rule at src\isa\x64\lower.isle line 2786.
                                return v1916;
                            }
                            F64 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v674 = constructor_put_in_xmm(ctx, v59.1);
                                let v192 = false;
                                let v1917 = constructor_xmm_min_max_seq(ctx, F64, v192, v93, v674);
                                let v1918 = constructor_output_xmm(ctx, v1917);
                                let v1919 = Some(v1918);
                                // Rule at src\isa\x64\lower.isle line 2788.
                                return v1919;
                            }
                            F32X4 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v674 = constructor_put_in_xmm(ctx, v59.1);
                                let v1883 = &C::xmm_to_xmm_mem(ctx, v674);
                                let v1920 = constructor_x64_maxps(ctx, v93, v1883);
                                let v499 = &C::xmm_to_xmm_mem(ctx, v93);
                                let v1921 = constructor_x64_maxps(ctx, v674, v499);
                                let v1922 = &C::xmm_to_xmm_mem(ctx, v1921);
                                let v1923 = constructor_x64_xorps(ctx, v1920, v1922);
                                let v1924 = &C::xmm_to_xmm_mem(ctx, v1923);
                                let v1925 = constructor_x64_orps(ctx, v1920, v1924);
                                let v1926 = &C::xmm_to_xmm_mem(ctx, v1923);
                                let v1927 = constructor_x64_subps(ctx, v1925, v1926);
                                let v1928 = &C::xmm_to_xmm_mem(ctx, v1925);
                                let v1929 = constructor_x64_cmpps(ctx, v1925, v1928, &FcmpImm::Unordered);
                                let v1930 = &C::xmi_imm(ctx, 0xa_u32);
                                let v1931 = constructor_x64_psrld(ctx, v1929, v1930);
                                let v1932 = &C::xmm_to_xmm_mem(ctx, v1927);
                                let v1933 = constructor_x64_andnps(ctx, v1931, v1932);
                                let v1934 = constructor_output_xmm(ctx, v1933);
                                let v1935 = Some(v1934);
                                // Rule at src\isa\x64\lower.isle line 2794.
                                return v1935;
                            }
                            F64X2 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v674 = constructor_put_in_xmm(ctx, v59.1);
                                let v1883 = &C::xmm_to_xmm_mem(ctx, v674);
                                let v1936 = constructor_x64_maxpd(ctx, v93, v1883);
                                let v499 = &C::xmm_to_xmm_mem(ctx, v93);
                                let v1937 = constructor_x64_maxpd(ctx, v674, v499);
                                let v1938 = &C::xmm_to_xmm_mem(ctx, v1937);
                                let v1939 = constructor_x64_xorpd(ctx, v1936, v1938);
                                let v1940 = &C::xmm_to_xmm_mem(ctx, v1939);
                                let v1941 = constructor_x64_orpd(ctx, v1936, v1940);
                                let v1942 = &C::xmm_to_xmm_mem(ctx, v1939);
                                let v1943 = constructor_x64_subpd(ctx, v1941, v1942);
                                let v1944 = &C::xmm_to_xmm_mem(ctx, v1941);
                                let v1945 = constructor_x64_cmppd(ctx, v1941, v1944, &FcmpImm::Unordered);
                                let v1946 = &C::xmi_imm(ctx, 0xd_u32);
                                let v1947 = constructor_x64_psrlq(ctx, v1945, v1946);
                                let v1948 = &C::xmm_to_xmm_mem(ctx, v1943);
                                let v1949 = constructor_x64_andnpd(ctx, v1947, v1948);
                                let v1950 = constructor_output_xmm(ctx, v1949);
                                let v1951 = Some(v1950);
                                // Rule at src\isa\x64\lower.isle line 2839.
                                return v1951;
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Snarrow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8X16 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v2859 = C::value_type(ctx, v59.0);
                                if v2859 == I16X8 {
                                    let v93 = constructor_put_in_xmm(ctx, v59.0);
                                    let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                    let v2860 = constructor_x64_packsswb(ctx, v93, v94);
                                    let v2861 = constructor_output_xmm(ctx, v2860);
                                    let v2862 = Some(v2861);
                                    // Rule at src\isa\x64\lower.isle line 4109.
                                    return v2862;
                                }
                            }
                            I16X8 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v2859 = C::value_type(ctx, v59.0);
                                if v2859 == I32X4 {
                                    let v93 = constructor_put_in_xmm(ctx, v59.0);
                                    let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                    let v2863 = constructor_x64_packssdw(ctx, v93, v94);
                                    let v2864 = constructor_output_xmm(ctx, v2863);
                                    let v2865 = Some(v2864);
                                    // Rule at src\isa\x64\lower.isle line 4112.
                                    return v2865;
                                }
                            }
                            I32X4 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v120 = C::def_inst(ctx, v59.1);
                                if let Some(v121) = v120 {
                                    let v122 = &C::inst_data_value(ctx, v121);
                                    if let &InstructionData::UnaryConst {
                                        opcode: ref v2869,
                                        constant_handle: v2870,
                                    } = v122 {
                                        if let &Opcode::Vconst = v2869 {
                                            let v147 = C::def_inst(ctx, v59.0);
                                            if let Some(v148) = v147 {
                                                let v149 = &C::inst_data_value(ctx, v148);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v150,
                                                    arg: v151,
                                                } = v149 {
                                                    match v150 {
                                                        &Opcode::FcvtToSintSat => {
                                                            let v2866 = C::first_result(ctx, v148);
                                                            if let Some(v2867) = v2866 {
                                                                let v2868 = C::value_type(ctx, v2867);
                                                                if v2868 == I64X2 {
                                                                    let v2871 = C::u128_from_constant(ctx, v2870);
                                                                    if let Some(v2872) = v2871 {
                                                                        if v2872 == 0x0_u128 {
                                                                            let v286 = constructor_put_in_xmm(ctx, v151);
                                                                            let v2873 = &C::xmm_to_xmm_mem(ctx, v286);
                                                                            let v2874 = constructor_x64_cmppd(ctx, v286, v2873, &FcmpImm::Equal);
                                                                            let v2876 = C::emit_u128_le_const(ctx, 0x41dfffffffc0000041dfffffffc00000_u128);
                                                                            let v2877 = &constructor_const_to_xmm_mem(ctx, v2876);
                                                                            let v2878 = constructor_x64_andps(ctx, v2874, v2877);
                                                                            let v2879 = &C::xmm_to_xmm_mem(ctx, v2878);
                                                                            let v2880 = constructor_x64_minpd(ctx, v286, v2879);
                                                                            let v2881 = &C::xmm_to_xmm_mem(ctx, v2880);
                                                                            let v2882 = constructor_x64_cvttpd2dq(ctx, v2881);
                                                                            let v2883 = constructor_output_xmm(ctx, v2882);
                                                                            let v2884 = Some(v2883);
                                                                            // Rule at src\isa\x64\lower.isle line 4121.
                                                                            return v2884;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::X86Cvtt2dq => {
                                                            let v2866 = C::first_result(ctx, v148);
                                                            if let Some(v2867) = v2866 {
                                                                let v2868 = C::value_type(ctx, v2867);
                                                                if v2868 == I64X2 {
                                                                    let v2871 = C::u128_from_constant(ctx, v2870);
                                                                    if let Some(v2872) = v2871 {
                                                                        if v2872 == 0x0_u128 {
                                                                            let v731 = &C::put_in_xmm_mem(ctx, v151);
                                                                            let v2885 = constructor_x64_cvttpd2dq(ctx, v731);
                                                                            let v2886 = constructor_output_xmm(ctx, v2885);
                                                                            let v2887 = Some(v2886);
                                                                            // Rule at src\isa\x64\lower.isle line 4145.
                                                                            return v2887;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Unarrow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8X16 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v2859 = C::value_type(ctx, v59.0);
                                if v2859 == I16X8 {
                                    let v93 = constructor_put_in_xmm(ctx, v59.0);
                                    let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                    let v2888 = constructor_x64_packuswb(ctx, v93, v94);
                                    let v2889 = constructor_output_xmm(ctx, v2888);
                                    let v2890 = Some(v2889);
                                    // Rule at src\isa\x64\lower.isle line 4151.
                                    return v2890;
                                }
                            }
                            I16X8 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v2859 = C::value_type(ctx, v59.0);
                                if v2859 == I32X4 {
                                    let v670 = C::use_sse41(ctx);
                                    if v670 == true {
                                        let v93 = constructor_put_in_xmm(ctx, v59.0);
                                        let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                        let v2891 = constructor_x64_packusdw(ctx, v93, v94);
                                        let v2892 = constructor_output_xmm(ctx, v2891);
                                        let v2893 = Some(v2892);
                                        // Rule at src\isa\x64\lower.isle line 4154.
                                        return v2893;
                                    }
                                    let v93 = constructor_put_in_xmm(ctx, v59.0);
                                    let v2894 = constructor_unarrow_i32x4_lanes_to_low_u16_lanes(ctx, v93);
                                    let v2895 = constructor_put_in_xmm(ctx, v59.1);
                                    let v2896 = constructor_unarrow_i32x4_lanes_to_low_u16_lanes(ctx, v2895);
                                    let v2897 = &C::xmm_to_xmm_mem(ctx, v2896);
                                    let v2898 = constructor_x64_punpcklqdq(ctx, v2894, v2897);
                                    let v2899 = constructor_output_xmm(ctx, v2898);
                                    let v2900 = Some(v2899);
                                    // Rule at src\isa\x64\lower.isle line 4164.
                                    return v2900;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Uunarrow => {
                    let v59 = C::unpack_value_array_2(ctx, v58);
                    let v120 = C::def_inst(ctx, v59.1);
                    if let Some(v121) = v120 {
                        let v122 = &C::inst_data_value(ctx, v121);
                        if let &InstructionData::UnaryConst {
                            opcode: ref v2869,
                            constant_handle: v2870,
                        } = v122 {
                            if let &Opcode::Vconst = v2869 {
                                let v147 = C::def_inst(ctx, v59.0);
                                if let Some(v148) = v147 {
                                    let v149 = &C::inst_data_value(ctx, v148);
                                    if let &InstructionData::Unary {
                                        opcode: ref v150,
                                        arg: v151,
                                    } = v149 {
                                        if let &Opcode::FcvtToUintSat = v150 {
                                            let v660 = C::value_type(ctx, v151);
                                            if v660 == F64X2 {
                                                let v2871 = C::u128_from_constant(ctx, v2870);
                                                if let Some(v2872) = v2871 {
                                                    if v2872 == 0x0_u128 {
                                                        let v286 = constructor_put_in_xmm(ctx, v151);
                                                        let v2532 = constructor_xmm_zero(ctx, F64X2);
                                                        let v3448 = &C::xmm_to_xmm_mem(ctx, v2532);
                                                        let v3449 = constructor_x64_maxpd(ctx, v286, v3448);
                                                        let v3451 = C::emit_u128_le_const(ctx, 0x41efffffffe0000041efffffffe00000_u128);
                                                        let v3452 = &constructor_const_to_xmm_mem(ctx, v3451);
                                                        let v3453 = constructor_x64_minpd(ctx, v3449, v3452);
                                                        let v3454 = C::xmm_to_reg(ctx, v3453);
                                                        let v3455 = &constructor_xmm_to_reg_mem(ctx, v3454);
                                                        let v3456 = &C::xmm_mem_to_reg_mem(ctx, v3455);
                                                        let v3457 = constructor_x64_round(ctx, F64X2, v3456, &RoundImm::RoundZero);
                                                        let v3458 = C::emit_u128_le_const(ctx, 0x43300000000000004330000000000000_u128);
                                                        let v3459 = &constructor_const_to_xmm_mem(ctx, v3458);
                                                        let v3460 = constructor_x64_addpd(ctx, v3457, v3459);
                                                        let v3461 = &C::xmm_to_xmm_mem(ctx, v2532);
                                                        let v3462 = constructor_x64_shufps(ctx, v3460, v3461, 0x88_u8);
                                                        let v3463 = constructor_output_xmm(ctx, v3462);
                                                        let v3464 = Some(v3463);
                                                        // Rule at src\isa\x64\lower.isle line 5001.
                                                        return v3464;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                &Opcode::IaddPairwise => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8X16 => {
                                let v2682 = C::emit_u128_le_const(ctx, 0xff00ff00ff00ff00ff00ff00ff00ff_u128);
                                let v2683 = &constructor_const_to_xmm_mem(ctx, v2682);
                                let v2684 = constructor_x64_movdqu_load(ctx, v2683);
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v2685 = constructor_put_in_xmm(ctx, v59.0);
                                let v2686 = &C::xmm_to_xmm_mem(ctx, v2684);
                                let v2687 = constructor_x64_pand(ctx, v2685, v2686);
                                let v2688 = constructor_put_in_xmm(ctx, v59.1);
                                let v2689 = &C::xmm_to_xmm_mem(ctx, v2684);
                                let v2690 = constructor_x64_pand(ctx, v2688, v2689);
                                let v2691 = &C::xmm_to_xmm_mem(ctx, v2690);
                                let v2692 = constructor_x64_packuswb(ctx, v2687, v2691);
                                let v2693 = constructor_put_in_xmm(ctx, v59.0);
                                let v2695 = &C::xmi_imm(ctx, 0x8_u32);
                                let v2696 = constructor_x64_psrlw(ctx, v2693, v2695);
                                let v2697 = constructor_put_in_xmm(ctx, v59.1);
                                let v2698 = &C::xmi_imm(ctx, 0x8_u32);
                                let v2699 = constructor_x64_psrlw(ctx, v2697, v2698);
                                let v2700 = &C::xmm_to_xmm_mem(ctx, v2699);
                                let v2701 = constructor_x64_packuswb(ctx, v2696, v2700);
                                let v2702 = &C::xmm_to_xmm_mem(ctx, v2701);
                                let v2703 = constructor_x64_paddb(ctx, v2692, v2702);
                                let v2704 = constructor_output_xmm(ctx, v2703);
                                let v2705 = Some(v2704);
                                // Rule at src\isa\x64\lower.isle line 3898.
                                return v2705;
                            }
                            I16X8 => {
                                let v764 = C::use_ssse3(ctx);
                                if v764 == true {
                                    let v59 = C::unpack_value_array_2(ctx, v58);
                                    let v120 = C::def_inst(ctx, v59.1);
                                    if let Some(v121) = v120 {
                                        let v122 = &C::inst_data_value(ctx, v121);
                                        if let &InstructionData::Unary {
                                            opcode: ref v137,
                                            arg: v138,
                                        } = v122 {
                                            match v137 {
                                                &Opcode::SwidenHigh => {
                                                    let v147 = C::def_inst(ctx, v59.0);
                                                    if let Some(v148) = v147 {
                                                        let v149 = &C::inst_data_value(ctx, v148);
                                                        if let &InstructionData::Unary {
                                                            opcode: ref v150,
                                                            arg: v151,
                                                        } = v149 {
                                                            if let &Opcode::SwidenLow = v150 {
                                                                if v138 == v151 {
                                                                    let v660 = C::value_type(ctx, v151);
                                                                    if v660 == I8X16 {
                                                                        let v2745 = C::emit_u128_le_const(ctx, 0x1010101010101010101010101010101_u128);
                                                                        let v2746 = constructor_x64_xmm_load_const(ctx, I8X16, v2745);
                                                                        let v2747 = &C::put_in_xmm_mem(ctx, v151);
                                                                        let v2748 = constructor_x64_pmaddubsw(ctx, v2746, v2747);
                                                                        let v2749 = constructor_output_xmm(ctx, v2748);
                                                                        let v2750 = Some(v2749);
                                                                        // Rule at src\isa\x64\lower.isle line 3960.
                                                                        return v2750;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                &Opcode::UwidenHigh => {
                                                    let v147 = C::def_inst(ctx, v59.0);
                                                    if let Some(v148) = v147 {
                                                        let v149 = &C::inst_data_value(ctx, v148);
                                                        if let &InstructionData::Unary {
                                                            opcode: ref v150,
                                                            arg: v151,
                                                        } = v149 {
                                                            if let &Opcode::UwidenLow = v150 {
                                                                if v138 == v151 {
                                                                    let v660 = C::value_type(ctx, v151);
                                                                    if v660 == I8X16 {
                                                                        let v2745 = C::emit_u128_le_const(ctx, 0x1010101010101010101010101010101_u128);
                                                                        let v2758 = &constructor_const_to_xmm_mem(ctx, v2745);
                                                                        let v2754 = constructor_put_in_xmm(ctx, v151);
                                                                        let v2759 = constructor_x64_pmaddubsw(ctx, v2754, v2758);
                                                                        let v2760 = constructor_output_xmm(ctx, v2759);
                                                                        let v2761 = Some(v2760);
                                                                        // Rule at src\isa\x64\lower.isle line 3978.
                                                                        return v2761;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                    }
                                    let v93 = constructor_put_in_xmm(ctx, v59.0);
                                    let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                    let v2706 = constructor_x64_phaddw(ctx, v93, v94);
                                    let v2707 = constructor_output_xmm(ctx, v2706);
                                    let v2708 = Some(v2707);
                                    // Rule at src\isa\x64\lower.isle line 3914.
                                    return v2708;
                                }
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v674 = constructor_put_in_xmm(ctx, v59.1);
                                let v497 = &C::xmm_to_xmm_mem(ctx, v93);
                                let v2710 = constructor_x64_pshuflw(ctx, v497, 0xe8_u8);
                                let v2711 = &C::xmm_to_xmm_mem(ctx, v2710);
                                let v2712 = constructor_x64_pshufhw(ctx, v2711, 0xe8_u8);
                                let v2713 = &C::xmm_to_xmm_mem(ctx, v2712);
                                let v2714 = constructor_x64_pshufd(ctx, v2713, 0xe8_u8);
                                let v2715 = &C::xmm_to_xmm_mem(ctx, v674);
                                let v2716 = constructor_x64_pshuflw(ctx, v2715, 0xe8_u8);
                                let v2717 = &C::xmm_to_xmm_mem(ctx, v2716);
                                let v2718 = constructor_x64_pshufhw(ctx, v2717, 0xe8_u8);
                                let v2719 = &C::xmm_to_xmm_mem(ctx, v2718);
                                let v2720 = constructor_x64_pshufd(ctx, v2719, 0xe8_u8);
                                let v2721 = &C::xmm_to_xmm_mem(ctx, v2720);
                                let v2722 = constructor_x64_punpcklqdq(ctx, v2714, v2721);
                                let v2723 = &C::xmi_imm(ctx, 0x10_u32);
                                let v2724 = constructor_x64_psrad(ctx, v93, v2723);
                                let v2725 = &C::xmi_imm(ctx, 0x10_u32);
                                let v2726 = constructor_x64_psrad(ctx, v674, v2725);
                                let v2727 = &C::xmm_to_xmm_mem(ctx, v2726);
                                let v2728 = constructor_x64_packssdw(ctx, v2724, v2727);
                                let v2729 = &C::xmm_to_xmm_mem(ctx, v2728);
                                let v2730 = constructor_x64_paddw(ctx, v2722, v2729);
                                let v2731 = constructor_output_xmm(ctx, v2730);
                                let v2732 = Some(v2731);
                                // Rule at src\isa\x64\lower.isle line 3918.
                                return v2732;
                            }
                            I32X4 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v120 = C::def_inst(ctx, v59.1);
                                if let Some(v121) = v120 {
                                    let v122 = &C::inst_data_value(ctx, v121);
                                    match v122 {
                                        &InstructionData::Binary {
                                            opcode: ref v123,
                                            args: ref v124,
                                        } => {
                                            if let &Opcode::Imul = v123 {
                                                let v147 = C::def_inst(ctx, v59.0);
                                                if let Some(v148) = v147 {
                                                    let v149 = &C::inst_data_value(ctx, v148);
                                                    if let &InstructionData::Binary {
                                                        opcode: ref v365,
                                                        args: ref v366,
                                                    } = v149 {
                                                        if let &Opcode::Imul = v365 {
                                                            let v367 = C::unpack_value_array_2(ctx, v366);
                                                            let v370 = C::def_inst(ctx, v367.1);
                                                            if let Some(v371) = v370 {
                                                                let v372 = &C::inst_data_value(ctx, v371);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v2780,
                                                                    arg: v2781,
                                                                } = v372 {
                                                                    if let &Opcode::SwidenLow = v2780 {
                                                                        let v125 = C::unpack_value_array_2(ctx, v124);
                                                                        let v377 = C::def_inst(ctx, v125.1);
                                                                        if let Some(v378) = v377 {
                                                                            let v379 = &C::inst_data_value(ctx, v378);
                                                                            if let &InstructionData::Unary {
                                                                                opcode: ref v2787,
                                                                                arg: v2788,
                                                                            } = v379 {
                                                                                if let &Opcode::SwidenHigh = v2787 {
                                                                                    if v2781 == v2788 {
                                                                                        let v2775 = C::def_inst(ctx, v367.0);
                                                                                        if let Some(v2776) = v2775 {
                                                                                            let v2777 = &C::inst_data_value(ctx, v2776);
                                                                                            if let &InstructionData::Unary {
                                                                                                opcode: ref v2778,
                                                                                                arg: v2779,
                                                                                            } = v2777 {
                                                                                                if let &Opcode::SwidenLow = v2778 {
                                                                                                    let v2782 = C::def_inst(ctx, v125.0);
                                                                                                    if let Some(v2783) = v2782 {
                                                                                                        let v2784 = &C::inst_data_value(ctx, v2783);
                                                                                                        if let &InstructionData::Unary {
                                                                                                            opcode: ref v2785,
                                                                                                            arg: v2786,
                                                                                                        } = v2784 {
                                                                                                            if let &Opcode::SwidenHigh = v2785 {
                                                                                                                if v2779 == v2786 {
                                                                                                                    let v2789 = constructor_put_in_xmm(ctx, v2779);
                                                                                                                    let v2790 = &C::put_in_xmm_mem(ctx, v2781);
                                                                                                                    let v2791 = constructor_x64_pmaddwd(ctx, v2789, v2790);
                                                                                                                    let v2792 = constructor_output_xmm(ctx, v2791);
                                                                                                                    let v2793 = Some(v2792);
                                                                                                                    // Rule at src\isa\x64\lower.isle line 4001.
                                                                                                                    return v2793;
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &InstructionData::Unary {
                                            opcode: ref v137,
                                            arg: v138,
                                        } => {
                                            match v137 {
                                                &Opcode::SwidenHigh => {
                                                    let v147 = C::def_inst(ctx, v59.0);
                                                    if let Some(v148) = v147 {
                                                        let v149 = &C::inst_data_value(ctx, v148);
                                                        if let &InstructionData::Unary {
                                                            opcode: ref v150,
                                                            arg: v151,
                                                        } = v149 {
                                                            if let &Opcode::SwidenLow = v150 {
                                                                if v138 == v151 {
                                                                    let v660 = C::value_type(ctx, v151);
                                                                    if v660 == I16X8 {
                                                                        let v2752 = C::emit_u128_le_const(ctx, 0x10001000100010001000100010001_u128);
                                                                        let v2753 = &constructor_const_to_xmm_mem(ctx, v2752);
                                                                        let v2754 = constructor_put_in_xmm(ctx, v151);
                                                                        let v2755 = constructor_x64_pmaddwd(ctx, v2754, v2753);
                                                                        let v2756 = constructor_output_xmm(ctx, v2755);
                                                                        let v2757 = Some(v2756);
                                                                        // Rule at src\isa\x64\lower.isle line 3970.
                                                                        return v2757;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                &Opcode::UwidenHigh => {
                                                    let v147 = C::def_inst(ctx, v59.0);
                                                    if let Some(v148) = v147 {
                                                        let v149 = &C::inst_data_value(ctx, v148);
                                                        if let &InstructionData::Unary {
                                                            opcode: ref v150,
                                                            arg: v151,
                                                        } = v149 {
                                                            if let &Opcode::UwidenLow = v150 {
                                                                if v138 == v151 {
                                                                    let v660 = C::value_type(ctx, v151);
                                                                    if v660 == I16X8 {
                                                                        let v2763 = C::emit_u128_le_const(ctx, 0x80008000800080008000800080008000_u128);
                                                                        let v2764 = &constructor_const_to_xmm_mem(ctx, v2763);
                                                                        let v2754 = constructor_put_in_xmm(ctx, v151);
                                                                        let v2765 = constructor_x64_pxor(ctx, v2754, v2764);
                                                                        let v2766 = C::emit_u128_le_const(ctx, 0x10001000100010001000100010001_u128);
                                                                        let v2767 = &constructor_const_to_xmm_mem(ctx, v2766);
                                                                        let v2768 = constructor_x64_pmaddwd(ctx, v2765, v2767);
                                                                        let v2770 = C::emit_u128_le_const(ctx, 0x10000000100000001000000010000_u128);
                                                                        let v2771 = &constructor_const_to_xmm_mem(ctx, v2770);
                                                                        let v2772 = constructor_x64_paddd(ctx, v2768, v2771);
                                                                        let v2773 = constructor_output_xmm(ctx, v2772);
                                                                        let v2774 = Some(v2773);
                                                                        // Rule at src\isa\x64\lower.isle line 3987.
                                                                        return v2774;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                let v764 = C::use_ssse3(ctx);
                                if v764 == true {
                                    let v93 = constructor_put_in_xmm(ctx, v59.0);
                                    let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                    let v2733 = constructor_x64_phaddd(ctx, v93, v94);
                                    let v2734 = constructor_output_xmm(ctx, v2733);
                                    let v2735 = Some(v2734);
                                    // Rule at src\isa\x64\lower.isle line 3944.
                                    return v2735;
                                }
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v674 = constructor_put_in_xmm(ctx, v59.1);
                                let v1883 = &C::xmm_to_xmm_mem(ctx, v674);
                                let v2737 = constructor_x64_shufps(ctx, v93, v1883, 0x88_u8);
                                let v677 = &C::xmm_to_xmm_mem(ctx, v674);
                                let v2739 = constructor_x64_shufps(ctx, v93, v677, 0xdd_u8);
                                let v2740 = &C::xmm_to_xmm_mem(ctx, v2739);
                                let v2741 = constructor_x64_paddd(ctx, v2737, v2740);
                                let v2742 = constructor_output_xmm(ctx, v2741);
                                let v2743 = Some(v2742);
                                // Rule at src\isa\x64\lower.isle line 3948.
                                return v2743;
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::X86Pmaddubsw => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I16X8 {
                            let v764 = C::use_ssse3(ctx);
                            if v764 == true {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v1770 = constructor_put_in_xmm(ctx, v59.1);
                                let v282 = &C::put_in_xmm_mem(ctx, v59.0);
                                let v1771 = constructor_x64_pmaddubsw(ctx, v1770, v282);
                                let v1772 = constructor_output_xmm(ctx, v1771);
                                let v1773 = Some(v1772);
                                // Rule at src\isa\x64\lower.isle line 2612.
                                return v1773;
                            }
                        }
                    }
                }
                &Opcode::Iconcat => {
                    let v59 = C::unpack_value_array_2(ctx, v58);
                    let v2859 = C::value_type(ctx, v59.0);
                    if v2859 == I64 {
                        let v3393 = C::put_in_reg(ctx, v59.0);
                        let v3394 = C::put_in_reg(ctx, v59.1);
                        let v3395 = C::value_regs(ctx, v3393, v3394);
                        let v3396 = C::output(ctx, v3395);
                        let v3397 = Some(v3396);
                        // Rule at src\isa\x64\lower.isle line 4917.
                        return v3397;
                    }
                }
                _ => {}
            }
        }
        &InstructionData::BinaryImm8 {
            opcode: ref v3210,
            arg: v3211,
            imm: v3212,
        } => {
            if let &Opcode::Extractlane = v3210 {
                if v3212 == 0x0 {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v270 = C::ty_scalar_float(ctx, v3);
                        if let Some(v271) = v270 {
                            let v3213 = constructor_output_value(ctx, v3211);
                            let v3214 = Some(v3213);
                            // Rule at src\isa\x64\lower.isle line 4672.
                            return v3214;
                        }
                    }
                }
                let v3215 = C::value_type(ctx, v3211);
                match v3215 {
                    I8X16 => {
                        let v670 = C::use_sse41(ctx);
                        if v670 == true {
                            let v3224 = constructor_put_in_xmm(ctx, v3211);
                            let v3216 = C::u8_from_uimm8(ctx, v3212);
                            let v3225 = constructor_x64_pextrb(ctx, v3224, v3216);
                            let v3226 = constructor_output_gpr(ctx, v3225);
                            let v3227 = Some(v3226);
                            // Rule at src\isa\x64\lower.isle line 4687.
                            return v3227;
                        }
                        let v3216 = C::u8_from_uimm8(ctx, v3212);
                        let v3228 = C::u8_and(ctx, v3216, 0x1_u8);
                        match v3228 {
                            0x0_u8 => {
                                let v3224 = constructor_put_in_xmm(ctx, v3211);
                                let v3229 = C::u8_shr(ctx, v3216, 0x1_u8);
                                let v3230 = constructor_x64_pextrw(ctx, v3224, v3229);
                                let v3235 = constructor_output_gpr(ctx, v3230);
                                let v3236 = Some(v3235);
                                // Rule at src\isa\x64\lower.isle line 4698.
                                return v3236;
                            }
                            0x1_u8 => {
                                let v3224 = constructor_put_in_xmm(ctx, v3211);
                                let v3229 = C::u8_shr(ctx, v3216, 0x1_u8);
                                let v3230 = constructor_x64_pextrw(ctx, v3224, v3229);
                                let v1721 = Imm8Reg::Imm8 {
                                    imm: 0x8_u8,
                                };
                                let v3231 = &C::imm8_reg_to_imm8_gpr(ctx, &v1721);
                                let v3232 = constructor_x64_shr(ctx, I16, v3230, v3231);
                                let v3233 = constructor_output_gpr(ctx, v3232);
                                let v3234 = Some(v3233);
                                // Rule at src\isa\x64\lower.isle line 4691.
                                return v3234;
                            }
                            _ => {}
                        }
                    }
                    I16X8 => {
                        let v3224 = constructor_put_in_xmm(ctx, v3211);
                        let v3216 = C::u8_from_uimm8(ctx, v3212);
                        let v3237 = constructor_x64_pextrw(ctx, v3224, v3216);
                        let v3238 = constructor_output_gpr(ctx, v3237);
                        let v3239 = Some(v3238);
                        // Rule at src\isa\x64\lower.isle line 4703.
                        return v3239;
                    }
                    I32X4 => {
                        let v670 = C::use_sse41(ctx);
                        if v670 == true {
                            let v3224 = constructor_put_in_xmm(ctx, v3211);
                            let v3216 = C::u8_from_uimm8(ctx, v3212);
                            let v3240 = constructor_x64_pextrd(ctx, v3224, v3216);
                            let v3241 = constructor_output_gpr(ctx, v3240);
                            let v3242 = Some(v3241);
                            // Rule at src\isa\x64\lower.isle line 4707.
                            return v3242;
                        }
                        if v3212 == 0x0 {
                            let v3224 = constructor_put_in_xmm(ctx, v3211);
                            let v3243 = constructor_x64_movd_to_gpr(ctx, v3224);
                            let v3244 = constructor_output_gpr(ctx, v3243);
                            let v3245 = Some(v3244);
                            // Rule at src\isa\x64\lower.isle line 4710.
                            return v3245;
                        }
                        let v3217 = &C::put_in_xmm_mem(ctx, v3211);
                        let v3216 = C::u8_from_uimm8(ctx, v3212);
                        let v3218 = constructor_x64_pshufd(ctx, v3217, v3216);
                        let v3246 = constructor_x64_movd_to_gpr(ctx, v3218);
                        let v3247 = constructor_output_gpr(ctx, v3246);
                        let v3248 = Some(v3247);
                        // Rule at src\isa\x64\lower.isle line 4712.
                        return v3248;
                    }
                    I64X2 => {
                        let v670 = C::use_sse41(ctx);
                        if v670 == true {
                            let v3224 = constructor_put_in_xmm(ctx, v3211);
                            let v3216 = C::u8_from_uimm8(ctx, v3212);
                            let v3249 = constructor_x64_pextrq(ctx, v3224, v3216);
                            let v3250 = constructor_output_gpr(ctx, v3249);
                            let v3251 = Some(v3250);
                            // Rule at src\isa\x64\lower.isle line 4716.
                            return v3251;
                        }
                        match v3212 {
                            0x0 => {
                                let v3224 = constructor_put_in_xmm(ctx, v3211);
                                let v3252 = constructor_x64_movq_to_gpr(ctx, v3224);
                                let v3253 = constructor_output_gpr(ctx, v3252);
                                let v3254 = Some(v3253);
                                // Rule at src\isa\x64\lower.isle line 4719.
                                return v3254;
                            }
                            0x1 => {
                                let v3217 = &C::put_in_xmm_mem(ctx, v3211);
                                let v3255 = constructor_x64_pshufd(ctx, v3217, 0xe_u8);
                                let v3256 = constructor_x64_movq_to_gpr(ctx, v3255);
                                let v3257 = constructor_output_gpr(ctx, v3256);
                                let v3258 = Some(v3257);
                                // Rule at src\isa\x64\lower.isle line 4721.
                                return v3258;
                            }
                            _ => {}
                        }
                    }
                    F32X4 => {
                        let v3217 = &C::put_in_xmm_mem(ctx, v3211);
                        let v3216 = C::u8_from_uimm8(ctx, v3212);
                        let v3218 = constructor_x64_pshufd(ctx, v3217, v3216);
                        let v3219 = constructor_output_xmm(ctx, v3218);
                        let v3220 = Some(v3219);
                        // Rule at src\isa\x64\lower.isle line 4676.
                        return v3220;
                    }
                    F64X2 => {
                        if v3212 == 0x1 {
                            let v3217 = &C::put_in_xmm_mem(ctx, v3211);
                            let v3221 = constructor_x64_pshufd(ctx, v3217, 0xee_u8);
                            let v3222 = constructor_output_xmm(ctx, v3221);
                            let v3223 = Some(v3222);
                            // Rule at src\isa\x64\lower.isle line 4680.
                            return v3223;
                        }
                    }
                    _ => {}
                }
            }
        }
        &InstructionData::Call {
            opcode: ref v2458,
            args: v2459,
            func_ref: v2460,
        } => {
            match v2458 {
                &Opcode::Call => {
                    let v2462 = C::func_ref_data(ctx, v2460);
                    let v2461 = C::value_list_slice(ctx, v2459);
                    let v2466 = C::gen_call(ctx, v2462.0, v2462.1, v2462.2, v2461);
                    let v2467 = Some(v2466);
                    // Rule at src\isa\x64\lower.isle line 3470.
                    return v2467;
                }
                &Opcode::ReturnCall => {
                    let v2462 = C::func_ref_data(ctx, v2460);
                    let v2461 = C::value_list_slice(ctx, v2459);
                    let v2478 = C::gen_return_call(ctx, v2462.0, v2462.1, v2462.2, v2461);
                    let v2479 = Some(v2478);
                    // Rule at src\isa\x64\lower.isle line 3478.
                    return v2479;
                }
                _ => {}
            }
        }
        &InstructionData::CallIndirect {
            opcode: ref v2468,
            args: v2469,
            sig_ref: v2470,
        } => {
            match v2468 {
                &Opcode::CallIndirect => {
                    let v2471 = C::value_list_slice(ctx, v2469);
                    let v2472 = C::value_slice_unwrap(ctx, v2471);
                    if let Some(v2473) = v2472 {
                        let v2476 = C::gen_call_indirect(ctx, v2470, v2473.0, v2473.1);
                        let v2477 = Some(v2476);
                        // Rule at src\isa\x64\lower.isle line 3473.
                        return v2477;
                    }
                }
                &Opcode::ReturnCallIndirect => {
                    let v2471 = C::value_list_slice(ctx, v2469);
                    let v2472 = C::value_slice_unwrap(ctx, v2471);
                    if let Some(v2473) = v2472 {
                        let v2480 = C::gen_return_call_indirect(ctx, v2470, v2473.0, v2473.1);
                        let v2481 = Some(v2480);
                        // Rule at src\isa\x64\lower.isle line 3481.
                        return v2481;
                    }
                }
                _ => {}
            }
        }
        &InstructionData::CondTrap {
            opcode: ref v1210,
            arg: v1211,
            code: ref v1212,
        } => {
            match v1210 {
                &Opcode::Trapz => {
                    let v1217 = C::def_inst(ctx, v1211);
                    if let Some(v1218) = v1217 {
                        let v1219 = &C::inst_data_value(ctx, v1218);
                        if let &InstructionData::IntCompare {
                            opcode: ref v1220,
                            args: ref v1221,
                            cond: ref v1222,
                        } = v1219 {
                            if let &Opcode::Icmp = v1220 {
                                let v1226 = &C::intcc_complement(ctx, v1222);
                                let v1223 = C::unpack_value_array_2(ctx, v1221);
                                let v1227 = &constructor_emit_cmp(ctx, v1226, v1223.0, v1223.1);
                                let v1228 = &constructor_trap_if_icmp(ctx, v1227, v1212);
                                let v1229 = constructor_side_effect(ctx, v1228);
                                let v1230 = Some(v1229);
                                // Rule at src\isa\x64\lower.isle line 1902.
                                return v1230;
                            }
                        }
                    }
                    let v1214 = &constructor_trap_if_val(ctx, &ZeroCond::Zero, v1211, v1212);
                    let v1215 = constructor_side_effect(ctx, v1214);
                    let v1216 = Some(v1215);
                    // Rule at src\isa\x64\lower.isle line 1899.
                    return v1216;
                }
                &Opcode::Trapnz => {
                    let v1217 = C::def_inst(ctx, v1211);
                    if let Some(v1218) = v1217 {
                        let v1219 = &C::inst_data_value(ctx, v1218);
                        if let &InstructionData::IntCompare {
                            opcode: ref v1220,
                            args: ref v1221,
                            cond: ref v1222,
                        } = v1219 {
                            if let &Opcode::Icmp = v1220 {
                                let v1223 = C::unpack_value_array_2(ctx, v1221);
                                let v1235 = &constructor_emit_cmp(ctx, v1222, v1223.0, v1223.1);
                                let v1236 = &constructor_trap_if_icmp(ctx, v1235, v1212);
                                let v1237 = constructor_side_effect(ctx, v1236);
                                let v1238 = Some(v1237);
                                // Rule at src\isa\x64\lower.isle line 1910.
                                return v1238;
                            }
                        }
                    }
                    let v1232 = &constructor_trap_if_val(ctx, &ZeroCond::NonZero, v1211, v1212);
                    let v1233 = constructor_side_effect(ctx, v1232);
                    let v1234 = Some(v1233);
                    // Rule at src\isa\x64\lower.isle line 1907.
                    return v1234;
                }
                _ => {}
            }
        }
        &InstructionData::FloatCompare {
            opcode: ref v1435,
            args: ref v1436,
            cond: ref v1437,
        } => {
            if let &Opcode::Fcmp = v1435 {
                match v1437 {
                    &FloatCC::Equal => {
                        let v1438 = C::unpack_value_array_2(ctx, v1436);
                        let v1441 = C::value_type(ctx, v1438.0);
                        let v1448 = C::ty_vec128(ctx, v1441);
                        if let Some(v1449) = v1448 {
                            let v1450 = constructor_put_in_xmm(ctx, v1438.0);
                            let v1451 = &C::put_in_xmm_mem(ctx, v1438.1);
                            let v1453 = constructor_x64_cmpp(ctx, v1449, v1450, v1451, &FcmpImm::Equal);
                            let v1454 = constructor_output_xmm(ctx, v1453);
                            let v1455 = Some(v1454);
                            // Rule at src\isa\x64\lower.isle line 2143.
                            return v1455;
                        }
                    }
                    &FloatCC::GreaterThan => {
                        let v1438 = C::unpack_value_array_2(ctx, v1436);
                        let v1441 = C::value_type(ctx, v1438.0);
                        let v1448 = C::ty_vec128(ctx, v1441);
                        if let Some(v1449) = v1448 {
                            let v1484 = constructor_put_in_xmm(ctx, v1438.1);
                            let v1485 = &C::put_in_xmm_mem(ctx, v1438.0);
                            let v1486 = constructor_x64_cmpp(ctx, v1449, v1484, v1485, &FcmpImm::LessThan);
                            let v1487 = constructor_output_xmm(ctx, v1486);
                            let v1488 = Some(v1487);
                            // Rule at src\isa\x64\lower.isle line 2163.
                            return v1488;
                        }
                    }
                    &FloatCC::GreaterThanOrEqual => {
                        let v1438 = C::unpack_value_array_2(ctx, v1436);
                        let v1441 = C::value_type(ctx, v1438.0);
                        let v1448 = C::ty_vec128(ctx, v1441);
                        if let Some(v1449) = v1448 {
                            let v1484 = constructor_put_in_xmm(ctx, v1438.1);
                            let v1485 = &C::put_in_xmm_mem(ctx, v1438.0);
                            let v1489 = constructor_x64_cmpp(ctx, v1449, v1484, v1485, &FcmpImm::LessThanOrEqual);
                            let v1490 = constructor_output_xmm(ctx, v1489);
                            let v1491 = Some(v1490);
                            // Rule at src\isa\x64\lower.isle line 2165.
                            return v1491;
                        }
                    }
                    &FloatCC::LessThan => {
                        let v1438 = C::unpack_value_array_2(ctx, v1436);
                        let v1441 = C::value_type(ctx, v1438.0);
                        let v1448 = C::ty_vec128(ctx, v1441);
                        if let Some(v1449) = v1448 {
                            let v1450 = constructor_put_in_xmm(ctx, v1438.0);
                            let v1451 = &C::put_in_xmm_mem(ctx, v1438.1);
                            let v1461 = constructor_x64_cmpp(ctx, v1449, v1450, v1451, &FcmpImm::LessThan);
                            let v1462 = constructor_output_xmm(ctx, v1461);
                            let v1463 = Some(v1462);
                            // Rule at src\isa\x64\lower.isle line 2147.
                            return v1463;
                        }
                    }
                    &FloatCC::LessThanOrEqual => {
                        let v1438 = C::unpack_value_array_2(ctx, v1436);
                        let v1441 = C::value_type(ctx, v1438.0);
                        let v1448 = C::ty_vec128(ctx, v1441);
                        if let Some(v1449) = v1448 {
                            let v1450 = constructor_put_in_xmm(ctx, v1438.0);
                            let v1451 = &C::put_in_xmm_mem(ctx, v1438.1);
                            let v1465 = constructor_x64_cmpp(ctx, v1449, v1450, v1451, &FcmpImm::LessThanOrEqual);
                            let v1466 = constructor_output_xmm(ctx, v1465);
                            let v1467 = Some(v1466);
                            // Rule at src\isa\x64\lower.isle line 2149.
                            return v1467;
                        }
                    }
                    &FloatCC::NotEqual => {
                        let v1438 = C::unpack_value_array_2(ctx, v1436);
                        let v1441 = C::value_type(ctx, v1438.0);
                        let v1448 = C::ty_vec128(ctx, v1441);
                        if let Some(v1449) = v1448 {
                            let v1450 = constructor_put_in_xmm(ctx, v1438.0);
                            let v1451 = &C::put_in_xmm_mem(ctx, v1438.1);
                            let v1457 = constructor_x64_cmpp(ctx, v1449, v1450, v1451, &FcmpImm::NotEqual);
                            let v1458 = constructor_output_xmm(ctx, v1457);
                            let v1459 = Some(v1458);
                            // Rule at src\isa\x64\lower.isle line 2145.
                            return v1459;
                        }
                    }
                    &FloatCC::Ordered => {
                        let v1438 = C::unpack_value_array_2(ctx, v1436);
                        let v1441 = C::value_type(ctx, v1438.0);
                        let v1448 = C::ty_vec128(ctx, v1441);
                        if let Some(v1449) = v1448 {
                            let v1450 = constructor_put_in_xmm(ctx, v1438.0);
                            let v1451 = &C::put_in_xmm_mem(ctx, v1438.1);
                            let v1469 = constructor_x64_cmpp(ctx, v1449, v1450, v1451, &FcmpImm::Ordered);
                            let v1470 = constructor_output_xmm(ctx, v1469);
                            let v1471 = Some(v1470);
                            // Rule at src\isa\x64\lower.isle line 2151.
                            return v1471;
                        }
                    }
                    &FloatCC::Unordered => {
                        let v1438 = C::unpack_value_array_2(ctx, v1436);
                        let v1441 = C::value_type(ctx, v1438.0);
                        let v1448 = C::ty_vec128(ctx, v1441);
                        if let Some(v1449) = v1448 {
                            let v1450 = constructor_put_in_xmm(ctx, v1438.0);
                            let v1451 = &C::put_in_xmm_mem(ctx, v1438.1);
                            let v1473 = constructor_x64_cmpp(ctx, v1449, v1450, v1451, &FcmpImm::Unordered);
                            let v1474 = constructor_output_xmm(ctx, v1473);
                            let v1475 = Some(v1474);
                            // Rule at src\isa\x64\lower.isle line 2153.
                            return v1475;
                        }
                    }
                    &FloatCC::UnorderedOrGreaterThan => {
                        let v1438 = C::unpack_value_array_2(ctx, v1436);
                        let v1441 = C::value_type(ctx, v1438.0);
                        let v1448 = C::ty_vec128(ctx, v1441);
                        if let Some(v1449) = v1448 {
                            let v1450 = constructor_put_in_xmm(ctx, v1438.0);
                            let v1451 = &C::put_in_xmm_mem(ctx, v1438.1);
                            let v1477 = constructor_x64_cmpp(ctx, v1449, v1450, v1451, &FcmpImm::UnorderedOrGreaterThan);
                            let v1478 = constructor_output_xmm(ctx, v1477);
                            let v1479 = Some(v1478);
                            // Rule at src\isa\x64\lower.isle line 2155.
                            return v1479;
                        }
                    }
                    &FloatCC::UnorderedOrGreaterThanOrEqual => {
                        let v1438 = C::unpack_value_array_2(ctx, v1436);
                        let v1441 = C::value_type(ctx, v1438.0);
                        let v1448 = C::ty_vec128(ctx, v1441);
                        if let Some(v1449) = v1448 {
                            let v1450 = constructor_put_in_xmm(ctx, v1438.0);
                            let v1451 = &C::put_in_xmm_mem(ctx, v1438.1);
                            let v1481 = constructor_x64_cmpp(ctx, v1449, v1450, v1451, &FcmpImm::UnorderedOrGreaterThanOrEqual);
                            let v1482 = constructor_output_xmm(ctx, v1481);
                            let v1483 = Some(v1482);
                            // Rule at src\isa\x64\lower.isle line 2157.
                            return v1483;
                        }
                    }
                    &FloatCC::UnorderedOrLessThan => {
                        let v1438 = C::unpack_value_array_2(ctx, v1436);
                        let v1441 = C::value_type(ctx, v1438.0);
                        let v1448 = C::ty_vec128(ctx, v1441);
                        if let Some(v1449) = v1448 {
                            let v1484 = constructor_put_in_xmm(ctx, v1438.1);
                            let v1485 = &C::put_in_xmm_mem(ctx, v1438.0);
                            let v1492 = constructor_x64_cmpp(ctx, v1449, v1484, v1485, &FcmpImm::UnorderedOrGreaterThan);
                            let v1493 = constructor_output_xmm(ctx, v1492);
                            let v1494 = Some(v1493);
                            // Rule at src\isa\x64\lower.isle line 2167.
                            return v1494;
                        }
                    }
                    &FloatCC::UnorderedOrLessThanOrEqual => {
                        let v1438 = C::unpack_value_array_2(ctx, v1436);
                        let v1441 = C::value_type(ctx, v1438.0);
                        let v1448 = C::ty_vec128(ctx, v1441);
                        if let Some(v1449) = v1448 {
                            let v1484 = constructor_put_in_xmm(ctx, v1438.1);
                            let v1485 = &C::put_in_xmm_mem(ctx, v1438.0);
                            let v1495 = constructor_x64_cmpp(ctx, v1449, v1484, v1485, &FcmpImm::UnorderedOrGreaterThanOrEqual);
                            let v1496 = constructor_output_xmm(ctx, v1495);
                            let v1497 = Some(v1496);
                            // Rule at src\isa\x64\lower.isle line 2169.
                            return v1497;
                        }
                    }
                    _ => {}
                }
                let v1438 = C::unpack_value_array_2(ctx, v1436);
                let v1441 = C::value_type(ctx, v1438.0);
                let v1442 = C::ty_scalar_float(ctx, v1441);
                if let Some(v1443) = v1442 {
                    let v1444 = &constructor_emit_fcmp(ctx, v1437, v1438.0, v1438.1);
                    let v1445 = constructor_lower_fcmp_bool(ctx, v1444);
                    let v1446 = C::output(ctx, v1445);
                    let v1447 = Some(v1446);
                    // Rule at src\isa\x64\lower.isle line 2136.
                    return v1447;
                }
            }
        }
        &InstructionData::FuncAddr {
            opcode: ref v2318,
            func_ref: v2319,
        } => {
            if let &Opcode::FuncAddr = v2318 {
                let v2320 = C::func_ref_data(ctx, v2319);
                let v2325 = constructor_load_ext_name(ctx, v2320.1, 0_i64, v2320.2);
                let v2326 = constructor_output_reg(ctx, v2325);
                let v2327 = Some(v2326);
                // Rule at src\isa\x64\lower.isle line 3366.
                return v2327;
            }
        }
        &InstructionData::IntAddTrap {
            opcode: ref v1239,
            args: ref v1240,
            code: ref v1241,
        } => {
            if let &Opcode::UaddOverflowTrap = v1239 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v4 = C::fits_in_64(ctx, v3);
                    if let Some(v5) = v4 {
                        let v1242 = C::unpack_value_array_2(ctx, v1240);
                        let v1260 = &C::sinkable_load(ctx, v1242.0);
                        if let Some(v1261) = v1260 {
                            let v1254 = constructor_put_in_gpr(ctx, v1242.1);
                            let v1262 = &constructor_sink_load_to_gpr_mem_imm(ctx, v1261);
                            let v1263 = &constructor_x64_add_with_flags_paired(ctx, v5, v1254, v1262);
                            let v1248 = &constructor_trap_if(ctx, &CC::B, v1241);
                            let v1264 = constructor_with_flags(ctx, v1263, v1248);
                            let v1265 = C::output(ctx, v1264);
                            let v1266 = Some(v1265);
                            // Rule at src\isa\x64\lower.isle line 1929.
                            return v1266;
                        }
                        let v1252 = &C::simm32_from_value(ctx, v1242.0);
                        if let Some(v1253) = v1252 {
                            let v1254 = constructor_put_in_gpr(ctx, v1242.1);
                            let v1255 = &constructor_x64_add_with_flags_paired(ctx, v5, v1254, v1253);
                            let v1256 = &constructor_trap_if(ctx, &CC::B, v1241);
                            let v1257 = constructor_with_flags(ctx, v1255, v1256);
                            let v1258 = C::output(ctx, v1257);
                            let v1259 = Some(v1258);
                            // Rule at src\isa\x64\lower.isle line 1923.
                            return v1259;
                        }
                        let v1245 = constructor_put_in_gpr(ctx, v1242.0);
                        let v1246 = &constructor_put_in_gpr_mem_imm(ctx, v1242.1);
                        let v1247 = &constructor_x64_add_with_flags_paired(ctx, v5, v1245, v1246);
                        let v1248 = &constructor_trap_if(ctx, &CC::B, v1241);
                        let v1249 = constructor_with_flags(ctx, v1247, v1248);
                        let v1250 = C::output(ctx, v1249);
                        let v1251 = Some(v1250);
                        // Rule at src\isa\x64\lower.isle line 1915.
                        return v1251;
                    }
                }
            }
        }
        &InstructionData::IntCompare {
            opcode: ref v1272,
            args: ref v1273,
            cond: ref v1274,
        } => {
            if let &Opcode::Icmp = v1272 {
                match v1274 {
                    &IntCC::Equal => {
                        let v1275 = C::unpack_value_array_2(ctx, v1273);
                        let v1278 = C::value_type(ctx, v1275.0);
                        let v1334 = C::ty_vec128(ctx, v1278);
                        if let Some(v1335) = v1334 {
                            let v1336 = constructor_put_in_xmm(ctx, v1275.0);
                            let v1337 = &C::put_in_xmm_mem(ctx, v1275.1);
                            let v1338 = constructor_x64_pcmpeq(ctx, v1335, v1336, v1337);
                            let v1339 = constructor_output_xmm(ctx, v1338);
                            let v1340 = Some(v1339);
                            // Rule at src\isa\x64\lower.isle line 1986.
                            return v1340;
                        }
                    }
                    &IntCC::NotEqual => {
                        let v1275 = C::unpack_value_array_2(ctx, v1273);
                        let v1278 = C::value_type(ctx, v1275.0);
                        let v1334 = C::ty_vec128(ctx, v1278);
                        if let Some(v1335) = v1334 {
                            let v1336 = constructor_put_in_xmm(ctx, v1275.0);
                            let v1337 = &C::put_in_xmm_mem(ctx, v1275.1);
                            let v1338 = constructor_x64_pcmpeq(ctx, v1335, v1336, v1337);
                            let v1341 = constructor_vector_all_ones(ctx);
                            let v1342 = &C::xmm_to_xmm_mem(ctx, v1341);
                            let v1343 = constructor_x64_pxor(ctx, v1338, v1342);
                            let v1344 = constructor_output_xmm(ctx, v1343);
                            let v1345 = Some(v1344);
                            // Rule at src\isa\x64\lower.isle line 1991.
                            return v1345;
                        }
                    }
                    &IntCC::SignedGreaterThan => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            if v3 == I8 {
                                let v1275 = C::unpack_value_array_2(ctx, v1273);
                                let v1298 = C::def_inst(ctx, v1275.0);
                                if let Some(v1299) = v1298 {
                                    let v1300 = &C::inst_data_value(ctx, v1299);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v1301,
                                        imm: v1302,
                                    } = v1300 {
                                        if let &Opcode::Iconst = v1301 {
                                            let v1303 = C::u64_from_imm64(ctx, v1302);
                                            if v1303 == 0x0_u64 {
                                                let v1304 = C::value_type(ctx, v1275.1);
                                                match v1304 {
                                                    I32 => {
                                                        let v1305 = constructor_put_in_gpr(ctx, v1275.1);
                                                        let v1319 = Imm8Reg::Imm8 {
                                                            imm: 0x1f_u8,
                                                        };
                                                        let v1320 = &C::imm8_reg_to_imm8_gpr(ctx, &v1319);
                                                        let v1324 = constructor_x64_shr(ctx, I32, v1305, v1320);
                                                        let v1325 = constructor_output_gpr(ctx, v1324);
                                                        let v1326 = Some(v1325);
                                                        // Rule at src\isa\x64\lower.isle line 1970.
                                                        return v1326;
                                                    }
                                                    I64 => {
                                                        let v1305 = constructor_put_in_gpr(ctx, v1275.1);
                                                        let v1293 = Imm8Reg::Imm8 {
                                                            imm: 0x3f_u8,
                                                        };
                                                        let v1294 = &C::imm8_reg_to_imm8_gpr(ctx, &v1293);
                                                        let v1306 = constructor_x64_shr(ctx, I64, v1305, v1294);
                                                        let v1307 = constructor_output_gpr(ctx, v1306);
                                                        let v1308 = Some(v1307);
                                                        // Rule at src\isa\x64\lower.isle line 1954.
                                                        return v1308;
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let v1275 = C::unpack_value_array_2(ctx, v1273);
                        let v1278 = C::value_type(ctx, v1275.0);
                        let v1334 = C::ty_vec128(ctx, v1278);
                        if let Some(v1335) = v1334 {
                            let v1336 = constructor_put_in_xmm(ctx, v1275.0);
                            let v1337 = &C::put_in_xmm_mem(ctx, v1275.1);
                            let v1346 = constructor_x64_pcmpgt(ctx, v1335, v1336, v1337);
                            let v1347 = constructor_output_xmm(ctx, v1346);
                            let v1348 = Some(v1347);
                            // Rule at src\isa\x64\lower.isle line 1998.
                            return v1348;
                        }
                    }
                    &IntCC::SignedGreaterThanOrEqual => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            if v3 == I8 {
                                let v1275 = C::unpack_value_array_2(ctx, v1273);
                                let v1278 = C::value_type(ctx, v1275.0);
                                match v1278 {
                                    I32 => {
                                        let v1285 = C::def_inst(ctx, v1275.1);
                                        if let Some(v1286) = v1285 {
                                            let v1287 = &C::inst_data_value(ctx, v1286);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v1288,
                                                imm: v1289,
                                            } = v1287 {
                                                if let &Opcode::Iconst = v1288 {
                                                    let v1290 = C::u64_from_imm64(ctx, v1289);
                                                    if v1290 == 0x0_u64 {
                                                        let v1291 = constructor_put_in_gpr(ctx, v1275.0);
                                                        let v1314 = constructor_x64_not(ctx, I64, v1291);
                                                        let v1319 = Imm8Reg::Imm8 {
                                                            imm: 0x1f_u8,
                                                        };
                                                        let v1327 = &C::imm8_reg_to_imm8_gpr(ctx, &v1319);
                                                        let v1331 = constructor_x64_shr(ctx, I32, v1314, v1327);
                                                        let v1332 = constructor_output_gpr(ctx, v1331);
                                                        let v1333 = Some(v1332);
                                                        // Rule at src\isa\x64\lower.isle line 1978.
                                                        return v1333;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    I64 => {
                                        let v1285 = C::def_inst(ctx, v1275.1);
                                        if let Some(v1286) = v1285 {
                                            let v1287 = &C::inst_data_value(ctx, v1286);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v1288,
                                                imm: v1289,
                                            } = v1287 {
                                                if let &Opcode::Iconst = v1288 {
                                                    let v1290 = C::u64_from_imm64(ctx, v1289);
                                                    if v1290 == 0x0_u64 {
                                                        let v1291 = constructor_put_in_gpr(ctx, v1275.0);
                                                        let v1314 = constructor_x64_not(ctx, I64, v1291);
                                                        let v1293 = Imm8Reg::Imm8 {
                                                            imm: 0x3f_u8,
                                                        };
                                                        let v1310 = &C::imm8_reg_to_imm8_gpr(ctx, &v1293);
                                                        let v1315 = constructor_x64_shr(ctx, I64, v1314, v1310);
                                                        let v1316 = constructor_output_gpr(ctx, v1315);
                                                        let v1317 = Some(v1316);
                                                        // Rule at src\isa\x64\lower.isle line 1962.
                                                        return v1317;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        let v1275 = C::unpack_value_array_2(ctx, v1273);
                        let v1278 = C::value_type(ctx, v1275.0);
                        let v1334 = C::ty_vec128(ctx, v1278);
                        if let Some(v1335) = v1334 {
                            let v1386 = constructor_has_pmaxs(ctx, v1335);
                            if v1386 == true {
                                let v1336 = constructor_put_in_xmm(ctx, v1275.0);
                                let v1366 = constructor_put_in_xmm(ctx, v1275.0);
                                let v1387 = &C::put_in_xmm_mem(ctx, v1275.1);
                                let v1388 = constructor_x64_pmaxs(ctx, v1335, v1366, v1387);
                                let v1389 = &C::xmm_to_xmm_mem(ctx, v1388);
                                let v1390 = constructor_x64_pcmpeq(ctx, v1335, v1336, v1389);
                                let v1391 = constructor_output_xmm(ctx, v1390);
                                let v1392 = Some(v1391);
                                // Rule at src\isa\x64\lower.isle line 2048.
                                return v1392;
                            }
                            let v1349 = constructor_put_in_xmm(ctx, v1275.1);
                            let v1350 = &C::put_in_xmm_mem(ctx, v1275.0);
                            let v1351 = constructor_x64_pcmpgt(ctx, v1335, v1349, v1350);
                            let v1341 = constructor_vector_all_ones(ctx);
                            let v1342 = &C::xmm_to_xmm_mem(ctx, v1341);
                            let v1393 = constructor_x64_pxor(ctx, v1351, v1342);
                            let v1394 = constructor_output_xmm(ctx, v1393);
                            let v1395 = Some(v1394);
                            // Rule at src\isa\x64\lower.isle line 2054.
                            return v1395;
                        }
                    }
                    &IntCC::SignedLessThan => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            if v3 == I8 {
                                let v1275 = C::unpack_value_array_2(ctx, v1273);
                                let v1278 = C::value_type(ctx, v1275.0);
                                match v1278 {
                                    I32 => {
                                        let v1285 = C::def_inst(ctx, v1275.1);
                                        if let Some(v1286) = v1285 {
                                            let v1287 = &C::inst_data_value(ctx, v1286);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v1288,
                                                imm: v1289,
                                            } = v1287 {
                                                if let &Opcode::Iconst = v1288 {
                                                    let v1290 = C::u64_from_imm64(ctx, v1289);
                                                    if v1290 == 0x0_u64 {
                                                        let v1291 = constructor_put_in_gpr(ctx, v1275.0);
                                                        let v1319 = Imm8Reg::Imm8 {
                                                            imm: 0x1f_u8,
                                                        };
                                                        let v1320 = &C::imm8_reg_to_imm8_gpr(ctx, &v1319);
                                                        let v1321 = constructor_x64_shr(ctx, I32, v1291, v1320);
                                                        let v1322 = constructor_output_gpr(ctx, v1321);
                                                        let v1323 = Some(v1322);
                                                        // Rule at src\isa\x64\lower.isle line 1966.
                                                        return v1323;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    I64 => {
                                        let v1285 = C::def_inst(ctx, v1275.1);
                                        if let Some(v1286) = v1285 {
                                            let v1287 = &C::inst_data_value(ctx, v1286);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v1288,
                                                imm: v1289,
                                            } = v1287 {
                                                if let &Opcode::Iconst = v1288 {
                                                    let v1290 = C::u64_from_imm64(ctx, v1289);
                                                    if v1290 == 0x0_u64 {
                                                        let v1291 = constructor_put_in_gpr(ctx, v1275.0);
                                                        let v1293 = Imm8Reg::Imm8 {
                                                            imm: 0x3f_u8,
                                                        };
                                                        let v1294 = &C::imm8_reg_to_imm8_gpr(ctx, &v1293);
                                                        let v1295 = constructor_x64_shr(ctx, I64, v1291, v1294);
                                                        let v1296 = constructor_output_gpr(ctx, v1295);
                                                        let v1297 = Some(v1296);
                                                        // Rule at src\isa\x64\lower.isle line 1950.
                                                        return v1297;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        let v1275 = C::unpack_value_array_2(ctx, v1273);
                        let v1278 = C::value_type(ctx, v1275.0);
                        let v1334 = C::ty_vec128(ctx, v1278);
                        if let Some(v1335) = v1334 {
                            let v1349 = constructor_put_in_xmm(ctx, v1275.1);
                            let v1350 = &C::put_in_xmm_mem(ctx, v1275.0);
                            let v1351 = constructor_x64_pcmpgt(ctx, v1335, v1349, v1350);
                            let v1352 = constructor_output_xmm(ctx, v1351);
                            let v1353 = Some(v1352);
                            // Rule at src\isa\x64\lower.isle line 2003.
                            return v1353;
                        }
                    }
                    &IntCC::SignedLessThanOrEqual => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            if v3 == I8 {
                                let v1275 = C::unpack_value_array_2(ctx, v1273);
                                let v1298 = C::def_inst(ctx, v1275.0);
                                if let Some(v1299) = v1298 {
                                    let v1300 = &C::inst_data_value(ctx, v1299);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v1301,
                                        imm: v1302,
                                    } = v1300 {
                                        if let &Opcode::Iconst = v1301 {
                                            let v1303 = C::u64_from_imm64(ctx, v1302);
                                            if v1303 == 0x0_u64 {
                                                let v1304 = C::value_type(ctx, v1275.1);
                                                match v1304 {
                                                    I32 => {
                                                        let v1305 = constructor_put_in_gpr(ctx, v1275.1);
                                                        let v1309 = constructor_x64_not(ctx, I64, v1305);
                                                        let v1319 = Imm8Reg::Imm8 {
                                                            imm: 0x1f_u8,
                                                        };
                                                        let v1327 = &C::imm8_reg_to_imm8_gpr(ctx, &v1319);
                                                        let v1328 = constructor_x64_shr(ctx, I32, v1309, v1327);
                                                        let v1329 = constructor_output_gpr(ctx, v1328);
                                                        let v1330 = Some(v1329);
                                                        // Rule at src\isa\x64\lower.isle line 1974.
                                                        return v1330;
                                                    }
                                                    I64 => {
                                                        let v1305 = constructor_put_in_gpr(ctx, v1275.1);
                                                        let v1309 = constructor_x64_not(ctx, I64, v1305);
                                                        let v1293 = Imm8Reg::Imm8 {
                                                            imm: 0x3f_u8,
                                                        };
                                                        let v1310 = &C::imm8_reg_to_imm8_gpr(ctx, &v1293);
                                                        let v1311 = constructor_x64_shr(ctx, I64, v1309, v1310);
                                                        let v1312 = constructor_output_gpr(ctx, v1311);
                                                        let v1313 = Some(v1312);
                                                        // Rule at src\isa\x64\lower.isle line 1958.
                                                        return v1313;
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let v1275 = C::unpack_value_array_2(ctx, v1273);
                        let v1278 = C::value_type(ctx, v1275.0);
                        let v1334 = C::ty_vec128(ctx, v1278);
                        if let Some(v1335) = v1334 {
                            let v1396 = constructor_has_pmins(ctx, v1335);
                            if v1396 == true {
                                let v1336 = constructor_put_in_xmm(ctx, v1275.0);
                                let v1366 = constructor_put_in_xmm(ctx, v1275.0);
                                let v1387 = &C::put_in_xmm_mem(ctx, v1275.1);
                                let v1397 = constructor_x64_pmins(ctx, v1335, v1366, v1387);
                                let v1398 = &C::xmm_to_xmm_mem(ctx, v1397);
                                let v1399 = constructor_x64_pcmpeq(ctx, v1335, v1336, v1398);
                                let v1400 = constructor_output_xmm(ctx, v1399);
                                let v1401 = Some(v1400);
                                // Rule at src\isa\x64\lower.isle line 2060.
                                return v1401;
                            }
                            let v1336 = constructor_put_in_xmm(ctx, v1275.0);
                            let v1337 = &C::put_in_xmm_mem(ctx, v1275.1);
                            let v1346 = constructor_x64_pcmpgt(ctx, v1335, v1336, v1337);
                            let v1341 = constructor_vector_all_ones(ctx);
                            let v1342 = &C::xmm_to_xmm_mem(ctx, v1341);
                            let v1402 = constructor_x64_pxor(ctx, v1346, v1342);
                            let v1403 = constructor_output_xmm(ctx, v1402);
                            let v1404 = Some(v1403);
                            // Rule at src\isa\x64\lower.isle line 2065.
                            return v1404;
                        }
                    }
                    &IntCC::UnsignedGreaterThan => {
                        let v1275 = C::unpack_value_array_2(ctx, v1273);
                        let v1278 = C::value_type(ctx, v1275.0);
                        let v1334 = C::ty_vec128(ctx, v1278);
                        if let Some(v1335) = v1334 {
                            let v1354 = constructor_has_pmaxu(ctx, v1335);
                            if v1354 == true {
                                let v1336 = constructor_put_in_xmm(ctx, v1275.0);
                                let v1355 = constructor_put_in_xmm(ctx, v1275.1);
                                let v1356 = &C::xmm_to_xmm_mem(ctx, v1355);
                                let v1357 = constructor_x64_pmaxu(ctx, v1335, v1336, v1356);
                                let v1358 = &C::xmm_to_xmm_mem(ctx, v1355);
                                let v1359 = constructor_x64_pcmpeq(ctx, v1335, v1357, v1358);
                                let v1360 = constructor_vector_all_ones(ctx);
                                let v1361 = &C::xmm_to_xmm_mem(ctx, v1360);
                                let v1362 = constructor_x64_pxor(ctx, v1359, v1361);
                                let v1363 = constructor_output_xmm(ctx, v1362);
                                let v1364 = Some(v1363);
                                // Rule at src\isa\x64\lower.isle line 2010.
                                return v1364;
                            }
                            let v1365 = constructor_flip_high_bit_mask(ctx, v1335);
                            let v1366 = constructor_put_in_xmm(ctx, v1275.0);
                            let v1367 = &C::xmm_to_xmm_mem(ctx, v1365);
                            let v1368 = constructor_x64_pxor(ctx, v1366, v1367);
                            let v1369 = constructor_put_in_xmm(ctx, v1275.1);
                            let v1370 = &C::xmm_to_xmm_mem(ctx, v1365);
                            let v1371 = constructor_x64_pxor(ctx, v1369, v1370);
                            let v1372 = &C::xmm_to_xmm_mem(ctx, v1371);
                            let v1373 = constructor_x64_pcmpgt(ctx, v1335, v1368, v1372);
                            let v1374 = constructor_output_xmm(ctx, v1373);
                            let v1375 = Some(v1374);
                            // Rule at src\isa\x64\lower.isle line 2020.
                            return v1375;
                        }
                    }
                    &IntCC::UnsignedGreaterThanOrEqual => {
                        let v1275 = C::unpack_value_array_2(ctx, v1273);
                        let v1278 = C::value_type(ctx, v1275.0);
                        let v1334 = C::ty_vec128(ctx, v1278);
                        if let Some(v1335) = v1334 {
                            let v1354 = constructor_has_pmaxu(ctx, v1335);
                            if v1354 == true {
                                let v1336 = constructor_put_in_xmm(ctx, v1275.0);
                                let v1366 = constructor_put_in_xmm(ctx, v1275.0);
                                let v1387 = &C::put_in_xmm_mem(ctx, v1275.1);
                                let v1405 = constructor_x64_pmaxu(ctx, v1335, v1366, v1387);
                                let v1406 = &C::xmm_to_xmm_mem(ctx, v1405);
                                let v1407 = constructor_x64_pcmpeq(ctx, v1335, v1336, v1406);
                                let v1408 = constructor_output_xmm(ctx, v1407);
                                let v1409 = Some(v1408);
                                // Rule at src\isa\x64\lower.isle line 2070.
                                return v1409;
                            }
                        }
                        if v1278 == I16X8 {
                            let v1349 = constructor_put_in_xmm(ctx, v1275.1);
                            let v1350 = &C::put_in_xmm_mem(ctx, v1275.0);
                            let v1410 = constructor_x64_psubusw(ctx, v1349, v1350);
                            let v1411 = constructor_xmm_zero(ctx, I16X8);
                            let v1412 = &C::xmm_to_xmm_mem(ctx, v1411);
                            let v1413 = constructor_x64_pcmpeqw(ctx, v1410, v1412);
                            let v1414 = constructor_output_xmm(ctx, v1413);
                            let v1415 = Some(v1414);
                            // Rule at src\isa\x64\lower.isle line 2076.
                            return v1415;
                        }
                        if let Some(v1335) = v1334 {
                            let v1365 = constructor_flip_high_bit_mask(ctx, v1335);
                            let v1366 = constructor_put_in_xmm(ctx, v1275.0);
                            let v1367 = &C::xmm_to_xmm_mem(ctx, v1365);
                            let v1368 = constructor_x64_pxor(ctx, v1366, v1367);
                            let v1369 = constructor_put_in_xmm(ctx, v1275.1);
                            let v1370 = &C::xmm_to_xmm_mem(ctx, v1365);
                            let v1371 = constructor_x64_pxor(ctx, v1369, v1370);
                            let v1382 = &C::xmm_to_xmm_mem(ctx, v1368);
                            let v1383 = constructor_x64_pcmpgt(ctx, v1335, v1371, v1382);
                            let v1416 = constructor_vector_all_ones(ctx);
                            let v1417 = &C::xmm_to_xmm_mem(ctx, v1416);
                            let v1418 = constructor_x64_pxor(ctx, v1383, v1417);
                            let v1419 = constructor_output_xmm(ctx, v1418);
                            let v1420 = Some(v1419);
                            // Rule at src\isa\x64\lower.isle line 2082.
                            return v1420;
                        }
                    }
                    &IntCC::UnsignedLessThan => {
                        let v1275 = C::unpack_value_array_2(ctx, v1273);
                        let v1278 = C::value_type(ctx, v1275.0);
                        let v1334 = C::ty_vec128(ctx, v1278);
                        if let Some(v1335) = v1334 {
                            let v1376 = constructor_has_pminu(ctx, v1335);
                            if v1376 == true {
                                let v1336 = constructor_put_in_xmm(ctx, v1275.0);
                                let v1355 = constructor_put_in_xmm(ctx, v1275.1);
                                let v1356 = &C::xmm_to_xmm_mem(ctx, v1355);
                                let v1377 = constructor_x64_pminu(ctx, v1335, v1336, v1356);
                                let v1358 = &C::xmm_to_xmm_mem(ctx, v1355);
                                let v1378 = constructor_x64_pcmpeq(ctx, v1335, v1377, v1358);
                                let v1360 = constructor_vector_all_ones(ctx);
                                let v1361 = &C::xmm_to_xmm_mem(ctx, v1360);
                                let v1379 = constructor_x64_pxor(ctx, v1378, v1361);
                                let v1380 = constructor_output_xmm(ctx, v1379);
                                let v1381 = Some(v1380);
                                // Rule at src\isa\x64\lower.isle line 2028.
                                return v1381;
                            }
                            let v1365 = constructor_flip_high_bit_mask(ctx, v1335);
                            let v1366 = constructor_put_in_xmm(ctx, v1275.0);
                            let v1367 = &C::xmm_to_xmm_mem(ctx, v1365);
                            let v1368 = constructor_x64_pxor(ctx, v1366, v1367);
                            let v1369 = constructor_put_in_xmm(ctx, v1275.1);
                            let v1370 = &C::xmm_to_xmm_mem(ctx, v1365);
                            let v1371 = constructor_x64_pxor(ctx, v1369, v1370);
                            let v1382 = &C::xmm_to_xmm_mem(ctx, v1368);
                            let v1383 = constructor_x64_pcmpgt(ctx, v1335, v1371, v1382);
                            let v1384 = constructor_output_xmm(ctx, v1383);
                            let v1385 = Some(v1384);
                            // Rule at src\isa\x64\lower.isle line 2039.
                            return v1385;
                        }
                    }
                    &IntCC::UnsignedLessThanOrEqual => {
                        let v1275 = C::unpack_value_array_2(ctx, v1273);
                        let v1278 = C::value_type(ctx, v1275.0);
                        let v1334 = C::ty_vec128(ctx, v1278);
                        if let Some(v1335) = v1334 {
                            let v1376 = constructor_has_pminu(ctx, v1335);
                            if v1376 == true {
                                let v1336 = constructor_put_in_xmm(ctx, v1275.0);
                                let v1366 = constructor_put_in_xmm(ctx, v1275.0);
                                let v1387 = &C::put_in_xmm_mem(ctx, v1275.1);
                                let v1421 = constructor_x64_pminu(ctx, v1335, v1366, v1387);
                                let v1422 = &C::xmm_to_xmm_mem(ctx, v1421);
                                let v1423 = constructor_x64_pcmpeq(ctx, v1335, v1336, v1422);
                                let v1424 = constructor_output_xmm(ctx, v1423);
                                let v1425 = Some(v1424);
                                // Rule at src\isa\x64\lower.isle line 2093.
                                return v1425;
                            }
                        }
                        if v1278 == I16X8 {
                            let v1336 = constructor_put_in_xmm(ctx, v1275.0);
                            let v1337 = &C::put_in_xmm_mem(ctx, v1275.1);
                            let v1426 = constructor_x64_psubusw(ctx, v1336, v1337);
                            let v1427 = constructor_xmm_zero(ctx, I8X16);
                            let v1428 = &C::xmm_to_xmm_mem(ctx, v1427);
                            let v1429 = constructor_x64_pcmpeqw(ctx, v1426, v1428);
                            let v1430 = constructor_output_xmm(ctx, v1429);
                            let v1431 = Some(v1430);
                            // Rule at src\isa\x64\lower.isle line 2100.
                            return v1431;
                        }
                        if let Some(v1335) = v1334 {
                            let v1365 = constructor_flip_high_bit_mask(ctx, v1335);
                            let v1366 = constructor_put_in_xmm(ctx, v1275.0);
                            let v1367 = &C::xmm_to_xmm_mem(ctx, v1365);
                            let v1368 = constructor_x64_pxor(ctx, v1366, v1367);
                            let v1369 = constructor_put_in_xmm(ctx, v1275.1);
                            let v1370 = &C::xmm_to_xmm_mem(ctx, v1365);
                            let v1371 = constructor_x64_pxor(ctx, v1369, v1370);
                            let v1372 = &C::xmm_to_xmm_mem(ctx, v1371);
                            let v1373 = constructor_x64_pcmpgt(ctx, v1335, v1368, v1372);
                            let v1416 = constructor_vector_all_ones(ctx);
                            let v1417 = &C::xmm_to_xmm_mem(ctx, v1416);
                            let v1432 = constructor_x64_pxor(ctx, v1373, v1417);
                            let v1433 = constructor_output_xmm(ctx, v1432);
                            let v1434 = Some(v1433);
                            // Rule at src\isa\x64\lower.isle line 2108.
                            return v1434;
                        }
                    }
                    _ => {}
                }
                let v1275 = C::unpack_value_array_2(ctx, v1273);
                let v1278 = C::value_type(ctx, v1275.0);
                if v1278 == I128 {
                    let v1281 = &constructor_emit_cmp(ctx, v1274, v1275.0, v1275.1);
                    let v1282 = constructor_lower_icmp_bool(ctx, v1281);
                    let v1283 = C::output(ctx, v1282);
                    let v1284 = Some(v1283);
                    // Rule at src\isa\x64\lower.isle line 1946.
                    return v1284;
                }
                let v1279 = C::fits_in_64(ctx, v1278);
                if let Some(v1280) = v1279 {
                    let v1281 = &constructor_emit_cmp(ctx, v1274, v1275.0, v1275.1);
                    let v1282 = constructor_lower_icmp_bool(ctx, v1281);
                    let v1283 = C::output(ctx, v1282);
                    let v1284 = Some(v1283);
                    // Rule at src\isa\x64\lower.isle line 1943.
                    return v1284;
                }
            }
        }
        &InstructionData::Load {
            opcode: ref v2037,
            arg: v2038,
            flags: v2039,
            offset: v2040,
        } => {
            match v2037 {
                &Opcode::Load => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v2034 = &C::type_register_class(ctx, v3);
                        if let Some(v2035) = v2034 {
                            if let &RegisterClass::Xmm = v2035 {
                                let v2076 = C::ty_16(ctx, v3);
                                if let Some(v2077) = v2076 {
                                    let v2078 = constructor_xmm_uninit_value(ctx);
                                    let v2044 = &constructor_to_amode(ctx, v2039, v2038, v2040);
                                    let v2045 = &constructor_amode_to_gpr_mem(ctx, v2044);
                                    let v2080 = constructor_x64_pinsrw(ctx, v2078, v2045, 0x0_u8);
                                    let v2081 = constructor_output_xmm(ctx, v2080);
                                    let v2082 = Some(v2081);
                                    // Rule at src\isa\x64\lower.isle line 3031.
                                    return v2082;
                                }
                                let v2083 = C::ty_32(ctx, v3);
                                if let Some(v2084) = v2083 {
                                    let v2051 = &constructor_to_amode(ctx, v2039, v2038, v2040);
                                    let v2085 = &C::amode_to_synthetic_amode(ctx, v2051);
                                    let v2086 = constructor_x64_movss_load(ctx, v2085);
                                    let v2087 = constructor_output_xmm(ctx, v2086);
                                    let v2088 = Some(v2087);
                                    // Rule at src\isa\x64\lower.isle line 3033.
                                    return v2088;
                                }
                                let v2089 = C::ty_64(ctx, v3);
                                if let Some(v2090) = v2089 {
                                    let v2051 = &constructor_to_amode(ctx, v2039, v2038, v2040);
                                    let v2085 = &C::amode_to_synthetic_amode(ctx, v2051);
                                    let v2091 = constructor_x64_movsd_load(ctx, v2085);
                                    let v2092 = constructor_output_xmm(ctx, v2091);
                                    let v2093 = Some(v2092);
                                    // Rule at src\isa\x64\lower.isle line 3035.
                                    return v2093;
                                }
                            }
                        }
                        match v3 {
                            F32X4 => {
                                let v2051 = &constructor_to_amode(ctx, v2039, v2038, v2040);
                                let v2085 = &C::amode_to_synthetic_amode(ctx, v2051);
                                let v2094 = constructor_x64_movups_load(ctx, v2085);
                                let v2095 = constructor_output_xmm(ctx, v2094);
                                let v2096 = Some(v2095);
                                // Rule at src\isa\x64\lower.isle line 3037.
                                return v2096;
                            }
                            F64X2 => {
                                let v2051 = &constructor_to_amode(ctx, v2039, v2038, v2040);
                                let v2085 = &C::amode_to_synthetic_amode(ctx, v2051);
                                let v2097 = constructor_x64_movupd_load(ctx, v2085);
                                let v2098 = constructor_output_xmm(ctx, v2097);
                                let v2099 = Some(v2098);
                                // Rule at src\isa\x64\lower.isle line 3039.
                                return v2099;
                            }
                            _ => {}
                        }
                        if let Some(v2035) = v2034 {
                            if let &RegisterClass::Xmm = v2035 {
                                let v2100 = C::ty_128(ctx, v3);
                                if let Some(v2101) = v2100 {
                                    let v2051 = &constructor_to_amode(ctx, v2039, v2038, v2040);
                                    let v2102 = &constructor_amode_to_xmm_mem(ctx, v2051);
                                    let v2103 = constructor_x64_movdqu_load(ctx, v2102);
                                    let v2104 = constructor_output_xmm(ctx, v2103);
                                    let v2105 = Some(v2104);
                                    // Rule at src\isa\x64\lower.isle line 3041.
                                    return v2105;
                                }
                            }
                        }
                        let v2049 = C::ty_int_ref_64(ctx, v3);
                        if let Some(v2050) = v2049 {
                            let v2051 = &constructor_to_amode(ctx, v2039, v2038, v2040);
                            let v2052 = constructor_x64_mov(ctx, v2051);
                            let v2053 = constructor_output_reg(ctx, v2052);
                            let v2054 = Some(v2053);
                            // Rule at src\isa\x64\lower.isle line 3009.
                            return v2054;
                        }
                        if v3 == I128 {
                            let v2051 = &constructor_to_amode(ctx, v2039, v2038, v2040);
                            let v2107 = &C::amode_offset(ctx, v2051, 8_i32);
                            let v2108 = constructor_x64_mov(ctx, v2051);
                            let v2109 = constructor_x64_mov(ctx, v2107);
                            let v2110 = C::value_regs(ctx, v2108, v2109);
                            let v2111 = C::output(ctx, v2110);
                            let v2112 = Some(v2111);
                            // Rule at src\isa\x64\lower.isle line 3045.
                            return v2112;
                        }
                        if let Some(v2035) = v2034 {
                            if let &RegisterClass::Gpr {
                                single_register: v2036,
                            } = v2035 {
                                let v1746 = C::fits_in_32(ctx, v3);
                                if let Some(v1747) = v1746 {
                                    let v2041 = C::ty_bits_u16(ctx, v1747);
                                    let v2043 = &C::ext_mode(ctx, v2041, 0x40_u16);
                                    let v2044 = &constructor_to_amode(ctx, v2039, v2038, v2040);
                                    let v2045 = &constructor_amode_to_gpr_mem(ctx, v2044);
                                    let v2046 = constructor_x64_movzx(ctx, v2043, v2045);
                                    let v2047 = constructor_output_gpr(ctx, v2046);
                                    let v2048 = Some(v2047);
                                    // Rule at src\isa\x64\lower.isle line 3005.
                                    return v2048;
                                }
                            }
                        }
                    }
                }
                &Opcode::Uload8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v2034 = &C::type_register_class(ctx, v3);
                        if let Some(v2035) = v2034 {
                            if let &RegisterClass::Gpr {
                                single_register: v2036,
                            } = v2035 {
                                let v2051 = &constructor_to_amode(ctx, v2039, v2038, v2040);
                                let v2055 = &constructor_amode_to_gpr_mem(ctx, v2051);
                                let v2056 = constructor_x64_movzx(ctx, &ExtMode::BQ, v2055);
                                let v2057 = constructor_output_gpr(ctx, v2056);
                                let v2058 = Some(v2057);
                                // Rule at src\isa\x64\lower.isle line 3014.
                                return v2058;
                            }
                        }
                    }
                }
                &Opcode::Sload8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v2034 = &C::type_register_class(ctx, v3);
                        if let Some(v2035) = v2034 {
                            if let &RegisterClass::Gpr {
                                single_register: v2036,
                            } = v2035 {
                                let v2051 = &constructor_to_amode(ctx, v2039, v2038, v2040);
                                let v2055 = &constructor_amode_to_gpr_mem(ctx, v2051);
                                let v2059 = constructor_x64_movsx(ctx, &ExtMode::BQ, v2055);
                                let v2060 = constructor_output_gpr(ctx, v2059);
                                let v2061 = Some(v2060);
                                // Rule at src\isa\x64\lower.isle line 3016.
                                return v2061;
                            }
                        }
                    }
                }
                &Opcode::Uload16 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v2034 = &C::type_register_class(ctx, v3);
                        if let Some(v2035) = v2034 {
                            if let &RegisterClass::Gpr {
                                single_register: v2036,
                            } = v2035 {
                                let v2051 = &constructor_to_amode(ctx, v2039, v2038, v2040);
                                let v2055 = &constructor_amode_to_gpr_mem(ctx, v2051);
                                let v2063 = constructor_x64_movzx(ctx, &ExtMode::WQ, v2055);
                                let v2064 = constructor_output_gpr(ctx, v2063);
                                let v2065 = Some(v2064);
                                // Rule at src\isa\x64\lower.isle line 3018.
                                return v2065;
                            }
                        }
                    }
                }
                &Opcode::Sload16 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v2034 = &C::type_register_class(ctx, v3);
                        if let Some(v2035) = v2034 {
                            if let &RegisterClass::Gpr {
                                single_register: v2036,
                            } = v2035 {
                                let v2051 = &constructor_to_amode(ctx, v2039, v2038, v2040);
                                let v2055 = &constructor_amode_to_gpr_mem(ctx, v2051);
                                let v2066 = constructor_x64_movsx(ctx, &ExtMode::WQ, v2055);
                                let v2067 = constructor_output_gpr(ctx, v2066);
                                let v2068 = Some(v2067);
                                // Rule at src\isa\x64\lower.isle line 3020.
                                return v2068;
                            }
                        }
                    }
                }
                &Opcode::Uload32 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v2034 = &C::type_register_class(ctx, v3);
                        if let Some(v2035) = v2034 {
                            if let &RegisterClass::Gpr {
                                single_register: v2036,
                            } = v2035 {
                                let v2051 = &constructor_to_amode(ctx, v2039, v2038, v2040);
                                let v2055 = &constructor_amode_to_gpr_mem(ctx, v2051);
                                let v2070 = constructor_x64_movzx(ctx, &ExtMode::LQ, v2055);
                                let v2071 = constructor_output_gpr(ctx, v2070);
                                let v2072 = Some(v2071);
                                // Rule at src\isa\x64\lower.isle line 3022.
                                return v2072;
                            }
                        }
                    }
                }
                &Opcode::Sload32 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v2034 = &C::type_register_class(ctx, v3);
                        if let Some(v2035) = v2034 {
                            if let &RegisterClass::Gpr {
                                single_register: v2036,
                            } = v2035 {
                                let v2051 = &constructor_to_amode(ctx, v2039, v2038, v2040);
                                let v2055 = &constructor_amode_to_gpr_mem(ctx, v2051);
                                let v2073 = constructor_x64_movsx(ctx, &ExtMode::LQ, v2055);
                                let v2074 = constructor_output_gpr(ctx, v2073);
                                let v2075 = Some(v2074);
                                // Rule at src\isa\x64\lower.isle line 3024.
                                return v2075;
                            }
                        }
                    }
                }
                &Opcode::Uload8x8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I16X8 {
                            let v670 = C::use_sse41(ctx);
                            if v670 == true {
                                let v2051 = &constructor_to_amode(ctx, v2039, v2038, v2040);
                                let v2102 = &constructor_amode_to_xmm_mem(ctx, v2051);
                                let v2116 = constructor_x64_pmovzxbw(ctx, v2102);
                                let v2117 = constructor_output_xmm(ctx, v2116);
                                let v2118 = Some(v2117);
                                // Rule at src\isa\x64\lower.isle line 3058.
                                return v2118;
                            }
                            let v2051 = &constructor_to_amode(ctx, v2039, v2038, v2040);
                            let v2055 = &constructor_amode_to_gpr_mem(ctx, v2051);
                            let v2131 = constructor_x64_movq_to_xmm(ctx, v2055);
                            let v2135 = constructor_lower_uwiden_low(ctx, I16X8, v2131);
                            let v2136 = constructor_output_xmm(ctx, v2135);
                            let v2137 = Some(v2136);
                            // Rule at src\isa\x64\lower.isle line 3076.
                            return v2137;
                        }
                    }
                }
                &Opcode::Sload8x8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I16X8 {
                            let v670 = C::use_sse41(ctx);
                            if v670 == true {
                                let v2051 = &constructor_to_amode(ctx, v2039, v2038, v2040);
                                let v2102 = &constructor_amode_to_xmm_mem(ctx, v2051);
                                let v2113 = constructor_x64_pmovsxbw(ctx, v2102);
                                let v2114 = constructor_output_xmm(ctx, v2113);
                                let v2115 = Some(v2114);
                                // Rule at src\isa\x64\lower.isle line 3055.
                                return v2115;
                            }
                            let v2051 = &constructor_to_amode(ctx, v2039, v2038, v2040);
                            let v2055 = &constructor_amode_to_gpr_mem(ctx, v2051);
                            let v2131 = constructor_x64_movq_to_xmm(ctx, v2055);
                            let v2132 = constructor_lower_swiden_low(ctx, I16X8, v2131);
                            let v2133 = constructor_output_xmm(ctx, v2132);
                            let v2134 = Some(v2133);
                            // Rule at src\isa\x64\lower.isle line 3074.
                            return v2134;
                        }
                    }
                }
                &Opcode::Uload16x4 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I32X4 {
                            let v670 = C::use_sse41(ctx);
                            if v670 == true {
                                let v2051 = &constructor_to_amode(ctx, v2039, v2038, v2040);
                                let v2102 = &constructor_amode_to_xmm_mem(ctx, v2051);
                                let v2122 = constructor_x64_pmovzxwd(ctx, v2102);
                                let v2123 = constructor_output_xmm(ctx, v2122);
                                let v2124 = Some(v2123);
                                // Rule at src\isa\x64\lower.isle line 3064.
                                return v2124;
                            }
                            let v2051 = &constructor_to_amode(ctx, v2039, v2038, v2040);
                            let v2055 = &constructor_amode_to_gpr_mem(ctx, v2051);
                            let v2131 = constructor_x64_movq_to_xmm(ctx, v2055);
                            let v2141 = constructor_lower_uwiden_low(ctx, I32X4, v2131);
                            let v2142 = constructor_output_xmm(ctx, v2141);
                            let v2143 = Some(v2142);
                            // Rule at src\isa\x64\lower.isle line 3080.
                            return v2143;
                        }
                    }
                }
                &Opcode::Sload16x4 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I32X4 {
                            let v670 = C::use_sse41(ctx);
                            if v670 == true {
                                let v2051 = &constructor_to_amode(ctx, v2039, v2038, v2040);
                                let v2102 = &constructor_amode_to_xmm_mem(ctx, v2051);
                                let v2119 = constructor_x64_pmovsxwd(ctx, v2102);
                                let v2120 = constructor_output_xmm(ctx, v2119);
                                let v2121 = Some(v2120);
                                // Rule at src\isa\x64\lower.isle line 3061.
                                return v2121;
                            }
                            let v2051 = &constructor_to_amode(ctx, v2039, v2038, v2040);
                            let v2055 = &constructor_amode_to_gpr_mem(ctx, v2051);
                            let v2131 = constructor_x64_movq_to_xmm(ctx, v2055);
                            let v2138 = constructor_lower_swiden_low(ctx, I32X4, v2131);
                            let v2139 = constructor_output_xmm(ctx, v2138);
                            let v2140 = Some(v2139);
                            // Rule at src\isa\x64\lower.isle line 3078.
                            return v2140;
                        }
                    }
                }
                &Opcode::Uload32x2 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64X2 {
                            let v670 = C::use_sse41(ctx);
                            if v670 == true {
                                let v2051 = &constructor_to_amode(ctx, v2039, v2038, v2040);
                                let v2102 = &constructor_amode_to_xmm_mem(ctx, v2051);
                                let v2128 = constructor_x64_pmovzxdq(ctx, v2102);
                                let v2129 = constructor_output_xmm(ctx, v2128);
                                let v2130 = Some(v2129);
                                // Rule at src\isa\x64\lower.isle line 3070.
                                return v2130;
                            }
                            let v2051 = &constructor_to_amode(ctx, v2039, v2038, v2040);
                            let v2055 = &constructor_amode_to_gpr_mem(ctx, v2051);
                            let v2131 = constructor_x64_movq_to_xmm(ctx, v2055);
                            let v2147 = constructor_lower_uwiden_low(ctx, I64X2, v2131);
                            let v2148 = constructor_output_xmm(ctx, v2147);
                            let v2149 = Some(v2148);
                            // Rule at src\isa\x64\lower.isle line 3084.
                            return v2149;
                        }
                    }
                }
                &Opcode::Sload32x2 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64X2 {
                            let v670 = C::use_sse41(ctx);
                            if v670 == true {
                                let v2051 = &constructor_to_amode(ctx, v2039, v2038, v2040);
                                let v2102 = &constructor_amode_to_xmm_mem(ctx, v2051);
                                let v2125 = constructor_x64_pmovsxdq(ctx, v2102);
                                let v2126 = constructor_output_xmm(ctx, v2125);
                                let v2127 = Some(v2126);
                                // Rule at src\isa\x64\lower.isle line 3067.
                                return v2127;
                            }
                            let v2051 = &constructor_to_amode(ctx, v2039, v2038, v2040);
                            let v2055 = &constructor_amode_to_gpr_mem(ctx, v2051);
                            let v2131 = constructor_x64_movq_to_xmm(ctx, v2055);
                            let v2144 = constructor_lower_swiden_low(ctx, I64X2, v2131);
                            let v2145 = constructor_output_xmm(ctx, v2144);
                            let v2146 = Some(v2145);
                            // Rule at src\isa\x64\lower.isle line 3082.
                            return v2146;
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::LoadNoOffset {
            opcode: ref v2338,
            arg: v2339,
            flags: v2340,
        } => {
            match v2338 {
                &Opcode::Bitcast => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v2034 = &C::type_register_class(ctx, v3);
                        if let Some(v2035) = v2034 {
                            match v2035 {
                                &RegisterClass::Gpr {
                                    single_register: v2036,
                                } => {
                                    let v2901 = C::value_type(ctx, v2339);
                                    let v2902 = &C::type_register_class(ctx, v2901);
                                    if let Some(v2903) = v2902 {
                                        if let &RegisterClass::Gpr {
                                            single_register: v2909,
                                        } = v2903 {
                                            let v2921 = constructor_output_value(ctx, v2339);
                                            let v2922 = Some(v2921);
                                            // Rule at src\isa\x64\lower.isle line 4214.
                                            return v2922;
                                        }
                                    }
                                }
                                &RegisterClass::Xmm => {
                                    let v2901 = C::value_type(ctx, v2339);
                                    let v2902 = &C::type_register_class(ctx, v2901);
                                    if let Some(v2903) = v2902 {
                                        if let &RegisterClass::Xmm = v2903 {
                                            let v2921 = constructor_output_value(ctx, v2339);
                                            let v2922 = Some(v2921);
                                            // Rule at src\isa\x64\lower.isle line 4219.
                                            return v2922;
                                        }
                                    }
                                    if v2901 == I128 {
                                        let v2917 = C::put_in_regs(ctx, v2339);
                                        let v2918 = constructor_bitcast_gprs_to_xmm(ctx, v2917);
                                        let v2919 = constructor_output_xmm(ctx, v2918);
                                        let v2920 = Some(v2919);
                                        // Rule at src\isa\x64\lower.isle line 4210.
                                        return v2920;
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v2901 = C::value_type(ctx, v2339);
                        let v2902 = &C::type_register_class(ctx, v2901);
                        if let Some(v2903) = v2902 {
                            match v2903 {
                                &RegisterClass::Gpr {
                                    single_register: v2909,
                                } => {
                                    if let Some(v2035) = v2034 {
                                        if let &RegisterClass::Xmm = v2035 {
                                            let v4 = C::fits_in_64(ctx, v3);
                                            if let Some(v5) = v4 {
                                                let v2910 = constructor_put_in_gpr(ctx, v2339);
                                                let v2904 = C::ty_bits(ctx, v5);
                                                let v2911 = constructor_bitcast_gpr_to_xmm(ctx, v2904, v2910);
                                                let v2912 = constructor_output_xmm(ctx, v2911);
                                                let v2913 = Some(v2912);
                                                // Rule at src\isa\x64\lower.isle line 4204.
                                                return v2913;
                                            }
                                        }
                                    }
                                }
                                &RegisterClass::Xmm => {
                                    if v3 == I128 {
                                        let v2905 = constructor_put_in_xmm(ctx, v2339);
                                        let v2914 = constructor_bitcast_xmm_to_gprs(ctx, v2905);
                                        let v2915 = C::output(ctx, v2914);
                                        let v2916 = Some(v2915);
                                        // Rule at src\isa\x64\lower.isle line 4207.
                                        return v2916;
                                    }
                                    if let Some(v2035) = v2034 {
                                        if let &RegisterClass::Gpr {
                                            single_register: v2036,
                                        } = v2035 {
                                            let v4 = C::fits_in_64(ctx, v3);
                                            if let Some(v5) = v4 {
                                                let v2905 = constructor_put_in_xmm(ctx, v2339);
                                                let v2904 = C::ty_bits(ctx, v5);
                                                let v2906 = constructor_bitcast_xmm_to_gpr(ctx, v2904, v2905);
                                                let v2907 = constructor_output_gpr(ctx, v2906);
                                                let v2908 = Some(v2907);
                                                // Rule at src\isa\x64\lower.isle line 4201.
                                                return v2908;
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::AtomicLoad => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I64 => {
                                let v70 = C::zero_offset(ctx);
                                let v2341 = &constructor_to_amode(ctx, v2340, v2339, v70);
                                let v2342 = constructor_x64_mov(ctx, v2341);
                                let v2343 = constructor_output_reg(ctx, v2342);
                                let v2344 = Some(v2343);
                                // Rule at src\isa\x64\lower.isle line 3382.
                                return v2344;
                            }
                            I128 => {
                                let v2353 = C::use_cmpxchg16b(ctx);
                                if v2353 == true {
                                    let v2354 = constructor_imm(ctx, I64, 0x0_u64);
                                    let v16 = constructor_imm(ctx, I64, 0x0_u64);
                                    let v2355 = C::value_regs(ctx, v2354, v16);
                                    let v2356 = constructor_imm(ctx, I64, 0x0_u64);
                                    let v582 = constructor_imm(ctx, I64, 0x0_u64);
                                    let v2357 = C::value_regs(ctx, v2356, v582);
                                    let v2358 = C::zero_offset(ctx);
                                    let v2359 = &constructor_to_amode(ctx, v2340, v2339, v2358);
                                    let v2360 = &C::amode_to_synthetic_amode(ctx, v2359);
                                    let v2361 = constructor_x64_cmpxchg16b(ctx, v2355, v2357, v2360);
                                    let v2362 = C::output(ctx, v2361);
                                    let v2363 = Some(v2362);
                                    // Rule at src\isa\x64\lower.isle line 3387.
                                    return v2363;
                                }
                            }
                            _ => {}
                        }
                        let v1746 = C::fits_in_32(ctx, v3);
                        if let Some(v1747) = v1746 {
                            let v2345 = C::ty_int(ctx, v3);
                            if let Some(v2346) = v2345 {
                                let v2041 = C::ty_bits_u16(ctx, v1747);
                                let v2043 = &C::ext_mode(ctx, v2041, 0x40_u16);
                                let v2347 = C::zero_offset(ctx);
                                let v2348 = &constructor_to_amode(ctx, v2340, v2339, v2347);
                                let v2349 = &constructor_amode_to_gpr_mem(ctx, v2348);
                                let v2350 = constructor_x64_movzx(ctx, v2043, v2349);
                                let v2351 = constructor_output_gpr(ctx, v2350);
                                let v2352 = Some(v2351);
                                // Rule at src\isa\x64\lower.isle line 3384.
                                return v2352;
                            }
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::MultiAry {
            opcode: ref v1267,
            args: v1268,
        } => {
            if let &Opcode::Return = v1267 {
                let v1269 = C::value_list_slice(ctx, v1268);
                let v1270 = constructor_lower_return(ctx, v1269);
                let v1271 = Some(v1270);
                // Rule at src\isa\x64\lower.isle line 1938.
                return v1271;
            }
        }
        &InstructionData::NullAry {
            opcode: ref v1766,
        } => {
            match v1766 {
                &Opcode::Debugtrap => {
                    let v1767 = &constructor_x64_hlt(ctx);
                    let v1768 = constructor_side_effect(ctx, v1767);
                    let v1769 = Some(v1768);
                    // Rule at src\isa\x64\lower.isle line 2607.
                    return v1769;
                }
                &Opcode::GetPinnedReg => {
                    let v3053 = constructor_read_pinned_gpr(ctx);
                    let v3054 = constructor_output_gpr(ctx, v3053);
                    let v3055 = Some(v3054);
                    // Rule at src\isa\x64\lower.isle line 4470.
                    return v3055;
                }
                &Opcode::GetFramePointer => {
                    let v2489 = constructor_x64_rbp(ctx);
                    let v2490 = constructor_output_reg(ctx, v2489);
                    let v2491 = Some(v2490);
                    // Rule at src\isa\x64\lower.isle line 3505.
                    return v2491;
                }
                &Opcode::GetStackPointer => {
                    let v2492 = constructor_x64_rsp(ctx);
                    let v2493 = constructor_output_reg(ctx, v2492);
                    let v2494 = Some(v2493);
                    // Rule at src\isa\x64\lower.isle line 3508.
                    return v2494;
                }
                &Opcode::GetReturnAddress => {
                    let v2489 = constructor_x64_rbp(ctx);
                    let v69 = C::mem_flags_trusted(ctx);
                    let v2495 = Amode::ImmReg {
                        simm32: 8_i32,
                        base: v2489,
                        flags: v69,
                    };
                    let v2496 = &C::amode_to_synthetic_amode(ctx, &v2495);
                    let v2497 = constructor_x64_load(ctx, I64, v2496, &ExtKind::None);
                    let v2498 = constructor_output_reg(ctx, v2497);
                    let v2499 = Some(v2498);
                    // Rule at src\isa\x64\lower.isle line 3511.
                    return v2499;
                }
                &Opcode::Nop => {
                    let v3465 = C::invalid_reg(ctx);
                    let v3466 = constructor_output_reg(ctx, v3465);
                    let v3467 = Some(v3466);
                    // Rule at src\isa\x64\lower.isle line 5029.
                    return v3467;
                }
                &Opcode::Fence => {
                    let v2315 = &constructor_x64_mfence(ctx);
                    let v2316 = constructor_side_effect(ctx, v2315);
                    let v2317 = Some(v2316);
                    // Rule at src\isa\x64\lower.isle line 3361.
                    return v2317;
                }
                _ => {}
            }
        }
        &InstructionData::Shuffle {
            opcode: ref v3068,
            args: ref v3069,
            imm: v3070,
        } => {
            if let &Opcode::Shuffle = v3068 {
                let v670 = C::use_sse41(ctx);
                if v670 == true {
                    let v3074 = C::pblendw_imm(ctx, v3070);
                    if let Some(v3075) = v3074 {
                        let v3071 = C::unpack_value_array_2(ctx, v3069);
                        let v3076 = constructor_put_in_xmm(ctx, v3071.0);
                        let v3077 = &C::put_in_xmm_mem(ctx, v3071.1);
                        let v3078 = constructor_x64_pblendw(ctx, v3076, v3077, v3075);
                        let v3079 = constructor_output_xmm(ctx, v3078);
                        let v3080 = Some(v3079);
                        // Rule at src\isa\x64\lower.isle line 4494.
                        return v3080;
                    }
                }
                let v764 = C::use_ssse3(ctx);
                if v764 == true {
                    let v3081 = C::palignr_imm_from_immediate(ctx, v3070);
                    if let Some(v3082) = v3081 {
                        let v3071 = C::unpack_value_array_2(ctx, v3069);
                        let v3083 = constructor_put_in_xmm(ctx, v3071.1);
                        let v3084 = &C::put_in_xmm_mem(ctx, v3071.0);
                        let v3085 = constructor_x64_palignr(ctx, v3083, v3084, v3082);
                        let v3086 = constructor_output_xmm(ctx, v3085);
                        let v3087 = Some(v3086);
                        // Rule at src\isa\x64\lower.isle line 4505.
                        return v3087;
                    }
                }
                let v3088 = C::pshuflw_lhs_imm(ctx, v3070);
                if let Some(v3089) = v3088 {
                    let v3071 = C::unpack_value_array_2(ctx, v3069);
                    let v3090 = &C::put_in_xmm_mem(ctx, v3071.0);
                    let v3091 = constructor_x64_pshuflw(ctx, v3090, v3089);
                    let v3092 = constructor_output_xmm(ctx, v3091);
                    let v3093 = Some(v3092);
                    // Rule at src\isa\x64\lower.isle line 4517.
                    return v3093;
                }
                let v3094 = C::pshuflw_rhs_imm(ctx, v3070);
                if let Some(v3095) = v3094 {
                    let v3071 = C::unpack_value_array_2(ctx, v3069);
                    let v3096 = &C::put_in_xmm_mem(ctx, v3071.1);
                    let v3097 = constructor_x64_pshuflw(ctx, v3096, v3095);
                    let v3098 = constructor_output_xmm(ctx, v3097);
                    let v3099 = Some(v3098);
                    // Rule at src\isa\x64\lower.isle line 4519.
                    return v3099;
                }
                let v3100 = C::pshufhw_lhs_imm(ctx, v3070);
                if let Some(v3101) = v3100 {
                    let v3071 = C::unpack_value_array_2(ctx, v3069);
                    let v3090 = &C::put_in_xmm_mem(ctx, v3071.0);
                    let v3102 = constructor_x64_pshufhw(ctx, v3090, v3101);
                    let v3103 = constructor_output_xmm(ctx, v3102);
                    let v3104 = Some(v3103);
                    // Rule at src\isa\x64\lower.isle line 4521.
                    return v3104;
                }
                let v3105 = C::pshufhw_rhs_imm(ctx, v3070);
                if let Some(v3106) = v3105 {
                    let v3071 = C::unpack_value_array_2(ctx, v3069);
                    let v3096 = &C::put_in_xmm_mem(ctx, v3071.1);
                    let v3107 = constructor_x64_pshufhw(ctx, v3096, v3106);
                    let v3108 = constructor_output_xmm(ctx, v3107);
                    let v3109 = Some(v3108);
                    // Rule at src\isa\x64\lower.isle line 4523.
                    return v3109;
                }
                let v3110 = C::pshufd_lhs_imm(ctx, v3070);
                if let Some(v3111) = v3110 {
                    let v3071 = C::unpack_value_array_2(ctx, v3069);
                    let v3090 = &C::put_in_xmm_mem(ctx, v3071.0);
                    let v3112 = constructor_x64_pshufd(ctx, v3090, v3111);
                    let v3113 = constructor_output_xmm(ctx, v3112);
                    let v3114 = Some(v3113);
                    // Rule at src\isa\x64\lower.isle line 4540.
                    return v3114;
                }
                let v3115 = C::pshufd_rhs_imm(ctx, v3070);
                if let Some(v3116) = v3115 {
                    let v3071 = C::unpack_value_array_2(ctx, v3069);
                    let v3096 = &C::put_in_xmm_mem(ctx, v3071.1);
                    let v3117 = constructor_x64_pshufd(ctx, v3096, v3116);
                    let v3118 = constructor_output_xmm(ctx, v3117);
                    let v3119 = Some(v3118);
                    // Rule at src\isa\x64\lower.isle line 4542.
                    return v3119;
                }
                let v3120 = C::u128_from_immediate(ctx, v3070);
                if let Some(v3121) = v3120 {
                    match v3121 {
                        0x0_u128 => {
                            if v764 == true {
                                let v3071 = C::unpack_value_array_2(ctx, v3069);
                                let v3076 = constructor_put_in_xmm(ctx, v3071.0);
                                let v770 = constructor_xmm_zero(ctx, I8X16);
                                let v2849 = &C::xmm_to_xmm_mem(ctx, v770);
                                let v3146 = constructor_x64_pshufb(ctx, v3076, v2849);
                                let v3147 = constructor_output_xmm(ctx, v3146);
                                let v3148 = Some(v3147);
                                // Rule at src\isa\x64\lower.isle line 4579.
                                return v3148;
                            }
                        }
                        0x17071606150514041303120211011000_u128 => {
                            let v3071 = C::unpack_value_array_2(ctx, v3069);
                            let v3076 = constructor_put_in_xmm(ctx, v3071.0);
                            let v3077 = &C::put_in_xmm_mem(ctx, v3071.1);
                            let v3125 = constructor_x64_punpcklbw(ctx, v3076, v3077);
                            let v3126 = constructor_output_xmm(ctx, v3125);
                            let v3127 = Some(v3126);
                            // Rule at src\isa\x64\lower.isle line 4553.
                            return v3127;
                        }
                        0x17160706151405041312030211100100_u128 => {
                            let v3071 = C::unpack_value_array_2(ctx, v3069);
                            let v3076 = constructor_put_in_xmm(ctx, v3071.0);
                            let v3077 = &C::put_in_xmm_mem(ctx, v3071.1);
                            let v3131 = constructor_x64_punpcklwd(ctx, v3076, v3077);
                            let v3132 = constructor_output_xmm(ctx, v3131);
                            let v3133 = Some(v3132);
                            // Rule at src\isa\x64\lower.isle line 4559.
                            return v3133;
                        }
                        0x17161514070605041312111003020100_u128 => {
                            let v3071 = C::unpack_value_array_2(ctx, v3069);
                            let v3076 = constructor_put_in_xmm(ctx, v3071.0);
                            let v3077 = &C::put_in_xmm_mem(ctx, v3071.1);
                            let v3137 = constructor_x64_punpckldq(ctx, v3076, v3077);
                            let v3138 = constructor_output_xmm(ctx, v3137);
                            let v3139 = Some(v3138);
                            // Rule at src\isa\x64\lower.isle line 4565.
                            return v3139;
                        }
                        0x17161514131211100706050403020100_u128 => {
                            let v3071 = C::unpack_value_array_2(ctx, v3069);
                            let v3076 = constructor_put_in_xmm(ctx, v3071.0);
                            let v3077 = &C::put_in_xmm_mem(ctx, v3071.1);
                            let v3143 = constructor_x64_punpcklqdq(ctx, v3076, v3077);
                            let v3144 = constructor_output_xmm(ctx, v3143);
                            let v3145 = Some(v3144);
                            // Rule at src\isa\x64\lower.isle line 4571.
                            return v3145;
                        }
                        0x1f0f1e0e1d0d1c0c1b0b1a0a19091808_u128 => {
                            let v3071 = C::unpack_value_array_2(ctx, v3069);
                            let v3076 = constructor_put_in_xmm(ctx, v3071.0);
                            let v3077 = &C::put_in_xmm_mem(ctx, v3071.1);
                            let v3122 = constructor_x64_punpckhbw(ctx, v3076, v3077);
                            let v3123 = constructor_output_xmm(ctx, v3122);
                            let v3124 = Some(v3123);
                            // Rule at src\isa\x64\lower.isle line 4551.
                            return v3124;
                        }
                        0x1f1e0f0e1d1c0d0c1b1a0b0a19180908_u128 => {
                            let v3071 = C::unpack_value_array_2(ctx, v3069);
                            let v3076 = constructor_put_in_xmm(ctx, v3071.0);
                            let v3077 = &C::put_in_xmm_mem(ctx, v3071.1);
                            let v3128 = constructor_x64_punpckhwd(ctx, v3076, v3077);
                            let v3129 = constructor_output_xmm(ctx, v3128);
                            let v3130 = Some(v3129);
                            // Rule at src\isa\x64\lower.isle line 4557.
                            return v3130;
                        }
                        0x1f1e1d1c0f0e0d0c1b1a19180b0a0908_u128 => {
                            let v3071 = C::unpack_value_array_2(ctx, v3069);
                            let v3076 = constructor_put_in_xmm(ctx, v3071.0);
                            let v3077 = &C::put_in_xmm_mem(ctx, v3071.1);
                            let v3134 = constructor_x64_punpckhdq(ctx, v3076, v3077);
                            let v3135 = constructor_output_xmm(ctx, v3134);
                            let v3136 = Some(v3135);
                            // Rule at src\isa\x64\lower.isle line 4563.
                            return v3136;
                        }
                        0x1f1e1d1c1b1a19180f0e0d0c0b0a0908_u128 => {
                            let v3071 = C::unpack_value_array_2(ctx, v3069);
                            let v3076 = constructor_put_in_xmm(ctx, v3071.0);
                            let v3077 = &C::put_in_xmm_mem(ctx, v3071.1);
                            let v3140 = constructor_x64_punpckhqdq(ctx, v3076, v3077);
                            let v3141 = constructor_output_xmm(ctx, v3140);
                            let v3142 = Some(v3141);
                            // Rule at src\isa\x64\lower.isle line 4569.
                            return v3142;
                        }
                        _ => {}
                    }
                }
                let v3149 = C::shufps_imm(ctx, v3070);
                if let Some(v3150) = v3149 {
                    let v3071 = C::unpack_value_array_2(ctx, v3069);
                    let v3076 = constructor_put_in_xmm(ctx, v3071.0);
                    let v3077 = &C::put_in_xmm_mem(ctx, v3071.1);
                    let v3151 = constructor_x64_shufps(ctx, v3076, v3077, v3150);
                    let v3152 = constructor_output_xmm(ctx, v3151);
                    let v3153 = Some(v3152);
                    // Rule at src\isa\x64\lower.isle line 4593.
                    return v3153;
                }
                let v3154 = C::shufps_rev_imm(ctx, v3070);
                if let Some(v3155) = v3154 {
                    let v3071 = C::unpack_value_array_2(ctx, v3069);
                    let v3083 = constructor_put_in_xmm(ctx, v3071.1);
                    let v3084 = &C::put_in_xmm_mem(ctx, v3071.0);
                    let v3156 = constructor_x64_shufps(ctx, v3083, v3084, v3155);
                    let v3157 = constructor_output_xmm(ctx, v3156);
                    let v3158 = Some(v3157);
                    // Rule at src\isa\x64\lower.isle line 4595.
                    return v3158;
                }
                let v3159 = &C::vec_mask_from_immediate(ctx, v3070);
                if let Some(v3160) = v3159 {
                    if v764 == true {
                        let v3071 = C::unpack_value_array_2(ctx, v3069);
                        if v3071.0 == v3071.1 {
                            let v3076 = constructor_put_in_xmm(ctx, v3071.0);
                            let v3161 = C::shuffle_0_31_mask(ctx, v3160);
                            let v3162 = &constructor_const_to_xmm_mem(ctx, v3161);
                            let v3163 = constructor_x64_pshufb(ctx, v3076, v3162);
                            let v3164 = constructor_output_xmm(ctx, v3163);
                            let v3165 = Some(v3164);
                            // Rule at src\isa\x64\lower.isle line 4608.
                            return v3165;
                        }
                    }
                    let v516 = C::use_avx512vl(ctx);
                    if v516 == true {
                        let v3170 = C::use_avx512vbmi(ctx);
                        if v3170 == true {
                            let v3166 = C::perm_from_mask_with_zeros(ctx, v3160);
                            if let Some(v3167) = v3166 {
                                let v3171 = constructor_x64_xmm_load_const(ctx, I8X16, v3167.0);
                                let v3071 = C::unpack_value_array_2(ctx, v3069);
                                let v3172 = constructor_put_in_xmm(ctx, v3071.0);
                                let v3173 = &C::put_in_xmm_mem(ctx, v3071.1);
                                let v3174 = constructor_x64_vpermi2b(ctx, v3171, v3172, v3173);
                                let v3175 = &constructor_const_to_xmm_mem(ctx, v3167.1);
                                let v3176 = constructor_x64_andps(ctx, v3174, v3175);
                                let v3177 = constructor_output_xmm(ctx, v3176);
                                let v3178 = Some(v3177);
                                // Rule at src\isa\x64\lower.isle line 4615.
                                return v3178;
                            }
                            let v3179 = C::perm_from_mask(ctx, v3160);
                            let v3180 = constructor_x64_xmm_load_const(ctx, I8X16, v3179);
                            let v3071 = C::unpack_value_array_2(ctx, v3069);
                            let v3181 = constructor_put_in_xmm(ctx, v3071.0);
                            let v3182 = &C::put_in_xmm_mem(ctx, v3071.1);
                            let v3183 = constructor_x64_vpermi2b(ctx, v3180, v3181, v3182);
                            let v3184 = constructor_output_xmm(ctx, v3183);
                            let v3185 = Some(v3184);
                            // Rule at src\isa\x64\lower.isle line 4622.
                            return v3185;
                        }
                    }
                    let v3071 = C::unpack_value_array_2(ctx, v3069);
                    let v3076 = constructor_put_in_xmm(ctx, v3071.0);
                    let v3186 = C::shuffle_0_15_mask(ctx, v3160);
                    let v3187 = &constructor_const_to_reg_mem(ctx, v3186);
                    let v3188 = constructor_lower_pshufb(ctx, v3076, v3187);
                    let v3189 = constructor_put_in_xmm(ctx, v3071.1);
                    let v3190 = C::shuffle_16_31_mask(ctx, v3160);
                    let v3191 = &constructor_const_to_reg_mem(ctx, v3190);
                    let v3192 = constructor_lower_pshufb(ctx, v3189, v3191);
                    let v3193 = &C::xmm_to_xmm_mem(ctx, v3192);
                    let v3194 = constructor_x64_por(ctx, v3188, v3193);
                    let v3195 = constructor_output_xmm(ctx, v3194);
                    let v3196 = Some(v3195);
                    // Rule at src\isa\x64\lower.isle line 4630.
                    return v3196;
                }
            }
        }
        &InstructionData::StackLoad {
            opcode: ref v2958,
            stack_slot: v2959,
            offset: v2960,
        } => {
            if let &Opcode::StackAddr = v2958 {
                let v2961 = constructor_stack_addr_impl(ctx, v2959, v2960);
                let v2962 = constructor_output_gpr(ctx, v2961);
                let v2963 = Some(v2962);
                // Rule at src\isa\x64\lower.isle line 4311.
                return v2963;
            }
        }
        &InstructionData::Store {
            opcode: ref v2150,
            args: ref v2151,
            flags: v2152,
            offset: v2153,
        } => {
            match v2150 {
                &Opcode::Store => {
                    let v2154 = C::unpack_value_array_2(ctx, v2151);
                    let v2157 = C::value_type(ctx, v2154.0);
                    let v2177 = C::fits_in_64(ctx, v2157);
                    if let Some(v2178) = v2177 {
                        let v2179 = C::i32_from_iconst(ctx, v2154.0);
                        if let Some(v2180) = v2179 {
                            let v2161 = &constructor_to_amode(ctx, v2152, v2154.1, v2153);
                            let v2162 = &C::amode_to_synthetic_amode(ctx, v2161);
                            let v2181 = &constructor_x64_movimm_m(ctx, v2178, v2162, v2180);
                            let v2182 = constructor_side_effect(ctx, v2181);
                            let v2183 = Some(v2182);
                            // Rule at src\isa\x64\lower.isle line 3109.
                            return v2183;
                        }
                    }
                    let v2228 = C::def_inst(ctx, v2154.0);
                    if let Some(v2229) = v2228 {
                        let v2230 = C::first_result(ctx, v2229);
                        if let Some(v2231) = v2230 {
                            let v2233 = &C::inst_data_value(ctx, v2229);
                            match v2233 {
                                &InstructionData::Binary {
                                    opcode: ref v2259,
                                    args: ref v2260,
                                } => {
                                    match v2259 {
                                        &Opcode::Iadd => {
                                            let v2232 = C::value_type(ctx, v2231);
                                            let v2257 = C::ty_32_or_64(ctx, v2232);
                                            if let Some(v2258) = v2257 {
                                                let v2261 = C::unpack_value_array_2(ctx, v2260);
                                                let v2264 = &C::sinkable_load(ctx, v2261.0);
                                                if let Some(v2265) = v2264 {
                                                    let v2266 = C::def_inst(ctx, v2261.0);
                                                    if let Some(v2267) = v2266 {
                                                        let v2268 = &C::inst_data_value(ctx, v2267);
                                                        if let &InstructionData::Load {
                                                            opcode: ref v2269,
                                                            arg: v2270,
                                                            flags: v2271,
                                                            offset: v2272,
                                                        } = v2268 {
                                                            if let &Opcode::Load = v2269 {
                                                                if v2152 == v2271 {
                                                                    if v2153 == v2272 {
                                                                        if v2154.1 == v2270 {
                                                                            let v2273 = &constructor_sink_load_to_reg_mem_imm(ctx, v2265);
                                                                            let v2274 = &constructor_to_amode(ctx, v2271, v2270, v2272);
                                                                            let v2275 = constructor_put_in_gpr(ctx, v2261.1);
                                                                            let v2276 = &constructor_x64_add_mem(ctx, v2258, v2274, v2275);
                                                                            let v2277 = constructor_side_effect(ctx, v2276);
                                                                            let v2278 = Some(v2277);
                                                                            // Rule at src\isa\x64\lower.isle line 3234.
                                                                            return v2278;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                let v2279 = &C::sinkable_load(ctx, v2261.1);
                                                if let Some(v2280) = v2279 {
                                                    let v2281 = C::def_inst(ctx, v2261.1);
                                                    if let Some(v2282) = v2281 {
                                                        let v2283 = &C::inst_data_value(ctx, v2282);
                                                        if let &InstructionData::Load {
                                                            opcode: ref v2284,
                                                            arg: v2285,
                                                            flags: v2286,
                                                            offset: v2287,
                                                        } = v2283 {
                                                            if let &Opcode::Load = v2284 {
                                                                if v2152 == v2286 {
                                                                    if v2153 == v2287 {
                                                                        if v2154.1 == v2285 {
                                                                            let v2288 = &constructor_sink_load_to_reg_mem_imm(ctx, v2280);
                                                                            let v2289 = &constructor_to_amode(ctx, v2286, v2285, v2287);
                                                                            let v2290 = constructor_put_in_gpr(ctx, v2261.0);
                                                                            let v2291 = &constructor_x64_add_mem(ctx, v2258, v2289, v2290);
                                                                            let v2292 = constructor_side_effect(ctx, v2291);
                                                                            let v2293 = Some(v2292);
                                                                            // Rule at src\isa\x64\lower.isle line 3248.
                                                                            return v2293;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Isub => {
                                            let v2232 = C::value_type(ctx, v2231);
                                            let v2257 = C::ty_32_or_64(ctx, v2232);
                                            if let Some(v2258) = v2257 {
                                                let v2261 = C::unpack_value_array_2(ctx, v2260);
                                                let v2264 = &C::sinkable_load(ctx, v2261.0);
                                                if let Some(v2265) = v2264 {
                                                    let v2266 = C::def_inst(ctx, v2261.0);
                                                    if let Some(v2267) = v2266 {
                                                        let v2268 = &C::inst_data_value(ctx, v2267);
                                                        if let &InstructionData::Load {
                                                            opcode: ref v2269,
                                                            arg: v2270,
                                                            flags: v2271,
                                                            offset: v2272,
                                                        } = v2268 {
                                                            if let &Opcode::Load = v2269 {
                                                                if v2152 == v2271 {
                                                                    if v2153 == v2272 {
                                                                        if v2154.1 == v2270 {
                                                                            let v2273 = &constructor_sink_load_to_reg_mem_imm(ctx, v2265);
                                                                            let v2274 = &constructor_to_amode(ctx, v2271, v2270, v2272);
                                                                            let v2275 = constructor_put_in_gpr(ctx, v2261.1);
                                                                            let v2294 = &constructor_x64_sub_mem(ctx, v2258, v2274, v2275);
                                                                            let v2295 = constructor_side_effect(ctx, v2294);
                                                                            let v2296 = Some(v2295);
                                                                            // Rule at src\isa\x64\lower.isle line 3262.
                                                                            return v2296;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Band => {
                                            let v2232 = C::value_type(ctx, v2231);
                                            let v2257 = C::ty_32_or_64(ctx, v2232);
                                            if let Some(v2258) = v2257 {
                                                let v2261 = C::unpack_value_array_2(ctx, v2260);
                                                let v2264 = &C::sinkable_load(ctx, v2261.0);
                                                if let Some(v2265) = v2264 {
                                                    let v2266 = C::def_inst(ctx, v2261.0);
                                                    if let Some(v2267) = v2266 {
                                                        let v2268 = &C::inst_data_value(ctx, v2267);
                                                        if let &InstructionData::Load {
                                                            opcode: ref v2269,
                                                            arg: v2270,
                                                            flags: v2271,
                                                            offset: v2272,
                                                        } = v2268 {
                                                            if let &Opcode::Load = v2269 {
                                                                if v2152 == v2271 {
                                                                    if v2153 == v2272 {
                                                                        if v2154.1 == v2270 {
                                                                            let v2273 = &constructor_sink_load_to_reg_mem_imm(ctx, v2265);
                                                                            let v2274 = &constructor_to_amode(ctx, v2271, v2270, v2272);
                                                                            let v2275 = constructor_put_in_gpr(ctx, v2261.1);
                                                                            let v2297 = &constructor_x64_and_mem(ctx, v2258, v2274, v2275);
                                                                            let v2298 = constructor_side_effect(ctx, v2297);
                                                                            let v2299 = Some(v2298);
                                                                            // Rule at src\isa\x64\lower.isle line 3276.
                                                                            return v2299;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                let v2279 = &C::sinkable_load(ctx, v2261.1);
                                                if let Some(v2280) = v2279 {
                                                    let v2281 = C::def_inst(ctx, v2261.1);
                                                    if let Some(v2282) = v2281 {
                                                        let v2283 = &C::inst_data_value(ctx, v2282);
                                                        if let &InstructionData::Load {
                                                            opcode: ref v2284,
                                                            arg: v2285,
                                                            flags: v2286,
                                                            offset: v2287,
                                                        } = v2283 {
                                                            if let &Opcode::Load = v2284 {
                                                                if v2152 == v2286 {
                                                                    if v2153 == v2287 {
                                                                        if v2154.1 == v2285 {
                                                                            let v2288 = &constructor_sink_load_to_reg_mem_imm(ctx, v2280);
                                                                            let v2289 = &constructor_to_amode(ctx, v2286, v2285, v2287);
                                                                            let v2290 = constructor_put_in_gpr(ctx, v2261.0);
                                                                            let v2300 = &constructor_x64_and_mem(ctx, v2258, v2289, v2290);
                                                                            let v2301 = constructor_side_effect(ctx, v2300);
                                                                            let v2302 = Some(v2301);
                                                                            // Rule at src\isa\x64\lower.isle line 3290.
                                                                            return v2302;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Bor => {
                                            let v2232 = C::value_type(ctx, v2231);
                                            let v2257 = C::ty_32_or_64(ctx, v2232);
                                            if let Some(v2258) = v2257 {
                                                let v2261 = C::unpack_value_array_2(ctx, v2260);
                                                let v2264 = &C::sinkable_load(ctx, v2261.0);
                                                if let Some(v2265) = v2264 {
                                                    let v2266 = C::def_inst(ctx, v2261.0);
                                                    if let Some(v2267) = v2266 {
                                                        let v2268 = &C::inst_data_value(ctx, v2267);
                                                        if let &InstructionData::Load {
                                                            opcode: ref v2269,
                                                            arg: v2270,
                                                            flags: v2271,
                                                            offset: v2272,
                                                        } = v2268 {
                                                            if let &Opcode::Load = v2269 {
                                                                if v2152 == v2271 {
                                                                    if v2153 == v2272 {
                                                                        if v2154.1 == v2270 {
                                                                            let v2273 = &constructor_sink_load_to_reg_mem_imm(ctx, v2265);
                                                                            let v2274 = &constructor_to_amode(ctx, v2271, v2270, v2272);
                                                                            let v2275 = constructor_put_in_gpr(ctx, v2261.1);
                                                                            let v2303 = &constructor_x64_or_mem(ctx, v2258, v2274, v2275);
                                                                            let v2304 = constructor_side_effect(ctx, v2303);
                                                                            let v2305 = Some(v2304);
                                                                            // Rule at src\isa\x64\lower.isle line 3304.
                                                                            return v2305;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                let v2279 = &C::sinkable_load(ctx, v2261.1);
                                                if let Some(v2280) = v2279 {
                                                    let v2281 = C::def_inst(ctx, v2261.1);
                                                    if let Some(v2282) = v2281 {
                                                        let v2283 = &C::inst_data_value(ctx, v2282);
                                                        if let &InstructionData::Load {
                                                            opcode: ref v2284,
                                                            arg: v2285,
                                                            flags: v2286,
                                                            offset: v2287,
                                                        } = v2283 {
                                                            if let &Opcode::Load = v2284 {
                                                                if v2152 == v2286 {
                                                                    if v2153 == v2287 {
                                                                        if v2154.1 == v2285 {
                                                                            let v2288 = &constructor_sink_load_to_reg_mem_imm(ctx, v2280);
                                                                            let v2289 = &constructor_to_amode(ctx, v2286, v2285, v2287);
                                                                            let v2290 = constructor_put_in_gpr(ctx, v2261.0);
                                                                            let v2306 = &constructor_x64_or_mem(ctx, v2258, v2289, v2290);
                                                                            let v2307 = constructor_side_effect(ctx, v2306);
                                                                            let v2308 = Some(v2307);
                                                                            // Rule at src\isa\x64\lower.isle line 3318.
                                                                            return v2308;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Bxor => {
                                            let v2232 = C::value_type(ctx, v2231);
                                            let v2257 = C::ty_32_or_64(ctx, v2232);
                                            if let Some(v2258) = v2257 {
                                                let v2261 = C::unpack_value_array_2(ctx, v2260);
                                                let v2264 = &C::sinkable_load(ctx, v2261.0);
                                                if let Some(v2265) = v2264 {
                                                    let v2266 = C::def_inst(ctx, v2261.0);
                                                    if let Some(v2267) = v2266 {
                                                        let v2268 = &C::inst_data_value(ctx, v2267);
                                                        if let &InstructionData::Load {
                                                            opcode: ref v2269,
                                                            arg: v2270,
                                                            flags: v2271,
                                                            offset: v2272,
                                                        } = v2268 {
                                                            if let &Opcode::Load = v2269 {
                                                                if v2152 == v2271 {
                                                                    if v2153 == v2272 {
                                                                        if v2154.1 == v2270 {
                                                                            let v2273 = &constructor_sink_load_to_reg_mem_imm(ctx, v2265);
                                                                            let v2274 = &constructor_to_amode(ctx, v2271, v2270, v2272);
                                                                            let v2275 = constructor_put_in_gpr(ctx, v2261.1);
                                                                            let v2309 = &constructor_x64_xor_mem(ctx, v2258, v2274, v2275);
                                                                            let v2310 = constructor_side_effect(ctx, v2309);
                                                                            let v2311 = Some(v2310);
                                                                            // Rule at src\isa\x64\lower.isle line 3332.
                                                                            return v2311;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                let v2279 = &C::sinkable_load(ctx, v2261.1);
                                                if let Some(v2280) = v2279 {
                                                    let v2281 = C::def_inst(ctx, v2261.1);
                                                    if let Some(v2282) = v2281 {
                                                        let v2283 = &C::inst_data_value(ctx, v2282);
                                                        if let &InstructionData::Load {
                                                            opcode: ref v2284,
                                                            arg: v2285,
                                                            flags: v2286,
                                                            offset: v2287,
                                                        } = v2283 {
                                                            if let &Opcode::Load = v2284 {
                                                                if v2152 == v2286 {
                                                                    if v2153 == v2287 {
                                                                        if v2154.1 == v2285 {
                                                                            let v2288 = &constructor_sink_load_to_reg_mem_imm(ctx, v2280);
                                                                            let v2289 = &constructor_to_amode(ctx, v2286, v2285, v2287);
                                                                            let v2290 = constructor_put_in_gpr(ctx, v2261.0);
                                                                            let v2312 = &constructor_x64_xor_mem(ctx, v2258, v2289, v2290);
                                                                            let v2313 = constructor_side_effect(ctx, v2312);
                                                                            let v2314 = Some(v2313);
                                                                            // Rule at src\isa\x64\lower.isle line 3346.
                                                                            return v2314;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::BinaryImm8 {
                                    opcode: ref v2234,
                                    arg: v2235,
                                    imm: v2236,
                                } => {
                                    if let &Opcode::Extractlane = v2234 {
                                        let v2232 = C::value_type(ctx, v2231);
                                        match v2232 {
                                            I8 => {
                                                let v670 = C::use_sse41(ctx);
                                                if v670 == true {
                                                    let v2161 = &constructor_to_amode(ctx, v2152, v2154.1, v2153);
                                                    let v2162 = &C::amode_to_synthetic_amode(ctx, v2161);
                                                    let v2238 = constructor_put_in_xmm(ctx, v2235);
                                                    let v2237 = C::u8_from_uimm8(ctx, v2236);
                                                    let v2245 = &constructor_x64_pextrb_store(ctx, v2162, v2238, v2237);
                                                    let v2246 = constructor_side_effect(ctx, v2245);
                                                    let v2247 = Some(v2246);
                                                    // Rule at src\isa\x64\lower.isle line 3202.
                                                    return v2247;
                                                }
                                            }
                                            I16 => {
                                                let v670 = C::use_sse41(ctx);
                                                if v670 == true {
                                                    let v2161 = &constructor_to_amode(ctx, v2152, v2154.1, v2153);
                                                    let v2162 = &C::amode_to_synthetic_amode(ctx, v2161);
                                                    let v2238 = constructor_put_in_xmm(ctx, v2235);
                                                    let v2237 = C::u8_from_uimm8(ctx, v2236);
                                                    let v2248 = &constructor_x64_pextrw_store(ctx, v2162, v2238, v2237);
                                                    let v2249 = constructor_side_effect(ctx, v2248);
                                                    let v2250 = Some(v2249);
                                                    // Rule at src\isa\x64\lower.isle line 3209.
                                                    return v2250;
                                                }
                                            }
                                            I32 => {
                                                let v670 = C::use_sse41(ctx);
                                                if v670 == true {
                                                    let v2161 = &constructor_to_amode(ctx, v2152, v2154.1, v2153);
                                                    let v2162 = &C::amode_to_synthetic_amode(ctx, v2161);
                                                    let v2238 = constructor_put_in_xmm(ctx, v2235);
                                                    let v2237 = C::u8_from_uimm8(ctx, v2236);
                                                    let v2251 = &constructor_x64_pextrd_store(ctx, v2162, v2238, v2237);
                                                    let v2252 = constructor_side_effect(ctx, v2251);
                                                    let v2253 = Some(v2252);
                                                    // Rule at src\isa\x64\lower.isle line 3216.
                                                    return v2253;
                                                }
                                            }
                                            I64 => {
                                                let v670 = C::use_sse41(ctx);
                                                if v670 == true {
                                                    let v2161 = &constructor_to_amode(ctx, v2152, v2154.1, v2153);
                                                    let v2162 = &C::amode_to_synthetic_amode(ctx, v2161);
                                                    let v2238 = constructor_put_in_xmm(ctx, v2235);
                                                    let v2237 = C::u8_from_uimm8(ctx, v2236);
                                                    let v2254 = &constructor_x64_pextrq_store(ctx, v2162, v2238, v2237);
                                                    let v2255 = constructor_side_effect(ctx, v2254);
                                                    let v2256 = Some(v2255);
                                                    // Rule at src\isa\x64\lower.isle line 3223.
                                                    return v2256;
                                                }
                                            }
                                            F32 => {
                                                let v2237 = C::u8_from_uimm8(ctx, v2236);
                                                if v2237 == 0x0_u8 {
                                                    let v2161 = &constructor_to_amode(ctx, v2152, v2154.1, v2153);
                                                    let v2162 = &C::amode_to_synthetic_amode(ctx, v2161);
                                                    let v2238 = constructor_put_in_xmm(ctx, v2235);
                                                    let v2239 = &constructor_x64_movss_store(ctx, v2162, v2238);
                                                    let v2240 = constructor_side_effect(ctx, v2239);
                                                    let v2241 = Some(v2240);
                                                    // Rule at src\isa\x64\lower.isle line 3190.
                                                    return v2241;
                                                }
                                            }
                                            F64 => {
                                                let v2237 = C::u8_from_uimm8(ctx, v2236);
                                                if v2237 == 0x0_u8 {
                                                    let v2161 = &constructor_to_amode(ctx, v2152, v2154.1, v2153);
                                                    let v2162 = &C::amode_to_synthetic_amode(ctx, v2161);
                                                    let v2238 = constructor_put_in_xmm(ctx, v2235);
                                                    let v2242 = &constructor_x64_movsd_store(ctx, v2162, v2238);
                                                    let v2243 = constructor_side_effect(ctx, v2242);
                                                    let v2244 = Some(v2243);
                                                    // Rule at src\isa\x64\lower.isle line 3196.
                                                    return v2244;
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    match v2157 {
                        I128 => {
                            let v2216 = C::put_in_regs(ctx, v2154.0);
                            let v2217 = constructor_value_regs_get_gpr(ctx, v2216, 0x0_usize);
                            let v2218 = constructor_value_regs_get_gpr(ctx, v2216, 0x1_usize);
                            let v2219 = &constructor_to_amode(ctx, v2152, v2154.1, v2153);
                            let v2220 = &C::amode_offset(ctx, v2219, 8_i32);
                            let v2221 = &C::amode_to_synthetic_amode(ctx, v2219);
                            let v2222 = &constructor_x64_movrm(ctx, I64, v2221, v2217);
                            let v2223 = &C::amode_to_synthetic_amode(ctx, v2220);
                            let v2224 = &constructor_x64_movrm(ctx, I64, v2223, v2218);
                            let v2225 = &constructor_side_effect_concat(ctx, v2222, v2224);
                            let v2226 = constructor_side_effect(ctx, v2225);
                            let v2227 = Some(v2226);
                            // Rule at src\isa\x64\lower.isle line 3171.
                            return v2227;
                        }
                        F32X4 => {
                            let v2161 = &constructor_to_amode(ctx, v2152, v2154.1, v2153);
                            let v2162 = &C::amode_to_synthetic_amode(ctx, v2161);
                            let v2187 = constructor_put_in_xmm(ctx, v2154.0);
                            let v2205 = &constructor_x64_movups_store(ctx, v2162, v2187);
                            let v2206 = constructor_side_effect(ctx, v2205);
                            let v2207 = Some(v2206);
                            // Rule at src\isa\x64\lower.isle line 3147.
                            return v2207;
                        }
                        F64X2 => {
                            let v2161 = &constructor_to_amode(ctx, v2152, v2154.1, v2153);
                            let v2162 = &C::amode_to_synthetic_amode(ctx, v2161);
                            let v2187 = constructor_put_in_xmm(ctx, v2154.0);
                            let v2208 = &constructor_x64_movupd_store(ctx, v2162, v2187);
                            let v2209 = constructor_side_effect(ctx, v2208);
                            let v2210 = Some(v2209);
                            // Rule at src\isa\x64\lower.isle line 3155.
                            return v2210;
                        }
                        _ => {}
                    }
                    let v2158 = &C::type_register_class(ctx, v2157);
                    if let Some(v2159) = v2158 {
                        match v2159 {
                            &RegisterClass::Gpr {
                                single_register: v2160,
                            } => {
                                let v2161 = &constructor_to_amode(ctx, v2152, v2154.1, v2153);
                                let v2162 = &C::amode_to_synthetic_amode(ctx, v2161);
                                let v2163 = constructor_put_in_gpr(ctx, v2154.0);
                                let v2164 = &constructor_x64_movrm(ctx, v2157, v2162, v2163);
                                let v2165 = constructor_side_effect(ctx, v2164);
                                let v2166 = Some(v2165);
                                // Rule at src\isa\x64\lower.isle line 3090.
                                return v2166;
                            }
                            &RegisterClass::Xmm => {
                                let v2184 = C::ty_16(ctx, v2157);
                                if let Some(v2185) = v2184 {
                                    let v670 = C::use_sse41(ctx);
                                    if v670 == true {
                                        let v2161 = &constructor_to_amode(ctx, v2152, v2154.1, v2153);
                                        let v2162 = &C::amode_to_synthetic_amode(ctx, v2161);
                                        let v2187 = constructor_put_in_xmm(ctx, v2154.0);
                                        let v2192 = &constructor_x64_pextrw_store(ctx, v2162, v2187, 0x0_u8);
                                        let v2193 = constructor_side_effect(ctx, v2192);
                                        let v2194 = Some(v2193);
                                        // Rule at src\isa\x64\lower.isle line 3122.
                                        return v2194;
                                    }
                                    let v2161 = &constructor_to_amode(ctx, v2152, v2154.1, v2153);
                                    let v2162 = &C::amode_to_synthetic_amode(ctx, v2161);
                                    let v2187 = constructor_put_in_xmm(ctx, v2154.0);
                                    let v2188 = constructor_bitcast_xmm_to_gpr(ctx, 0x10_u8, v2187);
                                    let v2189 = &constructor_x64_movrm(ctx, I16, v2162, v2188);
                                    let v2190 = constructor_side_effect(ctx, v2189);
                                    let v2191 = Some(v2190);
                                    // Rule at src\isa\x64\lower.isle line 3115.
                                    return v2191;
                                }
                                let v2195 = C::ty_32(ctx, v2157);
                                if let Some(v2196) = v2195 {
                                    let v2161 = &constructor_to_amode(ctx, v2152, v2154.1, v2153);
                                    let v2162 = &C::amode_to_synthetic_amode(ctx, v2161);
                                    let v2187 = constructor_put_in_xmm(ctx, v2154.0);
                                    let v2197 = &constructor_x64_movss_store(ctx, v2162, v2187);
                                    let v2198 = constructor_side_effect(ctx, v2197);
                                    let v2199 = Some(v2198);
                                    // Rule at src\isa\x64\lower.isle line 3131.
                                    return v2199;
                                }
                                let v2200 = C::ty_64(ctx, v2157);
                                if let Some(v2201) = v2200 {
                                    let v2161 = &constructor_to_amode(ctx, v2152, v2154.1, v2153);
                                    let v2162 = &C::amode_to_synthetic_amode(ctx, v2161);
                                    let v2187 = constructor_put_in_xmm(ctx, v2154.0);
                                    let v2202 = &constructor_x64_movsd_store(ctx, v2162, v2187);
                                    let v2203 = constructor_side_effect(ctx, v2202);
                                    let v2204 = Some(v2203);
                                    // Rule at src\isa\x64\lower.isle line 3139.
                                    return v2204;
                                }
                                let v2211 = C::ty_128(ctx, v2157);
                                if let Some(v2212) = v2211 {
                                    let v2161 = &constructor_to_amode(ctx, v2152, v2154.1, v2153);
                                    let v2162 = &C::amode_to_synthetic_amode(ctx, v2161);
                                    let v2187 = constructor_put_in_xmm(ctx, v2154.0);
                                    let v2213 = &constructor_x64_movdqu_store(ctx, v2162, v2187);
                                    let v2214 = constructor_side_effect(ctx, v2213);
                                    let v2215 = Some(v2214);
                                    // Rule at src\isa\x64\lower.isle line 3163.
                                    return v2215;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Istore8 => {
                    let v2154 = C::unpack_value_array_2(ctx, v2151);
                    let v2161 = &constructor_to_amode(ctx, v2152, v2154.1, v2153);
                    let v2162 = &C::amode_to_synthetic_amode(ctx, v2161);
                    let v2163 = constructor_put_in_gpr(ctx, v2154.0);
                    let v2168 = &constructor_x64_movrm(ctx, I8, v2162, v2163);
                    let v2169 = constructor_side_effect(ctx, v2168);
                    let v2170 = Some(v2169);
                    // Rule at src\isa\x64\lower.isle line 3098.
                    return v2170;
                }
                &Opcode::Istore16 => {
                    let v2154 = C::unpack_value_array_2(ctx, v2151);
                    let v2161 = &constructor_to_amode(ctx, v2152, v2154.1, v2153);
                    let v2162 = &C::amode_to_synthetic_amode(ctx, v2161);
                    let v2163 = constructor_put_in_gpr(ctx, v2154.0);
                    let v2171 = &constructor_x64_movrm(ctx, I16, v2162, v2163);
                    let v2172 = constructor_side_effect(ctx, v2171);
                    let v2173 = Some(v2172);
                    // Rule at src\isa\x64\lower.isle line 3101.
                    return v2173;
                }
                &Opcode::Istore32 => {
                    let v2154 = C::unpack_value_array_2(ctx, v2151);
                    let v2161 = &constructor_to_amode(ctx, v2152, v2154.1, v2153);
                    let v2162 = &C::amode_to_synthetic_amode(ctx, v2161);
                    let v2163 = constructor_put_in_gpr(ctx, v2154.0);
                    let v2174 = &constructor_x64_movrm(ctx, I32, v2162, v2163);
                    let v2175 = constructor_side_effect(ctx, v2174);
                    let v2176 = Some(v2175);
                    // Rule at src\isa\x64\lower.isle line 3104.
                    return v2176;
                }
                _ => {}
            }
        }
        &InstructionData::StoreNoOffset {
            opcode: ref v2364,
            args: ref v2365,
            flags: v2366,
        } => {
            if let &Opcode::AtomicStore = v2364 {
                let v2353 = C::use_cmpxchg16b(ctx);
                if v2353 == true {
                    let v2367 = C::unpack_value_array_2(ctx, v2365);
                    let v2370 = C::value_type(ctx, v2367.0);
                    if v2370 == I128 {
                        let v70 = C::zero_offset(ctx);
                        let v2375 = &constructor_to_amode(ctx, v2366, v2367.1, v70);
                        let v2376 = &C::amode_to_synthetic_amode(ctx, v2375);
                        let v2383 = C::put_in_regs(ctx, v2367.0);
                        let v2384 = &constructor_x64_atomic_128_store_seq(ctx, v2376, v2383);
                        let v2385 = constructor_side_effect(ctx, v2384);
                        let v2386 = Some(v2385);
                        // Rule at src\isa\x64\lower.isle line 3402.
                        return v2386;
                    }
                }
                let v2367 = C::unpack_value_array_2(ctx, v2365);
                let v2370 = C::value_type(ctx, v2367.0);
                let v2371 = C::fits_in_64(ctx, v2370);
                if let Some(v2372) = v2371 {
                    let v2373 = C::ty_int(ctx, v2370);
                    if let Some(v2374) = v2373 {
                        let v70 = C::zero_offset(ctx);
                        let v2375 = &constructor_to_amode(ctx, v2366, v2367.1, v70);
                        let v2376 = &C::amode_to_synthetic_amode(ctx, v2375);
                        let v2377 = constructor_put_in_gpr(ctx, v2367.0);
                        let v2378 = &constructor_x64_movrm(ctx, v2372, v2376, v2377);
                        let v2379 = &constructor_x64_mfence(ctx);
                        let v2380 = &constructor_side_effect_concat(ctx, v2378, v2379);
                        let v2381 = constructor_side_effect(ctx, v2380);
                        let v2382 = Some(v2381);
                        // Rule at src\isa\x64\lower.isle line 3395.
                        return v2382;
                    }
                }
            }
        }
        &InstructionData::Ternary {
            opcode: ref v915,
            args: ref v916,
        } => {
            match v915 {
                &Opcode::StackSwitch => {
                    let v2482 = &C::stack_switch_model(ctx);
                    if let Some(v2483) = v2482 {
                        if let &StackSwitchModel::Basic = v2483 {
                            let v917 = C::unpack_value_array_3(ctx, v916);
                            let v981 = constructor_put_in_gpr(ctx, v917.0);
                            let v2484 = constructor_put_in_gpr(ctx, v917.1);
                            let v2485 = constructor_put_in_gpr(ctx, v917.2);
                            let v2486 = constructor_x64_stack_switch_basic(ctx, v981, v2484, v2485);
                            let v2487 = constructor_output_gpr(ctx, v2486);
                            let v2488 = Some(v2487);
                            // Rule at src\isa\x64\lower.isle line 3496.
                            return v2488;
                        }
                    }
                }
                &Opcode::Select => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v917 = C::unpack_value_array_3(ctx, v916);
                        let v1498 = C::maybe_uextend(ctx, v917.0);
                        if let Some(v1499) = v1498 {
                            let v1500 = C::def_inst(ctx, v1499);
                            if let Some(v1501) = v1500 {
                                let v1502 = &C::inst_data_value(ctx, v1501);
                                match v1502 {
                                    &InstructionData::FloatCompare {
                                        opcode: ref v1503,
                                        args: ref v1504,
                                        cond: ref v1505,
                                    } => {
                                        if let &Opcode::Fcmp = v1503 {
                                            match v1505 {
                                                &FloatCC::Equal => {
                                                    let v1506 = C::unpack_value_array_2(ctx, v1504);
                                                    let v1513 = &constructor_emit_fcmp(ctx, &FloatCC::NotEqual, v1506.0, v1506.1);
                                                    let v3 = C::value_type(ctx, v2);
                                                    let v1514 = constructor_lower_select_fcmp(ctx, v3, v1513, v917.2, v917.1);
                                                    let v1515 = Some(v1514);
                                                    // Rule at src\isa\x64\lower.isle line 2189.
                                                    return v1515;
                                                }
                                                &FloatCC::LessThan => {
                                                    let v3 = C::value_type(ctx, v2);
                                                    match v3 {
                                                        F32 => {
                                                            let v1506 = C::unpack_value_array_2(ctx, v1504);
                                                            if v917.1 == v1506.1 {
                                                                if v917.2 == v1506.0 {
                                                                    let v1550 = constructor_put_in_xmm(ctx, v1506.1);
                                                                    let v1551 = &C::put_in_xmm_mem(ctx, v1506.0);
                                                                    let v1552 = constructor_x64_maxss(ctx, v1550, v1551);
                                                                    let v1553 = constructor_output_xmm(ctx, v1552);
                                                                    let v1554 = Some(v1553);
                                                                    // Rule at src\isa\x64\lower.isle line 2231.
                                                                    return v1554;
                                                                }
                                                            }
                                                            if v917.1 == v1506.0 {
                                                                if v917.2 == v1506.1 {
                                                                    let v1542 = constructor_put_in_xmm(ctx, v1506.0);
                                                                    let v1543 = &C::put_in_xmm_mem(ctx, v1506.1);
                                                                    let v1544 = constructor_x64_minss(ctx, v1542, v1543);
                                                                    let v1545 = constructor_output_xmm(ctx, v1544);
                                                                    let v1546 = Some(v1545);
                                                                    // Rule at src\isa\x64\lower.isle line 2227.
                                                                    return v1546;
                                                                }
                                                            }
                                                        }
                                                        F64 => {
                                                            let v1506 = C::unpack_value_array_2(ctx, v1504);
                                                            if v917.1 == v1506.1 {
                                                                if v917.2 == v1506.0 {
                                                                    let v1550 = constructor_put_in_xmm(ctx, v1506.1);
                                                                    let v1551 = &C::put_in_xmm_mem(ctx, v1506.0);
                                                                    let v1555 = constructor_x64_maxsd(ctx, v1550, v1551);
                                                                    let v1556 = constructor_output_xmm(ctx, v1555);
                                                                    let v1557 = Some(v1556);
                                                                    // Rule at src\isa\x64\lower.isle line 2233.
                                                                    return v1557;
                                                                }
                                                            }
                                                            if v917.1 == v1506.0 {
                                                                if v917.2 == v1506.1 {
                                                                    let v1542 = constructor_put_in_xmm(ctx, v1506.0);
                                                                    let v1543 = &C::put_in_xmm_mem(ctx, v1506.1);
                                                                    let v1547 = constructor_x64_minsd(ctx, v1542, v1543);
                                                                    let v1548 = constructor_output_xmm(ctx, v1547);
                                                                    let v1549 = Some(v1548);
                                                                    // Rule at src\isa\x64\lower.isle line 2229.
                                                                    return v1549;
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                                _ => {}
                                            }
                                            let v1506 = C::unpack_value_array_2(ctx, v1504);
                                            let v1509 = &constructor_emit_fcmp(ctx, v1505, v1506.0, v1506.1);
                                            let v3 = C::value_type(ctx, v2);
                                            let v1510 = constructor_lower_select_fcmp(ctx, v3, v1509, v917.1, v917.2);
                                            let v1511 = Some(v1510);
                                            // Rule at src\isa\x64\lower.isle line 2187.
                                            return v1511;
                                        }
                                    }
                                    &InstructionData::IntCompare {
                                        opcode: ref v1516,
                                        args: ref v1517,
                                        cond: ref v1518,
                                    } => {
                                        if let &Opcode::Icmp = v1516 {
                                            let v1519 = C::unpack_value_array_2(ctx, v1517);
                                            let v1522 = &constructor_emit_cmp(ctx, v1518, v1519.0, v1519.1);
                                            let v3 = C::value_type(ctx, v2);
                                            let v1523 = constructor_lower_select_icmp(ctx, v3, v1522, v917.1, v917.2);
                                            let v1524 = Some(v1523);
                                            // Rule at src\isa\x64\lower.isle line 2203.
                                            return v1524;
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        let v1525 = C::value_type(ctx, v917.0);
                        let v1526 = C::fits_in_64(ctx, v1525);
                        if let Some(v1527) = v1526 {
                            let v1528 = &C::raw_operand_size_of_type(ctx, v1527);
                            let v1529 = constructor_put_in_gpr(ctx, v917.0);
                            let v1530 = &C::gpr_to_gpr_mem_imm(ctx, v1529);
                            let v1531 = &constructor_x64_test(ctx, v1528, v1529, v1530);
                            let v3 = C::value_type(ctx, v2);
                            let v1533 = &constructor_cmove_from_values(ctx, v3, &CC::NZ, v917.1, v917.2);
                            let v1534 = constructor_with_flags(ctx, v1531, v1533);
                            let v1535 = C::output(ctx, v1534);
                            let v1536 = Some(v1535);
                            // Rule at src\isa\x64\lower.isle line 2209.
                            return v1536;
                        }
                        if v1525 == I128 {
                            let v970 = C::put_in_regs(ctx, v917.0);
                            let v1538 = &constructor_cmp_zero_i128(ctx, &CC::Z, v970);
                            let v1539 = constructor_select_icmp(ctx, v1538, v917.1, v917.2);
                            let v1540 = C::output(ctx, v1539);
                            let v1541 = Some(v1540);
                            // Rule at src\isa\x64\lower.isle line 2216.
                            return v1541;
                        }
                    }
                }
                &Opcode::SelectSpectreGuard => {
                    let v917 = C::unpack_value_array_3(ctx, v916);
                    let v939 = C::def_inst(ctx, v917.0);
                    if let Some(v940) = v939 {
                        let v941 = &C::inst_data_value(ctx, v940);
                        if let &InstructionData::IntCompare {
                            opcode: ref v2500,
                            args: ref v2501,
                            cond: ref v2502,
                        } = v941 {
                            if let &Opcode::Icmp = v2500 {
                                let v2503 = C::unpack_value_array_2(ctx, v2501);
                                let v2506 = &constructor_emit_cmp(ctx, v2502, v2503.0, v2503.1);
                                let v2507 = constructor_select_icmp(ctx, v2506, v917.1, v917.2);
                                let v2508 = C::output(ctx, v2507);
                                let v2509 = Some(v2508);
                                // Rule at src\isa\x64\lower.isle line 3581.
                                return v2509;
                            }
                        }
                    }
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1525 = C::value_type(ctx, v917.0);
                        let v1526 = C::fits_in_64(ctx, v1525);
                        if let Some(v1527) = v1526 {
                            let v1528 = &C::raw_operand_size_of_type(ctx, v1527);
                            let v1529 = constructor_put_in_gpr(ctx, v917.0);
                            let v1530 = &C::gpr_to_gpr_mem_imm(ctx, v1529);
                            let v1531 = &constructor_x64_test(ctx, v1528, v1529, v1530);
                            let v3 = C::value_type(ctx, v2);
                            let v1533 = &constructor_cmove_from_values(ctx, v3, &CC::NZ, v917.1, v917.2);
                            let v1534 = constructor_with_flags(ctx, v1531, v1533);
                            let v1535 = C::output(ctx, v1534);
                            let v1536 = Some(v1535);
                            // Rule at src\isa\x64\lower.isle line 3584.
                            return v1536;
                        }
                        if v1525 == I128 {
                            let v970 = C::put_in_regs(ctx, v917.0);
                            let v1538 = &constructor_cmp_zero_i128(ctx, &CC::Z, v970);
                            let v1539 = constructor_select_icmp(ctx, v1538, v917.1, v917.2);
                            let v1540 = C::output(ctx, v1539);
                            let v1541 = Some(v1540);
                            // Rule at src\isa\x64\lower.isle line 3589.
                            return v1541;
                        }
                    }
                }
                &Opcode::Bitselect => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v270 = C::ty_scalar_float(ctx, v3);
                        if let Some(v271) = v270 {
                            let v917 = C::unpack_value_array_3(ctx, v916);
                            let v921 = constructor_put_in_xmm(ctx, v917.0);
                            let v934 = &C::put_in_xmm_mem(ctx, v917.1);
                            let v992 = constructor_sse_and(ctx, v271, v921, v934);
                            let v993 = constructor_put_in_xmm(ctx, v917.0);
                            let v994 = constructor_vector_all_ones(ctx);
                            let v995 = &C::xmm_to_xmm_mem(ctx, v994);
                            let v996 = constructor_x64_xor_vector(ctx, v271, v993, v995);
                            let v997 = &C::put_in_xmm_mem(ctx, v917.2);
                            let v998 = constructor_sse_and(ctx, v271, v996, v997);
                            let v999 = &C::xmm_to_xmm_mem(ctx, v998);
                            let v1000 = constructor_sse_or(ctx, v271, v992, v999);
                            let v1001 = constructor_output_xmm(ctx, v1000);
                            let v1002 = Some(v1001);
                            // Rule at src\isa\x64\lower.isle line 1559.
                            return v1002;
                        }
                        let v979 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v980) = v979 {
                            let v917 = C::unpack_value_array_3(ctx, v916);
                            let v981 = constructor_put_in_gpr(ctx, v917.0);
                            let v982 = &constructor_put_in_gpr_mem_imm(ctx, v917.1);
                            let v983 = constructor_x64_and(ctx, v980, v981, v982);
                            let v984 = constructor_put_in_gpr(ctx, v917.0);
                            let v985 = constructor_x64_not(ctx, v980, v984);
                            let v986 = &constructor_put_in_gpr_mem_imm(ctx, v917.2);
                            let v987 = constructor_x64_and(ctx, v980, v985, v986);
                            let v988 = &C::gpr_to_gpr_mem_imm(ctx, v987);
                            let v989 = constructor_x64_or(ctx, v980, v983, v988);
                            let v990 = constructor_output_gpr(ctx, v989);
                            let v991 = Some(v990);
                            // Rule at src\isa\x64\lower.isle line 1554.
                            return v991;
                        }
                        match v3 {
                            I128 => {
                                let v917 = C::unpack_value_array_3(ctx, v916);
                                let v970 = C::put_in_regs(ctx, v917.0);
                                let v971 = C::put_in_regs(ctx, v917.1);
                                let v972 = constructor_and_i128(ctx, v970, v971);
                                let v973 = constructor_i128_not(ctx, v917.0);
                                let v974 = C::put_in_regs(ctx, v917.2);
                                let v975 = constructor_and_i128(ctx, v973, v974);
                                let v976 = constructor_or_i128(ctx, v972, v975);
                                let v977 = C::output(ctx, v976);
                                let v978 = Some(v977);
                                // Rule at src\isa\x64\lower.isle line 1549.
                                return v978;
                            }
                            F32X4 => {
                                let v917 = C::unpack_value_array_3(ctx, v916);
                                let v939 = C::def_inst(ctx, v917.0);
                                if let Some(v940) = v939 {
                                    let v941 = &C::inst_data_value(ctx, v940);
                                    if let &InstructionData::LoadNoOffset {
                                        opcode: ref v942,
                                        arg: v943,
                                        flags: v944,
                                    } = v941 {
                                        if let &Opcode::Bitcast = v942 {
                                            let v945 = C::def_inst(ctx, v943);
                                            if let Some(v946) = v945 {
                                                let v947 = &C::inst_data_value(ctx, v946);
                                                if let &InstructionData::FloatCompare {
                                                    opcode: ref v948,
                                                    args: ref v949,
                                                    cond: ref v950,
                                                } = v947 {
                                                    if let &Opcode::Fcmp = v948 {
                                                        if let &FloatCC::LessThan = v950 {
                                                            let v951 = C::unpack_value_array_2(ctx, v949);
                                                            if v917.1 == v951.1 {
                                                                if v917.2 == v951.0 {
                                                                    let v962 = constructor_put_in_xmm(ctx, v951.1);
                                                                    let v963 = &C::put_in_xmm_mem(ctx, v951.0);
                                                                    let v964 = constructor_x64_maxps(ctx, v962, v963);
                                                                    let v965 = constructor_output_xmm(ctx, v964);
                                                                    let v966 = Some(v965);
                                                                    // Rule at src\isa\x64\lower.isle line 1542.
                                                                    return v966;
                                                                }
                                                            }
                                                            if v917.1 == v951.0 {
                                                                if v917.2 == v951.1 {
                                                                    let v954 = constructor_put_in_xmm(ctx, v951.0);
                                                                    let v955 = &C::put_in_xmm_mem(ctx, v951.1);
                                                                    let v956 = constructor_x64_minps(ctx, v954, v955);
                                                                    let v957 = constructor_output_xmm(ctx, v956);
                                                                    let v958 = Some(v957);
                                                                    // Rule at src\isa\x64\lower.isle line 1537.
                                                                    return v958;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            F64X2 => {
                                let v917 = C::unpack_value_array_3(ctx, v916);
                                let v939 = C::def_inst(ctx, v917.0);
                                if let Some(v940) = v939 {
                                    let v941 = &C::inst_data_value(ctx, v940);
                                    if let &InstructionData::LoadNoOffset {
                                        opcode: ref v942,
                                        arg: v943,
                                        flags: v944,
                                    } = v941 {
                                        if let &Opcode::Bitcast = v942 {
                                            let v945 = C::def_inst(ctx, v943);
                                            if let Some(v946) = v945 {
                                                let v947 = &C::inst_data_value(ctx, v946);
                                                if let &InstructionData::FloatCompare {
                                                    opcode: ref v948,
                                                    args: ref v949,
                                                    cond: ref v950,
                                                } = v947 {
                                                    if let &Opcode::Fcmp = v948 {
                                                        if let &FloatCC::LessThan = v950 {
                                                            let v951 = C::unpack_value_array_2(ctx, v949);
                                                            if v917.1 == v951.1 {
                                                                if v917.2 == v951.0 {
                                                                    let v962 = constructor_put_in_xmm(ctx, v951.1);
                                                                    let v963 = &C::put_in_xmm_mem(ctx, v951.0);
                                                                    let v967 = constructor_x64_maxpd(ctx, v962, v963);
                                                                    let v968 = constructor_output_xmm(ctx, v967);
                                                                    let v969 = Some(v968);
                                                                    // Rule at src\isa\x64\lower.isle line 1544.
                                                                    return v969;
                                                                }
                                                            }
                                                            if v917.1 == v951.0 {
                                                                if v917.2 == v951.1 {
                                                                    let v954 = constructor_put_in_xmm(ctx, v951.0);
                                                                    let v955 = &C::put_in_xmm_mem(ctx, v951.1);
                                                                    let v959 = constructor_x64_minpd(ctx, v954, v955);
                                                                    let v960 = constructor_output_xmm(ctx, v959);
                                                                    let v961 = Some(v960);
                                                                    // Rule at src\isa\x64\lower.isle line 1539.
                                                                    return v961;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                        let v89 = C::multi_lane(ctx, v3);
                        if let Some(v90) = v89 {
                            let v670 = C::use_sse41(ctx);
                            if v670 == true {
                                let v917 = C::unpack_value_array_3(ctx, v916);
                                let v931 = constructor_all_ones_or_all_zeros(ctx, v917.0);
                                if let Some(v932) = v931 {
                                    let v933 = constructor_put_in_xmm(ctx, v917.2);
                                    let v934 = &C::put_in_xmm_mem(ctx, v917.1);
                                    let v935 = constructor_put_in_xmm(ctx, v917.0);
                                    let v936 = constructor_x64_pblendvb(ctx, v933, v934, v935);
                                    let v937 = constructor_output_xmm(ctx, v936);
                                    let v938 = Some(v937);
                                    // Rule at src\isa\x64\lower.isle line 1515.
                                    return v938;
                                }
                            }
                            let v917 = C::unpack_value_array_3(ctx, v916);
                            let v921 = constructor_put_in_xmm(ctx, v917.0);
                            let v922 = constructor_put_in_xmm(ctx, v917.1);
                            let v923 = &C::xmm_to_xmm_mem(ctx, v921);
                            let v924 = constructor_sse_and(ctx, v3, v922, v923);
                            let v925 = &C::put_in_xmm_mem(ctx, v917.2);
                            let v926 = constructor_sse_and_not(ctx, v3, v921, v925);
                            let v927 = &C::xmm_to_xmm_mem(ctx, v924);
                            let v928 = constructor_sse_or(ctx, v3, v926, v927);
                            let v929 = constructor_output_xmm(ctx, v928);
                            let v930 = Some(v929);
                            // Rule at src\isa\x64\lower.isle line 1501.
                            return v930;
                        }
                    }
                }
                &Opcode::X86Blendv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8X16 => {
                                let v670 = C::use_sse41(ctx);
                                if v670 == true {
                                    let v917 = C::unpack_value_array_3(ctx, v916);
                                    let v933 = constructor_put_in_xmm(ctx, v917.2);
                                    let v934 = &C::put_in_xmm_mem(ctx, v917.1);
                                    let v935 = constructor_put_in_xmm(ctx, v917.0);
                                    let v936 = constructor_x64_pblendvb(ctx, v933, v934, v935);
                                    let v937 = constructor_output_xmm(ctx, v936);
                                    let v938 = Some(v937);
                                    // Rule at src\isa\x64\lower.isle line 1567.
                                    return v938;
                                }
                            }
                            I32X4 => {
                                let v670 = C::use_sse41(ctx);
                                if v670 == true {
                                    let v917 = C::unpack_value_array_3(ctx, v916);
                                    let v933 = constructor_put_in_xmm(ctx, v917.2);
                                    let v934 = &C::put_in_xmm_mem(ctx, v917.1);
                                    let v935 = constructor_put_in_xmm(ctx, v917.0);
                                    let v1003 = constructor_x64_blendvps(ctx, v933, v934, v935);
                                    let v1004 = constructor_output_xmm(ctx, v1003);
                                    let v1005 = Some(v1004);
                                    // Rule at src\isa\x64\lower.isle line 1572.
                                    return v1005;
                                }
                            }
                            I64X2 => {
                                let v670 = C::use_sse41(ctx);
                                if v670 == true {
                                    let v917 = C::unpack_value_array_3(ctx, v916);
                                    let v933 = constructor_put_in_xmm(ctx, v917.2);
                                    let v934 = &C::put_in_xmm_mem(ctx, v917.1);
                                    let v935 = constructor_put_in_xmm(ctx, v917.0);
                                    let v1006 = constructor_x64_blendvpd(ctx, v933, v934, v935);
                                    let v1007 = constructor_output_xmm(ctx, v1006);
                                    let v1008 = Some(v1007);
                                    // Rule at src\isa\x64\lower.isle line 1577.
                                    return v1008;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fma => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v2022 = C::use_fma(ctx);
                        if v2022 == true {
                            let v917 = C::unpack_value_array_3(ctx, v916);
                            let v2026 = C::def_inst(ctx, v917.2);
                            if let Some(v2027) = v2026 {
                                let v2028 = &C::inst_data_value(ctx, v2027);
                                if let &InstructionData::Unary {
                                    opcode: ref v2029,
                                    arg: v2030,
                                } = v2028 {
                                    if let &Opcode::Fneg = v2029 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v2031 = constructor_fmsub(ctx, v3, v917.0, v917.1, v2030);
                                        let v2032 = constructor_output_xmm(ctx, v2031);
                                        let v2033 = Some(v2032);
                                        // Rule at src\isa\x64\lower.isle line 2966.
                                        return v2033;
                                    }
                                }
                            }
                            let v3 = C::value_type(ctx, v2);
                            let v2023 = constructor_fmadd(ctx, v3, v917.0, v917.1, v917.2);
                            let v2024 = constructor_output_xmm(ctx, v2023);
                            let v2025 = Some(v2024);
                            // Rule at src\isa\x64\lower.isle line 2935.
                            return v2025;
                        }
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v917 = C::unpack_value_array_3(ctx, v916);
                                let v1953 = C::put_in_reg(ctx, v917.0);
                                let v1954 = C::put_in_reg(ctx, v917.1);
                                let v1955 = C::put_in_reg(ctx, v917.2);
                                let v1956 = C::libcall_3(ctx, &LibCall::FmaF32, v1953, v1954, v1955);
                                let v1957 = constructor_output_reg(ctx, v1956);
                                let v1958 = Some(v1957);
                                // Rule at src\isa\x64\lower.isle line 2890.
                                return v1958;
                            }
                            F64 => {
                                let v917 = C::unpack_value_array_3(ctx, v916);
                                let v1953 = C::put_in_reg(ctx, v917.0);
                                let v1954 = C::put_in_reg(ctx, v917.1);
                                let v1955 = C::put_in_reg(ctx, v917.2);
                                let v1960 = C::libcall_3(ctx, &LibCall::FmaF64, v1953, v1954, v1955);
                                let v1961 = constructor_output_reg(ctx, v1960);
                                let v1962 = Some(v1961);
                                // Rule at src\isa\x64\lower.isle line 2892.
                                return v1962;
                            }
                            F32X4 => {
                                let v917 = C::unpack_value_array_3(ctx, v916);
                                let v921 = constructor_put_in_xmm(ctx, v917.0);
                                let v922 = constructor_put_in_xmm(ctx, v917.1);
                                let v1963 = constructor_put_in_xmm(ctx, v917.2);
                                let v1964 = C::xmm_to_reg(ctx, v921);
                                let v1965 = C::xmm_to_reg(ctx, v922);
                                let v1966 = C::xmm_to_reg(ctx, v1963);
                                let v1967 = C::libcall_3(ctx, &LibCall::FmaF32, v1964, v1965, v1966);
                                let v1968 = C::xmm_new(ctx, v1967);
                                let v1969 = &C::xmm_to_xmm_mem(ctx, v921);
                                let v1970 = constructor_x64_pshufd(ctx, v1969, 0x1_u8);
                                let v1971 = C::xmm_to_reg(ctx, v1970);
                                let v1972 = &C::xmm_to_xmm_mem(ctx, v922);
                                let v1973 = constructor_x64_pshufd(ctx, v1972, 0x1_u8);
                                let v1974 = C::xmm_to_reg(ctx, v1973);
                                let v1975 = &C::xmm_to_xmm_mem(ctx, v1963);
                                let v1976 = constructor_x64_pshufd(ctx, v1975, 0x1_u8);
                                let v1977 = C::xmm_to_reg(ctx, v1976);
                                let v1978 = C::libcall_3(ctx, &LibCall::FmaF32, v1971, v1974, v1977);
                                let v1979 = C::xmm_new(ctx, v1978);
                                let v1980 = &C::xmm_to_xmm_mem(ctx, v921);
                                let v1981 = constructor_x64_pshufd(ctx, v1980, 0x2_u8);
                                let v1982 = C::xmm_to_reg(ctx, v1981);
                                let v1983 = &C::xmm_to_xmm_mem(ctx, v922);
                                let v1984 = constructor_x64_pshufd(ctx, v1983, 0x2_u8);
                                let v1985 = C::xmm_to_reg(ctx, v1984);
                                let v1986 = &C::xmm_to_xmm_mem(ctx, v1963);
                                let v1987 = constructor_x64_pshufd(ctx, v1986, 0x2_u8);
                                let v1988 = C::xmm_to_reg(ctx, v1987);
                                let v1989 = C::libcall_3(ctx, &LibCall::FmaF32, v1982, v1985, v1988);
                                let v1990 = C::xmm_new(ctx, v1989);
                                let v1991 = &C::xmm_to_xmm_mem(ctx, v921);
                                let v1992 = constructor_x64_pshufd(ctx, v1991, 0x3_u8);
                                let v1993 = C::xmm_to_reg(ctx, v1992);
                                let v1994 = &C::xmm_to_xmm_mem(ctx, v922);
                                let v1995 = constructor_x64_pshufd(ctx, v1994, 0x3_u8);
                                let v1996 = C::xmm_to_reg(ctx, v1995);
                                let v1997 = &C::xmm_to_xmm_mem(ctx, v1963);
                                let v1998 = constructor_x64_pshufd(ctx, v1997, 0x3_u8);
                                let v1999 = C::xmm_to_reg(ctx, v1998);
                                let v2000 = C::libcall_3(ctx, &LibCall::FmaF32, v1993, v1996, v1999);
                                let v2001 = C::xmm_new(ctx, v2000);
                                let v2002 = constructor_f32x4_insertlane(ctx, v1968, v1979, 0x1_u8);
                                let v2003 = constructor_f32x4_insertlane(ctx, v2002, v1990, 0x2_u8);
                                let v2004 = constructor_f32x4_insertlane(ctx, v2003, v2001, 0x3_u8);
                                let v2005 = constructor_output_xmm(ctx, v2004);
                                let v2006 = Some(v2005);
                                // Rule at src\isa\x64\lower.isle line 2895.
                                return v2006;
                            }
                            F64X2 => {
                                let v917 = C::unpack_value_array_3(ctx, v916);
                                let v921 = constructor_put_in_xmm(ctx, v917.0);
                                let v922 = constructor_put_in_xmm(ctx, v917.1);
                                let v1963 = constructor_put_in_xmm(ctx, v917.2);
                                let v1964 = C::xmm_to_reg(ctx, v921);
                                let v1965 = C::xmm_to_reg(ctx, v922);
                                let v1966 = C::xmm_to_reg(ctx, v1963);
                                let v2007 = C::libcall_3(ctx, &LibCall::FmaF64, v1964, v1965, v1966);
                                let v2008 = C::xmm_new(ctx, v2007);
                                let v1969 = &C::xmm_to_xmm_mem(ctx, v921);
                                let v2010 = constructor_x64_pshufd(ctx, v1969, 0xee_u8);
                                let v2011 = C::xmm_to_reg(ctx, v2010);
                                let v1972 = &C::xmm_to_xmm_mem(ctx, v922);
                                let v2012 = constructor_x64_pshufd(ctx, v1972, 0xee_u8);
                                let v2013 = C::xmm_to_reg(ctx, v2012);
                                let v1975 = &C::xmm_to_xmm_mem(ctx, v1963);
                                let v2014 = constructor_x64_pshufd(ctx, v1975, 0xee_u8);
                                let v2015 = C::xmm_to_reg(ctx, v2014);
                                let v2016 = C::libcall_3(ctx, &LibCall::FmaF64, v2011, v2013, v2015);
                                let v2017 = C::xmm_new(ctx, v2016);
                                let v2018 = &C::xmm_to_xmm_mem(ctx, v2017);
                                let v2019 = constructor_x64_movlhps(ctx, v2008, v2018);
                                let v2020 = constructor_output_xmm(ctx, v2019);
                                let v2021 = Some(v2020);
                                // Rule at src\isa\x64\lower.isle line 2919.
                                return v2021;
                            }
                            _ => {}
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::TernaryImm8 {
            opcode: ref v1009,
            args: ref v1010,
            imm: v1011,
        } => {
            if let &Opcode::Insertlane = v1009 {
                let v670 = C::use_sse41(ctx);
                if v670 == true {
                    let v1016 = C::u8_from_uimm8(ctx, v1011);
                    if v1016 == 0x1_u8 {
                        let v1012 = C::unpack_value_array_2(ctx, v1010);
                        let v1100 = C::def_inst(ctx, v1012.0);
                        if let Some(v1101) = v1100 {
                            let v1102 = C::first_result(ctx, v1101);
                            if let Some(v1103) = v1102 {
                                let v1104 = C::value_type(ctx, v1103);
                                if v1104 == I64X2 {
                                    let v1105 = &C::inst_data_value(ctx, v1101);
                                    if let &InstructionData::Unary {
                                        opcode: ref v1106,
                                        arg: v1107,
                                    } = v1105 {
                                        if let &Opcode::Splat = v1106 {
                                            let v1109 = constructor_put_in_gpr(ctx, v1107);
                                            let v1110 = constructor_bitcast_gpr_to_xmm(ctx, 0x40_u8, v1109);
                                            let v1111 = &constructor_put_in_gpr_mem(ctx, v1012.1);
                                            let v1113 = constructor_x64_pinsrq(ctx, v1110, v1111, 0x1_u8);
                                            let v1114 = constructor_output_xmm(ctx, v1113);
                                            let v1115 = Some(v1114);
                                            // Rule at src\isa\x64\lower.isle line 1679.
                                            return v1115;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    let v1012 = C::unpack_value_array_2(ctx, v1010);
                    let v1015 = C::value_type(ctx, v1012.0);
                    match v1015 {
                        I8X16 => {
                            let v1022 = &C::sinkable_load_exact(ctx, v1012.1);
                            if let Some(v1023) = v1022 {
                                let v1017 = constructor_put_in_xmm(ctx, v1012.0);
                                let v1024 = &constructor_sink_load_to_gpr_mem(ctx, v1023);
                                let v1025 = constructor_x64_pinsrb(ctx, v1017, v1024, v1016);
                                let v1026 = constructor_output_xmm(ctx, v1025);
                                let v1027 = Some(v1026);
                                // Rule at src\isa\x64\lower.isle line 1587.
                                return v1027;
                            }
                            let v1017 = constructor_put_in_xmm(ctx, v1012.0);
                            let v1018 = &constructor_put_in_gpr_mem(ctx, v1012.1);
                            let v1019 = constructor_x64_pinsrb(ctx, v1017, v1018, v1016);
                            let v1020 = constructor_output_xmm(ctx, v1019);
                            let v1021 = Some(v1020);
                            // Rule at src\isa\x64\lower.isle line 1584.
                            return v1021;
                        }
                        I32X4 => {
                            let v1017 = constructor_put_in_xmm(ctx, v1012.0);
                            let v1018 = &constructor_put_in_gpr_mem(ctx, v1012.1);
                            let v1058 = constructor_x64_pinsrd(ctx, v1017, v1018, v1016);
                            let v1059 = constructor_output_xmm(ctx, v1058);
                            let v1060 = Some(v1059);
                            // Rule at src\isa\x64\lower.isle line 1639.
                            return v1060;
                        }
                        I64X2 => {
                            let v1017 = constructor_put_in_xmm(ctx, v1012.0);
                            let v1018 = &constructor_put_in_gpr_mem(ctx, v1012.1);
                            let v1089 = constructor_x64_pinsrq(ctx, v1017, v1018, v1016);
                            let v1090 = constructor_output_xmm(ctx, v1089);
                            let v1091 = Some(v1090);
                            // Rule at src\isa\x64\lower.isle line 1668.
                            return v1091;
                        }
                        F32X4 => {
                            let v1116 = &C::sinkable_load(ctx, v1012.1);
                            if let Some(v1117) = v1116 {
                                let v1017 = constructor_put_in_xmm(ctx, v1012.0);
                                let v1118 = &constructor_sink_load_to_xmm_mem(ctx, v1117);
                                let v1119 = C::sse_insertps_lane_imm(ctx, v1016);
                                let v1120 = constructor_x64_insertps(ctx, v1017, v1118, v1119);
                                let v1121 = constructor_output_xmm(ctx, v1120);
                                let v1122 = Some(v1121);
                                // Rule at src\isa\x64\lower.isle line 1685.
                                return v1122;
                            }
                        }
                        _ => {}
                    }
                }
                let v1012 = C::unpack_value_array_2(ctx, v1010);
                let v1015 = C::value_type(ctx, v1012.0);
                match v1015 {
                    I8X16 => {
                        let v1017 = constructor_put_in_xmm(ctx, v1012.0);
                        let v1016 = C::u8_from_uimm8(ctx, v1011);
                        let v1028 = C::insert_i8x16_lane_hole(ctx, v1016);
                        let v1029 = &constructor_const_to_xmm_mem(ctx, v1028);
                        let v1030 = constructor_x64_pand(ctx, v1017, v1029);
                        let v1032 = &constructor_put_in_gpr_mem(ctx, v1012.1);
                        let v1033 = constructor_x64_movzx(ctx, &ExtMode::BL, v1032);
                        let v1036 = C::u8_and(ctx, v1016, 0x3_u8);
                        let v1037 = C::u8_shl(ctx, v1036, 0x3_u8);
                        let v1038 = Imm8Reg::Imm8 {
                            imm: v1037,
                        };
                        let v1039 = &C::imm8_reg_to_imm8_gpr(ctx, &v1038);
                        let v1040 = constructor_x64_shl(ctx, I32, v1033, v1039);
                        let v1041 = &C::gpr_to_gpr_mem(ctx, v1040);
                        let v1042 = constructor_x64_movd_to_xmm(ctx, v1041);
                        let v1043 = &C::xmm_to_xmm_mem(ctx, v1042);
                        let v1045 = C::u8_shr(ctx, v1016, 0x2_u8);
                        let v1046 = constructor_insert_i8x16_lane_pshufd_imm(ctx, v1045);
                        let v1047 = constructor_x64_pshufd(ctx, v1043, v1046);
                        let v1048 = &C::xmm_to_xmm_mem(ctx, v1047);
                        let v1049 = constructor_x64_por(ctx, v1030, v1048);
                        let v1050 = constructor_output_xmm(ctx, v1049);
                        let v1051 = Some(v1050);
                        // Rule at src\isa\x64\lower.isle line 1615.
                        return v1051;
                    }
                    I16X8 => {
                        let v1022 = &C::sinkable_load_exact(ctx, v1012.1);
                        if let Some(v1023) = v1022 {
                            let v1017 = constructor_put_in_xmm(ctx, v1012.0);
                            let v1024 = &constructor_sink_load_to_gpr_mem(ctx, v1023);
                            let v1016 = C::u8_from_uimm8(ctx, v1011);
                            let v1055 = constructor_x64_pinsrw(ctx, v1017, v1024, v1016);
                            let v1056 = constructor_output_xmm(ctx, v1055);
                            let v1057 = Some(v1056);
                            // Rule at src\isa\x64\lower.isle line 1635.
                            return v1057;
                        }
                        let v1017 = constructor_put_in_xmm(ctx, v1012.0);
                        let v1018 = &constructor_put_in_gpr_mem(ctx, v1012.1);
                        let v1016 = C::u8_from_uimm8(ctx, v1011);
                        let v1052 = constructor_x64_pinsrw(ctx, v1017, v1018, v1016);
                        let v1053 = constructor_output_xmm(ctx, v1052);
                        let v1054 = Some(v1053);
                        // Rule at src\isa\x64\lower.isle line 1633.
                        return v1054;
                    }
                    I32X4 => {
                        let v1016 = C::u8_from_uimm8(ctx, v1011);
                        match v1016 {
                            0x0_u8 => {
                                let v1017 = constructor_put_in_xmm(ctx, v1012.0);
                                let v1018 = &constructor_put_in_gpr_mem(ctx, v1012.1);
                                let v1061 = constructor_x64_movd_to_xmm(ctx, v1018);
                                let v1062 = constructor_x64_movss_regmove(ctx, v1017, v1061);
                                let v1063 = constructor_output_xmm(ctx, v1062);
                                let v1064 = Some(v1063);
                                // Rule at src\isa\x64\lower.isle line 1643.
                                return v1064;
                            }
                            0x1_u8 => {
                                let v1065 = &constructor_put_in_gpr_mem(ctx, v1012.1);
                                let v1066 = constructor_x64_movd_to_xmm(ctx, v1065);
                                let v1067 = constructor_put_in_xmm(ctx, v1012.0);
                                let v1068 = &C::xmm_to_xmm_mem(ctx, v1067);
                                let v1069 = constructor_x64_punpcklqdq(ctx, v1066, v1068);
                                let v1070 = &C::xmm_to_xmm_mem(ctx, v1067);
                                let v1072 = constructor_x64_shufps(ctx, v1069, v1070, 0xe2_u8);
                                let v1073 = constructor_output_xmm(ctx, v1072);
                                let v1074 = Some(v1073);
                                // Rule at src\isa\x64\lower.isle line 1648.
                                return v1074;
                            }
                            0x2_u8 => {
                                let v1065 = &constructor_put_in_gpr_mem(ctx, v1012.1);
                                let v1066 = constructor_x64_movd_to_xmm(ctx, v1065);
                                let v1067 = constructor_put_in_xmm(ctx, v1012.0);
                                let v1068 = &C::xmm_to_xmm_mem(ctx, v1067);
                                let v1076 = constructor_x64_shufps(ctx, v1066, v1068, 0x30_u8);
                                let v1077 = &C::xmm_to_xmm_mem(ctx, v1076);
                                let v1079 = constructor_x64_shufps(ctx, v1067, v1077, 0x84_u8);
                                let v1080 = constructor_output_xmm(ctx, v1079);
                                let v1081 = Some(v1080);
                                // Rule at src\isa\x64\lower.isle line 1655.
                                return v1081;
                            }
                            0x3_u8 => {
                                let v1065 = &constructor_put_in_gpr_mem(ctx, v1012.1);
                                let v1066 = constructor_x64_movd_to_xmm(ctx, v1065);
                                let v1067 = constructor_put_in_xmm(ctx, v1012.0);
                                let v1068 = &C::xmm_to_xmm_mem(ctx, v1067);
                                let v1083 = constructor_x64_shufps(ctx, v1066, v1068, 0xe4_u8);
                                let v1084 = &C::xmm_to_xmm_mem(ctx, v1083);
                                let v1086 = constructor_x64_shufps(ctx, v1067, v1084, 0x24_u8);
                                let v1087 = constructor_output_xmm(ctx, v1086);
                                let v1088 = Some(v1087);
                                // Rule at src\isa\x64\lower.isle line 1662.
                                return v1088;
                            }
                            _ => {}
                        }
                    }
                    I64X2 => {
                        let v1016 = C::u8_from_uimm8(ctx, v1011);
                        match v1016 {
                            0x0_u8 => {
                                let v1017 = constructor_put_in_xmm(ctx, v1012.0);
                                let v1018 = &constructor_put_in_gpr_mem(ctx, v1012.1);
                                let v1092 = constructor_x64_movq_to_xmm(ctx, v1018);
                                let v1093 = constructor_x64_movsd_regmove(ctx, v1017, v1092);
                                let v1094 = constructor_output_xmm(ctx, v1093);
                                let v1095 = Some(v1094);
                                // Rule at src\isa\x64\lower.isle line 1671.
                                return v1095;
                            }
                            0x1_u8 => {
                                let v1017 = constructor_put_in_xmm(ctx, v1012.0);
                                let v1018 = &constructor_put_in_gpr_mem(ctx, v1012.1);
                                let v1092 = constructor_x64_movq_to_xmm(ctx, v1018);
                                let v1096 = &C::xmm_to_xmm_mem(ctx, v1092);
                                let v1097 = constructor_x64_punpcklqdq(ctx, v1017, v1096);
                                let v1098 = constructor_output_xmm(ctx, v1097);
                                let v1099 = Some(v1098);
                                // Rule at src\isa\x64\lower.isle line 1673.
                                return v1099;
                            }
                            _ => {}
                        }
                    }
                    F32X4 => {
                        let v1017 = constructor_put_in_xmm(ctx, v1012.0);
                        let v1123 = constructor_put_in_xmm(ctx, v1012.1);
                        let v1016 = C::u8_from_uimm8(ctx, v1011);
                        let v1124 = constructor_f32x4_insertlane(ctx, v1017, v1123, v1016);
                        let v1125 = constructor_output_xmm(ctx, v1124);
                        let v1126 = Some(v1125);
                        // Rule at src\isa\x64\lower.isle line 1688.
                        return v1126;
                    }
                    F64X2 => {
                        let v1016 = C::u8_from_uimm8(ctx, v1011);
                        match v1016 {
                            0x0_u8 => {
                                let v1017 = constructor_put_in_xmm(ctx, v1012.0);
                                let v1123 = constructor_put_in_xmm(ctx, v1012.1);
                                let v1127 = constructor_x64_movsd_regmove(ctx, v1017, v1123);
                                let v1128 = constructor_output_xmm(ctx, v1127);
                                let v1129 = Some(v1128);
                                // Rule at src\isa\x64\lower.isle line 1733.
                                return v1129;
                            }
                            0x1_u8 => {
                                let v1017 = constructor_put_in_xmm(ctx, v1012.0);
                                let v1130 = &C::put_in_xmm_mem(ctx, v1012.1);
                                let v1131 = constructor_x64_movlhps(ctx, v1017, v1130);
                                let v1132 = constructor_output_xmm(ctx, v1131);
                                let v1133 = Some(v1132);
                                // Rule at src\isa\x64\lower.isle line 1741.
                                return v1133;
                            }
                            _ => {}
                        }
                    }
                    _ => {}
                }
            }
        }
        &InstructionData::Trap {
            opcode: ref v1205,
            code: ref v1206,
        } => {
            if let &Opcode::Trap = v1205 {
                let v1207 = &constructor_x64_ud2(ctx, v1206);
                let v1208 = constructor_side_effect(ctx, v1207);
                let v1209 = Some(v1208);
                // Rule at src\isa\x64\lower.isle line 1894.
                return v1209;
            }
        }
        &InstructionData::Unary {
            opcode: ref v572,
            arg: v573,
        } => {
            match v572 {
                &Opcode::Splat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v89 = C::multi_lane(ctx, v3);
                        if let Some(v90) = v89 {
                            match v90.0 {
                                0x20_u32 => {
                                    if v90.1 == 0x4_u32 {
                                        let v3263 = &C::sinkable_load(ctx, v573);
                                        if let Some(v3264) = v3263 {
                                            let v3344 = C::use_avx(ctx);
                                            if v3344 == true {
                                                let v3345 = &constructor_sink_load_to_xmm_mem(ctx, v3264);
                                                let v3346 = constructor_x64_vbroadcastss(ctx, v3345);
                                                let v3347 = constructor_output_xmm(ctx, v3346);
                                                let v3348 = Some(v3347);
                                                // Rule at src\isa\x64\lower.isle line 4823.
                                                return v3348;
                                            }
                                            let v3267 = &C::sink_load(ctx, v3264);
                                            let v3268 = constructor_x64_movss_load(ctx, v3267);
                                            let v3340 = &C::xmm_to_xmm_mem(ctx, v3268);
                                            let v3341 = constructor_x64_shufps(ctx, v3268, v3340, 0x0_u8);
                                            let v3342 = constructor_output_xmm(ctx, v3341);
                                            let v3343 = Some(v3342);
                                            // Rule at src\isa\x64\lower.isle line 4820.
                                            return v3343;
                                        }
                                    }
                                }
                                0x40_u32 => {
                                    if v90.1 == 0x2_u32 {
                                        let v764 = C::use_ssse3(ctx);
                                        if v764 == true {
                                            let v3263 = &C::sinkable_load(ctx, v573);
                                            if let Some(v3264) = v3263 {
                                                let v3345 = &constructor_sink_load_to_xmm_mem(ctx, v3264);
                                                let v3358 = constructor_x64_movddup(ctx, v3345);
                                                let v3359 = constructor_output_xmm(ctx, v3358);
                                                let v3360 = Some(v3359);
                                                // Rule at src\isa\x64\lower.isle line 4834.
                                                return v3360;
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        match v3 {
                            I8X16 => {
                                let v3298 = &C::sinkable_load_exact(ctx, v573);
                                if let Some(v3299) = v3298 {
                                    let v3293 = C::use_avx2(ctx);
                                    if v3293 == true {
                                        let v3305 = &constructor_sink_load_to_xmm_mem(ctx, v3299);
                                        let v3306 = constructor_x64_vpbroadcastb(ctx, v3305);
                                        let v3307 = constructor_output_xmm(ctx, v3306);
                                        let v3308 = Some(v3307);
                                        // Rule at src\isa\x64\lower.isle line 4771.
                                        return v3308;
                                    }
                                    let v670 = C::use_sse41(ctx);
                                    if v670 == true {
                                        let v764 = C::use_ssse3(ctx);
                                        if v764 == true {
                                            let v2078 = constructor_xmm_uninit_value(ctx);
                                            let v3300 = &constructor_sink_load_to_gpr_mem(ctx, v3299);
                                            let v3301 = constructor_x64_pinsrb(ctx, v2078, v3300, 0x0_u8);
                                            let v1427 = constructor_xmm_zero(ctx, I8X16);
                                            let v1428 = &C::xmm_to_xmm_mem(ctx, v1427);
                                            let v3302 = constructor_x64_pshufb(ctx, v3301, v1428);
                                            let v3303 = constructor_output_xmm(ctx, v3302);
                                            let v3304 = Some(v3303);
                                            // Rule at src\isa\x64\lower.isle line 4767.
                                            return v3304;
                                        }
                                    }
                                }
                                let v3293 = C::use_avx2(ctx);
                                if v3293 == true {
                                    let v574 = constructor_put_in_gpr(ctx, v573);
                                    let v3287 = constructor_bitcast_gpr_to_xmm(ctx, 0x20_u8, v574);
                                    let v3294 = &C::xmm_to_xmm_mem(ctx, v3287);
                                    let v3295 = constructor_x64_vpbroadcastb(ctx, v3294);
                                    let v3296 = constructor_output_xmm(ctx, v3295);
                                    let v3297 = Some(v3296);
                                    // Rule at src\isa\x64\lower.isle line 4764.
                                    return v3297;
                                }
                                let v764 = C::use_ssse3(ctx);
                                if v764 == true {
                                    let v574 = constructor_put_in_gpr(ctx, v573);
                                    let v3287 = constructor_bitcast_gpr_to_xmm(ctx, 0x20_u8, v574);
                                    let v3288 = constructor_xmm_zero(ctx, I8X16);
                                    let v3289 = &C::xmm_to_xmm_mem(ctx, v3288);
                                    let v3290 = constructor_x64_pshufb(ctx, v3287, v3289);
                                    let v3291 = constructor_output_xmm(ctx, v3290);
                                    let v3292 = Some(v3291);
                                    // Rule at src\isa\x64\lower.isle line 4761.
                                    return v3292;
                                }
                                let v3276 = &constructor_put_in_gpr_mem(ctx, v573);
                                let v3277 = constructor_x64_movd_to_xmm(ctx, v3276);
                                let v3278 = &C::xmm_to_xmm_mem(ctx, v3277);
                                let v3279 = constructor_x64_punpcklbw(ctx, v3277, v3278);
                                let v3280 = &C::xmm_to_xmm_mem(ctx, v3279);
                                let v3281 = constructor_x64_pshuflw(ctx, v3280, 0x0_u8);
                                let v3282 = &C::xmm_to_xmm_mem(ctx, v3281);
                                let v3283 = constructor_x64_pshufd(ctx, v3282, 0x0_u8);
                                let v3284 = constructor_output_xmm(ctx, v3283);
                                let v3285 = Some(v3284);
                                // Rule at src\isa\x64\lower.isle line 4758.
                                return v3285;
                            }
                            I16X8 => {
                                let v3298 = &C::sinkable_load_exact(ctx, v573);
                                if let Some(v3299) = v3298 {
                                    let v3293 = C::use_avx2(ctx);
                                    if v3293 == true {
                                        let v3305 = &constructor_sink_load_to_xmm_mem(ctx, v3299);
                                        let v3324 = constructor_x64_vpbroadcastw(ctx, v3305);
                                        let v3325 = constructor_output_xmm(ctx, v3324);
                                        let v3326 = Some(v3325);
                                        // Rule at src\isa\x64\lower.isle line 4787.
                                        return v3326;
                                    }
                                    let v2078 = constructor_xmm_uninit_value(ctx);
                                    let v3300 = &constructor_sink_load_to_gpr_mem(ctx, v3299);
                                    let v3317 = constructor_x64_pinsrw(ctx, v2078, v3300, 0x0_u8);
                                    let v3318 = &C::xmm_to_xmm_mem(ctx, v3317);
                                    let v3319 = constructor_x64_pshuflw(ctx, v3318, 0x0_u8);
                                    let v3320 = &C::xmm_to_xmm_mem(ctx, v3319);
                                    let v3321 = constructor_x64_pshufd(ctx, v3320, 0x0_u8);
                                    let v3322 = constructor_output_xmm(ctx, v3321);
                                    let v3323 = Some(v3322);
                                    // Rule at src\isa\x64\lower.isle line 4785.
                                    return v3323;
                                }
                                let v3293 = C::use_avx2(ctx);
                                if v3293 == true {
                                    let v574 = constructor_put_in_gpr(ctx, v573);
                                    let v3287 = constructor_bitcast_gpr_to_xmm(ctx, 0x20_u8, v574);
                                    let v3294 = &C::xmm_to_xmm_mem(ctx, v3287);
                                    let v3314 = constructor_x64_vpbroadcastw(ctx, v3294);
                                    let v3315 = constructor_output_xmm(ctx, v3314);
                                    let v3316 = Some(v3315);
                                    // Rule at src\isa\x64\lower.isle line 4782.
                                    return v3316;
                                }
                                let v574 = constructor_put_in_gpr(ctx, v573);
                                let v3287 = constructor_bitcast_gpr_to_xmm(ctx, 0x20_u8, v574);
                                let v3294 = &C::xmm_to_xmm_mem(ctx, v3287);
                                let v3309 = constructor_x64_pshuflw(ctx, v3294, 0x0_u8);
                                let v3310 = &C::xmm_to_xmm_mem(ctx, v3309);
                                let v3311 = constructor_x64_pshufd(ctx, v3310, 0x0_u8);
                                let v3312 = constructor_output_xmm(ctx, v3311);
                                let v3313 = Some(v3312);
                                // Rule at src\isa\x64\lower.isle line 4780.
                                return v3313;
                            }
                            I32X4 => {
                                let v3293 = C::use_avx2(ctx);
                                if v3293 == true {
                                    let v574 = constructor_put_in_gpr(ctx, v573);
                                    let v3287 = constructor_bitcast_gpr_to_xmm(ctx, 0x20_u8, v574);
                                    let v3294 = &C::xmm_to_xmm_mem(ctx, v3287);
                                    let v3330 = constructor_x64_vpbroadcastd(ctx, v3294);
                                    let v3331 = constructor_output_xmm(ctx, v3330);
                                    let v3332 = Some(v3331);
                                    // Rule at src\isa\x64\lower.isle line 4797.
                                    return v3332;
                                }
                                let v574 = constructor_put_in_gpr(ctx, v573);
                                let v3287 = constructor_bitcast_gpr_to_xmm(ctx, 0x20_u8, v574);
                                let v3294 = &C::xmm_to_xmm_mem(ctx, v3287);
                                let v3327 = constructor_x64_pshufd(ctx, v3294, 0x0_u8);
                                let v3328 = constructor_output_xmm(ctx, v3327);
                                let v3329 = Some(v3328);
                                // Rule at src\isa\x64\lower.isle line 4795.
                                return v3329;
                            }
                            I64X2 => {
                                let v574 = constructor_put_in_gpr(ctx, v573);
                                let v3349 = constructor_bitcast_gpr_to_xmm(ctx, 0x40_u8, v574);
                                let v3350 = &C::xmm_to_xmm_mem(ctx, v3349);
                                let v3352 = constructor_x64_pshufd(ctx, v3350, 0x44_u8);
                                let v3353 = constructor_output_xmm(ctx, v3352);
                                let v3354 = Some(v3353);
                                // Rule at src\isa\x64\lower.isle line 4830.
                                return v3354;
                            }
                            F32X4 => {
                                let v3293 = C::use_avx2(ctx);
                                if v3293 == true {
                                    let v765 = &C::put_in_xmm_mem(ctx, v573);
                                    let v3337 = constructor_x64_vbroadcastss(ctx, v765);
                                    let v3338 = constructor_output_xmm(ctx, v3337);
                                    let v3339 = Some(v3338);
                                    // Rule at src\isa\x64\lower.isle line 4807.
                                    return v3339;
                                }
                                let v769 = constructor_put_in_xmm(ctx, v573);
                                let v3333 = constructor_put_in_xmm(ctx, v573);
                                let v591 = &C::put_in_xmm_mem(ctx, v573);
                                let v3334 = constructor_x64_shufps(ctx, v3333, v591, 0x0_u8);
                                let v3335 = constructor_output_xmm(ctx, v3334);
                                let v3336 = Some(v3335);
                                // Rule at src\isa\x64\lower.isle line 4804.
                                return v3336;
                            }
                            F64X2 => {
                                let v765 = &C::put_in_xmm_mem(ctx, v573);
                                let v3355 = constructor_x64_pshufd(ctx, v765, 0x44_u8);
                                let v3356 = constructor_output_xmm(ctx, v3355);
                                let v3357 = Some(v3356);
                                // Rule at src\isa\x64\lower.isle line 4832.
                                return v3357;
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::SetPinnedReg => {
                    let v574 = constructor_put_in_gpr(ctx, v573);
                    let v3056 = &constructor_write_pinned_gpr(ctx, v574);
                    let v3057 = constructor_side_effect(ctx, v3056);
                    let v3058 = Some(v3057);
                    // Rule at src\isa\x64\lower.isle line 4475.
                    return v3058;
                }
                &Opcode::VanyTrue => {
                    let v670 = C::use_sse41(ctx);
                    if v670 == true {
                        let v769 = constructor_put_in_xmm(ctx, v573);
                        let v1867 = &C::xmm_to_xmm_mem(ctx, v769);
                        let v3361 = &constructor_x64_ptest(ctx, v769, v1867);
                        let v3362 = &constructor_x64_setcc(ctx, &CC::NZ);
                        let v3363 = constructor_with_flags(ctx, v3361, v3362);
                        let v3364 = C::output(ctx, v3363);
                        let v3365 = Some(v3364);
                        // Rule at src\isa\x64\lower.isle line 4840.
                        return v3365;
                    }
                    let v3366 = &constructor_emit_vany_true(ctx, v573);
                    let v3367 = constructor_lower_icmp_bool(ctx, v3366);
                    let v3368 = C::output(ctx, v3367);
                    let v3369 = Some(v3368);
                    // Rule at src\isa\x64\lower.isle line 4849.
                    return v3369;
                }
                &Opcode::VallTrue => {
                    let v3370 = &constructor_emit_vall_true(ctx, v573);
                    let v3371 = constructor_lower_icmp_bool(ctx, v3370);
                    let v3372 = C::output(ctx, v3371);
                    let v3373 = Some(v3372);
                    // Rule at src\isa\x64\lower.isle line 4863.
                    return v3373;
                }
                &Opcode::VhighBits => {
                    let v898 = C::value_type(ctx, v573);
                    let v3374 = C::multi_lane(ctx, v898);
                    if let Some(v3375) = v3374 {
                        match v3375.0 {
                            0x8_u32 => {
                                if v3375.1 == 0x10_u32 {
                                    let v769 = constructor_put_in_xmm(ctx, v573);
                                    let v3379 = constructor_x64_pmovmskb(ctx, &OperandSize::Size32, v769);
                                    let v3380 = constructor_output_gpr(ctx, v3379);
                                    let v3381 = Some(v3380);
                                    // Rule at src\isa\x64\lower.isle line 4894.
                                    return v3381;
                                }
                            }
                            0x10_u32 => {
                                if v3375.1 == 0x8_u32 {
                                    let v769 = constructor_put_in_xmm(ctx, v573);
                                    let v1867 = &C::xmm_to_xmm_mem(ctx, v769);
                                    let v3388 = constructor_x64_packsswb(ctx, v769, v1867);
                                    let v3389 = constructor_x64_pmovmskb(ctx, &OperandSize::Size32, v3388);
                                    let v1721 = Imm8Reg::Imm8 {
                                        imm: 0x8_u8,
                                    };
                                    let v2996 = &C::imm8_reg_to_imm8_gpr(ctx, &v1721);
                                    let v3390 = constructor_x64_shr(ctx, I64, v3389, v2996);
                                    let v3391 = constructor_output_gpr(ctx, v3390);
                                    let v3392 = Some(v3391);
                                    // Rule at src\isa\x64\lower.isle line 4909.
                                    return v3392;
                                }
                            }
                            0x20_u32 => {
                                if v3375.1 == 0x4_u32 {
                                    let v769 = constructor_put_in_xmm(ctx, v573);
                                    let v3382 = constructor_x64_movmskps(ctx, &OperandSize::Size32, v769);
                                    let v3383 = constructor_output_gpr(ctx, v3382);
                                    let v3384 = Some(v3383);
                                    // Rule at src\isa\x64\lower.isle line 4897.
                                    return v3384;
                                }
                            }
                            0x40_u32 => {
                                if v3375.1 == 0x2_u32 {
                                    let v769 = constructor_put_in_xmm(ctx, v573);
                                    let v3385 = constructor_x64_movmskpd(ctx, &OperandSize::Size32, v769);
                                    let v3386 = constructor_output_gpr(ctx, v3385);
                                    let v3387 = Some(v3386);
                                    // Rule at src\isa\x64\lower.isle line 4900.
                                    return v3387;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Ineg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8X16 => {
                                let v589 = constructor_imm(ctx, I8X16, 0x0_u64);
                                let v590 = C::xmm_new(ctx, v589);
                                let v591 = &C::put_in_xmm_mem(ctx, v573);
                                let v592 = constructor_x64_psubb(ctx, v590, v591);
                                let v593 = constructor_output_xmm(ctx, v592);
                                let v594 = Some(v593);
                                // Rule at src\isa\x64\lower.isle line 1009.
                                return v594;
                            }
                            I16X8 => {
                                let v596 = constructor_imm(ctx, I16X8, 0x0_u64);
                                let v597 = C::xmm_new(ctx, v596);
                                let v591 = &C::put_in_xmm_mem(ctx, v573);
                                let v598 = constructor_x64_psubw(ctx, v597, v591);
                                let v599 = constructor_output_xmm(ctx, v598);
                                let v600 = Some(v599);
                                // Rule at src\isa\x64\lower.isle line 1012.
                                return v600;
                            }
                            I32X4 => {
                                let v602 = constructor_imm(ctx, I32X4, 0x0_u64);
                                let v603 = C::xmm_new(ctx, v602);
                                let v591 = &C::put_in_xmm_mem(ctx, v573);
                                let v604 = constructor_x64_psubd(ctx, v603, v591);
                                let v605 = constructor_output_xmm(ctx, v604);
                                let v606 = Some(v605);
                                // Rule at src\isa\x64\lower.isle line 1015.
                                return v606;
                            }
                            I64X2 => {
                                let v608 = constructor_imm(ctx, I64X2, 0x0_u64);
                                let v609 = C::xmm_new(ctx, v608);
                                let v591 = &C::put_in_xmm_mem(ctx, v573);
                                let v610 = constructor_x64_psubq(ctx, v609, v591);
                                let v611 = constructor_output_xmm(ctx, v610);
                                let v612 = Some(v611);
                                // Rule at src\isa\x64\lower.isle line 1018.
                                return v612;
                            }
                            _ => {}
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v574 = constructor_put_in_gpr(ctx, v573);
                            let v575 = constructor_x64_neg(ctx, v5, v574);
                            let v576 = constructor_output_gpr(ctx, v575);
                            let v577 = Some(v576);
                            // Rule at src\isa\x64\lower.isle line 995.
                            return v577;
                        }
                        if v3 == I128 {
                            let v578 = C::put_in_regs(ctx, v573);
                            let v579 = constructor_value_regs_get_gpr(ctx, v578, 0x0_usize);
                            let v580 = constructor_value_regs_get_gpr(ctx, v578, 0x1_usize);
                            let v581 = &constructor_x64_neg_paired(ctx, I64, v579);
                            let v582 = constructor_imm(ctx, I64, 0x0_u64);
                            let v583 = C::gpr_new(ctx, v582);
                            let v584 = &C::gpr_to_gpr_mem_imm(ctx, v580);
                            let v585 = &constructor_x64_sbb_paired(ctx, I64, v583, v584);
                            let v586 = constructor_with_flags(ctx, v581, v585);
                            let v587 = C::output(ctx, v586);
                            let v588 = Some(v587);
                            // Rule at src\isa\x64\lower.isle line 998.
                            return v588;
                        }
                    }
                }
                &Opcode::Iabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I128 => {
                                let v578 = C::put_in_regs(ctx, v573);
                                let v579 = constructor_value_regs_get_gpr(ctx, v578, 0x0_usize);
                                let v580 = constructor_value_regs_get_gpr(ctx, v578, 0x1_usize);
                                let v581 = &constructor_x64_neg_paired(ctx, I64, v579);
                                let v582 = constructor_imm(ctx, I64, 0x0_u64);
                                let v831 = &constructor_reg_to_gpr_mem_imm(ctx, v582);
                                let v832 = &constructor_x64_adc_paired(ctx, I64, v580, v831);
                                let v833 = constructor_with_flags(ctx, v581, v832);
                                let v834 = C::value_regs_get(ctx, v833, 0x1_usize);
                                let v835 = C::gpr_new(ctx, v834);
                                let v836 = &constructor_x64_neg_paired(ctx, I64, v835);
                                let v837 = &constructor_produces_flags_ignore(ctx, v836);
                                let v838 = &C::gpr_to_gpr_mem(ctx, v579);
                                let v839 = C::value_regs_get(ctx, v833, 0x0_usize);
                                let v840 = C::gpr_new(ctx, v839);
                                let v841 = &constructor_cmove(ctx, I64, &CC::S, v838, v840);
                                let v842 = &C::gpr_to_gpr_mem(ctx, v580);
                                let v843 = constructor_produces_flags_get_reg(ctx, v836);
                                let v844 = C::gpr_new(ctx, v843);
                                let v845 = &constructor_cmove(ctx, I64, &CC::S, v842, v844);
                                let v846 = &constructor_consumes_flags_concat(ctx, v841, v845);
                                let v847 = constructor_with_flags(ctx, v837, v846);
                                let v848 = C::output(ctx, v847);
                                let v849 = Some(v848);
                                // Rule at src\isa\x64\lower.isle line 1369.
                                return v849;
                            }
                            I8X16 => {
                                let v764 = C::use_ssse3(ctx);
                                if v764 == true {
                                    let v765 = &C::put_in_xmm_mem(ctx, v573);
                                    let v766 = constructor_x64_pabsb(ctx, v765);
                                    let v767 = constructor_output_xmm(ctx, v766);
                                    let v768 = Some(v767);
                                    // Rule at src\isa\x64\lower.isle line 1285.
                                    return v768;
                                }
                                let v769 = constructor_put_in_xmm(ctx, v573);
                                let v770 = constructor_xmm_zero(ctx, I8X16);
                                let v771 = &C::xmm_to_xmm_mem(ctx, v769);
                                let v772 = constructor_x64_psubb(ctx, v770, v771);
                                let v773 = &C::xmm_to_xmm_mem(ctx, v772);
                                let v774 = constructor_x64_pminub(ctx, v769, v773);
                                let v775 = constructor_output_xmm(ctx, v774);
                                let v776 = Some(v775);
                                // Rule at src\isa\x64\lower.isle line 1292.
                                return v776;
                            }
                            I16X8 => {
                                let v764 = C::use_ssse3(ctx);
                                if v764 == true {
                                    let v765 = &C::put_in_xmm_mem(ctx, v573);
                                    let v777 = constructor_x64_pabsw(ctx, v765);
                                    let v778 = constructor_output_xmm(ctx, v777);
                                    let v779 = Some(v778);
                                    // Rule at src\isa\x64\lower.isle line 1299.
                                    return v779;
                                }
                                let v769 = constructor_put_in_xmm(ctx, v573);
                                let v780 = constructor_xmm_zero(ctx, I16X8);
                                let v771 = &C::xmm_to_xmm_mem(ctx, v769);
                                let v781 = constructor_x64_psubw(ctx, v780, v771);
                                let v782 = &C::xmm_to_xmm_mem(ctx, v781);
                                let v783 = constructor_x64_pmaxsw(ctx, v769, v782);
                                let v784 = constructor_output_xmm(ctx, v783);
                                let v785 = Some(v784);
                                // Rule at src\isa\x64\lower.isle line 1303.
                                return v785;
                            }
                            I32X4 => {
                                let v764 = C::use_ssse3(ctx);
                                if v764 == true {
                                    let v765 = &C::put_in_xmm_mem(ctx, v573);
                                    let v786 = constructor_x64_pabsd(ctx, v765);
                                    let v787 = constructor_output_xmm(ctx, v786);
                                    let v788 = Some(v787);
                                    // Rule at src\isa\x64\lower.isle line 1310.
                                    return v788;
                                }
                                let v769 = constructor_put_in_xmm(ctx, v573);
                                let v790 = &C::xmi_imm(ctx, 0x1f_u32);
                                let v791 = constructor_x64_psrad(ctx, v769, v790);
                                let v792 = &C::xmm_to_xmm_mem(ctx, v791);
                                let v793 = constructor_x64_pxor(ctx, v769, v792);
                                let v794 = &C::xmm_to_xmm_mem(ctx, v791);
                                let v795 = constructor_x64_psubd(ctx, v793, v794);
                                let v796 = constructor_output_xmm(ctx, v795);
                                let v797 = Some(v796);
                                // Rule at src\isa\x64\lower.isle line 1320.
                                return v797;
                            }
                            I64X2 => {
                                let v516 = C::use_avx512vl(ctx);
                                if v516 == true {
                                    let v517 = C::use_avx512f(ctx);
                                    if v517 == true {
                                        let v765 = &C::put_in_xmm_mem(ctx, v573);
                                        let v798 = constructor_x64_vpabsq(ctx, v765);
                                        let v799 = constructor_output_xmm(ctx, v798);
                                        let v800 = Some(v799);
                                        // Rule at src\isa\x64\lower.isle line 1329.
                                        return v800;
                                    }
                                }
                                let v670 = C::use_sse41(ctx);
                                if v670 == true {
                                    let v769 = constructor_put_in_xmm(ctx, v573);
                                    let v801 = constructor_imm(ctx, I64X2, 0x0_u64);
                                    let v802 = C::xmm_new(ctx, v801);
                                    let v803 = &C::xmm_to_xmm_mem(ctx, v769);
                                    let v804 = constructor_x64_psubq(ctx, v802, v803);
                                    let v805 = &C::xmm_to_xmm_mem(ctx, v769);
                                    let v806 = constructor_x64_blendvpd(ctx, v804, v805, v804);
                                    let v807 = constructor_output_xmm(ctx, v806);
                                    let v808 = Some(v807);
                                    // Rule at src\isa\x64\lower.isle line 1338.
                                    return v808;
                                }
                                let v769 = constructor_put_in_xmm(ctx, v573);
                                let v809 = RegMemImm::Imm {
                                    simm32: 0x1f_u32,
                                };
                                let v810 = &C::xmm_mem_imm_new(ctx, &v809);
                                let v811 = constructor_x64_psrad(ctx, v769, v810);
                                let v812 = &C::xmm_to_xmm_mem(ctx, v811);
                                let v814 = constructor_x64_pshufd(ctx, v812, 0xf5_u8);
                                let v815 = &C::xmm_to_xmm_mem(ctx, v814);
                                let v816 = constructor_x64_pxor(ctx, v769, v815);
                                let v817 = &C::xmm_to_xmm_mem(ctx, v814);
                                let v818 = constructor_x64_psubq(ctx, v816, v817);
                                let v819 = constructor_output_xmm(ctx, v818);
                                let v820 = Some(v819);
                                // Rule at src\isa\x64\lower.isle line 1347.
                                return v820;
                            }
                            _ => {}
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v574 = constructor_put_in_gpr(ctx, v573);
                            let v821 = &constructor_x64_neg_paired(ctx, v5, v574);
                            let v822 = constructor_produces_flags_get_reg(ctx, v821);
                            let v823 = C::gpr_new(ctx, v822);
                            let v825 = &C::gpr_to_gpr_mem(ctx, v574);
                            let v826 = &constructor_cmove(ctx, v5, &CC::S, v825, v823);
                            let v827 = &constructor_produces_flags_ignore(ctx, v821);
                            let v828 = constructor_with_flags_reg(ctx, v827, v826);
                            let v829 = constructor_output_reg(ctx, v828);
                            let v830 = Some(v829);
                            // Rule at src\isa\x64\lower.isle line 1356.
                            return v830;
                        }
                    }
                }
                &Opcode::Bnot => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v905 = constructor_i128_not(ctx, v573);
                            let v906 = C::output(ctx, v905);
                            let v907 = Some(v906);
                            // Rule at src\isa\x64\lower.isle line 1486.
                            return v907;
                        }
                        let v89 = C::multi_lane(ctx, v3);
                        if let Some(v90) = v89 {
                            let v769 = constructor_put_in_xmm(ctx, v573);
                            let v862 = constructor_vector_all_ones(ctx);
                            let v908 = &C::xmm_to_xmm_mem(ctx, v862);
                            let v912 = constructor_x64_xor_vector(ctx, v3, v769, v908);
                            let v913 = constructor_output_xmm(ctx, v912);
                            let v914 = Some(v913);
                            // Rule at src\isa\x64\lower.isle line 1496.
                            return v914;
                        }
                        let v257 = C::ty_int_ref_scalar_64(ctx, v3);
                        if let Some(v258) = v257 {
                            let v574 = constructor_put_in_gpr(ctx, v573);
                            let v902 = constructor_x64_not(ctx, v3, v574);
                            let v903 = constructor_output_gpr(ctx, v902);
                            let v904 = Some(v903);
                            // Rule at src\isa\x64\lower.isle line 1471.
                            return v904;
                        }
                        let v270 = C::ty_scalar_float(ctx, v3);
                        if let Some(v271) = v270 {
                            let v769 = constructor_put_in_xmm(ctx, v573);
                            let v862 = constructor_vector_all_ones(ctx);
                            let v908 = &C::xmm_to_xmm_mem(ctx, v862);
                            let v909 = constructor_x64_xor_vector(ctx, v271, v769, v908);
                            let v910 = constructor_output_xmm(ctx, v909);
                            let v911 = Some(v910);
                            // Rule at src\isa\x64\lower.isle line 1491.
                            return v911;
                        }
                    }
                }
                &Opcode::Bitrev => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v574 = constructor_put_in_gpr(ctx, v573);
                                let v1699 = constructor_do_bitrev8(ctx, I32, v574);
                                let v1700 = constructor_output_gpr(ctx, v1699);
                                let v1701 = Some(v1700);
                                // Rule at src\isa\x64\lower.isle line 2465.
                                return v1701;
                            }
                            I16 => {
                                let v574 = constructor_put_in_gpr(ctx, v573);
                                let v1702 = constructor_do_bitrev16(ctx, I32, v574);
                                let v1703 = constructor_output_gpr(ctx, v1702);
                                let v1704 = Some(v1703);
                                // Rule at src\isa\x64\lower.isle line 2468.
                                return v1704;
                            }
                            I32 => {
                                let v574 = constructor_put_in_gpr(ctx, v573);
                                let v1705 = constructor_do_bitrev32(ctx, I32, v574);
                                let v1706 = constructor_output_gpr(ctx, v1705);
                                let v1707 = Some(v1706);
                                // Rule at src\isa\x64\lower.isle line 2471.
                                return v1707;
                            }
                            I64 => {
                                let v574 = constructor_put_in_gpr(ctx, v573);
                                let v1708 = constructor_do_bitrev64(ctx, I64, v574);
                                let v1709 = constructor_output_gpr(ctx, v1708);
                                let v1710 = Some(v1709);
                                // Rule at src\isa\x64\lower.isle line 2474.
                                return v1710;
                            }
                            I128 => {
                                let v578 = C::put_in_regs(ctx, v573);
                                let v1574 = constructor_value_regs_get_gpr(ctx, v578, 0x1_usize);
                                let v1711 = constructor_do_bitrev64(ctx, I64, v1574);
                                let v1712 = C::gpr_to_reg(ctx, v1711);
                                let v1713 = C::put_in_regs(ctx, v573);
                                let v1714 = constructor_value_regs_get_gpr(ctx, v1713, 0x0_usize);
                                let v1715 = constructor_do_bitrev64(ctx, I64, v1714);
                                let v1716 = C::gpr_to_reg(ctx, v1715);
                                let v1717 = C::value_regs(ctx, v1712, v1716);
                                let v1718 = C::output(ctx, v1717);
                                let v1719 = Some(v1718);
                                // Rule at src\isa\x64\lower.isle line 2477.
                                return v1719;
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Clz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v67 = C::ty_32_or_64(ctx, v3);
                        if let Some(v68) = v67 {
                            let v574 = constructor_put_in_gpr(ctx, v573);
                            let v1558 = constructor_do_clz(ctx, v68, v68, v574);
                            let v1559 = constructor_output_gpr(ctx, v1558);
                            let v1560 = Some(v1559);
                            // Rule at src\isa\x64\lower.isle line 2238.
                            return v1560;
                        }
                        let v1561 = C::ty_8_or_16(ctx, v3);
                        if let Some(v1562) = v1561 {
                            let v1563 = constructor_extend_to_gpr(ctx, v573, I64, &ExtendKind::Zero);
                            let v1564 = constructor_do_clz(ctx, I64, I64, v1563);
                            let v1566 = C::ty_bits(ctx, v1562);
                            let v1567 = C::u8_as_u32(ctx, v1566);
                            let v1568 = C::u32_sub(ctx, 0x40_u32, v1567);
                            let v1569 = RegMemImm::Imm {
                                simm32: v1568,
                            };
                            let v1570 = &C::gpr_mem_imm_new(ctx, &v1569);
                            let v1571 = constructor_x64_sub(ctx, I64, v1564, v1570);
                            let v1572 = constructor_output_gpr(ctx, v1571);
                            let v1573 = Some(v1572);
                            // Rule at src\isa\x64\lower.isle line 2241.
                            return v1573;
                        }
                        if v3 == I128 {
                            let v578 = C::put_in_regs(ctx, v573);
                            let v1574 = constructor_value_regs_get_gpr(ctx, v578, 0x1_usize);
                            let v1575 = constructor_do_clz(ctx, I64, I64, v1574);
                            let v1576 = C::put_in_regs(ctx, v573);
                            let v1577 = constructor_value_regs_get_gpr(ctx, v1576, 0x0_usize);
                            let v1578 = constructor_do_clz(ctx, I64, I64, v1577);
                            let v1579 = RegMemImm::Imm {
                                simm32: 0x40_u32,
                            };
                            let v1580 = &C::gpr_mem_imm_new(ctx, &v1579);
                            let v1581 = constructor_x64_add(ctx, I64, v1578, v1580);
                            let v1583 = &constructor_x64_cmp_imm(ctx, &OperandSize::Size64, v1575, 0x40_u32);
                            let v1584 = &C::gpr_to_gpr_mem(ctx, v1575);
                            let v1585 = &constructor_cmove(ctx, I64, &CC::NZ, v1584, v1581);
                            let v1586 = constructor_with_flags_reg(ctx, v1583, v1585);
                            let v1587 = C::gpr_new(ctx, v1586);
                            let v1588 = C::gpr_to_reg(ctx, v1587);
                            let v1589 = constructor_imm(ctx, I64, 0x0_u64);
                            let v1590 = C::value_regs(ctx, v1588, v1589);
                            let v1591 = C::output(ctx, v1590);
                            let v1592 = Some(v1591);
                            // Rule at src\isa\x64\lower.isle line 2247.
                            return v1592;
                        }
                    }
                }
                &Opcode::Ctz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v67 = C::ty_32_or_64(ctx, v3);
                        if let Some(v68) = v67 {
                            let v574 = constructor_put_in_gpr(ctx, v573);
                            let v1593 = constructor_do_ctz(ctx, v68, v68, v574);
                            let v1594 = constructor_output_gpr(ctx, v1593);
                            let v1595 = Some(v1594);
                            // Rule at src\isa\x64\lower.isle line 2278.
                            return v1595;
                        }
                        let v1561 = C::ty_8_or_16(ctx, v3);
                        if let Some(v1562) = v1561 {
                            let v1596 = constructor_extend_to_gpr(ctx, v573, I32, &ExtendKind::Zero);
                            let v1566 = C::ty_bits(ctx, v1562);
                            let v1567 = C::u8_as_u32(ctx, v1566);
                            let v1597 = C::u32_shl(ctx, 0x1_u32, v1567);
                            let v1598 = RegMemImm::Imm {
                                simm32: v1597,
                            };
                            let v1599 = &C::gpr_mem_imm_new(ctx, &v1598);
                            let v1600 = constructor_x64_or(ctx, I32, v1596, v1599);
                            let v1601 = constructor_do_ctz(ctx, I32, v1562, v1600);
                            let v1602 = constructor_output_gpr(ctx, v1601);
                            let v1603 = Some(v1602);
                            // Rule at src\isa\x64\lower.isle line 2281.
                            return v1603;
                        }
                        if v3 == I128 {
                            let v578 = C::put_in_regs(ctx, v573);
                            let v579 = constructor_value_regs_get_gpr(ctx, v578, 0x0_usize);
                            let v1604 = constructor_do_ctz(ctx, I64, I64, v579);
                            let v1576 = C::put_in_regs(ctx, v573);
                            let v1605 = constructor_value_regs_get_gpr(ctx, v1576, 0x1_usize);
                            let v1606 = constructor_do_ctz(ctx, I64, I64, v1605);
                            let v1579 = RegMemImm::Imm {
                                simm32: 0x40_u32,
                            };
                            let v1580 = &C::gpr_mem_imm_new(ctx, &v1579);
                            let v1607 = constructor_x64_add(ctx, I64, v1606, v1580);
                            let v1608 = &constructor_x64_cmp_imm(ctx, &OperandSize::Size64, v1604, 0x40_u32);
                            let v1609 = &C::gpr_to_gpr_mem(ctx, v1607);
                            let v1610 = &constructor_cmove(ctx, I64, &CC::Z, v1609, v1604);
                            let v1611 = constructor_with_flags_reg(ctx, v1608, v1610);
                            let v1612 = C::gpr_new(ctx, v1611);
                            let v1613 = C::gpr_to_reg(ctx, v1612);
                            let v1589 = constructor_imm(ctx, I64, 0x0_u64);
                            let v1614 = C::value_regs(ctx, v1613, v1589);
                            let v1615 = C::output(ctx, v1614);
                            let v1616 = Some(v1615);
                            // Rule at src\isa\x64\lower.isle line 2286.
                            return v1616;
                        }
                    }
                }
                &Opcode::Bswap => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I16 => {
                                let v574 = constructor_put_in_gpr(ctx, v573);
                                let v1721 = Imm8Reg::Imm8 {
                                    imm: 0x8_u8,
                                };
                                let v1722 = &C::imm8_reg_to_imm8_gpr(ctx, &v1721);
                                let v1723 = constructor_x64_rotl(ctx, I16, v574, v1722);
                                let v1724 = constructor_output_gpr(ctx, v1723);
                                let v1725 = Some(v1724);
                                // Rule at src\isa\x64\lower.isle line 2544.
                                return v1725;
                            }
                            I32 => {
                                let v574 = constructor_put_in_gpr(ctx, v573);
                                let v1726 = constructor_x64_bswap(ctx, I32, v574);
                                let v1727 = constructor_output_gpr(ctx, v1726);
                                let v1728 = Some(v1727);
                                // Rule at src\isa\x64\lower.isle line 2547.
                                return v1728;
                            }
                            I64 => {
                                let v574 = constructor_put_in_gpr(ctx, v573);
                                let v1729 = constructor_x64_bswap(ctx, I64, v574);
                                let v1730 = constructor_output_gpr(ctx, v1729);
                                let v1731 = Some(v1730);
                                // Rule at src\isa\x64\lower.isle line 2550.
                                return v1731;
                            }
                            I128 => {
                                let v578 = C::put_in_regs(ctx, v573);
                                let v1574 = constructor_value_regs_get_gpr(ctx, v578, 0x1_usize);
                                let v1732 = constructor_x64_bswap(ctx, I64, v1574);
                                let v1733 = C::gpr_to_reg(ctx, v1732);
                                let v1713 = C::put_in_regs(ctx, v573);
                                let v1714 = constructor_value_regs_get_gpr(ctx, v1713, 0x0_usize);
                                let v1734 = constructor_x64_bswap(ctx, I64, v1714);
                                let v1735 = C::gpr_to_reg(ctx, v1734);
                                let v1736 = C::value_regs(ctx, v1733, v1735);
                                let v1737 = C::output(ctx, v1736);
                                let v1738 = Some(v1737);
                                // Rule at src\isa\x64\lower.isle line 2553.
                                return v1738;
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Popcnt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1617 = C::use_popcnt(ctx);
                        if v1617 == true {
                            let v3 = C::value_type(ctx, v2);
                            let v67 = C::ty_32_or_64(ctx, v3);
                            if let Some(v68) = v67 {
                                let v574 = constructor_put_in_gpr(ctx, v573);
                                let v1618 = constructor_x64_popcnt(ctx, v68, v574);
                                let v1619 = constructor_output_gpr(ctx, v1618);
                                let v1620 = Some(v1619);
                                // Rule at src\isa\x64\lower.isle line 2312.
                                return v1620;
                            }
                            let v1561 = C::ty_8_or_16(ctx, v3);
                            if let Some(v1562) = v1561 {
                                let v1596 = constructor_extend_to_gpr(ctx, v573, I32, &ExtendKind::Zero);
                                let v1621 = constructor_x64_popcnt(ctx, I32, v1596);
                                let v1622 = constructor_output_gpr(ctx, v1621);
                                let v1623 = Some(v1622);
                                // Rule at src\isa\x64\lower.isle line 2316.
                                return v1623;
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I128 => {
                                if v1617 == true {
                                    let v578 = C::put_in_regs(ctx, v573);
                                    let v579 = constructor_value_regs_get_gpr(ctx, v578, 0x0_usize);
                                    let v1624 = constructor_x64_popcnt(ctx, I64, v579);
                                    let v1576 = C::put_in_regs(ctx, v573);
                                    let v1605 = constructor_value_regs_get_gpr(ctx, v1576, 0x1_usize);
                                    let v1625 = constructor_x64_popcnt(ctx, I64, v1605);
                                    let v1626 = &C::gpr_to_gpr_mem_imm(ctx, v1625);
                                    let v1627 = constructor_x64_add(ctx, I64, v1624, v1626);
                                    let v1628 = C::gpr_to_reg(ctx, v1627);
                                    let v1629 = constructor_imm(ctx, I64, 0x0_u64);
                                    let v1630 = C::value_regs(ctx, v1628, v1629);
                                    let v1631 = C::output(ctx, v1630);
                                    let v1632 = Some(v1631);
                                    // Rule at src\isa\x64\lower.isle line 2320.
                                    return v1632;
                                }
                                let v578 = C::put_in_regs(ctx, v573);
                                let v579 = constructor_value_regs_get_gpr(ctx, v578, 0x0_usize);
                                let v1639 = constructor_do_popcnt(ctx, I64, v579);
                                let v1576 = C::put_in_regs(ctx, v573);
                                let v1605 = constructor_value_regs_get_gpr(ctx, v1576, 0x1_usize);
                                let v1640 = constructor_do_popcnt(ctx, I64, v1605);
                                let v1641 = &C::gpr_to_gpr_mem_imm(ctx, v1640);
                                let v1642 = constructor_x64_add(ctx, I64, v1639, v1641);
                                let v1643 = C::gpr_to_reg(ctx, v1642);
                                let v1629 = constructor_imm(ctx, I64, 0x0_u64);
                                let v1644 = C::value_regs(ctx, v1643, v1629);
                                let v1645 = C::output(ctx, v1644);
                                let v1646 = Some(v1645);
                                // Rule at src\isa\x64\lower.isle line 2336.
                                return v1646;
                            }
                            I8X16 => {
                                let v516 = C::use_avx512vl(ctx);
                                if v516 == true {
                                    let v1647 = C::use_avx512bitalg(ctx);
                                    if v1647 == true {
                                        let v765 = &C::put_in_xmm_mem(ctx, v573);
                                        let v1648 = constructor_x64_vpopcntb(ctx, v765);
                                        let v1649 = constructor_output_xmm(ctx, v1648);
                                        let v1650 = Some(v1649);
                                        // Rule at src\isa\x64\lower.isle line 2409.
                                        return v1650;
                                    }
                                }
                                let v764 = C::use_ssse3(ctx);
                                if v764 == true {
                                    let v1652 = C::emit_u128_le_const(ctx, 0xf0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f_u128);
                                    let v1653 = &constructor_const_to_xmm_mem(ctx, v1652);
                                    let v1654 = constructor_put_in_xmm(ctx, v573);
                                    let v1655 = constructor_sse_and(ctx, I8X16, v1654, v1653);
                                    let v1656 = constructor_put_in_xmm(ctx, v573);
                                    let v1658 = &C::xmi_imm(ctx, 0x4_u32);
                                    let v1659 = constructor_x64_psrlw(ctx, v1656, v1658);
                                    let v1660 = constructor_sse_and(ctx, I8X16, v1659, v1653);
                                    let v1662 = C::emit_u128_le_const(ctx, 0x4030302030202010302020102010100_u128);
                                    let v1663 = constructor_x64_xmm_load_const(ctx, I8X16, v1662);
                                    let v1664 = &C::xmm_to_xmm_mem(ctx, v1655);
                                    let v1665 = constructor_x64_pshufb(ctx, v1663, v1664);
                                    let v1666 = &C::xmm_to_xmm_mem(ctx, v1660);
                                    let v1667 = constructor_x64_pshufb(ctx, v1663, v1666);
                                    let v1668 = &C::xmm_to_xmm_mem(ctx, v1667);
                                    let v1669 = constructor_x64_paddb(ctx, v1665, v1668);
                                    let v1670 = constructor_output_xmm(ctx, v1669);
                                    let v1671 = Some(v1670);
                                    // Rule at src\isa\x64\lower.isle line 2435.
                                    return v1671;
                                }
                                let v1673 = C::emit_u128_le_const(ctx, 0x77777777777777777777777777777777_u128);
                                let v1674 = &constructor_const_to_xmm_mem(ctx, v1673);
                                let v1654 = constructor_put_in_xmm(ctx, v573);
                                let v1675 = &C::xmi_imm(ctx, 0x1_u32);
                                let v1676 = constructor_x64_psrlq(ctx, v1654, v1675);
                                let v1677 = constructor_x64_pand(ctx, v1676, v1674);
                                let v1678 = &C::xmm_to_xmm_mem(ctx, v1677);
                                let v1679 = constructor_x64_psubb(ctx, v1654, v1678);
                                let v1680 = &C::xmi_imm(ctx, 0x1_u32);
                                let v1681 = constructor_x64_psrlq(ctx, v1677, v1680);
                                let v1682 = constructor_x64_pand(ctx, v1681, v1674);
                                let v1683 = &C::xmm_to_xmm_mem(ctx, v1682);
                                let v1684 = constructor_x64_psubb(ctx, v1679, v1683);
                                let v1685 = &C::xmi_imm(ctx, 0x1_u32);
                                let v1686 = constructor_x64_psrlq(ctx, v1682, v1685);
                                let v1687 = constructor_x64_pand(ctx, v1686, v1674);
                                let v1688 = &C::xmm_to_xmm_mem(ctx, v1687);
                                let v1689 = constructor_x64_psubb(ctx, v1684, v1688);
                                let v1690 = &C::xmi_imm(ctx, 0x4_u32);
                                let v1691 = constructor_x64_psrlw(ctx, v1689, v1690);
                                let v1692 = &C::xmm_to_xmm_mem(ctx, v1691);
                                let v1693 = constructor_x64_paddb(ctx, v1689, v1692);
                                let v1694 = C::emit_u128_le_const(ctx, 0xf0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f_u128);
                                let v1695 = &constructor_const_to_xmm_mem(ctx, v1694);
                                let v1696 = constructor_x64_pand(ctx, v1693, v1695);
                                let v1697 = constructor_output_xmm(ctx, v1696);
                                let v1698 = Some(v1697);
                                // Rule at src\isa\x64\lower.isle line 2451.
                                return v1698;
                            }
                            _ => {}
                        }
                        let v67 = C::ty_32_or_64(ctx, v3);
                        if let Some(v68) = v67 {
                            let v574 = constructor_put_in_gpr(ctx, v573);
                            let v1633 = constructor_do_popcnt(ctx, v68, v574);
                            let v1634 = constructor_output_gpr(ctx, v1633);
                            let v1635 = Some(v1634);
                            // Rule at src\isa\x64\lower.isle line 2326.
                            return v1635;
                        }
                        let v1561 = C::ty_8_or_16(ctx, v3);
                        if let Some(v1562) = v1561 {
                            let v1596 = constructor_extend_to_gpr(ctx, v573, I32, &ExtendKind::Zero);
                            let v1636 = constructor_do_popcnt(ctx, I32, v1596);
                            let v1637 = constructor_output_gpr(ctx, v1636);
                            let v1638 = Some(v1637);
                            // Rule at src\isa\x64\lower.isle line 2331.
                            return v1638;
                        }
                    }
                }
                &Opcode::Sqrt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v1848 = constructor_xmm_zero(ctx, F32X4);
                                let v1849 = &C::put_in_xmm_mem(ctx, v573);
                                let v1850 = constructor_x64_sqrtss(ctx, v1848, v1849);
                                let v1851 = constructor_output_xmm(ctx, v1850);
                                let v1852 = Some(v1851);
                                // Rule at src\isa\x64\lower.isle line 2683.
                                return v1852;
                            }
                            F64 => {
                                let v1854 = constructor_xmm_zero(ctx, F64X2);
                                let v1849 = &C::put_in_xmm_mem(ctx, v573);
                                let v1855 = constructor_x64_sqrtsd(ctx, v1854, v1849);
                                let v1856 = constructor_output_xmm(ctx, v1855);
                                let v1857 = Some(v1856);
                                // Rule at src\isa\x64\lower.isle line 2685.
                                return v1857;
                            }
                            F32X4 => {
                                let v765 = &C::put_in_xmm_mem(ctx, v573);
                                let v1858 = constructor_x64_sqrtps(ctx, v765);
                                let v1859 = constructor_output_xmm(ctx, v1858);
                                let v1860 = Some(v1859);
                                // Rule at src\isa\x64\lower.isle line 2687.
                                return v1860;
                            }
                            F64X2 => {
                                let v765 = &C::put_in_xmm_mem(ctx, v573);
                                let v1861 = constructor_x64_sqrtpd(ctx, v765);
                                let v1862 = constructor_output_xmm(ctx, v1861);
                                let v1863 = Some(v1862);
                                // Rule at src\isa\x64\lower.isle line 2689.
                                return v1863;
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fneg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v769 = constructor_put_in_xmm(ctx, v573);
                                let v875 = constructor_imm(ctx, F32, 0x80000000_u64);
                                let v876 = &constructor_reg_to_xmm_mem(ctx, v875);
                                let v877 = constructor_x64_xorps(ctx, v769, v876);
                                let v878 = constructor_output_xmm(ctx, v877);
                                let v879 = Some(v878);
                                // Rule at src\isa\x64\lower.isle line 1409.
                                return v879;
                            }
                            F64 => {
                                let v769 = constructor_put_in_xmm(ctx, v573);
                                let v881 = constructor_imm(ctx, F64, 0x8000000000000000_u64);
                                let v882 = &constructor_reg_to_xmm_mem(ctx, v881);
                                let v883 = constructor_x64_xorpd(ctx, v769, v882);
                                let v884 = constructor_output_xmm(ctx, v883);
                                let v885 = Some(v884);
                                // Rule at src\isa\x64\lower.isle line 1412.
                                return v885;
                            }
                            F32X4 => {
                                let v769 = constructor_put_in_xmm(ctx, v573);
                                let v862 = constructor_vector_all_ones(ctx);
                                let v886 = &C::xmi_imm(ctx, 0x1f_u32);
                                let v887 = constructor_x64_pslld(ctx, v862, v886);
                                let v888 = &C::xmm_to_xmm_mem(ctx, v887);
                                let v889 = constructor_x64_xorps(ctx, v769, v888);
                                let v890 = constructor_output_xmm(ctx, v889);
                                let v891 = Some(v890);
                                // Rule at src\isa\x64\lower.isle line 1415.
                                return v891;
                            }
                            F64X2 => {
                                let v769 = constructor_put_in_xmm(ctx, v573);
                                let v862 = constructor_vector_all_ones(ctx);
                                let v892 = &C::xmi_imm(ctx, 0x3f_u32);
                                let v893 = constructor_x64_psllq(ctx, v862, v892);
                                let v894 = &C::xmm_to_xmm_mem(ctx, v893);
                                let v895 = constructor_x64_xorpd(ctx, v769, v894);
                                let v896 = constructor_output_xmm(ctx, v895);
                                let v897 = Some(v896);
                                // Rule at src\isa\x64\lower.isle line 1419.
                                return v897;
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v769 = constructor_put_in_xmm(ctx, v573);
                                let v851 = constructor_imm(ctx, F32, 0x7fffffff_u64);
                                let v852 = &constructor_reg_to_xmm_mem(ctx, v851);
                                let v853 = constructor_x64_andps(ctx, v769, v852);
                                let v854 = constructor_output_xmm(ctx, v853);
                                let v855 = Some(v854);
                                // Rule at src\isa\x64\lower.isle line 1391.
                                return v855;
                            }
                            F64 => {
                                let v769 = constructor_put_in_xmm(ctx, v573);
                                let v857 = constructor_imm(ctx, F64, 0x7fffffffffffffff_u64);
                                let v858 = &constructor_reg_to_xmm_mem(ctx, v857);
                                let v859 = constructor_x64_andpd(ctx, v769, v858);
                                let v860 = constructor_output_xmm(ctx, v859);
                                let v861 = Some(v860);
                                // Rule at src\isa\x64\lower.isle line 1394.
                                return v861;
                            }
                            F32X4 => {
                                let v769 = constructor_put_in_xmm(ctx, v573);
                                let v862 = constructor_vector_all_ones(ctx);
                                let v863 = &C::xmi_imm(ctx, 0x1_u32);
                                let v864 = constructor_x64_psrld(ctx, v862, v863);
                                let v865 = &C::xmm_to_xmm_mem(ctx, v864);
                                let v866 = constructor_x64_andps(ctx, v769, v865);
                                let v867 = constructor_output_xmm(ctx, v866);
                                let v868 = Some(v867);
                                // Rule at src\isa\x64\lower.isle line 1398.
                                return v868;
                            }
                            F64X2 => {
                                let v769 = constructor_put_in_xmm(ctx, v573);
                                let v862 = constructor_vector_all_ones(ctx);
                                let v863 = &C::xmi_imm(ctx, 0x1_u32);
                                let v869 = constructor_x64_psrlq(ctx, v862, v863);
                                let v870 = &C::xmm_to_xmm_mem(ctx, v869);
                                let v871 = constructor_x64_andpd(ctx, v769, v870);
                                let v872 = constructor_output_xmm(ctx, v871);
                                let v873 = Some(v872);
                                // Rule at src\isa\x64\lower.isle line 1403.
                                return v873;
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Ceil => {
                    let v2941 = &C::put_in_reg_mem(ctx, v573);
                    let v898 = C::value_type(ctx, v573);
                    let v2943 = constructor_x64_round(ctx, v898, v2941, &RoundImm::RoundUp);
                    let v2944 = constructor_output_xmm(ctx, v2943);
                    let v2945 = Some(v2944);
                    // Rule at src\isa\x64\lower.isle line 4291.
                    return v2945;
                }
                &Opcode::Floor => {
                    let v2941 = &C::put_in_reg_mem(ctx, v573);
                    let v898 = C::value_type(ctx, v573);
                    let v2947 = constructor_x64_round(ctx, v898, v2941, &RoundImm::RoundDown);
                    let v2948 = constructor_output_xmm(ctx, v2947);
                    let v2949 = Some(v2948);
                    // Rule at src\isa\x64\lower.isle line 4296.
                    return v2949;
                }
                &Opcode::Trunc => {
                    let v2941 = &C::put_in_reg_mem(ctx, v573);
                    let v898 = C::value_type(ctx, v573);
                    let v2955 = constructor_x64_round(ctx, v898, v2941, &RoundImm::RoundZero);
                    let v2956 = constructor_output_xmm(ctx, v2955);
                    let v2957 = Some(v2956);
                    // Rule at src\isa\x64\lower.isle line 4306.
                    return v2957;
                }
                &Opcode::Nearest => {
                    let v2941 = &C::put_in_reg_mem(ctx, v573);
                    let v898 = C::value_type(ctx, v573);
                    let v2951 = constructor_x64_round(ctx, v898, v2941, &RoundImm::RoundNearest);
                    let v2952 = constructor_output_xmm(ctx, v2951);
                    let v2953 = Some(v2952);
                    // Rule at src\isa\x64\lower.isle line 4301.
                    return v2953;
                }
                &Opcode::ScalarToVector => {
                    let v3263 = &C::sinkable_load(ctx, v573);
                    if let Some(v3264) = v3263 {
                        let v898 = C::value_type(ctx, v573);
                        let v3271 = C::ty_64(ctx, v898);
                        if let Some(v3272) = v3271 {
                            let v3267 = &C::sink_load(ctx, v3264);
                            let v3273 = constructor_x64_movsd_load(ctx, v3267);
                            let v3274 = constructor_output_xmm(ctx, v3273);
                            let v3275 = Some(v3274);
                            // Rule at src\isa\x64\lower.isle line 4742.
                            return v3275;
                        }
                        let v3265 = C::ty_32(ctx, v898);
                        if let Some(v3266) = v3265 {
                            let v3267 = &C::sink_load(ctx, v3264);
                            let v3268 = constructor_x64_movss_load(ctx, v3267);
                            let v3269 = constructor_output_xmm(ctx, v3268);
                            let v3270 = Some(v3269);
                            // Rule at src\isa\x64\lower.isle line 4740.
                            return v3270;
                        }
                    }
                    let v898 = C::value_type(ctx, v573);
                    let v2624 = C::ty_scalar_float(ctx, v898);
                    if let Some(v2625) = v2624 {
                        let v1762 = constructor_output_value(ctx, v573);
                        let v1763 = Some(v1762);
                        // Rule at src\isa\x64\lower.isle line 4730.
                        return v1763;
                    }
                    let v574 = constructor_put_in_gpr(ctx, v573);
                    let v3259 = C::ty_bits(ctx, v898);
                    let v3260 = constructor_bitcast_gpr_to_xmm(ctx, v3259, v574);
                    let v3261 = constructor_output_xmm(ctx, v3260);
                    let v3262 = Some(v3261);
                    // Rule at src\isa\x64\lower.isle line 4735.
                    return v3262;
                }
                &Opcode::Bmask => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v578 = C::put_in_regs(ctx, v573);
                        let v3 = C::value_type(ctx, v2);
                        let v898 = C::value_type(ctx, v573);
                        let v899 = constructor_lower_bmask(ctx, v3, v898, v578);
                        let v900 = C::output(ctx, v899);
                        let v901 = Some(v900);
                        // Rule at src\isa\x64\lower.isle line 1464.
                        return v901;
                    }
                }
                &Opcode::Ireduce => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v578 = C::put_in_regs(ctx, v573);
                            let v579 = constructor_value_regs_get_gpr(ctx, v578, 0x0_usize);
                            let v1764 = constructor_output_gpr(ctx, v579);
                            let v1765 = Some(v1764);
                            // Rule at src\isa\x64\lower.isle line 2602.
                            return v1765;
                        }
                        let v898 = C::value_type(ctx, v573);
                        if v3 == v898 {
                            let v1762 = constructor_output_value(ctx, v573);
                            let v1763 = Some(v1762);
                            // Rule at src\isa\x64\lower.isle line 2596.
                            return v1763;
                        }
                    }
                }
                &Opcode::SwidenLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I16X8 => {
                                let v670 = C::use_sse41(ctx);
                                if v670 == true {
                                    let v898 = C::value_type(ctx, v573);
                                    if v898 == I8X16 {
                                        let v765 = &C::put_in_xmm_mem(ctx, v573);
                                        let v2794 = constructor_x64_pmovsxbw(ctx, v765);
                                        let v2795 = constructor_output_xmm(ctx, v2794);
                                        let v2796 = Some(v2795);
                                        // Rule at src\isa\x64\lower.isle line 4010.
                                        return v2796;
                                    }
                                }
                            }
                            I32X4 => {
                                let v670 = C::use_sse41(ctx);
                                if v670 == true {
                                    let v898 = C::value_type(ctx, v573);
                                    if v898 == I16X8 {
                                        let v765 = &C::put_in_xmm_mem(ctx, v573);
                                        let v2797 = constructor_x64_pmovsxwd(ctx, v765);
                                        let v2798 = constructor_output_xmm(ctx, v2797);
                                        let v2799 = Some(v2798);
                                        // Rule at src\isa\x64\lower.isle line 4013.
                                        return v2799;
                                    }
                                }
                            }
                            I64X2 => {
                                let v670 = C::use_sse41(ctx);
                                if v670 == true {
                                    let v898 = C::value_type(ctx, v573);
                                    if v898 == I32X4 {
                                        let v765 = &C::put_in_xmm_mem(ctx, v573);
                                        let v2800 = constructor_x64_pmovsxdq(ctx, v765);
                                        let v2801 = constructor_output_xmm(ctx, v2800);
                                        let v2802 = Some(v2801);
                                        // Rule at src\isa\x64\lower.isle line 4016.
                                        return v2802;
                                    }
                                }
                            }
                            _ => {}
                        }
                        let v769 = constructor_put_in_xmm(ctx, v573);
                        let v2803 = constructor_lower_swiden_low(ctx, v3, v769);
                        let v2804 = constructor_output_xmm(ctx, v2803);
                        let v2805 = Some(v2804);
                        // Rule at src\isa\x64\lower.isle line 4020.
                        return v2805;
                    }
                }
                &Opcode::SwidenHigh => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I16X8 => {
                                let v898 = C::value_type(ctx, v573);
                                if v898 == I8X16 {
                                    let v670 = C::use_sse41(ctx);
                                    if v670 == true {
                                        let v764 = C::use_ssse3(ctx);
                                        if v764 == true {
                                            let v769 = constructor_put_in_xmm(ctx, v573);
                                            let v1867 = &C::xmm_to_xmm_mem(ctx, v769);
                                            let v2806 = constructor_x64_palignr(ctx, v769, v1867, 0x8_u8);
                                            let v2807 = &C::xmm_to_xmm_mem(ctx, v2806);
                                            let v2808 = constructor_x64_pmovsxbw(ctx, v2807);
                                            let v2809 = constructor_output_xmm(ctx, v2808);
                                            let v2810 = Some(v2809);
                                            // Rule at src\isa\x64\lower.isle line 4043.
                                            return v2810;
                                        }
                                    }
                                    let v769 = constructor_put_in_xmm(ctx, v573);
                                    let v1867 = &C::xmm_to_xmm_mem(ctx, v769);
                                    let v2819 = constructor_x64_punpckhbw(ctx, v769, v1867);
                                    let v2820 = &C::xmi_imm(ctx, 0x8_u32);
                                    let v2821 = constructor_x64_psraw(ctx, v2819, v2820);
                                    let v2822 = constructor_output_xmm(ctx, v2821);
                                    let v2823 = Some(v2822);
                                    // Rule at src\isa\x64\lower.isle line 4059.
                                    return v2823;
                                }
                            }
                            I32X4 => {
                                let v898 = C::value_type(ctx, v573);
                                if v898 == I16X8 {
                                    let v670 = C::use_sse41(ctx);
                                    if v670 == true {
                                        let v764 = C::use_ssse3(ctx);
                                        if v764 == true {
                                            let v769 = constructor_put_in_xmm(ctx, v573);
                                            let v1867 = &C::xmm_to_xmm_mem(ctx, v769);
                                            let v2806 = constructor_x64_palignr(ctx, v769, v1867, 0x8_u8);
                                            let v2807 = &C::xmm_to_xmm_mem(ctx, v2806);
                                            let v2811 = constructor_x64_pmovsxwd(ctx, v2807);
                                            let v2812 = constructor_output_xmm(ctx, v2811);
                                            let v2813 = Some(v2812);
                                            // Rule at src\isa\x64\lower.isle line 4048.
                                            return v2813;
                                        }
                                    }
                                    let v769 = constructor_put_in_xmm(ctx, v573);
                                    let v1867 = &C::xmm_to_xmm_mem(ctx, v769);
                                    let v2824 = constructor_x64_punpckhwd(ctx, v769, v1867);
                                    let v2608 = &C::xmi_imm(ctx, 0x10_u32);
                                    let v2825 = constructor_x64_psrad(ctx, v2824, v2608);
                                    let v2826 = constructor_output_xmm(ctx, v2825);
                                    let v2827 = Some(v2826);
                                    // Rule at src\isa\x64\lower.isle line 4062.
                                    return v2827;
                                }
                            }
                            I64X2 => {
                                let v898 = C::value_type(ctx, v573);
                                if v898 == I32X4 {
                                    let v670 = C::use_sse41(ctx);
                                    if v670 == true {
                                        let v765 = &C::put_in_xmm_mem(ctx, v573);
                                        let v2814 = constructor_x64_pshufd(ctx, v765, 0xee_u8);
                                        let v2815 = &C::xmm_to_xmm_mem(ctx, v2814);
                                        let v2816 = constructor_x64_pmovsxdq(ctx, v2815);
                                        let v2817 = constructor_output_xmm(ctx, v2816);
                                        let v2818 = Some(v2817);
                                        // Rule at src\isa\x64\lower.isle line 4053.
                                        return v2818;
                                    }
                                    let v765 = &C::put_in_xmm_mem(ctx, v573);
                                    let v2829 = constructor_x64_pshufd(ctx, v765, 0xe_u8);
                                    let v2830 = constructor_xmm_zero(ctx, I32X4);
                                    let v2831 = &C::xmm_to_xmm_mem(ctx, v2829);
                                    let v2832 = constructor_x64_pcmpgtd(ctx, v2830, v2831);
                                    let v2833 = &C::xmm_to_xmm_mem(ctx, v2832);
                                    let v2834 = constructor_x64_punpckldq(ctx, v2829, v2833);
                                    let v2835 = constructor_output_xmm(ctx, v2834);
                                    let v2836 = Some(v2835);
                                    // Rule at src\isa\x64\lower.isle line 4067.
                                    return v2836;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::UwidenLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I16X8 => {
                                let v670 = C::use_sse41(ctx);
                                if v670 == true {
                                    let v898 = C::value_type(ctx, v573);
                                    if v898 == I8X16 {
                                        let v765 = &C::put_in_xmm_mem(ctx, v573);
                                        let v2837 = constructor_x64_pmovzxbw(ctx, v765);
                                        let v2838 = constructor_output_xmm(ctx, v2837);
                                        let v2839 = Some(v2838);
                                        // Rule at src\isa\x64\lower.isle line 4075.
                                        return v2839;
                                    }
                                }
                            }
                            I32X4 => {
                                let v670 = C::use_sse41(ctx);
                                if v670 == true {
                                    let v898 = C::value_type(ctx, v573);
                                    if v898 == I16X8 {
                                        let v765 = &C::put_in_xmm_mem(ctx, v573);
                                        let v2840 = constructor_x64_pmovzxwd(ctx, v765);
                                        let v2841 = constructor_output_xmm(ctx, v2840);
                                        let v2842 = Some(v2841);
                                        // Rule at src\isa\x64\lower.isle line 4078.
                                        return v2842;
                                    }
                                }
                            }
                            I64X2 => {
                                let v670 = C::use_sse41(ctx);
                                if v670 == true {
                                    let v898 = C::value_type(ctx, v573);
                                    if v898 == I32X4 {
                                        let v765 = &C::put_in_xmm_mem(ctx, v573);
                                        let v2843 = constructor_x64_pmovzxdq(ctx, v765);
                                        let v2844 = constructor_output_xmm(ctx, v2843);
                                        let v2845 = Some(v2844);
                                        // Rule at src\isa\x64\lower.isle line 4081.
                                        return v2845;
                                    }
                                }
                            }
                            _ => {}
                        }
                        let v769 = constructor_put_in_xmm(ctx, v573);
                        let v2846 = constructor_lower_uwiden_low(ctx, v3, v769);
                        let v2847 = constructor_output_xmm(ctx, v2846);
                        let v2848 = Some(v2847);
                        // Rule at src\isa\x64\lower.isle line 4085.
                        return v2848;
                    }
                }
                &Opcode::UwidenHigh => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I16X8 => {
                                let v898 = C::value_type(ctx, v573);
                                if v898 == I8X16 {
                                    let v769 = constructor_put_in_xmm(ctx, v573);
                                    let v770 = constructor_xmm_zero(ctx, I8X16);
                                    let v2849 = &C::xmm_to_xmm_mem(ctx, v770);
                                    let v2850 = constructor_x64_punpckhbw(ctx, v769, v2849);
                                    let v2851 = constructor_output_xmm(ctx, v2850);
                                    let v2852 = Some(v2851);
                                    // Rule at src\isa\x64\lower.isle line 4100.
                                    return v2852;
                                }
                            }
                            I32X4 => {
                                let v898 = C::value_type(ctx, v573);
                                if v898 == I16X8 {
                                    let v769 = constructor_put_in_xmm(ctx, v573);
                                    let v770 = constructor_xmm_zero(ctx, I8X16);
                                    let v2849 = &C::xmm_to_xmm_mem(ctx, v770);
                                    let v2853 = constructor_x64_punpckhwd(ctx, v769, v2849);
                                    let v2854 = constructor_output_xmm(ctx, v2853);
                                    let v2855 = Some(v2854);
                                    // Rule at src\isa\x64\lower.isle line 4102.
                                    return v2855;
                                }
                            }
                            I64X2 => {
                                let v898 = C::value_type(ctx, v573);
                                if v898 == I32X4 {
                                    let v769 = constructor_put_in_xmm(ctx, v573);
                                    let v2653 = constructor_xmm_zero(ctx, F32X4);
                                    let v2654 = &C::xmm_to_xmm_mem(ctx, v2653);
                                    let v2856 = constructor_x64_unpckhps(ctx, v769, v2654);
                                    let v2857 = constructor_output_xmm(ctx, v2856);
                                    let v2858 = Some(v2857);
                                    // Rule at src\isa\x64\lower.isle line 4104.
                                    return v2858;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Uextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I64 => {
                                let v1563 = constructor_extend_to_gpr(ctx, v573, I64, &ExtendKind::Zero);
                                let v1744 = constructor_output_gpr(ctx, v1563);
                                let v1745 = Some(v1744);
                                // Rule at src\isa\x64\lower.isle line 2565.
                                return v1745;
                            }
                            I128 => {
                                let v1563 = constructor_extend_to_gpr(ctx, v573, I64, &ExtendKind::Zero);
                                let v1739 = C::gpr_to_reg(ctx, v1563);
                                let v1740 = constructor_imm(ctx, I64, 0x0_u64);
                                let v1741 = C::value_regs(ctx, v1739, v1740);
                                let v1742 = C::output(ctx, v1741);
                                let v1743 = Some(v1742);
                                // Rule at src\isa\x64\lower.isle line 2561.
                                return v1743;
                            }
                            _ => {}
                        }
                        let v1746 = C::fits_in_32(ctx, v3);
                        if let Some(v1747) = v1746 {
                            let v1596 = constructor_extend_to_gpr(ctx, v573, I32, &ExtendKind::Zero);
                            let v1748 = constructor_output_gpr(ctx, v1596);
                            let v1749 = Some(v1748);
                            // Rule at src\isa\x64\lower.isle line 2570.
                            return v1749;
                        }
                    }
                }
                &Opcode::Sextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I64 => {
                                let v1750 = constructor_extend_to_gpr(ctx, v573, I64, &ExtendKind::Sign);
                                let v1757 = constructor_output_gpr(ctx, v1750);
                                let v1758 = Some(v1757);
                                // Rule at src\isa\x64\lower.isle line 2585.
                                return v1758;
                            }
                            I128 => {
                                let v1750 = constructor_extend_to_gpr(ctx, v573, I64, &ExtendKind::Sign);
                                let v1293 = Imm8Reg::Imm8 {
                                    imm: 0x3f_u8,
                                };
                                let v1294 = &C::imm8_reg_to_imm8_gpr(ctx, &v1293);
                                let v1751 = constructor_x64_sar(ctx, I64, v1750, v1294);
                                let v1752 = C::gpr_to_reg(ctx, v1750);
                                let v1753 = C::gpr_to_reg(ctx, v1751);
                                let v1754 = C::value_regs(ctx, v1752, v1753);
                                let v1755 = C::output(ctx, v1754);
                                let v1756 = Some(v1755);
                                // Rule at src\isa\x64\lower.isle line 2579.
                                return v1756;
                            }
                            _ => {}
                        }
                        let v1746 = C::fits_in_32(ctx, v3);
                        if let Some(v1747) = v1746 {
                            let v1759 = constructor_extend_to_gpr(ctx, v573, I32, &ExtendKind::Sign);
                            let v1760 = constructor_output_gpr(ctx, v1759);
                            let v1761 = Some(v1760);
                            // Rule at src\isa\x64\lower.isle line 2590.
                            return v1761;
                        }
                    }
                }
                &Opcode::Fpromote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F64 {
                            let v1854 = constructor_xmm_zero(ctx, F64X2);
                            let v1849 = &C::put_in_xmm_mem(ctx, v573);
                            let v1864 = constructor_x64_cvtss2sd(ctx, v1854, v1849);
                            let v1865 = constructor_output_xmm(ctx, v1864);
                            let v1866 = Some(v1865);
                            // Rule at src\isa\x64\lower.isle line 2693.
                            return v1866;
                        }
                    }
                }
                &Opcode::Fdemote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F32 {
                            let v1848 = constructor_xmm_zero(ctx, F32X4);
                            let v1849 = &C::put_in_xmm_mem(ctx, v573);
                            let v1871 = constructor_x64_cvtsd2ss(ctx, v1848, v1849);
                            let v1872 = constructor_output_xmm(ctx, v1871);
                            let v1873 = Some(v1872);
                            // Rule at src\isa\x64\lower.isle line 2701.
                            return v1873;
                        }
                    }
                }
                &Opcode::Fvdemote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F32X4 {
                            let v765 = &C::put_in_xmm_mem(ctx, v573);
                            let v1874 = constructor_x64_cvtpd2ps(ctx, v765);
                            let v1875 = constructor_output_xmm(ctx, v1874);
                            let v1876 = Some(v1875);
                            // Rule at src\isa\x64\lower.isle line 2705.
                            return v1876;
                        }
                    }
                }
                &Opcode::FvpromoteLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F64X2 {
                            let v769 = constructor_put_in_xmm(ctx, v573);
                            let v1867 = &C::xmm_to_xmm_mem(ctx, v769);
                            let v1868 = constructor_x64_cvtps2pd(ctx, v1867);
                            let v1869 = constructor_output_xmm(ctx, v1868);
                            let v1870 = Some(v1869);
                            // Rule at src\isa\x64\lower.isle line 2697.
                            return v1870;
                        }
                    }
                }
                &Opcode::FcvtToUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v898 = C::value_type(ctx, v573);
                        let v2624 = C::ty_scalar_float(ctx, v898);
                        if let Some(v2625) = v2624 {
                            let v3 = C::value_type(ctx, v2);
                            let v192 = false;
                            let v2626 = constructor_cvt_float_to_uint_seq(ctx, v3, v573, v192);
                            let v2627 = constructor_output_gpr(ctx, v2626);
                            let v2628 = Some(v2627);
                            // Rule at src\isa\x64\lower.isle line 3762.
                            return v2628;
                        }
                    }
                }
                &Opcode::FcvtToSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v898 = C::value_type(ctx, v573);
                        let v2624 = C::ty_scalar_float(ctx, v898);
                        if let Some(v2625) = v2624 {
                            let v3 = C::value_type(ctx, v2);
                            let v192 = false;
                            let v2632 = constructor_cvt_float_to_sint_seq(ctx, v3, v573, v192);
                            let v2633 = constructor_output_gpr(ctx, v2632);
                            let v2634 = Some(v2633);
                            // Rule at src\isa\x64\lower.isle line 3768.
                            return v2634;
                        }
                    }
                }
                &Opcode::FcvtToUintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I32X4 {
                            let v898 = C::value_type(ctx, v573);
                            if v898 == F32X4 {
                                let v769 = constructor_put_in_xmm(ctx, v573);
                                let v2653 = constructor_xmm_zero(ctx, F32X4);
                                let v2654 = &C::xmm_to_xmm_mem(ctx, v2653);
                                let v2655 = constructor_x64_maxps(ctx, v769, v2654);
                                let v2656 = &C::xmm_to_xmm_mem(ctx, v2653);
                                let v2657 = constructor_x64_pcmpeqd(ctx, v2653, v2656);
                                let v2658 = &C::xmi_imm(ctx, 0x1_u32);
                                let v2659 = constructor_x64_psrld(ctx, v2657, v2658);
                                let v2660 = &C::xmm_to_xmm_mem(ctx, v2659);
                                let v2661 = constructor_x64_cvtdq2ps(ctx, v2660);
                                let v2662 = &C::xmm_to_xmm_mem(ctx, v2655);
                                let v2663 = constructor_x64_cvttps2dq(ctx, v2662);
                                let v2664 = &C::xmm_to_xmm_mem(ctx, v2661);
                                let v2665 = constructor_x64_subps(ctx, v2655, v2664);
                                let v2666 = &C::xmm_to_xmm_mem(ctx, v2665);
                                let v2667 = constructor_x64_cmpps(ctx, v2661, v2666, &FcmpImm::LessThanOrEqual);
                                let v2668 = &C::xmm_to_xmm_mem(ctx, v2665);
                                let v2669 = constructor_x64_cvttps2dq(ctx, v2668);
                                let v2670 = &C::xmm_to_xmm_mem(ctx, v2667);
                                let v2671 = constructor_x64_pxor(ctx, v2669, v2670);
                                let v2672 = constructor_xmm_zero(ctx, I32X4);
                                let v2673 = constructor_lower_vec_smax(ctx, I32X4, v2671, v2672);
                                let v2674 = &C::xmm_to_xmm_mem(ctx, v2663);
                                let v2675 = constructor_x64_paddd(ctx, v2673, v2674);
                                let v2676 = constructor_output_xmm(ctx, v2675);
                                let v2677 = Some(v2676);
                                // Rule at src\isa\x64\lower.isle line 3846.
                                return v2677;
                            }
                        }
                        let v898 = C::value_type(ctx, v573);
                        let v2624 = C::ty_scalar_float(ctx, v898);
                        if let Some(v2625) = v2624 {
                            let v202 = true;
                            let v2629 = constructor_cvt_float_to_uint_seq(ctx, v3, v573, v202);
                            let v2630 = constructor_output_gpr(ctx, v2629);
                            let v2631 = Some(v2630);
                            // Rule at src\isa\x64\lower.isle line 3765.
                            return v2631;
                        }
                    }
                }
                &Opcode::FcvtToSintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I32X4 {
                            let v898 = C::value_type(ctx, v573);
                            if v898 == F32X4 {
                                let v769 = constructor_put_in_xmm(ctx, v573);
                                let v1867 = &C::xmm_to_xmm_mem(ctx, v769);
                                let v2638 = constructor_x64_cmpps(ctx, v769, v1867, &FcmpImm::Equal);
                                let v2639 = &C::xmm_to_xmm_mem(ctx, v2638);
                                let v2640 = constructor_x64_andps(ctx, v769, v2639);
                                let v2641 = &C::xmm_to_xmm_mem(ctx, v2640);
                                let v2642 = constructor_x64_pxor(ctx, v2638, v2641);
                                let v2643 = &C::xmm_to_xmm_mem(ctx, v2640);
                                let v2644 = constructor_x64_cvttps2dq(ctx, v2643);
                                let v2645 = &C::xmm_to_xmm_mem(ctx, v2642);
                                let v2646 = constructor_x64_pand(ctx, v2644, v2645);
                                let v2647 = &C::xmi_imm(ctx, 0x1f_u32);
                                let v2648 = constructor_x64_psrad(ctx, v2646, v2647);
                                let v2649 = &C::xmm_to_xmm_mem(ctx, v2644);
                                let v2650 = constructor_x64_pxor(ctx, v2648, v2649);
                                let v2651 = constructor_output_xmm(ctx, v2650);
                                let v2652 = Some(v2651);
                                // Rule at src\isa\x64\lower.isle line 3775.
                                return v2652;
                            }
                        }
                        let v898 = C::value_type(ctx, v573);
                        let v2624 = C::ty_scalar_float(ctx, v898);
                        if let Some(v2625) = v2624 {
                            let v202 = true;
                            let v2635 = constructor_cvt_float_to_sint_seq(ctx, v3, v573, v202);
                            let v2636 = constructor_output_gpr(ctx, v2635);
                            let v2637 = Some(v2636);
                            // Rule at src\isa\x64\lower.isle line 3771.
                            return v2637;
                        }
                    }
                }
                &Opcode::X86Cvtt2dq => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I32X4 {
                            let v898 = C::value_type(ctx, v573);
                            if v898 == F32X4 {
                                let v765 = &C::put_in_xmm_mem(ctx, v573);
                                let v2678 = constructor_x64_cvttps2dq(ctx, v765);
                                let v2679 = constructor_output_xmm(ctx, v2678);
                                let v2680 = Some(v2679);
                                // Rule at src\isa\x64\lower.isle line 3893.
                                return v2680;
                            }
                        }
                    }
                }
                &Opcode::FcvtFromUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v898 = C::value_type(ctx, v573);
                                let v2554 = C::fits_in_32(ctx, v898);
                                if let Some(v2555) = v2554 {
                                    let v2556 = C::ty_int(ctx, v2555);
                                    if let Some(v2557) = v2556 {
                                        let v1848 = constructor_xmm_zero(ctx, F32X4);
                                        let v2558 = constructor_extend_to_gpr(ctx, v573, I64, &ExtendKind::Zero);
                                        let v2559 = &C::gpr_to_gpr_mem(ctx, v2558);
                                        let v2560 = constructor_x64_cvtsi2ss(ctx, I64, v1848, v2559);
                                        let v2561 = constructor_output_xmm(ctx, v2560);
                                        let v2562 = Some(v2561);
                                        // Rule at src\isa\x64\lower.isle line 3650.
                                        return v2562;
                                    }
                                }
                            }
                            F64 => {
                                let v898 = C::value_type(ctx, v573);
                                let v2554 = C::fits_in_32(ctx, v898);
                                if let Some(v2555) = v2554 {
                                    let v2556 = C::ty_int(ctx, v2555);
                                    if let Some(v2557) = v2556 {
                                        let v1854 = constructor_xmm_zero(ctx, F64X2);
                                        let v2558 = constructor_extend_to_gpr(ctx, v573, I64, &ExtendKind::Zero);
                                        let v2559 = &C::gpr_to_gpr_mem(ctx, v2558);
                                        let v2563 = constructor_x64_cvtsi2sd(ctx, I64, v1854, v2559);
                                        let v2564 = constructor_output_xmm(ctx, v2563);
                                        let v2565 = Some(v2564);
                                        // Rule at src\isa\x64\lower.isle line 3653.
                                        return v2565;
                                    }
                                }
                            }
                            F32X4 => {
                                let v516 = C::use_avx512vl(ctx);
                                if v516 == true {
                                    let v517 = C::use_avx512f(ctx);
                                    if v517 == true {
                                        let v765 = &C::put_in_xmm_mem(ctx, v573);
                                        let v2602 = constructor_x64_vcvtudq2ps(ctx, v765);
                                        let v2603 = constructor_output_xmm(ctx, v2602);
                                        let v2604 = Some(v2603);
                                        // Rule at src\isa\x64\lower.isle line 3710.
                                        return v2604;
                                    }
                                }
                                let v769 = constructor_put_in_xmm(ctx, v573);
                                let v2606 = &C::xmi_imm(ctx, 0x10_u32);
                                let v2607 = constructor_x64_pslld(ctx, v769, v2606);
                                let v2608 = &C::xmi_imm(ctx, 0x10_u32);
                                let v2609 = constructor_x64_psrld(ctx, v2607, v2608);
                                let v2610 = &C::xmm_to_xmm_mem(ctx, v2609);
                                let v2611 = constructor_x64_psubd(ctx, v769, v2610);
                                let v2612 = &C::xmm_to_xmm_mem(ctx, v2609);
                                let v2613 = constructor_x64_cvtdq2ps(ctx, v2612);
                                let v2614 = &C::xmi_imm(ctx, 0x1_u32);
                                let v2615 = constructor_x64_psrld(ctx, v2611, v2614);
                                let v2616 = &C::xmm_to_xmm_mem(ctx, v2615);
                                let v2617 = constructor_x64_cvtdq2ps(ctx, v2616);
                                let v2618 = &C::xmm_to_xmm_mem(ctx, v2617);
                                let v2619 = constructor_x64_addps(ctx, v2617, v2618);
                                let v2620 = &C::xmm_to_xmm_mem(ctx, v2613);
                                let v2621 = constructor_x64_addps(ctx, v2619, v2620);
                                let v2622 = constructor_output_xmm(ctx, v2621);
                                let v2623 = Some(v2622);
                                // Rule at src\isa\x64\lower.isle line 3738.
                                return v2623;
                            }
                            F64X2 => {
                                let v2544 = C::def_inst(ctx, v573);
                                if let Some(v2545) = v2544 {
                                    let v2546 = &C::inst_data_value(ctx, v2545);
                                    if let &InstructionData::Unary {
                                        opcode: ref v2547,
                                        arg: v2548,
                                    } = v2546 {
                                        if let &Opcode::UwidenLow = v2547 {
                                            let v2549 = C::value_type(ctx, v2548);
                                            if v2549 == I32X4 {
                                                let v2593 = C::emit_u128_le_const(ctx, 0x4330000043300000_u128);
                                                let v2594 = &constructor_const_to_xmm_mem(ctx, v2593);
                                                let v2595 = constructor_put_in_xmm(ctx, v2548);
                                                let v2596 = constructor_x64_unpcklps(ctx, v2595, v2594);
                                                let v2597 = C::emit_u128_le_const(ctx, 0x43300000000000004330000000000000_u128);
                                                let v2598 = &constructor_const_to_xmm_mem(ctx, v2597);
                                                let v2599 = constructor_x64_subpd(ctx, v2596, v2598);
                                                let v2600 = constructor_output_xmm(ctx, v2599);
                                                let v2601 = Some(v2600);
                                                // Rule at src\isa\x64\lower.isle line 3702.
                                                return v2601;
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                        let v898 = C::value_type(ctx, v573);
                        match v898 {
                            I64 => {
                                let v574 = constructor_put_in_gpr(ctx, v573);
                                let v2566 = constructor_cvt_u64_to_float_seq(ctx, v3, v574);
                                let v2567 = constructor_output_xmm(ctx, v2566);
                                let v2568 = Some(v2567);
                                // Rule at src\isa\x64\lower.isle line 3656.
                                return v2568;
                            }
                            I64X2 => {
                                if v3 == F64X2 {
                                    let v2570 = C::emit_u128_le_const(ctx, 0xffffffff00000000ffffffff_u128);
                                    let v2571 = &constructor_const_to_xmm_mem(ctx, v2570);
                                    let v2573 = C::emit_u128_le_const(ctx, 0x43300000000000004330000000000000_u128);
                                    let v2574 = &constructor_const_to_xmm_mem(ctx, v2573);
                                    let v2576 = C::emit_u128_le_const(ctx, 0x45300000000000004530000000000000_u128);
                                    let v2577 = &constructor_const_to_xmm_mem(ctx, v2576);
                                    let v2579 = C::emit_u128_le_const(ctx, 0x45300000001000004530000000100000_u128);
                                    let v2580 = &constructor_const_to_xmm_mem(ctx, v2579);
                                    let v2581 = constructor_put_in_xmm(ctx, v573);
                                    let v2582 = constructor_x64_pand(ctx, v2581, v2571);
                                    let v2583 = constructor_x64_por(ctx, v2582, v2574);
                                    let v2584 = constructor_put_in_xmm(ctx, v573);
                                    let v706 = &C::xmi_imm(ctx, 0x20_u32);
                                    let v2585 = constructor_x64_psrlq(ctx, v2584, v706);
                                    let v2586 = constructor_x64_por(ctx, v2585, v2577);
                                    let v2587 = constructor_x64_subpd(ctx, v2586, v2580);
                                    let v2588 = &C::xmm_to_xmm_mem(ctx, v2587);
                                    let v2589 = constructor_x64_addpd(ctx, v2583, v2588);
                                    let v2590 = constructor_output_xmm(ctx, v2589);
                                    let v2591 = Some(v2590);
                                    // Rule at src\isa\x64\lower.isle line 3687.
                                    return v2591;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::FcvtFromSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v898 = C::value_type(ctx, v573);
                                match v898 {
                                    I8 => {
                                        let v1848 = constructor_xmm_zero(ctx, F32X4);
                                        let v2510 = constructor_extend_to_gpr(ctx, v573, I32, &ExtendKind::Sign);
                                        let v2511 = &C::gpr_to_gpr_mem(ctx, v2510);
                                        let v2512 = constructor_x64_cvtsi2ss(ctx, I32, v1848, v2511);
                                        let v2513 = constructor_output_xmm(ctx, v2512);
                                        let v2514 = Some(v2513);
                                        // Rule at src\isa\x64\lower.isle line 3612.
                                        return v2514;
                                    }
                                    I16 => {
                                        let v1848 = constructor_xmm_zero(ctx, F32X4);
                                        let v2510 = constructor_extend_to_gpr(ctx, v573, I32, &ExtendKind::Sign);
                                        let v2511 = &C::gpr_to_gpr_mem(ctx, v2510);
                                        let v2512 = constructor_x64_cvtsi2ss(ctx, I32, v1848, v2511);
                                        let v2513 = constructor_output_xmm(ctx, v2512);
                                        let v2514 = Some(v2513);
                                        // Rule at src\isa\x64\lower.isle line 3615.
                                        return v2514;
                                    }
                                    _ => {}
                                }
                                let v2515 = C::ty_int(ctx, v898);
                                if let Some(v2516) = v2515 {
                                    let v2517 = C::fits_in_64(ctx, v2516);
                                    if let Some(v2518) = v2517 {
                                        let v1848 = constructor_xmm_zero(ctx, F32X4);
                                        let v2519 = &constructor_put_in_gpr_mem(ctx, v573);
                                        let v2520 = constructor_x64_cvtsi2ss(ctx, v2518, v1848, v2519);
                                        let v2521 = constructor_output_xmm(ctx, v2520);
                                        let v2522 = Some(v2521);
                                        // Rule at src\isa\x64\lower.isle line 3618.
                                        return v2522;
                                    }
                                }
                            }
                            F64 => {
                                let v898 = C::value_type(ctx, v573);
                                match v898 {
                                    I8 => {
                                        let v1854 = constructor_xmm_zero(ctx, F64X2);
                                        let v2510 = constructor_extend_to_gpr(ctx, v573, I32, &ExtendKind::Sign);
                                        let v2511 = &C::gpr_to_gpr_mem(ctx, v2510);
                                        let v2523 = constructor_x64_cvtsi2sd(ctx, I32, v1854, v2511);
                                        let v2524 = constructor_output_xmm(ctx, v2523);
                                        let v2525 = Some(v2524);
                                        // Rule at src\isa\x64\lower.isle line 3621.
                                        return v2525;
                                    }
                                    I16 => {
                                        let v1854 = constructor_xmm_zero(ctx, F64X2);
                                        let v2510 = constructor_extend_to_gpr(ctx, v573, I32, &ExtendKind::Sign);
                                        let v2511 = &C::gpr_to_gpr_mem(ctx, v2510);
                                        let v2523 = constructor_x64_cvtsi2sd(ctx, I32, v1854, v2511);
                                        let v2524 = constructor_output_xmm(ctx, v2523);
                                        let v2525 = Some(v2524);
                                        // Rule at src\isa\x64\lower.isle line 3624.
                                        return v2525;
                                    }
                                    _ => {}
                                }
                                let v2515 = C::ty_int(ctx, v898);
                                if let Some(v2516) = v2515 {
                                    let v2517 = C::fits_in_64(ctx, v2516);
                                    if let Some(v2518) = v2517 {
                                        let v1854 = constructor_xmm_zero(ctx, F64X2);
                                        let v2519 = &constructor_put_in_gpr_mem(ctx, v573);
                                        let v2526 = constructor_x64_cvtsi2sd(ctx, v2518, v1854, v2519);
                                        let v2527 = constructor_output_xmm(ctx, v2526);
                                        let v2528 = Some(v2527);
                                        // Rule at src\isa\x64\lower.isle line 3627.
                                        return v2528;
                                    }
                                }
                            }
                            F64X2 => {
                                let v2544 = C::def_inst(ctx, v573);
                                if let Some(v2545) = v2544 {
                                    let v2546 = &C::inst_data_value(ctx, v2545);
                                    if let &InstructionData::Unary {
                                        opcode: ref v2547,
                                        arg: v2548,
                                    } = v2546 {
                                        if let &Opcode::SwidenLow = v2547 {
                                            let v2549 = C::value_type(ctx, v2548);
                                            if v2549 == I32X4 {
                                                let v2550 = &C::put_in_xmm_mem(ctx, v2548);
                                                let v2551 = constructor_x64_cvtdq2pd(ctx, v2550);
                                                let v2552 = constructor_output_xmm(ctx, v2551);
                                                let v2553 = Some(v2552);
                                                // Rule at src\isa\x64\lower.isle line 3645.
                                                return v2553;
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                    }
                    let v898 = C::value_type(ctx, v573);
                    match v898 {
                        I32X4 => {
                            let v765 = &C::put_in_xmm_mem(ctx, v573);
                            let v2529 = constructor_x64_cvtdq2ps(ctx, v765);
                            let v2530 = constructor_output_xmm(ctx, v2529);
                            let v2531 = Some(v2530);
                            // Rule at src\isa\x64\lower.isle line 3630.
                            return v2531;
                        }
                        I64X2 => {
                            let v769 = constructor_put_in_xmm(ctx, v573);
                            let v2532 = constructor_xmm_zero(ctx, F64X2);
                            let v2533 = constructor_x64_movq_to_gpr(ctx, v769);
                            let v2534 = &C::gpr_to_gpr_mem(ctx, v2533);
                            let v2535 = constructor_x64_cvtsi2sd(ctx, I64, v2532, v2534);
                            let v805 = &C::xmm_to_xmm_mem(ctx, v769);
                            let v2536 = constructor_x64_pshufd(ctx, v805, 0xee_u8);
                            let v2537 = constructor_x64_movq_to_gpr(ctx, v2536);
                            let v2538 = &C::gpr_to_gpr_mem(ctx, v2537);
                            let v2539 = constructor_x64_cvtsi2sd(ctx, I64, v2532, v2538);
                            let v2540 = &C::xmm_to_xmm_mem(ctx, v2539);
                            let v2541 = constructor_x64_unpcklpd(ctx, v2535, v2540);
                            let v2542 = constructor_output_xmm(ctx, v2541);
                            let v2543 = Some(v2542);
                            // Rule at src\isa\x64\lower.isle line 3636.
                            return v2543;
                        }
                        _ => {}
                    }
                }
                &Opcode::Isplit => {
                    let v898 = C::value_type(ctx, v573);
                    if v898 == I128 {
                        let v578 = C::put_in_regs(ctx, v573);
                        let v3398 = C::value_regs_get(ctx, v578, 0x0_usize);
                        let v3399 = C::value_regs_get(ctx, v578, 0x1_usize);
                        let v3400 = C::value_reg(ctx, v3398);
                        let v3401 = C::value_reg(ctx, v3399);
                        let v3402 = C::output_pair(ctx, v3400, v3401);
                        let v3403 = Some(v3402);
                        // Rule at src\isa\x64\lower.isle line 4922.
                        return v3403;
                    }
                }
                _ => {}
            }
        }
        &InstructionData::UnaryConst {
            opcode: ref v43,
            constant_handle: v44,
        } => {
            match v43 {
                &Opcode::F128const => {
                    let v50 = C::u128_from_constant(ctx, v44);
                    if let Some(v51) = v50 {
                        if v51 == 0x0_u128 {
                            let v52 = constructor_xmm_zero(ctx, F128);
                            let v53 = constructor_output_xmm(ctx, v52);
                            let v54 = Some(v53);
                            // Rule at src\isa\x64\lower.isle line 46.
                            return v54;
                        }
                    }
                    let v46 = C::const_to_vconst(ctx, v44);
                    let v47 = constructor_x64_xmm_load_const(ctx, F128, v46);
                    let v48 = constructor_output_xmm(ctx, v47);
                    let v49 = Some(v48);
                    // Rule at src\isa\x64\lower.isle line 42.
                    return v49;
                }
                &Opcode::Vconst => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v50 = C::u128_from_constant(ctx, v44);
                        if let Some(v51) = v50 {
                            match v51 {
                                0xffffffffffffffffffffffffffffffff_u128 => {
                                    let v3065 = constructor_vector_all_ones(ctx);
                                    let v3066 = constructor_output_xmm(ctx, v3065);
                                    let v3067 = Some(v3066);
                                    // Rule at src\isa\x64\lower.isle line 4486.
                                    return v3067;
                                }
                                0x0_u128 => {
                                    let v3 = C::value_type(ctx, v2);
                                    let v3062 = constructor_xmm_zero(ctx, v3);
                                    let v3063 = constructor_output_xmm(ctx, v3062);
                                    let v3064 = Some(v3063);
                                    // Rule at src\isa\x64\lower.isle line 4485.
                                    return v3064;
                                }
                                _ => {}
                            }
                        }
                        let v46 = C::const_to_vconst(ctx, v44);
                        let v3 = C::value_type(ctx, v2);
                        let v3059 = constructor_x64_xmm_load_const(ctx, v3, v46);
                        let v3060 = constructor_output_xmm(ctx, v3059);
                        let v3061 = Some(v3060);
                        // Rule at src\isa\x64\lower.isle line 4480.
                        return v3061;
                    }
                }
                _ => {}
            }
        }
        &InstructionData::UnaryGlobalValue {
            opcode: ref v2328,
            global_value: v2329,
        } => {
            match v2328 {
                &Opcode::SymbolValue => {
                    let v2330 = C::symbol_value_data(ctx, v2329);
                    if let Some(v2331) = v2330 {
                        let v2335 = constructor_load_ext_name(ctx, v2331.0, v2331.2, v2331.1);
                        let v2336 = constructor_output_reg(ctx, v2335);
                        let v2337 = Some(v2336);
                        // Rule at src\isa\x64\lower.isle line 3371.
                        return v2337;
                    }
                }
                &Opcode::TlsValue => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v2330 = C::symbol_value_data(ctx, v2329);
                        if let Some(v2331) = v2330 {
                            let v3 = C::value_type(ctx, v2);
                            let v3404 = &C::tls_model(ctx, v3);
                            match v3404 {
                                &TlsModel::ElfGd => {
                                    let v3405 = constructor_elf_tls_get_addr(ctx, v2331.0);
                                    let v3406 = constructor_output_gpr(ctx, v3405);
                                    let v3407 = Some(v3406);
                                    // Rule at src\isa\x64\lower.isle line 4930.
                                    return v3407;
                                }
                                &TlsModel::Macho => {
                                    let v3408 = constructor_macho_tls_get_addr(ctx, v2331.0);
                                    let v3409 = constructor_output_gpr(ctx, v3408);
                                    let v3410 = Some(v3409);
                                    // Rule at src\isa\x64\lower.isle line 4933.
                                    return v3410;
                                }
                                &TlsModel::Coff => {
                                    let v3411 = constructor_coff_tls_get_addr(ctx, v2331.0);
                                    let v3412 = constructor_output_gpr(ctx, v3411);
                                    let v3413 = Some(v3412);
                                    // Rule at src\isa\x64\lower.isle line 4936.
                                    return v3413;
                                }
                                _ => {}
                            }
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::UnaryIeee16 {
            opcode: ref v20,
            imm: v21,
        } => {
            if let &Opcode::F16const = v20 {
                let v22 = C::u16_from_ieee16(ctx, v21);
                let v24 = C::u16_as_u64(ctx, v22);
                let v25 = constructor_imm(ctx, F16, v24);
                let v26 = constructor_output_reg(ctx, v25);
                let v27 = Some(v26);
                // Rule at src\isa\x64\lower.isle line 28.
                return v27;
            }
        }
        &InstructionData::UnaryIeee32 {
            opcode: ref v28,
            imm: v29,
        } => {
            if let &Opcode::F32const = v28 {
                let v30 = C::u32_from_ieee32(ctx, v29);
                let v32 = C::u32_as_u64(ctx, v30);
                let v33 = constructor_imm(ctx, F32, v32);
                let v34 = constructor_output_reg(ctx, v33);
                let v35 = Some(v34);
                // Rule at src\isa\x64\lower.isle line 33.
                return v35;
            }
        }
        &InstructionData::UnaryIeee64 {
            opcode: ref v36,
            imm: v37,
        } => {
            if let &Opcode::F64const = v36 {
                let v38 = C::u64_from_ieee64(ctx, v37);
                let v40 = constructor_imm(ctx, F64, v38);
                let v41 = constructor_output_reg(ctx, v40);
                let v42 = Some(v41);
                // Rule at src\isa\x64\lower.isle line 38.
                return v42;
            }
        }
        &InstructionData::UnaryImm {
            opcode: ref v7,
            imm: v8,
        } => {
            if let &Opcode::Iconst = v7 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    if v3 == I128 {
                        let v9 = C::u64_from_imm64(ctx, v8);
                        let v14 = constructor_imm(ctx, I64, v9);
                        let v16 = constructor_imm(ctx, I64, 0x0_u64);
                        let v17 = C::value_regs(ctx, v14, v16);
                        let v18 = C::output(ctx, v17);
                        let v19 = Some(v18);
                        // Rule at src\isa\x64\lower.isle line 21.
                        return v19;
                    }
                    let v4 = C::fits_in_64(ctx, v3);
                    if let Some(v5) = v4 {
                        let v9 = C::u64_from_imm64(ctx, v8);
                        let v10 = constructor_imm(ctx, v5, v9);
                        let v11 = constructor_output_reg(ctx, v10);
                        let v12 = Some(v11);
                        // Rule at src\isa\x64\lower.isle line 16.
                        return v12;
                    }
                }
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term lower_branch.
pub fn constructor_lower_branch<C: Context>(
    ctx: &mut C,
    arg0: Inst,
    arg1: &MachLabelSlice,
) -> Option<Unit> {
    let v1 = &C::inst_data_value(ctx, arg0);
    match v1 {
        &InstructionData::BranchTable {
            opcode: ref v92,
            arg: v93,
            table: v94,
        } => {
            if let &Opcode::BrTable = v92 {
                let v96 = C::jump_table_targets(ctx, arg1);
                if let Some(v97) = v96 {
                    let v95 = C::value_type(ctx, v93);
                    let v100 = &C::raw_operand_size_of_type(ctx, v95);
                    let v101 = C::jump_table_size(ctx, &v97.1);
                    let v102 = C::u32_as_u64(ctx, v101);
                    let v103 = constructor_imm(ctx, v95, v102);
                    let v106 = constructor_extend_to_gpr(ctx, v93, I64, &ExtendKind::Zero);
                    let v107 = &constructor_reg_to_gpr_mem_imm(ctx, v103);
                    let v108 = &constructor_x64_cmp(ctx, v100, v106, v107);
                    let v110 = &C::gpr_to_gpr_mem(ctx, v106);
                    let v111 = C::gpr_new(ctx, v103);
                    let v112 = &constructor_cmove(ctx, v95, &CC::B, v110, v111);
                    let v113 = constructor_with_flags_reg(ctx, v108, v112);
                    let v114 = C::gpr_new(ctx, v113);
                    let v115 = &constructor_jmp_table_seq(ctx, v95, v114, v97.0, &v97.1);
                    let v116 = constructor_emit_side_effect(ctx, v115);
                    let v117 = Some(v116);
                    // Rule at src\isa\x64\lower.isle line 3569.
                    return v117;
                }
            }
        }
        &InstructionData::Brif {
            opcode: ref v32,
            arg: v33,
            blocks: ref v34,
        } => {
            if let &Opcode::Brif = v32 {
                let v49 = C::two_targets(ctx, arg1);
                if let Some(v50) = v49 {
                    let v35 = C::maybe_uextend(ctx, v33);
                    if let Some(v36) = v35 {
                        let v37 = C::def_inst(ctx, v36);
                        if let Some(v38) = v37 {
                            let v39 = &C::inst_data_value(ctx, v38);
                            match v39 {
                                &InstructionData::FloatCompare {
                                    opcode: ref v57,
                                    args: ref v58,
                                    cond: ref v59,
                                } => {
                                    if let &Opcode::Fcmp = v57 {
                                        let v60 = C::unpack_value_array_2(ctx, v58);
                                        let v63 = &constructor_emit_fcmp(ctx, v59, v60.0, v60.1);
                                        let v64 = &constructor_jmp_cond_fcmp(ctx, v63, v50.0, v50.1);
                                        let v65 = constructor_emit_side_effect(ctx, v64);
                                        let v66 = Some(v65);
                                        // Rule at src\isa\x64\lower.isle line 3526.
                                        return v66;
                                    }
                                }
                                &InstructionData::IntCompare {
                                    opcode: ref v40,
                                    args: ref v41,
                                    cond: ref v42,
                                } => {
                                    if let &Opcode::Icmp = v40 {
                                        let v43 = C::unpack_value_array_2(ctx, v41);
                                        let v53 = &constructor_emit_cmp(ctx, v42, v43.0, v43.1);
                                        let v54 = &constructor_jmp_cond_icmp(ctx, v53, v50.0, v50.1);
                                        let v55 = constructor_emit_side_effect(ctx, v54);
                                        let v56 = Some(v55);
                                        // Rule at src\isa\x64\lower.isle line 3523.
                                        return v56;
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v67,
                                    arg: v68,
                                } => {
                                    match v67 {
                                        &Opcode::VanyTrue => {
                                            let v69 = &constructor_emit_vany_true(ctx, v68);
                                            let v70 = &constructor_jmp_cond_icmp(ctx, v69, v50.0, v50.1);
                                            let v71 = constructor_emit_side_effect(ctx, v70);
                                            let v72 = Some(v71);
                                            // Rule at src\isa\x64\lower.isle line 3529.
                                            return v72;
                                        }
                                        &Opcode::VallTrue => {
                                            let v73 = &constructor_emit_vall_true(ctx, v68);
                                            let v74 = &constructor_jmp_cond_icmp(ctx, v73, v50.0, v50.1);
                                            let v75 = constructor_emit_side_effect(ctx, v74);
                                            let v76 = Some(v75);
                                            // Rule at src\isa\x64\lower.isle line 3532.
                                            return v76;
                                        }
                                        _ => {}
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    let v77 = C::value_type(ctx, v33);
                    if v77 == I128 {
                        let v79 = C::put_in_regs(ctx, v33);
                        let v80 = &constructor_cmp_zero_i128(ctx, &CC::Z, v79);
                        let v81 = &constructor_jmp_cond_icmp(ctx, v80, v50.0, v50.1);
                        let v82 = constructor_emit_side_effect(ctx, v81);
                        let v83 = Some(v82);
                        // Rule at src\isa\x64\lower.isle line 3535.
                        return v83;
                    }
                    let v84 = C::ty_int_bool_or_ref(ctx, v77);
                    if let Some(v85) = v84 {
                        let v86 = &constructor_cmp_zero_int_bool_ref(ctx, v33);
                        let v88 = &constructor_jmp_cond(ctx, &CC::NZ, v50.0, v50.1);
                        let v89 = &constructor_with_flags_side_effect(ctx, v86, v88);
                        let v90 = constructor_emit_side_effect(ctx, v89);
                        let v91 = Some(v90);
                        // Rule at src\isa\x64\lower.isle line 3539.
                        return v91;
                    }
                }
            }
        }
        &InstructionData::Jump {
            opcode: ref v25,
            destination: v26,
        } => {
            if let &Opcode::Jump = v25 {
                let v27 = C::single_target(ctx, arg1);
                if let Some(v28) = v27 {
                    let v29 = &constructor_jmp_known(ctx, v28);
                    let v30 = constructor_emit_side_effect(ctx, v29);
                    let v31 = Some(v30);
                    // Rule at src\isa\x64\lower.isle line 3518.
                    return v31;
                }
            }
        }
        &InstructionData::TryCall {
            opcode: ref v2,
            args: v3,
            func_ref: v4,
            exception: v5,
        } => {
            if let &Opcode::TryCall = v2 {
                let v7 = C::func_ref_data(ctx, v4);
                let v6 = C::value_list_slice(ctx, v3);
                let v12 = C::gen_try_call(ctx, v7.0, v7.1, v7.2, v5, v6, arg1);
                let v13 = Some(v12);
                // Rule at src\isa\x64\lower.isle line 3486.
                return v13;
            }
        }
        &InstructionData::TryCallIndirect {
            opcode: ref v14,
            args: v15,
            exception: v16,
        } => {
            if let &Opcode::TryCallIndirect = v14 {
                let v17 = C::value_list_slice(ctx, v15);
                let v18 = C::value_slice_unwrap(ctx, v17);
                if let Some(v19) = v18 {
                    let v22 = C::exception_sig(ctx, v16);
                    let v23 = C::gen_try_call_indirect(ctx, v22, v19.0, v16, v19.1, arg1);
                    let v24 = Some(v23);
                    // Rule at src\isa\x64\lower.isle line 3489.
                    return v24;
                }
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term iadd128.
pub fn constructor_iadd128<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
    arg2: &GprMemImm,
    arg3: &GprMemImm,
) -> ValueRegs {
    let v5 = &constructor_x64_add_with_flags_paired(ctx, I64, arg0, arg2);
    let v6 = &constructor_x64_adc_paired(ctx, I64, arg1, arg3);
    let v7 = constructor_with_flags(ctx, v5, v6);
    // Rule at src\isa\x64\lower.isle line 135.
    return v7;
}

// Generated as internal constructor for term construct_overflow_op.
pub fn constructor_construct_overflow_op<C: Context>(
    ctx: &mut C,
    arg0: &CC,
    arg1: &ProducesFlags,
) -> InstOutput {
    let v2 = &constructor_x64_setcc_paired(ctx, arg0);
    let v3 = constructor_with_flags(ctx, arg1, v2);
    let v5 = C::value_regs_get(ctx, v3, 0x0_usize);
    let v6 = C::value_reg(ctx, v5);
    let v8 = C::value_regs_get(ctx, v3, 0x1_usize);
    let v9 = C::value_reg(ctx, v8);
    let v10 = C::output_pair(ctx, v6, v9);
    // Rule at src\isa\x64\lower.isle line 142.
    return v10;
}

// Generated as internal constructor for term construct_overflow_op_alu.
pub fn constructor_construct_overflow_op_alu<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &CC,
    arg2: &ProduceFlagsOp,
    arg3: Gpr,
    arg4: &GprMemImm,
) -> InstOutput {
    let v5 = &constructor_x64_produce_flags(ctx, arg2, arg0, arg3, arg4);
    let v6 = constructor_construct_overflow_op(ctx, arg1, v5);
    // Rule at src\isa\x64\lower.isle line 149.
    return v6;
}

// Generated as internal constructor for term construct_overflow_op_alu_128.
pub fn constructor_construct_overflow_op_alu_128<C: Context>(
    ctx: &mut C,
    arg0: &CC,
    arg1: &ProduceFlagsOp,
    arg2: &ChainFlagsOp,
    arg3: Value,
    arg4: Value,
) -> InstOutput {
    let v5 = C::put_in_regs(ctx, arg3);
    let v7 = constructor_value_regs_get_gpr(ctx, v5, 0x0_usize);
    let v9 = constructor_value_regs_get_gpr(ctx, v5, 0x1_usize);
    let v10 = C::put_in_regs(ctx, arg4);
    let v11 = constructor_value_regs_get_gpr(ctx, v10, 0x0_usize);
    let v12 = constructor_value_regs_get_gpr(ctx, v10, 0x1_usize);
    let v14 = &C::gpr_to_gpr_mem_imm(ctx, v11);
    let v15 = &constructor_x64_produce_flags(ctx, arg1, I64, v7, v14);
    let v16 = &constructor_x64_chain_flags(ctx, arg2, I64, v9, v12);
    let v17 = &constructor_x64_setcc_paired(ctx, arg0);
    let v18 = &constructor_with_flags_chained(ctx, v15, v16, v17);
    let v19 = constructor_multi_reg_to_pair_and_single(ctx, v18);
    // Rule at src\isa\x64\lower.isle line 157.
    return v19;
}

// Generated as internal constructor for term isub128.
pub fn constructor_isub128<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
    arg2: &GprMemImm,
    arg3: &GprMemImm,
) -> ValueRegs {
    let v5 = &constructor_x64_sub_with_flags_paired(ctx, I64, arg0, arg2);
    let v6 = &constructor_x64_sbb_paired(ctx, I64, arg1, arg3);
    let v7 = constructor_with_flags(ctx, v5, v6);
    // Rule at src\isa\x64\lower.isle line 291.
    return v7;
}

// Generated as internal constructor for term sse_and.
pub fn constructor_sse_and<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &XmmMem,
) -> Xmm {
    match arg0 {
        F32 => {
            let v3 = constructor_x64_andps(ctx, arg1, arg2);
            // Rule at src\isa\x64\lower.isle line 345.
            return v3;
        }
        F64 => {
            let v4 = constructor_x64_andpd(ctx, arg1, arg2);
            // Rule at src\isa\x64\lower.isle line 346.
            return v4;
        }
        F32X4 => {
            let v3 = constructor_x64_andps(ctx, arg1, arg2);
            // Rule at src\isa\x64\lower.isle line 343.
            return v3;
        }
        F64X2 => {
            let v4 = constructor_x64_andpd(ctx, arg1, arg2);
            // Rule at src\isa\x64\lower.isle line 344.
            return v4;
        }
        _ => {}
    }
    let v5 = C::multi_lane(ctx, arg0);
    if let Some(v6) = v5 {
        let v9 = constructor_x64_pand(ctx, arg1, arg2);
        // Rule at src\isa\x64\lower.isle line 347.
        return v9;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "sse_and", "src\\isa\\x64\\lower.isle line 342")
}

// Generated as internal constructor for term and_i128.
pub fn constructor_and_i128<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: ValueRegs,
) -> ValueRegs {
    let v3 = constructor_value_regs_get_gpr(ctx, arg0, 0x0_usize);
    let v5 = constructor_value_regs_get_gpr(ctx, arg0, 0x1_usize);
    let v6 = constructor_value_regs_get_gpr(ctx, arg1, 0x0_usize);
    let v7 = constructor_value_regs_get_gpr(ctx, arg1, 0x1_usize);
    let v9 = &C::gpr_to_gpr_mem_imm(ctx, v6);
    let v10 = constructor_x64_and(ctx, I64, v3, v9);
    let v11 = &C::gpr_to_gpr_mem_imm(ctx, v7);
    let v12 = constructor_x64_and(ctx, I64, v5, v11);
    let v13 = constructor_value_gprs(ctx, v10, v12);
    // Rule at src\isa\x64\lower.isle line 356.
    return v13;
}

// Generated as internal constructor for term sse_and_not.
pub fn constructor_sse_and_not<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &XmmMem,
) -> Xmm {
    match arg0 {
        F32X4 => {
            let v3 = constructor_x64_andnps(ctx, arg1, arg2);
            // Rule at src\isa\x64\lower.isle line 374.
            return v3;
        }
        F64X2 => {
            let v4 = constructor_x64_andnpd(ctx, arg1, arg2);
            // Rule at src\isa\x64\lower.isle line 375.
            return v4;
        }
        _ => {}
    }
    let v5 = C::multi_lane(ctx, arg0);
    if let Some(v6) = v5 {
        let v9 = constructor_x64_pandn(ctx, arg1, arg2);
        // Rule at src\isa\x64\lower.isle line 376.
        return v9;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "sse_and_not", "src\\isa\\x64\\lower.isle line 373")
}

// Generated as internal constructor for term val_minus_one.
pub fn constructor_val_minus_one<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> Option<Value> {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = &C::inst_data_value(ctx, v2);
        if let &InstructionData::Binary {
            opcode: ref v4,
            args: ref v5,
        } = v3 {
            match v4 {
                &Opcode::Iadd => {
                    let v6 = C::unpack_value_array_2(ctx, v5);
                    let v18 = C::i64_from_iconst(ctx, v6.0);
                    if let Some(v19) = v18 {
                        if v19 == -1_i64 {
                            let v20 = Some(v6.1);
                            // Rule at src\isa\x64\lower.isle line 405.
                            return v20;
                        }
                    }
                    let v16 = C::i64_from_iconst(ctx, v6.1);
                    if let Some(v17) = v16 {
                        if v17 == -1_i64 {
                            let v15 = Some(v6.0);
                            // Rule at src\isa\x64\lower.isle line 404.
                            return v15;
                        }
                    }
                }
                &Opcode::Isub => {
                    let v6 = C::unpack_value_array_2(ctx, v5);
                    let v9 = C::def_inst(ctx, v6.1);
                    if let Some(v10) = v9 {
                        let v11 = &C::inst_data_value(ctx, v10);
                        if let &InstructionData::UnaryImm {
                            opcode: ref v12,
                            imm: v13,
                        } = v11 {
                            if let &Opcode::Iconst = v12 {
                                let v14 = C::u64_from_imm64(ctx, v13);
                                if v14 == 0x1_u64 {
                                    let v15 = Some(v6.0);
                                    // Rule at src\isa\x64\lower.isle line 403.
                                    return v15;
                                }
                            }
                        }
                    }
                }
                _ => {}
            }
        }
    }
    None
}

// Generated as internal constructor for term sse_or.
pub fn constructor_sse_or<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &XmmMem,
) -> Xmm {
    match arg0 {
        F32 => {
            let v3 = constructor_x64_orps(ctx, arg1, arg2);
            // Rule at src\isa\x64\lower.isle line 469.
            return v3;
        }
        F64 => {
            let v4 = constructor_x64_orpd(ctx, arg1, arg2);
            // Rule at src\isa\x64\lower.isle line 470.
            return v4;
        }
        F32X4 => {
            let v3 = constructor_x64_orps(ctx, arg1, arg2);
            // Rule at src\isa\x64\lower.isle line 467.
            return v3;
        }
        F64X2 => {
            let v4 = constructor_x64_orpd(ctx, arg1, arg2);
            // Rule at src\isa\x64\lower.isle line 468.
            return v4;
        }
        _ => {}
    }
    let v5 = C::multi_lane(ctx, arg0);
    if let Some(v6) = v5 {
        let v9 = constructor_x64_por(ctx, arg1, arg2);
        // Rule at src\isa\x64\lower.isle line 471.
        return v9;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "sse_or", "src\\isa\\x64\\lower.isle line 466")
}

// Generated as internal constructor for term or_i128.
pub fn constructor_or_i128<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: ValueRegs,
) -> ValueRegs {
    let v3 = constructor_value_regs_get_gpr(ctx, arg0, 0x0_usize);
    let v5 = constructor_value_regs_get_gpr(ctx, arg0, 0x1_usize);
    let v6 = constructor_value_regs_get_gpr(ctx, arg1, 0x0_usize);
    let v7 = constructor_value_regs_get_gpr(ctx, arg1, 0x1_usize);
    let v9 = &C::gpr_to_gpr_mem_imm(ctx, v6);
    let v10 = constructor_x64_or(ctx, I64, v3, v9);
    let v11 = &C::gpr_to_gpr_mem_imm(ctx, v7);
    let v12 = constructor_x64_or(ctx, I64, v5, v11);
    let v13 = constructor_value_gprs(ctx, v10, v12);
    // Rule at src\isa\x64\lower.isle line 480.
    return v13;
}

// Generated as internal constructor for term shl_i128.
pub fn constructor_shl_i128<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: Gpr,
) -> ValueRegs {
    let v3 = constructor_value_regs_get_gpr(ctx, arg0, 0x0_usize);
    let v5 = constructor_value_regs_get_gpr(ctx, arg0, 0x1_usize);
    let v7 = &C::gpr_to_imm8_gpr(ctx, arg1);
    let v8 = constructor_x64_shl(ctx, I64, v3, v7);
    let v9 = &C::gpr_to_imm8_gpr(ctx, arg1);
    let v10 = constructor_x64_shl(ctx, I64, v5, v9);
    let v12 = constructor_imm(ctx, I64, 0x40_u64);
    let v13 = C::gpr_new(ctx, v12);
    let v14 = &C::gpr_to_gpr_mem_imm(ctx, arg1);
    let v15 = constructor_x64_sub(ctx, I64, v13, v14);
    let v16 = &C::gpr_to_imm8_gpr(ctx, v15);
    let v17 = constructor_x64_shr(ctx, I64, v3, v16);
    let v19 = constructor_imm(ctx, I64, 0x0_u64);
    let v20 = C::gpr_new(ctx, v19);
    let v23 = RegMemImm::Imm {
        simm32: 0x7f_u32,
    };
    let v24 = &C::gpr_mem_imm_new(ctx, &v23);
    let v25 = &constructor_x64_test(ctx, &OperandSize::Size64, arg1, v24);
    let v27 = &C::gpr_to_gpr_mem(ctx, v20);
    let v28 = &constructor_cmove(ctx, I64, &CC::Z, v27, v17);
    let v29 = constructor_with_flags_reg(ctx, v25, v28);
    let v30 = C::gpr_new(ctx, v29);
    let v31 = &C::gpr_to_gpr_mem_imm(ctx, v10);
    let v32 = constructor_x64_or(ctx, I64, v30, v31);
    let v34 = RegMemImm::Imm {
        simm32: 0x40_u32,
    };
    let v35 = &C::gpr_mem_imm_new(ctx, &v34);
    let v36 = &constructor_x64_test(ctx, &OperandSize::Size64, arg1, v35);
    let v37 = &C::gpr_to_gpr_mem(ctx, v8);
    let v38 = &constructor_cmove(ctx, I64, &CC::Z, v37, v20);
    let v39 = &C::gpr_to_gpr_mem(ctx, v32);
    let v40 = &constructor_cmove(ctx, I64, &CC::Z, v39, v8);
    let v41 = &constructor_consumes_flags_concat(ctx, v38, v40);
    let v42 = constructor_with_flags(ctx, v36, v41);
    // Rule at src\isa\x64\lower.isle line 569.
    return v42;
}

// Generated as internal constructor for term ishl_i8x16_mask.
pub fn constructor_ishl_i8x16_mask<C: Context>(
    ctx: &mut C,
    arg0: &RegMemImm,
) -> SyntheticAmode {
    match arg0 {
        &RegMemImm::Reg {
            reg: v3,
        } => {
            let v4 = &C::ishl_i8x16_mask_table(ctx);
            let v6 = constructor_x64_lea(ctx, I64, v4);
            let v7 = C::gpr_new(ctx, v3);
            let v9 = &C::imm8_to_imm8_gpr(ctx, 0x4_u8);
            let v10 = constructor_x64_shl(ctx, I64, v7, v9);
            let v13 = C::mem_flags_trusted(ctx);
            let v14 = Amode::ImmRegRegShift {
                simm32: 0_i32,
                base: v6,
                index: v10,
                shift: 0x0_u8,
                flags: v13,
            };
            let v15 = &C::amode_to_synthetic_amode(ctx, &v14);
            // Rule at src\isa\x64\lower.isle line 643.
            return v15.clone();
        }
        &RegMemImm::Mem {
            addr: ref v16,
        } => {
            let v18 = constructor_x64_load(ctx, I64, v16, &ExtKind::None);
            let v19 = RegMemImm::Reg {
                reg: v18,
            };
            let v20 = &constructor_ishl_i8x16_mask(ctx, &v19);
            // Rule at src\isa\x64\lower.isle line 654.
            return v20.clone();
        }
        &RegMemImm::Imm {
            simm32: v1,
        } => {
            let v2 = &C::ishl_i8x16_mask_for_const(ctx, v1);
            // Rule at src\isa\x64\lower.isle line 634.
            return v2.clone();
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "ishl_i8x16_mask", "src\\isa\\x64\\lower.isle line 628")
}

// Generated as internal constructor for term shr_i128.
pub fn constructor_shr_i128<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: Gpr,
) -> ValueRegs {
    let v3 = constructor_value_regs_get_gpr(ctx, arg0, 0x0_usize);
    let v5 = constructor_value_regs_get_gpr(ctx, arg0, 0x1_usize);
    let v7 = &C::gpr_to_imm8_gpr(ctx, arg1);
    let v8 = constructor_x64_shr(ctx, I64, v3, v7);
    let v9 = &C::gpr_to_imm8_gpr(ctx, arg1);
    let v10 = constructor_x64_shr(ctx, I64, v5, v9);
    let v12 = constructor_imm(ctx, I64, 0x40_u64);
    let v13 = C::gpr_new(ctx, v12);
    let v14 = &C::gpr_to_gpr_mem_imm(ctx, arg1);
    let v15 = constructor_x64_sub(ctx, I64, v13, v14);
    let v16 = &C::gpr_to_imm8_gpr(ctx, v15);
    let v17 = constructor_x64_shl(ctx, I64, v5, v16);
    let v19 = constructor_imm(ctx, I64, 0x0_u64);
    let v20 = C::gpr_new(ctx, v19);
    let v23 = RegMemImm::Imm {
        simm32: 0x7f_u32,
    };
    let v24 = &C::gpr_mem_imm_new(ctx, &v23);
    let v25 = &constructor_x64_test(ctx, &OperandSize::Size64, arg1, v24);
    let v27 = &C::gpr_to_gpr_mem(ctx, v20);
    let v28 = &constructor_cmove(ctx, I64, &CC::Z, v27, v17);
    let v29 = constructor_with_flags_reg(ctx, v25, v28);
    let v30 = C::gpr_new(ctx, v29);
    let v31 = &C::gpr_to_gpr_mem_imm(ctx, v8);
    let v32 = constructor_x64_or(ctx, I64, v30, v31);
    let v34 = RegMemImm::Imm {
        simm32: 0x40_u32,
    };
    let v35 = &C::gpr_mem_imm_new(ctx, &v34);
    let v36 = &constructor_x64_test(ctx, &OperandSize::Size64, arg1, v35);
    let v37 = &C::gpr_to_gpr_mem(ctx, v32);
    let v38 = &constructor_cmove(ctx, I64, &CC::Z, v37, v10);
    let v39 = &C::gpr_to_gpr_mem(ctx, v10);
    let v40 = &constructor_cmove(ctx, I64, &CC::Z, v39, v20);
    let v41 = &constructor_consumes_flags_concat(ctx, v38, v40);
    let v42 = constructor_with_flags(ctx, v36, v41);
    // Rule at src\isa\x64\lower.isle line 679.
    return v42;
}

// Generated as internal constructor for term ushr_i8x16_mask.
pub fn constructor_ushr_i8x16_mask<C: Context>(
    ctx: &mut C,
    arg0: &RegMemImm,
) -> SyntheticAmode {
    match arg0 {
        &RegMemImm::Reg {
            reg: v3,
        } => {
            let v4 = &C::ushr_i8x16_mask_table(ctx);
            let v6 = constructor_x64_lea(ctx, I64, v4);
            let v7 = C::gpr_new(ctx, v3);
            let v9 = &C::imm8_to_imm8_gpr(ctx, 0x4_u8);
            let v10 = constructor_x64_shl(ctx, I64, v7, v9);
            let v13 = C::mem_flags_trusted(ctx);
            let v14 = Amode::ImmRegRegShift {
                simm32: 0_i32,
                base: v6,
                index: v10,
                shift: 0x0_u8,
                flags: v13,
            };
            let v15 = &C::amode_to_synthetic_amode(ctx, &v14);
            // Rule at src\isa\x64\lower.isle line 748.
            return v15.clone();
        }
        &RegMemImm::Mem {
            addr: ref v16,
        } => {
            let v18 = constructor_x64_load(ctx, I64, v16, &ExtKind::None);
            let v19 = RegMemImm::Reg {
                reg: v18,
            };
            let v20 = &constructor_ushr_i8x16_mask(ctx, &v19);
            // Rule at src\isa\x64\lower.isle line 760.
            return v20.clone();
        }
        &RegMemImm::Imm {
            simm32: v1,
        } => {
            let v2 = &C::ushr_i8x16_mask_for_const(ctx, v1);
            // Rule at src\isa\x64\lower.isle line 739.
            return v2.clone();
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "ushr_i8x16_mask", "src\\isa\\x64\\lower.isle line 733")
}

// Generated as internal constructor for term mask_xmm_shift.
pub fn constructor_mask_xmm_shift<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> RegMemImm {
    let v11 = C::def_inst(ctx, arg1);
    if let Some(v12) = v11 {
        let v13 = &C::inst_data_value(ctx, v12);
        if let &InstructionData::UnaryImm {
            opcode: ref v14,
            imm: v15,
        } = v13 {
            if let &Opcode::Iconst = v14 {
                let v16 = C::shift_amount_masked(ctx, arg0, v15);
                let v17 = C::u8_as_u32(ctx, v16);
                let v18 = RegMemImm::Imm {
                    simm32: v17,
                };
                // Rule at src\isa\x64\lower.isle line 777.
                return v18;
            }
        }
    }
    let v3 = constructor_put_in_gpr(ctx, arg1);
    let v4 = C::shift_mask(ctx, arg0);
    let v5 = C::u8_as_u32(ctx, v4);
    let v6 = RegMemImm::Imm {
        simm32: v5,
    };
    let v7 = &C::gpr_mem_imm_new(ctx, &v6);
    let v8 = constructor_x64_and(ctx, I64, v3, v7);
    let v9 = C::gpr_to_reg(ctx, v8);
    let v10 = &C::reg_to_reg_mem_imm(ctx, v9);
    // Rule at src\isa\x64\lower.isle line 775.
    return v10.clone();
}

// Generated as internal constructor for term sar_i128.
pub fn constructor_sar_i128<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: Gpr,
) -> ValueRegs {
    let v3 = constructor_value_regs_get_gpr(ctx, arg0, 0x0_usize);
    let v5 = constructor_value_regs_get_gpr(ctx, arg0, 0x1_usize);
    let v7 = &C::gpr_to_imm8_gpr(ctx, arg1);
    let v8 = constructor_x64_shr(ctx, I64, v3, v7);
    let v9 = &C::gpr_to_imm8_gpr(ctx, arg1);
    let v10 = constructor_x64_sar(ctx, I64, v5, v9);
    let v12 = constructor_imm(ctx, I64, 0x40_u64);
    let v13 = C::gpr_new(ctx, v12);
    let v14 = &C::gpr_to_gpr_mem_imm(ctx, arg1);
    let v15 = constructor_x64_sub(ctx, I64, v13, v14);
    let v16 = &C::gpr_to_imm8_gpr(ctx, v15);
    let v17 = constructor_x64_shl(ctx, I64, v5, v16);
    let v20 = RegMemImm::Imm {
        simm32: 0x7f_u32,
    };
    let v21 = &C::gpr_mem_imm_new(ctx, &v20);
    let v22 = &constructor_x64_test(ctx, &OperandSize::Size64, arg1, v21);
    let v25 = constructor_imm(ctx, I64, 0x0_u64);
    let v26 = &C::reg_to_gpr_mem(ctx, v25);
    let v27 = &constructor_cmove(ctx, I64, &CC::Z, v26, v17);
    let v28 = constructor_with_flags_reg(ctx, v22, v27);
    let v29 = C::gpr_new(ctx, v28);
    let v30 = &C::gpr_to_gpr_mem_imm(ctx, v29);
    let v31 = constructor_x64_or(ctx, I64, v8, v30);
    let v33 = &C::imm8_to_imm8_gpr(ctx, 0x3f_u8);
    let v34 = constructor_x64_sar(ctx, I64, v5, v33);
    let v36 = RegMemImm::Imm {
        simm32: 0x40_u32,
    };
    let v37 = &C::gpr_mem_imm_new(ctx, &v36);
    let v38 = &constructor_x64_test(ctx, &OperandSize::Size64, arg1, v37);
    let v39 = &C::gpr_to_gpr_mem(ctx, v31);
    let v40 = &constructor_cmove(ctx, I64, &CC::Z, v39, v10);
    let v41 = &C::gpr_to_gpr_mem(ctx, v10);
    let v42 = &constructor_cmove(ctx, I64, &CC::Z, v41, v34);
    let v43 = &constructor_consumes_flags_concat(ctx, v40, v42);
    let v44 = constructor_with_flags(ctx, v38, v43);
    // Rule at src\isa\x64\lower.isle line 791.
    return v44;
}

// Generated as internal constructor for term sshr_i8x16_bigger_shift.
pub fn constructor_sshr_i8x16_bigger_shift<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &RegMemImm,
) -> XmmMemImm {
    match arg1 {
        &RegMemImm::Reg {
            reg: v7,
        } => {
            let v8 = C::gpr_new(ctx, v7);
            let v9 = RegMemImm::Imm {
                simm32: 0x8_u32,
            };
            let v10 = &C::gpr_mem_imm_new(ctx, &v9);
            let v11 = constructor_x64_add(ctx, arg0, v8, v10);
            let v12 = C::gpr_to_reg(ctx, v11);
            let v13 = RegMemImm::Reg {
                reg: v12,
            };
            let v14 = &constructor_mov_rmi_to_xmm(ctx, &v13);
            // Rule at src\isa\x64\lower.isle line 859.
            return v14.clone();
        }
        &RegMemImm::Mem {
            addr: ref v15,
        } => {
            let v17 = constructor_imm(ctx, arg0, 0x8_u64);
            let v18 = C::gpr_new(ctx, v17);
            let v19 = &C::gpr_mem_imm_new(ctx, arg1);
            let v20 = constructor_x64_add(ctx, arg0, v18, v19);
            let v21 = C::gpr_to_reg(ctx, v20);
            let v22 = RegMemImm::Reg {
                reg: v21,
            };
            let v23 = &constructor_mov_rmi_to_xmm(ctx, &v22);
            // Rule at src\isa\x64\lower.isle line 863.
            return v23.clone();
        }
        &RegMemImm::Imm {
            simm32: v2,
        } => {
            let v4 = C::u32_add(ctx, v2, 0x8_u32);
            let v5 = RegMemImm::Imm {
                simm32: v4,
            };
            let v6 = &C::xmm_mem_imm_new(ctx, &v5);
            // Rule at src\isa\x64\lower.isle line 857.
            return v6.clone();
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "sshr_i8x16_bigger_shift", "src\\isa\\x64\\lower.isle line 856")
}

// Generated as internal constructor for term lower_i64x2_sshr_imm.
pub fn constructor_lower_i64x2_sshr_imm<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: u32,
) -> Xmm {
    let v2 = C::u32_as_u64(ctx, arg1);
    let v4 = C::u64_lt(ctx, v2, 0x20_u64);
    if v4 == true {
        let v5 = &C::xmi_imm(ctx, arg1);
        let v6 = constructor_x64_psrad(ctx, arg0, v5);
        let v7 = &C::xmm_to_xmm_mem(ctx, v6);
        let v9 = constructor_x64_pshufd(ctx, v7, 0xed_u8);
        let v10 = &C::xmi_imm(ctx, arg1);
        let v11 = constructor_x64_psrlq(ctx, arg0, v10);
        let v12 = &C::xmm_to_xmm_mem(ctx, v11);
        let v14 = constructor_x64_pshufd(ctx, v12, 0xe8_u8);
        let v15 = &C::xmm_to_xmm_mem(ctx, v9);
        let v16 = constructor_x64_punpckldq(ctx, v14, v15);
        // Rule at src\isa\x64\lower.isle line 902.
        return v16;
    }
    if arg1 == 0x20_u32 {
        let v17 = &C::xmm_to_xmm_mem(ctx, arg0);
        let v18 = constructor_x64_pshufd(ctx, v17, 0xed_u8);
        let v20 = &C::xmi_imm(ctx, 0x1f_u32);
        let v21 = constructor_x64_psrad(ctx, arg0, v20);
        let v22 = &C::xmm_to_xmm_mem(ctx, v21);
        let v23 = constructor_x64_pshufd(ctx, v22, 0xed_u8);
        let v24 = &C::xmm_to_xmm_mem(ctx, v23);
        let v25 = constructor_x64_punpckldq(ctx, v18, v24);
        // Rule at src\isa\x64\lower.isle line 913.
        return v25;
    }
    let v26 = C::u64_lt(ctx, 0x20_u64, v2);
    if v26 == true {
        let v27 = &C::xmi_imm(ctx, 0x1f_u32);
        let v28 = constructor_x64_psrad(ctx, arg0, v27);
        let v29 = &C::xmm_to_xmm_mem(ctx, v28);
        let v30 = constructor_x64_pshufd(ctx, v29, 0xed_u8);
        let v32 = C::u32_sub(ctx, arg1, 0x20_u32);
        let v33 = &C::xmi_imm(ctx, v32);
        let v34 = constructor_x64_psrad(ctx, arg0, v33);
        let v35 = &C::xmm_to_xmm_mem(ctx, v34);
        let v36 = constructor_x64_pshufd(ctx, v35, 0xed_u8);
        let v37 = &C::xmm_to_xmm_mem(ctx, v30);
        let v38 = constructor_x64_punpckldq(ctx, v36, v37);
        // Rule at src\isa\x64\lower.isle line 924.
        return v38;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "lower_i64x2_sshr_imm", "src\\isa\\x64\\lower.isle line 897")
}

// Generated as internal constructor for term lower_i64x2_sshr_gpr.
pub fn constructor_lower_i64x2_sshr_gpr<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: Gpr,
) -> Xmm {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg1);
    let v3 = constructor_x64_movq_to_xmm(ctx, v2);
    let v5 = constructor_flip_high_bit_mask(ctx, I64X2);
    let v6 = &C::xmm_to_xmm_mem_imm(ctx, v3);
    let v7 = constructor_x64_psrlq(ctx, v5, v6);
    let v8 = &C::xmm_to_xmm_mem_imm(ctx, v3);
    let v9 = constructor_x64_psrlq(ctx, arg0, v8);
    let v10 = &C::xmm_to_xmm_mem(ctx, v9);
    let v11 = constructor_x64_pxor(ctx, v7, v10);
    let v12 = &C::xmm_to_xmm_mem(ctx, v7);
    let v13 = constructor_x64_psubq(ctx, v11, v12);
    // Rule at src\isa\x64\lower.isle line 939.
    return v13;
}

// Generated as internal constructor for term imul128.
pub fn constructor_imul128<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
    arg2: &GprMem,
    arg3: &GprMem,
) -> ValueRegs {
    let v5 = constructor_x64_imul(ctx, I64, arg0, arg3);
    let v6 = constructor_x64_imul(ctx, I64, arg1, arg2);
    let v7 = &C::gpr_to_gpr_mem_imm(ctx, v6);
    let v8 = constructor_x64_add(ctx, I64, v5, v7);
    let v9 = false;
    let v10 = constructor_x64_mul(ctx, I64, v9, arg0, arg2);
    let v12 = constructor_value_regs_get_gpr(ctx, v10, 0x0_usize);
    let v14 = constructor_value_regs_get_gpr(ctx, v10, 0x1_usize);
    let v15 = &C::gpr_to_gpr_mem_imm(ctx, v14);
    let v16 = constructor_x64_add(ctx, I64, v8, v15);
    let v17 = constructor_value_gprs(ctx, v12, v16);
    // Rule at src\isa\x64\lower.isle line 1092.
    return v17;
}

// Generated as internal constructor for term lower_bmask.
pub fn constructor_lower_bmask<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Type,
    arg2: ValueRegs,
) -> ValueRegs {
    if arg0 == I128 {
        let v23 = constructor_lower_bmask(ctx, I64, arg1, arg2);
        let v24 = constructor_value_regs_get_gpr(ctx, v23, 0x0_usize);
        let v25 = C::gpr_to_reg(ctx, v24);
        let v26 = C::gpr_to_reg(ctx, v24);
        let v27 = C::value_regs(ctx, v25, v26);
        // Rule at src\isa\x64\lower.isle line 1456.
        return v27;
    }
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        if arg1 == I128 {
            let v8 = constructor_value_regs_get_gpr(ctx, arg2, 0x0_usize);
            let v16 = constructor_value_regs_get_gpr(ctx, arg2, 0x1_usize);
            let v18 = &C::gpr_to_gpr_mem_imm(ctx, v16);
            let v19 = constructor_x64_or(ctx, I64, v8, v18);
            let v20 = C::gpr_to_reg(ctx, v19);
            let v21 = C::value_reg(ctx, v20);
            let v22 = constructor_lower_bmask(ctx, v2, I64, v21);
            // Rule at src\isa\x64\lower.isle line 1448.
            return v22;
        }
        let v4 = C::fits_in_64(ctx, arg1);
        if let Some(v5) = v4 {
            let v8 = constructor_value_regs_get_gpr(ctx, arg2, 0x0_usize);
            let v9 = &constructor_x64_neg_paired(ctx, v5, v8);
            let v10 = &C::gpr_to_gpr_mem_imm(ctx, v8);
            let v11 = &constructor_x64_sbb_paired(ctx, v2, v8, v10);
            let v12 = constructor_with_flags(ctx, v9, v11);
            let v14 = C::value_regs_get(ctx, v12, 0x1_usize);
            let v15 = C::value_reg(ctx, v14);
            // Rule at src\isa\x64\lower.isle line 1437.
            return v15;
        }
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "lower_bmask", "src\\isa\\x64\\lower.isle line 1425")
}

// Generated as internal constructor for term i128_not.
pub fn constructor_i128_not<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> ValueRegs {
    let v1 = C::put_in_regs(ctx, arg0);
    let v3 = constructor_value_regs_get_gpr(ctx, v1, 0x0_usize);
    let v5 = constructor_value_regs_get_gpr(ctx, v1, 0x1_usize);
    let v7 = constructor_x64_not(ctx, I64, v3);
    let v8 = constructor_x64_not(ctx, I64, v5);
    let v9 = constructor_value_gprs(ctx, v7, v8);
    // Rule at src\isa\x64\lower.isle line 1479.
    return v9;
}

// Generated as internal constructor for term all_ones_or_all_zeros.
pub fn constructor_all_ones_or_all_zeros<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> Option<bool> {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = &C::inst_data_value(ctx, v2);
        match v3 {
            &InstructionData::FloatCompare {
                opcode: ref v17,
                args: ref v18,
                cond: ref v19,
            } => {
                if let &Opcode::Fcmp = v17 {
                    let v10 = C::value_type(ctx, arg0);
                    let v11 = C::multi_lane(ctx, v10);
                    if let Some(v12) = v11 {
                        let v15 = true;
                        let v16 = Some(v15);
                        // Rule at src\isa\x64\lower.isle line 1525.
                        return v16;
                    }
                }
            }
            &InstructionData::IntCompare {
                opcode: ref v4,
                args: ref v5,
                cond: ref v6,
            } => {
                if let &Opcode::Icmp = v4 {
                    let v10 = C::value_type(ctx, arg0);
                    let v11 = C::multi_lane(ctx, v10);
                    if let Some(v12) = v11 {
                        let v15 = true;
                        let v16 = Some(v15);
                        // Rule at src\isa\x64\lower.isle line 1524.
                        return v16;
                    }
                }
            }
            &InstructionData::LoadNoOffset {
                opcode: ref v23,
                arg: v24,
                flags: v25,
            } => {
                if let &Opcode::Bitcast = v23 {
                    let v10 = C::value_type(ctx, arg0);
                    let v11 = C::multi_lane(ctx, v10);
                    if let Some(v12) = v11 {
                        let v26 = C::def_inst(ctx, v24);
                        if let Some(v27) = v26 {
                            let v28 = &C::inst_data_value(ctx, v27);
                            if let &InstructionData::FloatCompare {
                                opcode: ref v29,
                                args: ref v30,
                                cond: ref v31,
                            } = v28 {
                                if let &Opcode::Fcmp = v29 {
                                    let v15 = true;
                                    let v16 = Some(v15);
                                    // Rule at src\isa\x64\lower.isle line 1526.
                                    return v16;
                                }
                            }
                        }
                    }
                }
            }
            &InstructionData::UnaryConst {
                opcode: ref v35,
                constant_handle: v36,
            } => {
                if let &Opcode::Vconst = v35 {
                    let v37 = C::vconst_all_ones_or_all_zeros(ctx, v36);
                    if let Some(v38) = v37 {
                        let v15 = true;
                        let v16 = Some(v15);
                        // Rule at src\isa\x64\lower.isle line 1527.
                        return v16;
                    }
                }
            }
            _ => {}
        }
    }
    None
}

// Generated as internal constructor for term insert_i8x16_lane_pshufd_imm.
pub fn constructor_insert_i8x16_lane_pshufd_imm<C: Context>(
    ctx: &mut C,
    arg0: u8,
) -> u8 {
    match arg0 {
        0x0_u8 => {
            // Rule at src\isa\x64\lower.isle line 1626.
            return 0x54_u8;
        }
        0x1_u8 => {
            // Rule at src\isa\x64\lower.isle line 1627.
            return 0x51_u8;
        }
        0x2_u8 => {
            // Rule at src\isa\x64\lower.isle line 1628.
            return 0x45_u8;
        }
        0x3_u8 => {
            // Rule at src\isa\x64\lower.isle line 1629.
            return 0x15_u8;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "insert_i8x16_lane_pshufd_imm", "src\\isa\\x64\\lower.isle line 1625")
}

// Generated as internal constructor for term f32x4_insertlane.
pub fn constructor_f32x4_insertlane<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: Xmm,
    arg2: u8,
) -> Xmm {
    let v3 = C::use_sse41(ctx);
    if v3 == true {
        let v4 = &C::xmm_to_xmm_mem(ctx, arg1);
        let v5 = C::sse_insertps_lane_imm(ctx, arg2);
        let v6 = constructor_x64_insertps(ctx, arg0, v4, v5);
        // Rule at src\isa\x64\lower.isle line 1695.
        return v6;
    }
    match arg2 {
        0x0_u8 => {
            let v7 = constructor_x64_movss_regmove(ctx, arg0, arg1);
            // Rule at src\isa\x64\lower.isle line 1704.
            return v7;
        }
        0x1_u8 => {
            let v8 = &C::xmm_to_xmm_mem(ctx, arg0);
            let v9 = constructor_x64_movlhps(ctx, arg1, v8);
            let v10 = &C::xmm_to_xmm_mem(ctx, arg0);
            let v12 = constructor_x64_shufps(ctx, v9, v10, 0xe2_u8);
            // Rule at src\isa\x64\lower.isle line 1710.
            return v12;
        }
        0x2_u8 => {
            let v8 = &C::xmm_to_xmm_mem(ctx, arg0);
            let v14 = constructor_x64_shufps(ctx, arg1, v8, 0x30_u8);
            let v15 = &C::xmm_to_xmm_mem(ctx, v14);
            let v17 = constructor_x64_shufps(ctx, arg0, v15, 0x84_u8);
            // Rule at src\isa\x64\lower.isle line 1717.
            return v17;
        }
        0x3_u8 => {
            let v8 = &C::xmm_to_xmm_mem(ctx, arg0);
            let v19 = constructor_x64_shufps(ctx, arg1, v8, 0xe4_u8);
            let v20 = &C::xmm_to_xmm_mem(ctx, v19);
            let v22 = constructor_x64_shufps(ctx, arg0, v20, 0x24_u8);
            // Rule at src\isa\x64\lower.isle line 1724.
            return v22;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "f32x4_insertlane", "src\\isa\\x64\\lower.isle line 1692")
}

// Generated as internal constructor for term cmp_and_choose.
pub fn constructor_cmp_and_choose<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &CC,
    arg2: Value,
    arg3: Value,
) -> ValueRegs {
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = &C::raw_operand_size_of_type(ctx, v2);
        let v7 = C::put_in_reg(ctx, arg2);
        let v8 = C::put_in_reg(ctx, arg3);
        let v9 = C::gpr_new(ctx, v8);
        let v10 = &constructor_reg_to_gpr_mem_imm(ctx, v7);
        let v11 = &constructor_x64_cmp(ctx, v6, v9, v10);
        let v12 = &C::reg_to_gpr_mem(ctx, v8);
        let v13 = C::gpr_new(ctx, v7);
        let v14 = &constructor_cmove(ctx, v2, arg1, v12, v13);
        let v15 = constructor_with_flags_reg(ctx, v11, v14);
        let v16 = C::value_reg(ctx, v15);
        // Rule at src\isa\x64\lower.isle line 1749.
        return v16;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "cmp_and_choose", "src\\isa\\x64\\lower.isle line 1748")
}

// Generated as internal constructor for term has_pmins.
pub fn constructor_has_pmins<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> bool {
    match arg0 {
        I16X8 => {
            let v1 = true;
            // Rule at src\isa\x64\lower.isle line 1775.
            return v1;
        }
        I64X2 => {
            let v2 = false;
            // Rule at src\isa\x64\lower.isle line 1776.
            return v2;
        }
        _ => {}
    }
    let v3 = C::use_sse41(ctx);
    // Rule at src\isa\x64\lower.isle line 1777.
    return v3;
}

// Generated as internal constructor for term has_pmaxs.
pub fn constructor_has_pmaxs<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> bool {
    match arg0 {
        I16X8 => {
            let v1 = true;
            // Rule at src\isa\x64\lower.isle line 1780.
            return v1;
        }
        I64X2 => {
            let v2 = false;
            // Rule at src\isa\x64\lower.isle line 1781.
            return v2;
        }
        _ => {}
    }
    let v3 = C::use_sse41(ctx);
    // Rule at src\isa\x64\lower.isle line 1782.
    return v3;
}

// Generated as internal constructor for term has_pmaxu.
pub fn constructor_has_pmaxu<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> bool {
    match arg0 {
        I8X16 => {
            let v1 = true;
            // Rule at src\isa\x64\lower.isle line 1785.
            return v1;
        }
        I64X2 => {
            let v2 = false;
            // Rule at src\isa\x64\lower.isle line 1786.
            return v2;
        }
        _ => {}
    }
    let v3 = C::use_sse41(ctx);
    // Rule at src\isa\x64\lower.isle line 1787.
    return v3;
}

// Generated as internal constructor for term has_pminu.
pub fn constructor_has_pminu<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> bool {
    match arg0 {
        I8X16 => {
            let v1 = true;
            // Rule at src\isa\x64\lower.isle line 1790.
            return v1;
        }
        I64X2 => {
            let v2 = false;
            // Rule at src\isa\x64\lower.isle line 1791.
            return v2;
        }
        _ => {}
    }
    let v3 = C::use_sse41(ctx);
    // Rule at src\isa\x64\lower.isle line 1792.
    return v3;
}

// Generated as internal constructor for term lower_vec_smax.
pub fn constructor_lower_vec_smax<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: Xmm,
) -> Xmm {
    let v3 = constructor_has_pmaxs(ctx, arg0);
    if v3 == true {
        let v4 = &C::xmm_to_xmm_mem(ctx, arg2);
        let v5 = constructor_x64_pmaxs(ctx, arg0, arg1, v4);
        // Rule at src\isa\x64\lower.isle line 1800.
        return v5;
    }
    let v4 = &C::xmm_to_xmm_mem(ctx, arg2);
    let v6 = constructor_x64_pcmpgt(ctx, arg0, arg1, v4);
    let v7 = &C::xmm_to_xmm_mem(ctx, arg1);
    let v8 = constructor_x64_pand(ctx, v6, v7);
    let v9 = &C::xmm_to_xmm_mem(ctx, arg2);
    let v10 = constructor_x64_pandn(ctx, v6, v9);
    let v11 = &C::xmm_to_xmm_mem(ctx, v10);
    let v12 = constructor_x64_por(ctx, v8, v11);
    // Rule at src\isa\x64\lower.isle line 1804.
    return v12;
}

// Generated as internal constructor for term flip_high_bit_mask.
pub fn constructor_flip_high_bit_mask<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> Xmm {
    match arg0 {
        I16X8 => {
            let v2 = C::emit_u128_le_const(ctx, 0x80008000800080008000800080008000_u128);
            let v3 = &constructor_const_to_xmm_mem(ctx, v2);
            let v4 = constructor_x64_movdqu_load(ctx, v3);
            // Rule at src\isa\x64\lower.isle line 1859.
            return v4;
        }
        I32X4 => {
            let v6 = C::emit_u128_le_const(ctx, 0x80000000800000008000000080000000_u128);
            let v7 = &constructor_const_to_xmm_mem(ctx, v6);
            let v8 = constructor_x64_movdqu_load(ctx, v7);
            // Rule at src\isa\x64\lower.isle line 1861.
            return v8;
        }
        I64X2 => {
            let v10 = C::emit_u128_le_const(ctx, 0x80000000000000008000000000000000_u128);
            let v11 = &constructor_const_to_xmm_mem(ctx, v10);
            let v12 = constructor_x64_movdqu_load(ctx, v11);
            // Rule at src\isa\x64\lower.isle line 1863.
            return v12;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "flip_high_bit_mask", "src\\isa\\x64\\lower.isle line 1858")
}

// Generated as internal constructor for term lower_select_fcmp.
pub fn constructor_lower_select_fcmp<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FcmpCondResult,
    arg2: Value,
    arg3: Value,
) -> InstOutput {
    match arg1 {
        &FcmpCondResult::Condition {
            producer: ref v2,
            cc: ref v3,
        } => {
            let v6 = &constructor_cmove_from_values(ctx, arg0, v3, arg2, arg3);
            let v7 = constructor_with_flags(ctx, v2, v6);
            let v8 = C::output(ctx, v7);
            // Rule at src\isa\x64\lower.isle line 2193.
            return v8;
        }
        &FcmpCondResult::OrCondition {
            producer: ref v9,
            cc1: ref v10,
            cc2: ref v11,
        } => {
            let v12 = &constructor_cmove_or_from_values(ctx, arg0, v10, v11, arg2, arg3);
            let v13 = constructor_with_flags(ctx, v9, v12);
            let v14 = C::output(ctx, v13);
            // Rule at src\isa\x64\lower.isle line 2195.
            return v14;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "lower_select_fcmp", "src\\isa\\x64\\lower.isle line 2192")
}

// Generated as internal constructor for term lower_select_icmp.
pub fn constructor_lower_select_icmp<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &IcmpCondResult,
    arg2: Value,
    arg3: Value,
) -> InstOutput {
    if let &IcmpCondResult::Condition {
        producer: ref v2,
        cc: ref v3,
    } = arg1 {
        let v6 = &constructor_cmove_from_values(ctx, arg0, v3, arg2, arg3);
        let v7 = constructor_with_flags(ctx, v2, v6);
        let v8 = C::output(ctx, v7);
        // Rule at src\isa\x64\lower.isle line 2221.
        return v8;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "lower_select_icmp", "src\\isa\\x64\\lower.isle line 2220")
}

// Generated as internal constructor for term do_clz.
pub fn constructor_do_clz<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Type,
    arg2: Gpr,
) -> Gpr {
    let v3 = C::use_lzcnt(ctx);
    if v3 == true {
        let v4 = constructor_x64_lzcnt(ctx, arg0, arg2);
        // Rule at src\isa\x64\lower.isle line 2267.
        return v4;
    }
    let v7 = constructor_imm_i64(ctx, I64, -1_i64);
    let v8 = C::gpr_new(ctx, v7);
    let v9 = constructor_bsr_or_else(ctx, arg0, arg2, v8);
    let v10 = C::gpr_to_reg(ctx, v9);
    let v11 = C::ty_bits_u64(ctx, arg1);
    let v13 = C::u64_sub(ctx, v11, 0x1_u64);
    let v14 = constructor_imm(ctx, arg0, v13);
    let v15 = C::gpr_new(ctx, v14);
    let v16 = &constructor_reg_to_gpr_mem_imm(ctx, v10);
    let v17 = constructor_x64_sub(ctx, arg0, v15, v16);
    // Rule at src\isa\x64\lower.isle line 2271.
    return v17;
}

// Generated as internal constructor for term do_ctz.
pub fn constructor_do_ctz<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Type,
    arg2: Gpr,
) -> Gpr {
    let v3 = C::use_bmi1(ctx);
    if v3 == true {
        let v4 = constructor_x64_tzcnt(ctx, arg0, arg2);
        // Rule at src\isa\x64\lower.isle line 2303.
        return v4;
    }
    let v6 = C::ty_bits_u64(ctx, arg1);
    let v7 = constructor_imm(ctx, I64, v6);
    let v8 = C::gpr_new(ctx, v7);
    let v9 = constructor_bsf_or_else(ctx, arg0, arg2, v8);
    // Rule at src\isa\x64\lower.isle line 2307.
    return v9;
}

// Generated as internal constructor for term do_popcnt.
pub fn constructor_do_popcnt<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
) -> Gpr {
    match arg0 {
        I32 => {
            let v4 = Imm8Reg::Imm8 {
                imm: 0x1_u8,
            };
            let v5 = &C::imm8_reg_to_imm8_gpr(ctx, &v4);
            let v47 = constructor_x64_shr(ctx, I32, arg1, v5);
            let v49 = constructor_imm(ctx, I32, 0x77777777_u64);
            let v50 = C::gpr_new(ctx, v49);
            let v51 = &C::gpr_to_gpr_mem_imm(ctx, v50);
            let v52 = constructor_x64_and(ctx, I32, v47, v51);
            let v53 = &C::gpr_to_gpr_mem_imm(ctx, v52);
            let v54 = constructor_x64_sub(ctx, I32, arg1, v53);
            let v14 = &C::imm8_reg_to_imm8_gpr(ctx, &v4);
            let v55 = constructor_x64_shr(ctx, I32, v52, v14);
            let v56 = &C::gpr_to_gpr_mem_imm(ctx, v50);
            let v57 = constructor_x64_and(ctx, I32, v55, v56);
            let v58 = &C::gpr_to_gpr_mem_imm(ctx, v57);
            let v59 = constructor_x64_sub(ctx, I32, v54, v58);
            let v20 = &C::imm8_reg_to_imm8_gpr(ctx, &v4);
            let v60 = constructor_x64_shr(ctx, I32, v57, v20);
            let v61 = &C::gpr_to_gpr_mem_imm(ctx, v50);
            let v62 = constructor_x64_and(ctx, I32, v60, v61);
            let v63 = &C::gpr_to_gpr_mem_imm(ctx, v62);
            let v64 = constructor_x64_sub(ctx, I32, v59, v63);
            let v27 = Imm8Reg::Imm8 {
                imm: 0x4_u8,
            };
            let v28 = &C::imm8_reg_to_imm8_gpr(ctx, &v27);
            let v65 = constructor_x64_shr(ctx, I32, v64, v28);
            let v66 = &C::gpr_to_gpr_mem_imm(ctx, v64);
            let v67 = constructor_x64_add(ctx, I32, v65, v66);
            let v69 = RegMemImm::Imm {
                simm32: 0xf0f0f0f_u32,
            };
            let v70 = &C::gpr_mem_imm_new(ctx, &v69);
            let v71 = constructor_x64_and(ctx, I32, v67, v70);
            let v72 = &C::gpr_to_gpr_mem(ctx, v71);
            let v74 = constructor_x64_imul_imm(ctx, I32, v72, 16843009_i32);
            let v76 = Imm8Reg::Imm8 {
                imm: 0x18_u8,
            };
            let v77 = &C::imm8_reg_to_imm8_gpr(ctx, &v76);
            let v78 = constructor_x64_shr(ctx, I32, v74, v77);
            // Rule at src\isa\x64\lower.isle line 2389.
            return v78;
        }
        I64 => {
            let v4 = Imm8Reg::Imm8 {
                imm: 0x1_u8,
            };
            let v5 = &C::imm8_reg_to_imm8_gpr(ctx, &v4);
            let v6 = constructor_x64_shr(ctx, I64, arg1, v5);
            let v8 = constructor_imm(ctx, I64, 0x7777777777777777_u64);
            let v9 = C::gpr_new(ctx, v8);
            let v10 = &C::gpr_to_gpr_mem_imm(ctx, v9);
            let v11 = constructor_x64_and(ctx, I64, v6, v10);
            let v12 = &C::gpr_to_gpr_mem_imm(ctx, v11);
            let v13 = constructor_x64_sub(ctx, I64, arg1, v12);
            let v14 = &C::imm8_reg_to_imm8_gpr(ctx, &v4);
            let v15 = constructor_x64_shr(ctx, I64, v11, v14);
            let v16 = &C::gpr_to_gpr_mem_imm(ctx, v9);
            let v17 = constructor_x64_and(ctx, I64, v15, v16);
            let v18 = &C::gpr_to_gpr_mem_imm(ctx, v17);
            let v19 = constructor_x64_sub(ctx, I64, v13, v18);
            let v20 = &C::imm8_reg_to_imm8_gpr(ctx, &v4);
            let v21 = constructor_x64_shr(ctx, I64, v17, v20);
            let v22 = &C::gpr_to_gpr_mem_imm(ctx, v9);
            let v23 = constructor_x64_and(ctx, I64, v21, v22);
            let v24 = &C::gpr_to_gpr_mem_imm(ctx, v23);
            let v25 = constructor_x64_sub(ctx, I64, v19, v24);
            let v27 = Imm8Reg::Imm8 {
                imm: 0x4_u8,
            };
            let v28 = &C::imm8_reg_to_imm8_gpr(ctx, &v27);
            let v29 = constructor_x64_shr(ctx, I64, v25, v28);
            let v30 = &C::gpr_to_gpr_mem_imm(ctx, v25);
            let v31 = constructor_x64_add(ctx, I64, v29, v30);
            let v33 = constructor_imm(ctx, I64, 0xf0f0f0f0f0f0f0f_u64);
            let v34 = C::gpr_new(ctx, v33);
            let v35 = &C::gpr_to_gpr_mem_imm(ctx, v34);
            let v36 = constructor_x64_and(ctx, I64, v31, v35);
            let v38 = constructor_imm(ctx, I64, 0x101010101010101_u64);
            let v39 = C::gpr_new(ctx, v38);
            let v40 = &C::gpr_to_gpr_mem(ctx, v39);
            let v41 = constructor_x64_imul(ctx, I64, v36, v40);
            let v43 = Imm8Reg::Imm8 {
                imm: 0x38_u8,
            };
            let v44 = &C::imm8_reg_to_imm8_gpr(ctx, &v43);
            let v45 = constructor_x64_shr(ctx, I64, v41, v44);
            // Rule at src\isa\x64\lower.isle line 2346.
            return v45;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "do_popcnt", "src\\isa\\x64\\lower.isle line 2345")
}

// Generated as internal constructor for term do_bitrev8.
pub fn constructor_do_bitrev8<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
) -> Gpr {
    let v2 = C::ty_mask(ctx, arg0);
    let v4 = C::u64_and(ctx, v2, 0x5555555555555555_u64);
    let v5 = constructor_imm(ctx, arg0, v4);
    let v6 = C::gpr_new(ctx, v5);
    let v7 = &C::gpr_to_gpr_mem_imm(ctx, v6);
    let v8 = constructor_x64_and(ctx, arg0, arg1, v7);
    let v10 = Imm8Reg::Imm8 {
        imm: 0x1_u8,
    };
    let v11 = &C::imm8_reg_to_imm8_gpr(ctx, &v10);
    let v12 = constructor_x64_shr(ctx, arg0, arg1, v11);
    let v13 = &C::gpr_to_gpr_mem_imm(ctx, v6);
    let v14 = constructor_x64_and(ctx, arg0, v12, v13);
    let v15 = &C::imm8_reg_to_imm8_gpr(ctx, &v10);
    let v16 = constructor_x64_shl(ctx, arg0, v8, v15);
    let v17 = &C::gpr_to_gpr_mem_imm(ctx, v14);
    let v18 = constructor_x64_or(ctx, arg0, v16, v17);
    let v20 = C::u64_and(ctx, v2, 0x3333333333333333_u64);
    let v21 = constructor_imm(ctx, arg0, v20);
    let v22 = C::gpr_new(ctx, v21);
    let v23 = &C::gpr_to_gpr_mem_imm(ctx, v22);
    let v24 = constructor_x64_and(ctx, arg0, v18, v23);
    let v26 = Imm8Reg::Imm8 {
        imm: 0x2_u8,
    };
    let v27 = &C::imm8_reg_to_imm8_gpr(ctx, &v26);
    let v28 = constructor_x64_shr(ctx, arg0, v18, v27);
    let v29 = &C::gpr_to_gpr_mem_imm(ctx, v22);
    let v30 = constructor_x64_and(ctx, arg0, v28, v29);
    let v31 = &C::imm8_reg_to_imm8_gpr(ctx, &v26);
    let v32 = constructor_x64_shl(ctx, arg0, v24, v31);
    let v33 = &C::gpr_to_gpr_mem_imm(ctx, v30);
    let v34 = constructor_x64_or(ctx, arg0, v32, v33);
    let v36 = C::u64_and(ctx, v2, 0xf0f0f0f0f0f0f0f_u64);
    let v37 = constructor_imm(ctx, arg0, v36);
    let v38 = C::gpr_new(ctx, v37);
    let v39 = &C::gpr_to_gpr_mem_imm(ctx, v38);
    let v40 = constructor_x64_and(ctx, arg0, v34, v39);
    let v42 = Imm8Reg::Imm8 {
        imm: 0x4_u8,
    };
    let v43 = &C::imm8_reg_to_imm8_gpr(ctx, &v42);
    let v44 = constructor_x64_shr(ctx, arg0, v34, v43);
    let v45 = &C::gpr_to_gpr_mem_imm(ctx, v38);
    let v46 = constructor_x64_and(ctx, arg0, v44, v45);
    let v47 = &C::imm8_reg_to_imm8_gpr(ctx, &v42);
    let v48 = constructor_x64_shl(ctx, arg0, v40, v47);
    let v49 = &C::gpr_to_gpr_mem_imm(ctx, v46);
    let v50 = constructor_x64_or(ctx, arg0, v48, v49);
    // Rule at src\isa\x64\lower.isle line 2483.
    return v50;
}

// Generated as internal constructor for term do_bitrev16.
pub fn constructor_do_bitrev16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
) -> Gpr {
    let v2 = constructor_do_bitrev8(ctx, arg0, arg1);
    let v3 = C::ty_mask(ctx, arg0);
    let v5 = C::u64_and(ctx, v3, 0xff00ff00ff00ff_u64);
    let v6 = constructor_imm(ctx, arg0, v5);
    let v7 = C::gpr_new(ctx, v6);
    let v8 = &C::gpr_to_gpr_mem_imm(ctx, v7);
    let v9 = constructor_x64_and(ctx, arg0, v2, v8);
    let v11 = Imm8Reg::Imm8 {
        imm: 0x8_u8,
    };
    let v12 = &C::imm8_reg_to_imm8_gpr(ctx, &v11);
    let v13 = constructor_x64_shr(ctx, arg0, v2, v12);
    let v14 = &C::gpr_to_gpr_mem_imm(ctx, v7);
    let v15 = constructor_x64_and(ctx, arg0, v13, v14);
    let v16 = &C::imm8_reg_to_imm8_gpr(ctx, &v11);
    let v17 = constructor_x64_shl(ctx, arg0, v9, v16);
    let v18 = &C::gpr_to_gpr_mem_imm(ctx, v15);
    let v19 = constructor_x64_or(ctx, arg0, v17, v18);
    // Rule at src\isa\x64\lower.isle line 2506.
    return v19;
}

// Generated as internal constructor for term do_bitrev32.
pub fn constructor_do_bitrev32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
) -> Gpr {
    let v2 = constructor_do_bitrev16(ctx, arg0, arg1);
    let v3 = C::ty_mask(ctx, arg0);
    let v5 = C::u64_and(ctx, v3, 0xffff0000ffff_u64);
    let v6 = constructor_imm(ctx, arg0, v5);
    let v7 = C::gpr_new(ctx, v6);
    let v8 = &C::gpr_to_gpr_mem_imm(ctx, v7);
    let v9 = constructor_x64_and(ctx, arg0, v2, v8);
    let v11 = Imm8Reg::Imm8 {
        imm: 0x10_u8,
    };
    let v12 = &C::imm8_reg_to_imm8_gpr(ctx, &v11);
    let v13 = constructor_x64_shr(ctx, arg0, v2, v12);
    let v14 = &C::gpr_to_gpr_mem_imm(ctx, v7);
    let v15 = constructor_x64_and(ctx, arg0, v13, v14);
    let v16 = &C::imm8_reg_to_imm8_gpr(ctx, &v11);
    let v17 = constructor_x64_shl(ctx, arg0, v9, v16);
    let v18 = &C::gpr_to_gpr_mem_imm(ctx, v15);
    let v19 = constructor_x64_or(ctx, arg0, v17, v18);
    // Rule at src\isa\x64\lower.isle line 2518.
    return v19;
}

// Generated as internal constructor for term do_bitrev64.
pub fn constructor_do_bitrev64<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
) -> Gpr {
    if arg0 == I64 {
        let v2 = constructor_do_bitrev32(ctx, arg0, arg1);
        let v4 = constructor_imm(ctx, arg0, 0xffffffff_u64);
        let v5 = C::gpr_new(ctx, v4);
        let v6 = &C::gpr_to_gpr_mem_imm(ctx, v5);
        let v7 = constructor_x64_and(ctx, arg0, v2, v6);
        let v9 = Imm8Reg::Imm8 {
            imm: 0x20_u8,
        };
        let v10 = &C::imm8_reg_to_imm8_gpr(ctx, &v9);
        let v11 = constructor_x64_shr(ctx, arg0, v2, v10);
        let v12 = &C::imm8_reg_to_imm8_gpr(ctx, &v9);
        let v13 = constructor_x64_shl(ctx, arg0, v7, v12);
        let v14 = &C::gpr_to_gpr_mem_imm(ctx, v11);
        let v15 = constructor_x64_or(ctx, arg0, v13, v14);
        // Rule at src\isa\x64\lower.isle line 2530.
        return v15;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "do_bitrev64", "src\\isa\\x64\\lower.isle line 2529")
}

// Generated as internal constructor for term fmadd.
pub fn constructor_fmadd<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Xmm {
    let v24 = C::def_inst(ctx, arg2);
    if let Some(v25) = v24 {
        let v26 = &C::inst_data_value(ctx, v25);
        if let &InstructionData::Unary {
            opcode: ref v27,
            arg: v28,
        } = v26 {
            if let &Opcode::Fneg = v27 {
                let v29 = constructor_fnmadd(ctx, arg0, arg1, v28, arg3);
                // Rule at src\isa\x64\lower.isle line 2955.
                return v29;
            }
        }
    }
    let v18 = C::def_inst(ctx, arg1);
    if let Some(v19) = v18 {
        let v20 = &C::inst_data_value(ctx, v19);
        if let &InstructionData::Unary {
            opcode: ref v21,
            arg: v22,
        } = v20 {
            if let &Opcode::Fneg = v21 {
                let v23 = constructor_fnmadd(ctx, arg0, v22, arg2, arg3);
                // Rule at src\isa\x64\lower.isle line 2954.
                return v23;
            }
        }
    }
    let v14 = &C::sinkable_load(ctx, arg2);
    if let Some(v15) = v14 {
        let v4 = constructor_put_in_xmm(ctx, arg1);
        let v11 = constructor_put_in_xmm(ctx, arg3);
        let v16 = &constructor_sink_load_to_xmm_mem(ctx, v15);
        let v17 = constructor_x64_vfmadd132(ctx, arg0, v4, v11, v16);
        // Rule at src\isa\x64\lower.isle line 2950.
        return v17;
    }
    let v8 = &C::sinkable_load(ctx, arg1);
    if let Some(v9) = v8 {
        let v10 = constructor_put_in_xmm(ctx, arg2);
        let v11 = constructor_put_in_xmm(ctx, arg3);
        let v12 = &constructor_sink_load_to_xmm_mem(ctx, v9);
        let v13 = constructor_x64_vfmadd132(ctx, arg0, v10, v11, v12);
        // Rule at src\isa\x64\lower.isle line 2949.
        return v13;
    }
    let v4 = constructor_put_in_xmm(ctx, arg1);
    let v5 = constructor_put_in_xmm(ctx, arg2);
    let v6 = &C::put_in_xmm_mem(ctx, arg3);
    let v7 = constructor_x64_vfmadd213(ctx, arg0, v4, v5, v6);
    // Rule at src\isa\x64\lower.isle line 2944.
    return v7;
}

// Generated as internal constructor for term fnmadd.
pub fn constructor_fnmadd<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Xmm {
    let v24 = C::def_inst(ctx, arg2);
    if let Some(v25) = v24 {
        let v26 = &C::inst_data_value(ctx, v25);
        if let &InstructionData::Unary {
            opcode: ref v27,
            arg: v28,
        } = v26 {
            if let &Opcode::Fneg = v27 {
                let v29 = constructor_fmadd(ctx, arg0, arg1, v28, arg3);
                // Rule at src\isa\x64\lower.isle line 2963.
                return v29;
            }
        }
    }
    let v18 = C::def_inst(ctx, arg1);
    if let Some(v19) = v18 {
        let v20 = &C::inst_data_value(ctx, v19);
        if let &InstructionData::Unary {
            opcode: ref v21,
            arg: v22,
        } = v20 {
            if let &Opcode::Fneg = v21 {
                let v23 = constructor_fmadd(ctx, arg0, v22, arg2, arg3);
                // Rule at src\isa\x64\lower.isle line 2962.
                return v23;
            }
        }
    }
    let v14 = &C::sinkable_load(ctx, arg2);
    if let Some(v15) = v14 {
        let v4 = constructor_put_in_xmm(ctx, arg1);
        let v11 = constructor_put_in_xmm(ctx, arg3);
        let v16 = &constructor_sink_load_to_xmm_mem(ctx, v15);
        let v17 = constructor_x64_vfnmadd132(ctx, arg0, v4, v11, v16);
        // Rule at src\isa\x64\lower.isle line 2959.
        return v17;
    }
    let v8 = &C::sinkable_load(ctx, arg1);
    if let Some(v9) = v8 {
        let v10 = constructor_put_in_xmm(ctx, arg2);
        let v11 = constructor_put_in_xmm(ctx, arg3);
        let v12 = &constructor_sink_load_to_xmm_mem(ctx, v9);
        let v13 = constructor_x64_vfnmadd132(ctx, arg0, v10, v11, v12);
        // Rule at src\isa\x64\lower.isle line 2958.
        return v13;
    }
    let v4 = constructor_put_in_xmm(ctx, arg1);
    let v5 = constructor_put_in_xmm(ctx, arg2);
    let v6 = &C::put_in_xmm_mem(ctx, arg3);
    let v7 = constructor_x64_vfnmadd213(ctx, arg0, v4, v5, v6);
    // Rule at src\isa\x64\lower.isle line 2957.
    return v7;
}

// Generated as internal constructor for term fmsub.
pub fn constructor_fmsub<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Xmm {
    let v24 = C::def_inst(ctx, arg2);
    if let Some(v25) = v24 {
        let v26 = &C::inst_data_value(ctx, v25);
        if let &InstructionData::Unary {
            opcode: ref v27,
            arg: v28,
        } = v26 {
            if let &Opcode::Fneg = v27 {
                let v29 = constructor_fnmsub(ctx, arg0, arg1, v28, arg3);
                // Rule at src\isa\x64\lower.isle line 2986.
                return v29;
            }
        }
    }
    let v18 = C::def_inst(ctx, arg1);
    if let Some(v19) = v18 {
        let v20 = &C::inst_data_value(ctx, v19);
        if let &InstructionData::Unary {
            opcode: ref v21,
            arg: v22,
        } = v20 {
            if let &Opcode::Fneg = v21 {
                let v23 = constructor_fnmsub(ctx, arg0, v22, arg2, arg3);
                // Rule at src\isa\x64\lower.isle line 2985.
                return v23;
            }
        }
    }
    let v14 = &C::sinkable_load(ctx, arg2);
    if let Some(v15) = v14 {
        let v4 = constructor_put_in_xmm(ctx, arg1);
        let v11 = constructor_put_in_xmm(ctx, arg3);
        let v16 = &constructor_sink_load_to_xmm_mem(ctx, v15);
        let v17 = constructor_x64_vfmsub132(ctx, arg0, v4, v11, v16);
        // Rule at src\isa\x64\lower.isle line 2981.
        return v17;
    }
    let v8 = &C::sinkable_load(ctx, arg1);
    if let Some(v9) = v8 {
        let v10 = constructor_put_in_xmm(ctx, arg2);
        let v11 = constructor_put_in_xmm(ctx, arg3);
        let v12 = &constructor_sink_load_to_xmm_mem(ctx, v9);
        let v13 = constructor_x64_vfmsub132(ctx, arg0, v10, v11, v12);
        // Rule at src\isa\x64\lower.isle line 2980.
        return v13;
    }
    let v4 = constructor_put_in_xmm(ctx, arg1);
    let v5 = constructor_put_in_xmm(ctx, arg2);
    let v6 = &C::put_in_xmm_mem(ctx, arg3);
    let v7 = constructor_x64_vfmsub213(ctx, arg0, v4, v5, v6);
    // Rule at src\isa\x64\lower.isle line 2975.
    return v7;
}

// Generated as internal constructor for term fnmsub.
pub fn constructor_fnmsub<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Xmm {
    let v24 = C::def_inst(ctx, arg2);
    if let Some(v25) = v24 {
        let v26 = &C::inst_data_value(ctx, v25);
        if let &InstructionData::Unary {
            opcode: ref v27,
            arg: v28,
        } = v26 {
            if let &Opcode::Fneg = v27 {
                let v29 = constructor_fmsub(ctx, arg0, arg1, v28, arg3);
                // Rule at src\isa\x64\lower.isle line 2994.
                return v29;
            }
        }
    }
    let v18 = C::def_inst(ctx, arg1);
    if let Some(v19) = v18 {
        let v20 = &C::inst_data_value(ctx, v19);
        if let &InstructionData::Unary {
            opcode: ref v21,
            arg: v22,
        } = v20 {
            if let &Opcode::Fneg = v21 {
                let v23 = constructor_fmsub(ctx, arg0, v22, arg2, arg3);
                // Rule at src\isa\x64\lower.isle line 2993.
                return v23;
            }
        }
    }
    let v14 = &C::sinkable_load(ctx, arg2);
    if let Some(v15) = v14 {
        let v4 = constructor_put_in_xmm(ctx, arg1);
        let v11 = constructor_put_in_xmm(ctx, arg3);
        let v16 = &constructor_sink_load_to_xmm_mem(ctx, v15);
        let v17 = constructor_x64_vfnmsub132(ctx, arg0, v4, v11, v16);
        // Rule at src\isa\x64\lower.isle line 2990.
        return v17;
    }
    let v8 = &C::sinkable_load(ctx, arg1);
    if let Some(v9) = v8 {
        let v10 = constructor_put_in_xmm(ctx, arg2);
        let v11 = constructor_put_in_xmm(ctx, arg3);
        let v12 = &constructor_sink_load_to_xmm_mem(ctx, v9);
        let v13 = constructor_x64_vfnmsub132(ctx, arg0, v10, v11, v12);
        // Rule at src\isa\x64\lower.isle line 2989.
        return v13;
    }
    let v4 = constructor_put_in_xmm(ctx, arg1);
    let v5 = constructor_put_in_xmm(ctx, arg2);
    let v6 = &C::put_in_xmm_mem(ctx, arg3);
    let v7 = constructor_x64_vfnmsub213(ctx, arg0, v4, v5, v6);
    // Rule at src\isa\x64\lower.isle line 2988.
    return v7;
}

// Generated as internal constructor for term cmp_zero_i128.
pub fn constructor_cmp_zero_i128<C: Context>(
    ctx: &mut C,
    arg0: &CC,
    arg1: ValueRegs,
) -> IcmpCondResult {
    let v1 = &C::cc_nz_or_z(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = constructor_value_regs_get_gpr(ctx, arg1, 0x0_usize);
        let v7 = constructor_value_regs_get_gpr(ctx, arg1, 0x1_usize);
        let v10 = &C::gpr_to_gpr_mem_imm(ctx, v7);
        let v11 = &constructor_x64_produce_flags_side_effect(ctx, &ProduceFlagsSideEffectOp::Or, I64, v5, v10);
        let v12 = &C::cc_invert(ctx, v2);
        let v13 = &constructor_icmp_cond_result(ctx, v11, v12);
        // Rule at src\isa\x64\lower.isle line 3553.
        return v13.clone();
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "cmp_zero_i128", "src\\isa\\x64\\lower.isle line 3552")
}

// Generated as internal constructor for term cmp_zero_int_bool_ref.
pub fn constructor_cmp_zero_int_bool_ref<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> ProducesFlags {
    let v1 = C::value_type(ctx, arg0);
    let v2 = &C::raw_operand_size_of_type(ctx, v1);
    let v3 = constructor_put_in_gpr(ctx, arg0);
    let v4 = &C::gpr_to_gpr_mem_imm(ctx, v3);
    let v5 = &constructor_x64_test(ctx, v2, v3, v4);
    // Rule at src\isa\x64\lower.isle line 3562.
    return v5.clone();
}

// Generated as internal constructor for term lower_swiden_low.
pub fn constructor_lower_swiden_low<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
) -> Xmm {
    match arg0 {
        I16X8 => {
            let v2 = &C::xmm_to_xmm_mem(ctx, arg1);
            let v3 = constructor_x64_punpcklbw(ctx, arg1, v2);
            let v5 = &C::xmi_imm(ctx, 0x8_u32);
            let v6 = constructor_x64_psraw(ctx, v3, v5);
            // Rule at src\isa\x64\lower.isle line 4027.
            return v6;
        }
        I32X4 => {
            let v2 = &C::xmm_to_xmm_mem(ctx, arg1);
            let v7 = constructor_x64_punpcklwd(ctx, arg1, v2);
            let v9 = &C::xmi_imm(ctx, 0x10_u32);
            let v10 = constructor_x64_psrad(ctx, v7, v9);
            // Rule at src\isa\x64\lower.isle line 4029.
            return v10;
        }
        I64X2 => {
            let v12 = constructor_xmm_zero(ctx, I32X4);
            let v13 = &C::xmm_to_xmm_mem(ctx, arg1);
            let v14 = constructor_x64_pcmpgtd(ctx, v12, v13);
            let v15 = &C::xmm_to_xmm_mem(ctx, v14);
            let v16 = constructor_x64_punpckldq(ctx, arg1, v15);
            // Rule at src\isa\x64\lower.isle line 4035.
            return v16;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "lower_swiden_low", "src\\isa\\x64\\lower.isle line 4022")
}

// Generated as internal constructor for term lower_uwiden_low.
pub fn constructor_lower_uwiden_low<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
) -> Xmm {
    match arg0 {
        I16X8 => {
            let v3 = constructor_xmm_zero(ctx, I8X16);
            let v4 = &C::xmm_to_xmm_mem(ctx, v3);
            let v5 = constructor_x64_punpcklbw(ctx, arg1, v4);
            // Rule at src\isa\x64\lower.isle line 4090.
            return v5;
        }
        I32X4 => {
            let v3 = constructor_xmm_zero(ctx, I8X16);
            let v4 = &C::xmm_to_xmm_mem(ctx, v3);
            let v6 = constructor_x64_punpcklwd(ctx, arg1, v4);
            // Rule at src\isa\x64\lower.isle line 4091.
            return v6;
        }
        I64X2 => {
            let v8 = constructor_xmm_zero(ctx, F32X4);
            let v9 = &C::xmm_to_xmm_mem(ctx, v8);
            let v10 = constructor_x64_unpcklps(ctx, arg1, v9);
            // Rule at src\isa\x64\lower.isle line 4092.
            return v10;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "lower_uwiden_low", "src\\isa\\x64\\lower.isle line 4089")
}

// Generated as internal constructor for term unarrow_i32x4_lanes_to_low_u16_lanes.
pub fn constructor_unarrow_i32x4_lanes_to_low_u16_lanes<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
) -> Xmm {
    let v2 = constructor_xmm_zero(ctx, I32X4);
    let v3 = &C::xmm_to_xmm_mem(ctx, v2);
    let v4 = constructor_x64_pcmpgtd(ctx, arg0, v3);
    let v5 = &C::xmm_to_xmm_mem(ctx, v4);
    let v6 = constructor_x64_pand(ctx, arg0, v5);
    let v8 = C::emit_u128_le_const(ctx, 0xffff0000ffff0000ffff0000ffff_u128);
    let v9 = &constructor_const_to_xmm_mem(ctx, v8);
    let v10 = constructor_x64_movdqu_load(ctx, v9);
    let v11 = &C::xmm_to_xmm_mem(ctx, v6);
    let v12 = constructor_x64_pcmpgtd(ctx, v10, v11);
    let v13 = &C::xmm_to_xmm_mem(ctx, v12);
    let v14 = constructor_x64_pand(ctx, v6, v13);
    let v15 = &C::xmm_to_xmm_mem(ctx, v10);
    let v16 = constructor_x64_pandn(ctx, v12, v15);
    let v17 = &C::xmm_to_xmm_mem(ctx, v16);
    let v18 = constructor_x64_por(ctx, v14, v17);
    let v19 = &C::xmm_to_xmm_mem(ctx, v18);
    let v21 = constructor_x64_pshuflw(ctx, v19, 0x8_u8);
    let v22 = &C::xmm_to_xmm_mem(ctx, v21);
    let v23 = constructor_x64_pshufhw(ctx, v22, 0x8_u8);
    let v24 = &C::xmm_to_xmm_mem(ctx, v23);
    let v25 = constructor_x64_pshufd(ctx, v24, 0x8_u8);
    // Rule at src\isa\x64\lower.isle line 4172.
    return v25;
}

// Generated as internal constructor for term x64_round.
pub fn constructor_x64_round<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &RegMem,
    arg2: &RoundImm,
) -> Xmm {
    match arg0 {
        F32 => {
            let v3 = C::use_sse41(ctx);
            if v3 == true {
                let v4 = &C::reg_mem_to_xmm_mem(ctx, arg1);
                let v5 = constructor_x64_roundss(ctx, v4, arg2);
                // Rule at src\isa\x64\lower.isle line 4242.
                return v5;
            }
            if let &RegMem::Reg {
                reg: v9,
            } = arg1 {
                let v11 = &constructor_round_libcall(ctx, F32, arg2);
                let v12 = C::libcall_1(ctx, v11, v9);
                let v13 = C::xmm_new(ctx, v12);
                // Rule at src\isa\x64\lower.isle line 4255.
                return v13;
            }
        }
        F64 => {
            let v3 = C::use_sse41(ctx);
            if v3 == true {
                let v4 = &C::reg_mem_to_xmm_mem(ctx, arg1);
                let v6 = constructor_x64_roundsd(ctx, v4, arg2);
                // Rule at src\isa\x64\lower.isle line 4245.
                return v6;
            }
            if let &RegMem::Reg {
                reg: v9,
            } = arg1 {
                let v15 = &constructor_round_libcall(ctx, F64, arg2);
                let v16 = C::libcall_1(ctx, v15, v9);
                let v17 = C::xmm_new(ctx, v16);
                // Rule at src\isa\x64\lower.isle line 4256.
                return v17;
            }
        }
        F32X4 => {
            let v3 = C::use_sse41(ctx);
            if v3 == true {
                let v4 = &C::reg_mem_to_xmm_mem(ctx, arg1);
                let v7 = constructor_x64_roundps(ctx, v4, arg2);
                // Rule at src\isa\x64\lower.isle line 4248.
                return v7;
            }
            if let &RegMem::Reg {
                reg: v9,
            } = arg1 {
                let v11 = &constructor_round_libcall(ctx, F32, arg2);
                let v12 = C::libcall_1(ctx, v11, v9);
                let v13 = C::xmm_new(ctx, v12);
                let v18 = &constructor_reg_to_xmm_mem(ctx, v9);
                let v20 = constructor_x64_pshufd(ctx, v18, 0x1_u8);
                let v21 = C::xmm_to_reg(ctx, v20);
                let v22 = C::libcall_1(ctx, v11, v21);
                let v23 = C::xmm_new(ctx, v22);
                let v24 = constructor_f32x4_insertlane(ctx, v13, v23, 0x1_u8);
                let v25 = &constructor_reg_to_xmm_mem(ctx, v9);
                let v27 = constructor_x64_pshufd(ctx, v25, 0x2_u8);
                let v28 = C::xmm_to_reg(ctx, v27);
                let v29 = C::libcall_1(ctx, v11, v28);
                let v30 = C::xmm_new(ctx, v29);
                let v31 = constructor_f32x4_insertlane(ctx, v24, v30, 0x2_u8);
                let v32 = &constructor_reg_to_xmm_mem(ctx, v9);
                let v34 = constructor_x64_pshufd(ctx, v32, 0x3_u8);
                let v35 = C::xmm_to_reg(ctx, v34);
                let v36 = C::libcall_1(ctx, v11, v35);
                let v37 = C::xmm_new(ctx, v36);
                let v38 = constructor_f32x4_insertlane(ctx, v31, v37, 0x3_u8);
                // Rule at src\isa\x64\lower.isle line 4257.
                return v38;
            }
        }
        F64X2 => {
            let v3 = C::use_sse41(ctx);
            if v3 == true {
                let v4 = &C::reg_mem_to_xmm_mem(ctx, arg1);
                let v8 = constructor_x64_roundpd(ctx, v4, arg2);
                // Rule at src\isa\x64\lower.isle line 4251.
                return v8;
            }
            if let &RegMem::Reg {
                reg: v9,
            } = arg1 {
                let v15 = &constructor_round_libcall(ctx, F64, arg2);
                let v16 = C::libcall_1(ctx, v15, v9);
                let v17 = C::xmm_new(ctx, v16);
                let v18 = &constructor_reg_to_xmm_mem(ctx, v9);
                let v40 = constructor_x64_pshufd(ctx, v18, 0xe_u8);
                let v41 = C::xmm_to_reg(ctx, v40);
                let v42 = C::libcall_1(ctx, v15, v41);
                let v43 = C::xmm_new(ctx, v42);
                let v44 = &C::xmm_to_xmm_mem(ctx, v43);
                let v45 = constructor_x64_movlhps(ctx, v17, v44);
                // Rule at src\isa\x64\lower.isle line 4269.
                return v45;
            }
        }
        _ => {}
    }
    if let &RegMem::Mem {
        addr: ref v46,
    } = arg1 {
        let v48 = constructor_x64_load(ctx, arg0, v46, &ExtKind::ZeroExtend);
        let v49 = RegMem::Reg {
            reg: v48,
        };
        let v50 = constructor_x64_round(ctx, arg0, &v49, arg2);
        // Rule at src\isa\x64\lower.isle line 4276.
        return v50;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_round", "src\\isa\\x64\\lower.isle line 4241")
}

// Generated as internal constructor for term round_libcall.
pub fn constructor_round_libcall<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &RoundImm,
) -> LibCall {
    match arg0 {
        F32 => {
            match arg1 {
                &RoundImm::RoundNearest => {
                    // Rule at src\isa\x64\lower.isle line 4284.
                    return LibCall::NearestF32;
                }
                &RoundImm::RoundDown => {
                    // Rule at src\isa\x64\lower.isle line 4282.
                    return LibCall::FloorF32;
                }
                &RoundImm::RoundUp => {
                    // Rule at src\isa\x64\lower.isle line 4280.
                    return LibCall::CeilF32;
                }
                &RoundImm::RoundZero => {
                    // Rule at src\isa\x64\lower.isle line 4286.
                    return LibCall::TruncF32;
                }
                _ => {}
            }
        }
        F64 => {
            match arg1 {
                &RoundImm::RoundNearest => {
                    // Rule at src\isa\x64\lower.isle line 4285.
                    return LibCall::NearestF64;
                }
                &RoundImm::RoundDown => {
                    // Rule at src\isa\x64\lower.isle line 4283.
                    return LibCall::FloorF64;
                }
                &RoundImm::RoundUp => {
                    // Rule at src\isa\x64\lower.isle line 4281.
                    return LibCall::CeilF64;
                }
                &RoundImm::RoundZero => {
                    // Rule at src\isa\x64\lower.isle line 4287.
                    return LibCall::TruncF64;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "round_libcall", "src\\isa\\x64\\lower.isle line 4279")
}

// Generated as internal constructor for term nonzero_sdiv_divisor.
pub fn constructor_nonzero_sdiv_divisor<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Reg {
    let v2 = C::def_inst(ctx, arg1);
    if let Some(v3) = v2 {
        let v4 = &C::inst_data_value(ctx, v3);
        if let &InstructionData::UnaryImm {
            opcode: ref v5,
            imm: v6,
        } = v4 {
            if let &Opcode::Iconst = v5 {
                let v7 = C::safe_divisor_from_imm64(ctx, arg0, v6);
                if let Some(v8) = v7 {
                    let v9 = constructor_imm(ctx, arg0, v8);
                    // Rule at src\isa\x64\lower.isle line 4367.
                    return v9;
                }
            }
        }
    }
    let v10 = C::put_in_reg(ctx, arg1);
    let v11 = &C::raw_operand_size_of_type(ctx, arg0);
    let v12 = C::gpr_new(ctx, v10);
    let v13 = &constructor_reg_to_gpr_mem_imm(ctx, v10);
    let v14 = &constructor_x64_test(ctx, v11, v12, v13);
    let v17 = &constructor_trap_if(ctx, &CC::Z, &TrapCode::INTEGER_DIVISION_BY_ZERO);
    let v18 = &constructor_with_flags_side_effect(ctx, v14, v17);
    let v19 = constructor_side_effect(ctx, v18);
    // Rule at src\isa\x64\lower.isle line 4370.
    return v10;
}

// Generated as internal constructor for term lower_pshufb.
pub fn constructor_lower_pshufb<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &RegMem,
) -> Xmm {
    let v2 = C::use_ssse3(ctx);
    if v2 == true {
        let v3 = &C::reg_mem_to_xmm_mem(ctx, arg1);
        let v4 = constructor_x64_pshufb(ctx, arg0, v3);
        // Rule at src\isa\x64\lower.isle line 4659.
        return v4;
    }
    match arg1 {
        &RegMem::Reg {
            reg: v5,
        } => {
            let v7 = C::xmm_to_reg(ctx, arg0);
            let v8 = C::libcall_2(ctx, &LibCall::X86Pshufb, v7, v5);
            let v9 = C::xmm_new(ctx, v8);
            // Rule at src\isa\x64\lower.isle line 4662.
            return v9;
        }
        &RegMem::Mem {
            addr: ref v10,
        } => {
            let v11 = &constructor_synthetic_amode_to_xmm_mem(ctx, v10);
            let v12 = constructor_x64_movdqu_load(ctx, v11);
            let v13 = C::xmm_to_reg(ctx, v12);
            let v14 = &constructor_xmm_to_reg_mem(ctx, v13);
            let v15 = &C::xmm_mem_to_reg_mem(ctx, v14);
            let v16 = constructor_lower_pshufb(ctx, arg0, v15);
            // Rule at src\isa\x64\lower.isle line 4664.
            return v16;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "lower_pshufb", "src\\isa\\x64\\lower.isle line 4658")
}

// Generated as internal constructor for term emit_vany_true.
pub fn constructor_emit_vany_true<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> IcmpCondResult {
    let v1 = constructor_put_in_xmm(ctx, arg0);
    let v3 = constructor_xmm_zero(ctx, I8X16);
    let v4 = &C::xmm_to_xmm_mem(ctx, v3);
    let v5 = constructor_x64_pcmpeqb(ctx, v1, v4);
    let v7 = constructor_x64_pmovmskb(ctx, &OperandSize::Size32, v5);
    let v9 = &constructor_x64_cmp_imm(ctx, &OperandSize::Size32, v7, 0xffff_u32);
    let v11 = &constructor_icmp_cond_result(ctx, v9, &CC::NZ);
    // Rule at src\isa\x64\lower.isle line 4853.
    return v11.clone();
}

// Generated as internal constructor for term emit_vall_true.
pub fn constructor_emit_vall_true<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> IcmpCondResult {
    let v2 = C::use_sse41(ctx);
    if v2 == true {
        let v3 = constructor_put_in_xmm(ctx, arg0);
        let v1 = C::value_type(ctx, arg0);
        let v4 = constructor_xmm_zero(ctx, v1);
        let v5 = constructor_vec_int_type(ctx, v1);
        let v6 = &C::xmm_to_xmm_mem(ctx, v4);
        let v7 = constructor_x64_pcmpeq(ctx, v5, v3, v6);
        let v8 = &C::xmm_to_xmm_mem(ctx, v7);
        let v9 = &constructor_x64_ptest(ctx, v7, v8);
        let v11 = &constructor_icmp_cond_result(ctx, v9, &CC::Z);
        // Rule at src\isa\x64\lower.isle line 4867.
        return v11.clone();
    }
    let v1 = C::value_type(ctx, arg0);
    let v12 = constructor_vec_int_type(ctx, v1);
    let v13 = constructor_put_in_xmm(ctx, arg0);
    let v14 = constructor_xmm_zero(ctx, v1);
    let v15 = &C::xmm_to_xmm_mem(ctx, v14);
    let v16 = constructor_x64_pcmpeq(ctx, v12, v13, v15);
    let v18 = constructor_x64_pmovmskb(ctx, &OperandSize::Size32, v16);
    let v19 = &C::gpr_to_gpr_mem_imm(ctx, v18);
    let v20 = &constructor_x64_test(ctx, &OperandSize::Size32, v18, v19);
    let v21 = &constructor_icmp_cond_result(ctx, v20, &CC::Z);
    // Rule at src\isa\x64\lower.isle line 4877.
    return v21.clone();
}

// Generated as internal constructor for term emit_ret_gpr.
pub fn constructor_emit_ret_gpr<C: Context>(
    ctx: &mut C,
    arg0: &AssemblerOutputs,
) -> Gpr {
    if let &AssemblerOutputs::RetGpr {
        inst: ref v1,
        gpr: v2,
    } = arg0 {
        let v3 = C::emit(ctx, v1);
        // Rule at <OUT_DIR>\assembler.isle line 19.
        return v2;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "emit_ret_gpr", "<OUT_DIR>\\assembler.isle line 18")
}

// Generated as internal constructor for term emit_ret_xmm.
pub fn constructor_emit_ret_xmm<C: Context>(
    ctx: &mut C,
    arg0: &AssemblerOutputs,
) -> Xmm {
    if let &AssemblerOutputs::RetXmm {
        inst: ref v1,
        xmm: v2,
    } = arg0 {
        let v3 = C::emit(ctx, v1);
        // Rule at <OUT_DIR>\assembler.isle line 25.
        return v2;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "emit_ret_xmm", "<OUT_DIR>\\assembler.isle line 24")
}

// Generated as internal constructor for term defer_side_effect.
pub fn constructor_defer_side_effect<C: Context>(
    ctx: &mut C,
    arg0: &AssemblerOutputs,
) -> SideEffectNoResult {
    if let &AssemblerOutputs::SideEffect {
        inst: ref v1,
    } = arg0 {
        let v2 = SideEffectNoResult::Inst {
            inst: v1.clone(),
        };
        // Rule at <OUT_DIR>\assembler.isle line 31.
        return v2;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "defer_side_effect", "<OUT_DIR>\\assembler.isle line 30")
}

// Generated as internal constructor for term x64_addb_i.
pub fn constructor_x64_addb_i<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u8,
) -> Gpr {
    let v2 = &C::x64_addb_i_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 37.
    return v3;
}

// Generated as internal constructor for term x64_addw_i.
pub fn constructor_x64_addw_i<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u16,
) -> Gpr {
    let v2 = &C::x64_addw_i_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 42.
    return v3;
}

// Generated as internal constructor for term x64_addl_i.
pub fn constructor_x64_addl_i<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u32,
) -> Gpr {
    let v2 = &C::x64_addl_i_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 47.
    return v3;
}

// Generated as internal constructor for term x64_addq_i_sxl.
pub fn constructor_x64_addq_i_sxl<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: i32,
) -> Gpr {
    let v2 = &C::x64_addq_i_sxl_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 52.
    return v3;
}

// Generated as internal constructor for term x64_addb_mi.
pub fn constructor_x64_addb_mi<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u8,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_addb_mi_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 57.
    return v4;
}

// Generated as internal constructor for term x64_addb_mi_mem.
pub fn constructor_x64_addb_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u8,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_addb_mi_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 59.
    return v4.clone();
}

// Generated as internal constructor for term x64_addw_mi.
pub fn constructor_x64_addw_mi<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u16,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_addw_mi_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 64.
    return v4;
}

// Generated as internal constructor for term x64_addw_mi_mem.
pub fn constructor_x64_addw_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u16,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_addw_mi_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 66.
    return v4.clone();
}

// Generated as internal constructor for term x64_addl_mi.
pub fn constructor_x64_addl_mi<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u32,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_addl_mi_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 71.
    return v4;
}

// Generated as internal constructor for term x64_addl_mi_mem.
pub fn constructor_x64_addl_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u32,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_addl_mi_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 73.
    return v4.clone();
}

// Generated as internal constructor for term x64_addq_mi_sxl.
pub fn constructor_x64_addq_mi_sxl<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: i32,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_addq_mi_sxl_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 78.
    return v4;
}

// Generated as internal constructor for term x64_addq_mi_sxl_mem.
pub fn constructor_x64_addq_mi_sxl_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i32,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_addq_mi_sxl_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 80.
    return v4.clone();
}

// Generated as internal constructor for term x64_addl_mi_sxb.
pub fn constructor_x64_addl_mi_sxb<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: i8,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_addl_mi_sxb_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 85.
    return v4;
}

// Generated as internal constructor for term x64_addl_mi_sxb_mem.
pub fn constructor_x64_addl_mi_sxb_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i8,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_addl_mi_sxb_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 87.
    return v4.clone();
}

// Generated as internal constructor for term x64_addq_mi_sxb.
pub fn constructor_x64_addq_mi_sxb<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: i8,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_addq_mi_sxb_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 92.
    return v4;
}

// Generated as internal constructor for term x64_addq_mi_sxb_mem.
pub fn constructor_x64_addq_mi_sxb_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i8,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_addq_mi_sxb_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 94.
    return v4.clone();
}

// Generated as internal constructor for term x64_addb_mr.
pub fn constructor_x64_addb_mr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_addb_mr_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 99.
    return v4;
}

// Generated as internal constructor for term x64_addb_mr_mem.
pub fn constructor_x64_addb_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_addb_mr_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 101.
    return v4.clone();
}

// Generated as internal constructor for term x64_addw_mr.
pub fn constructor_x64_addw_mr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_addw_mr_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 106.
    return v4;
}

// Generated as internal constructor for term x64_addw_mr_mem.
pub fn constructor_x64_addw_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_addw_mr_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 108.
    return v4.clone();
}

// Generated as internal constructor for term x64_addl_mr.
pub fn constructor_x64_addl_mr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_addl_mr_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 113.
    return v4;
}

// Generated as internal constructor for term x64_addl_mr_mem.
pub fn constructor_x64_addl_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_addl_mr_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 115.
    return v4.clone();
}

// Generated as internal constructor for term x64_addq_mr.
pub fn constructor_x64_addq_mr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_addq_mr_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 120.
    return v4;
}

// Generated as internal constructor for term x64_addq_mr_mem.
pub fn constructor_x64_addq_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_addq_mr_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 122.
    return v4.clone();
}

// Generated as internal constructor for term x64_addb_rm.
pub fn constructor_x64_addb_rm<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
) -> Gpr {
    let v2 = &C::x64_addb_rm_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 127.
    return v3;
}

// Generated as internal constructor for term x64_addw_rm.
pub fn constructor_x64_addw_rm<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
) -> Gpr {
    let v2 = &C::x64_addw_rm_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 132.
    return v3;
}

// Generated as internal constructor for term x64_addl_rm.
pub fn constructor_x64_addl_rm<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
) -> Gpr {
    let v2 = &C::x64_addl_rm_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 137.
    return v3;
}

// Generated as internal constructor for term x64_addq_rm.
pub fn constructor_x64_addq_rm<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
) -> Gpr {
    let v2 = &C::x64_addq_rm_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 142.
    return v3;
}

// Generated as internal constructor for term x64_adcb_i.
pub fn constructor_x64_adcb_i<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u8,
) -> Gpr {
    let v2 = &C::x64_adcb_i_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 147.
    return v3;
}

// Generated as internal constructor for term x64_adcw_i.
pub fn constructor_x64_adcw_i<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u16,
) -> Gpr {
    let v2 = &C::x64_adcw_i_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 152.
    return v3;
}

// Generated as internal constructor for term x64_adcl_i.
pub fn constructor_x64_adcl_i<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u32,
) -> Gpr {
    let v2 = &C::x64_adcl_i_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 157.
    return v3;
}

// Generated as internal constructor for term x64_adcq_i_sxl.
pub fn constructor_x64_adcq_i_sxl<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: i32,
) -> Gpr {
    let v2 = &C::x64_adcq_i_sxl_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 162.
    return v3;
}

// Generated as internal constructor for term x64_adcb_mi.
pub fn constructor_x64_adcb_mi<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u8,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_adcb_mi_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 167.
    return v4;
}

// Generated as internal constructor for term x64_adcb_mi_mem.
pub fn constructor_x64_adcb_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u8,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_adcb_mi_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 169.
    return v4.clone();
}

// Generated as internal constructor for term x64_adcw_mi.
pub fn constructor_x64_adcw_mi<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u16,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_adcw_mi_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 174.
    return v4;
}

// Generated as internal constructor for term x64_adcw_mi_mem.
pub fn constructor_x64_adcw_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u16,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_adcw_mi_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 176.
    return v4.clone();
}

// Generated as internal constructor for term x64_adcl_mi.
pub fn constructor_x64_adcl_mi<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u32,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_adcl_mi_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 181.
    return v4;
}

// Generated as internal constructor for term x64_adcl_mi_mem.
pub fn constructor_x64_adcl_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u32,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_adcl_mi_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 183.
    return v4.clone();
}

// Generated as internal constructor for term x64_adcq_mi_sxl.
pub fn constructor_x64_adcq_mi_sxl<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: i32,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_adcq_mi_sxl_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 188.
    return v4;
}

// Generated as internal constructor for term x64_adcq_mi_sxl_mem.
pub fn constructor_x64_adcq_mi_sxl_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i32,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_adcq_mi_sxl_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 190.
    return v4.clone();
}

// Generated as internal constructor for term x64_adcl_mi_sxb.
pub fn constructor_x64_adcl_mi_sxb<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: i8,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_adcl_mi_sxb_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 195.
    return v4;
}

// Generated as internal constructor for term x64_adcl_mi_sxb_mem.
pub fn constructor_x64_adcl_mi_sxb_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i8,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_adcl_mi_sxb_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 197.
    return v4.clone();
}

// Generated as internal constructor for term x64_adcq_mi_sxb.
pub fn constructor_x64_adcq_mi_sxb<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: i8,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_adcq_mi_sxb_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 202.
    return v4;
}

// Generated as internal constructor for term x64_adcq_mi_sxb_mem.
pub fn constructor_x64_adcq_mi_sxb_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i8,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_adcq_mi_sxb_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 204.
    return v4.clone();
}

// Generated as internal constructor for term x64_adcb_mr.
pub fn constructor_x64_adcb_mr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_adcb_mr_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 209.
    return v4;
}

// Generated as internal constructor for term x64_adcb_mr_mem.
pub fn constructor_x64_adcb_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_adcb_mr_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 211.
    return v4.clone();
}

// Generated as internal constructor for term x64_adcw_mr.
pub fn constructor_x64_adcw_mr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_adcw_mr_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 216.
    return v4;
}

// Generated as internal constructor for term x64_adcw_mr_mem.
pub fn constructor_x64_adcw_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_adcw_mr_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 218.
    return v4.clone();
}

// Generated as internal constructor for term x64_adcl_mr.
pub fn constructor_x64_adcl_mr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_adcl_mr_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 223.
    return v4;
}

// Generated as internal constructor for term x64_adcl_mr_mem.
pub fn constructor_x64_adcl_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_adcl_mr_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 225.
    return v4.clone();
}

// Generated as internal constructor for term x64_adcq_mr.
pub fn constructor_x64_adcq_mr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_adcq_mr_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 230.
    return v4;
}

// Generated as internal constructor for term x64_adcq_mr_mem.
pub fn constructor_x64_adcq_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_adcq_mr_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 232.
    return v4.clone();
}

// Generated as internal constructor for term x64_adcb_rm.
pub fn constructor_x64_adcb_rm<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
) -> Gpr {
    let v2 = &C::x64_adcb_rm_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 237.
    return v3;
}

// Generated as internal constructor for term x64_adcw_rm.
pub fn constructor_x64_adcw_rm<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
) -> Gpr {
    let v2 = &C::x64_adcw_rm_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 242.
    return v3;
}

// Generated as internal constructor for term x64_adcl_rm.
pub fn constructor_x64_adcl_rm<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
) -> Gpr {
    let v2 = &C::x64_adcl_rm_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 247.
    return v3;
}

// Generated as internal constructor for term x64_adcq_rm.
pub fn constructor_x64_adcq_rm<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
) -> Gpr {
    let v2 = &C::x64_adcq_rm_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 252.
    return v3;
}

// Generated as internal constructor for term x64_lock_addb_mi_mem.
pub fn constructor_x64_lock_addb_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u8,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_addb_mi_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 257.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_addw_mi_mem.
pub fn constructor_x64_lock_addw_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u16,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_addw_mi_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 262.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_addl_mi_mem.
pub fn constructor_x64_lock_addl_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u32,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_addl_mi_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 267.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_addq_mi_sxl_mem.
pub fn constructor_x64_lock_addq_mi_sxl_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i32,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_addq_mi_sxl_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 272.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_addl_mi_sxb_mem.
pub fn constructor_x64_lock_addl_mi_sxb_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i8,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_addl_mi_sxb_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 277.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_addq_mi_sxb_mem.
pub fn constructor_x64_lock_addq_mi_sxb_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i8,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_addq_mi_sxb_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 282.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_addb_mr_mem.
pub fn constructor_x64_lock_addb_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_addb_mr_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 287.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_addw_mr_mem.
pub fn constructor_x64_lock_addw_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_addw_mr_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 292.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_addl_mr_mem.
pub fn constructor_x64_lock_addl_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_addl_mr_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 297.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_addq_mr_mem.
pub fn constructor_x64_lock_addq_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_addq_mr_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 302.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_adcb_mi_mem.
pub fn constructor_x64_lock_adcb_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u8,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_adcb_mi_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 307.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_adcw_mi_mem.
pub fn constructor_x64_lock_adcw_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u16,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_adcw_mi_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 312.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_adcl_mi_mem.
pub fn constructor_x64_lock_adcl_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u32,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_adcl_mi_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 317.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_adcq_mi_sxl_mem.
pub fn constructor_x64_lock_adcq_mi_sxl_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i32,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_adcq_mi_sxl_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 322.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_adcl_mi_sxb_mem.
pub fn constructor_x64_lock_adcl_mi_sxb_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i8,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_adcl_mi_sxb_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 327.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_adcq_mi_sxb_mem.
pub fn constructor_x64_lock_adcq_mi_sxb_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i8,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_adcq_mi_sxb_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 332.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_adcb_mr_mem.
pub fn constructor_x64_lock_adcb_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_adcb_mr_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 337.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_adcw_mr_mem.
pub fn constructor_x64_lock_adcw_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_adcw_mr_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 342.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_adcl_mr_mem.
pub fn constructor_x64_lock_adcl_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_adcl_mr_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 347.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_adcq_mr_mem.
pub fn constructor_x64_lock_adcq_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_adcq_mr_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 352.
    return v3.clone();
}

// Generated as internal constructor for term x64_addss_a.
pub fn constructor_x64_addss_a<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v2 = &C::x64_addss_a_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_xmm(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 357.
    return v3;
}

// Generated as internal constructor for term x64_addsd_a.
pub fn constructor_x64_addsd_a<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v2 = &C::x64_addsd_a_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_xmm(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 362.
    return v3;
}

// Generated as internal constructor for term x64_addps_a.
pub fn constructor_x64_addps_a<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMemAligned,
) -> Xmm {
    let v2 = &C::x64_addps_a_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_xmm(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 367.
    return v3;
}

// Generated as internal constructor for term x64_addpd_a.
pub fn constructor_x64_addpd_a<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMemAligned,
) -> Xmm {
    let v2 = &C::x64_addpd_a_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_xmm(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 372.
    return v3;
}

// Generated as internal constructor for term x64_andb_i.
pub fn constructor_x64_andb_i<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u8,
) -> Gpr {
    let v2 = &C::x64_andb_i_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 377.
    return v3;
}

// Generated as internal constructor for term x64_andw_i.
pub fn constructor_x64_andw_i<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u16,
) -> Gpr {
    let v2 = &C::x64_andw_i_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 382.
    return v3;
}

// Generated as internal constructor for term x64_andl_i.
pub fn constructor_x64_andl_i<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u32,
) -> Gpr {
    let v2 = &C::x64_andl_i_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 387.
    return v3;
}

// Generated as internal constructor for term x64_andq_i_sxl.
pub fn constructor_x64_andq_i_sxl<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: i32,
) -> Gpr {
    let v2 = &C::x64_andq_i_sxl_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 392.
    return v3;
}

// Generated as internal constructor for term x64_andb_mi.
pub fn constructor_x64_andb_mi<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u8,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_andb_mi_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 397.
    return v4;
}

// Generated as internal constructor for term x64_andb_mi_mem.
pub fn constructor_x64_andb_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u8,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_andb_mi_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 399.
    return v4.clone();
}

// Generated as internal constructor for term x64_andw_mi.
pub fn constructor_x64_andw_mi<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u16,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_andw_mi_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 404.
    return v4;
}

// Generated as internal constructor for term x64_andw_mi_mem.
pub fn constructor_x64_andw_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u16,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_andw_mi_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 406.
    return v4.clone();
}

// Generated as internal constructor for term x64_andl_mi.
pub fn constructor_x64_andl_mi<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u32,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_andl_mi_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 411.
    return v4;
}

// Generated as internal constructor for term x64_andl_mi_mem.
pub fn constructor_x64_andl_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u32,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_andl_mi_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 413.
    return v4.clone();
}

// Generated as internal constructor for term x64_andq_mi_sxl.
pub fn constructor_x64_andq_mi_sxl<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: i32,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_andq_mi_sxl_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 418.
    return v4;
}

// Generated as internal constructor for term x64_andq_mi_sxl_mem.
pub fn constructor_x64_andq_mi_sxl_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i32,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_andq_mi_sxl_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 420.
    return v4.clone();
}

// Generated as internal constructor for term x64_andl_mi_sxb.
pub fn constructor_x64_andl_mi_sxb<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: i8,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_andl_mi_sxb_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 425.
    return v4;
}

// Generated as internal constructor for term x64_andl_mi_sxb_mem.
pub fn constructor_x64_andl_mi_sxb_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i8,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_andl_mi_sxb_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 427.
    return v4.clone();
}

// Generated as internal constructor for term x64_andq_mi_sxb.
pub fn constructor_x64_andq_mi_sxb<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: i8,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_andq_mi_sxb_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 432.
    return v4;
}

// Generated as internal constructor for term x64_andq_mi_sxb_mem.
pub fn constructor_x64_andq_mi_sxb_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i8,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_andq_mi_sxb_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 434.
    return v4.clone();
}

// Generated as internal constructor for term x64_andb_mr.
pub fn constructor_x64_andb_mr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_andb_mr_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 439.
    return v4;
}

// Generated as internal constructor for term x64_andb_mr_mem.
pub fn constructor_x64_andb_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_andb_mr_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 441.
    return v4.clone();
}

// Generated as internal constructor for term x64_andw_mr.
pub fn constructor_x64_andw_mr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_andw_mr_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 446.
    return v4;
}

// Generated as internal constructor for term x64_andw_mr_mem.
pub fn constructor_x64_andw_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_andw_mr_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 448.
    return v4.clone();
}

// Generated as internal constructor for term x64_andl_mr.
pub fn constructor_x64_andl_mr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_andl_mr_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 453.
    return v4;
}

// Generated as internal constructor for term x64_andl_mr_mem.
pub fn constructor_x64_andl_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_andl_mr_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 455.
    return v4.clone();
}

// Generated as internal constructor for term x64_andq_mr.
pub fn constructor_x64_andq_mr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_andq_mr_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 460.
    return v4;
}

// Generated as internal constructor for term x64_andq_mr_mem.
pub fn constructor_x64_andq_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_andq_mr_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 462.
    return v4.clone();
}

// Generated as internal constructor for term x64_andb_rm.
pub fn constructor_x64_andb_rm<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
) -> Gpr {
    let v2 = &C::x64_andb_rm_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 467.
    return v3;
}

// Generated as internal constructor for term x64_andw_rm.
pub fn constructor_x64_andw_rm<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
) -> Gpr {
    let v2 = &C::x64_andw_rm_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 472.
    return v3;
}

// Generated as internal constructor for term x64_andl_rm.
pub fn constructor_x64_andl_rm<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
) -> Gpr {
    let v2 = &C::x64_andl_rm_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 477.
    return v3;
}

// Generated as internal constructor for term x64_andq_rm.
pub fn constructor_x64_andq_rm<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
) -> Gpr {
    let v2 = &C::x64_andq_rm_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 482.
    return v3;
}

// Generated as internal constructor for term x64_lock_andb_mi_mem.
pub fn constructor_x64_lock_andb_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u8,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_andb_mi_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 487.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_andw_mi_mem.
pub fn constructor_x64_lock_andw_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u16,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_andw_mi_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 492.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_andl_mi_mem.
pub fn constructor_x64_lock_andl_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u32,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_andl_mi_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 497.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_andq_mi_sxl_mem.
pub fn constructor_x64_lock_andq_mi_sxl_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i32,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_andq_mi_sxl_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 502.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_andl_mi_sxb_mem.
pub fn constructor_x64_lock_andl_mi_sxb_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i8,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_andl_mi_sxb_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 507.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_andq_mi_sxb_mem.
pub fn constructor_x64_lock_andq_mi_sxb_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i8,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_andq_mi_sxb_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 512.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_andb_mr_mem.
pub fn constructor_x64_lock_andb_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_andb_mr_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 517.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_andw_mr_mem.
pub fn constructor_x64_lock_andw_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_andw_mr_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 522.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_andl_mr_mem.
pub fn constructor_x64_lock_andl_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_andl_mr_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 527.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_andq_mr_mem.
pub fn constructor_x64_lock_andq_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_andq_mr_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 532.
    return v3.clone();
}

// Generated as internal constructor for term x64_andps_a.
pub fn constructor_x64_andps_a<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMemAligned,
) -> Xmm {
    let v2 = &C::x64_andps_a_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_xmm(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 537.
    return v3;
}

// Generated as internal constructor for term x64_andpd_a.
pub fn constructor_x64_andpd_a<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMemAligned,
) -> Xmm {
    let v2 = &C::x64_andpd_a_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_xmm(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 542.
    return v3;
}

// Generated as internal constructor for term x64_orb_i.
pub fn constructor_x64_orb_i<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u8,
) -> Gpr {
    let v2 = &C::x64_orb_i_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 547.
    return v3;
}

// Generated as internal constructor for term x64_orw_i.
pub fn constructor_x64_orw_i<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u16,
) -> Gpr {
    let v2 = &C::x64_orw_i_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 552.
    return v3;
}

// Generated as internal constructor for term x64_orl_i.
pub fn constructor_x64_orl_i<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u32,
) -> Gpr {
    let v2 = &C::x64_orl_i_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 557.
    return v3;
}

// Generated as internal constructor for term x64_orq_i_sxl.
pub fn constructor_x64_orq_i_sxl<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: i32,
) -> Gpr {
    let v2 = &C::x64_orq_i_sxl_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 562.
    return v3;
}

// Generated as internal constructor for term x64_orb_mi.
pub fn constructor_x64_orb_mi<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u8,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_orb_mi_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 567.
    return v4;
}

// Generated as internal constructor for term x64_orb_mi_mem.
pub fn constructor_x64_orb_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u8,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_orb_mi_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 569.
    return v4.clone();
}

// Generated as internal constructor for term x64_orw_mi.
pub fn constructor_x64_orw_mi<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u16,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_orw_mi_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 574.
    return v4;
}

// Generated as internal constructor for term x64_orw_mi_mem.
pub fn constructor_x64_orw_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u16,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_orw_mi_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 576.
    return v4.clone();
}

// Generated as internal constructor for term x64_orl_mi.
pub fn constructor_x64_orl_mi<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u32,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_orl_mi_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 581.
    return v4;
}

// Generated as internal constructor for term x64_orl_mi_mem.
pub fn constructor_x64_orl_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u32,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_orl_mi_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 583.
    return v4.clone();
}

// Generated as internal constructor for term x64_orq_mi_sxl.
pub fn constructor_x64_orq_mi_sxl<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: i32,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_orq_mi_sxl_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 588.
    return v4;
}

// Generated as internal constructor for term x64_orq_mi_sxl_mem.
pub fn constructor_x64_orq_mi_sxl_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i32,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_orq_mi_sxl_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 590.
    return v4.clone();
}

// Generated as internal constructor for term x64_orl_mi_sxb.
pub fn constructor_x64_orl_mi_sxb<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: i8,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_orl_mi_sxb_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 595.
    return v4;
}

// Generated as internal constructor for term x64_orl_mi_sxb_mem.
pub fn constructor_x64_orl_mi_sxb_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i8,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_orl_mi_sxb_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 597.
    return v4.clone();
}

// Generated as internal constructor for term x64_orq_mi_sxb.
pub fn constructor_x64_orq_mi_sxb<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: i8,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_orq_mi_sxb_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 602.
    return v4;
}

// Generated as internal constructor for term x64_orq_mi_sxb_mem.
pub fn constructor_x64_orq_mi_sxb_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i8,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_orq_mi_sxb_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 604.
    return v4.clone();
}

// Generated as internal constructor for term x64_orb_mr.
pub fn constructor_x64_orb_mr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_orb_mr_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 609.
    return v4;
}

// Generated as internal constructor for term x64_orb_mr_mem.
pub fn constructor_x64_orb_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_orb_mr_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 611.
    return v4.clone();
}

// Generated as internal constructor for term x64_orw_mr.
pub fn constructor_x64_orw_mr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_orw_mr_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 616.
    return v4;
}

// Generated as internal constructor for term x64_orw_mr_mem.
pub fn constructor_x64_orw_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_orw_mr_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 618.
    return v4.clone();
}

// Generated as internal constructor for term x64_orl_mr.
pub fn constructor_x64_orl_mr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_orl_mr_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 623.
    return v4;
}

// Generated as internal constructor for term x64_orl_mr_mem.
pub fn constructor_x64_orl_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_orl_mr_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 625.
    return v4.clone();
}

// Generated as internal constructor for term x64_orq_mr.
pub fn constructor_x64_orq_mr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_orq_mr_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 630.
    return v4;
}

// Generated as internal constructor for term x64_orq_mr_mem.
pub fn constructor_x64_orq_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_orq_mr_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 632.
    return v4.clone();
}

// Generated as internal constructor for term x64_orb_rm.
pub fn constructor_x64_orb_rm<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
) -> Gpr {
    let v2 = &C::x64_orb_rm_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 637.
    return v3;
}

// Generated as internal constructor for term x64_orw_rm.
pub fn constructor_x64_orw_rm<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
) -> Gpr {
    let v2 = &C::x64_orw_rm_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 642.
    return v3;
}

// Generated as internal constructor for term x64_orl_rm.
pub fn constructor_x64_orl_rm<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
) -> Gpr {
    let v2 = &C::x64_orl_rm_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 647.
    return v3;
}

// Generated as internal constructor for term x64_orq_rm.
pub fn constructor_x64_orq_rm<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
) -> Gpr {
    let v2 = &C::x64_orq_rm_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 652.
    return v3;
}

// Generated as internal constructor for term x64_lock_orb_mi_mem.
pub fn constructor_x64_lock_orb_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u8,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_orb_mi_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 657.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_orw_mi_mem.
pub fn constructor_x64_lock_orw_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u16,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_orw_mi_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 662.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_orl_mi_mem.
pub fn constructor_x64_lock_orl_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u32,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_orl_mi_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 667.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_orq_mi_sxl_mem.
pub fn constructor_x64_lock_orq_mi_sxl_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i32,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_orq_mi_sxl_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 672.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_orl_mi_sxb_mem.
pub fn constructor_x64_lock_orl_mi_sxb_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i8,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_orl_mi_sxb_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 677.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_orq_mi_sxb_mem.
pub fn constructor_x64_lock_orq_mi_sxb_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i8,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_orq_mi_sxb_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 682.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_orb_mr_mem.
pub fn constructor_x64_lock_orb_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_orb_mr_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 687.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_orw_mr_mem.
pub fn constructor_x64_lock_orw_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_orw_mr_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 692.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_orl_mr_mem.
pub fn constructor_x64_lock_orl_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_orl_mr_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 697.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_orq_mr_mem.
pub fn constructor_x64_lock_orq_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_orq_mr_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 702.
    return v3.clone();
}

// Generated as internal constructor for term x64_orps_a.
pub fn constructor_x64_orps_a<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMemAligned,
) -> Xmm {
    let v2 = &C::x64_orps_a_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_xmm(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 707.
    return v3;
}

// Generated as internal constructor for term x64_orpd_a.
pub fn constructor_x64_orpd_a<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMemAligned,
) -> Xmm {
    let v2 = &C::x64_orpd_a_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_xmm(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 712.
    return v3;
}

// Generated as internal constructor for term x64_shldw_mri.
pub fn constructor_x64_shldw_mri<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
    arg2: u8,
) -> Gpr {
    let v3 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v4 = &C::x64_shldw_mri_raw(ctx, v3, arg1, arg2);
    let v5 = constructor_emit_ret_gpr(ctx, v4);
    // Rule at <OUT_DIR>\assembler.isle line 717.
    return v5;
}

// Generated as internal constructor for term x64_shldw_mri_mem.
pub fn constructor_x64_shldw_mri_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
    arg2: u8,
) -> SideEffectNoResult {
    let v3 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v4 = &C::x64_shldw_mri_raw(ctx, v3, arg1, arg2);
    let v5 = &constructor_defer_side_effect(ctx, v4);
    // Rule at <OUT_DIR>\assembler.isle line 719.
    return v5.clone();
}

// Generated as internal constructor for term x64_shldw_mrc.
pub fn constructor_x64_shldw_mrc<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
    arg2: Gpr,
) -> Gpr {
    let v3 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v4 = &C::x64_shldw_mrc_raw(ctx, v3, arg1, arg2);
    let v5 = constructor_emit_ret_gpr(ctx, v4);
    // Rule at <OUT_DIR>\assembler.isle line 724.
    return v5;
}

// Generated as internal constructor for term x64_shldw_mrc_mem.
pub fn constructor_x64_shldw_mrc_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
    arg2: Gpr,
) -> SideEffectNoResult {
    let v3 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v4 = &C::x64_shldw_mrc_raw(ctx, v3, arg1, arg2);
    let v5 = &constructor_defer_side_effect(ctx, v4);
    // Rule at <OUT_DIR>\assembler.isle line 726.
    return v5.clone();
}

// Generated as internal constructor for term x64_shldl_mri.
pub fn constructor_x64_shldl_mri<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
    arg2: u8,
) -> Gpr {
    let v3 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v4 = &C::x64_shldl_mri_raw(ctx, v3, arg1, arg2);
    let v5 = constructor_emit_ret_gpr(ctx, v4);
    // Rule at <OUT_DIR>\assembler.isle line 731.
    return v5;
}

// Generated as internal constructor for term x64_shldl_mri_mem.
pub fn constructor_x64_shldl_mri_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
    arg2: u8,
) -> SideEffectNoResult {
    let v3 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v4 = &C::x64_shldl_mri_raw(ctx, v3, arg1, arg2);
    let v5 = &constructor_defer_side_effect(ctx, v4);
    // Rule at <OUT_DIR>\assembler.isle line 733.
    return v5.clone();
}

// Generated as internal constructor for term x64_shldq_mri.
pub fn constructor_x64_shldq_mri<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
    arg2: u8,
) -> Gpr {
    let v3 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v4 = &C::x64_shldq_mri_raw(ctx, v3, arg1, arg2);
    let v5 = constructor_emit_ret_gpr(ctx, v4);
    // Rule at <OUT_DIR>\assembler.isle line 738.
    return v5;
}

// Generated as internal constructor for term x64_shldq_mri_mem.
pub fn constructor_x64_shldq_mri_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
    arg2: u8,
) -> SideEffectNoResult {
    let v3 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v4 = &C::x64_shldq_mri_raw(ctx, v3, arg1, arg2);
    let v5 = &constructor_defer_side_effect(ctx, v4);
    // Rule at <OUT_DIR>\assembler.isle line 740.
    return v5.clone();
}

// Generated as internal constructor for term x64_shldl_mrc.
pub fn constructor_x64_shldl_mrc<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
    arg2: Gpr,
) -> Gpr {
    let v3 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v4 = &C::x64_shldl_mrc_raw(ctx, v3, arg1, arg2);
    let v5 = constructor_emit_ret_gpr(ctx, v4);
    // Rule at <OUT_DIR>\assembler.isle line 745.
    return v5;
}

// Generated as internal constructor for term x64_shldl_mrc_mem.
pub fn constructor_x64_shldl_mrc_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
    arg2: Gpr,
) -> SideEffectNoResult {
    let v3 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v4 = &C::x64_shldl_mrc_raw(ctx, v3, arg1, arg2);
    let v5 = &constructor_defer_side_effect(ctx, v4);
    // Rule at <OUT_DIR>\assembler.isle line 747.
    return v5.clone();
}

// Generated as internal constructor for term x64_shldq_mrc.
pub fn constructor_x64_shldq_mrc<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
    arg2: Gpr,
) -> Gpr {
    let v3 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v4 = &C::x64_shldq_mrc_raw(ctx, v3, arg1, arg2);
    let v5 = constructor_emit_ret_gpr(ctx, v4);
    // Rule at <OUT_DIR>\assembler.isle line 752.
    return v5;
}

// Generated as internal constructor for term x64_shldq_mrc_mem.
pub fn constructor_x64_shldq_mrc_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
    arg2: Gpr,
) -> SideEffectNoResult {
    let v3 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v4 = &C::x64_shldq_mrc_raw(ctx, v3, arg1, arg2);
    let v5 = &constructor_defer_side_effect(ctx, v4);
    // Rule at <OUT_DIR>\assembler.isle line 754.
    return v5.clone();
}

// Generated as internal constructor for term x64_subb_i.
pub fn constructor_x64_subb_i<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u8,
) -> Gpr {
    let v2 = &C::x64_subb_i_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 759.
    return v3;
}

// Generated as internal constructor for term x64_subw_i.
pub fn constructor_x64_subw_i<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u16,
) -> Gpr {
    let v2 = &C::x64_subw_i_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 764.
    return v3;
}

// Generated as internal constructor for term x64_subl_i.
pub fn constructor_x64_subl_i<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u32,
) -> Gpr {
    let v2 = &C::x64_subl_i_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 769.
    return v3;
}

// Generated as internal constructor for term x64_subq_i_sxl.
pub fn constructor_x64_subq_i_sxl<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: i32,
) -> Gpr {
    let v2 = &C::x64_subq_i_sxl_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 774.
    return v3;
}

// Generated as internal constructor for term x64_subb_mi.
pub fn constructor_x64_subb_mi<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u8,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_subb_mi_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 779.
    return v4;
}

// Generated as internal constructor for term x64_subb_mi_mem.
pub fn constructor_x64_subb_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u8,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_subb_mi_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 781.
    return v4.clone();
}

// Generated as internal constructor for term x64_subw_mi.
pub fn constructor_x64_subw_mi<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u16,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_subw_mi_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 786.
    return v4;
}

// Generated as internal constructor for term x64_subw_mi_mem.
pub fn constructor_x64_subw_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u16,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_subw_mi_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 788.
    return v4.clone();
}

// Generated as internal constructor for term x64_subl_mi.
pub fn constructor_x64_subl_mi<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u32,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_subl_mi_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 793.
    return v4;
}

// Generated as internal constructor for term x64_subl_mi_mem.
pub fn constructor_x64_subl_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u32,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_subl_mi_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 795.
    return v4.clone();
}

// Generated as internal constructor for term x64_subq_mi_sxl.
pub fn constructor_x64_subq_mi_sxl<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: i32,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_subq_mi_sxl_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 800.
    return v4;
}

// Generated as internal constructor for term x64_subq_mi_sxl_mem.
pub fn constructor_x64_subq_mi_sxl_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i32,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_subq_mi_sxl_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 802.
    return v4.clone();
}

// Generated as internal constructor for term x64_subl_mi_sxb.
pub fn constructor_x64_subl_mi_sxb<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: i8,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_subl_mi_sxb_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 807.
    return v4;
}

// Generated as internal constructor for term x64_subl_mi_sxb_mem.
pub fn constructor_x64_subl_mi_sxb_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i8,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_subl_mi_sxb_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 809.
    return v4.clone();
}

// Generated as internal constructor for term x64_subq_mi_sxb.
pub fn constructor_x64_subq_mi_sxb<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: i8,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_subq_mi_sxb_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 814.
    return v4;
}

// Generated as internal constructor for term x64_subq_mi_sxb_mem.
pub fn constructor_x64_subq_mi_sxb_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i8,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_subq_mi_sxb_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 816.
    return v4.clone();
}

// Generated as internal constructor for term x64_subb_mr.
pub fn constructor_x64_subb_mr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_subb_mr_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 821.
    return v4;
}

// Generated as internal constructor for term x64_subb_mr_mem.
pub fn constructor_x64_subb_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_subb_mr_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 823.
    return v4.clone();
}

// Generated as internal constructor for term x64_subw_mr.
pub fn constructor_x64_subw_mr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_subw_mr_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 828.
    return v4;
}

// Generated as internal constructor for term x64_subw_mr_mem.
pub fn constructor_x64_subw_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_subw_mr_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 830.
    return v4.clone();
}

// Generated as internal constructor for term x64_subl_mr.
pub fn constructor_x64_subl_mr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_subl_mr_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 835.
    return v4;
}

// Generated as internal constructor for term x64_subl_mr_mem.
pub fn constructor_x64_subl_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_subl_mr_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 837.
    return v4.clone();
}

// Generated as internal constructor for term x64_subq_mr.
pub fn constructor_x64_subq_mr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_subq_mr_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 842.
    return v4;
}

// Generated as internal constructor for term x64_subq_mr_mem.
pub fn constructor_x64_subq_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_subq_mr_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 844.
    return v4.clone();
}

// Generated as internal constructor for term x64_subb_rm.
pub fn constructor_x64_subb_rm<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
) -> Gpr {
    let v2 = &C::x64_subb_rm_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 849.
    return v3;
}

// Generated as internal constructor for term x64_subw_rm.
pub fn constructor_x64_subw_rm<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
) -> Gpr {
    let v2 = &C::x64_subw_rm_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 854.
    return v3;
}

// Generated as internal constructor for term x64_subl_rm.
pub fn constructor_x64_subl_rm<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
) -> Gpr {
    let v2 = &C::x64_subl_rm_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 859.
    return v3;
}

// Generated as internal constructor for term x64_subq_rm.
pub fn constructor_x64_subq_rm<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
) -> Gpr {
    let v2 = &C::x64_subq_rm_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 864.
    return v3;
}

// Generated as internal constructor for term x64_sbbb_i.
pub fn constructor_x64_sbbb_i<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u8,
) -> Gpr {
    let v2 = &C::x64_sbbb_i_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 869.
    return v3;
}

// Generated as internal constructor for term x64_sbbw_i.
pub fn constructor_x64_sbbw_i<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u16,
) -> Gpr {
    let v2 = &C::x64_sbbw_i_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 874.
    return v3;
}

// Generated as internal constructor for term x64_sbbl_i.
pub fn constructor_x64_sbbl_i<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u32,
) -> Gpr {
    let v2 = &C::x64_sbbl_i_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 879.
    return v3;
}

// Generated as internal constructor for term x64_sbbq_i_sxl.
pub fn constructor_x64_sbbq_i_sxl<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: i32,
) -> Gpr {
    let v2 = &C::x64_sbbq_i_sxl_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 884.
    return v3;
}

// Generated as internal constructor for term x64_sbbb_mi.
pub fn constructor_x64_sbbb_mi<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u8,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_sbbb_mi_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 889.
    return v4;
}

// Generated as internal constructor for term x64_sbbb_mi_mem.
pub fn constructor_x64_sbbb_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u8,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_sbbb_mi_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 891.
    return v4.clone();
}

// Generated as internal constructor for term x64_sbbw_mi.
pub fn constructor_x64_sbbw_mi<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u16,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_sbbw_mi_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 896.
    return v4;
}

// Generated as internal constructor for term x64_sbbw_mi_mem.
pub fn constructor_x64_sbbw_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u16,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_sbbw_mi_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 898.
    return v4.clone();
}

// Generated as internal constructor for term x64_sbbl_mi.
pub fn constructor_x64_sbbl_mi<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u32,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_sbbl_mi_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 903.
    return v4;
}

// Generated as internal constructor for term x64_sbbl_mi_mem.
pub fn constructor_x64_sbbl_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u32,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_sbbl_mi_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 905.
    return v4.clone();
}

// Generated as internal constructor for term x64_sbbq_mi_sxl.
pub fn constructor_x64_sbbq_mi_sxl<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: i32,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_sbbq_mi_sxl_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 910.
    return v4;
}

// Generated as internal constructor for term x64_sbbq_mi_sxl_mem.
pub fn constructor_x64_sbbq_mi_sxl_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i32,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_sbbq_mi_sxl_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 912.
    return v4.clone();
}

// Generated as internal constructor for term x64_sbbl_mi_sxb.
pub fn constructor_x64_sbbl_mi_sxb<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: i8,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_sbbl_mi_sxb_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 917.
    return v4;
}

// Generated as internal constructor for term x64_sbbl_mi_sxb_mem.
pub fn constructor_x64_sbbl_mi_sxb_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i8,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_sbbl_mi_sxb_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 919.
    return v4.clone();
}

// Generated as internal constructor for term x64_sbbq_mi_sxb.
pub fn constructor_x64_sbbq_mi_sxb<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: i8,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_sbbq_mi_sxb_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 924.
    return v4;
}

// Generated as internal constructor for term x64_sbbq_mi_sxb_mem.
pub fn constructor_x64_sbbq_mi_sxb_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i8,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_sbbq_mi_sxb_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 926.
    return v4.clone();
}

// Generated as internal constructor for term x64_sbbb_mr.
pub fn constructor_x64_sbbb_mr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_sbbb_mr_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 931.
    return v4;
}

// Generated as internal constructor for term x64_sbbb_mr_mem.
pub fn constructor_x64_sbbb_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_sbbb_mr_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 933.
    return v4.clone();
}

// Generated as internal constructor for term x64_sbbw_mr.
pub fn constructor_x64_sbbw_mr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_sbbw_mr_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 938.
    return v4;
}

// Generated as internal constructor for term x64_sbbw_mr_mem.
pub fn constructor_x64_sbbw_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_sbbw_mr_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 940.
    return v4.clone();
}

// Generated as internal constructor for term x64_sbbl_mr.
pub fn constructor_x64_sbbl_mr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_sbbl_mr_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 945.
    return v4;
}

// Generated as internal constructor for term x64_sbbl_mr_mem.
pub fn constructor_x64_sbbl_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_sbbl_mr_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 947.
    return v4.clone();
}

// Generated as internal constructor for term x64_sbbq_mr.
pub fn constructor_x64_sbbq_mr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_sbbq_mr_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 952.
    return v4;
}

// Generated as internal constructor for term x64_sbbq_mr_mem.
pub fn constructor_x64_sbbq_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_sbbq_mr_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 954.
    return v4.clone();
}

// Generated as internal constructor for term x64_sbbb_rm.
pub fn constructor_x64_sbbb_rm<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
) -> Gpr {
    let v2 = &C::x64_sbbb_rm_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 959.
    return v3;
}

// Generated as internal constructor for term x64_sbbw_rm.
pub fn constructor_x64_sbbw_rm<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
) -> Gpr {
    let v2 = &C::x64_sbbw_rm_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 964.
    return v3;
}

// Generated as internal constructor for term x64_sbbl_rm.
pub fn constructor_x64_sbbl_rm<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
) -> Gpr {
    let v2 = &C::x64_sbbl_rm_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 969.
    return v3;
}

// Generated as internal constructor for term x64_sbbq_rm.
pub fn constructor_x64_sbbq_rm<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
) -> Gpr {
    let v2 = &C::x64_sbbq_rm_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 974.
    return v3;
}

// Generated as internal constructor for term x64_lock_subb_mi_mem.
pub fn constructor_x64_lock_subb_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u8,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_subb_mi_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 979.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_subw_mi_mem.
pub fn constructor_x64_lock_subw_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u16,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_subw_mi_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 984.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_subl_mi_mem.
pub fn constructor_x64_lock_subl_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u32,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_subl_mi_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 989.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_subq_mi_sxl_mem.
pub fn constructor_x64_lock_subq_mi_sxl_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i32,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_subq_mi_sxl_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 994.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_subl_mi_sxb_mem.
pub fn constructor_x64_lock_subl_mi_sxb_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i8,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_subl_mi_sxb_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 999.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_subq_mi_sxb_mem.
pub fn constructor_x64_lock_subq_mi_sxb_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i8,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_subq_mi_sxb_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 1004.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_subb_mr_mem.
pub fn constructor_x64_lock_subb_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_subb_mr_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 1009.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_subw_mr_mem.
pub fn constructor_x64_lock_subw_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_subw_mr_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 1014.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_subl_mr_mem.
pub fn constructor_x64_lock_subl_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_subl_mr_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 1019.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_subq_mr_mem.
pub fn constructor_x64_lock_subq_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_subq_mr_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 1024.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_sbbb_mi_mem.
pub fn constructor_x64_lock_sbbb_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u8,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_sbbb_mi_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 1029.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_sbbw_mi_mem.
pub fn constructor_x64_lock_sbbw_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u16,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_sbbw_mi_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 1034.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_sbbl_mi_mem.
pub fn constructor_x64_lock_sbbl_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u32,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_sbbl_mi_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 1039.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_sbbq_mi_sxl_mem.
pub fn constructor_x64_lock_sbbq_mi_sxl_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i32,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_sbbq_mi_sxl_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 1044.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_sbbl_mi_sxb_mem.
pub fn constructor_x64_lock_sbbl_mi_sxb_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i8,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_sbbl_mi_sxb_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 1049.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_sbbq_mi_sxb_mem.
pub fn constructor_x64_lock_sbbq_mi_sxb_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i8,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_sbbq_mi_sxb_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 1054.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_sbbb_mr_mem.
pub fn constructor_x64_lock_sbbb_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_sbbb_mr_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 1059.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_sbbw_mr_mem.
pub fn constructor_x64_lock_sbbw_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_sbbw_mr_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 1064.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_sbbl_mr_mem.
pub fn constructor_x64_lock_sbbl_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_sbbl_mr_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 1069.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_sbbq_mr_mem.
pub fn constructor_x64_lock_sbbq_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_sbbq_mr_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 1074.
    return v3.clone();
}

// Generated as internal constructor for term x64_subss_a.
pub fn constructor_x64_subss_a<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v2 = &C::x64_subss_a_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_xmm(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 1079.
    return v3;
}

// Generated as internal constructor for term x64_subsd_a.
pub fn constructor_x64_subsd_a<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v2 = &C::x64_subsd_a_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_xmm(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 1084.
    return v3;
}

// Generated as internal constructor for term x64_subps_a.
pub fn constructor_x64_subps_a<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMemAligned,
) -> Xmm {
    let v2 = &C::x64_subps_a_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_xmm(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 1089.
    return v3;
}

// Generated as internal constructor for term x64_subpd_a.
pub fn constructor_x64_subpd_a<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMemAligned,
) -> Xmm {
    let v2 = &C::x64_subpd_a_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_xmm(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 1094.
    return v3;
}

// Generated as internal constructor for term x64_xorb_i.
pub fn constructor_x64_xorb_i<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u8,
) -> Gpr {
    let v2 = &C::x64_xorb_i_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 1099.
    return v3;
}

// Generated as internal constructor for term x64_xorw_i.
pub fn constructor_x64_xorw_i<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u16,
) -> Gpr {
    let v2 = &C::x64_xorw_i_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 1104.
    return v3;
}

// Generated as internal constructor for term x64_xorl_i.
pub fn constructor_x64_xorl_i<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u32,
) -> Gpr {
    let v2 = &C::x64_xorl_i_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 1109.
    return v3;
}

// Generated as internal constructor for term x64_xorq_i_sxl.
pub fn constructor_x64_xorq_i_sxl<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: i32,
) -> Gpr {
    let v2 = &C::x64_xorq_i_sxl_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 1114.
    return v3;
}

// Generated as internal constructor for term x64_xorb_mi.
pub fn constructor_x64_xorb_mi<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u8,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_xorb_mi_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 1119.
    return v4;
}

// Generated as internal constructor for term x64_xorb_mi_mem.
pub fn constructor_x64_xorb_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u8,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_xorb_mi_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 1121.
    return v4.clone();
}

// Generated as internal constructor for term x64_xorw_mi.
pub fn constructor_x64_xorw_mi<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u16,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_xorw_mi_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 1126.
    return v4;
}

// Generated as internal constructor for term x64_xorw_mi_mem.
pub fn constructor_x64_xorw_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u16,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_xorw_mi_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 1128.
    return v4.clone();
}

// Generated as internal constructor for term x64_xorl_mi.
pub fn constructor_x64_xorl_mi<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u32,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_xorl_mi_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 1133.
    return v4;
}

// Generated as internal constructor for term x64_xorl_mi_mem.
pub fn constructor_x64_xorl_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u32,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_xorl_mi_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 1135.
    return v4.clone();
}

// Generated as internal constructor for term x64_xorq_mi_sxl.
pub fn constructor_x64_xorq_mi_sxl<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: i32,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_xorq_mi_sxl_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 1140.
    return v4;
}

// Generated as internal constructor for term x64_xorq_mi_sxl_mem.
pub fn constructor_x64_xorq_mi_sxl_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i32,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_xorq_mi_sxl_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 1142.
    return v4.clone();
}

// Generated as internal constructor for term x64_xorl_mi_sxb.
pub fn constructor_x64_xorl_mi_sxb<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: i8,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_xorl_mi_sxb_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 1147.
    return v4;
}

// Generated as internal constructor for term x64_xorl_mi_sxb_mem.
pub fn constructor_x64_xorl_mi_sxb_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i8,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_xorl_mi_sxb_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 1149.
    return v4.clone();
}

// Generated as internal constructor for term x64_xorq_mi_sxb.
pub fn constructor_x64_xorq_mi_sxb<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: i8,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_xorq_mi_sxb_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 1154.
    return v4;
}

// Generated as internal constructor for term x64_xorq_mi_sxb_mem.
pub fn constructor_x64_xorq_mi_sxb_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i8,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_xorq_mi_sxb_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 1156.
    return v4.clone();
}

// Generated as internal constructor for term x64_xorb_mr.
pub fn constructor_x64_xorb_mr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_xorb_mr_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 1161.
    return v4;
}

// Generated as internal constructor for term x64_xorb_mr_mem.
pub fn constructor_x64_xorb_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_xorb_mr_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 1163.
    return v4.clone();
}

// Generated as internal constructor for term x64_xorw_mr.
pub fn constructor_x64_xorw_mr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_xorw_mr_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 1168.
    return v4;
}

// Generated as internal constructor for term x64_xorw_mr_mem.
pub fn constructor_x64_xorw_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_xorw_mr_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 1170.
    return v4.clone();
}

// Generated as internal constructor for term x64_xorl_mr.
pub fn constructor_x64_xorl_mr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_xorl_mr_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 1175.
    return v4;
}

// Generated as internal constructor for term x64_xorl_mr_mem.
pub fn constructor_x64_xorl_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_xorl_mr_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 1177.
    return v4.clone();
}

// Generated as internal constructor for term x64_xorq_mr.
pub fn constructor_x64_xorq_mr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_xorq_mr_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 1182.
    return v4;
}

// Generated as internal constructor for term x64_xorq_mr_mem.
pub fn constructor_x64_xorq_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_xorq_mr_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at <OUT_DIR>\assembler.isle line 1184.
    return v4.clone();
}

// Generated as internal constructor for term x64_xorb_rm.
pub fn constructor_x64_xorb_rm<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
) -> Gpr {
    let v2 = &C::x64_xorb_rm_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 1189.
    return v3;
}

// Generated as internal constructor for term x64_xorw_rm.
pub fn constructor_x64_xorw_rm<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
) -> Gpr {
    let v2 = &C::x64_xorw_rm_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 1194.
    return v3;
}

// Generated as internal constructor for term x64_xorl_rm.
pub fn constructor_x64_xorl_rm<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
) -> Gpr {
    let v2 = &C::x64_xorl_rm_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 1199.
    return v3;
}

// Generated as internal constructor for term x64_xorq_rm.
pub fn constructor_x64_xorq_rm<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
) -> Gpr {
    let v2 = &C::x64_xorq_rm_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 1204.
    return v3;
}

// Generated as internal constructor for term x64_lock_xorb_mi_mem.
pub fn constructor_x64_lock_xorb_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u8,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_xorb_mi_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 1209.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_xorw_mi_mem.
pub fn constructor_x64_lock_xorw_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u16,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_xorw_mi_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 1214.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_xorl_mi_mem.
pub fn constructor_x64_lock_xorl_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u32,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_xorl_mi_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 1219.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_xorq_mi_sxl_mem.
pub fn constructor_x64_lock_xorq_mi_sxl_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i32,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_xorq_mi_sxl_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 1224.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_xorl_mi_sxb_mem.
pub fn constructor_x64_lock_xorl_mi_sxb_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i8,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_xorl_mi_sxb_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 1229.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_xorq_mi_sxb_mem.
pub fn constructor_x64_lock_xorq_mi_sxb_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i8,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_xorq_mi_sxb_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 1234.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_xorb_mr_mem.
pub fn constructor_x64_lock_xorb_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_xorb_mr_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 1239.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_xorw_mr_mem.
pub fn constructor_x64_lock_xorw_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_xorw_mr_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 1244.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_xorl_mr_mem.
pub fn constructor_x64_lock_xorl_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_xorl_mr_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 1249.
    return v3.clone();
}

// Generated as internal constructor for term x64_lock_xorq_mr_mem.
pub fn constructor_x64_lock_xorq_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &C::x64_lock_xorq_mr_raw(ctx, arg0, arg1);
    let v3 = &constructor_defer_side_effect(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 1254.
    return v3.clone();
}

// Generated as internal constructor for term x64_xorps_a.
pub fn constructor_x64_xorps_a<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMemAligned,
) -> Xmm {
    let v2 = &C::x64_xorps_a_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_xmm(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 1259.
    return v3;
}

// Generated as internal constructor for term x64_xorpd_a.
pub fn constructor_x64_xorpd_a<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMemAligned,
) -> Xmm {
    let v2 = &C::x64_xorpd_a_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_xmm(ctx, v2);
    // Rule at <OUT_DIR>\assembler.isle line 1264.
    return v3;
}
