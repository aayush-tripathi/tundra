// GENERATED BY ISLE. DO NOT EDIT!
//
// Generated automatically from the instruction-selection DSL code in:
// - src\prelude.isle
// - src\prelude_lower.isle
// - src\isa\s390x\inst.isle
// - src\isa\s390x\lower.isle
// - <OUT_DIR>\clif_lower.isle

use super::*;  // Pulls in all external types.
use std::marker::PhantomData;

/// Context during lowering: an implementation of this trait
/// must be provided with all external constructors and extractors.
/// A mutable borrow is passed along through all lowering logic.
pub trait Context {
    fn unit(&mut self, ) -> Unit;
    fn def_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn value_type(&mut self, arg0: Value) -> Type;
    fn u32_nonnegative(&mut self, arg0: u32) -> Option<u32>;
    fn offset32(&mut self, arg0: Offset32) -> i32;
    fn u32_lteq(&mut self, arg0: u32, arg1: u32) -> Option<Unit>;
    fn u8_lteq(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn u8_lt(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn u8_as_i8(&mut self, arg0: u8) -> i8;
    fn u8_as_u32(&mut self, arg0: u8) -> u32;
    fn u8_as_u64(&mut self, arg0: u8) -> u64;
    fn u16_as_i16(&mut self, arg0: u16) -> i16;
    fn u16_as_u32(&mut self, arg0: u16) -> u32;
    fn u16_as_u64(&mut self, arg0: u16) -> u64;
    fn u64_as_u8(&mut self, arg0: u64) -> u8;
    fn u64_as_u16(&mut self, arg0: u64) -> u16;
    fn u64_as_i64(&mut self, arg0: u64) -> i64;
    fn u8_try_from_u64(&mut self, arg0: u64) -> Option<u8>;
    fn u8_try_from_u16(&mut self, arg0: u16) -> Option<u8>;
    fn u8_try_from_i32(&mut self, arg0: i32) -> Option<u8>;
    fn u16_try_from_u64(&mut self, arg0: u64) -> Option<u16>;
    fn u32_try_from_u64(&mut self, arg0: u64) -> Option<u32>;
    fn u64_try_from_i64(&mut self, arg0: i64) -> Option<u64>;
    fn i8_try_from_u64(&mut self, arg0: u64) -> Option<i8>;
    fn i16_try_from_u64(&mut self, arg0: u64) -> Option<i16>;
    fn i32_try_from_u64(&mut self, arg0: u64) -> Option<i32>;
    fn u32_as_u64(&mut self, arg0: u32) -> u64;
    fn i32_as_i64(&mut self, arg0: i32) -> i64;
    fn i64_as_u64(&mut self, arg0: i64) -> u64;
    fn i64_neg(&mut self, arg0: i64) -> i64;
    fn i8_neg(&mut self, arg0: i8) -> i8;
    fn u128_as_u64(&mut self, arg0: u128) -> Option<u64>;
    fn u64_as_u32(&mut self, arg0: u64) -> Option<u32>;
    fn u32_as_u16(&mut self, arg0: u32) -> Option<u16>;
    fn i32_as_i8(&mut self, arg0: i32) -> Option<i8>;
    fn u64_as_i32(&mut self, arg0: u64) -> i32;
    fn u8_and(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_shl(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_shr(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_sub(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u32_add(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_sub(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_and(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_shl(&mut self, arg0: u32, arg1: u32) -> u32;
    fn s32_add_fallible(&mut self, arg0: i32, arg1: i32) -> Option<i32>;
    fn checked_add_with_type(&mut self, arg0: Type, arg1: u64, arg2: u64) -> Option<u64>;
    fn add_overflows_with_type(&mut self, arg0: Type, arg1: u64, arg2: u64) -> bool;
    fn u64_add(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sub(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_mul(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_udiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_and(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_or(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_xor(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_shl(&mut self, arg0: u64, arg1: u64) -> u64;
    fn imm64_sdiv(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Option<Imm64>;
    fn imm64_shl(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_ushr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_sshr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn u64_not(&mut self, arg0: u64) -> u64;
    fn u64_eq(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_le(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_lt(&mut self, arg0: u64, arg1: u64) -> bool;
    fn i64_shr(&mut self, arg0: i64, arg1: i64) -> i64;
    fn i64_ctz(&mut self, arg0: i64) -> i64;
    fn i64_sextend_u64(&mut self, arg0: Type, arg1: u64) -> i64;
    fn i64_sextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> i64;
    fn u64_uextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> u64;
    fn imm64_icmp(&mut self, arg0: Type, arg1: &IntCC, arg2: Imm64, arg3: Imm64) -> Imm64;
    fn u64_is_zero(&mut self, arg0: u64) -> bool;
    fn i64_is_zero(&mut self, arg0: i64) -> bool;
    fn u64_is_odd(&mut self, arg0: u64) -> bool;
    fn u128_replicated_u64(&mut self, arg0: u128) -> Option<u64>;
    fn u64_replicated_u32(&mut self, arg0: u64) -> Option<u64>;
    fn u32_replicated_u16(&mut self, arg0: u64) -> Option<u64>;
    fn u16_replicated_u8(&mut self, arg0: u64) -> Option<u8>;
    fn u128_low_bits(&mut self, arg0: u128) -> u64;
    fn u128_high_bits(&mut self, arg0: u128) -> u64;
    fn f16_min(&mut self, arg0: Ieee16, arg1: Ieee16) -> Option<Ieee16>;
    fn f16_max(&mut self, arg0: Ieee16, arg1: Ieee16) -> Option<Ieee16>;
    fn f16_neg(&mut self, arg0: Ieee16) -> Ieee16;
    fn f16_abs(&mut self, arg0: Ieee16) -> Ieee16;
    fn f16_copysign(&mut self, arg0: Ieee16, arg1: Ieee16) -> Ieee16;
    fn f32_add(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_sub(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_mul(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_div(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_sqrt(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_ceil(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_floor(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_trunc(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_nearest(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_min(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_max(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_neg(&mut self, arg0: Ieee32) -> Ieee32;
    fn f32_abs(&mut self, arg0: Ieee32) -> Ieee32;
    fn f32_copysign(&mut self, arg0: Ieee32, arg1: Ieee32) -> Ieee32;
    fn f64_add(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_sub(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_mul(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_div(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_sqrt(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_ceil(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_floor(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_trunc(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_nearest(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_min(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_max(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_neg(&mut self, arg0: Ieee64) -> Ieee64;
    fn f64_abs(&mut self, arg0: Ieee64) -> Ieee64;
    fn f64_copysign(&mut self, arg0: Ieee64, arg1: Ieee64) -> Ieee64;
    fn f128_min(&mut self, arg0: Ieee128, arg1: Ieee128) -> Option<Ieee128>;
    fn f128_max(&mut self, arg0: Ieee128, arg1: Ieee128) -> Option<Ieee128>;
    fn f128_neg(&mut self, arg0: Ieee128) -> Ieee128;
    fn f128_abs(&mut self, arg0: Ieee128) -> Ieee128;
    fn f128_copysign(&mut self, arg0: Ieee128, arg1: Ieee128) -> Ieee128;
    fn ty_umin(&mut self, arg0: Type) -> u64;
    fn ty_umax(&mut self, arg0: Type) -> u64;
    fn ty_smin(&mut self, arg0: Type) -> u64;
    fn ty_smax(&mut self, arg0: Type) -> u64;
    fn ty_bits(&mut self, arg0: Type) -> u8;
    fn ty_bits_u16(&mut self, arg0: Type) -> u16;
    fn ty_bits_u64(&mut self, arg0: Type) -> u64;
    fn ty_mask(&mut self, arg0: Type) -> u64;
    fn ty_lane_mask(&mut self, arg0: Type) -> u64;
    fn ty_lane_count(&mut self, arg0: Type) -> u64;
    fn ty_bytes(&mut self, arg0: Type) -> u16;
    fn lane_type(&mut self, arg0: Type) -> Type;
    fn ty_half_lanes(&mut self, arg0: Type) -> Option<Type>;
    fn ty_half_width(&mut self, arg0: Type) -> Option<Type>;
    fn ty_equal(&mut self, arg0: Type, arg1: Type) -> bool;
    fn mem_flags_trusted(&mut self, ) -> MemFlags;
    fn intcc_swap_args(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_complement(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_without_eq(&mut self, arg0: &IntCC) -> IntCC;
    fn floatcc_swap_args(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_complement(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_unordered(&mut self, arg0: &FloatCC) -> bool;
    fn fits_in_16(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn lane_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_16(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64_extract(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32_or_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_8_or_16(&mut self, arg0: Type) -> Option<Type>;
    fn ty_16_or_32(&mut self, arg0: Type) -> Option<Type>;
    fn int_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_16_to_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_float_or_vec(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_not_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_ctor(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_addr64(&mut self, arg0: Type) -> Option<Type>;
    fn not_vec32x2(&mut self, arg0: Type) -> Option<Type>;
    fn not_i64x2(&mut self, arg0: Type) -> Option<()>;
    fn u8_from_uimm8(&mut self, arg0: Uimm8) -> u8;
    fn u64_from_bool(&mut self, arg0: bool) -> u64;
    fn u64_from_imm64(&mut self, arg0: Imm64) -> u64;
    fn nonzero_u64_from_imm64(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64_power_of_two(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64(&mut self, arg0: u64) -> Imm64;
    fn imm64_masked(&mut self, arg0: Type, arg1: u64) -> Imm64;
    fn u16_from_ieee16(&mut self, arg0: Ieee16) -> u16;
    fn u32_from_ieee32(&mut self, arg0: Ieee32) -> u32;
    fn u64_from_ieee64(&mut self, arg0: Ieee64) -> u64;
    fn multi_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn ty_dyn64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn128_int(&mut self, arg0: Type) -> Option<Type>;
    fn offset32_to_i32(&mut self, arg0: Offset32) -> i32;
    fn i32_to_offset32(&mut self, arg0: i32) -> Offset32;
    fn intcc_unsigned(&mut self, arg0: &IntCC) -> IntCC;
    fn signed_cond_code(&mut self, arg0: &IntCC) -> Option<IntCC>;
    fn trap_code_division_by_zero(&mut self, ) -> TrapCode;
    fn trap_code_integer_overflow(&mut self, ) -> TrapCode;
    fn trap_code_bad_conversion_to_integer(&mut self, ) -> TrapCode;
    fn range(&mut self, arg0: usize, arg1: usize) -> Range;
    fn range_view(&mut self, arg0: Range) -> RangeView;
    fn value_reg(&mut self, arg0: Reg) -> ValueRegs;
    fn writable_value_reg(&mut self, arg0: WritableReg) -> WritableValueRegs;
    fn value_regs(&mut self, arg0: Reg, arg1: Reg) -> ValueRegs;
    fn writable_value_regs(&mut self, arg0: WritableReg, arg1: WritableReg) -> WritableValueRegs;
    fn value_regs_invalid(&mut self, ) -> ValueRegs;
    fn output_none(&mut self, ) -> InstOutput;
    fn output(&mut self, arg0: ValueRegs) -> InstOutput;
    fn output_pair(&mut self, arg0: ValueRegs, arg1: ValueRegs) -> InstOutput;
    fn output_builder_new(&mut self, ) -> InstOutputBuilder;
    fn output_builder_push(&mut self, arg0: &InstOutputBuilder, arg1: ValueRegs) -> Unit;
    fn output_builder_finish(&mut self, arg0: &InstOutputBuilder) -> InstOutput;
    fn temp_writable_reg(&mut self, arg0: Type) -> WritableReg;
    fn is_valid_reg(&mut self, arg0: Reg) -> bool;
    fn invalid_reg(&mut self, ) -> Reg;
    fn mark_value_used(&mut self, arg0: Value) -> Unit;
    fn put_in_reg(&mut self, arg0: Value) -> Reg;
    fn put_in_regs(&mut self, arg0: Value) -> ValueRegs;
    fn ensure_in_vreg(&mut self, arg0: Reg, arg1: Type) -> Reg;
    fn value_regs_get(&mut self, arg0: ValueRegs, arg1: usize) -> Reg;
    fn value_regs_len(&mut self, arg0: ValueRegs) -> usize;
    fn preg_to_reg(&mut self, arg0: PReg) -> Reg;
    fn add_range_fact(&mut self, arg0: Reg, arg1: u16, arg2: u64, arg3: u64) -> Reg;
    fn single_target(&mut self, arg0: &MachLabelSlice) -> Option<MachLabel>;
    fn two_targets(&mut self, arg0: &MachLabelSlice) -> Option<(MachLabel, MachLabel)>;
    fn jump_table_targets(&mut self, arg0: &MachLabelSlice) -> Option<(MachLabel, BoxVecMachLabel)>;
    fn jump_table_size(&mut self, arg0: &BoxVecMachLabel) -> u32;
    fn value_list_slice(&mut self, arg0: ValueList) -> ValueSlice;
    fn value_slice_empty(&mut self, arg0: ValueSlice) -> Option<()>;
    fn value_slice_unwrap(&mut self, arg0: ValueSlice) -> Option<(Value, ValueSlice)>;
    fn value_slice_len(&mut self, arg0: ValueSlice) -> usize;
    fn value_slice_get(&mut self, arg0: ValueSlice, arg1: usize) -> Value;
    fn writable_reg_to_reg(&mut self, arg0: WritableReg) -> Reg;
    fn inst_results(&mut self, arg0: Inst) -> ValueSlice;
    fn value_is_unused(&mut self, arg0: Value) -> bool;
    fn first_result(&mut self, arg0: Inst) -> Option<Value>;
    fn inst_data_value(&mut self, arg0: Inst) -> InstructionData;
    fn i32_from_iconst(&mut self, arg0: Value) -> Option<i32>;
    fn i64_from_iconst(&mut self, arg0: Value) -> Option<i64>;
    fn zero_value(&mut self, arg0: Value) -> Option<Value>;
    fn is_sinkable_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn maybe_uextend(&mut self, arg0: Value) -> Option<Value>;
    fn uimm8(&mut self, arg0: Imm64) -> Option<u8>;
    fn emit(&mut self, arg0: &MInst) -> Unit;
    fn sink_inst(&mut self, arg0: Inst) -> Unit;
    fn emit_u64_le_const(&mut self, arg0: u64) -> VCodeConstant;
    fn emit_u128_le_const(&mut self, arg0: u128) -> VCodeConstant;
    fn const_to_vconst(&mut self, arg0: Constant) -> VCodeConstant;
    fn tls_model(&mut self, arg0: Type) -> TlsModel;
    fn tls_model_is_elf_gd(&mut self, ) -> Option<Unit>;
    fn tls_model_is_macho(&mut self, ) -> Option<Unit>;
    fn tls_model_is_coff(&mut self, ) -> Option<Unit>;
    fn preserve_frame_pointers(&mut self, ) -> Option<Unit>;
    fn stack_switch_model(&mut self, ) -> Option<StackSwitchModel>;
    fn box_external_name(&mut self, arg0: ExternalName) -> BoxExternalName;
    fn func_ref_data(&mut self, arg0: FuncRef) -> (SigRef, ExternalName, RelocDistance);
    fn exception_sig(&mut self, arg0: ExceptionTable) -> SigRef;
    fn symbol_value_data(&mut self, arg0: GlobalValue) -> Option<(ExternalName, RelocDistance, i64)>;
    fn reloc_distance_near(&mut self, arg0: RelocDistance) -> Option<()>;
    fn vec_mask_from_immediate(&mut self, arg0: Immediate) -> Option<VecMask>;
    fn u128_from_immediate(&mut self, arg0: Immediate) -> Option<u128>;
    fn vconst_from_immediate(&mut self, arg0: Immediate) -> Option<VCodeConstant>;
    fn u128_from_constant(&mut self, arg0: Constant) -> Option<u128>;
    fn u64_from_constant(&mut self, arg0: Constant) -> Option<u64>;
    fn shuffle64_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8)>;
    fn shuffle32_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8, u8, u8)>;
    fn shuffle16_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8, u8, u8, u8, u8, u8, u8)>;
    fn only_writable_reg(&mut self, arg0: WritableValueRegs) -> Option<WritableReg>;
    fn writable_regs_get(&mut self, arg0: WritableValueRegs, arg1: usize) -> WritableReg;
    fn abi_num_args(&mut self, arg0: Sig) -> usize;
    fn abi_get_arg(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_num_rets(&mut self, arg0: Sig) -> usize;
    fn abi_get_ret(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_ret_arg(&mut self, arg0: Sig) -> Option<ABIArg>;
    fn abi_no_ret_arg(&mut self, arg0: Sig) -> Option<()>;
    fn abi_unwrap_ret_area_ptr(&mut self, ) -> Reg;
    fn abi_stackslot_addr(&mut self, arg0: WritableReg, arg1: StackSlot, arg2: Offset32) -> MInst;
    fn abi_dynamic_stackslot_addr(&mut self, arg0: WritableReg, arg1: DynamicStackSlot) -> MInst;
    fn abi_arg_only_slot(&mut self, arg0: &ABIArg) -> Option<ABIArgSlot>;
    fn abi_arg_implicit_pointer(&mut self, arg0: &ABIArg) -> Option<(ABIArgSlot, i64, Type)>;
    fn real_reg_to_reg(&mut self, arg0: RealReg) -> Reg;
    fn real_reg_to_writable_reg(&mut self, arg0: RealReg) -> WritableReg;
    fn gen_move(&mut self, arg0: Type, arg1: WritableReg, arg2: Reg) -> MInst;
    fn gen_return(&mut self, arg0: ValueSlice) -> Unit;
    fn gen_return_call(&mut self, arg0: SigRef, arg1: ExternalName, arg2: RelocDistance, arg3: ValueSlice) -> InstOutput;
    fn gen_return_call_indirect(&mut self, arg0: SigRef, arg1: Value, arg2: ValueSlice) -> InstOutput;
    fn safe_divisor_from_imm64(&mut self, arg0: Type, arg1: Imm64) -> Option<u64>;
    fn call_site_info_split(&mut self, arg0: CallSiteInfo) -> (BoxCallInfo, InstOutput);
    fn box_symbol_reloc(&mut self, arg0: &SymbolReloc) -> BoxSymbolReloc;
    fn mie2_enabled(&mut self, arg0: Type) -> Option<()>;
    fn mie2_disabled(&mut self, arg0: Type) -> Option<()>;
    fn vxrs_ext2_enabled(&mut self, arg0: Type) -> Option<()>;
    fn vxrs_ext2_disabled(&mut self, arg0: Type) -> Option<()>;
    fn lane_order(&mut self, ) -> LaneOrder;
    fn be_lane_idx(&mut self, arg0: Type, arg1: u8) -> u8;
    fn be_vec_const(&mut self, arg0: Type, arg1: u128) -> u128;
    fn writable_gpr(&mut self, arg0: u8) -> WritableReg;
    fn zero_reg(&mut self, ) -> Reg;
    fn gpr32_ty(&mut self, arg0: Type) -> Option<Type>;
    fn gpr64_ty(&mut self, arg0: Type) -> Option<Type>;
    fn vr128_ty(&mut self, arg0: Type) -> Option<Type>;
    fn uimm32shifted(&mut self, arg0: u32, arg1: u8) -> UImm32Shifted;
    fn uimm16shifted(&mut self, arg0: u16, arg1: u8) -> UImm16Shifted;
    fn i64_nonequal(&mut self, arg0: i64, arg1: i64) -> Option<i64>;
    fn u8_as_u16(&mut self, arg0: u8) -> u16;
    fn u64_truncate_to_u32(&mut self, arg0: u64) -> u32;
    fn u64_as_i16(&mut self, arg0: u64) -> i16;
    fn u64_pair_split(&mut self, arg0: u128) -> (u64, u64);
    fn u64_pair_concat(&mut self, arg0: u64, arg1: u64) -> u128;
    fn u32_pair_split(&mut self, arg0: u64) -> (u32, u32);
    fn u32_pair_concat(&mut self, arg0: u32, arg1: u32) -> u64;
    fn u16_pair_split(&mut self, arg0: u32) -> (u16, u16);
    fn u16_pair_concat(&mut self, arg0: u16, arg1: u16) -> u32;
    fn u8_pair_split(&mut self, arg0: u16) -> (u8, u8);
    fn u8_pair_concat(&mut self, arg0: u8, arg1: u8) -> u16;
    fn lane_byte_mask(&mut self, arg0: Type, arg1: u8) -> u16;
    fn shuffle_mask_from_u128(&mut self, arg0: u128) -> (u128, u16);
    fn u64_nonzero_hipart(&mut self, arg0: u64) -> Option<u64>;
    fn u64_nonzero_lopart(&mut self, arg0: u64) -> Option<u64>;
    fn i32_from_u64(&mut self, arg0: u64) -> Option<i32>;
    fn i16_from_u64(&mut self, arg0: u64) -> Option<i16>;
    fn i16_from_u32(&mut self, arg0: u32) -> Option<i16>;
    fn uimm32shifted_from_u64(&mut self, arg0: u64) -> Option<UImm32Shifted>;
    fn uimm16shifted_from_u64(&mut self, arg0: u64) -> Option<UImm16Shifted>;
    fn u64_from_value(&mut self, arg0: Value) -> Option<u64>;
    fn u32_from_value(&mut self, arg0: Value) -> Option<u32>;
    fn u8_from_value(&mut self, arg0: Value) -> Option<u8>;
    fn u64_from_signed_value(&mut self, arg0: Value) -> Option<u64>;
    fn u64_from_inverted_value(&mut self, arg0: Value) -> Option<u64>;
    fn i64_from_value(&mut self, arg0: Value) -> Option<i64>;
    fn i32_from_value(&mut self, arg0: Value) -> Option<i32>;
    fn i16_from_value(&mut self, arg0: Value) -> Option<i16>;
    fn i16_from_swapped_value(&mut self, arg0: Value) -> Option<i16>;
    fn i64_from_negated_value(&mut self, arg0: Value) -> Option<i64>;
    fn i32_from_negated_value(&mut self, arg0: Value) -> Option<i32>;
    fn i16_from_negated_value(&mut self, arg0: Value) -> Option<i16>;
    fn uimm16shifted_from_value(&mut self, arg0: Value) -> Option<UImm16Shifted>;
    fn uimm32shifted_from_value(&mut self, arg0: Value) -> Option<UImm32Shifted>;
    fn uimm16shifted_from_inverted_value(&mut self, arg0: Value) -> Option<UImm16Shifted>;
    fn uimm32shifted_from_inverted_value(&mut self, arg0: Value) -> Option<UImm32Shifted>;
    fn len_minus_one(&mut self, arg0: u64) -> Option<u8>;
    fn mask_amt_imm(&mut self, arg0: Type, arg1: i64) -> u8;
    fn mask_as_cond(&mut self, arg0: u8) -> Cond;
    fn intcc_as_cond(&mut self, arg0: &IntCC) -> Cond;
    fn floatcc_as_cond(&mut self, arg0: &FloatCC) -> Cond;
    fn invert_cond(&mut self, arg0: &Cond) -> Cond;
    fn signed(&mut self, arg0: &IntCC) -> Option<()>;
    fn unsigned(&mut self, arg0: &IntCC) -> Option<()>;
    fn zero_offset(&mut self, ) -> Offset32;
    fn i64_from_offset(&mut self, arg0: Offset32) -> i64;
    fn littleendian(&mut self, arg0: MemFlags) -> Option<()>;
    fn bigendian(&mut self, arg0: MemFlags) -> Option<()>;
    fn memflags_trusted(&mut self, ) -> MemFlags;
    fn memarg_flags(&mut self, arg0: &MemArg) -> MemFlags;
    fn memarg_reg_plus_reg(&mut self, arg0: Reg, arg1: Reg, arg2: u8, arg3: MemFlags) -> MemArg;
    fn memarg_reg_plus_off(&mut self, arg0: Reg, arg1: i64, arg2: u8, arg3: MemFlags) -> MemArg;
    fn memarg_symbol(&mut self, arg0: ExternalName, arg1: i32, arg2: MemFlags) -> MemArg;
    fn memarg_got(&mut self, ) -> MemArg;
    fn memarg_offset(&mut self, arg0: &MemArg, arg1: i64) -> MemArg;
    fn memarg_symbol_offset_sum(&mut self, arg0: i64, arg1: i64) -> Option<i32>;
    fn memarg_frame_pointer_offset(&mut self, ) -> MemArg;
    fn memarg_return_address_offset(&mut self, ) -> MemArg;
    fn sinkable_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn writable_regpair(&mut self, arg0: WritableReg, arg1: WritableReg) -> WritableRegPair;
    fn writable_regpair_hi(&mut self, arg0: WritableRegPair) -> WritableReg;
    fn writable_regpair_lo(&mut self, arg0: WritableRegPair) -> WritableReg;
    fn regpair(&mut self, arg0: Reg, arg1: Reg) -> RegPair;
    fn regpair_hi(&mut self, arg0: RegPair) -> Reg;
    fn regpair_lo(&mut self, arg0: RegPair) -> Reg;
    fn inst_builder_new(&mut self, ) -> VecMInstBuilder;
    fn inst_builder_push(&mut self, arg0: &VecMInstBuilder, arg1: &MInst) -> Unit;
    fn inst_builder_finish(&mut self, arg0: &VecMInstBuilder) -> VecMInst;
    fn real_reg(&mut self, arg0: WritableReg) -> Option<WritableReg>;
    fn same_reg(&mut self, arg0: WritableReg, arg1: Reg) -> Option<Reg>;
    fn preg_stack(&mut self, ) -> PReg;
    fn preg_gpr_0(&mut self, ) -> PReg;
    fn args_builder_new(&mut self, ) -> CallArgListBuilder;
    fn args_builder_push(&mut self, arg0: &CallArgListBuilder, arg1: Reg, arg2: RealReg) -> Unit;
    fn args_builder_finish(&mut self, arg0: &CallArgListBuilder) -> CallArgList;
    fn abi_sig(&mut self, arg0: SigRef) -> Sig;
    fn abi_call_site_info(&mut self, arg0: Sig, arg1: &CallInstDest, arg2: &CallArgList) -> CallSiteInfo;
    fn abi_try_call_info(&mut self, arg0: Sig, arg1: &CallInstDest, arg2: &CallArgList, arg3: ExceptionTable, arg4: &MachLabelSlice) -> BoxCallInfo;
    fn abi_return_call_info(&mut self, arg0: Sig, arg1: &CallInstDest, arg2: &CallArgList) -> BoxReturnCallInfo;
    fn abi_call_stack_args(&mut self, arg0: Sig) -> MemArg;
    fn abi_call_stack_rets(&mut self, arg0: Sig) -> MemArg;
    fn abi_return_call_stack_args(&mut self, arg0: Sig) -> MemArg;
    fn abi_lane_order(&mut self, arg0: Sig) -> LaneOrder;
    fn fcvt_to_uint_ub32(&mut self, arg0: u8) -> u64;
    fn fcvt_to_uint_lb32(&mut self, ) -> u64;
    fn fcvt_to_uint_ub64(&mut self, arg0: u8) -> u64;
    fn fcvt_to_uint_lb64(&mut self, ) -> u64;
    fn fcvt_to_sint_ub32(&mut self, arg0: u8) -> u64;
    fn fcvt_to_sint_lb32(&mut self, arg0: u8) -> u64;
    fn fcvt_to_sint_ub64(&mut self, arg0: u8) -> u64;
    fn fcvt_to_sint_lb64(&mut self, arg0: u8) -> u64;
    fn abi_for_elf_tls_get_offset(&mut self, ) -> Unit;
    fn unpack_value_array_2(&mut self, arg0: &ValueArray2) -> (Value, Value);
    fn pack_value_array_2(&mut self, arg0: Value, arg1: Value) -> ValueArray2;
    fn unpack_value_array_3(&mut self, arg0: &ValueArray3) -> (Value, Value, Value);
    fn pack_value_array_3(&mut self, arg0: Value, arg1: Value, arg2: Value) -> ValueArray3;
    fn unpack_block_array_2(&mut self, arg0: &BlockArray2) -> (BlockCall, BlockCall);
    fn pack_block_array_2(&mut self, arg0: BlockCall, arg1: BlockCall) -> BlockArray2;
}

pub trait ContextIter {
    type Context;
    type Output;
    fn next(&mut self, ctx: &mut Self::Context) -> Option<Self::Output>;
    fn size_hint(&self) -> (usize, Option<usize>) { (0, None) }
}

pub trait IntoContextIter {
    type Context;
    type Output;
    type IntoIter: ContextIter<Context = Self::Context, Output = Self::Output>;
    fn into_context_iter(self) -> Self::IntoIter;
}

pub trait Length {
    fn len(&self) -> usize;
}

impl<T> Length for std::vec::Vec<T> {
    fn len(&self) -> usize {
        std::vec::Vec::len(self)
    }
}

pub struct ContextIterWrapper<I, C> {
    iter: I,
    _ctx: std::marker::PhantomData<C>,
}
impl<I: Default, C> Default for ContextIterWrapper<I, C> {
    fn default() -> Self {
        ContextIterWrapper {
            iter: I::default(),
            _ctx: std::marker::PhantomData
        }
    }
}
impl<I, C> std::ops::Deref for ContextIterWrapper<I, C> {
    type Target = I;
    fn deref(&self) -> &I {
        &self.iter
    }
}
impl<I, C> std::ops::DerefMut for ContextIterWrapper<I, C> {
    fn deref_mut(&mut self) -> &mut I {
        &mut self.iter
    }
}
impl<I: Iterator, C: Context> From<I> for ContextIterWrapper<I, C> {
    fn from(iter: I) -> Self {
        Self { iter, _ctx: std::marker::PhantomData }
    }
}
impl<I: Iterator, C: Context> ContextIter for ContextIterWrapper<I, C> {
    type Context = C;
    type Output = I::Item;
    fn next(&mut self, _ctx: &mut Self::Context) -> Option<Self::Output> {
        self.iter.next()
    }
    fn size_hint(&self) -> (usize, Option<usize>) {
        self.iter.size_hint()
    }
}
impl<I: IntoIterator, C: Context> IntoContextIter for ContextIterWrapper<I, C> {
    type Context = C;
    type Output = I::Item;
    type IntoIter = ContextIterWrapper<I::IntoIter, C>;
    fn into_context_iter(self) -> Self::IntoIter {
        ContextIterWrapper {
            iter: self.iter.into_iter(),
            _ctx: std::marker::PhantomData
        }
    }
}
impl<T, E: Extend<T>, C> Extend<T> for ContextIterWrapper<E, C> {
    fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
        self.iter.extend(iter);
    }
}
impl<L: Length, C> Length for ContextIterWrapper<L, C> {
    fn len(&self) -> usize {
        self.iter.len()
    }
}
           

/// Internal type MultiReg: defined at src\prelude_lower.isle line 17.
#[derive(Clone, Debug)]
pub enum MultiReg {
    Empty,
    One {
        a: Reg,
    },
    Two {
        a: Reg,
        b: Reg,
    },
    Three {
        a: Reg,
        b: Reg,
        c: Reg,
    },
    Four {
        a: Reg,
        b: Reg,
        c: Reg,
        d: Reg,
    },
}

/// Internal type SideEffectNoResult: defined at src\prelude_lower.isle line 422.
#[derive(Clone, Debug)]
pub enum SideEffectNoResult {
    Inst {
        inst: MInst,
    },
    Inst2 {
        inst1: MInst,
        inst2: MInst,
    },
    Inst3 {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
    },
}

/// Internal type ProducesFlags: defined at src\prelude_lower.isle line 475.
#[derive(Clone, Debug)]
pub enum ProducesFlags {
    AlreadyExistingFlags,
    ProducesFlagsSideEffect {
        inst: MInst,
    },
    ProducesFlagsTwiceSideEffect {
        inst1: MInst,
        inst2: MInst,
    },
    ProducesFlagsReturnsReg {
        inst: MInst,
        result: Reg,
    },
    ProducesFlagsReturnsResultWithConsumer {
        inst: MInst,
        result: Reg,
    },
}

/// Internal type ConsumesAndProducesFlags: defined at src\prelude_lower.isle line 494.
#[derive(Clone, Debug)]
pub enum ConsumesAndProducesFlags {
    SideEffect {
        inst: MInst,
    },
    ReturnsReg {
        inst: MInst,
        result: Reg,
    },
}

/// Internal type ConsumesFlags: defined at src\prelude_lower.isle line 502.
#[derive(Clone, Debug)]
pub enum ConsumesFlags {
    ConsumesFlagsSideEffect {
        inst: MInst,
    },
    ConsumesFlagsSideEffect2 {
        inst1: MInst,
        inst2: MInst,
    },
    ConsumesFlagsReturnsResultWithProducer {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsReturnsReg {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsTwiceReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        result: ValueRegs,
    },
    ConsumesFlagsFourTimesReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
        inst4: MInst,
        result: ValueRegs,
    },
}

/// Internal type MInst: defined at src\isa\s390x\inst.isle line 1.
#[derive(Clone, Debug)]
pub enum MInst {
    Nop0,
    Nop2,
    AluRRR {
        alu_op: ALUOp,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    AluRRSImm16 {
        alu_op: ALUOp,
        rd: WritableReg,
        rn: Reg,
        imm: i16,
    },
    AluRR {
        alu_op: ALUOp,
        rd: WritableReg,
        ri: Reg,
        rm: Reg,
    },
    AluRX {
        alu_op: ALUOp,
        rd: WritableReg,
        ri: Reg,
        mem: MemArg,
    },
    AluRSImm16 {
        alu_op: ALUOp,
        rd: WritableReg,
        ri: Reg,
        imm: i16,
    },
    AluRSImm32 {
        alu_op: ALUOp,
        rd: WritableReg,
        ri: Reg,
        imm: i32,
    },
    AluRUImm32 {
        alu_op: ALUOp,
        rd: WritableReg,
        ri: Reg,
        imm: u32,
    },
    AluRUImm16Shifted {
        alu_op: ALUOp,
        rd: WritableReg,
        ri: Reg,
        imm: UImm16Shifted,
    },
    AluRUImm32Shifted {
        alu_op: ALUOp,
        rd: WritableReg,
        ri: Reg,
        imm: UImm32Shifted,
    },
    SMulWide {
        rd: WritableRegPair,
        rn: Reg,
        rm: Reg,
    },
    UMulWide {
        rd: WritableRegPair,
        ri: Reg,
        rn: Reg,
    },
    SDivMod32 {
        rd: WritableRegPair,
        ri: Reg,
        rn: Reg,
    },
    SDivMod64 {
        rd: WritableRegPair,
        ri: Reg,
        rn: Reg,
    },
    UDivMod32 {
        rd: WritableRegPair,
        ri: RegPair,
        rn: Reg,
    },
    UDivMod64 {
        rd: WritableRegPair,
        ri: RegPair,
        rn: Reg,
    },
    Flogr {
        rd: WritableRegPair,
        rn: Reg,
    },
    ShiftRR {
        shift_op: ShiftOp,
        rd: WritableReg,
        rn: Reg,
        shift_imm: u8,
        shift_reg: Reg,
    },
    RxSBG {
        op: RxSBGOp,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        start_bit: u8,
        end_bit: u8,
        rotate_amt: i8,
    },
    RxSBGTest {
        op: RxSBGOp,
        rd: Reg,
        rn: Reg,
        start_bit: u8,
        end_bit: u8,
        rotate_amt: i8,
    },
    UnaryRR {
        op: UnaryOp,
        rd: WritableReg,
        rn: Reg,
    },
    CmpRR {
        op: CmpOp,
        rn: Reg,
        rm: Reg,
    },
    CmpRX {
        op: CmpOp,
        rn: Reg,
        mem: MemArg,
    },
    CmpRSImm16 {
        op: CmpOp,
        rn: Reg,
        imm: i16,
    },
    CmpRSImm32 {
        op: CmpOp,
        rn: Reg,
        imm: i32,
    },
    CmpRUImm32 {
        op: CmpOp,
        rn: Reg,
        imm: u32,
    },
    CmpTrapRR {
        op: CmpOp,
        rn: Reg,
        rm: Reg,
        cond: Cond,
        trap_code: TrapCode,
    },
    CmpTrapRSImm16 {
        op: CmpOp,
        rn: Reg,
        imm: i16,
        cond: Cond,
        trap_code: TrapCode,
    },
    CmpTrapRUImm16 {
        op: CmpOp,
        rn: Reg,
        imm: u16,
        cond: Cond,
        trap_code: TrapCode,
    },
    AtomicRmw {
        alu_op: ALUOp,
        rd: WritableReg,
        rn: Reg,
        mem: MemArg,
    },
    AtomicCas32 {
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        mem: MemArg,
    },
    AtomicCas64 {
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        mem: MemArg,
    },
    Fence,
    Load32 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load32ZExt8 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load32SExt8 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load32ZExt16 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load32SExt16 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load64 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load64ZExt8 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load64SExt8 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load64ZExt16 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load64SExt16 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load64ZExt32 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load64SExt32 {
        rd: WritableReg,
        mem: MemArg,
    },
    LoadRev16 {
        rd: WritableReg,
        mem: MemArg,
    },
    LoadRev32 {
        rd: WritableReg,
        mem: MemArg,
    },
    LoadRev64 {
        rd: WritableReg,
        mem: MemArg,
    },
    Store8 {
        rd: Reg,
        mem: MemArg,
    },
    Store16 {
        rd: Reg,
        mem: MemArg,
    },
    Store32 {
        rd: Reg,
        mem: MemArg,
    },
    Store64 {
        rd: Reg,
        mem: MemArg,
    },
    StoreImm8 {
        imm: u8,
        mem: MemArg,
    },
    StoreImm16 {
        imm: i16,
        mem: MemArg,
    },
    StoreImm32SExt16 {
        imm: i16,
        mem: MemArg,
    },
    StoreImm64SExt16 {
        imm: i16,
        mem: MemArg,
    },
    StoreRev16 {
        rd: Reg,
        mem: MemArg,
    },
    StoreRev32 {
        rd: Reg,
        mem: MemArg,
    },
    StoreRev64 {
        rd: Reg,
        mem: MemArg,
    },
    LoadMultiple64 {
        rt: WritableReg,
        rt2: WritableReg,
        mem: MemArg,
    },
    StoreMultiple64 {
        rt: Reg,
        rt2: Reg,
        mem: MemArg,
    },
    Mov32 {
        rd: WritableReg,
        rm: Reg,
    },
    Mov64 {
        rd: WritableReg,
        rm: Reg,
    },
    MovPReg {
        rd: WritableReg,
        rm: PReg,
    },
    Mov32Imm {
        rd: WritableReg,
        imm: u32,
    },
    Mov32SImm16 {
        rd: WritableReg,
        imm: i16,
    },
    Mov64SImm16 {
        rd: WritableReg,
        imm: i16,
    },
    Mov64SImm32 {
        rd: WritableReg,
        imm: i32,
    },
    Mov64UImm16Shifted {
        rd: WritableReg,
        imm: UImm16Shifted,
    },
    Mov64UImm32Shifted {
        rd: WritableReg,
        imm: UImm32Shifted,
    },
    Insert64UImm16Shifted {
        rd: WritableReg,
        ri: Reg,
        imm: UImm16Shifted,
    },
    Insert64UImm32Shifted {
        rd: WritableReg,
        ri: Reg,
        imm: UImm32Shifted,
    },
    LoadAR {
        rd: WritableReg,
        ar: u8,
    },
    InsertAR {
        rd: WritableReg,
        ri: Reg,
        ar: u8,
    },
    Extend {
        rd: WritableReg,
        rn: Reg,
        signed: bool,
        from_bits: u8,
        to_bits: u8,
    },
    CMov32 {
        rd: WritableReg,
        cond: Cond,
        ri: Reg,
        rm: Reg,
    },
    CMov64 {
        rd: WritableReg,
        cond: Cond,
        ri: Reg,
        rm: Reg,
    },
    CMov32SImm16 {
        rd: WritableReg,
        cond: Cond,
        ri: Reg,
        imm: i16,
    },
    CMov64SImm16 {
        rd: WritableReg,
        cond: Cond,
        ri: Reg,
        imm: i16,
    },
    FpuMove32 {
        rd: WritableReg,
        rn: Reg,
    },
    FpuMove64 {
        rd: WritableReg,
        rn: Reg,
    },
    FpuCMov32 {
        rd: WritableReg,
        cond: Cond,
        ri: Reg,
        rm: Reg,
    },
    FpuCMov64 {
        rd: WritableReg,
        cond: Cond,
        ri: Reg,
        rm: Reg,
    },
    FpuRR {
        fpu_op: FPUOp1,
        rd: WritableReg,
        rn: Reg,
    },
    FpuRRR {
        fpu_op: FPUOp2,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    FpuRRRR {
        fpu_op: FPUOp3,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        ra: Reg,
    },
    FpuRound {
        op: FpuRoundOp,
        mode: FpuRoundMode,
        rd: WritableReg,
        rn: Reg,
    },
    FpuCmp32 {
        rn: Reg,
        rm: Reg,
    },
    FpuCmp64 {
        rn: Reg,
        rm: Reg,
    },
    LoadFpuConst16 {
        rd: WritableReg,
        const_data: u16,
    },
    LoadFpuConst32 {
        rd: WritableReg,
        const_data: u32,
    },
    LoadFpuConst64 {
        rd: WritableReg,
        const_data: u64,
    },
    VecRRR {
        op: VecBinaryOp,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecRR {
        op: VecUnaryOp,
        rd: WritableReg,
        rn: Reg,
    },
    VecShiftRR {
        shift_op: VecShiftOp,
        rd: WritableReg,
        rn: Reg,
        shift_imm: u8,
        shift_reg: Reg,
    },
    VecSelect {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        ra: Reg,
    },
    VecPermute {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        ra: Reg,
    },
    VecPermuteDWImm {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        idx1: u8,
        idx2: u8,
    },
    VecIntCmp {
        op: VecIntCmpOp,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecIntCmpS {
        op: VecIntCmpOp,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecFloatCmp {
        op: VecFloatCmpOp,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecFloatCmpS {
        op: VecFloatCmpOp,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecInt128SCmpHi {
        tmp: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecInt128UCmpHi {
        tmp: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecLoad {
        rd: WritableReg,
        mem: MemArg,
    },
    VecLoadRev {
        rd: WritableReg,
        mem: MemArg,
    },
    VecLoadByte16Rev {
        rd: WritableReg,
        mem: MemArg,
    },
    VecLoadByte32Rev {
        rd: WritableReg,
        mem: MemArg,
    },
    VecLoadByte64Rev {
        rd: WritableReg,
        mem: MemArg,
    },
    VecLoadElt16Rev {
        rd: WritableReg,
        mem: MemArg,
    },
    VecLoadElt32Rev {
        rd: WritableReg,
        mem: MemArg,
    },
    VecLoadElt64Rev {
        rd: WritableReg,
        mem: MemArg,
    },
    VecStore {
        rd: Reg,
        mem: MemArg,
    },
    VecStoreRev {
        rd: Reg,
        mem: MemArg,
    },
    VecStoreByte16Rev {
        rd: Reg,
        mem: MemArg,
    },
    VecStoreByte32Rev {
        rd: Reg,
        mem: MemArg,
    },
    VecStoreByte64Rev {
        rd: Reg,
        mem: MemArg,
    },
    VecStoreElt16Rev {
        rd: Reg,
        mem: MemArg,
    },
    VecStoreElt32Rev {
        rd: Reg,
        mem: MemArg,
    },
    VecStoreElt64Rev {
        rd: Reg,
        mem: MemArg,
    },
    VecLoadReplicate {
        size: u32,
        rd: WritableReg,
        mem: MemArg,
    },
    VecLoadReplicateRev {
        size: u32,
        rd: WritableReg,
        mem: MemArg,
    },
    VecMov {
        rd: WritableReg,
        rn: Reg,
    },
    VecCMov {
        rd: WritableReg,
        cond: Cond,
        ri: Reg,
        rm: Reg,
    },
    MovToVec128 {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecLoadConst {
        rd: WritableReg,
        const_data: u128,
    },
    VecLoadConstReplicate {
        size: u32,
        rd: WritableReg,
        const_data: u64,
    },
    VecImmByteMask {
        rd: WritableReg,
        mask: u16,
    },
    VecImmBitMask {
        size: u32,
        rd: WritableReg,
        start_bit: u8,
        end_bit: u8,
    },
    VecImmReplicate {
        size: u32,
        rd: WritableReg,
        imm: i16,
    },
    VecLoadLane {
        size: u32,
        rd: WritableReg,
        ri: Reg,
        mem: MemArg,
        lane_imm: u8,
    },
    VecLoadLaneUndef {
        size: u32,
        rd: WritableReg,
        mem: MemArg,
        lane_imm: u8,
    },
    VecLoadLaneRev {
        size: u32,
        rd: WritableReg,
        ri: Reg,
        mem: MemArg,
        lane_imm: u8,
    },
    VecLoadLaneRevUndef {
        size: u32,
        rd: WritableReg,
        mem: MemArg,
        lane_imm: u8,
    },
    VecStoreLane {
        size: u32,
        rd: Reg,
        mem: MemArg,
        lane_imm: u8,
    },
    VecStoreLaneRev {
        size: u32,
        rd: Reg,
        mem: MemArg,
        lane_imm: u8,
    },
    VecInsertLane {
        size: u32,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        lane_imm: u8,
        lane_reg: Reg,
    },
    VecInsertLaneUndef {
        size: u32,
        rd: WritableReg,
        rn: Reg,
        lane_imm: u8,
        lane_reg: Reg,
    },
    VecExtractLane {
        size: u32,
        rd: WritableReg,
        rn: Reg,
        lane_imm: u8,
        lane_reg: Reg,
    },
    VecInsertLaneImm {
        size: u32,
        rd: WritableReg,
        ri: Reg,
        imm: i16,
        lane_imm: u8,
    },
    VecReplicateLane {
        size: u32,
        rd: WritableReg,
        rn: Reg,
        lane_imm: u8,
    },
    AllocateArgs {
        size: u32,
    },
    Call {
        link: WritableReg,
        info: BoxCallInfo,
    },
    ReturnCall {
        info: BoxReturnCallInfo,
    },
    Args {
        args: VecArgPair,
    },
    Rets {
        rets: VecRetPair,
    },
    Ret {
        link: Reg,
    },
    Jump {
        dest: MachLabel,
    },
    CondBr {
        taken: MachLabel,
        not_taken: MachLabel,
        cond: Cond,
    },
    TrapIf {
        cond: Cond,
        trap_code: TrapCode,
    },
    IndirectBr {
        rn: Reg,
        targets: VecMachLabel,
    },
    Debugtrap,
    Trap {
        trap_code: TrapCode,
    },
    JTSequence {
        ridx: Reg,
        default: MachLabel,
        default_cond: Cond,
        targets: BoxVecMachLabel,
    },
    StackProbeLoop {
        probe_count: WritableReg,
        guard_size: i16,
    },
    LoadSymbolReloc {
        rd: WritableReg,
        symbol_reloc: BoxSymbolReloc,
    },
    LoadAddr {
        rd: WritableReg,
        mem: MemArg,
    },
    Loop {
        body: VecMInst,
        cond: Cond,
    },
    CondBreak {
        cond: Cond,
    },
    DummyUse {
        reg: Reg,
    },
    Unwind {
        inst: UnwindInst,
    },
    ElfTlsGetOffset {
        tls_offset: WritableReg,
        got: Reg,
        got_offset: Reg,
        symbol: BoxSymbolReloc,
    },
}

/// Internal type CallInstDest: defined at src\isa\s390x\inst.isle line 1026.
#[derive(Clone, Debug)]
pub enum CallInstDest {
    Direct {
        name: ExternalName,
    },
    Indirect {
        reg: Reg,
    },
}

/// Internal type SymbolReloc: defined at src\isa\s390x\inst.isle line 1036.
#[derive(Clone, Debug)]
pub enum SymbolReloc {
    Absolute {
        name: ExternalName,
        offset: i64,
    },
    TlsGd {
        name: ExternalName,
    },
}

/// Internal type ALUOp: defined at src\isa\s390x\inst.isle line 1053.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ALUOp {
    Add32,
    Add32Ext16,
    Add64,
    Add64Ext16,
    Add64Ext32,
    AddLogical32,
    AddLogical64,
    AddLogical64Ext32,
    Sub32,
    Sub32Ext16,
    Sub64,
    Sub64Ext16,
    Sub64Ext32,
    SubLogical32,
    SubLogical64,
    SubLogical64Ext32,
    Mul32,
    Mul32Ext16,
    Mul64,
    Mul64Ext16,
    Mul64Ext32,
    And32,
    And64,
    Orr32,
    Orr64,
    Xor32,
    Xor64,
    NotAnd32,
    NotAnd64,
    NotOrr32,
    NotOrr64,
    NotXor32,
    NotXor64,
    AndNot32,
    AndNot64,
    OrrNot32,
    OrrNot64,
}

/// Internal type UnaryOp: defined at src\isa\s390x\inst.isle line 1100.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum UnaryOp {
    Abs32,
    Abs64,
    Abs64Ext32,
    Neg32,
    Neg64,
    Neg64Ext32,
    PopcntByte,
    PopcntReg,
    BSwap32,
    BSwap64,
}

/// Internal type ShiftOp: defined at src\isa\s390x\inst.isle line 1115.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ShiftOp {
    RotL32,
    RotL64,
    LShL32,
    LShL64,
    LShR32,
    LShR64,
    AShR32,
    AShR64,
}

/// Internal type RxSBGOp: defined at src\isa\s390x\inst.isle line 1128.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum RxSBGOp {
    Insert,
    And,
    Or,
    Xor,
}

/// Internal type CmpOp: defined at src\isa\s390x\inst.isle line 1137.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CmpOp {
    CmpS32,
    CmpS32Ext16,
    CmpS64,
    CmpS64Ext16,
    CmpS64Ext32,
    CmpL32,
    CmpL32Ext16,
    CmpL64,
    CmpL64Ext16,
    CmpL64Ext32,
}

/// Internal type VecBinaryOp: defined at src\isa\s390x\inst.isle line 1152.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecBinaryOp {
    Add8x16,
    Add16x8,
    Add32x4,
    Add64x2,
    Add128,
    Sub8x16,
    Sub16x8,
    Sub32x4,
    Sub64x2,
    Sub128,
    Mul8x16,
    Mul16x8,
    Mul32x4,
    UMulHi8x16,
    UMulHi16x8,
    UMulHi32x4,
    SMulHi8x16,
    SMulHi16x8,
    SMulHi32x4,
    UMulEven8x16,
    UMulEven16x8,
    UMulEven32x4,
    SMulEven8x16,
    SMulEven16x8,
    SMulEven32x4,
    UMulOdd8x16,
    UMulOdd16x8,
    UMulOdd32x4,
    SMulOdd8x16,
    SMulOdd16x8,
    SMulOdd32x4,
    UMax8x16,
    UMax16x8,
    UMax32x4,
    UMax64x2,
    SMax8x16,
    SMax16x8,
    SMax32x4,
    SMax64x2,
    UMin8x16,
    UMin16x8,
    UMin32x4,
    UMin64x2,
    SMin8x16,
    SMin16x8,
    SMin32x4,
    SMin64x2,
    UAvg8x16,
    UAvg16x8,
    UAvg32x4,
    UAvg64x2,
    SAvg8x16,
    SAvg16x8,
    SAvg32x4,
    SAvg64x2,
    And128,
    Orr128,
    Xor128,
    NotAnd128,
    NotOrr128,
    NotXor128,
    AndNot128,
    OrrNot128,
    BitPermute128,
    LShLByByte128,
    LShRByByte128,
    AShRByByte128,
    LShLByBit128,
    LShRByBit128,
    AShRByBit128,
    Pack16x8,
    Pack32x4,
    Pack64x2,
    PackUSat16x8,
    PackUSat32x4,
    PackUSat64x2,
    PackSSat16x8,
    PackSSat32x4,
    PackSSat64x2,
    MergeLow8x16,
    MergeLow16x8,
    MergeLow32x4,
    MergeLow64x2,
    MergeHigh8x16,
    MergeHigh16x8,
    MergeHigh32x4,
    MergeHigh64x2,
}

/// Internal type VecUnaryOp: defined at src\isa\s390x\inst.isle line 1254.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecUnaryOp {
    Abs8x16,
    Abs16x8,
    Abs32x4,
    Abs64x2,
    Neg8x16,
    Neg16x8,
    Neg32x4,
    Neg64x2,
    Popcnt8x16,
    Popcnt16x8,
    Popcnt32x4,
    Popcnt64x2,
    Clz8x16,
    Clz16x8,
    Clz32x4,
    Clz64x2,
    Ctz8x16,
    Ctz16x8,
    Ctz32x4,
    Ctz64x2,
    UnpackULow8x16,
    UnpackULow16x8,
    UnpackULow32x4,
    UnpackUHigh8x16,
    UnpackUHigh16x8,
    UnpackUHigh32x4,
    UnpackSLow8x16,
    UnpackSLow16x8,
    UnpackSLow32x4,
    UnpackSHigh8x16,
    UnpackSHigh16x8,
    UnpackSHigh32x4,
}

/// Internal type VecShiftOp: defined at src\isa\s390x\inst.isle line 1295.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecShiftOp {
    RotL8x16,
    RotL16x8,
    RotL32x4,
    RotL64x2,
    LShL8x16,
    LShL16x8,
    LShL32x4,
    LShL64x2,
    LShR8x16,
    LShR16x8,
    LShR32x4,
    LShR64x2,
    AShR8x16,
    AShR16x8,
    AShR32x4,
    AShR64x2,
}

/// Internal type VecIntCmpOp: defined at src\isa\s390x\inst.isle line 1316.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecIntCmpOp {
    CmpEq8x16,
    CmpEq16x8,
    CmpEq32x4,
    CmpEq64x2,
    SCmpHi8x16,
    SCmpHi16x8,
    SCmpHi32x4,
    SCmpHi64x2,
    UCmpHi8x16,
    UCmpHi16x8,
    UCmpHi32x4,
    UCmpHi64x2,
}

/// Internal type VecFloatCmpOp: defined at src\isa\s390x\inst.isle line 1333.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecFloatCmpOp {
    CmpEq32x4,
    CmpEq64x2,
    CmpHi32x4,
    CmpHi64x2,
    CmpHiEq32x4,
    CmpHiEq64x2,
}

/// Internal type FPUOp1: defined at src\isa\s390x\inst.isle line 1344.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FPUOp1 {
    Abs32,
    Abs64,
    Abs32x4,
    Abs64x2,
    Neg32,
    Neg64,
    Neg32x4,
    Neg64x2,
    NegAbs32,
    NegAbs64,
    NegAbs32x4,
    NegAbs64x2,
    Sqrt32,
    Sqrt64,
    Sqrt32x4,
    Sqrt64x2,
    Cvt32To64,
    Cvt32x4To64x2,
}

/// Internal type FPUOp2: defined at src\isa\s390x\inst.isle line 1367.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FPUOp2 {
    Add32,
    Add64,
    Add32x4,
    Add64x2,
    Sub32,
    Sub64,
    Sub32x4,
    Sub64x2,
    Mul32,
    Mul64,
    Mul32x4,
    Mul64x2,
    Div32,
    Div64,
    Div32x4,
    Div64x2,
    Max32,
    Max64,
    Max32x4,
    Max64x2,
    Min32,
    Min64,
    Min32x4,
    Min64x2,
    MaxPseudo32,
    MaxPseudo64,
    MaxPseudo32x4,
    MaxPseudo64x2,
    MinPseudo32,
    MinPseudo64,
    MinPseudo32x4,
    MinPseudo64x2,
}

/// Internal type FPUOp3: defined at src\isa\s390x\inst.isle line 1404.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FPUOp3 {
    MAdd32,
    MAdd64,
    MAdd32x4,
    MAdd64x2,
    MSub32,
    MSub64,
    MSub32x4,
    MSub64x2,
}

/// Internal type FpuRoundOp: defined at src\isa\s390x\inst.isle line 1417.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuRoundOp {
    Cvt64To32,
    Cvt64x2To32x4,
    Round32,
    Round64,
    Round32x4,
    Round64x2,
    ToSInt32,
    ToSInt64,
    ToUInt32,
    ToUInt64,
    ToSInt32x4,
    ToSInt64x2,
    ToUInt32x4,
    ToUInt64x2,
    FromSInt32,
    FromSInt64,
    FromUInt32,
    FromUInt64,
    FromSInt32x4,
    FromSInt64x2,
    FromUInt32x4,
    FromUInt64x2,
}

/// Internal type FpuRoundMode: defined at src\isa\s390x\inst.isle line 1444.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuRoundMode {
    Current,
    ToNearest,
    ShorterPrecision,
    ToNearestTiesToEven,
    ToZero,
    ToPosInfinity,
    ToNegInfinity,
}

/// Internal type LaneOrder: defined at src\isa\s390x\inst.isle line 1485.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum LaneOrder {
    LittleEndian,
    BigEndian,
}

/// Internal type ProducesBool: defined at src\isa\s390x\inst.isle line 3306.
#[derive(Clone, Debug)]
pub enum ProducesBool {
    ProducesBool {
        producer: ProducesFlags,
        cond: Cond,
    },
}

// Generated as internal constructor for term ty_shift_mask.
pub fn constructor_ty_shift_mask<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> u64 {
    let v1 = C::lane_type(ctx, arg0);
    let v2 = C::ty_bits(ctx, v1);
    let v3 = C::u8_as_u64(ctx, v2);
    let v5 = C::u64_sub(ctx, v3, 0x1_u64);
    // Rule at src\prelude.isle line 495.
    return v5;
}

// Generated as internal constructor for term output_reg.
pub fn constructor_output_reg<C: Context>(
    ctx: &mut C,
    arg0: Reg,
) -> InstOutput {
    let v1 = C::value_reg(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src\prelude_lower.isle line 82.
    return v2;
}

// Generated as internal constructor for term output_value.
pub fn constructor_output_value<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> InstOutput {
    let v1 = C::put_in_regs(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src\prelude_lower.isle line 86.
    return v2;
}

// Generated as internal constructor for term temp_reg.
pub fn constructor_temp_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> Reg {
    let v1 = C::temp_writable_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src\prelude_lower.isle line 106.
    return v2;
}

// Generated as internal constructor for term value_regs_range.
pub fn constructor_value_regs_range<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
) -> Range {
    let v2 = C::value_regs_len(ctx, arg0);
    let v3 = C::range(ctx, 0x0_usize, v2);
    // Rule at src\prelude_lower.isle line 160.
    return v3;
}

// Generated as internal constructor for term lo_reg.
pub fn constructor_lo_reg<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> Reg {
    let v1 = C::put_in_regs(ctx, arg0);
    let v3 = C::value_regs_get(ctx, v1, 0x0_usize);
    // Rule at src\prelude_lower.isle line 171.
    return v3;
}

// Generated as internal constructor for term multi_reg_to_pair_and_single.
pub fn constructor_multi_reg_to_pair_and_single<C: Context>(
    ctx: &mut C,
    arg0: &MultiReg,
) -> InstOutput {
    if let &MultiReg::Three {
        a: v1,
        b: v2,
        c: v3,
    } = arg0 {
        let v4 = C::value_regs(ctx, v1, v2);
        let v5 = C::value_reg(ctx, v3);
        let v6 = C::output_pair(ctx, v4, v5);
        // Rule at src\prelude_lower.isle line 182.
        return v6;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "multi_reg_to_pair_and_single", "src\\prelude_lower.isle line 181")
}

// Generated as internal constructor for term multi_reg_to_pair.
pub fn constructor_multi_reg_to_pair<C: Context>(
    ctx: &mut C,
    arg0: &MultiReg,
) -> InstOutput {
    if let &MultiReg::Two {
        a: v1,
        b: v2,
    } = arg0 {
        let v3 = C::value_regs(ctx, v1, v2);
        let v4 = C::output(ctx, v3);
        // Rule at src\prelude_lower.isle line 187.
        return v4;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "multi_reg_to_pair", "src\\prelude_lower.isle line 186")
}

// Generated as internal constructor for term multi_reg_to_single.
pub fn constructor_multi_reg_to_single<C: Context>(
    ctx: &mut C,
    arg0: &MultiReg,
) -> InstOutput {
    if let &MultiReg::One {
        a: v1,
    } = arg0 {
        let v2 = C::value_reg(ctx, v1);
        let v3 = C::output(ctx, v2);
        // Rule at src\prelude_lower.isle line 192.
        return v3;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "multi_reg_to_single", "src\\prelude_lower.isle line 191")
}

// Generated as internal constructor for term emit_side_effect.
pub fn constructor_emit_side_effect<C: Context>(
    ctx: &mut C,
    arg0: &SideEffectNoResult,
) -> Unit {
    match arg0 {
        &SideEffectNoResult::Inst {
            inst: ref v1,
        } => {
            let v2 = C::emit(ctx, v1);
            // Rule at src\prelude_lower.isle line 434.
            return v2;
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v3,
            inst2: ref v4,
        } => {
            let v5 = C::emit(ctx, v3);
            let v6 = C::emit(ctx, v4);
            // Rule at src\prelude_lower.isle line 436.
            return v6;
        }
        &SideEffectNoResult::Inst3 {
            inst1: ref v7,
            inst2: ref v8,
            inst3: ref v9,
        } => {
            let v10 = C::emit(ctx, v7);
            let v11 = C::emit(ctx, v8);
            let v12 = C::emit(ctx, v9);
            // Rule at src\prelude_lower.isle line 439.
            return v12;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "emit_side_effect", "src\\prelude_lower.isle line 433")
}

// Generated as internal constructor for term side_effect.
pub fn constructor_side_effect<C: Context>(
    ctx: &mut C,
    arg0: &SideEffectNoResult,
) -> InstOutput {
    let v1 = constructor_emit_side_effect(ctx, arg0);
    let v2 = C::output_none(ctx);
    // Rule at src\prelude_lower.isle line 449.
    return v2;
}

// Generated as internal constructor for term side_effect_concat.
pub fn constructor_side_effect_concat<C: Context>(
    ctx: &mut C,
    arg0: &SideEffectNoResult,
    arg1: &SideEffectNoResult,
) -> SideEffectNoResult {
    match arg0 {
        &SideEffectNoResult::Inst {
            inst: ref v1,
        } => {
            match arg1 {
                &SideEffectNoResult::Inst {
                    inst: ref v3,
                } => {
                    let v4 = SideEffectNoResult::Inst2 {
                        inst1: v1.clone(),
                        inst2: v3.clone(),
                    };
                    // Rule at src\prelude_lower.isle line 454.
                    return v4;
                }
                &SideEffectNoResult::Inst2 {
                    inst1: ref v5,
                    inst2: ref v6,
                } => {
                    let v7 = SideEffectNoResult::Inst3 {
                        inst1: v1.clone(),
                        inst2: v5.clone(),
                        inst3: v6.clone(),
                    };
                    // Rule at src\prelude_lower.isle line 456.
                    return v7;
                }
                _ => {}
            }
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v8,
            inst2: ref v9,
        } => {
            if let &SideEffectNoResult::Inst {
                inst: ref v3,
            } = arg1 {
                let v10 = SideEffectNoResult::Inst3 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                    inst3: v3.clone(),
                };
                // Rule at src\prelude_lower.isle line 458.
                return v10;
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "side_effect_concat", "src\\prelude_lower.isle line 453")
}

// Generated as internal constructor for term side_effect_as_invalid.
pub fn constructor_side_effect_as_invalid<C: Context>(
    ctx: &mut C,
    arg0: &SideEffectNoResult,
) -> InstOutput {
    let v1 = constructor_side_effect(ctx, arg0);
    let v2 = C::invalid_reg(ctx);
    let v3 = constructor_output_reg(ctx, v2);
    // Rule at src\prelude_lower.isle line 464.
    return v3;
}

// Generated as internal constructor for term produces_flags_concat.
pub fn constructor_produces_flags_concat<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ProducesFlags,
) -> ProducesFlags {
    if let &ProducesFlags::ProducesFlagsSideEffect {
        inst: ref v1,
    } = arg0 {
        if let &ProducesFlags::ProducesFlagsSideEffect {
            inst: ref v3,
        } = arg1 {
            let v4 = ProducesFlags::ProducesFlagsTwiceSideEffect {
                inst1: v1.clone(),
                inst2: v3.clone(),
            };
            // Rule at src\prelude_lower.isle line 490.
            return v4;
        }
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "produces_flags_concat", "src\\prelude_lower.isle line 489")
}

// Generated as internal constructor for term produces_flags_get_reg.
pub fn constructor_produces_flags_get_reg<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
) -> Reg {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            // Rule at src\prelude_lower.isle line 520.
            return v2;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v3,
            result: v4,
        } => {
            // Rule at src\prelude_lower.isle line 521.
            return v4;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "produces_flags_get_reg", "src\\prelude_lower.isle line 519")
}

// Generated as internal constructor for term produces_flags_ignore.
pub fn constructor_produces_flags_ignore<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
) -> ProducesFlags {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            let v3 = ProducesFlags::ProducesFlagsSideEffect {
                inst: v1.clone(),
            };
            // Rule at src\prelude_lower.isle line 526.
            return v3;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v4,
            result: v5,
        } => {
            let v6 = ProducesFlags::ProducesFlagsSideEffect {
                inst: v4.clone(),
            };
            // Rule at src\prelude_lower.isle line 528.
            return v6;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "produces_flags_ignore", "src\\prelude_lower.isle line 525")
}

// Generated as internal constructor for term consumes_flags_concat.
pub fn constructor_consumes_flags_concat<C: Context>(
    ctx: &mut C,
    arg0: &ConsumesFlags,
    arg1: &ConsumesFlags,
) -> ConsumesFlags {
    match arg0 {
        &ConsumesFlags::ConsumesFlagsSideEffect {
            inst: ref v8,
        } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect {
                inst: ref v9,
            } = arg1 {
                let v10 = ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                };
                // Rule at src\prelude_lower.isle line 541.
                return v10;
            }
        }
        &ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            if let &ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: ref v4,
                result: v5,
            } = arg1 {
                let v6 = C::value_regs(ctx, v2, v5);
                let v7 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: v1.clone(),
                    inst2: v4.clone(),
                    result: v6,
                };
                // Rule at src\prelude_lower.isle line 535.
                return v7;
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "consumes_flags_concat", "src\\prelude_lower.isle line 534")
}

// Generated as internal constructor for term with_flags.
pub fn constructor_with_flags<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> ValueRegs {
    match arg0 {
        &ProducesFlags::ProducesFlagsSideEffect {
            inst: ref v12,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v16 = C::emit(ctx, v13);
                    let v17 = C::value_reg(ctx, v14);
                    // Rule at src\prelude_lower.isle line 572.
                    return v17;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v21 = C::emit(ctx, v18);
                    let v22 = C::emit(ctx, v19);
                    // Rule at src\prelude_lower.isle line 578.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v28 = C::emit(ctx, v23);
                    let v29 = C::emit(ctx, v24);
                    let v30 = C::emit(ctx, v25);
                    let v31 = C::emit(ctx, v26);
                    // Rule at src\prelude_lower.isle line 590.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v32,
            inst2: ref v33,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v36 = C::emit(ctx, v13);
                    let v37 = C::value_reg(ctx, v14);
                    // Rule at src\prelude_lower.isle line 606.
                    return v37;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v38 = C::emit(ctx, v18);
                    let v39 = C::emit(ctx, v19);
                    // Rule at src\prelude_lower.isle line 613.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v40 = C::emit(ctx, v23);
                    let v41 = C::emit(ctx, v24);
                    let v42 = C::emit(ctx, v25);
                    let v43 = C::emit(ctx, v26);
                    // Rule at src\prelude_lower.isle line 626.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v1,
            result: v2,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect {
                    inst: ref v9,
                } => {
                    let v6 = C::emit(ctx, v1);
                    let v10 = C::emit(ctx, v9);
                    let v11 = C::value_reg(ctx, v2);
                    // Rule at src\prelude_lower.isle line 566.
                    return v11;
                }
                &ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
                    inst: ref v4,
                    result: v5,
                } => {
                    let v6 = C::emit(ctx, v1);
                    let v7 = C::emit(ctx, v4);
                    let v8 = C::value_regs(ctx, v2, v5);
                    // Rule at src\prelude_lower.isle line 558.
                    return v8;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "with_flags", "src\\prelude_lower.isle line 556")
}

// Generated as internal constructor for term with_flags_reg.
pub fn constructor_with_flags_reg<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> Reg {
    let v2 = constructor_with_flags(ctx, arg0, arg1);
    let v4 = C::value_regs_get(ctx, v2, 0x0_usize);
    // Rule at src\prelude_lower.isle line 644.
    return v4;
}

// Generated as internal constructor for term flags_to_producesflags.
pub fn constructor_flags_to_producesflags<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> ProducesFlags {
    let v1 = C::mark_value_used(ctx, arg0);
    // Rule at src\prelude_lower.isle line 651.
    return ProducesFlags::AlreadyExistingFlags;
}

// Generated as internal constructor for term with_flags_side_effect.
pub fn constructor_with_flags_side_effect<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> SideEffectNoResult {
    match arg0 {
        &ProducesFlags::AlreadyExistingFlags => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect {
                    inst: ref v2,
                } => {
                    let v3 = SideEffectNoResult::Inst {
                        inst: v2.clone(),
                    };
                    // Rule at src\prelude_lower.isle line 662.
                    return v3;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v6 = SideEffectNoResult::Inst2 {
                        inst1: v4.clone(),
                        inst2: v5.clone(),
                    };
                    // Rule at src\prelude_lower.isle line 667.
                    return v6;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsSideEffect {
            inst: ref v7,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect {
                    inst: ref v2,
                } => {
                    let v8 = SideEffectNoResult::Inst2 {
                        inst1: v7.clone(),
                        inst2: v2.clone(),
                    };
                    // Rule at src\prelude_lower.isle line 672.
                    return v8;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v9 = SideEffectNoResult::Inst3 {
                        inst1: v7.clone(),
                        inst2: v4.clone(),
                        inst3: v5.clone(),
                    };
                    // Rule at src\prelude_lower.isle line 677.
                    return v9;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v10,
            inst2: ref v11,
        } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect {
                inst: ref v2,
            } = arg1 {
                let v12 = SideEffectNoResult::Inst3 {
                    inst1: v10.clone(),
                    inst2: v11.clone(),
                    inst3: v2.clone(),
                };
                // Rule at src\prelude_lower.isle line 682.
                return v12;
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "with_flags_side_effect", "src\\prelude_lower.isle line 660")
}

// Generated as internal constructor for term with_flags_chained.
pub fn constructor_with_flags_chained<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesAndProducesFlags,
    arg2: &ConsumesFlags,
) -> MultiReg {
    match arg0 {
        &ProducesFlags::ProducesFlagsSideEffect {
            inst: ref v1,
        } => {
            match arg1 {
                &ConsumesAndProducesFlags::SideEffect {
                    inst: ref v3,
                } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect {
                            inst: ref v5,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v8 = C::emit(ctx, v5);
                            // Rule at src\prelude_lower.isle line 691.
                            return MultiReg::Empty;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            // Rule at src\prelude_lower.isle line 699.
                            return MultiReg::Empty;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v16 = C::emit(ctx, v14);
                            let v17 = MultiReg::One {
                                a: v15,
                            };
                            // Rule at src\prelude_lower.isle line 708.
                            return v17;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0_usize);
                            let v26 = C::value_regs_get(ctx, v20, 0x1_usize);
                            let v27 = MultiReg::Two {
                                a: v24,
                                b: v26,
                            };
                            // Rule at src\prelude_lower.isle line 716.
                            return v27;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0_usize);
                            let v38 = C::value_regs_get(ctx, v32, 0x1_usize);
                            let v39 = MultiReg::Two {
                                a: v37,
                                b: v38,
                            };
                            // Rule at src\prelude_lower.isle line 725.
                            return v39;
                        }
                        _ => {}
                    }
                }
                &ConsumesAndProducesFlags::ReturnsReg {
                    inst: ref v47,
                    result: v48,
                } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect {
                            inst: ref v5,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v8 = C::emit(ctx, v5);
                            let v50 = MultiReg::One {
                                a: v48,
                            };
                            // Rule at src\prelude_lower.isle line 785.
                            return v50;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v50 = MultiReg::One {
                                a: v48,
                            };
                            // Rule at src\prelude_lower.isle line 793.
                            return v50;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v16 = C::emit(ctx, v14);
                            let v51 = MultiReg::Two {
                                a: v48,
                                b: v15,
                            };
                            // Rule at src\prelude_lower.isle line 802.
                            return v51;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0_usize);
                            let v26 = C::value_regs_get(ctx, v20, 0x1_usize);
                            let v52 = MultiReg::Three {
                                a: v48,
                                b: v24,
                                c: v26,
                            };
                            // Rule at src\prelude_lower.isle line 810.
                            return v52;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0_usize);
                            let v38 = C::value_regs_get(ctx, v32, 0x1_usize);
                            let v53 = MultiReg::Three {
                                a: v48,
                                b: v37,
                                c: v38,
                            };
                            // Rule at src\prelude_lower.isle line 819.
                            return v53;
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v40,
            result: v41,
        } => {
            match arg1 {
                &ConsumesAndProducesFlags::SideEffect {
                    inst: ref v3,
                } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect {
                            inst: ref v5,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v8 = C::emit(ctx, v5);
                            let v43 = MultiReg::One {
                                a: v41,
                            };
                            // Rule at src\prelude_lower.isle line 738.
                            return v43;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v43 = MultiReg::One {
                                a: v41,
                            };
                            // Rule at src\prelude_lower.isle line 746.
                            return v43;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v16 = C::emit(ctx, v14);
                            let v44 = MultiReg::Two {
                                a: v41,
                                b: v15,
                            };
                            // Rule at src\prelude_lower.isle line 755.
                            return v44;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0_usize);
                            let v26 = C::value_regs_get(ctx, v20, 0x1_usize);
                            let v45 = MultiReg::Three {
                                a: v41,
                                b: v24,
                                c: v26,
                            };
                            // Rule at src\prelude_lower.isle line 763.
                            return v45;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0_usize);
                            let v38 = C::value_regs_get(ctx, v32, 0x1_usize);
                            let v46 = MultiReg::Three {
                                a: v41,
                                b: v37,
                                c: v38,
                            };
                            // Rule at src\prelude_lower.isle line 772.
                            return v46;
                        }
                        _ => {}
                    }
                }
                &ConsumesAndProducesFlags::ReturnsReg {
                    inst: ref v47,
                    result: v48,
                } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect {
                            inst: ref v5,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v8 = C::emit(ctx, v5);
                            let v54 = MultiReg::Two {
                                a: v41,
                                b: v48,
                            };
                            // Rule at src\prelude_lower.isle line 832.
                            return v54;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v54 = MultiReg::Two {
                                a: v41,
                                b: v48,
                            };
                            // Rule at src\prelude_lower.isle line 840.
                            return v54;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v16 = C::emit(ctx, v14);
                            let v55 = MultiReg::Three {
                                a: v41,
                                b: v48,
                                c: v15,
                            };
                            // Rule at src\prelude_lower.isle line 849.
                            return v55;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0_usize);
                            let v26 = C::value_regs_get(ctx, v20, 0x1_usize);
                            let v56 = MultiReg::Four {
                                a: v41,
                                b: v48,
                                c: v24,
                                d: v26,
                            };
                            // Rule at src\prelude_lower.isle line 857.
                            return v56;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0_usize);
                            let v38 = C::value_regs_get(ctx, v32, 0x1_usize);
                            let v57 = MultiReg::Four {
                                a: v41,
                                b: v48,
                                c: v37,
                                d: v38,
                            };
                            // Rule at src\prelude_lower.isle line 866.
                            return v57;
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v58,
            result: v59,
        } => {
            if let &ConsumesAndProducesFlags::ReturnsReg {
                inst: ref v47,
                result: v48,
            } = arg1 {
                match arg2 {
                    &ConsumesFlags::ConsumesFlagsSideEffect {
                        inst: ref v5,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v8 = C::emit(ctx, v5);
                        let v61 = MultiReg::Two {
                            a: v59,
                            b: v48,
                        };
                        // Rule at src\prelude_lower.isle line 878.
                        return v61;
                    }
                    &ConsumesFlags::ConsumesFlagsSideEffect2 {
                        inst1: ref v10,
                        inst2: ref v11,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v12 = C::emit(ctx, v10);
                        let v13 = C::emit(ctx, v11);
                        let v61 = MultiReg::Two {
                            a: v59,
                            b: v48,
                        };
                        // Rule at src\prelude_lower.isle line 886.
                        return v61;
                    }
                    &ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
                        inst: ref v63,
                        result: v64,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v65 = C::emit(ctx, v63);
                        let v66 = MultiReg::Three {
                            a: v59,
                            b: v48,
                            c: v64,
                        };
                        // Rule at src\prelude_lower.isle line 903.
                        return v66;
                    }
                    &ConsumesFlags::ConsumesFlagsReturnsReg {
                        inst: ref v14,
                        result: v15,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v16 = C::emit(ctx, v14);
                        let v62 = MultiReg::Three {
                            a: v59,
                            b: v48,
                            c: v15,
                        };
                        // Rule at src\prelude_lower.isle line 895.
                        return v62;
                    }
                    &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                        inst1: ref v18,
                        inst2: ref v19,
                        result: v20,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v21 = C::emit(ctx, v18);
                        let v22 = C::emit(ctx, v19);
                        let v24 = C::value_regs_get(ctx, v20, 0x0_usize);
                        let v26 = C::value_regs_get(ctx, v20, 0x1_usize);
                        let v67 = MultiReg::Four {
                            a: v59,
                            b: v48,
                            c: v24,
                            d: v26,
                        };
                        // Rule at src\prelude_lower.isle line 911.
                        return v67;
                    }
                    &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                        inst1: ref v28,
                        inst2: ref v29,
                        inst3: ref v30,
                        inst4: ref v31,
                        result: v32,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v33 = C::emit(ctx, v28);
                        let v34 = C::emit(ctx, v29);
                        let v35 = C::emit(ctx, v30);
                        let v36 = C::emit(ctx, v31);
                        let v37 = C::value_regs_get(ctx, v32, 0x0_usize);
                        let v38 = C::value_regs_get(ctx, v32, 0x1_usize);
                        let v68 = MultiReg::Four {
                            a: v59,
                            b: v48,
                            c: v37,
                            d: v38,
                        };
                        // Rule at src\prelude_lower.isle line 920.
                        return v68;
                    }
                    _ => {}
                }
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "with_flags_chained", "src\\prelude_lower.isle line 688")
}

// Generated as internal constructor for term lower_return.
pub fn constructor_lower_return<C: Context>(
    ctx: &mut C,
    arg0: ValueSlice,
) -> InstOutput {
    let v1 = C::gen_return(ctx, arg0);
    let v2 = C::output_none(ctx);
    // Rule at src\prelude_lower.isle line 1127.
    return v2;
}

// Generated as internal constructor for term lane_order_equal.
pub fn constructor_lane_order_equal<C: Context>(
    ctx: &mut C,
    arg0: &LaneOrder,
    arg1: &LaneOrder,
) -> bool {
    match arg0 {
        &LaneOrder::LittleEndian => {
            match arg1 {
                &LaneOrder::LittleEndian => {
                    let v2 = true;
                    // Rule at src\isa\s390x\inst.isle line 1499.
                    return v2;
                }
                &LaneOrder::BigEndian => {
                    let v3 = false;
                    // Rule at src\isa\s390x\inst.isle line 1500.
                    return v3;
                }
                _ => {}
            }
        }
        &LaneOrder::BigEndian => {
            match arg1 {
                &LaneOrder::LittleEndian => {
                    let v3 = false;
                    // Rule at src\isa\s390x\inst.isle line 1501.
                    return v3;
                }
                &LaneOrder::BigEndian => {
                    let v2 = true;
                    // Rule at src\isa\s390x\inst.isle line 1502.
                    return v2;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "lane_order_equal", "src\\isa\\s390x\\inst.isle line 1498")
}

// Generated as internal constructor for term lane_order_from_memflags.
pub fn constructor_lane_order_from_memflags<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
) -> LaneOrder {
    let v4 = C::bigendian(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src\isa\s390x\inst.isle line 1507.
        return LaneOrder::BigEndian;
    }
    let v1 = C::littleendian(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src\isa\s390x\inst.isle line 1506.
        return LaneOrder::LittleEndian;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "lane_order_from_memflags", "src\\isa\\s390x\\inst.isle line 1505")
}

// Generated as internal constructor for term i64_not_neg1.
pub fn constructor_i64_not_neg1<C: Context>(
    ctx: &mut C,
    arg0: i64,
) -> Option<i64> {
    let v2 = C::i64_nonequal(ctx, arg0, -1_i64);
    if let Some(v3) = v2 {
        let v4 = Some(arg0);
        // Rule at src\isa\s390x\inst.isle line 1559.
        return v4;
    }
    None
}

// Generated as internal constructor for term imm8x16.
pub fn constructor_imm8x16<C: Context>(
    ctx: &mut C,
    arg0: u8,
    arg1: u8,
    arg2: u8,
    arg3: u8,
    arg4: u8,
    arg5: u8,
    arg6: u8,
    arg7: u8,
    arg8: u8,
    arg9: u8,
    arg10: u8,
    arg11: u8,
    arg12: u8,
    arg13: u8,
    arg14: u8,
    arg15: u8,
) -> u128 {
    let v16 = C::u8_pair_concat(ctx, arg0, arg1);
    let v17 = C::u8_pair_concat(ctx, arg2, arg3);
    let v18 = C::u16_pair_concat(ctx, v16, v17);
    let v19 = C::u8_pair_concat(ctx, arg4, arg5);
    let v20 = C::u8_pair_concat(ctx, arg6, arg7);
    let v21 = C::u16_pair_concat(ctx, v19, v20);
    let v22 = C::u32_pair_concat(ctx, v18, v21);
    let v23 = C::u8_pair_concat(ctx, arg8, arg9);
    let v24 = C::u8_pair_concat(ctx, arg10, arg11);
    let v25 = C::u16_pair_concat(ctx, v23, v24);
    let v26 = C::u8_pair_concat(ctx, arg12, arg13);
    let v27 = C::u8_pair_concat(ctx, arg14, arg15);
    let v28 = C::u16_pair_concat(ctx, v26, v27);
    let v29 = C::u32_pair_concat(ctx, v25, v28);
    let v30 = C::u64_pair_concat(ctx, v22, v29);
    // Rule at src\isa\s390x\inst.isle line 1598.
    return v30;
}

// Generated as internal constructor for term mask_amt_reg.
pub fn constructor_mask_amt_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v10 = C::gpr64_ty(ctx, arg0);
    if let Some(v11) = v10 {
        // Rule at src\isa\s390x\inst.isle line 1710.
        return arg1;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = C::mask_amt_imm(ctx, v2, -1_i64);
        let v6 = C::u8_as_u16(ctx, v5);
        let v8 = C::uimm16shifted(ctx, v6, 0x0_u8);
        let v9 = constructor_and_uimm16shifted(ctx, v2, arg1, v8);
        // Rule at src\isa\s390x\inst.isle line 1707.
        return v9;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "mask_amt_reg", "src\\isa\\s390x\\inst.isle line 1706")
}

// Generated as internal constructor for term amt_reg.
pub fn constructor_amt_reg<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> Reg {
    let v1 = C::value_type(ctx, arg0);
    let v2 = C::fits_in_64(ctx, v1);
    if let Some(v3) = v2 {
        let v4 = C::put_in_reg(ctx, arg0);
        // Rule at src\isa\s390x\inst.isle line 1714.
        return v4;
    }
    let v5 = C::vr128_ty(ctx, v1);
    if let Some(v6) = v5 {
        let v4 = C::put_in_reg(ctx, arg0);
        let v9 = C::zero_reg(ctx);
        let v10 = constructor_vec_extract_lane(ctx, I64X2, v4, 0x1_u8, v9);
        // Rule at src\isa\s390x\inst.isle line 1715.
        return v10;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "amt_reg", "src\\isa\\s390x\\inst.isle line 1713")
}

// Generated as internal constructor for term amt_vr.
pub fn constructor_amt_vr<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> Reg {
    let v14 = C::u64_from_value(ctx, arg0);
    if let Some(v15) = v14 {
        let v16 = constructor_vec_imm_splat(ctx, I8X16, v15);
        // Rule at src\isa\s390x\inst.isle line 1725.
        return v16;
    }
    let v1 = C::value_type(ctx, arg0);
    let v10 = C::vr128_ty(ctx, v1);
    if let Some(v11) = v10 {
        let v5 = C::put_in_reg(ctx, arg0);
        let v13 = constructor_vec_replicate_lane(ctx, I8X16, v5, 0xf_u8);
        // Rule at src\isa\s390x\inst.isle line 1723.
        return v13;
    }
    let v2 = C::fits_in_64(ctx, v1);
    if let Some(v3) = v2 {
        let v5 = C::put_in_reg(ctx, arg0);
        let v7 = C::zero_reg(ctx);
        let v8 = constructor_vec_insert_lane_undef(ctx, I8X16, v5, 0x0_u8, v7);
        let v9 = constructor_vec_replicate_lane(ctx, I8X16, v8, 0x0_u8);
        // Rule at src\isa\s390x\inst.isle line 1720.
        return v9;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "amt_vr", "src\\isa\\s390x\\inst.isle line 1719")
}

// Generated as internal constructor for term memarg_symbol_offset.
pub fn constructor_memarg_symbol_offset<C: Context>(
    ctx: &mut C,
    arg0: i64,
) -> Option<i32> {
    let v2 = C::memarg_symbol_offset_sum(ctx, arg0, 0_i64);
    let v3 = v2?;
    let v4 = Some(v3);
    // Rule at src\isa\s390x\inst.isle line 1803.
    return v4;
}

// Generated as internal constructor for term lower_address.
pub fn constructor_lower_address<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Offset32,
) -> MemArg {
    let v10 = C::def_inst(ctx, arg1);
    if let Some(v11) = v10 {
        let v17 = &C::inst_data_value(ctx, v11);
        match v17 {
            &InstructionData::Binary {
                opcode: ref v18,
                args: ref v19,
            } => {
                if let &Opcode::Iadd = v18 {
                    let v6 = C::i64_from_offset(ctx, arg2);
                    if v6 == 0_i64 {
                        let v12 = C::first_result(ctx, v11);
                        if let Some(v13) = v12 {
                            let v14 = C::value_type(ctx, v13);
                            let v15 = C::ty_addr64(ctx, v14);
                            if let Some(v16) = v15 {
                                let v20 = C::unpack_value_array_2(ctx, v19);
                                let v23 = C::put_in_reg(ctx, v20.0);
                                let v24 = C::put_in_reg(ctx, v20.1);
                                let v25 = &C::memarg_reg_plus_reg(ctx, v23, v24, 0x0_u8, arg0);
                                // Rule at src\isa\s390x\inst.isle line 1821.
                                return v25.clone();
                            }
                        }
                    }
                }
            }
            &InstructionData::UnaryGlobalValue {
                opcode: ref v26,
                global_value: v27,
            } => {
                if let &Opcode::SymbolValue = v26 {
                    let v28 = C::symbol_value_data(ctx, v27);
                    if let Some(v29) = v28 {
                        let v33 = C::reloc_distance_near(ctx, v29.1);
                        if let Some(v34) = v33 {
                            let v6 = C::i64_from_offset(ctx, arg2);
                            let v35 = C::memarg_symbol_offset_sum(ctx, v6, v29.2);
                            if let Some(v36) = v35 {
                                let v37 = &C::memarg_symbol(ctx, v29.0, v36, arg0);
                                // Rule at src\isa\s390x\inst.isle line 1824.
                                return v37.clone();
                            }
                        }
                    }
                }
            }
            _ => {}
        }
    }
    let v2 = C::value_type(ctx, arg1);
    let v3 = C::ty_addr64(ctx, v2);
    if let Some(v4) = v3 {
        let v7 = C::put_in_reg(ctx, arg1);
        let v6 = C::i64_from_offset(ctx, arg2);
        let v9 = &C::memarg_reg_plus_off(ctx, v7, v6, 0x0_u8, arg0);
        // Rule at src\isa\s390x\inst.isle line 1818.
        return v9.clone();
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "lower_address", "src\\isa\\s390x\\inst.isle line 1816")
}

// Generated as internal constructor for term lower_address_bias.
pub fn constructor_lower_address_bias<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Offset32,
    arg3: u8,
) -> MemArg {
    let v4 = C::i64_from_offset(ctx, arg2);
    if v4 == 0_i64 {
        let v8 = C::def_inst(ctx, arg1);
        if let Some(v9) = v8 {
            let v10 = C::first_result(ctx, v9);
            if let Some(v11) = v10 {
                let v12 = C::value_type(ctx, v11);
                if v12 == I64 {
                    let v13 = &C::inst_data_value(ctx, v9);
                    if let &InstructionData::Binary {
                        opcode: ref v14,
                        args: ref v15,
                    } = v13 {
                        if let &Opcode::Iadd = v14 {
                            let v16 = C::unpack_value_array_2(ctx, v15);
                            let v19 = C::put_in_reg(ctx, v16.0);
                            let v20 = C::put_in_reg(ctx, v16.1);
                            let v21 = &C::memarg_reg_plus_reg(ctx, v19, v20, arg3, arg0);
                            // Rule at src\isa\s390x\inst.isle line 1838.
                            return v21.clone();
                        }
                    }
                }
            }
        }
    }
    let v2 = C::value_type(ctx, arg1);
    if v2 == I64 {
        let v6 = C::put_in_reg(ctx, arg1);
        let v7 = &C::memarg_reg_plus_off(ctx, v6, v4, arg3, arg0);
        // Rule at src\isa\s390x\inst.isle line 1835.
        return v7.clone();
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "lower_address_bias", "src\\isa\\s390x\\inst.isle line 1833")
}

// Generated as internal constructor for term load_sym.
pub fn constructor_load_sym<C: Context>(
    ctx: &mut C,
    arg0: Inst,
) -> Option<Inst> {
    let v1 = &C::inst_data_value(ctx, arg0);
    if let &InstructionData::Load {
        opcode: ref v2,
        arg: v3,
        flags: v4,
        offset: v5,
    } = v1 {
        if let &Opcode::Load = v2 {
            let v6 = C::def_inst(ctx, v3);
            if let Some(v7) = v6 {
                let v8 = &C::inst_data_value(ctx, v7);
                if let &InstructionData::UnaryGlobalValue {
                    opcode: ref v9,
                    global_value: v10,
                } = v8 {
                    if let &Opcode::SymbolValue = v9 {
                        let v11 = C::symbol_value_data(ctx, v10);
                        if let Some(v12) = v11 {
                            let v16 = C::reloc_distance_near(ctx, v12.1);
                            if let Some(v17) = v16 {
                                let v18 = C::i64_from_offset(ctx, v5);
                                let v19 = C::memarg_symbol_offset_sum(ctx, v12.2, v18);
                                if let Some(v20) = v19 {
                                    let v21 = Some(arg0);
                                    // Rule at src\isa\s390x\inst.isle line 1845.
                                    return v21;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    None
}

// Generated as internal constructor for term uload16_sym.
pub fn constructor_uload16_sym<C: Context>(
    ctx: &mut C,
    arg0: Inst,
) -> Option<Inst> {
    let v1 = &C::inst_data_value(ctx, arg0);
    if let &InstructionData::Load {
        opcode: ref v2,
        arg: v3,
        flags: v4,
        offset: v5,
    } = v1 {
        if let &Opcode::Uload16 = v2 {
            let v6 = C::def_inst(ctx, v3);
            if let Some(v7) = v6 {
                let v8 = &C::inst_data_value(ctx, v7);
                if let &InstructionData::UnaryGlobalValue {
                    opcode: ref v9,
                    global_value: v10,
                } = v8 {
                    if let &Opcode::SymbolValue = v9 {
                        let v11 = C::symbol_value_data(ctx, v10);
                        if let Some(v12) = v11 {
                            let v16 = C::reloc_distance_near(ctx, v12.1);
                            if let Some(v17) = v16 {
                                let v18 = C::i64_from_offset(ctx, v5);
                                let v19 = C::memarg_symbol_offset_sum(ctx, v12.2, v18);
                                if let Some(v20) = v19 {
                                    let v21 = Some(arg0);
                                    // Rule at src\isa\s390x\inst.isle line 1853.
                                    return v21;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    None
}

// Generated as internal constructor for term stack_addr_impl.
pub fn constructor_stack_addr_impl<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: StackSlot,
    arg2: Offset32,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, arg0);
    let v4 = &C::abi_stackslot_addr(ctx, v3, arg1, arg2);
    let v5 = C::emit(ctx, v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\s390x\inst.isle line 1864.
    return v6;
}

// Generated as internal constructor for term sink_load.
pub fn constructor_sink_load<C: Context>(
    ctx: &mut C,
    arg0: Inst,
) -> MemArg {
    let v1 = &C::inst_data_value(ctx, arg0);
    if let &InstructionData::Load {
        opcode: ref v2,
        arg: v3,
        flags: v4,
        offset: v5,
    } = v1 {
        if let &Opcode::Load = v2 {
            let v6 = C::sink_inst(ctx, arg0);
            let v7 = &constructor_lower_address(ctx, v4, v3, v5);
            // Rule at src\isa\s390x\inst.isle line 1930.
            return v7.clone();
        }
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "sink_load", "src\\isa\\s390x\\inst.isle line 1929")
}

// Generated as internal constructor for term sink_sload16.
pub fn constructor_sink_sload16<C: Context>(
    ctx: &mut C,
    arg0: Inst,
) -> MemArg {
    let v1 = &C::inst_data_value(ctx, arg0);
    if let &InstructionData::Load {
        opcode: ref v2,
        arg: v3,
        flags: v4,
        offset: v5,
    } = v1 {
        if let &Opcode::Sload16 = v2 {
            let v6 = C::sink_inst(ctx, arg0);
            let v7 = &constructor_lower_address(ctx, v4, v3, v5);
            // Rule at src\isa\s390x\inst.isle line 1937.
            return v7.clone();
        }
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "sink_sload16", "src\\isa\\s390x\\inst.isle line 1936")
}

// Generated as internal constructor for term sink_sload32.
pub fn constructor_sink_sload32<C: Context>(
    ctx: &mut C,
    arg0: Inst,
) -> MemArg {
    let v1 = &C::inst_data_value(ctx, arg0);
    if let &InstructionData::Load {
        opcode: ref v2,
        arg: v3,
        flags: v4,
        offset: v5,
    } = v1 {
        if let &Opcode::Sload32 = v2 {
            let v6 = C::sink_inst(ctx, arg0);
            let v7 = &constructor_lower_address(ctx, v4, v3, v5);
            // Rule at src\isa\s390x\inst.isle line 1944.
            return v7.clone();
        }
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "sink_sload32", "src\\isa\\s390x\\inst.isle line 1943")
}

// Generated as internal constructor for term sink_uload16.
pub fn constructor_sink_uload16<C: Context>(
    ctx: &mut C,
    arg0: Inst,
) -> MemArg {
    let v1 = &C::inst_data_value(ctx, arg0);
    if let &InstructionData::Load {
        opcode: ref v2,
        arg: v3,
        flags: v4,
        offset: v5,
    } = v1 {
        if let &Opcode::Uload16 = v2 {
            let v6 = C::sink_inst(ctx, arg0);
            let v7 = &constructor_lower_address(ctx, v4, v3, v5);
            // Rule at src\isa\s390x\inst.isle line 1951.
            return v7.clone();
        }
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "sink_uload16", "src\\isa\\s390x\\inst.isle line 1950")
}

// Generated as internal constructor for term sink_uload32.
pub fn constructor_sink_uload32<C: Context>(
    ctx: &mut C,
    arg0: Inst,
) -> MemArg {
    let v1 = &C::inst_data_value(ctx, arg0);
    if let &InstructionData::Load {
        opcode: ref v2,
        arg: v3,
        flags: v4,
        offset: v5,
    } = v1 {
        if let &Opcode::Uload32 = v2 {
            let v6 = C::sink_inst(ctx, arg0);
            let v7 = &constructor_lower_address(ctx, v4, v3, v5);
            // Rule at src\isa\s390x\inst.isle line 1958.
            return v7.clone();
        }
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "sink_uload32", "src\\isa\\s390x\\inst.isle line 1957")
}

// Generated as internal constructor for term temp_writable_regpair.
pub fn constructor_temp_writable_regpair<C: Context>(
    ctx: &mut C,
) -> WritableRegPair {
    let v1 = C::temp_writable_reg(ctx, I64);
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = C::writable_regpair(ctx, v1, v2);
    // Rule at src\isa\s390x\inst.isle line 1974.
    return v3;
}

// Generated as internal constructor for term writable_regpair_to_regpair.
pub fn constructor_writable_regpair_to_regpair<C: Context>(
    ctx: &mut C,
    arg0: WritableRegPair,
) -> RegPair {
    let v1 = C::writable_regpair_hi(ctx, arg0);
    let v3 = C::writable_regpair_lo(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    let v4 = C::writable_reg_to_reg(ctx, v3);
    let v5 = C::regpair(ctx, v2, v4);
    // Rule at src\isa\s390x\inst.isle line 1990.
    return v5;
}

// Generated as internal constructor for term alu_rrr.
pub fn constructor_alu_rrr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRRR {
        alu_op: arg1.clone(),
        rd: v4,
        rn: arg2,
        rm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\s390x\inst.isle line 2010.
    return v7;
}

// Generated as internal constructor for term alu_rrr_with_flags_paired.
pub fn constructor_alu_rrr_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: Reg,
) -> ProducesFlags {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRRR {
        alu_op: arg1.clone(),
        rd: v4,
        rn: arg2,
        rm: arg3,
    };
    let v6 = C::writable_reg_to_reg(ctx, v4);
    let v7 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v5,
        result: v6,
    };
    // Rule at src\isa\s390x\inst.isle line 2017.
    return v7;
}

// Generated as internal constructor for term alu_rrsimm16.
pub fn constructor_alu_rrsimm16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: i16,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRRSImm16 {
        alu_op: arg1.clone(),
        rd: v4,
        rn: arg2,
        imm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\s390x\inst.isle line 2024.
    return v7;
}

// Generated as internal constructor for term alu_rr.
pub fn constructor_alu_rr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRR {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        rm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\s390x\inst.isle line 2031.
    return v7;
}

// Generated as internal constructor for term alu_rr_with_flags_paired.
pub fn constructor_alu_rr_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: Reg,
) -> ProducesFlags {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRR {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        rm: arg3,
    };
    let v6 = C::writable_reg_to_reg(ctx, v4);
    let v7 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v5,
        result: v6,
    };
    // Rule at src\isa\s390x\inst.isle line 2038.
    return v7;
}

// Generated as internal constructor for term alu_rx.
pub fn constructor_alu_rx<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: &MemArg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRX {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        mem: arg3.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\s390x\inst.isle line 2045.
    return v7;
}

// Generated as internal constructor for term alu_rx_with_flags_paired.
pub fn constructor_alu_rx_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: &MemArg,
) -> ProducesFlags {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRX {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        mem: arg3.clone(),
    };
    let v6 = C::writable_reg_to_reg(ctx, v4);
    let v7 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v5,
        result: v6,
    };
    // Rule at src\isa\s390x\inst.isle line 2052.
    return v7;
}

// Generated as internal constructor for term alu_rsimm16.
pub fn constructor_alu_rsimm16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: i16,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRSImm16 {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        imm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\s390x\inst.isle line 2059.
    return v7;
}

// Generated as internal constructor for term alu_rsimm32.
pub fn constructor_alu_rsimm32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: i32,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRSImm32 {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        imm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\s390x\inst.isle line 2066.
    return v7;
}

// Generated as internal constructor for term alu_ruimm32.
pub fn constructor_alu_ruimm32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: u32,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRUImm32 {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        imm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\s390x\inst.isle line 2073.
    return v7;
}

// Generated as internal constructor for term alu_ruimm32_with_flags_paired.
pub fn constructor_alu_ruimm32_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: u32,
) -> ProducesFlags {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRUImm32 {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        imm: arg3,
    };
    let v6 = C::writable_reg_to_reg(ctx, v4);
    let v7 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v5,
        result: v6,
    };
    // Rule at src\isa\s390x\inst.isle line 2080.
    return v7;
}

// Generated as internal constructor for term alu_ruimm16shifted.
pub fn constructor_alu_ruimm16shifted<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: UImm16Shifted,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRUImm16Shifted {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        imm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\s390x\inst.isle line 2087.
    return v7;
}

// Generated as internal constructor for term alu_ruimm32shifted.
pub fn constructor_alu_ruimm32shifted<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: UImm32Shifted,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRUImm32Shifted {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        imm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\s390x\inst.isle line 2094.
    return v7;
}

// Generated as internal constructor for term smul_wide.
pub fn constructor_smul_wide<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
) -> RegPair {
    let v2 = constructor_temp_writable_regpair(ctx);
    let v3 = MInst::SMulWide {
        rd: v2,
        rn: arg0,
        rm: arg1,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = constructor_writable_regpair_to_regpair(ctx, v2);
    // Rule at src\isa\s390x\inst.isle line 2101.
    return v5;
}

// Generated as internal constructor for term umul_wide.
pub fn constructor_umul_wide<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
) -> RegPair {
    let v2 = constructor_temp_writable_regpair(ctx);
    let v3 = MInst::UMulWide {
        rd: v2,
        ri: arg0,
        rn: arg1,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = constructor_writable_regpair_to_regpair(ctx, v2);
    // Rule at src\isa\s390x\inst.isle line 2108.
    return v5;
}

// Generated as internal constructor for term sdivmod32.
pub fn constructor_sdivmod32<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
) -> RegPair {
    let v2 = constructor_temp_writable_regpair(ctx);
    let v3 = MInst::SDivMod32 {
        rd: v2,
        ri: arg0,
        rn: arg1,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = constructor_writable_regpair_to_regpair(ctx, v2);
    // Rule at src\isa\s390x\inst.isle line 2115.
    return v5;
}

// Generated as internal constructor for term sdivmod64.
pub fn constructor_sdivmod64<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
) -> RegPair {
    let v2 = constructor_temp_writable_regpair(ctx);
    let v3 = MInst::SDivMod64 {
        rd: v2,
        ri: arg0,
        rn: arg1,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = constructor_writable_regpair_to_regpair(ctx, v2);
    // Rule at src\isa\s390x\inst.isle line 2122.
    return v5;
}

// Generated as internal constructor for term udivmod32.
pub fn constructor_udivmod32<C: Context>(
    ctx: &mut C,
    arg0: RegPair,
    arg1: Reg,
) -> RegPair {
    let v2 = constructor_temp_writable_regpair(ctx);
    let v3 = MInst::UDivMod32 {
        rd: v2,
        ri: arg0,
        rn: arg1,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = constructor_writable_regpair_to_regpair(ctx, v2);
    // Rule at src\isa\s390x\inst.isle line 2129.
    return v5;
}

// Generated as internal constructor for term udivmod64.
pub fn constructor_udivmod64<C: Context>(
    ctx: &mut C,
    arg0: RegPair,
    arg1: Reg,
) -> RegPair {
    let v2 = constructor_temp_writable_regpair(ctx);
    let v3 = MInst::UDivMod64 {
        rd: v2,
        ri: arg0,
        rn: arg1,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = constructor_writable_regpair_to_regpair(ctx, v2);
    // Rule at src\isa\s390x\inst.isle line 2136.
    return v5;
}

// Generated as internal constructor for term shift_rr.
pub fn constructor_shift_rr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ShiftOp,
    arg2: Reg,
    arg3: u8,
    arg4: Reg,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, arg0);
    let v6 = MInst::ShiftRR {
        shift_op: arg1.clone(),
        rd: v5,
        rn: arg2,
        shift_imm: arg3,
        shift_reg: arg4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src\isa\s390x\inst.isle line 2143.
    return v8;
}

// Generated as internal constructor for term rxsbg_test.
pub fn constructor_rxsbg_test<C: Context>(
    ctx: &mut C,
    arg0: &RxSBGOp,
    arg1: Reg,
    arg2: Reg,
    arg3: u8,
    arg4: u8,
    arg5: i8,
) -> ProducesFlags {
    let v6 = MInst::RxSBGTest {
        op: arg0.clone(),
        rd: arg1,
        rn: arg2,
        start_bit: arg3,
        end_bit: arg4,
        rotate_amt: arg5,
    };
    let v7 = ProducesFlags::ProducesFlagsSideEffect {
        inst: v6,
    };
    // Rule at src\isa\s390x\inst.isle line 2150.
    return v7;
}

// Generated as internal constructor for term unary_rr.
pub fn constructor_unary_rr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &UnaryOp,
    arg2: Reg,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, arg0);
    let v4 = MInst::UnaryRR {
        op: arg1.clone(),
        rd: v3,
        rn: arg2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\s390x\inst.isle line 2156.
    return v6;
}

// Generated as internal constructor for term cmp_rr.
pub fn constructor_cmp_rr<C: Context>(
    ctx: &mut C,
    arg0: &CmpOp,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v3 = MInst::CmpRR {
        op: arg0.clone(),
        rn: arg1,
        rm: arg2,
    };
    let v4 = ProducesFlags::ProducesFlagsSideEffect {
        inst: v3,
    };
    // Rule at src\isa\s390x\inst.isle line 2163.
    return v4;
}

// Generated as internal constructor for term cmp_rx.
pub fn constructor_cmp_rx<C: Context>(
    ctx: &mut C,
    arg0: &CmpOp,
    arg1: Reg,
    arg2: &MemArg,
) -> ProducesFlags {
    let v3 = MInst::CmpRX {
        op: arg0.clone(),
        rn: arg1,
        mem: arg2.clone(),
    };
    let v4 = ProducesFlags::ProducesFlagsSideEffect {
        inst: v3,
    };
    // Rule at src\isa\s390x\inst.isle line 2168.
    return v4;
}

// Generated as internal constructor for term cmp_rsimm16.
pub fn constructor_cmp_rsimm16<C: Context>(
    ctx: &mut C,
    arg0: &CmpOp,
    arg1: Reg,
    arg2: i16,
) -> ProducesFlags {
    let v3 = MInst::CmpRSImm16 {
        op: arg0.clone(),
        rn: arg1,
        imm: arg2,
    };
    let v4 = ProducesFlags::ProducesFlagsSideEffect {
        inst: v3,
    };
    // Rule at src\isa\s390x\inst.isle line 2173.
    return v4;
}

// Generated as internal constructor for term cmp_rsimm32.
pub fn constructor_cmp_rsimm32<C: Context>(
    ctx: &mut C,
    arg0: &CmpOp,
    arg1: Reg,
    arg2: i32,
) -> ProducesFlags {
    let v3 = MInst::CmpRSImm32 {
        op: arg0.clone(),
        rn: arg1,
        imm: arg2,
    };
    let v4 = ProducesFlags::ProducesFlagsSideEffect {
        inst: v3,
    };
    // Rule at src\isa\s390x\inst.isle line 2178.
    return v4;
}

// Generated as internal constructor for term cmp_ruimm32.
pub fn constructor_cmp_ruimm32<C: Context>(
    ctx: &mut C,
    arg0: &CmpOp,
    arg1: Reg,
    arg2: u32,
) -> ProducesFlags {
    let v3 = MInst::CmpRUImm32 {
        op: arg0.clone(),
        rn: arg1,
        imm: arg2,
    };
    let v4 = ProducesFlags::ProducesFlagsSideEffect {
        inst: v3,
    };
    // Rule at src\isa\s390x\inst.isle line 2183.
    return v4;
}

// Generated as internal constructor for term atomic_rmw_impl.
pub fn constructor_atomic_rmw_impl<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: &MemArg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AtomicRmw {
        alu_op: arg1.clone(),
        rd: v4,
        rn: arg2,
        mem: arg3.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\s390x\inst.isle line 2188.
    return v7;
}

// Generated as internal constructor for term atomic_cas32.
pub fn constructor_atomic_cas32<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I32);
    let v5 = MInst::AtomicCas32 {
        rd: v4,
        ri: arg0,
        rn: arg1,
        mem: arg2.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\s390x\inst.isle line 2195.
    return v7;
}

// Generated as internal constructor for term atomic_cas64.
pub fn constructor_atomic_cas64<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::AtomicCas64 {
        rd: v4,
        ri: arg0,
        rn: arg1,
        mem: arg2.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\s390x\inst.isle line 2202.
    return v7;
}

// Generated as internal constructor for term fence_impl.
pub fn constructor_fence_impl<C: Context>(
    ctx: &mut C,
) -> SideEffectNoResult {
    let v1 = SideEffectNoResult::Inst {
        inst: MInst::Fence,
    };
    // Rule at src\isa\s390x\inst.isle line 2209.
    return v1;
}

// Generated as internal constructor for term load32.
pub fn constructor_load32<C: Context>(
    ctx: &mut C,
    arg0: &MemArg,
) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I32);
    let v3 = MInst::Load32 {
        rd: v2,
        mem: arg0.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src\isa\s390x\inst.isle line 2214.
    return v5;
}

// Generated as internal constructor for term load64.
pub fn constructor_load64<C: Context>(
    ctx: &mut C,
    arg0: &MemArg,
) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::Load64 {
        rd: v2,
        mem: arg0.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src\isa\s390x\inst.isle line 2221.
    return v5;
}

// Generated as internal constructor for term loadrev16.
pub fn constructor_loadrev16<C: Context>(
    ctx: &mut C,
    arg0: &MemArg,
) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I32);
    let v3 = MInst::LoadRev16 {
        rd: v2,
        mem: arg0.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src\isa\s390x\inst.isle line 2228.
    return v5;
}

// Generated as internal constructor for term loadrev32.
pub fn constructor_loadrev32<C: Context>(
    ctx: &mut C,
    arg0: &MemArg,
) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I32);
    let v3 = MInst::LoadRev32 {
        rd: v2,
        mem: arg0.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src\isa\s390x\inst.isle line 2235.
    return v5;
}

// Generated as internal constructor for term loadrev64.
pub fn constructor_loadrev64<C: Context>(
    ctx: &mut C,
    arg0: &MemArg,
) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::LoadRev64 {
        rd: v2,
        mem: arg0.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src\isa\s390x\inst.isle line 2242.
    return v5;
}

// Generated as internal constructor for term store8.
pub fn constructor_store8<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::Store8 {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst {
        inst: v2,
    };
    // Rule at src\isa\s390x\inst.isle line 2249.
    return v3;
}

// Generated as internal constructor for term store16.
pub fn constructor_store16<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::Store16 {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst {
        inst: v2,
    };
    // Rule at src\isa\s390x\inst.isle line 2254.
    return v3;
}

// Generated as internal constructor for term store32.
pub fn constructor_store32<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::Store32 {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst {
        inst: v2,
    };
    // Rule at src\isa\s390x\inst.isle line 2259.
    return v3;
}

// Generated as internal constructor for term store64.
pub fn constructor_store64<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::Store64 {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst {
        inst: v2,
    };
    // Rule at src\isa\s390x\inst.isle line 2264.
    return v3;
}

// Generated as internal constructor for term store8_imm.
pub fn constructor_store8_imm<C: Context>(
    ctx: &mut C,
    arg0: u8,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::StoreImm8 {
        imm: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst {
        inst: v2,
    };
    // Rule at src\isa\s390x\inst.isle line 2269.
    return v3;
}

// Generated as internal constructor for term store16_imm.
pub fn constructor_store16_imm<C: Context>(
    ctx: &mut C,
    arg0: i16,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::StoreImm16 {
        imm: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst {
        inst: v2,
    };
    // Rule at src\isa\s390x\inst.isle line 2274.
    return v3;
}

// Generated as internal constructor for term store32_simm16.
pub fn constructor_store32_simm16<C: Context>(
    ctx: &mut C,
    arg0: i16,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::StoreImm32SExt16 {
        imm: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst {
        inst: v2,
    };
    // Rule at src\isa\s390x\inst.isle line 2279.
    return v3;
}

// Generated as internal constructor for term store64_simm16.
pub fn constructor_store64_simm16<C: Context>(
    ctx: &mut C,
    arg0: i16,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::StoreImm64SExt16 {
        imm: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst {
        inst: v2,
    };
    // Rule at src\isa\s390x\inst.isle line 2284.
    return v3;
}

// Generated as internal constructor for term storerev16.
pub fn constructor_storerev16<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::StoreRev16 {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst {
        inst: v2,
    };
    // Rule at src\isa\s390x\inst.isle line 2289.
    return v3;
}

// Generated as internal constructor for term storerev32.
pub fn constructor_storerev32<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::StoreRev32 {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst {
        inst: v2,
    };
    // Rule at src\isa\s390x\inst.isle line 2294.
    return v3;
}

// Generated as internal constructor for term storerev64.
pub fn constructor_storerev64<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::StoreRev64 {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst {
        inst: v2,
    };
    // Rule at src\isa\s390x\inst.isle line 2299.
    return v3;
}

// Generated as internal constructor for term load_ar.
pub fn constructor_load_ar<C: Context>(
    ctx: &mut C,
    arg0: u8,
) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::LoadAR {
        rd: v2,
        ar: arg0,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src\isa\s390x\inst.isle line 2304.
    return v5;
}

// Generated as internal constructor for term insert_ar.
pub fn constructor_insert_ar<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: u8,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::InsertAR {
        rd: v3,
        ri: arg0,
        ar: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\s390x\inst.isle line 2311.
    return v6;
}

// Generated as internal constructor for term fpu_rr.
pub fn constructor_fpu_rr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FPUOp1,
    arg2: Reg,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, arg0);
    let v4 = MInst::FpuRR {
        fpu_op: arg1.clone(),
        rd: v3,
        rn: arg2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\s390x\inst.isle line 2318.
    return v6;
}

// Generated as internal constructor for term fpu_rrr.
pub fn constructor_fpu_rrr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FPUOp2,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::FpuRRR {
        fpu_op: arg1.clone(),
        rd: v4,
        rn: arg2,
        rm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\s390x\inst.isle line 2325.
    return v7;
}

// Generated as internal constructor for term fpu_rrrr.
pub fn constructor_fpu_rrrr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FPUOp3,
    arg2: Reg,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, arg0);
    let v6 = MInst::FpuRRRR {
        fpu_op: arg1.clone(),
        rd: v5,
        rn: arg2,
        rm: arg3,
        ra: arg4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src\isa\s390x\inst.isle line 2332.
    return v8;
}

// Generated as internal constructor for term fpu_cmp32.
pub fn constructor_fpu_cmp32<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
) -> ProducesFlags {
    let v2 = MInst::FpuCmp32 {
        rn: arg0,
        rm: arg1,
    };
    let v3 = ProducesFlags::ProducesFlagsSideEffect {
        inst: v2,
    };
    // Rule at src\isa\s390x\inst.isle line 2339.
    return v3;
}

// Generated as internal constructor for term fpu_cmp64.
pub fn constructor_fpu_cmp64<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
) -> ProducesFlags {
    let v2 = MInst::FpuCmp64 {
        rn: arg0,
        rm: arg1,
    };
    let v3 = ProducesFlags::ProducesFlagsSideEffect {
        inst: v2,
    };
    // Rule at src\isa\s390x\inst.isle line 2344.
    return v3;
}

// Generated as internal constructor for term fpu_round.
pub fn constructor_fpu_round<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FpuRoundOp,
    arg2: &FpuRoundMode,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::FpuRound {
        op: arg1.clone(),
        mode: arg2.clone(),
        rd: v4,
        rn: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\s390x\inst.isle line 2349.
    return v7;
}

// Generated as internal constructor for term vec_rrr.
pub fn constructor_vec_rrr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &VecBinaryOp,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::VecRRR {
        op: arg1.clone(),
        rd: v4,
        rn: arg2,
        rm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\s390x\inst.isle line 2356.
    return v7;
}

// Generated as internal constructor for term vec_rr.
pub fn constructor_vec_rr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &VecUnaryOp,
    arg2: Reg,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, arg0);
    let v4 = MInst::VecRR {
        op: arg1.clone(),
        rd: v3,
        rn: arg2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\s390x\inst.isle line 2363.
    return v6;
}

// Generated as internal constructor for term vec_shift_rr.
pub fn constructor_vec_shift_rr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &VecShiftOp,
    arg2: Reg,
    arg3: u8,
    arg4: Reg,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, arg0);
    let v6 = MInst::VecShiftRR {
        shift_op: arg1.clone(),
        rd: v5,
        rn: arg2,
        shift_imm: arg3,
        shift_reg: arg4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src\isa\s390x\inst.isle line 2370.
    return v8;
}

// Generated as internal constructor for term vec_select.
pub fn constructor_vec_select<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::VecSelect {
        rd: v4,
        rn: arg1,
        rm: arg2,
        ra: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\s390x\inst.isle line 2377.
    return v7;
}

// Generated as internal constructor for term vec_permute.
pub fn constructor_vec_permute<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::VecPermute {
        rd: v4,
        rn: arg1,
        rm: arg2,
        ra: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\s390x\inst.isle line 2384.
    return v7;
}

// Generated as internal constructor for term vec_permute_dw_imm.
pub fn constructor_vec_permute_dw_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u8,
    arg3: Reg,
    arg4: u8,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, arg0);
    let v6 = MInst::VecPermuteDWImm {
        rd: v5,
        rn: arg1,
        rm: arg3,
        idx1: arg2,
        idx2: arg4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src\isa\s390x\inst.isle line 2391.
    return v8;
}

// Generated as internal constructor for term vec_int_cmp.
pub fn constructor_vec_int_cmp<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &VecIntCmpOp,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::VecIntCmp {
        op: arg1.clone(),
        rd: v4,
        rn: arg2,
        rm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\s390x\inst.isle line 2398.
    return v7;
}

// Generated as internal constructor for term vec_int_cmps.
pub fn constructor_vec_int_cmps<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &VecIntCmpOp,
    arg2: Reg,
    arg3: Reg,
) -> ProducesFlags {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::VecIntCmpS {
        op: arg1.clone(),
        rd: v4,
        rn: arg2,
        rm: arg3,
    };
    let v6 = ProducesFlags::ProducesFlagsSideEffect {
        inst: v5,
    };
    // Rule at src\isa\s390x\inst.isle line 2405.
    return v6;
}

// Generated as internal constructor for term vec_float_cmp.
pub fn constructor_vec_float_cmp<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &VecFloatCmpOp,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::VecFloatCmp {
        op: arg1.clone(),
        rd: v4,
        rn: arg2,
        rm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\s390x\inst.isle line 2411.
    return v7;
}

// Generated as internal constructor for term vec_float_cmps.
pub fn constructor_vec_float_cmps<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &VecFloatCmpOp,
    arg2: Reg,
    arg3: Reg,
) -> ProducesFlags {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::VecFloatCmpS {
        op: arg1.clone(),
        rd: v4,
        rn: arg2,
        rm: arg3,
    };
    let v6 = ProducesFlags::ProducesFlagsSideEffect {
        inst: v5,
    };
    // Rule at src\isa\s390x\inst.isle line 2418.
    return v6;
}

// Generated as internal constructor for term vec_int128_scmphi.
pub fn constructor_vec_int128_scmphi<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
) -> ProducesBool {
    let v3 = C::temp_writable_reg(ctx, I128);
    let v7 = &C::mask_as_cond(ctx, 0x4_u8);
    let v4 = MInst::VecInt128SCmpHi {
        tmp: v3,
        rn: arg0,
        rm: arg1,
    };
    let v5 = ProducesFlags::ProducesFlagsSideEffect {
        inst: v4,
    };
    let v8 = &constructor_bool(ctx, &v5, v7);
    // Rule at src\isa\s390x\inst.isle line 2424.
    return v8.clone();
}

// Generated as internal constructor for term vec_int128_ucmphi.
pub fn constructor_vec_int128_ucmphi<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
) -> ProducesBool {
    let v3 = C::temp_writable_reg(ctx, I128);
    let v7 = &C::mask_as_cond(ctx, 0x4_u8);
    let v4 = MInst::VecInt128UCmpHi {
        tmp: v3,
        rn: arg0,
        rm: arg1,
    };
    let v5 = ProducesFlags::ProducesFlagsSideEffect {
        inst: v4,
    };
    let v8 = &constructor_bool(ctx, &v5, v7);
    // Rule at src\isa\s390x\inst.isle line 2431.
    return v8.clone();
}

// Generated as internal constructor for term vec_load.
pub fn constructor_vec_load<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MemArg,
) -> Reg {
    let v2 = C::temp_writable_reg(ctx, arg0);
    let v3 = MInst::VecLoad {
        rd: v2,
        mem: arg1.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src\isa\s390x\inst.isle line 2438.
    return v5;
}

// Generated as internal constructor for term vec_loadrev.
pub fn constructor_vec_loadrev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MemArg,
) -> Reg {
    let v2 = C::temp_writable_reg(ctx, arg0);
    let v3 = MInst::VecLoadRev {
        rd: v2,
        mem: arg1.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src\isa\s390x\inst.isle line 2445.
    return v5;
}

// Generated as internal constructor for term vec_load_byte16rev.
pub fn constructor_vec_load_byte16rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MemArg,
) -> Reg {
    let v2 = C::temp_writable_reg(ctx, arg0);
    let v3 = MInst::VecLoadByte16Rev {
        rd: v2,
        mem: arg1.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src\isa\s390x\inst.isle line 2452.
    return v5;
}

// Generated as internal constructor for term vec_load_byte32rev.
pub fn constructor_vec_load_byte32rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MemArg,
) -> Reg {
    let v2 = C::temp_writable_reg(ctx, arg0);
    let v3 = MInst::VecLoadByte32Rev {
        rd: v2,
        mem: arg1.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src\isa\s390x\inst.isle line 2459.
    return v5;
}

// Generated as internal constructor for term vec_load_byte64rev.
pub fn constructor_vec_load_byte64rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MemArg,
) -> Reg {
    let v2 = C::temp_writable_reg(ctx, arg0);
    let v3 = MInst::VecLoadByte64Rev {
        rd: v2,
        mem: arg1.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src\isa\s390x\inst.isle line 2466.
    return v5;
}

// Generated as internal constructor for term vec_load_elt16rev.
pub fn constructor_vec_load_elt16rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MemArg,
) -> Reg {
    let v2 = C::temp_writable_reg(ctx, arg0);
    let v3 = MInst::VecLoadElt16Rev {
        rd: v2,
        mem: arg1.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src\isa\s390x\inst.isle line 2473.
    return v5;
}

// Generated as internal constructor for term vec_load_elt32rev.
pub fn constructor_vec_load_elt32rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MemArg,
) -> Reg {
    let v2 = C::temp_writable_reg(ctx, arg0);
    let v3 = MInst::VecLoadElt32Rev {
        rd: v2,
        mem: arg1.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src\isa\s390x\inst.isle line 2480.
    return v5;
}

// Generated as internal constructor for term vec_load_elt64rev.
pub fn constructor_vec_load_elt64rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MemArg,
) -> Reg {
    let v2 = C::temp_writable_reg(ctx, arg0);
    let v3 = MInst::VecLoadElt64Rev {
        rd: v2,
        mem: arg1.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src\isa\s390x\inst.isle line 2487.
    return v5;
}

// Generated as internal constructor for term vec_store.
pub fn constructor_vec_store<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::VecStore {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst {
        inst: v2,
    };
    // Rule at src\isa\s390x\inst.isle line 2494.
    return v3;
}

// Generated as internal constructor for term vec_storerev.
pub fn constructor_vec_storerev<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::VecStoreRev {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst {
        inst: v2,
    };
    // Rule at src\isa\s390x\inst.isle line 2499.
    return v3;
}

// Generated as internal constructor for term vec_store_byte16rev.
pub fn constructor_vec_store_byte16rev<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::VecStoreByte16Rev {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst {
        inst: v2,
    };
    // Rule at src\isa\s390x\inst.isle line 2504.
    return v3;
}

// Generated as internal constructor for term vec_store_byte32rev.
pub fn constructor_vec_store_byte32rev<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::VecStoreByte32Rev {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst {
        inst: v2,
    };
    // Rule at src\isa\s390x\inst.isle line 2509.
    return v3;
}

// Generated as internal constructor for term vec_store_byte64rev.
pub fn constructor_vec_store_byte64rev<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::VecStoreByte64Rev {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst {
        inst: v2,
    };
    // Rule at src\isa\s390x\inst.isle line 2514.
    return v3;
}

// Generated as internal constructor for term vec_store_elt16rev.
pub fn constructor_vec_store_elt16rev<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::VecStoreElt16Rev {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst {
        inst: v2,
    };
    // Rule at src\isa\s390x\inst.isle line 2519.
    return v3;
}

// Generated as internal constructor for term vec_store_elt32rev.
pub fn constructor_vec_store_elt32rev<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::VecStoreElt32Rev {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst {
        inst: v2,
    };
    // Rule at src\isa\s390x\inst.isle line 2524.
    return v3;
}

// Generated as internal constructor for term vec_store_elt64rev.
pub fn constructor_vec_store_elt64rev<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::VecStoreElt64Rev {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst {
        inst: v2,
    };
    // Rule at src\isa\s390x\inst.isle line 2529.
    return v3;
}

// Generated as internal constructor for term vec_load_replicate.
pub fn constructor_vec_load_replicate<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MemArg,
) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = C::multi_lane(ctx, v2);
        if let Some(v4) = v3 {
            let v8 = C::temp_writable_reg(ctx, v2);
            let v9 = MInst::VecLoadReplicate {
                size: v4.0,
                rd: v8,
                mem: arg1.clone(),
            };
            let v10 = C::emit(ctx, &v9);
            let v11 = C::writable_reg_to_reg(ctx, v8);
            // Rule at src\isa\s390x\inst.isle line 2534.
            return v11;
        }
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_load_replicate", "src\\isa\\s390x\\inst.isle line 2533")
}

// Generated as internal constructor for term vec_load_replicate_rev.
pub fn constructor_vec_load_replicate_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MemArg,
) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = C::multi_lane(ctx, v2);
        if let Some(v4) = v3 {
            let v8 = C::temp_writable_reg(ctx, v2);
            let v9 = MInst::VecLoadReplicateRev {
                size: v4.0,
                rd: v8,
                mem: arg1.clone(),
            };
            let v10 = C::emit(ctx, &v9);
            let v11 = C::writable_reg_to_reg(ctx, v8);
            // Rule at src\isa\s390x\inst.isle line 2541.
            return v11;
        }
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_load_replicate_rev", "src\\isa\\s390x\\inst.isle line 2540")
}

// Generated as internal constructor for term mov_to_vec128.
pub fn constructor_mov_to_vec128<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, arg0);
    let v4 = MInst::MovToVec128 {
        rd: v3,
        rn: arg1,
        rm: arg2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\s390x\inst.isle line 2548.
    return v6;
}

// Generated as internal constructor for term vec_load_const.
pub fn constructor_vec_load_const<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: u128,
) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v4 = C::temp_writable_reg(ctx, v2);
        let v5 = MInst::VecLoadConst {
            rd: v4,
            const_data: arg1,
        };
        let v6 = C::emit(ctx, &v5);
        let v7 = C::writable_reg_to_reg(ctx, v4);
        // Rule at src\isa\s390x\inst.isle line 2555.
        return v7;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_load_const", "src\\isa\\s390x\\inst.isle line 2554")
}

// Generated as internal constructor for term vec_load_const_replicate.
pub fn constructor_vec_load_const_replicate<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: u64,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = C::temp_writable_reg(ctx, arg0);
        let v7 = MInst::VecLoadConstReplicate {
            size: v2.0,
            rd: v6,
            const_data: arg1,
        };
        let v8 = C::emit(ctx, &v7);
        let v9 = C::writable_reg_to_reg(ctx, v6);
        // Rule at src\isa\s390x\inst.isle line 2562.
        return v9;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_load_const_replicate", "src\\isa\\s390x\\inst.isle line 2561")
}

// Generated as internal constructor for term vec_imm_byte_mask.
pub fn constructor_vec_imm_byte_mask<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: u16,
) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v4 = C::temp_writable_reg(ctx, v2);
        let v5 = MInst::VecImmByteMask {
            rd: v4,
            mask: arg1,
        };
        let v6 = C::emit(ctx, &v5);
        let v7 = C::writable_reg_to_reg(ctx, v4);
        // Rule at src\isa\s390x\inst.isle line 2569.
        return v7;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_imm_byte_mask", "src\\isa\\s390x\\inst.isle line 2568")
}

// Generated as internal constructor for term vec_imm_bit_mask.
pub fn constructor_vec_imm_bit_mask<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: u8,
    arg2: u8,
) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = C::multi_lane(ctx, v2);
        if let Some(v4) = v3 {
            let v9 = C::temp_writable_reg(ctx, v2);
            let v10 = MInst::VecImmBitMask {
                size: v4.0,
                rd: v9,
                start_bit: arg1,
                end_bit: arg2,
            };
            let v11 = C::emit(ctx, &v10);
            let v12 = C::writable_reg_to_reg(ctx, v9);
            // Rule at src\isa\s390x\inst.isle line 2576.
            return v12;
        }
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_imm_bit_mask", "src\\isa\\s390x\\inst.isle line 2575")
}

// Generated as internal constructor for term vec_imm_replicate.
pub fn constructor_vec_imm_replicate<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: i16,
) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = C::multi_lane(ctx, v2);
        if let Some(v4) = v3 {
            let v8 = C::temp_writable_reg(ctx, v2);
            let v9 = MInst::VecImmReplicate {
                size: v4.0,
                rd: v8,
                imm: arg1,
            };
            let v10 = C::emit(ctx, &v9);
            let v11 = C::writable_reg_to_reg(ctx, v8);
            // Rule at src\isa\s390x\inst.isle line 2583.
            return v11;
        }
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_imm_replicate", "src\\isa\\s390x\\inst.isle line 2582")
}

// Generated as internal constructor for term vec_load_lane.
pub fn constructor_vec_load_lane<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
    arg3: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v8 = C::temp_writable_reg(ctx, arg0);
        let v9 = MInst::VecLoadLane {
            size: v2.0,
            rd: v8,
            ri: arg1,
            mem: arg2.clone(),
            lane_imm: arg3,
        };
        let v10 = C::emit(ctx, &v9);
        let v11 = C::writable_reg_to_reg(ctx, v8);
        // Rule at src\isa\s390x\inst.isle line 2590.
        return v11;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_load_lane", "src\\isa\\s390x\\inst.isle line 2589")
}

// Generated as internal constructor for term vec_load_lane_undef.
pub fn constructor_vec_load_lane_undef<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MemArg,
    arg2: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v7 = C::temp_writable_reg(ctx, arg0);
        let v8 = MInst::VecLoadLaneUndef {
            size: v2.0,
            rd: v7,
            mem: arg1.clone(),
            lane_imm: arg2,
        };
        let v9 = C::emit(ctx, &v8);
        let v10 = C::writable_reg_to_reg(ctx, v7);
        // Rule at src\isa\s390x\inst.isle line 2597.
        return v10;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_load_lane_undef", "src\\isa\\s390x\\inst.isle line 2596")
}

// Generated as internal constructor for term vec_load_lane_rev.
pub fn constructor_vec_load_lane_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
    arg3: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v8 = C::temp_writable_reg(ctx, arg0);
        let v9 = MInst::VecLoadLaneRev {
            size: v2.0,
            rd: v8,
            ri: arg1,
            mem: arg2.clone(),
            lane_imm: arg3,
        };
        let v10 = C::emit(ctx, &v9);
        let v11 = C::writable_reg_to_reg(ctx, v8);
        // Rule at src\isa\s390x\inst.isle line 2604.
        return v11;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_load_lane_rev", "src\\isa\\s390x\\inst.isle line 2603")
}

// Generated as internal constructor for term vec_load_lane_rev_undef.
pub fn constructor_vec_load_lane_rev_undef<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MemArg,
    arg2: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v7 = C::temp_writable_reg(ctx, arg0);
        let v8 = MInst::VecLoadLaneRevUndef {
            size: v2.0,
            rd: v7,
            mem: arg1.clone(),
            lane_imm: arg2,
        };
        let v9 = C::emit(ctx, &v8);
        let v10 = C::writable_reg_to_reg(ctx, v7);
        // Rule at src\isa\s390x\inst.isle line 2611.
        return v10;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_load_lane_rev_undef", "src\\isa\\s390x\\inst.isle line 2610")
}

// Generated as internal constructor for term vec_store_lane.
pub fn constructor_vec_store_lane<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
    arg3: u8,
) -> SideEffectNoResult {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v8 = MInst::VecStoreLane {
            size: v2.0,
            rd: arg1,
            mem: arg2.clone(),
            lane_imm: arg3,
        };
        let v9 = SideEffectNoResult::Inst {
            inst: v8,
        };
        // Rule at src\isa\s390x\inst.isle line 2618.
        return v9;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_store_lane", "src\\isa\\s390x\\inst.isle line 2617")
}

// Generated as internal constructor for term vec_store_lane_rev.
pub fn constructor_vec_store_lane_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
    arg3: u8,
) -> SideEffectNoResult {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v8 = MInst::VecStoreLaneRev {
            size: v2.0,
            rd: arg1,
            mem: arg2.clone(),
            lane_imm: arg3,
        };
        let v9 = SideEffectNoResult::Inst {
            inst: v8,
        };
        // Rule at src\isa\s390x\inst.isle line 2623.
        return v9;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_store_lane_rev", "src\\isa\\s390x\\inst.isle line 2622")
}

// Generated as internal constructor for term vec_insert_lane.
pub fn constructor_vec_insert_lane<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: u8,
    arg4: Reg,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v9 = C::temp_writable_reg(ctx, arg0);
        let v10 = MInst::VecInsertLane {
            size: v2.0,
            rd: v9,
            ri: arg1,
            rn: arg2,
            lane_imm: arg3,
            lane_reg: arg4,
        };
        let v11 = C::emit(ctx, &v10);
        let v12 = C::writable_reg_to_reg(ctx, v9);
        // Rule at src\isa\s390x\inst.isle line 2628.
        return v12;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_insert_lane", "src\\isa\\s390x\\inst.isle line 2627")
}

// Generated as internal constructor for term vec_insert_lane_undef.
pub fn constructor_vec_insert_lane_undef<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u8,
    arg3: Reg,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v8 = C::temp_writable_reg(ctx, arg0);
        let v9 = MInst::VecInsertLaneUndef {
            size: v2.0,
            rd: v8,
            rn: arg1,
            lane_imm: arg2,
            lane_reg: arg3,
        };
        let v10 = C::emit(ctx, &v9);
        let v11 = C::writable_reg_to_reg(ctx, v8);
        // Rule at src\isa\s390x\inst.isle line 2635.
        return v11;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_insert_lane_undef", "src\\isa\\s390x\\inst.isle line 2634")
}

// Generated as internal constructor for term vec_extract_lane.
pub fn constructor_vec_extract_lane<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u8,
    arg3: Reg,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v9 = C::temp_writable_reg(ctx, I64);
        let v10 = MInst::VecExtractLane {
            size: v2.0,
            rd: v9,
            rn: arg1,
            lane_imm: arg2,
            lane_reg: arg3,
        };
        let v11 = C::emit(ctx, &v10);
        let v12 = C::writable_reg_to_reg(ctx, v9);
        // Rule at src\isa\s390x\inst.isle line 2642.
        return v12;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_extract_lane", "src\\isa\\s390x\\inst.isle line 2641")
}

// Generated as internal constructor for term vec_insert_lane_imm.
pub fn constructor_vec_insert_lane_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: i16,
    arg3: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v8 = C::temp_writable_reg(ctx, arg0);
        let v9 = MInst::VecInsertLaneImm {
            size: v2.0,
            rd: v8,
            ri: arg1,
            imm: arg2,
            lane_imm: arg3,
        };
        let v10 = C::emit(ctx, &v9);
        let v11 = C::writable_reg_to_reg(ctx, v8);
        // Rule at src\isa\s390x\inst.isle line 2649.
        return v11;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_insert_lane_imm", "src\\isa\\s390x\\inst.isle line 2648")
}

// Generated as internal constructor for term vec_replicate_lane.
pub fn constructor_vec_replicate_lane<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v7 = C::temp_writable_reg(ctx, arg0);
        let v8 = MInst::VecReplicateLane {
            size: v2.0,
            rd: v7,
            rn: arg1,
            lane_imm: arg2,
        };
        let v9 = C::emit(ctx, &v8);
        let v10 = C::writable_reg_to_reg(ctx, v7);
        // Rule at src\isa\s390x\inst.isle line 2656.
        return v10;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_replicate_lane", "src\\isa\\s390x\\inst.isle line 2655")
}

// Generated as internal constructor for term load_symbol_reloc.
pub fn constructor_load_symbol_reloc<C: Context>(
    ctx: &mut C,
    arg0: &SymbolReloc,
) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = C::box_symbol_reloc(ctx, arg0);
    let v4 = MInst::LoadSymbolReloc {
        rd: v2,
        symbol_reloc: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src\isa\s390x\inst.isle line 2663.
    return v6;
}

// Generated as internal constructor for term load_addr.
pub fn constructor_load_addr<C: Context>(
    ctx: &mut C,
    arg0: &MemArg,
) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::LoadAddr {
        rd: v2,
        mem: arg0.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src\isa\s390x\inst.isle line 2670.
    return v5;
}

// Generated as internal constructor for term call_impl.
pub fn constructor_call_impl<C: Context>(
    ctx: &mut C,
    arg0: WritableReg,
    arg1: BoxCallInfo,
) -> SideEffectNoResult {
    let v2 = MInst::Call {
        link: arg0,
        info: arg1,
    };
    let v3 = SideEffectNoResult::Inst {
        inst: v2,
    };
    // Rule at src\isa\s390x\inst.isle line 2677.
    return v3;
}

// Generated as internal constructor for term return_call_impl.
pub fn constructor_return_call_impl<C: Context>(
    ctx: &mut C,
    arg0: BoxReturnCallInfo,
) -> SideEffectNoResult {
    let v1 = MInst::ReturnCall {
        info: arg0,
    };
    let v2 = SideEffectNoResult::Inst {
        inst: v1,
    };
    // Rule at src\isa\s390x\inst.isle line 2682.
    return v2;
}

// Generated as internal constructor for term jump_impl.
pub fn constructor_jump_impl<C: Context>(
    ctx: &mut C,
    arg0: MachLabel,
) -> SideEffectNoResult {
    let v1 = MInst::Jump {
        dest: arg0,
    };
    let v2 = SideEffectNoResult::Inst {
        inst: v1,
    };
    // Rule at src\isa\s390x\inst.isle line 2687.
    return v2;
}

// Generated as internal constructor for term cond_br.
pub fn constructor_cond_br<C: Context>(
    ctx: &mut C,
    arg0: MachLabel,
    arg1: MachLabel,
    arg2: &Cond,
) -> ConsumesFlags {
    let v3 = MInst::CondBr {
        taken: arg0,
        not_taken: arg1,
        cond: arg2.clone(),
    };
    let v4 = ConsumesFlags::ConsumesFlagsSideEffect {
        inst: v3,
    };
    // Rule at src\isa\s390x\inst.isle line 2692.
    return v4;
}

// Generated as internal constructor for term jt_sequence.
pub fn constructor_jt_sequence<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: MachLabel,
    arg2: &Cond,
    arg3: &BoxVecMachLabel,
) -> ConsumesFlags {
    let v4 = MInst::JTSequence {
        ridx: arg0,
        default: arg1,
        default_cond: arg2.clone(),
        targets: arg3.clone(),
    };
    let v5 = ConsumesFlags::ConsumesFlagsSideEffect {
        inst: v4,
    };
    // Rule at src\isa\s390x\inst.isle line 2697.
    return v5;
}

// Generated as internal constructor for term jt_sequence_default_bool.
pub fn constructor_jt_sequence_default_bool<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: MachLabel,
    arg2: &ProducesBool,
    arg3: &BoxVecMachLabel,
) -> SideEffectNoResult {
    if let &ProducesBool::ProducesBool {
        producer: ref v3,
        cond: ref v4,
    } = arg2 {
        let v6 = &constructor_jt_sequence(ctx, arg0, arg1, v4, arg3);
        let v7 = &constructor_with_flags_side_effect(ctx, v3, v6);
        // Rule at src\isa\s390x\inst.isle line 2703.
        return v7.clone();
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "jt_sequence_default_bool", "src\\isa\\s390x\\inst.isle line 2702")
}

// Generated as internal constructor for term push_alu_reg.
pub fn constructor_push_alu_reg<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: &ALUOp,
    arg2: WritableReg,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    let v3 = C::real_reg(ctx, arg2);
    if let Some(v4) = v3 {
        let v7 = MInst::AluRRR {
            alu_op: arg1.clone(),
            rd: v4,
            rn: arg3,
            rm: arg4,
        };
        let v8 = C::inst_builder_push(ctx, arg0, &v7);
        let v9 = C::writable_reg_to_reg(ctx, v4);
        // Rule at src\isa\s390x\inst.isle line 2742.
        return v9;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "push_alu_reg", "src\\isa\\s390x\\inst.isle line 2741")
}

// Generated as internal constructor for term push_alu_uimm32shifted.
pub fn constructor_push_alu_uimm32shifted<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: &ALUOp,
    arg2: WritableReg,
    arg3: Reg,
    arg4: UImm32Shifted,
) -> Reg {
    let v3 = C::real_reg(ctx, arg2);
    if let Some(v4) = v3 {
        let v7 = MInst::AluRUImm32Shifted {
            alu_op: arg1.clone(),
            rd: v4,
            ri: arg3,
            imm: arg4,
        };
        let v8 = C::inst_builder_push(ctx, arg0, &v7);
        let v9 = C::writable_reg_to_reg(ctx, v4);
        // Rule at src\isa\s390x\inst.isle line 2748.
        return v9;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "push_alu_uimm32shifted", "src\\isa\\s390x\\inst.isle line 2747")
}

// Generated as internal constructor for term push_shift.
pub fn constructor_push_shift<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: &ShiftOp,
    arg2: WritableReg,
    arg3: Reg,
    arg4: u8,
    arg5: Reg,
) -> Reg {
    let v3 = C::real_reg(ctx, arg2);
    if let Some(v4) = v3 {
        let v8 = MInst::ShiftRR {
            shift_op: arg1.clone(),
            rd: v4,
            rn: arg3,
            shift_imm: arg4,
            shift_reg: arg5,
        };
        let v9 = C::inst_builder_push(ctx, arg0, &v8);
        let v10 = C::writable_reg_to_reg(ctx, v4);
        // Rule at src\isa\s390x\inst.isle line 2754.
        return v10;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "push_shift", "src\\isa\\s390x\\inst.isle line 2753")
}

// Generated as internal constructor for term push_rxsbg.
pub fn constructor_push_rxsbg<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: &RxSBGOp,
    arg2: WritableReg,
    arg3: Reg,
    arg4: Reg,
    arg5: u8,
    arg6: u8,
    arg7: i8,
) -> Reg {
    let v3 = C::real_reg(ctx, arg2);
    if let Some(v4) = v3 {
        let v10 = C::same_reg(ctx, v4, arg3);
        if let Some(v11) = v10 {
            let v12 = MInst::RxSBG {
                op: arg1.clone(),
                rd: v4,
                ri: arg3,
                rn: arg4,
                start_bit: arg5,
                end_bit: arg6,
                rotate_amt: arg7,
            };
            let v13 = C::inst_builder_push(ctx, arg0, &v12);
            let v14 = C::writable_reg_to_reg(ctx, v4);
            // Rule at src\isa\s390x\inst.isle line 2761.
            return v14;
        }
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "push_rxsbg", "src\\isa\\s390x\\inst.isle line 2760")
}

// Generated as internal constructor for term push_unary.
pub fn constructor_push_unary<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: &UnaryOp,
    arg2: WritableReg,
    arg3: Reg,
) -> Reg {
    let v3 = C::real_reg(ctx, arg2);
    if let Some(v4) = v3 {
        let v6 = MInst::UnaryRR {
            op: arg1.clone(),
            rd: v4,
            rn: arg3,
        };
        let v7 = C::inst_builder_push(ctx, arg0, &v6);
        let v8 = C::writable_reg_to_reg(ctx, v4);
        // Rule at src\isa\s390x\inst.isle line 2769.
        return v8;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "push_unary", "src\\isa\\s390x\\inst.isle line 2768")
}

// Generated as internal constructor for term push_atomic_cas32.
pub fn constructor_push_atomic_cas32<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: WritableReg,
    arg2: Reg,
    arg3: &MemArg,
) -> Reg {
    let v2 = C::real_reg(ctx, arg1);
    if let Some(v3) = v2 {
        let v6 = C::writable_reg_to_reg(ctx, v3);
        let v7 = MInst::AtomicCas32 {
            rd: v3,
            ri: v6,
            rn: arg2,
            mem: arg3.clone(),
        };
        let v8 = C::inst_builder_push(ctx, arg0, &v7);
        // Rule at src\isa\s390x\inst.isle line 2775.
        return v6;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "push_atomic_cas32", "src\\isa\\s390x\\inst.isle line 2774")
}

// Generated as internal constructor for term push_atomic_cas64.
pub fn constructor_push_atomic_cas64<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: WritableReg,
    arg2: Reg,
    arg3: &MemArg,
) -> Reg {
    let v2 = C::real_reg(ctx, arg1);
    if let Some(v3) = v2 {
        let v6 = C::writable_reg_to_reg(ctx, v3);
        let v7 = MInst::AtomicCas64 {
            rd: v3,
            ri: v6,
            rn: arg2,
            mem: arg3.clone(),
        };
        let v8 = C::inst_builder_push(ctx, arg0, &v7);
        // Rule at src\isa\s390x\inst.isle line 2781.
        return v6;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "push_atomic_cas64", "src\\isa\\s390x\\inst.isle line 2780")
}

// Generated as internal constructor for term push_break_if.
pub fn constructor_push_break_if<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: &ProducesFlags,
    arg2: &Cond,
) -> Reg {
    if let &ProducesFlags::ProducesFlagsSideEffect {
        inst: ref v2,
    } = arg1 {
        let v4 = C::inst_builder_push(ctx, arg0, v2);
        let v5 = MInst::CondBreak {
            cond: arg2.clone(),
        };
        let v6 = C::inst_builder_push(ctx, arg0, &v5);
        let v7 = C::invalid_reg(ctx);
        // Rule at src\isa\s390x\inst.isle line 2787.
        return v7;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "push_break_if", "src\\isa\\s390x\\inst.isle line 2786")
}

// Generated as internal constructor for term emit_loop.
pub fn constructor_emit_loop<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: &Cond,
) -> Unit {
    let v2 = C::inst_builder_finish(ctx, arg0);
    let v3 = MInst::Loop {
        body: v2,
        cond: arg1.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    // Rule at src\isa\s390x\inst.isle line 2794.
    return v4;
}

// Generated as internal constructor for term copy_reg.
pub fn constructor_copy_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v8 = C::gpr64_ty(ctx, arg0);
    if let Some(v9) = v8 {
        let v10 = C::temp_writable_reg(ctx, v9);
        let v11 = MInst::Mov64 {
            rd: v10,
            rm: arg1,
        };
        let v12 = C::emit(ctx, &v11);
        let v13 = C::writable_reg_to_reg(ctx, v10);
        // Rule at src\isa\s390x\inst.isle line 2806.
        return v13;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v4 = C::temp_writable_reg(ctx, v2);
        let v5 = MInst::Mov32 {
            rd: v4,
            rm: arg1,
        };
        let v6 = C::emit(ctx, &v5);
        let v7 = C::writable_reg_to_reg(ctx, v4);
        // Rule at src\isa\s390x\inst.isle line 2802.
        return v7;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "copy_reg", "src\\isa\\s390x\\inst.isle line 2801")
}

// Generated as internal constructor for term emit_load.
pub fn constructor_emit_load<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: WritableReg,
    arg2: &MemArg,
) -> Unit {
    match arg0 {
        I32 => {
            let v3 = MInst::Load32 {
                rd: arg1,
                mem: arg2.clone(),
            };
            let v4 = C::emit(ctx, &v3);
            // Rule at src\isa\s390x\inst.isle line 2813.
            return v4;
        }
        I64 => {
            let v5 = MInst::Load64 {
                rd: arg1,
                mem: arg2.clone(),
            };
            let v6 = C::emit(ctx, &v5);
            // Rule at src\isa\s390x\inst.isle line 2815.
            return v6;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "emit_load", "src\\isa\\s390x\\inst.isle line 2812")
}

// Generated as internal constructor for term mov_preg.
pub fn constructor_mov_preg<C: Context>(
    ctx: &mut C,
    arg0: PReg,
) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::MovPReg {
        rd: v2,
        rm: arg0,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src\isa\s390x\inst.isle line 2820.
    return v5;
}

// Generated as internal constructor for term sp.
pub fn constructor_sp<C: Context>(
    ctx: &mut C,
) -> Reg {
    let v0 = C::preg_stack(ctx);
    let v1 = constructor_mov_preg(ctx, v0);
    // Rule at src\isa\s390x\inst.isle line 2833.
    return v1;
}

// Generated as internal constructor for term arg_store.
pub fn constructor_arg_store<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> SideEffectNoResult {
    match arg0 {
        I8 => {
            let v3 = &constructor_store8(ctx, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 2839.
            return v3.clone();
        }
        I16 => {
            let v4 = &constructor_store16(ctx, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 2840.
            return v4.clone();
        }
        I32 => {
            let v5 = &constructor_store32(ctx, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 2841.
            return v5.clone();
        }
        I64 => {
            let v6 = &constructor_store64(ctx, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 2842.
            return v6.clone();
        }
        F16 => {
            let v9 = &constructor_vec_store_lane(ctx, F16X8, arg1, arg2, 0x0_u8);
            // Rule at src\isa\s390x\inst.isle line 2843.
            return v9.clone();
        }
        F32 => {
            let v11 = &constructor_vec_store_lane(ctx, F32X4, arg1, arg2, 0x0_u8);
            // Rule at src\isa\s390x\inst.isle line 2844.
            return v11.clone();
        }
        F64 => {
            let v13 = &constructor_vec_store_lane(ctx, F64X2, arg1, arg2, 0x0_u8);
            // Rule at src\isa\s390x\inst.isle line 2845.
            return v13.clone();
        }
        _ => {}
    }
    let v14 = C::vr128_ty(ctx, arg0);
    if let Some(v15) = v14 {
        let v16 = &constructor_vec_store(ctx, arg1, arg2);
        // Rule at src\isa\s390x\inst.isle line 2846.
        return v16.clone();
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "arg_store", "src\\isa\\s390x\\inst.isle line 2838")
}

// Generated as internal constructor for term vec_elt_rev.
pub fn constructor_vec_elt_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8_u32 => {
                if v2.1 == 0x10_u32 {
                    let v9 = constructor_vec_permute_dw_imm(ctx, I64X2, arg1, 0x1_u8, arg1, 0x0_u8);
                    let v11 = constructor_vec_rot_imm(ctx, I64X2, v9, 0x20_u8);
                    let v14 = constructor_vec_rot_imm(ctx, I32X4, v11, 0x10_u8);
                    let v17 = constructor_vec_rot_imm(ctx, I16X8, v14, 0x8_u8);
                    // Rule at src\isa\s390x\inst.isle line 2858.
                    return v17;
                }
            }
            0x10_u32 => {
                if v2.1 == 0x8_u32 {
                    let v9 = constructor_vec_permute_dw_imm(ctx, I64X2, arg1, 0x1_u8, arg1, 0x0_u8);
                    let v11 = constructor_vec_rot_imm(ctx, I64X2, v9, 0x20_u8);
                    let v14 = constructor_vec_rot_imm(ctx, I32X4, v11, 0x10_u8);
                    // Rule at src\isa\s390x\inst.isle line 2855.
                    return v14;
                }
            }
            0x20_u32 => {
                if v2.1 == 0x4_u32 {
                    let v9 = constructor_vec_permute_dw_imm(ctx, I64X2, arg1, 0x1_u8, arg1, 0x0_u8);
                    let v11 = constructor_vec_rot_imm(ctx, I64X2, v9, 0x20_u8);
                    // Rule at src\isa\s390x\inst.isle line 2852.
                    return v11;
                }
            }
            0x40_u32 => {
                if v2.1 == 0x2_u32 {
                    let v9 = constructor_vec_permute_dw_imm(ctx, I64X2, arg1, 0x1_u8, arg1, 0x0_u8);
                    // Rule at src\isa\s390x\inst.isle line 2850.
                    return v9;
                }
            }
            _ => {}
        }
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_elt_rev", "src\\isa\\s390x\\inst.isle line 2849")
}

// Generated as internal constructor for term abi_vec_elt_rev.
pub fn constructor_abi_vec_elt_rev<C: Context>(
    ctx: &mut C,
    arg0: &LaneOrder,
    arg1: Type,
    arg2: Reg,
) -> Reg {
    let v2 = C::gpr32_ty(ctx, arg1);
    if let Some(v3) = v2 {
        // Rule at src\isa\s390x\inst.isle line 2866.
        return arg2;
    }
    let v5 = C::gpr64_ty(ctx, arg1);
    if let Some(v6) = v5 {
        // Rule at src\isa\s390x\inst.isle line 2867.
        return arg2;
    }
    match arg1 {
        I128 => {
            // Rule at src\isa\s390x\inst.isle line 2868.
            return arg2;
        }
        F128 => {
            // Rule at src\isa\s390x\inst.isle line 2869.
            return arg2;
        }
        _ => {}
    }
    let v7 = C::ty_scalar_float(ctx, arg1);
    if let Some(v8) = v7 {
        // Rule at src\isa\s390x\inst.isle line 2870.
        return arg2;
    }
    let v9 = &C::lane_order(ctx);
    let v10 = constructor_lane_order_equal(ctx, arg0, v9);
    match v10 {
        false => {
            let v11 = C::ty_vec128(ctx, arg1);
            if let Some(v12) = v11 {
                let v13 = constructor_vec_elt_rev(ctx, v12, arg2);
                // Rule at src\isa\s390x\inst.isle line 2874.
                return v13;
            }
        }
        true => {
            // Rule at src\isa\s390x\inst.isle line 2871.
            return arg2;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "abi_vec_elt_rev", "src\\isa\\s390x\\inst.isle line 2865")
}

// Generated as internal constructor for term copy_to_buffer.
pub fn constructor_copy_to_buffer<C: Context>(
    ctx: &mut C,
    arg0: &MemArg,
    arg1: &ABIArg,
    arg2: Value,
) -> InstOutput {
    let v2 = &C::abi_arg_only_slot(ctx, arg1);
    if let Some(v3) = v2 {
        let v5 = C::output_none(ctx);
        // Rule at src\isa\s390x\inst.isle line 2880.
        return v5;
    }
    let v6 = C::abi_arg_implicit_pointer(ctx, arg1);
    if let Some(v7) = v6 {
        let v11 = C::value_type(ctx, arg2);
        if v7.2 == v11 {
            let v12 = C::put_in_reg(ctx, arg2);
            let v13 = &C::memarg_offset(ctx, arg0, v7.1);
            let v14 = &constructor_arg_store(ctx, v7.2, v12, v13);
            let v15 = constructor_side_effect(ctx, v14);
            // Rule at src\isa\s390x\inst.isle line 2881.
            return v15;
        }
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "copy_to_buffer", "src\\isa\\s390x\\inst.isle line 2879")
}

// Generated as internal constructor for term copy_to_arg.
pub fn constructor_copy_to_arg<C: Context>(
    ctx: &mut C,
    arg0: &CallArgListBuilder,
    arg1: &LaneOrder,
    arg2: &MemArg,
    arg3: &ABIArg,
    arg4: Value,
) -> InstOutput {
    let v4 = &C::abi_arg_only_slot(ctx, arg3);
    if let Some(v5) = v4 {
        let v7 = constructor_prepare_arg_val(ctx, v5, arg4);
        let v8 = constructor_copy_reg_to_arg_slot(ctx, arg0, arg1, arg2, v5, v7);
        // Rule at src\isa\s390x\inst.isle line 2888.
        return v8;
    }
    let v9 = C::abi_arg_implicit_pointer(ctx, arg3);
    if let Some(v10) = v9 {
        let v14 = &C::memarg_offset(ctx, arg2, v10.1);
        let v15 = constructor_load_addr(ctx, v14);
        let v16 = constructor_copy_reg_to_arg_slot(ctx, arg0, arg1, arg2, &v10.0, v15);
        // Rule at src\isa\s390x\inst.isle line 2890.
        return v16;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "copy_to_arg", "src\\isa\\s390x\\inst.isle line 2887")
}

// Generated as internal constructor for term prepare_arg_val.
pub fn constructor_prepare_arg_val<C: Context>(
    ctx: &mut C,
    arg0: &ABIArgSlot,
    arg1: Value,
) -> Reg {
    match arg0 {
        &ABIArgSlot::Reg {
            reg: v1,
            ty: v2,
            extension: ref v3,
        } => {
            match v3 {
                &ArgumentExtension::None => {
                    let v5 = C::put_in_reg(ctx, arg1);
                    // Rule at src\isa\s390x\inst.isle line 2898.
                    return v5;
                }
                &ArgumentExtension::Uext => {
                    let v6 = constructor_put_in_reg_zext64(ctx, arg1);
                    // Rule at src\isa\s390x\inst.isle line 2900.
                    return v6;
                }
                &ArgumentExtension::Sext => {
                    let v7 = constructor_put_in_reg_sext64(ctx, arg1);
                    // Rule at src\isa\s390x\inst.isle line 2902.
                    return v7;
                }
                _ => {}
            }
        }
        &ABIArgSlot::Stack {
            offset: v8,
            ty: v9,
            extension: ref v10,
        } => {
            match v10 {
                &ArgumentExtension::None => {
                    let v5 = C::put_in_reg(ctx, arg1);
                    // Rule at src\isa\s390x\inst.isle line 2904.
                    return v5;
                }
                &ArgumentExtension::Uext => {
                    let v6 = constructor_put_in_reg_zext64(ctx, arg1);
                    // Rule at src\isa\s390x\inst.isle line 2906.
                    return v6;
                }
                &ArgumentExtension::Sext => {
                    let v7 = constructor_put_in_reg_sext64(ctx, arg1);
                    // Rule at src\isa\s390x\inst.isle line 2908.
                    return v7;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "prepare_arg_val", "src\\isa\\s390x\\inst.isle line 2897")
}

// Generated as internal constructor for term copy_reg_to_arg_slot.
pub fn constructor_copy_reg_to_arg_slot<C: Context>(
    ctx: &mut C,
    arg0: &CallArgListBuilder,
    arg1: &LaneOrder,
    arg2: &MemArg,
    arg3: &ABIArgSlot,
    arg4: Reg,
) -> InstOutput {
    match arg3 {
        &ABIArgSlot::Reg {
            reg: v4,
            ty: v5,
            extension: ref v6,
        } => {
            let v8 = constructor_abi_vec_elt_rev(ctx, arg1, v5, arg4);
            let v9 = C::args_builder_push(ctx, arg0, v8, v4);
            let v10 = C::output_none(ctx);
            // Rule at src\isa\s390x\inst.isle line 2914.
            return v10;
        }
        &ABIArgSlot::Stack {
            offset: v11,
            ty: v12,
            extension: ref v13,
        } => {
            let v14 = constructor_abi_ext_ty(ctx, v13, v12);
            let v15 = constructor_abi_vec_elt_rev(ctx, arg1, v12, arg4);
            let v16 = &C::memarg_offset(ctx, arg2, v11);
            let v17 = &constructor_arg_store(ctx, v14, v15, v16);
            let v18 = constructor_side_effect(ctx, v17);
            // Rule at src\isa\s390x\inst.isle line 2917.
            return v18;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "copy_reg_to_arg_slot", "src\\isa\\s390x\\inst.isle line 2913")
}

// Generated as internal constructor for term abi_ext_ty.
pub fn constructor_abi_ext_ty<C: Context>(
    ctx: &mut C,
    arg0: &ArgumentExtension,
    arg1: Type,
) -> Type {
    match arg0 {
        &ArgumentExtension::Uext => {
            let v2 = C::gpr32_ty(ctx, arg1);
            if let Some(v3) = v2 {
                // Rule at src\isa\s390x\inst.isle line 2924.
                return I64;
            }
        }
        &ArgumentExtension::Sext => {
            let v2 = C::gpr32_ty(ctx, arg1);
            if let Some(v3) = v2 {
                // Rule at src\isa\s390x\inst.isle line 2925.
                return I64;
            }
        }
        _ => {}
    }
    // Rule at src\isa\s390x\inst.isle line 2923.
    return arg1;
}

// Generated as internal constructor for term imm.
pub fn constructor_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: u64,
) -> Reg {
    match arg0 {
        F16 => {
            let v52 = C::temp_writable_reg(ctx, F16);
            let v53 = C::u64_as_u16(ctx, arg1);
            let v54 = MInst::LoadFpuConst16 {
                rd: v52,
                const_data: v53,
            };
            let v55 = C::emit(ctx, &v54);
            let v56 = C::writable_reg_to_reg(ctx, v52);
            // Rule at src\isa\s390x\inst.isle line 2997.
            return v56;
        }
        F32 => {
            let v58 = C::temp_writable_reg(ctx, F32);
            let v22 = C::u64_truncate_to_u32(ctx, arg1);
            let v59 = MInst::LoadFpuConst32 {
                rd: v58,
                const_data: v22,
            };
            let v60 = C::emit(ctx, &v59);
            let v61 = C::writable_reg_to_reg(ctx, v58);
            // Rule at src\isa\s390x\inst.isle line 3004.
            return v61;
        }
        F64 => {
            let v63 = C::temp_writable_reg(ctx, F64);
            let v64 = MInst::LoadFpuConst64 {
                rd: v63,
                const_data: arg1,
            };
            let v65 = C::emit(ctx, &v64);
            let v66 = C::writable_reg_to_reg(ctx, v63);
            // Rule at src\isa\s390x\inst.isle line 3011.
            return v66;
        }
        _ => {}
    }
    let v1 = C::fits_in_16(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = C::ty_int(ctx, v2);
        if let Some(v4) = v3 {
            let v6 = C::temp_writable_reg(ctx, v4);
            let v7 = C::u64_as_i16(ctx, arg1);
            let v8 = MInst::Mov32SImm16 {
                rd: v6,
                imm: v7,
            };
            let v9 = C::emit(ctx, &v8);
            let v10 = C::writable_reg_to_reg(ctx, v6);
            // Rule at src\isa\s390x\inst.isle line 2934.
            return v10;
        }
    }
    let v11 = C::gpr32_ty(ctx, arg0);
    if let Some(v12) = v11 {
        let v13 = C::u32_pair_split(ctx, arg1);
        let v16 = C::i16_from_u32(ctx, v13.1);
        if let Some(v17) = v16 {
            let v18 = C::temp_writable_reg(ctx, v12);
            let v19 = MInst::Mov32SImm16 {
                rd: v18,
                imm: v17,
            };
            let v20 = C::emit(ctx, &v19);
            let v21 = C::writable_reg_to_reg(ctx, v18);
            // Rule at src\isa\s390x\inst.isle line 2940.
            return v21;
        }
        let v18 = C::temp_writable_reg(ctx, v12);
        let v22 = C::u64_truncate_to_u32(ctx, arg1);
        let v23 = MInst::Mov32Imm {
            rd: v18,
            imm: v22,
        };
        let v24 = C::emit(ctx, &v23);
        let v21 = C::writable_reg_to_reg(ctx, v18);
        // Rule at src\isa\s390x\inst.isle line 2946.
        return v21;
    }
    let v25 = C::gpr64_ty(ctx, arg0);
    if let Some(v26) = v25 {
        let v27 = C::i16_from_u64(ctx, arg1);
        if let Some(v28) = v27 {
            let v29 = C::temp_writable_reg(ctx, v26);
            let v30 = MInst::Mov64SImm16 {
                rd: v29,
                imm: v28,
            };
            let v31 = C::emit(ctx, &v30);
            let v32 = C::writable_reg_to_reg(ctx, v29);
            // Rule at src\isa\s390x\inst.isle line 2952.
            return v32;
        }
        let v33 = C::i32_from_u64(ctx, arg1);
        if let Some(v34) = v33 {
            let v29 = C::temp_writable_reg(ctx, v26);
            let v35 = MInst::Mov64SImm32 {
                rd: v29,
                imm: v34,
            };
            let v36 = C::emit(ctx, &v35);
            let v32 = C::writable_reg_to_reg(ctx, v29);
            // Rule at src\isa\s390x\inst.isle line 2958.
            return v32;
        }
        let v37 = C::uimm16shifted_from_u64(ctx, arg1);
        if let Some(v38) = v37 {
            let v29 = C::temp_writable_reg(ctx, v26);
            let v39 = MInst::Mov64UImm16Shifted {
                rd: v29,
                imm: v38,
            };
            let v40 = C::emit(ctx, &v39);
            let v32 = C::writable_reg_to_reg(ctx, v29);
            // Rule at src\isa\s390x\inst.isle line 2964.
            return v32;
        }
        let v41 = C::uimm32shifted_from_u64(ctx, arg1);
        if let Some(v42) = v41 {
            let v29 = C::temp_writable_reg(ctx, v26);
            let v43 = MInst::Mov64UImm32Shifted {
                rd: v29,
                imm: v42,
            };
            let v44 = C::emit(ctx, &v43);
            let v32 = C::writable_reg_to_reg(ctx, v29);
            // Rule at src\isa\s390x\inst.isle line 2970.
            return v32;
        }
        let v45 = C::u64_nonzero_hipart(ctx, arg1);
        if let Some(v46) = v45 {
            let v47 = C::u64_nonzero_lopart(ctx, arg1);
            if let Some(v48) = v47 {
                let v49 = constructor_imm(ctx, v26, v46);
                let v50 = constructor_insert_imm(ctx, v26, v49, v48);
                // Rule at src\isa\s390x\inst.isle line 2976.
                return v50;
            }
        }
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "imm", "src\\isa\\s390x\\inst.isle line 2931")
}

// Generated as internal constructor for term insert_imm.
pub fn constructor_insert_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u64,
) -> Reg {
    let v3 = C::uimm16shifted_from_u64(ctx, arg2);
    if let Some(v4) = v3 {
        let v5 = C::temp_writable_reg(ctx, arg0);
        let v6 = MInst::Insert64UImm16Shifted {
            rd: v5,
            ri: arg1,
            imm: v4,
        };
        let v7 = C::emit(ctx, &v6);
        let v8 = C::writable_reg_to_reg(ctx, v5);
        // Rule at src\isa\s390x\inst.isle line 2984.
        return v8;
    }
    let v9 = C::uimm32shifted_from_u64(ctx, arg2);
    if let Some(v10) = v9 {
        let v5 = C::temp_writable_reg(ctx, arg0);
        let v11 = MInst::Insert64UImm32Shifted {
            rd: v5,
            ri: arg1,
            imm: v10,
        };
        let v12 = C::emit(ctx, &v11);
        let v8 = C::writable_reg_to_reg(ctx, v5);
        // Rule at src\isa\s390x\inst.isle line 2990.
        return v8;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "insert_imm", "src\\isa\\s390x\\inst.isle line 2981")
}

// Generated as internal constructor for term imm32.
pub fn constructor_imm32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: i32,
) -> Reg {
    if arg0 == I64 {
        let v3 = C::temp_writable_reg(ctx, I64);
        let v4 = MInst::Mov64SImm32 {
            rd: v3,
            imm: arg1,
        };
        let v5 = C::emit(ctx, &v4);
        let v6 = C::writable_reg_to_reg(ctx, v3);
        // Rule at src\isa\s390x\inst.isle line 3018.
        return v6;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "imm32", "src\\isa\\s390x\\inst.isle line 3017")
}

// Generated as internal constructor for term vec_imm.
pub fn constructor_vec_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: u128,
) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        if arg1 == 0x0_u128 {
            let v5 = constructor_vec_imm_byte_mask(ctx, v2, 0x0_u16);
            // Rule at src\isa\s390x\inst.isle line 3025.
            return v5;
        }
        let v6 = C::u64_pair_split(ctx, arg1);
        if v6.0 == v6.1 {
            let v10 = constructor_vec_imm_splat(ctx, I64X2, v6.0);
            // Rule at src\isa\s390x\inst.isle line 3027.
            return v10;
        }
        let v11 = constructor_vec_load_const(ctx, v2, arg1);
        // Rule at src\isa\s390x\inst.isle line 3029.
        return v11;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_imm", "src\\isa\\s390x\\inst.isle line 3024")
}

// Generated as internal constructor for term vec_imm_splat.
pub fn constructor_vec_imm_splat<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: u64,
) -> Reg {
    let v6 = C::multi_lane(ctx, arg0);
    if let Some(v7) = v6 {
        match v7.0 {
            0x8_u32 => {
                let v10 = C::u64_as_i16(ctx, arg1);
                let v11 = constructor_vec_imm_replicate(ctx, arg0, v10);
                // Rule at src\isa\s390x\inst.isle line 3036.
                return v11;
            }
            0x10_u32 => {
                let v12 = C::u32_pair_split(ctx, arg1);
                let v21 = C::u16_pair_split(ctx, v12.1);
                let v24 = C::u8_pair_split(ctx, v21.1);
                if v24.0 == v24.1 {
                    let v28 = C::u8_as_u64(ctx, v24.0);
                    let v29 = constructor_vec_imm_splat(ctx, I8X16, v28);
                    // Rule at src\isa\s390x\inst.isle line 3044.
                    return v29;
                }
                let v10 = C::u64_as_i16(ctx, arg1);
                let v11 = constructor_vec_imm_replicate(ctx, arg0, v10);
                // Rule at src\isa\s390x\inst.isle line 3038.
                return v11;
            }
            0x20_u32 => {
                let v12 = C::u32_pair_split(ctx, arg1);
                let v21 = C::u16_pair_split(ctx, v12.1);
                if v21.0 == v21.1 {
                    let v31 = C::u16_as_u64(ctx, v21.0);
                    let v32 = constructor_vec_imm_splat(ctx, I16X8, v31);
                    // Rule at src\isa\s390x\inst.isle line 3046.
                    return v32;
                }
                let v15 = C::i16_from_u32(ctx, v12.1);
                if let Some(v16) = v15 {
                    let v17 = constructor_vec_imm_replicate(ctx, arg0, v16);
                    // Rule at src\isa\s390x\inst.isle line 3040.
                    return v17;
                }
            }
            0x40_u32 => {
                let v12 = C::u32_pair_split(ctx, arg1);
                if v12.0 == v12.1 {
                    let v34 = C::u32_as_u64(ctx, v12.0);
                    let v35 = constructor_vec_imm_splat(ctx, I32X4, v34);
                    // Rule at src\isa\s390x\inst.isle line 3048.
                    return v35;
                }
                let v18 = C::i16_from_u64(ctx, arg1);
                if let Some(v19) = v18 {
                    let v20 = constructor_vec_imm_replicate(ctx, arg0, v19);
                    // Rule at src\isa\s390x\inst.isle line 3042.
                    return v20;
                }
            }
            _ => {}
        }
    }
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        if arg1 == 0x0_u64 {
            let v5 = constructor_vec_imm_byte_mask(ctx, v2, 0x0_u16);
            // Rule at src\isa\s390x\inst.isle line 3034.
            return v5;
        }
        let v36 = constructor_vec_load_const_replicate(ctx, v2, arg1);
        // Rule at src\isa\s390x\inst.isle line 3050.
        return v36;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_imm_splat", "src\\isa\\s390x\\inst.isle line 3033")
}

// Generated as internal constructor for term ty_ext32.
pub fn constructor_ty_ext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> Type {
    match arg0 {
        I8 => {
            // Rule at src\isa\s390x\inst.isle line 3058.
            return I32;
        }
        I16 => {
            // Rule at src\isa\s390x\inst.isle line 3059.
            return I32;
        }
        I32 => {
            // Rule at src\isa\s390x\inst.isle line 3060.
            return I32;
        }
        I64 => {
            // Rule at src\isa\s390x\inst.isle line 3061.
            return I64;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "ty_ext32", "src\\isa\\s390x\\inst.isle line 3057")
}

// Generated as internal constructor for term ty_ext64.
pub fn constructor_ty_ext64<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> Type {
    match arg0 {
        I8 => {
            // Rule at src\isa\s390x\inst.isle line 3065.
            return I64;
        }
        I16 => {
            // Rule at src\isa\s390x\inst.isle line 3066.
            return I64;
        }
        I32 => {
            // Rule at src\isa\s390x\inst.isle line 3067.
            return I64;
        }
        I64 => {
            // Rule at src\isa\s390x\inst.isle line 3068.
            return I64;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "ty_ext64", "src\\isa\\s390x\\inst.isle line 3064")
}

// Generated as internal constructor for term zext32_reg.
pub fn constructor_zext32_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I32);
    let v4 = false;
    let v5 = C::ty_bits(ctx, arg0);
    let v7 = MInst::Extend {
        rd: v3,
        rn: arg1,
        signed: v4,
        from_bits: v5,
        to_bits: 0x20_u8,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\s390x\inst.isle line 3073.
    return v9;
}

// Generated as internal constructor for term sext32_reg.
pub fn constructor_sext32_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I32);
    let v4 = true;
    let v5 = C::ty_bits(ctx, arg0);
    let v7 = MInst::Extend {
        rd: v3,
        rn: arg1,
        signed: v4,
        from_bits: v5,
        to_bits: 0x20_u8,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\s390x\inst.isle line 3080.
    return v9;
}

// Generated as internal constructor for term zext64_reg.
pub fn constructor_zext64_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = false;
    let v5 = C::ty_bits(ctx, arg0);
    let v7 = MInst::Extend {
        rd: v3,
        rn: arg1,
        signed: v4,
        from_bits: v5,
        to_bits: 0x40_u8,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\s390x\inst.isle line 3087.
    return v9;
}

// Generated as internal constructor for term sext64_reg.
pub fn constructor_sext64_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = true;
    let v5 = C::ty_bits(ctx, arg0);
    let v7 = MInst::Extend {
        rd: v3,
        rn: arg1,
        signed: v4,
        from_bits: v5,
        to_bits: 0x40_u8,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\s390x\inst.isle line 3094.
    return v9;
}

// Generated as internal constructor for term zext32_mem.
pub fn constructor_zext32_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MemArg,
) -> Reg {
    match arg0 {
        I8 => {
            let v3 = C::temp_writable_reg(ctx, I32);
            let v4 = MInst::Load32ZExt8 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v5 = C::emit(ctx, &v4);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src\isa\s390x\inst.isle line 3102.
            return v6;
        }
        I16 => {
            let v3 = C::temp_writable_reg(ctx, I32);
            let v7 = MInst::Load32ZExt16 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v8 = C::emit(ctx, &v7);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src\isa\s390x\inst.isle line 3106.
            return v6;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "zext32_mem", "src\\isa\\s390x\\inst.isle line 3101")
}

// Generated as internal constructor for term sext32_mem.
pub fn constructor_sext32_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MemArg,
) -> Reg {
    match arg0 {
        I8 => {
            let v3 = C::temp_writable_reg(ctx, I32);
            let v4 = MInst::Load32SExt8 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v5 = C::emit(ctx, &v4);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src\isa\s390x\inst.isle line 3113.
            return v6;
        }
        I16 => {
            let v3 = C::temp_writable_reg(ctx, I32);
            let v7 = MInst::Load32SExt16 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v8 = C::emit(ctx, &v7);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src\isa\s390x\inst.isle line 3117.
            return v6;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "sext32_mem", "src\\isa\\s390x\\inst.isle line 3112")
}

// Generated as internal constructor for term zext64_mem.
pub fn constructor_zext64_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MemArg,
) -> Reg {
    match arg0 {
        I8 => {
            let v3 = C::temp_writable_reg(ctx, I64);
            let v4 = MInst::Load64ZExt8 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v5 = C::emit(ctx, &v4);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src\isa\s390x\inst.isle line 3124.
            return v6;
        }
        I16 => {
            let v3 = C::temp_writable_reg(ctx, I64);
            let v7 = MInst::Load64ZExt16 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v8 = C::emit(ctx, &v7);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src\isa\s390x\inst.isle line 3128.
            return v6;
        }
        I32 => {
            let v3 = C::temp_writable_reg(ctx, I64);
            let v9 = MInst::Load64ZExt32 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v10 = C::emit(ctx, &v9);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src\isa\s390x\inst.isle line 3132.
            return v6;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "zext64_mem", "src\\isa\\s390x\\inst.isle line 3123")
}

// Generated as internal constructor for term sext64_mem.
pub fn constructor_sext64_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MemArg,
) -> Reg {
    match arg0 {
        I8 => {
            let v3 = C::temp_writable_reg(ctx, I64);
            let v4 = MInst::Load64SExt8 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v5 = C::emit(ctx, &v4);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src\isa\s390x\inst.isle line 3139.
            return v6;
        }
        I16 => {
            let v3 = C::temp_writable_reg(ctx, I64);
            let v7 = MInst::Load64SExt16 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v8 = C::emit(ctx, &v7);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src\isa\s390x\inst.isle line 3143.
            return v6;
        }
        I32 => {
            let v3 = C::temp_writable_reg(ctx, I64);
            let v9 = MInst::Load64SExt32 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v10 = C::emit(ctx, &v9);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src\isa\s390x\inst.isle line 3147.
            return v6;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "sext64_mem", "src\\isa\\s390x\\inst.isle line 3138")
}

// Generated as internal constructor for term put_in_reg_zext32.
pub fn constructor_put_in_reg_zext32<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> Reg {
    let v2 = C::u64_from_value(ctx, arg0);
    if let Some(v3) = v2 {
        let v1 = C::value_type(ctx, arg0);
        let v4 = constructor_ty_ext32(ctx, v1);
        let v5 = constructor_imm(ctx, v4, v3);
        // Rule at src\isa\s390x\inst.isle line 3155.
        return v5;
    }
    let v1 = C::value_type(ctx, arg0);
    let v21 = C::ty_32_or_64(ctx, v1);
    if let Some(v22) = v21 {
        let v19 = C::put_in_reg(ctx, arg0);
        // Rule at src\isa\s390x\inst.isle line 3161.
        return v19;
    }
    let v6 = C::fits_in_16(ctx, v1);
    if let Some(v7) = v6 {
        let v8 = C::sinkable_inst(ctx, arg0);
        if let Some(v9) = v8 {
            let v10 = &C::inst_data_value(ctx, v9);
            if let &InstructionData::Load {
                opcode: ref v11,
                arg: v12,
                flags: v13,
                offset: v14,
            } = v10 {
                if let &Opcode::Load = v11 {
                    let v15 = C::bigendian(ctx, v13);
                    if let Some(v16) = v15 {
                        let v17 = &constructor_sink_load(ctx, v9);
                        let v18 = constructor_zext32_mem(ctx, v7, v17);
                        // Rule at src\isa\s390x\inst.isle line 3157.
                        return v18;
                    }
                }
            }
        }
        let v19 = C::put_in_reg(ctx, arg0);
        let v20 = constructor_zext32_reg(ctx, v7, v19);
        // Rule at src\isa\s390x\inst.isle line 3159.
        return v20;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "put_in_reg_zext32", "src\\isa\\s390x\\inst.isle line 3154")
}

// Generated as internal constructor for term put_in_reg_sext32.
pub fn constructor_put_in_reg_sext32<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> Reg {
    let v2 = C::u64_from_signed_value(ctx, arg0);
    if let Some(v3) = v2 {
        let v1 = C::value_type(ctx, arg0);
        let v4 = constructor_ty_ext32(ctx, v1);
        let v5 = constructor_imm(ctx, v4, v3);
        // Rule at src\isa\s390x\inst.isle line 3166.
        return v5;
    }
    let v1 = C::value_type(ctx, arg0);
    let v21 = C::ty_32_or_64(ctx, v1);
    if let Some(v22) = v21 {
        let v19 = C::put_in_reg(ctx, arg0);
        // Rule at src\isa\s390x\inst.isle line 3172.
        return v19;
    }
    let v6 = C::fits_in_16(ctx, v1);
    if let Some(v7) = v6 {
        let v8 = C::sinkable_inst(ctx, arg0);
        if let Some(v9) = v8 {
            let v10 = &C::inst_data_value(ctx, v9);
            if let &InstructionData::Load {
                opcode: ref v11,
                arg: v12,
                flags: v13,
                offset: v14,
            } = v10 {
                if let &Opcode::Load = v11 {
                    let v15 = C::bigendian(ctx, v13);
                    if let Some(v16) = v15 {
                        let v17 = &constructor_sink_load(ctx, v9);
                        let v18 = constructor_sext32_mem(ctx, v7, v17);
                        // Rule at src\isa\s390x\inst.isle line 3168.
                        return v18;
                    }
                }
            }
        }
        let v19 = C::put_in_reg(ctx, arg0);
        let v20 = constructor_sext32_reg(ctx, v7, v19);
        // Rule at src\isa\s390x\inst.isle line 3170.
        return v20;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "put_in_reg_sext32", "src\\isa\\s390x\\inst.isle line 3165")
}

// Generated as internal constructor for term put_in_reg_zext64.
pub fn constructor_put_in_reg_zext64<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> Reg {
    let v2 = C::u64_from_value(ctx, arg0);
    if let Some(v3) = v2 {
        let v1 = C::value_type(ctx, arg0);
        let v4 = constructor_ty_ext64(ctx, v1);
        let v5 = constructor_imm(ctx, v4, v3);
        // Rule at src\isa\s390x\inst.isle line 3177.
        return v5;
    }
    let v1 = C::value_type(ctx, arg0);
    let v21 = C::gpr64_ty(ctx, v1);
    if let Some(v22) = v21 {
        let v19 = C::put_in_reg(ctx, arg0);
        // Rule at src\isa\s390x\inst.isle line 3183.
        return v19;
    }
    let v6 = C::gpr32_ty(ctx, v1);
    if let Some(v7) = v6 {
        let v8 = C::sinkable_inst(ctx, arg0);
        if let Some(v9) = v8 {
            let v10 = &C::inst_data_value(ctx, v9);
            if let &InstructionData::Load {
                opcode: ref v11,
                arg: v12,
                flags: v13,
                offset: v14,
            } = v10 {
                if let &Opcode::Load = v11 {
                    let v15 = C::bigendian(ctx, v13);
                    if let Some(v16) = v15 {
                        let v17 = &constructor_sink_load(ctx, v9);
                        let v18 = constructor_zext64_mem(ctx, v7, v17);
                        // Rule at src\isa\s390x\inst.isle line 3179.
                        return v18;
                    }
                }
            }
        }
        let v19 = C::put_in_reg(ctx, arg0);
        let v20 = constructor_zext64_reg(ctx, v7, v19);
        // Rule at src\isa\s390x\inst.isle line 3181.
        return v20;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "put_in_reg_zext64", "src\\isa\\s390x\\inst.isle line 3176")
}

// Generated as internal constructor for term put_in_reg_sext64.
pub fn constructor_put_in_reg_sext64<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> Reg {
    let v2 = C::u64_from_signed_value(ctx, arg0);
    if let Some(v3) = v2 {
        let v1 = C::value_type(ctx, arg0);
        let v4 = constructor_ty_ext64(ctx, v1);
        let v5 = constructor_imm(ctx, v4, v3);
        // Rule at src\isa\s390x\inst.isle line 3188.
        return v5;
    }
    let v1 = C::value_type(ctx, arg0);
    let v21 = C::gpr64_ty(ctx, v1);
    if let Some(v22) = v21 {
        let v19 = C::put_in_reg(ctx, arg0);
        // Rule at src\isa\s390x\inst.isle line 3194.
        return v19;
    }
    let v6 = C::gpr32_ty(ctx, v1);
    if let Some(v7) = v6 {
        let v8 = C::sinkable_inst(ctx, arg0);
        if let Some(v9) = v8 {
            let v10 = &C::inst_data_value(ctx, v9);
            if let &InstructionData::Load {
                opcode: ref v11,
                arg: v12,
                flags: v13,
                offset: v14,
            } = v10 {
                if let &Opcode::Load = v11 {
                    let v15 = C::bigendian(ctx, v13);
                    if let Some(v16) = v15 {
                        let v17 = &constructor_sink_load(ctx, v9);
                        let v18 = constructor_sext64_mem(ctx, v7, v17);
                        // Rule at src\isa\s390x\inst.isle line 3190.
                        return v18;
                    }
                }
            }
        }
        let v19 = C::put_in_reg(ctx, arg0);
        let v20 = constructor_sext64_reg(ctx, v7, v19);
        // Rule at src\isa\s390x\inst.isle line 3192.
        return v20;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "put_in_reg_sext64", "src\\isa\\s390x\\inst.isle line 3187")
}

// Generated as internal constructor for term cmov_imm.
pub fn constructor_cmov_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Cond,
    arg2: i16,
    arg3: Reg,
) -> ConsumesFlags {
    let v10 = C::gpr64_ty(ctx, arg0);
    if let Some(v11) = v10 {
        let v12 = C::temp_writable_reg(ctx, v11);
        let v13 = MInst::CMov64SImm16 {
            rd: v12,
            cond: arg1.clone(),
            ri: arg3,
            imm: arg2,
        };
        let v14 = C::writable_reg_to_reg(ctx, v12);
        let v15 = ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: v13,
            result: v14,
        };
        // Rule at src\isa\s390x\inst.isle line 3206.
        return v15;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = C::temp_writable_reg(ctx, v2);
        let v7 = MInst::CMov32SImm16 {
            rd: v6,
            cond: arg1.clone(),
            ri: arg3,
            imm: arg2,
        };
        let v8 = C::writable_reg_to_reg(ctx, v6);
        let v9 = ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: v7,
            result: v8,
        };
        // Rule at src\isa\s390x\inst.isle line 3202.
        return v9;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "cmov_imm", "src\\isa\\s390x\\inst.isle line 3201")
}

// Generated as internal constructor for term cmov_imm_imm.
pub fn constructor_cmov_imm_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Cond,
    arg2: i16,
    arg3: i16,
) -> ConsumesFlags {
    let v14 = C::gpr64_ty(ctx, arg0);
    if let Some(v15) = v14 {
        let v16 = C::temp_writable_reg(ctx, v15);
        let v17 = C::temp_writable_reg(ctx, v15);
        let v21 = C::writable_reg_to_reg(ctx, v17);
        let v22 = C::value_reg(ctx, v21);
        let v18 = MInst::Mov64SImm16 {
            rd: v16,
            imm: arg3,
        };
        let v19 = C::writable_reg_to_reg(ctx, v16);
        let v20 = MInst::CMov64SImm16 {
            rd: v17,
            cond: arg1.clone(),
            ri: v19,
            imm: arg2,
        };
        let v23 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
            inst1: v18,
            inst2: v20,
            result: v22,
        };
        // Rule at src\isa\s390x\inst.isle line 3220.
        return v23;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = C::temp_writable_reg(ctx, v2);
        let v7 = C::temp_writable_reg(ctx, v2);
        let v11 = C::writable_reg_to_reg(ctx, v7);
        let v12 = C::value_reg(ctx, v11);
        let v8 = MInst::Mov32SImm16 {
            rd: v6,
            imm: arg3,
        };
        let v9 = C::writable_reg_to_reg(ctx, v6);
        let v10 = MInst::CMov32SImm16 {
            rd: v7,
            cond: arg1.clone(),
            ri: v9,
            imm: arg2,
        };
        let v13 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
            inst1: v8,
            inst2: v10,
            result: v12,
        };
        // Rule at src\isa\s390x\inst.isle line 3213.
        return v13;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "cmov_imm_imm", "src\\isa\\s390x\\inst.isle line 3212")
}

// Generated as internal constructor for term cmov_reg_reg.
pub fn constructor_cmov_reg_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Cond,
    arg2: Reg,
    arg3: Reg,
) -> ConsumesFlags {
    match arg0 {
        F16 => {
            let v17 = C::temp_writable_reg(ctx, F16);
            let v18 = MInst::FpuCMov32 {
                rd: v17,
                cond: arg1.clone(),
                ri: arg3,
                rm: arg2,
            };
            let v19 = C::writable_reg_to_reg(ctx, v17);
            let v20 = ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: v18,
                result: v19,
            };
            // Rule at src\isa\s390x\inst.isle line 3238.
            return v20;
        }
        F32 => {
            let v22 = C::temp_writable_reg(ctx, F32);
            let v23 = MInst::FpuCMov32 {
                rd: v22,
                cond: arg1.clone(),
                ri: arg3,
                rm: arg2,
            };
            let v24 = C::writable_reg_to_reg(ctx, v22);
            let v25 = ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: v23,
                result: v24,
            };
            // Rule at src\isa\s390x\inst.isle line 3242.
            return v25;
        }
        F64 => {
            let v27 = C::temp_writable_reg(ctx, F64);
            let v28 = MInst::FpuCMov64 {
                rd: v27,
                cond: arg1.clone(),
                ri: arg3,
                rm: arg2,
            };
            let v29 = C::writable_reg_to_reg(ctx, v27);
            let v30 = ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: v28,
                result: v29,
            };
            // Rule at src\isa\s390x\inst.isle line 3246.
            return v30;
        }
        _ => {}
    }
    let v10 = C::gpr64_ty(ctx, arg0);
    if let Some(v11) = v10 {
        let v12 = C::temp_writable_reg(ctx, v11);
        let v13 = MInst::CMov64 {
            rd: v12,
            cond: arg1.clone(),
            ri: arg3,
            rm: arg2,
        };
        let v14 = C::writable_reg_to_reg(ctx, v12);
        let v15 = ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: v13,
            result: v14,
        };
        // Rule at src\isa\s390x\inst.isle line 3234.
        return v15;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = C::temp_writable_reg(ctx, v2);
        let v7 = MInst::CMov32 {
            rd: v6,
            cond: arg1.clone(),
            ri: arg3,
            rm: arg2,
        };
        let v8 = C::writable_reg_to_reg(ctx, v6);
        let v9 = ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: v7,
            result: v8,
        };
        // Rule at src\isa\s390x\inst.isle line 3230.
        return v9;
    }
    let v31 = C::vr128_ty(ctx, arg0);
    if let Some(v32) = v31 {
        let v27 = C::temp_writable_reg(ctx, F64);
        let v33 = MInst::VecCMov {
            rd: v27,
            cond: arg1.clone(),
            ri: arg3,
            rm: arg2,
        };
        let v29 = C::writable_reg_to_reg(ctx, v27);
        let v34 = ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: v33,
            result: v29,
        };
        // Rule at src\isa\s390x\inst.isle line 3250.
        return v34;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "cmov_reg_reg", "src\\isa\\s390x\\inst.isle line 3229")
}

// Generated as internal constructor for term trap_if.
pub fn constructor_trap_if<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &Cond,
    arg2: &TrapCode,
) -> Reg {
    let v3 = &constructor_trap_if_impl(ctx, arg1, arg2);
    let v4 = &constructor_with_flags_side_effect(ctx, arg0, v3);
    let v5 = constructor_side_effect(ctx, v4);
    let v6 = C::invalid_reg(ctx);
    // Rule at src\isa\s390x\inst.isle line 3259.
    return v6;
}

// Generated as internal constructor for term icmps_reg_and_trap.
pub fn constructor_icmps_reg_and_trap<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: &Cond,
    arg4: &TrapCode,
) -> Reg {
    let v5 = &constructor_cmpop_cmps(ctx, arg0);
    let v6 = MInst::CmpTrapRR {
        op: v5.clone(),
        rn: arg1,
        rm: arg2,
        cond: arg3.clone(),
        trap_code: arg4.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::invalid_reg(ctx);
    // Rule at src\isa\s390x\inst.isle line 3265.
    return v8;
}

// Generated as internal constructor for term icmps_simm16_and_trap.
pub fn constructor_icmps_simm16_and_trap<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: i16,
    arg3: &Cond,
    arg4: &TrapCode,
) -> Reg {
    let v5 = &constructor_cmpop_cmps(ctx, arg0);
    let v6 = MInst::CmpTrapRSImm16 {
        op: v5.clone(),
        rn: arg1,
        imm: arg2,
        cond: arg3.clone(),
        trap_code: arg4.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::invalid_reg(ctx);
    // Rule at src\isa\s390x\inst.isle line 3271.
    return v8;
}

// Generated as internal constructor for term icmpu_reg_and_trap.
pub fn constructor_icmpu_reg_and_trap<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: &Cond,
    arg4: &TrapCode,
) -> Reg {
    let v5 = &constructor_cmpop_cmpu(ctx, arg0);
    let v6 = MInst::CmpTrapRR {
        op: v5.clone(),
        rn: arg1,
        rm: arg2,
        cond: arg3.clone(),
        trap_code: arg4.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::invalid_reg(ctx);
    // Rule at src\isa\s390x\inst.isle line 3277.
    return v8;
}

// Generated as internal constructor for term icmpu_uimm16_and_trap.
pub fn constructor_icmpu_uimm16_and_trap<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u16,
    arg3: &Cond,
    arg4: &TrapCode,
) -> Reg {
    let v5 = &constructor_cmpop_cmpu(ctx, arg0);
    let v6 = MInst::CmpTrapRUImm16 {
        op: v5.clone(),
        rn: arg1,
        imm: arg2,
        cond: arg3.clone(),
        trap_code: arg4.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::invalid_reg(ctx);
    // Rule at src\isa\s390x\inst.isle line 3283.
    return v8;
}

// Generated as internal constructor for term trap_impl.
pub fn constructor_trap_impl<C: Context>(
    ctx: &mut C,
    arg0: &TrapCode,
) -> SideEffectNoResult {
    let v1 = MInst::Trap {
        trap_code: arg0.clone(),
    };
    let v2 = SideEffectNoResult::Inst {
        inst: v1,
    };
    // Rule at src\isa\s390x\inst.isle line 3289.
    return v2;
}

// Generated as internal constructor for term trap_if_impl.
pub fn constructor_trap_if_impl<C: Context>(
    ctx: &mut C,
    arg0: &Cond,
    arg1: &TrapCode,
) -> ConsumesFlags {
    let v2 = MInst::TrapIf {
        cond: arg0.clone(),
        trap_code: arg1.clone(),
    };
    let v3 = ConsumesFlags::ConsumesFlagsSideEffect {
        inst: v2,
    };
    // Rule at src\isa\s390x\inst.isle line 3293.
    return v3;
}

// Generated as internal constructor for term debugtrap_impl.
pub fn constructor_debugtrap_impl<C: Context>(
    ctx: &mut C,
) -> SideEffectNoResult {
    let v1 = SideEffectNoResult::Inst {
        inst: MInst::Debugtrap,
    };
    // Rule at src\isa\s390x\inst.isle line 3297.
    return v1;
}

// Generated as internal constructor for term bool.
pub fn constructor_bool<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &Cond,
) -> ProducesBool {
    let v2 = ProducesBool::ProducesBool {
        producer: arg0.clone(),
        cond: arg1.clone(),
    };
    // Rule at src\isa\s390x\inst.isle line 3308.
    return v2;
}

// Generated as internal constructor for term invert_bool.
pub fn constructor_invert_bool<C: Context>(
    ctx: &mut C,
    arg0: &ProducesBool,
) -> ProducesBool {
    if let &ProducesBool::ProducesBool {
        producer: ref v1,
        cond: ref v2,
    } = arg0 {
        let v3 = &C::invert_cond(ctx, v2);
        let v4 = &constructor_bool(ctx, v1, v3);
        // Rule at src\isa\s390x\inst.isle line 3312.
        return v4.clone();
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "invert_bool", "src\\isa\\s390x\\inst.isle line 3311")
}

// Generated as internal constructor for term select_bool_reg.
pub fn constructor_select_bool_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ProducesBool,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    if let &ProducesBool::ProducesBool {
        producer: ref v2,
        cond: ref v3,
    } = arg1 {
        let v6 = &constructor_cmov_reg_reg(ctx, arg0, v3, arg2, arg3);
        let v7 = constructor_with_flags_reg(ctx, v2, v6);
        // Rule at src\isa\s390x\inst.isle line 3317.
        return v7;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "select_bool_reg", "src\\isa\\s390x\\inst.isle line 3316")
}

// Generated as internal constructor for term select_bool_imm.
pub fn constructor_select_bool_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ProducesBool,
    arg2: i16,
    arg3: i16,
) -> Reg {
    if let &ProducesBool::ProducesBool {
        producer: ref v2,
        cond: ref v3,
    } = arg1 {
        let v6 = &constructor_cmov_imm_imm(ctx, arg0, v3, arg2, arg3);
        let v7 = constructor_with_flags_reg(ctx, v2, v6);
        // Rule at src\isa\s390x\inst.isle line 3322.
        return v7;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "select_bool_imm", "src\\isa\\s390x\\inst.isle line 3321")
}

// Generated as internal constructor for term lower_bool.
pub fn constructor_lower_bool<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ProducesBool,
) -> Reg {
    if arg0 == I8 {
        let v5 = constructor_select_bool_imm(ctx, I8, arg1, 1_i16, 0_i16);
        // Rule at src\isa\s390x\inst.isle line 3328.
        return v5;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "lower_bool", "src\\isa\\s390x\\inst.isle line 3327")
}

// Generated as internal constructor for term lower_bool_to_mask.
pub fn constructor_lower_bool_to_mask<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ProducesBool,
) -> Reg {
    if arg0 == I128 {
        let v8 = constructor_lower_bool_to_mask(ctx, I64, arg1);
        let v10 = constructor_mov_to_vec128(ctx, I128, v8, v8);
        // Rule at src\isa\s390x\inst.isle line 3335.
        return v10;
    }
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_select_bool_imm(ctx, v2, arg1, -1_i16, 0_i16);
        // Rule at src\isa\s390x\inst.isle line 3332.
        return v6;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "lower_bool_to_mask", "src\\isa\\s390x\\inst.isle line 3331")
}

// Generated as internal constructor for term cond_br_bool.
pub fn constructor_cond_br_bool<C: Context>(
    ctx: &mut C,
    arg0: &ProducesBool,
    arg1: MachLabel,
    arg2: MachLabel,
) -> SideEffectNoResult {
    if let &ProducesBool::ProducesBool {
        producer: ref v1,
        cond: ref v2,
    } = arg0 {
        let v5 = &constructor_cond_br(ctx, arg1, arg2, v2);
        let v6 = &constructor_with_flags_side_effect(ctx, v1, v5);
        // Rule at src\isa\s390x\inst.isle line 3341.
        return v6.clone();
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "cond_br_bool", "src\\isa\\s390x\\inst.isle line 3340")
}

// Generated as internal constructor for term trap_if_bool.
pub fn constructor_trap_if_bool<C: Context>(
    ctx: &mut C,
    arg0: &ProducesBool,
    arg1: &TrapCode,
) -> SideEffectNoResult {
    if let &ProducesBool::ProducesBool {
        producer: ref v1,
        cond: ref v2,
    } = arg0 {
        let v4 = &constructor_trap_if_impl(ctx, v2, arg1);
        let v5 = &constructor_with_flags_side_effect(ctx, v1, v4);
        // Rule at src\isa\s390x\inst.isle line 3346.
        return v5.clone();
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "trap_if_bool", "src\\isa\\s390x\\inst.isle line 3345")
}

// Generated as internal constructor for term casloop_val_reg.
pub fn constructor_casloop_val_reg<C: Context>(
    ctx: &mut C,
) -> WritableReg {
    let v1 = C::writable_gpr(ctx, 0x0_u8);
    // Rule at src\isa\s390x\inst.isle line 3359.
    return v1;
}

// Generated as internal constructor for term casloop_tmp_reg.
pub fn constructor_casloop_tmp_reg<C: Context>(
    ctx: &mut C,
) -> WritableReg {
    let v1 = C::writable_gpr(ctx, 0x1_u8);
    // Rule at src\isa\s390x\inst.isle line 3363.
    return v1;
}

// Generated as internal constructor for term casloop_emit.
pub fn constructor_casloop_emit<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: Reg,
    arg4: Reg,
) -> PReg {
    let v7 = &C::memarg_reg_plus_off(ctx, arg3, 0_i64, 0x0_u8, arg2);
    let v8 = constructor_ty_ext32(ctx, arg1);
    let v9 = constructor_casloop_val_reg(ctx);
    let v10 = constructor_push_atomic_cas(ctx, arg0, v8, v9, arg4, v7);
    let v11 = constructor_ty_ext32(ctx, arg1);
    let v12 = constructor_casloop_val_reg(ctx);
    let v13 = constructor_emit_load(ctx, v11, v12, v7);
    let v15 = &C::intcc_as_cond(ctx, &IntCC::NotEqual);
    let v16 = constructor_emit_loop(ctx, arg0, v15);
    let v17 = C::preg_gpr_0(ctx);
    // Rule at src\isa\s390x\inst.isle line 3372.
    return v17;
}

// Generated as internal constructor for term casloop_result.
pub fn constructor_casloop_result<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: PReg,
) -> Reg {
    let v1 = C::ty_32_or_64(ctx, arg0);
    if let Some(v2) = v1 {
        let v4 = C::bigendian(ctx, arg1);
        if let Some(v5) = v4 {
            let v7 = constructor_mov_preg(ctx, arg2);
            // Rule at src\isa\s390x\inst.isle line 3395.
            return v7;
        }
        let v8 = C::littleendian(ctx, arg1);
        if let Some(v9) = v8 {
            let v10 = C::preg_to_reg(ctx, arg2);
            let v11 = constructor_bswap_reg(ctx, v2, v10);
            // Rule at src\isa\s390x\inst.isle line 3397.
            return v11;
        }
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "casloop_result", "src\\isa\\s390x\\inst.isle line 3394")
}

// Generated as internal constructor for term casloop.
pub fn constructor_casloop<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    let v5 = constructor_casloop_emit(ctx, arg0, arg1, arg2, arg3, arg4);
    let v6 = constructor_casloop_result(ctx, arg1, arg2, v5);
    // Rule at src\isa\s390x\inst.isle line 3402.
    return v6;
}

// Generated as internal constructor for term casloop_bitshift.
pub fn constructor_casloop_bitshift<C: Context>(
    ctx: &mut C,
    arg0: Reg,
) -> Reg {
    let v3 = constructor_lshl_imm(ctx, I32, arg0, 0x3_u8);
    // Rule at src\isa\s390x\inst.isle line 3417.
    return v3;
}

// Generated as internal constructor for term casloop_aligned_addr.
pub fn constructor_casloop_aligned_addr<C: Context>(
    ctx: &mut C,
    arg0: Reg,
) -> Reg {
    let v4 = C::uimm16shifted(ctx, 0xfffc_u16, 0x0_u8);
    let v5 = constructor_and_uimm16shifted(ctx, I64, arg0, v4);
    // Rule at src\isa\s390x\inst.isle line 3422.
    return v5;
}

// Generated as internal constructor for term casloop_rotate_in.
pub fn constructor_casloop_rotate_in<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    match arg1 {
        I8 => {
            let v6 = constructor_casloop_tmp_reg(ctx);
            let v8 = constructor_push_rot_imm_reg(ctx, arg0, I32, v6, arg4, 0x0_u8, arg3);
            // Rule at src\isa\s390x\inst.isle line 3432.
            return v8;
        }
        I16 => {
            let v9 = C::bigendian(ctx, arg2);
            if let Some(v10) = v9 {
                let v6 = constructor_casloop_tmp_reg(ctx);
                let v8 = constructor_push_rot_imm_reg(ctx, arg0, I32, v6, arg4, 0x0_u8, arg3);
                // Rule at src\isa\s390x\inst.isle line 3434.
                return v8;
            }
            let v11 = C::littleendian(ctx, arg2);
            if let Some(v12) = v11 {
                let v6 = constructor_casloop_tmp_reg(ctx);
                let v14 = constructor_push_rot_imm_reg(ctx, arg0, I32, v6, arg4, 0x10_u8, arg3);
                // Rule at src\isa\s390x\inst.isle line 3436.
                return v14;
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "casloop_rotate_in", "src\\isa\\s390x\\inst.isle line 3431")
}

// Generated as internal constructor for term casloop_rotate_out.
pub fn constructor_casloop_rotate_out<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    match arg1 {
        I8 => {
            let v6 = constructor_casloop_tmp_reg(ctx);
            let v8 = constructor_neg_reg(ctx, I32, arg3);
            let v9 = constructor_push_rot_imm_reg(ctx, arg0, I32, v6, arg4, 0x0_u8, v8);
            // Rule at src\isa\s390x\inst.isle line 3445.
            return v9;
        }
        I16 => {
            let v10 = C::bigendian(ctx, arg2);
            if let Some(v11) = v10 {
                let v6 = constructor_casloop_tmp_reg(ctx);
                let v12 = constructor_push_rot_imm_reg(ctx, arg0, I32, v6, arg4, 0x0_u8, arg3);
                // Rule at src\isa\s390x\inst.isle line 3447.
                return v12;
            }
            let v13 = C::littleendian(ctx, arg2);
            if let Some(v14) = v13 {
                let v6 = constructor_casloop_tmp_reg(ctx);
                let v16 = constructor_push_rot_imm_reg(ctx, arg0, I32, v6, arg4, 0x10_u8, arg3);
                // Rule at src\isa\s390x\inst.isle line 3449.
                return v16;
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "casloop_rotate_out", "src\\isa\\s390x\\inst.isle line 3444")
}

// Generated as internal constructor for term casloop_rotate_result.
pub fn constructor_casloop_rotate_result<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    match arg0 {
        I8 => {
            let v6 = constructor_rot_imm_reg(ctx, I32, arg3, 0x8_u8, arg2);
            // Rule at src\isa\s390x\inst.isle line 3460.
            return v6;
        }
        I16 => {
            let v7 = C::bigendian(ctx, arg1);
            if let Some(v8) = v7 {
                let v10 = constructor_rot_imm_reg(ctx, I32, arg3, 0x10_u8, arg2);
                // Rule at src\isa\s390x\inst.isle line 3462.
                return v10;
            }
            let v11 = C::littleendian(ctx, arg1);
            if let Some(v12) = v11 {
                let v13 = constructor_rot_reg(ctx, I32, arg3, arg2);
                let v14 = constructor_bswap_reg(ctx, I32, v13);
                // Rule at src\isa\s390x\inst.isle line 3464.
                return v14;
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "casloop_rotate_result", "src\\isa\\s390x\\inst.isle line 3459")
}

// Generated as internal constructor for term casloop_subword.
pub fn constructor_casloop_subword<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: Reg,
    arg4: Reg,
    arg5: Reg,
) -> Reg {
    let v6 = constructor_casloop_emit(ctx, arg0, arg1, arg2, arg3, arg5);
    let v7 = C::preg_to_reg(ctx, v6);
    let v8 = constructor_casloop_rotate_result(ctx, arg1, arg2, arg4, v7);
    // Rule at src\isa\s390x\inst.isle line 3469.
    return v8;
}

// Generated as internal constructor for term writable_link_reg.
pub fn constructor_writable_link_reg<C: Context>(
    ctx: &mut C,
) -> WritableReg {
    let v1 = C::writable_gpr(ctx, 0xe_u8);
    // Rule at src\isa\s390x\inst.isle line 3513.
    return v1;
}

// Generated as internal constructor for term abi_call.
pub fn constructor_abi_call<C: Context>(
    ctx: &mut C,
    arg0: Sig,
    arg1: &CallInstDest,
    arg2: &CallArgList,
) -> InstOutput {
    let v3 = C::abi_call_site_info(ctx, arg0, arg1, arg2);
    let v4 = constructor_abi_call_impl(ctx, v3);
    // Rule at src\isa\s390x\inst.isle line 3516.
    return v4;
}

// Generated as internal constructor for term abi_call_impl.
pub fn constructor_abi_call_impl<C: Context>(
    ctx: &mut C,
    arg0: CallSiteInfo,
) -> InstOutput {
    let v4 = constructor_writable_link_reg(ctx);
    let v1 = C::call_site_info_split(ctx, arg0);
    let v5 = &constructor_call_impl(ctx, v4, v1.0);
    let v6 = constructor_emit_side_effect(ctx, v5);
    // Rule at src\isa\s390x\inst.isle line 3519.
    return v1.1;
}

// Generated as internal constructor for term abi_return_call.
pub fn constructor_abi_return_call<C: Context>(
    ctx: &mut C,
    arg0: Sig,
    arg1: &CallInstDest,
    arg2: &CallArgList,
) -> SideEffectNoResult {
    let v3 = C::abi_return_call_info(ctx, arg0, arg1, arg2);
    let v4 = &constructor_return_call_impl(ctx, v3);
    // Rule at src\isa\s390x\inst.isle line 3524.
    return v4.clone();
}

// Generated as internal constructor for term abi_try_call.
pub fn constructor_abi_try_call<C: Context>(
    ctx: &mut C,
    arg0: Sig,
    arg1: &CallInstDest,
    arg2: &CallArgList,
    arg3: ExceptionTable,
    arg4: &MachLabelSlice,
) -> SideEffectNoResult {
    let v5 = constructor_writable_link_reg(ctx);
    let v6 = C::abi_try_call_info(ctx, arg0, arg1, arg2, arg3, arg4);
    let v7 = &constructor_call_impl(ctx, v5, v6);
    // Rule at src\isa\s390x\inst.isle line 3528.
    return v7.clone();
}

// Generated as internal constructor for term vec_widen_type.
pub fn constructor_vec_widen_type<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> Type {
    match arg0 {
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 3538.
            return I16X8;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 3539.
            return I32X4;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 3540.
            return I64X2;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_widen_type", "src\\isa\\s390x\\inst.isle line 3537")
}

// Generated as internal constructor for term vecop_pack.
pub fn constructor_vecop_pack<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> VecBinaryOp {
    match arg0 {
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 3543.
            return VecBinaryOp::Pack16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 3544.
            return VecBinaryOp::Pack32x4;
        }
        I64X2 => {
            // Rule at src\isa\s390x\inst.isle line 3545.
            return VecBinaryOp::Pack64x2;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vecop_pack", "src\\isa\\s390x\\inst.isle line 3542")
}

// Generated as internal constructor for term vec_pack.
pub fn constructor_vec_pack<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_vecop_pack(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3548.
    return v4;
}

// Generated as internal constructor for term vecop_pack_ssat.
pub fn constructor_vecop_pack_ssat<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> VecBinaryOp {
    match arg0 {
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 3551.
            return VecBinaryOp::PackSSat16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 3552.
            return VecBinaryOp::PackSSat32x4;
        }
        I64X2 => {
            // Rule at src\isa\s390x\inst.isle line 3553.
            return VecBinaryOp::PackSSat64x2;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vecop_pack_ssat", "src\\isa\\s390x\\inst.isle line 3550")
}

// Generated as internal constructor for term vec_pack_ssat.
pub fn constructor_vec_pack_ssat<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_vecop_pack_ssat(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3556.
    return v4;
}

// Generated as internal constructor for term vecop_pack_usat.
pub fn constructor_vecop_pack_usat<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> VecBinaryOp {
    match arg0 {
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 3559.
            return VecBinaryOp::PackUSat16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 3560.
            return VecBinaryOp::PackUSat32x4;
        }
        I64X2 => {
            // Rule at src\isa\s390x\inst.isle line 3561.
            return VecBinaryOp::PackUSat64x2;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vecop_pack_usat", "src\\isa\\s390x\\inst.isle line 3558")
}

// Generated as internal constructor for term vec_pack_usat.
pub fn constructor_vec_pack_usat<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_vecop_pack_usat(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3564.
    return v4;
}

// Generated as internal constructor for term vecop_unpacks_low.
pub fn constructor_vecop_unpacks_low<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> VecUnaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 3567.
            return VecUnaryOp::UnpackSLow8x16;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 3568.
            return VecUnaryOp::UnpackSLow16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 3569.
            return VecUnaryOp::UnpackSLow32x4;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vecop_unpacks_low", "src\\isa\\s390x\\inst.isle line 3566")
}

// Generated as internal constructor for term vec_unpacks_low.
pub fn constructor_vec_unpacks_low<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v2 = &constructor_vecop_unpacks_low(ctx, arg0);
    let v3 = constructor_vec_rr(ctx, arg0, v2, arg1);
    // Rule at src\isa\s390x\inst.isle line 3572.
    return v3;
}

// Generated as internal constructor for term vecop_unpacks_high.
pub fn constructor_vecop_unpacks_high<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> VecUnaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 3575.
            return VecUnaryOp::UnpackSHigh8x16;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 3576.
            return VecUnaryOp::UnpackSHigh16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 3577.
            return VecUnaryOp::UnpackSHigh32x4;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vecop_unpacks_high", "src\\isa\\s390x\\inst.isle line 3574")
}

// Generated as internal constructor for term vec_unpacks_high.
pub fn constructor_vec_unpacks_high<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v2 = &constructor_vecop_unpacks_high(ctx, arg0);
    let v3 = constructor_vec_rr(ctx, arg0, v2, arg1);
    // Rule at src\isa\s390x\inst.isle line 3580.
    return v3;
}

// Generated as internal constructor for term vecop_unpacku_low.
pub fn constructor_vecop_unpacku_low<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> VecUnaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 3583.
            return VecUnaryOp::UnpackULow8x16;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 3584.
            return VecUnaryOp::UnpackULow16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 3585.
            return VecUnaryOp::UnpackULow32x4;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vecop_unpacku_low", "src\\isa\\s390x\\inst.isle line 3582")
}

// Generated as internal constructor for term vec_unpacku_low.
pub fn constructor_vec_unpacku_low<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v2 = &constructor_vecop_unpacku_low(ctx, arg0);
    let v3 = constructor_vec_rr(ctx, arg0, v2, arg1);
    // Rule at src\isa\s390x\inst.isle line 3588.
    return v3;
}

// Generated as internal constructor for term vecop_unpacku_high.
pub fn constructor_vecop_unpacku_high<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> VecUnaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 3591.
            return VecUnaryOp::UnpackUHigh8x16;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 3592.
            return VecUnaryOp::UnpackUHigh16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 3593.
            return VecUnaryOp::UnpackUHigh32x4;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vecop_unpacku_high", "src\\isa\\s390x\\inst.isle line 3590")
}

// Generated as internal constructor for term vec_unpacku_high.
pub fn constructor_vec_unpacku_high<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v2 = &constructor_vecop_unpacku_high(ctx, arg0);
    let v3 = constructor_vec_rr(ctx, arg0, v2, arg1);
    // Rule at src\isa\s390x\inst.isle line 3596.
    return v3;
}

// Generated as internal constructor for term vec_pack_lane_order.
pub fn constructor_vec_pack_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &C::lane_order(ctx);
    match v3 {
        &LaneOrder::LittleEndian => {
            let v5 = constructor_vec_pack(ctx, arg0, arg2, arg1);
            // Rule at src\isa\s390x\inst.isle line 3607.
            return v5;
        }
        &LaneOrder::BigEndian => {
            let v4 = constructor_vec_pack(ctx, arg0, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 3604.
            return v4;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_pack_lane_order", "src\\isa\\s390x\\inst.isle line 3603")
}

// Generated as internal constructor for term vec_pack_ssat_lane_order.
pub fn constructor_vec_pack_ssat_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &C::lane_order(ctx);
    match v3 {
        &LaneOrder::LittleEndian => {
            let v5 = constructor_vec_pack_ssat(ctx, arg0, arg2, arg1);
            // Rule at src\isa\s390x\inst.isle line 3615.
            return v5;
        }
        &LaneOrder::BigEndian => {
            let v4 = constructor_vec_pack_ssat(ctx, arg0, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 3612.
            return v4;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_pack_ssat_lane_order", "src\\isa\\s390x\\inst.isle line 3611")
}

// Generated as internal constructor for term vec_pack_usat_lane_order.
pub fn constructor_vec_pack_usat_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &C::lane_order(ctx);
    match v3 {
        &LaneOrder::LittleEndian => {
            let v5 = constructor_vec_pack_usat(ctx, arg0, arg2, arg1);
            // Rule at src\isa\s390x\inst.isle line 3623.
            return v5;
        }
        &LaneOrder::BigEndian => {
            let v4 = constructor_vec_pack_usat(ctx, arg0, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 3620.
            return v4;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_pack_usat_lane_order", "src\\isa\\s390x\\inst.isle line 3619")
}

// Generated as internal constructor for term vec_unpacks_low_lane_order.
pub fn constructor_vec_unpacks_low_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v2 = &C::lane_order(ctx);
    match v2 {
        &LaneOrder::LittleEndian => {
            let v4 = constructor_vec_unpacks_low(ctx, arg0, arg1);
            // Rule at src\isa\s390x\inst.isle line 3636.
            return v4;
        }
        &LaneOrder::BigEndian => {
            let v3 = constructor_vec_unpacks_high(ctx, arg0, arg1);
            // Rule at src\isa\s390x\inst.isle line 3633.
            return v3;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_unpacks_low_lane_order", "src\\isa\\s390x\\inst.isle line 3632")
}

// Generated as internal constructor for term vec_unpacks_high_lane_order.
pub fn constructor_vec_unpacks_high_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v2 = &C::lane_order(ctx);
    match v2 {
        &LaneOrder::LittleEndian => {
            let v4 = constructor_vec_unpacks_high(ctx, arg0, arg1);
            // Rule at src\isa\s390x\inst.isle line 3644.
            return v4;
        }
        &LaneOrder::BigEndian => {
            let v3 = constructor_vec_unpacks_low(ctx, arg0, arg1);
            // Rule at src\isa\s390x\inst.isle line 3641.
            return v3;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_unpacks_high_lane_order", "src\\isa\\s390x\\inst.isle line 3640")
}

// Generated as internal constructor for term vec_unpacku_low_lane_order.
pub fn constructor_vec_unpacku_low_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v2 = &C::lane_order(ctx);
    match v2 {
        &LaneOrder::LittleEndian => {
            let v4 = constructor_vec_unpacku_low(ctx, arg0, arg1);
            // Rule at src\isa\s390x\inst.isle line 3652.
            return v4;
        }
        &LaneOrder::BigEndian => {
            let v3 = constructor_vec_unpacku_high(ctx, arg0, arg1);
            // Rule at src\isa\s390x\inst.isle line 3649.
            return v3;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_unpacku_low_lane_order", "src\\isa\\s390x\\inst.isle line 3648")
}

// Generated as internal constructor for term vec_unpacku_high_lane_order.
pub fn constructor_vec_unpacku_high_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v2 = &C::lane_order(ctx);
    match v2 {
        &LaneOrder::LittleEndian => {
            let v4 = constructor_vec_unpacku_high(ctx, arg0, arg1);
            // Rule at src\isa\s390x\inst.isle line 3660.
            return v4;
        }
        &LaneOrder::BigEndian => {
            let v3 = constructor_vec_unpacku_low(ctx, arg0, arg1);
            // Rule at src\isa\s390x\inst.isle line 3657.
            return v3;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_unpacku_high_lane_order", "src\\isa\\s390x\\inst.isle line 3656")
}

// Generated as internal constructor for term vecop_merge_low.
pub fn constructor_vecop_merge_low<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 3668.
            return VecBinaryOp::MergeLow8x16;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 3669.
            return VecBinaryOp::MergeLow16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 3670.
            return VecBinaryOp::MergeLow32x4;
        }
        I64X2 => {
            // Rule at src\isa\s390x\inst.isle line 3671.
            return VecBinaryOp::MergeLow64x2;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vecop_merge_low", "src\\isa\\s390x\\inst.isle line 3667")
}

// Generated as internal constructor for term vec_merge_low.
pub fn constructor_vec_merge_low<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_vecop_merge_low(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3674.
    return v4;
}

// Generated as internal constructor for term vecop_merge_high.
pub fn constructor_vecop_merge_high<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 3677.
            return VecBinaryOp::MergeHigh8x16;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 3678.
            return VecBinaryOp::MergeHigh16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 3679.
            return VecBinaryOp::MergeHigh32x4;
        }
        I64X2 => {
            // Rule at src\isa\s390x\inst.isle line 3680.
            return VecBinaryOp::MergeHigh64x2;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vecop_merge_high", "src\\isa\\s390x\\inst.isle line 3676")
}

// Generated as internal constructor for term vec_merge_high.
pub fn constructor_vec_merge_high<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_vecop_merge_high(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3683.
    return v4;
}

// Generated as internal constructor for term vec_merge_low_lane_order.
pub fn constructor_vec_merge_low_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &C::lane_order(ctx);
    match v3 {
        &LaneOrder::LittleEndian => {
            let v5 = constructor_vec_merge_low(ctx, arg0, arg2, arg1);
            // Rule at src\isa\s390x\inst.isle line 3697.
            return v5;
        }
        &LaneOrder::BigEndian => {
            let v4 = constructor_vec_merge_high(ctx, arg0, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 3694.
            return v4;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_merge_low_lane_order", "src\\isa\\s390x\\inst.isle line 3693")
}

// Generated as internal constructor for term vec_merge_high_lane_order.
pub fn constructor_vec_merge_high_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &C::lane_order(ctx);
    match v3 {
        &LaneOrder::LittleEndian => {
            let v5 = constructor_vec_merge_high(ctx, arg0, arg2, arg1);
            // Rule at src\isa\s390x\inst.isle line 3705.
            return v5;
        }
        &LaneOrder::BigEndian => {
            let v4 = constructor_vec_merge_low(ctx, arg0, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 3702.
            return v4;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_merge_high_lane_order", "src\\isa\\s390x\\inst.isle line 3701")
}

// Generated as internal constructor for term clz_reg.
pub fn constructor_clz_reg<C: Context>(
    ctx: &mut C,
    arg0: i16,
    arg1: Reg,
) -> Reg {
    if arg0 == 64_i16 {
        let v2 = constructor_temp_writable_regpair(ctx);
        let v3 = MInst::Flogr {
            rd: v2,
            rn: arg1,
        };
        let v4 = C::emit(ctx, &v3);
        let v5 = constructor_writable_regpair_to_regpair(ctx, v2);
        let v6 = C::regpair_hi(ctx, v5);
        // Rule at src\isa\s390x\inst.isle line 3716.
        return v6;
    }
    let v2 = constructor_temp_writable_regpair(ctx);
    let v10 = &C::intcc_as_cond(ctx, &IntCC::Equal);
    let v5 = constructor_writable_regpair_to_regpair(ctx, v2);
    let v6 = C::regpair_hi(ctx, v5);
    let v11 = &constructor_cmov_imm(ctx, I64, v10, arg0, v6);
    let v3 = MInst::Flogr {
        rd: v2,
        rn: arg1,
    };
    let v7 = ProducesFlags::ProducesFlagsSideEffect {
        inst: v3,
    };
    let v12 = constructor_with_flags_reg(ctx, &v7, v11);
    // Rule at src\isa\s390x\inst.isle line 3722.
    return v12;
}

// Generated as internal constructor for term vecop_clz.
pub fn constructor_vecop_clz<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> VecUnaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 3730.
            return VecUnaryOp::Clz8x16;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 3731.
            return VecUnaryOp::Clz16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 3732.
            return VecUnaryOp::Clz32x4;
        }
        I64X2 => {
            // Rule at src\isa\s390x\inst.isle line 3733.
            return VecUnaryOp::Clz64x2;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vecop_clz", "src\\isa\\s390x\\inst.isle line 3729")
}

// Generated as internal constructor for term vec_clz.
pub fn constructor_vec_clz<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v2 = &constructor_vecop_clz(ctx, arg0);
    let v3 = constructor_vec_rr(ctx, arg0, v2, arg1);
    // Rule at src\isa\s390x\inst.isle line 3736.
    return v3;
}

// Generated as internal constructor for term vecop_ctz.
pub fn constructor_vecop_ctz<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> VecUnaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 3740.
            return VecUnaryOp::Ctz8x16;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 3741.
            return VecUnaryOp::Ctz16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 3742.
            return VecUnaryOp::Ctz32x4;
        }
        I64X2 => {
            // Rule at src\isa\s390x\inst.isle line 3743.
            return VecUnaryOp::Ctz64x2;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vecop_ctz", "src\\isa\\s390x\\inst.isle line 3739")
}

// Generated as internal constructor for term vec_ctz.
pub fn constructor_vec_ctz<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v2 = &constructor_vecop_ctz(ctx, arg0);
    let v3 = constructor_vec_rr(ctx, arg0, v2, arg1);
    // Rule at src\isa\s390x\inst.isle line 3746.
    return v3;
}

// Generated as internal constructor for term uint_sat_reg.
pub fn constructor_uint_sat_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Type,
    arg2: Reg,
) -> Reg {
    if arg0 == arg1 {
        // Rule at src\isa\s390x\inst.isle line 3752.
        return arg2;
    }
    match arg0 {
        I8 => {
            let v3 = C::ty_32_or_64(ctx, arg1);
            if let Some(v4) = v3 {
                let v6 = &constructor_icmpu_uimm32(ctx, v4, arg2, 0x100_u32);
                let v8 = &C::intcc_as_cond(ctx, &IntCC::UnsignedGreaterThan);
                let v10 = &constructor_cmov_imm(ctx, v4, v8, 255_i16, arg2);
                let v11 = constructor_with_flags_reg(ctx, v6, v10);
                // Rule at src\isa\s390x\inst.isle line 3753.
                return v11;
            }
        }
        I16 => {
            let v3 = C::ty_32_or_64(ctx, arg1);
            if let Some(v4) = v3 {
                let v13 = &constructor_icmpu_uimm32(ctx, v4, arg2, 0xffff_u32);
                let v8 = &C::intcc_as_cond(ctx, &IntCC::UnsignedGreaterThan);
                let v15 = &constructor_cmov_imm(ctx, v4, v8, -1_i16, arg2);
                let v16 = constructor_with_flags_reg(ctx, v13, v15);
                // Rule at src\isa\s390x\inst.isle line 3756.
                return v16;
            }
        }
        I32 => {
            if arg1 == I64 {
                let v19 = constructor_imm(ctx, I64, 0xffffffff_u64);
                let v20 = &constructor_icmpu_reg(ctx, I64, arg2, v19);
                let v21 = &C::intcc_as_cond(ctx, &IntCC::UnsignedGreaterThan);
                let v22 = &constructor_bool(ctx, v20, v21);
                let v23 = constructor_select_bool_reg(ctx, I64, v22, v19, arg2);
                // Rule at src\isa\s390x\inst.isle line 3759.
                return v23;
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "uint_sat_reg", "src\\isa\\s390x\\inst.isle line 3751")
}

// Generated as internal constructor for term sint_sat_reg.
pub fn constructor_sint_sat_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Type,
    arg2: Reg,
) -> Reg {
    if arg0 == arg1 {
        // Rule at src\isa\s390x\inst.isle line 3767.
        return arg2;
    }
    match arg0 {
        I8 => {
            let v3 = C::ty_32_or_64(ctx, arg1);
            if let Some(v4) = v3 {
                let v6 = &constructor_icmps_simm16(ctx, v4, arg2, 127_i16);
                let v8 = &C::intcc_as_cond(ctx, &IntCC::SignedGreaterThan);
                let v9 = &constructor_cmov_imm(ctx, v4, v8, 127_i16, arg2);
                let v10 = constructor_with_flags_reg(ctx, v6, v9);
                let v12 = &constructor_icmps_simm16(ctx, v4, v10, -128_i16);
                let v14 = &C::intcc_as_cond(ctx, &IntCC::SignedLessThan);
                let v15 = &constructor_cmov_imm(ctx, v4, v14, -128_i16, v10);
                let v16 = constructor_with_flags_reg(ctx, v12, v15);
                // Rule at src\isa\s390x\inst.isle line 3768.
                return v16;
            }
        }
        I16 => {
            let v3 = C::ty_32_or_64(ctx, arg1);
            if let Some(v4) = v3 {
                let v18 = &constructor_icmps_simm16(ctx, v4, arg2, 32767_i16);
                let v8 = &C::intcc_as_cond(ctx, &IntCC::SignedGreaterThan);
                let v19 = &constructor_cmov_imm(ctx, v4, v8, 32767_i16, arg2);
                let v20 = constructor_with_flags_reg(ctx, v18, v19);
                let v22 = &constructor_icmps_simm16(ctx, v4, v20, -32768_i16);
                let v14 = &C::intcc_as_cond(ctx, &IntCC::SignedLessThan);
                let v23 = &constructor_cmov_imm(ctx, v4, v14, -32768_i16, v20);
                let v24 = constructor_with_flags_reg(ctx, v22, v23);
                // Rule at src\isa\s390x\inst.isle line 3774.
                return v24;
            }
        }
        I32 => {
            if arg1 == I64 {
                let v27 = constructor_imm32(ctx, I64, 2147483647_i32);
                let v28 = &constructor_icmps_reg(ctx, I64, arg2, v27);
                let v29 = &C::intcc_as_cond(ctx, &IntCC::SignedGreaterThan);
                let v30 = &constructor_bool(ctx, v28, v29);
                let v31 = constructor_select_bool_reg(ctx, I64, v30, v27, arg2);
                let v33 = constructor_imm32(ctx, I64, -2147483648_i32);
                let v34 = &constructor_icmps_reg(ctx, I64, v31, v33);
                let v35 = &C::intcc_as_cond(ctx, &IntCC::SignedLessThan);
                let v36 = &constructor_bool(ctx, v34, v35);
                let v37 = constructor_select_bool_reg(ctx, I64, v36, v33, v31);
                // Rule at src\isa\s390x\inst.isle line 3780.
                return v37;
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "sint_sat_reg", "src\\isa\\s390x\\inst.isle line 3766")
}

// Generated as internal constructor for term aluop_add.
pub fn constructor_aluop_add<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> ALUOp {
    match arg0 {
        I8 => {
            // Rule at src\isa\s390x\inst.isle line 3796.
            return ALUOp::Add32;
        }
        I16 => {
            // Rule at src\isa\s390x\inst.isle line 3797.
            return ALUOp::Add32;
        }
        I32 => {
            // Rule at src\isa\s390x\inst.isle line 3798.
            return ALUOp::Add32;
        }
        I64 => {
            // Rule at src\isa\s390x\inst.isle line 3799.
            return ALUOp::Add64;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "aluop_add", "src\\isa\\s390x\\inst.isle line 3795")
}

// Generated as internal constructor for term aluop_add_sext16.
pub fn constructor_aluop_add_sext16<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> ALUOp {
    match arg0 {
        I16 => {
            // Rule at src\isa\s390x\inst.isle line 3802.
            return ALUOp::Add32Ext16;
        }
        I32 => {
            // Rule at src\isa\s390x\inst.isle line 3803.
            return ALUOp::Add32Ext16;
        }
        I64 => {
            // Rule at src\isa\s390x\inst.isle line 3804.
            return ALUOp::Add64Ext16;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "aluop_add_sext16", "src\\isa\\s390x\\inst.isle line 3801")
}

// Generated as internal constructor for term aluop_add_sext32.
pub fn constructor_aluop_add_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> ALUOp {
    if arg0 == I64 {
        // Rule at src\isa\s390x\inst.isle line 3807.
        return ALUOp::Add64Ext32;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "aluop_add_sext32", "src\\isa\\s390x\\inst.isle line 3806")
}

// Generated as internal constructor for term add_reg.
pub fn constructor_add_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_aluop_add(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3810.
    return v4;
}

// Generated as internal constructor for term add_reg_sext32.
pub fn constructor_add_reg_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_aluop_add_sext32(ctx, arg0);
    let v4 = constructor_alu_rr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3813.
    return v4;
}

// Generated as internal constructor for term add_simm16.
pub fn constructor_add_simm16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: i16,
) -> Reg {
    let v3 = &constructor_aluop_add(ctx, arg0);
    let v4 = constructor_alu_rrsimm16(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3816.
    return v4;
}

// Generated as internal constructor for term add_simm32.
pub fn constructor_add_simm32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: i32,
) -> Reg {
    let v3 = &constructor_aluop_add(ctx, arg0);
    let v4 = constructor_alu_rsimm32(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3819.
    return v4;
}

// Generated as internal constructor for term add_mem.
pub fn constructor_add_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_add(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3822.
    return v4;
}

// Generated as internal constructor for term add_mem_sext16.
pub fn constructor_add_mem_sext16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_add_sext16(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3825.
    return v4;
}

// Generated as internal constructor for term add_mem_sext32.
pub fn constructor_add_mem_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_add_sext32(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3828.
    return v4;
}

// Generated as internal constructor for term vecop_add.
pub fn constructor_vecop_add<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> VecBinaryOp {
    match arg0 {
        I128 => {
            // Rule at src\isa\s390x\inst.isle line 3835.
            return VecBinaryOp::Add128;
        }
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 3831.
            return VecBinaryOp::Add8x16;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 3832.
            return VecBinaryOp::Add16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 3833.
            return VecBinaryOp::Add32x4;
        }
        I64X2 => {
            // Rule at src\isa\s390x\inst.isle line 3834.
            return VecBinaryOp::Add64x2;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vecop_add", "src\\isa\\s390x\\inst.isle line 3830")
}

// Generated as internal constructor for term vec_add.
pub fn constructor_vec_add<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_vecop_add(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3838.
    return v4;
}

// Generated as internal constructor for term aluop_add_logical.
pub fn constructor_aluop_add_logical<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> ALUOp {
    match arg0 {
        I32 => {
            // Rule at src\isa\s390x\inst.isle line 3844.
            return ALUOp::AddLogical32;
        }
        I64 => {
            // Rule at src\isa\s390x\inst.isle line 3845.
            return ALUOp::AddLogical64;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "aluop_add_logical", "src\\isa\\s390x\\inst.isle line 3843")
}

// Generated as internal constructor for term aluop_add_logical_zext32.
pub fn constructor_aluop_add_logical_zext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> ALUOp {
    if arg0 == I64 {
        // Rule at src\isa\s390x\inst.isle line 3848.
        return ALUOp::AddLogical64Ext32;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "aluop_add_logical_zext32", "src\\isa\\s390x\\inst.isle line 3847")
}

// Generated as internal constructor for term add_logical_reg.
pub fn constructor_add_logical_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_aluop_add_logical(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3851.
    return v4;
}

// Generated as internal constructor for term add_logical_reg_with_flags_paired.
pub fn constructor_add_logical_reg_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v3 = &constructor_aluop_add_logical(ctx, arg0);
    let v4 = &constructor_alu_rrr_with_flags_paired(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3854.
    return v4.clone();
}

// Generated as internal constructor for term add_logical_reg_zext32.
pub fn constructor_add_logical_reg_zext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_aluop_add_logical_zext32(ctx, arg0);
    let v4 = constructor_alu_rr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3858.
    return v4;
}

// Generated as internal constructor for term add_logical_reg_zext32_with_flags_paired.
pub fn constructor_add_logical_reg_zext32_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v3 = &constructor_aluop_add_logical_zext32(ctx, arg0);
    let v4 = &constructor_alu_rr_with_flags_paired(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3861.
    return v4.clone();
}

// Generated as internal constructor for term add_logical_zimm32.
pub fn constructor_add_logical_zimm32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u32,
) -> Reg {
    let v3 = &constructor_aluop_add_logical(ctx, arg0);
    let v4 = constructor_alu_ruimm32(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3865.
    return v4;
}

// Generated as internal constructor for term add_logical_zimm32_with_flags_paired.
pub fn constructor_add_logical_zimm32_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u32,
) -> ProducesFlags {
    let v3 = &constructor_aluop_add_logical(ctx, arg0);
    let v4 = &constructor_alu_ruimm32_with_flags_paired(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3868.
    return v4.clone();
}

// Generated as internal constructor for term add_logical_mem.
pub fn constructor_add_logical_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_add_logical(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3872.
    return v4;
}

// Generated as internal constructor for term add_logical_mem_with_flags_paired.
pub fn constructor_add_logical_mem_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> ProducesFlags {
    let v3 = &constructor_aluop_add_logical(ctx, arg0);
    let v4 = &constructor_alu_rx_with_flags_paired(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3875.
    return v4.clone();
}

// Generated as internal constructor for term add_logical_mem_zext32.
pub fn constructor_add_logical_mem_zext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_add_logical_zext32(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3879.
    return v4;
}

// Generated as internal constructor for term add_logical_mem_zext32_with_flags_paired.
pub fn constructor_add_logical_mem_zext32_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> ProducesFlags {
    let v3 = &constructor_aluop_add_logical_zext32(ctx, arg0);
    let v4 = &constructor_alu_rx_with_flags_paired(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3882.
    return v4.clone();
}

// Generated as internal constructor for term aluop_sub.
pub fn constructor_aluop_sub<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> ALUOp {
    match arg0 {
        I8 => {
            // Rule at src\isa\s390x\inst.isle line 3889.
            return ALUOp::Sub32;
        }
        I16 => {
            // Rule at src\isa\s390x\inst.isle line 3890.
            return ALUOp::Sub32;
        }
        I32 => {
            // Rule at src\isa\s390x\inst.isle line 3891.
            return ALUOp::Sub32;
        }
        I64 => {
            // Rule at src\isa\s390x\inst.isle line 3892.
            return ALUOp::Sub64;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "aluop_sub", "src\\isa\\s390x\\inst.isle line 3888")
}

// Generated as internal constructor for term aluop_sub_sext16.
pub fn constructor_aluop_sub_sext16<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> ALUOp {
    match arg0 {
        I16 => {
            // Rule at src\isa\s390x\inst.isle line 3895.
            return ALUOp::Sub32Ext16;
        }
        I32 => {
            // Rule at src\isa\s390x\inst.isle line 3896.
            return ALUOp::Sub32Ext16;
        }
        I64 => {
            // Rule at src\isa\s390x\inst.isle line 3897.
            return ALUOp::Sub64Ext16;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "aluop_sub_sext16", "src\\isa\\s390x\\inst.isle line 3894")
}

// Generated as internal constructor for term aluop_sub_sext32.
pub fn constructor_aluop_sub_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> ALUOp {
    if arg0 == I64 {
        // Rule at src\isa\s390x\inst.isle line 3900.
        return ALUOp::Sub64Ext32;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "aluop_sub_sext32", "src\\isa\\s390x\\inst.isle line 3899")
}

// Generated as internal constructor for term sub_reg.
pub fn constructor_sub_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_aluop_sub(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3903.
    return v4;
}

// Generated as internal constructor for term sub_reg_sext32.
pub fn constructor_sub_reg_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_aluop_sub_sext32(ctx, arg0);
    let v4 = constructor_alu_rr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3906.
    return v4;
}

// Generated as internal constructor for term sub_mem.
pub fn constructor_sub_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_sub(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3909.
    return v4;
}

// Generated as internal constructor for term sub_mem_sext16.
pub fn constructor_sub_mem_sext16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_sub_sext16(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3912.
    return v4;
}

// Generated as internal constructor for term sub_mem_sext32.
pub fn constructor_sub_mem_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_sub_sext32(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3915.
    return v4;
}

// Generated as internal constructor for term vecop_sub.
pub fn constructor_vecop_sub<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> VecBinaryOp {
    match arg0 {
        I128 => {
            // Rule at src\isa\s390x\inst.isle line 3922.
            return VecBinaryOp::Sub128;
        }
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 3918.
            return VecBinaryOp::Sub8x16;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 3919.
            return VecBinaryOp::Sub16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 3920.
            return VecBinaryOp::Sub32x4;
        }
        I64X2 => {
            // Rule at src\isa\s390x\inst.isle line 3921.
            return VecBinaryOp::Sub64x2;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vecop_sub", "src\\isa\\s390x\\inst.isle line 3917")
}

// Generated as internal constructor for term vec_sub.
pub fn constructor_vec_sub<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_vecop_sub(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3925.
    return v4;
}

// Generated as internal constructor for term aluop_sub_logical.
pub fn constructor_aluop_sub_logical<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> ALUOp {
    match arg0 {
        I32 => {
            // Rule at src\isa\s390x\inst.isle line 3931.
            return ALUOp::SubLogical32;
        }
        I64 => {
            // Rule at src\isa\s390x\inst.isle line 3932.
            return ALUOp::SubLogical64;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "aluop_sub_logical", "src\\isa\\s390x\\inst.isle line 3930")
}

// Generated as internal constructor for term aluop_sub_logical_zext32.
pub fn constructor_aluop_sub_logical_zext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> ALUOp {
    if arg0 == I64 {
        // Rule at src\isa\s390x\inst.isle line 3935.
        return ALUOp::SubLogical64Ext32;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "aluop_sub_logical_zext32", "src\\isa\\s390x\\inst.isle line 3934")
}

// Generated as internal constructor for term sub_logical_reg.
pub fn constructor_sub_logical_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_aluop_sub_logical(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3938.
    return v4;
}

// Generated as internal constructor for term sub_logical_reg_zext32.
pub fn constructor_sub_logical_reg_zext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_aluop_sub_logical_zext32(ctx, arg0);
    let v4 = constructor_alu_rr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3941.
    return v4;
}

// Generated as internal constructor for term sub_logical_zimm32.
pub fn constructor_sub_logical_zimm32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u32,
) -> Reg {
    let v3 = &constructor_aluop_sub_logical(ctx, arg0);
    let v4 = constructor_alu_ruimm32(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3944.
    return v4;
}

// Generated as internal constructor for term sub_logical_mem.
pub fn constructor_sub_logical_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_sub_logical(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3947.
    return v4;
}

// Generated as internal constructor for term sub_logical_mem_zext32.
pub fn constructor_sub_logical_mem_zext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_sub_logical(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3950.
    return v4;
}

// Generated as internal constructor for term aluop_mul.
pub fn constructor_aluop_mul<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> ALUOp {
    match arg0 {
        I8 => {
            // Rule at src\isa\s390x\inst.isle line 3956.
            return ALUOp::Mul32;
        }
        I16 => {
            // Rule at src\isa\s390x\inst.isle line 3957.
            return ALUOp::Mul32;
        }
        I32 => {
            // Rule at src\isa\s390x\inst.isle line 3958.
            return ALUOp::Mul32;
        }
        I64 => {
            // Rule at src\isa\s390x\inst.isle line 3959.
            return ALUOp::Mul64;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "aluop_mul", "src\\isa\\s390x\\inst.isle line 3955")
}

// Generated as internal constructor for term aluop_mul_sext16.
pub fn constructor_aluop_mul_sext16<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> ALUOp {
    match arg0 {
        I16 => {
            // Rule at src\isa\s390x\inst.isle line 3962.
            return ALUOp::Mul32Ext16;
        }
        I32 => {
            // Rule at src\isa\s390x\inst.isle line 3963.
            return ALUOp::Mul32Ext16;
        }
        I64 => {
            // Rule at src\isa\s390x\inst.isle line 3964.
            return ALUOp::Mul64Ext16;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "aluop_mul_sext16", "src\\isa\\s390x\\inst.isle line 3961")
}

// Generated as internal constructor for term aluop_mul_sext32.
pub fn constructor_aluop_mul_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> ALUOp {
    if arg0 == I64 {
        // Rule at src\isa\s390x\inst.isle line 3967.
        return ALUOp::Mul64Ext32;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "aluop_mul_sext32", "src\\isa\\s390x\\inst.isle line 3966")
}

// Generated as internal constructor for term mul_reg.
pub fn constructor_mul_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_aluop_mul(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3970.
    return v4;
}

// Generated as internal constructor for term mul_reg_sext32.
pub fn constructor_mul_reg_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_aluop_mul_sext32(ctx, arg0);
    let v4 = constructor_alu_rr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3973.
    return v4;
}

// Generated as internal constructor for term mul_simm16.
pub fn constructor_mul_simm16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: i16,
) -> Reg {
    let v3 = &constructor_aluop_mul(ctx, arg0);
    let v4 = constructor_alu_rsimm16(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3976.
    return v4;
}

// Generated as internal constructor for term mul_simm32.
pub fn constructor_mul_simm32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: i32,
) -> Reg {
    let v3 = &constructor_aluop_mul(ctx, arg0);
    let v4 = constructor_alu_rsimm32(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3979.
    return v4;
}

// Generated as internal constructor for term mul_mem.
pub fn constructor_mul_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_mul(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3982.
    return v4;
}

// Generated as internal constructor for term mul_mem_sext16.
pub fn constructor_mul_mem_sext16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_mul_sext16(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3985.
    return v4;
}

// Generated as internal constructor for term mul_mem_sext32.
pub fn constructor_mul_mem_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_mul_sext32(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3988.
    return v4;
}

// Generated as internal constructor for term vecop_mul.
pub fn constructor_vecop_mul<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 3991.
            return VecBinaryOp::Mul8x16;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 3992.
            return VecBinaryOp::Mul16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 3993.
            return VecBinaryOp::Mul32x4;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vecop_mul", "src\\isa\\s390x\\inst.isle line 3990")
}

// Generated as internal constructor for term vec_mul.
pub fn constructor_vec_mul<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_vecop_mul(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3997.
    return v4;
}

// Generated as internal constructor for term vecop_umulhi.
pub fn constructor_vecop_umulhi<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 4000.
            return VecBinaryOp::UMulHi8x16;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 4001.
            return VecBinaryOp::UMulHi16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4002.
            return VecBinaryOp::UMulHi32x4;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vecop_umulhi", "src\\isa\\s390x\\inst.isle line 3999")
}

// Generated as internal constructor for term vec_umulhi.
pub fn constructor_vec_umulhi<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_vecop_umulhi(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4006.
    return v4;
}

// Generated as internal constructor for term vecop_smulhi.
pub fn constructor_vecop_smulhi<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 4009.
            return VecBinaryOp::SMulHi8x16;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 4010.
            return VecBinaryOp::SMulHi16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4011.
            return VecBinaryOp::SMulHi32x4;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vecop_smulhi", "src\\isa\\s390x\\inst.isle line 4008")
}

// Generated as internal constructor for term vec_smulhi.
pub fn constructor_vec_smulhi<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_vecop_smulhi(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4015.
    return v4;
}

// Generated as internal constructor for term vecop_umul_even.
pub fn constructor_vecop_umul_even<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 4018.
            return VecBinaryOp::UMulEven8x16;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 4019.
            return VecBinaryOp::UMulEven16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4020.
            return VecBinaryOp::UMulEven32x4;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vecop_umul_even", "src\\isa\\s390x\\inst.isle line 4017")
}

// Generated as internal constructor for term vec_umul_even.
pub fn constructor_vec_umul_even<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_vecop_umul_even(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4024.
    return v4;
}

// Generated as internal constructor for term vecop_smul_even.
pub fn constructor_vecop_smul_even<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 4027.
            return VecBinaryOp::SMulEven8x16;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 4028.
            return VecBinaryOp::SMulEven16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4029.
            return VecBinaryOp::SMulEven32x4;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vecop_smul_even", "src\\isa\\s390x\\inst.isle line 4026")
}

// Generated as internal constructor for term vec_smul_even.
pub fn constructor_vec_smul_even<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_vecop_smul_even(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4033.
    return v4;
}

// Generated as internal constructor for term vecop_umul_odd.
pub fn constructor_vecop_umul_odd<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 4036.
            return VecBinaryOp::UMulOdd8x16;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 4037.
            return VecBinaryOp::UMulOdd16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4038.
            return VecBinaryOp::UMulOdd32x4;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vecop_umul_odd", "src\\isa\\s390x\\inst.isle line 4035")
}

// Generated as internal constructor for term vec_umul_odd.
pub fn constructor_vec_umul_odd<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_vecop_umul_odd(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4042.
    return v4;
}

// Generated as internal constructor for term vecop_smul_odd.
pub fn constructor_vecop_smul_odd<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 4045.
            return VecBinaryOp::SMulOdd8x16;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 4046.
            return VecBinaryOp::SMulOdd16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4047.
            return VecBinaryOp::SMulOdd32x4;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vecop_smul_odd", "src\\isa\\s390x\\inst.isle line 4044")
}

// Generated as internal constructor for term vec_smul_odd.
pub fn constructor_vec_smul_odd<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_vecop_smul_odd(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4051.
    return v4;
}

// Generated as internal constructor for term udivmod.
pub fn constructor_udivmod<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: RegPair,
    arg2: Reg,
) -> RegPair {
    match arg0 {
        I32 => {
            let v3 = constructor_udivmod32(ctx, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 4057.
            return v3;
        }
        I64 => {
            let v4 = constructor_udivmod64(ctx, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 4058.
            return v4;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "udivmod", "src\\isa\\s390x\\inst.isle line 4056")
}

// Generated as internal constructor for term sdivmod.
pub fn constructor_sdivmod<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> RegPair {
    match arg0 {
        I32 => {
            let v3 = constructor_sdivmod32(ctx, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 4064.
            return v3;
        }
        I64 => {
            let v4 = constructor_sdivmod64(ctx, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 4065.
            return v4;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "sdivmod", "src\\isa\\s390x\\inst.isle line 4063")
}

// Generated as internal constructor for term vecop_umax.
pub fn constructor_vecop_umax<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 4071.
            return VecBinaryOp::UMax8x16;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 4072.
            return VecBinaryOp::UMax16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4073.
            return VecBinaryOp::UMax32x4;
        }
        I64X2 => {
            // Rule at src\isa\s390x\inst.isle line 4074.
            return VecBinaryOp::UMax64x2;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vecop_umax", "src\\isa\\s390x\\inst.isle line 4070")
}

// Generated as internal constructor for term vec_umax.
pub fn constructor_vec_umax<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_vecop_umax(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4077.
    return v4;
}

// Generated as internal constructor for term vecop_smax.
pub fn constructor_vecop_smax<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 4083.
            return VecBinaryOp::SMax8x16;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 4084.
            return VecBinaryOp::SMax16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4085.
            return VecBinaryOp::SMax32x4;
        }
        I64X2 => {
            // Rule at src\isa\s390x\inst.isle line 4086.
            return VecBinaryOp::SMax64x2;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vecop_smax", "src\\isa\\s390x\\inst.isle line 4082")
}

// Generated as internal constructor for term vec_smax.
pub fn constructor_vec_smax<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_vecop_smax(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4089.
    return v4;
}

// Generated as internal constructor for term vecop_umin.
pub fn constructor_vecop_umin<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 4095.
            return VecBinaryOp::UMin8x16;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 4096.
            return VecBinaryOp::UMin16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4097.
            return VecBinaryOp::UMin32x4;
        }
        I64X2 => {
            // Rule at src\isa\s390x\inst.isle line 4098.
            return VecBinaryOp::UMin64x2;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vecop_umin", "src\\isa\\s390x\\inst.isle line 4094")
}

// Generated as internal constructor for term vec_umin.
pub fn constructor_vec_umin<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_vecop_umin(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4101.
    return v4;
}

// Generated as internal constructor for term vecop_smin.
pub fn constructor_vecop_smin<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 4107.
            return VecBinaryOp::SMin8x16;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 4108.
            return VecBinaryOp::SMin16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4109.
            return VecBinaryOp::SMin32x4;
        }
        I64X2 => {
            // Rule at src\isa\s390x\inst.isle line 4110.
            return VecBinaryOp::SMin64x2;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vecop_smin", "src\\isa\\s390x\\inst.isle line 4106")
}

// Generated as internal constructor for term vec_smin.
pub fn constructor_vec_smin<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_vecop_smin(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4113.
    return v4;
}

// Generated as internal constructor for term vecop_uavg.
pub fn constructor_vecop_uavg<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 4119.
            return VecBinaryOp::UAvg8x16;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 4120.
            return VecBinaryOp::UAvg16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4121.
            return VecBinaryOp::UAvg32x4;
        }
        I64X2 => {
            // Rule at src\isa\s390x\inst.isle line 4122.
            return VecBinaryOp::UAvg64x2;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vecop_uavg", "src\\isa\\s390x\\inst.isle line 4118")
}

// Generated as internal constructor for term vec_uavg.
pub fn constructor_vec_uavg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_vecop_uavg(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4125.
    return v4;
}

// Generated as internal constructor for term aluop_and.
pub fn constructor_aluop_and<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> ALUOp {
    let v4 = C::gpr64_ty(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src\isa\s390x\inst.isle line 4132.
        return ALUOp::And64;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src\isa\s390x\inst.isle line 4131.
        return ALUOp::And32;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "aluop_and", "src\\isa\\s390x\\inst.isle line 4130")
}

// Generated as internal constructor for term and_reg.
pub fn constructor_and_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_aluop_and(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4135.
    return v4;
}

// Generated as internal constructor for term and_uimm16shifted.
pub fn constructor_and_uimm16shifted<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: UImm16Shifted,
) -> Reg {
    let v3 = &constructor_aluop_and(ctx, arg0);
    let v4 = constructor_alu_ruimm16shifted(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4138.
    return v4;
}

// Generated as internal constructor for term and_uimm32shifted.
pub fn constructor_and_uimm32shifted<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: UImm32Shifted,
) -> Reg {
    let v3 = &constructor_aluop_and(ctx, arg0);
    let v4 = constructor_alu_ruimm32shifted(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4141.
    return v4;
}

// Generated as internal constructor for term and_mem.
pub fn constructor_and_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_and(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4144.
    return v4;
}

// Generated as internal constructor for term vec_and.
pub fn constructor_vec_and<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_vec_rrr(ctx, v2, &VecBinaryOp::And128, arg1, arg2);
        // Rule at src\isa\s390x\inst.isle line 4147.
        return v6;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_and", "src\\isa\\s390x\\inst.isle line 4146")
}

// Generated as internal constructor for term aluop_or.
pub fn constructor_aluop_or<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> ALUOp {
    let v4 = C::gpr64_ty(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src\isa\s390x\inst.isle line 4154.
        return ALUOp::Orr64;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src\isa\s390x\inst.isle line 4153.
        return ALUOp::Orr32;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "aluop_or", "src\\isa\\s390x\\inst.isle line 4152")
}

// Generated as internal constructor for term or_reg.
pub fn constructor_or_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_aluop_or(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4157.
    return v4;
}

// Generated as internal constructor for term or_uimm16shifted.
pub fn constructor_or_uimm16shifted<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: UImm16Shifted,
) -> Reg {
    let v3 = &constructor_aluop_or(ctx, arg0);
    let v4 = constructor_alu_ruimm16shifted(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4160.
    return v4;
}

// Generated as internal constructor for term or_uimm32shifted.
pub fn constructor_or_uimm32shifted<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: UImm32Shifted,
) -> Reg {
    let v3 = &constructor_aluop_or(ctx, arg0);
    let v4 = constructor_alu_ruimm32shifted(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4163.
    return v4;
}

// Generated as internal constructor for term or_mem.
pub fn constructor_or_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_or(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4166.
    return v4;
}

// Generated as internal constructor for term vec_or.
pub fn constructor_vec_or<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_vec_rrr(ctx, v2, &VecBinaryOp::Orr128, arg1, arg2);
        // Rule at src\isa\s390x\inst.isle line 4169.
        return v6;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_or", "src\\isa\\s390x\\inst.isle line 4168")
}

// Generated as internal constructor for term aluop_xor.
pub fn constructor_aluop_xor<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> ALUOp {
    let v4 = C::gpr64_ty(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src\isa\s390x\inst.isle line 4176.
        return ALUOp::Xor64;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src\isa\s390x\inst.isle line 4175.
        return ALUOp::Xor32;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "aluop_xor", "src\\isa\\s390x\\inst.isle line 4174")
}

// Generated as internal constructor for term xor_reg.
pub fn constructor_xor_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_aluop_xor(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4179.
    return v4;
}

// Generated as internal constructor for term xor_uimm32shifted.
pub fn constructor_xor_uimm32shifted<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: UImm32Shifted,
) -> Reg {
    let v3 = &constructor_aluop_xor(ctx, arg0);
    let v4 = constructor_alu_ruimm32shifted(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4182.
    return v4;
}

// Generated as internal constructor for term xor_mem.
pub fn constructor_xor_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_xor(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4185.
    return v4;
}

// Generated as internal constructor for term push_xor_uimm32shifted.
pub fn constructor_push_xor_uimm32shifted<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: WritableReg,
    arg3: Reg,
    arg4: UImm32Shifted,
) -> Reg {
    let v5 = &constructor_aluop_xor(ctx, arg1);
    let v6 = constructor_push_alu_uimm32shifted(ctx, arg0, v5, arg2, arg3, arg4);
    // Rule at src\isa\s390x\inst.isle line 4188.
    return v6;
}

// Generated as internal constructor for term vec_xor.
pub fn constructor_vec_xor<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_vec_rrr(ctx, v2, &VecBinaryOp::Xor128, arg1, arg2);
        // Rule at src\isa\s390x\inst.isle line 4192.
        return v6;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_xor", "src\\isa\\s390x\\inst.isle line 4191")
}

// Generated as internal constructor for term not_reg.
pub fn constructor_not_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v8 = C::gpr64_ty(ctx, arg0);
    if let Some(v9) = v8 {
        let v6 = C::uimm32shifted(ctx, 0xffffffff_u32, 0x0_u8);
        let v10 = constructor_xor_uimm32shifted(ctx, v9, arg1, v6);
        let v12 = C::uimm32shifted(ctx, 0xffffffff_u32, 0x20_u8);
        let v13 = constructor_xor_uimm32shifted(ctx, v9, v10, v12);
        // Rule at src\isa\s390x\inst.isle line 4200.
        return v13;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = C::uimm32shifted(ctx, 0xffffffff_u32, 0x0_u8);
        let v7 = constructor_xor_uimm32shifted(ctx, v2, arg1, v6);
        // Rule at src\isa\s390x\inst.isle line 4198.
        return v7;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "not_reg", "src\\isa\\s390x\\inst.isle line 4197")
}

// Generated as internal constructor for term push_not_reg.
pub fn constructor_push_not_reg<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: WritableReg,
    arg3: Reg,
) -> Reg {
    let v10 = C::gpr64_ty(ctx, arg1);
    if let Some(v11) = v10 {
        let v8 = C::uimm32shifted(ctx, 0xffffffff_u32, 0x0_u8);
        let v12 = constructor_push_xor_uimm32shifted(ctx, arg0, v11, arg2, arg3, v8);
        let v14 = C::uimm32shifted(ctx, 0xffffffff_u32, 0x20_u8);
        let v15 = constructor_push_xor_uimm32shifted(ctx, arg0, v11, arg2, v12, v14);
        // Rule at src\isa\s390x\inst.isle line 4208.
        return v15;
    }
    let v2 = C::gpr32_ty(ctx, arg1);
    if let Some(v3) = v2 {
        let v8 = C::uimm32shifted(ctx, 0xffffffff_u32, 0x0_u8);
        let v9 = constructor_push_xor_uimm32shifted(ctx, arg0, v3, arg2, arg3, v8);
        // Rule at src\isa\s390x\inst.isle line 4206.
        return v9;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "push_not_reg", "src\\isa\\s390x\\inst.isle line 4205")
}

// Generated as internal constructor for term vec_not.
pub fn constructor_vec_not<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v2 = constructor_vec_not_or(ctx, arg0, arg1, arg1);
    // Rule at src\isa\s390x\inst.isle line 4213.
    return v2;
}

// Generated as internal constructor for term aluop_not_and.
pub fn constructor_aluop_not_and<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> ALUOp {
    let v4 = C::gpr64_ty(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src\isa\s390x\inst.isle line 4220.
        return ALUOp::NotAnd64;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src\isa\s390x\inst.isle line 4219.
        return ALUOp::NotAnd32;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "aluop_not_and", "src\\isa\\s390x\\inst.isle line 4218")
}

// Generated as internal constructor for term not_and_reg.
pub fn constructor_not_and_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_aluop_not_and(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4223.
    return v4;
}

// Generated as internal constructor for term vec_not_and.
pub fn constructor_vec_not_and<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_vec_rrr(ctx, v2, &VecBinaryOp::NotAnd128, arg1, arg2);
        // Rule at src\isa\s390x\inst.isle line 4226.
        return v6;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_not_and", "src\\isa\\s390x\\inst.isle line 4225")
}

// Generated as internal constructor for term aluop_not_or.
pub fn constructor_aluop_not_or<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> ALUOp {
    let v4 = C::gpr64_ty(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src\isa\s390x\inst.isle line 4233.
        return ALUOp::NotOrr64;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src\isa\s390x\inst.isle line 4232.
        return ALUOp::NotOrr32;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "aluop_not_or", "src\\isa\\s390x\\inst.isle line 4231")
}

// Generated as internal constructor for term not_or_reg.
pub fn constructor_not_or_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_aluop_not_or(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4236.
    return v4;
}

// Generated as internal constructor for term vec_not_or.
pub fn constructor_vec_not_or<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_vec_rrr(ctx, v2, &VecBinaryOp::NotOrr128, arg1, arg2);
        // Rule at src\isa\s390x\inst.isle line 4239.
        return v6;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_not_or", "src\\isa\\s390x\\inst.isle line 4238")
}

// Generated as internal constructor for term aluop_not_xor.
pub fn constructor_aluop_not_xor<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> ALUOp {
    let v4 = C::gpr64_ty(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src\isa\s390x\inst.isle line 4246.
        return ALUOp::NotXor64;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src\isa\s390x\inst.isle line 4245.
        return ALUOp::NotXor32;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "aluop_not_xor", "src\\isa\\s390x\\inst.isle line 4244")
}

// Generated as internal constructor for term not_xor_reg.
pub fn constructor_not_xor_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_aluop_not_xor(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4249.
    return v4;
}

// Generated as internal constructor for term vec_not_xor.
pub fn constructor_vec_not_xor<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_vec_rrr(ctx, v2, &VecBinaryOp::NotXor128, arg1, arg2);
        // Rule at src\isa\s390x\inst.isle line 4252.
        return v6;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_not_xor", "src\\isa\\s390x\\inst.isle line 4251")
}

// Generated as internal constructor for term aluop_and_not.
pub fn constructor_aluop_and_not<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> ALUOp {
    let v4 = C::gpr64_ty(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src\isa\s390x\inst.isle line 4259.
        return ALUOp::AndNot64;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src\isa\s390x\inst.isle line 4258.
        return ALUOp::AndNot32;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "aluop_and_not", "src\\isa\\s390x\\inst.isle line 4257")
}

// Generated as internal constructor for term and_not_reg.
pub fn constructor_and_not_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_aluop_and_not(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4262.
    return v4;
}

// Generated as internal constructor for term vec_and_not.
pub fn constructor_vec_and_not<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_vec_rrr(ctx, v2, &VecBinaryOp::AndNot128, arg1, arg2);
        // Rule at src\isa\s390x\inst.isle line 4265.
        return v6;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_and_not", "src\\isa\\s390x\\inst.isle line 4264")
}

// Generated as internal constructor for term aluop_or_not.
pub fn constructor_aluop_or_not<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> ALUOp {
    let v4 = C::gpr64_ty(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src\isa\s390x\inst.isle line 4272.
        return ALUOp::OrrNot64;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src\isa\s390x\inst.isle line 4271.
        return ALUOp::OrrNot32;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "aluop_or_not", "src\\isa\\s390x\\inst.isle line 4270")
}

// Generated as internal constructor for term or_not_reg.
pub fn constructor_or_not_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_aluop_or_not(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4275.
    return v4;
}

// Generated as internal constructor for term vec_or_not.
pub fn constructor_vec_or_not<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_vec_rrr(ctx, v2, &VecBinaryOp::OrrNot128, arg1, arg2);
        // Rule at src\isa\s390x\inst.isle line 4278.
        return v6;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_or_not", "src\\isa\\s390x\\inst.isle line 4277")
}

// Generated as internal constructor for term vec_bitpermute.
pub fn constructor_vec_bitpermute<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, I64X2, &VecBinaryOp::BitPermute128, arg0, arg1);
    // Rule at src\isa\s390x\inst.isle line 4284.
    return v4;
}

// Generated as internal constructor for term unaryop_abs.
pub fn constructor_unaryop_abs<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> UnaryOp {
    match arg0 {
        I32 => {
            // Rule at src\isa\s390x\inst.isle line 4290.
            return UnaryOp::Abs32;
        }
        I64 => {
            // Rule at src\isa\s390x\inst.isle line 4291.
            return UnaryOp::Abs64;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "unaryop_abs", "src\\isa\\s390x\\inst.isle line 4289")
}

// Generated as internal constructor for term unaryop_abs_sext32.
pub fn constructor_unaryop_abs_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> UnaryOp {
    if arg0 == I64 {
        // Rule at src\isa\s390x\inst.isle line 4294.
        return UnaryOp::Abs64Ext32;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "unaryop_abs_sext32", "src\\isa\\s390x\\inst.isle line 4293")
}

// Generated as internal constructor for term abs_reg.
pub fn constructor_abs_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v2 = &constructor_unaryop_abs(ctx, arg0);
    let v3 = constructor_unary_rr(ctx, arg0, v2, arg1);
    // Rule at src\isa\s390x\inst.isle line 4297.
    return v3;
}

// Generated as internal constructor for term abs_reg_sext32.
pub fn constructor_abs_reg_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v2 = &constructor_unaryop_abs_sext32(ctx, arg0);
    let v3 = constructor_unary_rr(ctx, arg0, v2, arg1);
    // Rule at src\isa\s390x\inst.isle line 4300.
    return v3;
}

// Generated as internal constructor for term vecop_abs.
pub fn constructor_vecop_abs<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> VecUnaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 4303.
            return VecUnaryOp::Abs8x16;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 4304.
            return VecUnaryOp::Abs16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4305.
            return VecUnaryOp::Abs32x4;
        }
        I64X2 => {
            // Rule at src\isa\s390x\inst.isle line 4306.
            return VecUnaryOp::Abs64x2;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vecop_abs", "src\\isa\\s390x\\inst.isle line 4302")
}

// Generated as internal constructor for term vec_abs.
pub fn constructor_vec_abs<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v2 = &constructor_vecop_abs(ctx, arg0);
    let v3 = constructor_vec_rr(ctx, arg0, v2, arg1);
    // Rule at src\isa\s390x\inst.isle line 4309.
    return v3;
}

// Generated as internal constructor for term unaryop_neg.
pub fn constructor_unaryop_neg<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> UnaryOp {
    match arg0 {
        I8 => {
            // Rule at src\isa\s390x\inst.isle line 4315.
            return UnaryOp::Neg32;
        }
        I16 => {
            // Rule at src\isa\s390x\inst.isle line 4316.
            return UnaryOp::Neg32;
        }
        I32 => {
            // Rule at src\isa\s390x\inst.isle line 4317.
            return UnaryOp::Neg32;
        }
        I64 => {
            // Rule at src\isa\s390x\inst.isle line 4318.
            return UnaryOp::Neg64;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "unaryop_neg", "src\\isa\\s390x\\inst.isle line 4314")
}

// Generated as internal constructor for term unaryop_neg_sext32.
pub fn constructor_unaryop_neg_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> UnaryOp {
    if arg0 == I64 {
        // Rule at src\isa\s390x\inst.isle line 4321.
        return UnaryOp::Neg64Ext32;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "unaryop_neg_sext32", "src\\isa\\s390x\\inst.isle line 4320")
}

// Generated as internal constructor for term neg_reg.
pub fn constructor_neg_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v2 = &constructor_unaryop_neg(ctx, arg0);
    let v3 = constructor_unary_rr(ctx, arg0, v2, arg1);
    // Rule at src\isa\s390x\inst.isle line 4324.
    return v3;
}

// Generated as internal constructor for term neg_reg_sext32.
pub fn constructor_neg_reg_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v2 = &constructor_unaryop_neg_sext32(ctx, arg0);
    let v3 = constructor_unary_rr(ctx, arg0, v2, arg1);
    // Rule at src\isa\s390x\inst.isle line 4327.
    return v3;
}

// Generated as internal constructor for term vecop_neg.
pub fn constructor_vecop_neg<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> VecUnaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 4330.
            return VecUnaryOp::Neg8x16;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 4331.
            return VecUnaryOp::Neg16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4332.
            return VecUnaryOp::Neg32x4;
        }
        I64X2 => {
            // Rule at src\isa\s390x\inst.isle line 4333.
            return VecUnaryOp::Neg64x2;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vecop_neg", "src\\isa\\s390x\\inst.isle line 4329")
}

// Generated as internal constructor for term vec_neg.
pub fn constructor_vec_neg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v2 = &constructor_vecop_neg(ctx, arg0);
    let v3 = constructor_vec_rr(ctx, arg0, v2, arg1);
    // Rule at src\isa\s390x\inst.isle line 4336.
    return v3;
}

// Generated as internal constructor for term unaryop_bswap.
pub fn constructor_unaryop_bswap<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> UnaryOp {
    match arg0 {
        I32 => {
            // Rule at src\isa\s390x\inst.isle line 4342.
            return UnaryOp::BSwap32;
        }
        I64 => {
            // Rule at src\isa\s390x\inst.isle line 4343.
            return UnaryOp::BSwap64;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "unaryop_bswap", "src\\isa\\s390x\\inst.isle line 4341")
}

// Generated as internal constructor for term bswap_reg.
pub fn constructor_bswap_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v2 = &constructor_unaryop_bswap(ctx, arg0);
    let v3 = constructor_unary_rr(ctx, arg0, v2, arg1);
    // Rule at src\isa\s390x\inst.isle line 4346.
    return v3;
}

// Generated as internal constructor for term push_bswap_reg.
pub fn constructor_push_bswap_reg<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: WritableReg,
    arg3: Reg,
) -> Reg {
    let v4 = &constructor_unaryop_bswap(ctx, arg1);
    let v5 = constructor_push_unary(ctx, arg0, v4, arg2, arg3);
    // Rule at src\isa\s390x\inst.isle line 4349.
    return v5;
}

// Generated as internal constructor for term shiftop_rot.
pub fn constructor_shiftop_rot<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> ShiftOp {
    match arg0 {
        I32 => {
            // Rule at src\isa\s390x\inst.isle line 4355.
            return ShiftOp::RotL32;
        }
        I64 => {
            // Rule at src\isa\s390x\inst.isle line 4356.
            return ShiftOp::RotL64;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "shiftop_rot", "src\\isa\\s390x\\inst.isle line 4354")
}

// Generated as internal constructor for term rot_reg.
pub fn constructor_rot_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_shiftop_rot(ctx, arg0);
    let v5 = constructor_shift_rr(ctx, arg0, v3, arg1, 0x0_u8, arg2);
    // Rule at src\isa\s390x\inst.isle line 4359.
    return v5;
}

// Generated as internal constructor for term rot_imm.
pub fn constructor_rot_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u8,
) -> Reg {
    let v3 = &constructor_shiftop_rot(ctx, arg0);
    let v4 = C::zero_reg(ctx);
    let v5 = constructor_shift_rr(ctx, arg0, v3, arg1, arg2, v4);
    // Rule at src\isa\s390x\inst.isle line 4363.
    return v5;
}

// Generated as internal constructor for term rot_imm_reg.
pub fn constructor_rot_imm_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u8,
    arg3: Reg,
) -> Reg {
    let v4 = &constructor_shiftop_rot(ctx, arg0);
    let v5 = constructor_shift_rr(ctx, arg0, v4, arg1, arg2, arg3);
    // Rule at src\isa\s390x\inst.isle line 4367.
    return v5;
}

// Generated as internal constructor for term push_rot_imm_reg.
pub fn constructor_push_rot_imm_reg<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: WritableReg,
    arg3: Reg,
    arg4: u8,
    arg5: Reg,
) -> Reg {
    let v6 = &constructor_shiftop_rot(ctx, arg1);
    let v7 = constructor_push_shift(ctx, arg0, v6, arg2, arg3, arg4, arg5);
    // Rule at src\isa\s390x\inst.isle line 4371.
    return v7;
}

// Generated as internal constructor for term vec_shiftop_rot.
pub fn constructor_vec_shiftop_rot<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> VecShiftOp {
    match arg0 {
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 4375.
            return VecShiftOp::RotL8x16;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 4376.
            return VecShiftOp::RotL16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4377.
            return VecShiftOp::RotL32x4;
        }
        I64X2 => {
            // Rule at src\isa\s390x\inst.isle line 4378.
            return VecShiftOp::RotL64x2;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_shiftop_rot", "src\\isa\\s390x\\inst.isle line 4374")
}

// Generated as internal constructor for term vec_rot_reg.
pub fn constructor_vec_rot_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_vec_shiftop_rot(ctx, arg0);
    let v5 = constructor_vec_shift_rr(ctx, arg0, v3, arg1, 0x0_u8, arg2);
    // Rule at src\isa\s390x\inst.isle line 4381.
    return v5;
}

// Generated as internal constructor for term vec_rot_imm.
pub fn constructor_vec_rot_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u8,
) -> Reg {
    let v3 = &constructor_vec_shiftop_rot(ctx, arg0);
    let v4 = C::zero_reg(ctx);
    let v5 = constructor_vec_shift_rr(ctx, arg0, v3, arg1, arg2, v4);
    // Rule at src\isa\s390x\inst.isle line 4385.
    return v5;
}

// Generated as internal constructor for term shiftop_lshl.
pub fn constructor_shiftop_lshl<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> ShiftOp {
    match arg0 {
        I8 => {
            // Rule at src\isa\s390x\inst.isle line 4392.
            return ShiftOp::LShL32;
        }
        I16 => {
            // Rule at src\isa\s390x\inst.isle line 4393.
            return ShiftOp::LShL32;
        }
        I32 => {
            // Rule at src\isa\s390x\inst.isle line 4394.
            return ShiftOp::LShL32;
        }
        I64 => {
            // Rule at src\isa\s390x\inst.isle line 4395.
            return ShiftOp::LShL64;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "shiftop_lshl", "src\\isa\\s390x\\inst.isle line 4391")
}

// Generated as internal constructor for term lshl_reg.
pub fn constructor_lshl_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_shiftop_lshl(ctx, arg0);
    let v5 = constructor_shift_rr(ctx, arg0, v3, arg1, 0x0_u8, arg2);
    // Rule at src\isa\s390x\inst.isle line 4398.
    return v5;
}

// Generated as internal constructor for term lshl_imm.
pub fn constructor_lshl_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u8,
) -> Reg {
    let v3 = &constructor_shiftop_lshl(ctx, arg0);
    let v4 = C::zero_reg(ctx);
    let v5 = constructor_shift_rr(ctx, arg0, v3, arg1, arg2, v4);
    // Rule at src\isa\s390x\inst.isle line 4402.
    return v5;
}

// Generated as internal constructor for term vec_shiftop_lshl.
pub fn constructor_vec_shiftop_lshl<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> VecShiftOp {
    match arg0 {
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 4406.
            return VecShiftOp::LShL8x16;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 4407.
            return VecShiftOp::LShL16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4408.
            return VecShiftOp::LShL32x4;
        }
        I64X2 => {
            // Rule at src\isa\s390x\inst.isle line 4409.
            return VecShiftOp::LShL64x2;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_shiftop_lshl", "src\\isa\\s390x\\inst.isle line 4405")
}

// Generated as internal constructor for term vec_lshl_reg.
pub fn constructor_vec_lshl_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_vec_shiftop_lshl(ctx, arg0);
    let v5 = constructor_vec_shift_rr(ctx, arg0, v3, arg1, 0x0_u8, arg2);
    // Rule at src\isa\s390x\inst.isle line 4412.
    return v5;
}

// Generated as internal constructor for term vec_lshl_imm.
pub fn constructor_vec_lshl_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u8,
) -> Reg {
    let v3 = &constructor_vec_shiftop_lshl(ctx, arg0);
    let v4 = C::zero_reg(ctx);
    let v5 = constructor_vec_shift_rr(ctx, arg0, v3, arg1, arg2, v4);
    // Rule at src\isa\s390x\inst.isle line 4416.
    return v5;
}

// Generated as internal constructor for term vec_lshl_by_byte.
pub fn constructor_vec_lshl_by_byte<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, I8X16, &VecBinaryOp::LShLByByte128, arg0, arg1);
    // Rule at src\isa\s390x\inst.isle line 4420.
    return v4;
}

// Generated as internal constructor for term vec_lshl_by_bit.
pub fn constructor_vec_lshl_by_bit<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, I8X16, &VecBinaryOp::LShLByBit128, arg0, arg1);
    // Rule at src\isa\s390x\inst.isle line 4423.
    return v4;
}

// Generated as internal constructor for term shiftop_lshr.
pub fn constructor_shiftop_lshr<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> ShiftOp {
    match arg0 {
        I32 => {
            // Rule at src\isa\s390x\inst.isle line 4429.
            return ShiftOp::LShR32;
        }
        I64 => {
            // Rule at src\isa\s390x\inst.isle line 4430.
            return ShiftOp::LShR64;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "shiftop_lshr", "src\\isa\\s390x\\inst.isle line 4428")
}

// Generated as internal constructor for term lshr_reg.
pub fn constructor_lshr_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_shiftop_lshr(ctx, arg0);
    let v5 = constructor_shift_rr(ctx, arg0, v3, arg1, 0x0_u8, arg2);
    // Rule at src\isa\s390x\inst.isle line 4433.
    return v5;
}

// Generated as internal constructor for term lshr_imm.
pub fn constructor_lshr_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u8,
) -> Reg {
    let v3 = &constructor_shiftop_lshr(ctx, arg0);
    let v4 = C::zero_reg(ctx);
    let v5 = constructor_shift_rr(ctx, arg0, v3, arg1, arg2, v4);
    // Rule at src\isa\s390x\inst.isle line 4437.
    return v5;
}

// Generated as internal constructor for term vec_shiftop_lshr.
pub fn constructor_vec_shiftop_lshr<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> VecShiftOp {
    match arg0 {
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 4441.
            return VecShiftOp::LShR8x16;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 4442.
            return VecShiftOp::LShR16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4443.
            return VecShiftOp::LShR32x4;
        }
        I64X2 => {
            // Rule at src\isa\s390x\inst.isle line 4444.
            return VecShiftOp::LShR64x2;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_shiftop_lshr", "src\\isa\\s390x\\inst.isle line 4440")
}

// Generated as internal constructor for term vec_lshr_reg.
pub fn constructor_vec_lshr_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_vec_shiftop_lshr(ctx, arg0);
    let v5 = constructor_vec_shift_rr(ctx, arg0, v3, arg1, 0x0_u8, arg2);
    // Rule at src\isa\s390x\inst.isle line 4447.
    return v5;
}

// Generated as internal constructor for term vec_lshr_imm.
pub fn constructor_vec_lshr_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u8,
) -> Reg {
    let v3 = &constructor_vec_shiftop_lshr(ctx, arg0);
    let v4 = C::zero_reg(ctx);
    let v5 = constructor_vec_shift_rr(ctx, arg0, v3, arg1, arg2, v4);
    // Rule at src\isa\s390x\inst.isle line 4451.
    return v5;
}

// Generated as internal constructor for term vec_lshr_by_byte.
pub fn constructor_vec_lshr_by_byte<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, I8X16, &VecBinaryOp::LShRByByte128, arg0, arg1);
    // Rule at src\isa\s390x\inst.isle line 4455.
    return v4;
}

// Generated as internal constructor for term vec_lshr_by_bit.
pub fn constructor_vec_lshr_by_bit<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, I8X16, &VecBinaryOp::LShRByBit128, arg0, arg1);
    // Rule at src\isa\s390x\inst.isle line 4458.
    return v4;
}

// Generated as internal constructor for term shiftop_ashr.
pub fn constructor_shiftop_ashr<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> ShiftOp {
    match arg0 {
        I32 => {
            // Rule at src\isa\s390x\inst.isle line 4464.
            return ShiftOp::AShR32;
        }
        I64 => {
            // Rule at src\isa\s390x\inst.isle line 4465.
            return ShiftOp::AShR64;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "shiftop_ashr", "src\\isa\\s390x\\inst.isle line 4463")
}

// Generated as internal constructor for term ashr_reg.
pub fn constructor_ashr_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_shiftop_ashr(ctx, arg0);
    let v5 = constructor_shift_rr(ctx, arg0, v3, arg1, 0x0_u8, arg2);
    // Rule at src\isa\s390x\inst.isle line 4468.
    return v5;
}

// Generated as internal constructor for term ashr_imm.
pub fn constructor_ashr_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u8,
) -> Reg {
    let v3 = &constructor_shiftop_ashr(ctx, arg0);
    let v4 = C::zero_reg(ctx);
    let v5 = constructor_shift_rr(ctx, arg0, v3, arg1, arg2, v4);
    // Rule at src\isa\s390x\inst.isle line 4472.
    return v5;
}

// Generated as internal constructor for term vec_shiftop_ashr.
pub fn constructor_vec_shiftop_ashr<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> VecShiftOp {
    match arg0 {
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 4476.
            return VecShiftOp::AShR8x16;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 4477.
            return VecShiftOp::AShR16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4478.
            return VecShiftOp::AShR32x4;
        }
        I64X2 => {
            // Rule at src\isa\s390x\inst.isle line 4479.
            return VecShiftOp::AShR64x2;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_shiftop_ashr", "src\\isa\\s390x\\inst.isle line 4475")
}

// Generated as internal constructor for term vec_ashr_reg.
pub fn constructor_vec_ashr_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_vec_shiftop_ashr(ctx, arg0);
    let v5 = constructor_vec_shift_rr(ctx, arg0, v3, arg1, 0x0_u8, arg2);
    // Rule at src\isa\s390x\inst.isle line 4482.
    return v5;
}

// Generated as internal constructor for term vec_ashr_imm.
pub fn constructor_vec_ashr_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u8,
) -> Reg {
    let v3 = &constructor_vec_shiftop_ashr(ctx, arg0);
    let v4 = C::zero_reg(ctx);
    let v5 = constructor_vec_shift_rr(ctx, arg0, v3, arg1, arg2, v4);
    // Rule at src\isa\s390x\inst.isle line 4486.
    return v5;
}

// Generated as internal constructor for term vec_ashr_by_byte.
pub fn constructor_vec_ashr_by_byte<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, I8X16, &VecBinaryOp::AShRByByte128, arg0, arg1);
    // Rule at src\isa\s390x\inst.isle line 4490.
    return v4;
}

// Generated as internal constructor for term vec_ashr_by_bit.
pub fn constructor_vec_ashr_by_bit<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, I8X16, &VecBinaryOp::AShRByBit128, arg0, arg1);
    // Rule at src\isa\s390x\inst.isle line 4493.
    return v4;
}

// Generated as internal constructor for term popcnt_byte.
pub fn constructor_popcnt_byte<C: Context>(
    ctx: &mut C,
    arg0: Reg,
) -> Reg {
    let v3 = constructor_unary_rr(ctx, I64, &UnaryOp::PopcntByte, arg0);
    // Rule at src\isa\s390x\inst.isle line 4499.
    return v3;
}

// Generated as internal constructor for term popcnt_reg.
pub fn constructor_popcnt_reg<C: Context>(
    ctx: &mut C,
    arg0: Reg,
) -> Reg {
    let v3 = constructor_unary_rr(ctx, I64, &UnaryOp::PopcntReg, arg0);
    // Rule at src\isa\s390x\inst.isle line 4502.
    return v3;
}

// Generated as internal constructor for term vecop_popcnt.
pub fn constructor_vecop_popcnt<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> VecUnaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 4505.
            return VecUnaryOp::Popcnt8x16;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 4506.
            return VecUnaryOp::Popcnt16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4507.
            return VecUnaryOp::Popcnt32x4;
        }
        I64X2 => {
            // Rule at src\isa\s390x\inst.isle line 4508.
            return VecUnaryOp::Popcnt64x2;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vecop_popcnt", "src\\isa\\s390x\\inst.isle line 4504")
}

// Generated as internal constructor for term vec_popcnt.
pub fn constructor_vec_popcnt<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v2 = &constructor_vecop_popcnt(ctx, arg0);
    let v3 = constructor_vec_rr(ctx, arg0, v2, arg1);
    // Rule at src\isa\s390x\inst.isle line 4511.
    return v3;
}

// Generated as internal constructor for term atomic_rmw_and.
pub fn constructor_atomic_rmw_and<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    match arg0 {
        I32 => {
            let v5 = constructor_atomic_rmw_impl(ctx, I32, &ALUOp::And32, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 4517.
            return v5;
        }
        I64 => {
            let v8 = constructor_atomic_rmw_impl(ctx, I64, &ALUOp::And64, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 4518.
            return v8;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "atomic_rmw_and", "src\\isa\\s390x\\inst.isle line 4516")
}

// Generated as internal constructor for term atomic_rmw_or.
pub fn constructor_atomic_rmw_or<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    match arg0 {
        I32 => {
            let v5 = constructor_atomic_rmw_impl(ctx, I32, &ALUOp::Orr32, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 4521.
            return v5;
        }
        I64 => {
            let v8 = constructor_atomic_rmw_impl(ctx, I64, &ALUOp::Orr64, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 4522.
            return v8;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "atomic_rmw_or", "src\\isa\\s390x\\inst.isle line 4520")
}

// Generated as internal constructor for term atomic_rmw_xor.
pub fn constructor_atomic_rmw_xor<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    match arg0 {
        I32 => {
            let v5 = constructor_atomic_rmw_impl(ctx, I32, &ALUOp::Xor32, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 4525.
            return v5;
        }
        I64 => {
            let v8 = constructor_atomic_rmw_impl(ctx, I64, &ALUOp::Xor64, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 4526.
            return v8;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "atomic_rmw_xor", "src\\isa\\s390x\\inst.isle line 4524")
}

// Generated as internal constructor for term atomic_rmw_add.
pub fn constructor_atomic_rmw_add<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    match arg0 {
        I32 => {
            let v5 = constructor_atomic_rmw_impl(ctx, I32, &ALUOp::Add32, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 4529.
            return v5;
        }
        I64 => {
            let v8 = constructor_atomic_rmw_impl(ctx, I64, &ALUOp::Add64, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 4530.
            return v8;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "atomic_rmw_add", "src\\isa\\s390x\\inst.isle line 4528")
}

// Generated as internal constructor for term atomic_cas_impl.
pub fn constructor_atomic_cas_impl<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: &MemArg,
) -> Reg {
    match arg0 {
        I32 => {
            let v4 = constructor_atomic_cas32(ctx, arg1, arg2, arg3);
            // Rule at src\isa\s390x\inst.isle line 4536.
            return v4;
        }
        I64 => {
            let v5 = constructor_atomic_cas64(ctx, arg1, arg2, arg3);
            // Rule at src\isa\s390x\inst.isle line 4537.
            return v5;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "atomic_cas_impl", "src\\isa\\s390x\\inst.isle line 4535")
}

// Generated as internal constructor for term push_atomic_cas.
pub fn constructor_push_atomic_cas<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: WritableReg,
    arg3: Reg,
    arg4: &MemArg,
) -> Reg {
    match arg1 {
        I32 => {
            let v5 = constructor_push_atomic_cas32(ctx, arg0, arg2, arg3, arg4);
            // Rule at src\isa\s390x\inst.isle line 4540.
            return v5;
        }
        I64 => {
            let v6 = constructor_push_atomic_cas64(ctx, arg0, arg2, arg3, arg4);
            // Rule at src\isa\s390x\inst.isle line 4541.
            return v6;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "push_atomic_cas", "src\\isa\\s390x\\inst.isle line 4539")
}

// Generated as internal constructor for term fpuop2_add.
pub fn constructor_fpuop2_add<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> FPUOp2 {
    match arg0 {
        F32 => {
            // Rule at src\isa\s390x\inst.isle line 4547.
            return FPUOp2::Add32;
        }
        F64 => {
            // Rule at src\isa\s390x\inst.isle line 4548.
            return FPUOp2::Add64;
        }
        F32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4549.
            return FPUOp2::Add32x4;
        }
        F64X2 => {
            // Rule at src\isa\s390x\inst.isle line 4550.
            return FPUOp2::Add64x2;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "fpuop2_add", "src\\isa\\s390x\\inst.isle line 4546")
}

// Generated as internal constructor for term fadd_reg.
pub fn constructor_fadd_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_fpuop2_add(ctx, arg0);
    let v4 = constructor_fpu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4553.
    return v4;
}

// Generated as internal constructor for term fpuop2_sub.
pub fn constructor_fpuop2_sub<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> FPUOp2 {
    match arg0 {
        F32 => {
            // Rule at src\isa\s390x\inst.isle line 4559.
            return FPUOp2::Sub32;
        }
        F64 => {
            // Rule at src\isa\s390x\inst.isle line 4560.
            return FPUOp2::Sub64;
        }
        F32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4561.
            return FPUOp2::Sub32x4;
        }
        F64X2 => {
            // Rule at src\isa\s390x\inst.isle line 4562.
            return FPUOp2::Sub64x2;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "fpuop2_sub", "src\\isa\\s390x\\inst.isle line 4558")
}

// Generated as internal constructor for term fsub_reg.
pub fn constructor_fsub_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_fpuop2_sub(ctx, arg0);
    let v4 = constructor_fpu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4565.
    return v4;
}

// Generated as internal constructor for term fpuop2_mul.
pub fn constructor_fpuop2_mul<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> FPUOp2 {
    match arg0 {
        F32 => {
            // Rule at src\isa\s390x\inst.isle line 4571.
            return FPUOp2::Mul32;
        }
        F64 => {
            // Rule at src\isa\s390x\inst.isle line 4572.
            return FPUOp2::Mul64;
        }
        F32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4573.
            return FPUOp2::Mul32x4;
        }
        F64X2 => {
            // Rule at src\isa\s390x\inst.isle line 4574.
            return FPUOp2::Mul64x2;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "fpuop2_mul", "src\\isa\\s390x\\inst.isle line 4570")
}

// Generated as internal constructor for term fmul_reg.
pub fn constructor_fmul_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_fpuop2_mul(ctx, arg0);
    let v4 = constructor_fpu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4577.
    return v4;
}

// Generated as internal constructor for term fpuop2_div.
pub fn constructor_fpuop2_div<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> FPUOp2 {
    match arg0 {
        F32 => {
            // Rule at src\isa\s390x\inst.isle line 4583.
            return FPUOp2::Div32;
        }
        F64 => {
            // Rule at src\isa\s390x\inst.isle line 4584.
            return FPUOp2::Div64;
        }
        F32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4585.
            return FPUOp2::Div32x4;
        }
        F64X2 => {
            // Rule at src\isa\s390x\inst.isle line 4586.
            return FPUOp2::Div64x2;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "fpuop2_div", "src\\isa\\s390x\\inst.isle line 4582")
}

// Generated as internal constructor for term fdiv_reg.
pub fn constructor_fdiv_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_fpuop2_div(ctx, arg0);
    let v4 = constructor_fpu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4589.
    return v4;
}

// Generated as internal constructor for term fpuop2_min.
pub fn constructor_fpuop2_min<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> FPUOp2 {
    match arg0 {
        F32 => {
            // Rule at src\isa\s390x\inst.isle line 4595.
            return FPUOp2::Min32;
        }
        F64 => {
            // Rule at src\isa\s390x\inst.isle line 4596.
            return FPUOp2::Min64;
        }
        F32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4597.
            return FPUOp2::Min32x4;
        }
        F64X2 => {
            // Rule at src\isa\s390x\inst.isle line 4598.
            return FPUOp2::Min64x2;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "fpuop2_min", "src\\isa\\s390x\\inst.isle line 4594")
}

// Generated as internal constructor for term fmin_reg.
pub fn constructor_fmin_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_fpuop2_min(ctx, arg0);
    let v4 = constructor_fpu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4601.
    return v4;
}

// Generated as internal constructor for term fpuop2_max.
pub fn constructor_fpuop2_max<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> FPUOp2 {
    match arg0 {
        F32 => {
            // Rule at src\isa\s390x\inst.isle line 4607.
            return FPUOp2::Max32;
        }
        F64 => {
            // Rule at src\isa\s390x\inst.isle line 4608.
            return FPUOp2::Max64;
        }
        F32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4609.
            return FPUOp2::Max32x4;
        }
        F64X2 => {
            // Rule at src\isa\s390x\inst.isle line 4610.
            return FPUOp2::Max64x2;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "fpuop2_max", "src\\isa\\s390x\\inst.isle line 4606")
}

// Generated as internal constructor for term fmax_reg.
pub fn constructor_fmax_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_fpuop2_max(ctx, arg0);
    let v4 = constructor_fpu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4613.
    return v4;
}

// Generated as internal constructor for term fpuop2_min_pseudo.
pub fn constructor_fpuop2_min_pseudo<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> FPUOp2 {
    match arg0 {
        F32 => {
            // Rule at src\isa\s390x\inst.isle line 4619.
            return FPUOp2::MinPseudo32;
        }
        F64 => {
            // Rule at src\isa\s390x\inst.isle line 4620.
            return FPUOp2::MinPseudo64;
        }
        F32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4621.
            return FPUOp2::MinPseudo32x4;
        }
        F64X2 => {
            // Rule at src\isa\s390x\inst.isle line 4622.
            return FPUOp2::MinPseudo64x2;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "fpuop2_min_pseudo", "src\\isa\\s390x\\inst.isle line 4618")
}

// Generated as internal constructor for term fmin_pseudo_reg.
pub fn constructor_fmin_pseudo_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_fpuop2_min_pseudo(ctx, arg0);
    let v4 = constructor_fpu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4625.
    return v4;
}

// Generated as internal constructor for term fpuop2_max_pseudo.
pub fn constructor_fpuop2_max_pseudo<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> FPUOp2 {
    match arg0 {
        F32 => {
            // Rule at src\isa\s390x\inst.isle line 4631.
            return FPUOp2::MaxPseudo32;
        }
        F64 => {
            // Rule at src\isa\s390x\inst.isle line 4632.
            return FPUOp2::MaxPseudo64;
        }
        F32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4633.
            return FPUOp2::MaxPseudo32x4;
        }
        F64X2 => {
            // Rule at src\isa\s390x\inst.isle line 4634.
            return FPUOp2::MaxPseudo64x2;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "fpuop2_max_pseudo", "src\\isa\\s390x\\inst.isle line 4630")
}

// Generated as internal constructor for term fmax_pseudo_reg.
pub fn constructor_fmax_pseudo_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_fpuop2_max_pseudo(ctx, arg0);
    let v4 = constructor_fpu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4637.
    return v4;
}

// Generated as internal constructor for term fpuop3_fma.
pub fn constructor_fpuop3_fma<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> FPUOp3 {
    match arg0 {
        F32 => {
            // Rule at src\isa\s390x\inst.isle line 4643.
            return FPUOp3::MAdd32;
        }
        F64 => {
            // Rule at src\isa\s390x\inst.isle line 4644.
            return FPUOp3::MAdd64;
        }
        F32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4645.
            return FPUOp3::MAdd32x4;
        }
        F64X2 => {
            // Rule at src\isa\s390x\inst.isle line 4646.
            return FPUOp3::MAdd64x2;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "fpuop3_fma", "src\\isa\\s390x\\inst.isle line 4642")
}

// Generated as internal constructor for term fma_reg.
pub fn constructor_fma_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = &constructor_fpuop3_fma(ctx, arg0);
    let v5 = constructor_fpu_rrrr(ctx, arg0, v4, arg1, arg2, arg3);
    // Rule at src\isa\s390x\inst.isle line 4649.
    return v5;
}

// Generated as internal constructor for term fpuop1_sqrt.
pub fn constructor_fpuop1_sqrt<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> FPUOp1 {
    match arg0 {
        F32 => {
            // Rule at src\isa\s390x\inst.isle line 4655.
            return FPUOp1::Sqrt32;
        }
        F64 => {
            // Rule at src\isa\s390x\inst.isle line 4656.
            return FPUOp1::Sqrt64;
        }
        F32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4657.
            return FPUOp1::Sqrt32x4;
        }
        F64X2 => {
            // Rule at src\isa\s390x\inst.isle line 4658.
            return FPUOp1::Sqrt64x2;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "fpuop1_sqrt", "src\\isa\\s390x\\inst.isle line 4654")
}

// Generated as internal constructor for term sqrt_reg.
pub fn constructor_sqrt_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v2 = &constructor_fpuop1_sqrt(ctx, arg0);
    let v3 = constructor_fpu_rr(ctx, arg0, v2, arg1);
    // Rule at src\isa\s390x\inst.isle line 4661.
    return v3;
}

// Generated as internal constructor for term fpuop1_neg.
pub fn constructor_fpuop1_neg<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> FPUOp1 {
    match arg0 {
        F32 => {
            // Rule at src\isa\s390x\inst.isle line 4667.
            return FPUOp1::Neg32;
        }
        F64 => {
            // Rule at src\isa\s390x\inst.isle line 4668.
            return FPUOp1::Neg64;
        }
        F32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4669.
            return FPUOp1::Neg32x4;
        }
        F64X2 => {
            // Rule at src\isa\s390x\inst.isle line 4670.
            return FPUOp1::Neg64x2;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "fpuop1_neg", "src\\isa\\s390x\\inst.isle line 4666")
}

// Generated as internal constructor for term fneg_reg.
pub fn constructor_fneg_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v2 = &constructor_fpuop1_neg(ctx, arg0);
    let v3 = constructor_fpu_rr(ctx, arg0, v2, arg1);
    // Rule at src\isa\s390x\inst.isle line 4673.
    return v3;
}

// Generated as internal constructor for term fpuop1_abs.
pub fn constructor_fpuop1_abs<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> FPUOp1 {
    match arg0 {
        F32 => {
            // Rule at src\isa\s390x\inst.isle line 4679.
            return FPUOp1::Abs32;
        }
        F64 => {
            // Rule at src\isa\s390x\inst.isle line 4680.
            return FPUOp1::Abs64;
        }
        F32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4681.
            return FPUOp1::Abs32x4;
        }
        F64X2 => {
            // Rule at src\isa\s390x\inst.isle line 4682.
            return FPUOp1::Abs64x2;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "fpuop1_abs", "src\\isa\\s390x\\inst.isle line 4678")
}

// Generated as internal constructor for term fabs_reg.
pub fn constructor_fabs_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v2 = &constructor_fpuop1_abs(ctx, arg0);
    let v3 = constructor_fpu_rr(ctx, arg0, v2, arg1);
    // Rule at src\isa\s390x\inst.isle line 4685.
    return v3;
}

// Generated as internal constructor for term fpuroundop_round.
pub fn constructor_fpuroundop_round<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> FpuRoundOp {
    match arg0 {
        F32 => {
            // Rule at src\isa\s390x\inst.isle line 4691.
            return FpuRoundOp::Round32;
        }
        F64 => {
            // Rule at src\isa\s390x\inst.isle line 4692.
            return FpuRoundOp::Round64;
        }
        F32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4693.
            return FpuRoundOp::Round32x4;
        }
        F64X2 => {
            // Rule at src\isa\s390x\inst.isle line 4694.
            return FpuRoundOp::Round64x2;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "fpuroundop_round", "src\\isa\\s390x\\inst.isle line 4690")
}

// Generated as internal constructor for term ceil_reg.
pub fn constructor_ceil_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v2 = &constructor_fpuroundop_round(ctx, arg0);
    let v4 = constructor_fpu_round(ctx, arg0, v2, &FpuRoundMode::ToPosInfinity, arg1);
    // Rule at src\isa\s390x\inst.isle line 4697.
    return v4;
}

// Generated as internal constructor for term floor_reg.
pub fn constructor_floor_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v2 = &constructor_fpuroundop_round(ctx, arg0);
    let v4 = constructor_fpu_round(ctx, arg0, v2, &FpuRoundMode::ToNegInfinity, arg1);
    // Rule at src\isa\s390x\inst.isle line 4701.
    return v4;
}

// Generated as internal constructor for term trunc_reg.
pub fn constructor_trunc_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v2 = &constructor_fpuroundop_round(ctx, arg0);
    let v4 = constructor_fpu_round(ctx, arg0, v2, &FpuRoundMode::ToZero, arg1);
    // Rule at src\isa\s390x\inst.isle line 4705.
    return v4;
}

// Generated as internal constructor for term nearest_reg.
pub fn constructor_nearest_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v2 = &constructor_fpuroundop_round(ctx, arg0);
    let v4 = constructor_fpu_round(ctx, arg0, v2, &FpuRoundMode::ToNearestTiesToEven, arg1);
    // Rule at src\isa\s390x\inst.isle line 4709.
    return v4;
}

// Generated as internal constructor for term fpromote_reg.
pub fn constructor_fpromote_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Type,
    arg2: Reg,
) -> Reg {
    if arg0 == arg1 {
        // Rule at src\isa\s390x\inst.isle line 4716.
        return arg2;
    }
    match arg0 {
        F64 => {
            if arg1 == F32 {
                let v5 = constructor_fpu_rr(ctx, F64, &FPUOp1::Cvt32To64, arg2);
                // Rule at src\isa\s390x\inst.isle line 4717.
                return v5;
            }
        }
        F64X2 => {
            if arg1 == F32X4 {
                let v7 = constructor_fpu_rr(ctx, F64, &FPUOp1::Cvt32x4To64x2, arg2);
                // Rule at src\isa\s390x\inst.isle line 4719.
                return v7;
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "fpromote_reg", "src\\isa\\s390x\\inst.isle line 4715")
}

// Generated as internal constructor for term fdemote_reg.
pub fn constructor_fdemote_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Type,
    arg2: &FpuRoundMode,
    arg3: Reg,
) -> Reg {
    if arg0 == arg1 {
        // Rule at src\isa\s390x\inst.isle line 4726.
        return arg3;
    }
    match arg0 {
        F32 => {
            if arg1 == F64 {
                let v6 = constructor_fpu_round(ctx, F32, &FpuRoundOp::Cvt64To32, arg2, arg3);
                // Rule at src\isa\s390x\inst.isle line 4727.
                return v6;
            }
        }
        F32X4 => {
            if arg1 == F64X2 {
                let v9 = constructor_fpu_round(ctx, F32X4, &FpuRoundOp::Cvt64x2To32x4, arg2, arg3);
                // Rule at src\isa\s390x\inst.isle line 4729.
                return v9;
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "fdemote_reg", "src\\isa\\s390x\\inst.isle line 4725")
}

// Generated as internal constructor for term fcvt_from_uint_reg.
pub fn constructor_fcvt_from_uint_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FpuRoundMode,
    arg2: Reg,
) -> Reg {
    match arg0 {
        F32 => {
            let v7 = C::zero_reg(ctx);
            let v8 = constructor_vec_insert_lane_undef(ctx, I32X4, arg2, 0x0_u8, v7);
            let v9 = constructor_fpu_round(ctx, F32, &FpuRoundOp::FromUInt32, arg1, v8);
            // Rule at src\isa\s390x\inst.isle line 4736.
            return v9;
        }
        F64 => {
            let v7 = C::zero_reg(ctx);
            let v13 = constructor_vec_insert_lane_undef(ctx, I64X2, arg2, 0x0_u8, v7);
            let v14 = constructor_fpu_round(ctx, F64, &FpuRoundOp::FromUInt64, arg1, v13);
            // Rule at src\isa\s390x\inst.isle line 4738.
            return v14;
        }
        F32X4 => {
            let v17 = constructor_fpu_round(ctx, F32X4, &FpuRoundOp::FromUInt32x4, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 4740.
            return v17;
        }
        F64X2 => {
            let v20 = constructor_fpu_round(ctx, F64X2, &FpuRoundOp::FromUInt64x2, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 4742.
            return v20;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "fcvt_from_uint_reg", "src\\isa\\s390x\\inst.isle line 4735")
}

// Generated as internal constructor for term fcvt_from_sint_reg.
pub fn constructor_fcvt_from_sint_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FpuRoundMode,
    arg2: Reg,
) -> Reg {
    match arg0 {
        F32 => {
            let v7 = C::zero_reg(ctx);
            let v8 = constructor_vec_insert_lane_undef(ctx, I32X4, arg2, 0x0_u8, v7);
            let v9 = constructor_fpu_round(ctx, F32, &FpuRoundOp::FromSInt32, arg1, v8);
            // Rule at src\isa\s390x\inst.isle line 4749.
            return v9;
        }
        F64 => {
            let v7 = C::zero_reg(ctx);
            let v13 = constructor_vec_insert_lane_undef(ctx, I64X2, arg2, 0x0_u8, v7);
            let v14 = constructor_fpu_round(ctx, F64, &FpuRoundOp::FromSInt64, arg1, v13);
            // Rule at src\isa\s390x\inst.isle line 4751.
            return v14;
        }
        F32X4 => {
            let v17 = constructor_fpu_round(ctx, F32X4, &FpuRoundOp::FromSInt32x4, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 4753.
            return v17;
        }
        F64X2 => {
            let v20 = constructor_fpu_round(ctx, F64X2, &FpuRoundOp::FromSInt64x2, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 4755.
            return v20;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "fcvt_from_sint_reg", "src\\isa\\s390x\\inst.isle line 4748")
}

// Generated as internal constructor for term fcvt_flt_ty.
pub fn constructor_fcvt_flt_ty<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Type,
) -> Type {
    match arg1 {
        F32 => {
            let v1 = C::fits_in_32(ctx, arg0);
            if let Some(v2) = v1 {
                let v4 = C::vxrs_ext2_enabled(ctx, arg1);
                if let Some(v5) = v4 {
                    // Rule at src\isa\s390x\inst.isle line 4762.
                    return F32;
                }
            }
            let v7 = C::fits_in_64(ctx, arg0);
            if let Some(v8) = v7 {
                // Rule at src\isa\s390x\inst.isle line 4763.
                return F64;
            }
        }
        F64 => {
            let v7 = C::fits_in_64(ctx, arg0);
            if let Some(v8) = v7 {
                // Rule at src\isa\s390x\inst.isle line 4764.
                return F64;
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "fcvt_flt_ty", "src\\isa\\s390x\\inst.isle line 4761")
}

// Generated as internal constructor for term fcvt_int_ty.
pub fn constructor_fcvt_int_ty<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Type,
) -> Type {
    match arg1 {
        F32 => {
            let v1 = C::fits_in_32(ctx, arg0);
            if let Some(v2) = v1 {
                let v4 = C::vxrs_ext2_enabled(ctx, arg1);
                if let Some(v5) = v4 {
                    // Rule at src\isa\s390x\inst.isle line 4767.
                    return I32;
                }
            }
            let v7 = C::fits_in_64(ctx, arg0);
            if let Some(v8) = v7 {
                // Rule at src\isa\s390x\inst.isle line 4768.
                return I64;
            }
        }
        F64 => {
            let v7 = C::fits_in_64(ctx, arg0);
            if let Some(v8) = v7 {
                // Rule at src\isa\s390x\inst.isle line 4769.
                return I64;
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "fcvt_int_ty", "src\\isa\\s390x\\inst.isle line 4766")
}

// Generated as internal constructor for term fcvt_to_uint_reg.
pub fn constructor_fcvt_to_uint_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FpuRoundMode,
    arg2: Reg,
) -> Reg {
    match arg0 {
        F32 => {
            let v6 = constructor_fpu_round(ctx, F32, &FpuRoundOp::ToUInt32, arg1, arg2);
            let v8 = C::zero_reg(ctx);
            let v9 = constructor_vec_extract_lane(ctx, I32X4, v6, 0x0_u8, v8);
            // Rule at src\isa\s390x\inst.isle line 4775.
            return v9;
        }
        F64 => {
            let v13 = constructor_fpu_round(ctx, F64, &FpuRoundOp::ToUInt64, arg1, arg2);
            let v8 = C::zero_reg(ctx);
            let v14 = constructor_vec_extract_lane(ctx, I64X2, v13, 0x0_u8, v8);
            // Rule at src\isa\s390x\inst.isle line 4777.
            return v14;
        }
        F32X4 => {
            let v17 = constructor_fpu_round(ctx, F32X4, &FpuRoundOp::ToUInt32x4, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 4779.
            return v17;
        }
        F64X2 => {
            let v20 = constructor_fpu_round(ctx, F64X2, &FpuRoundOp::ToUInt64x2, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 4781.
            return v20;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "fcvt_to_uint_reg", "src\\isa\\s390x\\inst.isle line 4774")
}

// Generated as internal constructor for term fcvt_to_uint_ub.
pub fn constructor_fcvt_to_uint_ub<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Type,
) -> Reg {
    match arg0 {
        F32 => {
            let v3 = C::ty_bits(ctx, arg1);
            let v4 = C::fcvt_to_uint_ub32(ctx, v3);
            let v5 = constructor_imm(ctx, F32, v4);
            // Rule at src\isa\s390x\inst.isle line 4785.
            return v5;
        }
        F64 => {
            let v3 = C::ty_bits(ctx, arg1);
            let v7 = C::fcvt_to_uint_ub64(ctx, v3);
            let v8 = constructor_imm(ctx, F64, v7);
            // Rule at src\isa\s390x\inst.isle line 4787.
            return v8;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "fcvt_to_uint_ub", "src\\isa\\s390x\\inst.isle line 4784")
}

// Generated as internal constructor for term fcvt_to_uint_lb.
pub fn constructor_fcvt_to_uint_lb<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> Reg {
    match arg0 {
        F32 => {
            let v2 = C::fcvt_to_uint_lb32(ctx);
            let v3 = constructor_imm(ctx, F32, v2);
            // Rule at src\isa\s390x\inst.isle line 4791.
            return v3;
        }
        F64 => {
            let v5 = C::fcvt_to_uint_lb64(ctx);
            let v6 = constructor_imm(ctx, F64, v5);
            // Rule at src\isa\s390x\inst.isle line 4792.
            return v6;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "fcvt_to_uint_lb", "src\\isa\\s390x\\inst.isle line 4790")
}

// Generated as internal constructor for term fcvt_to_sint_reg.
pub fn constructor_fcvt_to_sint_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FpuRoundMode,
    arg2: Reg,
) -> Reg {
    match arg0 {
        F32 => {
            let v6 = constructor_fpu_round(ctx, F32, &FpuRoundOp::ToSInt32, arg1, arg2);
            let v8 = C::zero_reg(ctx);
            let v9 = constructor_vec_extract_lane(ctx, F32X4, v6, 0x0_u8, v8);
            // Rule at src\isa\s390x\inst.isle line 4807.
            return v9;
        }
        F64 => {
            let v13 = constructor_fpu_round(ctx, F64, &FpuRoundOp::ToSInt64, arg1, arg2);
            let v8 = C::zero_reg(ctx);
            let v14 = constructor_vec_extract_lane(ctx, F64X2, v13, 0x0_u8, v8);
            // Rule at src\isa\s390x\inst.isle line 4809.
            return v14;
        }
        F32X4 => {
            let v16 = constructor_fpu_round(ctx, F32X4, &FpuRoundOp::ToSInt32x4, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 4811.
            return v16;
        }
        F64X2 => {
            let v18 = constructor_fpu_round(ctx, F64X2, &FpuRoundOp::ToSInt64x2, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 4813.
            return v18;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "fcvt_to_sint_reg", "src\\isa\\s390x\\inst.isle line 4806")
}

// Generated as internal constructor for term fcvt_to_sint_ub.
pub fn constructor_fcvt_to_sint_ub<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Type,
) -> Reg {
    match arg0 {
        F32 => {
            let v3 = C::ty_bits(ctx, arg1);
            let v4 = C::fcvt_to_sint_ub32(ctx, v3);
            let v5 = constructor_imm(ctx, F32, v4);
            // Rule at src\isa\s390x\inst.isle line 4817.
            return v5;
        }
        F64 => {
            let v3 = C::ty_bits(ctx, arg1);
            let v7 = C::fcvt_to_sint_ub64(ctx, v3);
            let v8 = constructor_imm(ctx, F64, v7);
            // Rule at src\isa\s390x\inst.isle line 4819.
            return v8;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "fcvt_to_sint_ub", "src\\isa\\s390x\\inst.isle line 4816")
}

// Generated as internal constructor for term fcvt_to_sint_lb.
pub fn constructor_fcvt_to_sint_lb<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Type,
) -> Reg {
    match arg0 {
        F32 => {
            let v3 = C::ty_bits(ctx, arg1);
            let v4 = C::fcvt_to_sint_lb32(ctx, v3);
            let v5 = constructor_imm(ctx, F32, v4);
            // Rule at src\isa\s390x\inst.isle line 4823.
            return v5;
        }
        F64 => {
            let v3 = C::ty_bits(ctx, arg1);
            let v7 = C::fcvt_to_sint_lb64(ctx, v3);
            let v8 = constructor_imm(ctx, F64, v7);
            // Rule at src\isa\s390x\inst.isle line 4825.
            return v8;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "fcvt_to_sint_lb", "src\\isa\\s390x\\inst.isle line 4822")
}

// Generated as internal constructor for term cmpop_cmps.
pub fn constructor_cmpop_cmps<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> CmpOp {
    match arg0 {
        I32 => {
            // Rule at src\isa\s390x\inst.isle line 4841.
            return CmpOp::CmpS32;
        }
        I64 => {
            // Rule at src\isa\s390x\inst.isle line 4842.
            return CmpOp::CmpS64;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "cmpop_cmps", "src\\isa\\s390x\\inst.isle line 4840")
}

// Generated as internal constructor for term cmpop_cmps_sext16.
pub fn constructor_cmpop_cmps_sext16<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> CmpOp {
    match arg0 {
        I32 => {
            // Rule at src\isa\s390x\inst.isle line 4845.
            return CmpOp::CmpS32Ext16;
        }
        I64 => {
            // Rule at src\isa\s390x\inst.isle line 4846.
            return CmpOp::CmpS64Ext16;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "cmpop_cmps_sext16", "src\\isa\\s390x\\inst.isle line 4844")
}

// Generated as internal constructor for term cmpop_cmps_sext32.
pub fn constructor_cmpop_cmps_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> CmpOp {
    if arg0 == I64 {
        // Rule at src\isa\s390x\inst.isle line 4849.
        return CmpOp::CmpS64Ext32;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "cmpop_cmps_sext32", "src\\isa\\s390x\\inst.isle line 4848")
}

// Generated as internal constructor for term icmps_reg.
pub fn constructor_icmps_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmps(ctx, arg0);
    let v4 = &constructor_cmp_rr(ctx, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4852.
    return v4.clone();
}

// Generated as internal constructor for term icmps_reg_sext32.
pub fn constructor_icmps_reg_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmps_sext32(ctx, arg0);
    let v4 = &constructor_cmp_rr(ctx, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4855.
    return v4.clone();
}

// Generated as internal constructor for term icmps_simm16.
pub fn constructor_icmps_simm16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: i16,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmps(ctx, arg0);
    let v4 = &constructor_cmp_rsimm16(ctx, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4858.
    return v4.clone();
}

// Generated as internal constructor for term icmps_simm32.
pub fn constructor_icmps_simm32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: i32,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmps(ctx, arg0);
    let v4 = &constructor_cmp_rsimm32(ctx, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4861.
    return v4.clone();
}

// Generated as internal constructor for term icmps_mem.
pub fn constructor_icmps_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmps(ctx, arg0);
    let v4 = &constructor_cmp_rx(ctx, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4864.
    return v4.clone();
}

// Generated as internal constructor for term icmps_mem_sext16.
pub fn constructor_icmps_mem_sext16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmps_sext16(ctx, arg0);
    let v4 = &constructor_cmp_rx(ctx, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4867.
    return v4.clone();
}

// Generated as internal constructor for term icmps_mem_sext32.
pub fn constructor_icmps_mem_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmps_sext32(ctx, arg0);
    let v4 = &constructor_cmp_rx(ctx, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4870.
    return v4.clone();
}

// Generated as internal constructor for term cmpop_cmpu.
pub fn constructor_cmpop_cmpu<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> CmpOp {
    match arg0 {
        I32 => {
            // Rule at src\isa\s390x\inst.isle line 4876.
            return CmpOp::CmpL32;
        }
        I64 => {
            // Rule at src\isa\s390x\inst.isle line 4877.
            return CmpOp::CmpL64;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "cmpop_cmpu", "src\\isa\\s390x\\inst.isle line 4875")
}

// Generated as internal constructor for term cmpop_cmpu_zext16.
pub fn constructor_cmpop_cmpu_zext16<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> CmpOp {
    match arg0 {
        I32 => {
            // Rule at src\isa\s390x\inst.isle line 4880.
            return CmpOp::CmpL32Ext16;
        }
        I64 => {
            // Rule at src\isa\s390x\inst.isle line 4881.
            return CmpOp::CmpL64Ext16;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "cmpop_cmpu_zext16", "src\\isa\\s390x\\inst.isle line 4879")
}

// Generated as internal constructor for term cmpop_cmpu_zext32.
pub fn constructor_cmpop_cmpu_zext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> CmpOp {
    if arg0 == I64 {
        // Rule at src\isa\s390x\inst.isle line 4884.
        return CmpOp::CmpL64Ext32;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "cmpop_cmpu_zext32", "src\\isa\\s390x\\inst.isle line 4883")
}

// Generated as internal constructor for term icmpu_reg.
pub fn constructor_icmpu_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmpu(ctx, arg0);
    let v4 = &constructor_cmp_rr(ctx, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4887.
    return v4.clone();
}

// Generated as internal constructor for term icmpu_reg_zext32.
pub fn constructor_icmpu_reg_zext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmpu_zext32(ctx, arg0);
    let v4 = &constructor_cmp_rr(ctx, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4890.
    return v4.clone();
}

// Generated as internal constructor for term icmpu_uimm32.
pub fn constructor_icmpu_uimm32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u32,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmpu(ctx, arg0);
    let v4 = &constructor_cmp_ruimm32(ctx, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4893.
    return v4.clone();
}

// Generated as internal constructor for term icmpu_mem.
pub fn constructor_icmpu_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmpu(ctx, arg0);
    let v4 = &constructor_cmp_rx(ctx, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4896.
    return v4.clone();
}

// Generated as internal constructor for term icmpu_mem_zext16.
pub fn constructor_icmpu_mem_zext16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmpu_zext16(ctx, arg0);
    let v4 = &constructor_cmp_rx(ctx, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4899.
    return v4.clone();
}

// Generated as internal constructor for term icmpu_mem_zext32.
pub fn constructor_icmpu_mem_zext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmpu_zext32(ctx, arg0);
    let v4 = &constructor_cmp_rx(ctx, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4902.
    return v4.clone();
}

// Generated as internal constructor for term vecop_int_cmpeq.
pub fn constructor_vecop_int_cmpeq<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> VecIntCmpOp {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8_u32 => {
                if v2.1 == 0x10_u32 {
                    // Rule at src\isa\s390x\inst.isle line 4908.
                    return VecIntCmpOp::CmpEq8x16;
                }
            }
            0x10_u32 => {
                if v2.1 == 0x8_u32 {
                    // Rule at src\isa\s390x\inst.isle line 4909.
                    return VecIntCmpOp::CmpEq16x8;
                }
            }
            0x20_u32 => {
                if v2.1 == 0x4_u32 {
                    // Rule at src\isa\s390x\inst.isle line 4910.
                    return VecIntCmpOp::CmpEq32x4;
                }
            }
            0x40_u32 => {
                if v2.1 == 0x2_u32 {
                    // Rule at src\isa\s390x\inst.isle line 4911.
                    return VecIntCmpOp::CmpEq64x2;
                }
            }
            _ => {}
        }
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vecop_int_cmpeq", "src\\isa\\s390x\\inst.isle line 4907")
}

// Generated as internal constructor for term vec_cmpeq.
pub fn constructor_vec_cmpeq<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_int_cmpeq(ctx, v2);
        let v6 = constructor_vec_int_cmp(ctx, v2, v5, arg1, arg2);
        // Rule at src\isa\s390x\inst.isle line 4914.
        return v6;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_cmpeq", "src\\isa\\s390x\\inst.isle line 4913")
}

// Generated as internal constructor for term vec_cmpeqs.
pub fn constructor_vec_cmpeqs<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_int_cmpeq(ctx, v2);
        let v6 = &constructor_vec_int_cmps(ctx, v2, v5, arg1, arg2);
        // Rule at src\isa\s390x\inst.isle line 4916.
        return v6.clone();
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_cmpeqs", "src\\isa\\s390x\\inst.isle line 4915")
}

// Generated as internal constructor for term vecop_int_cmph.
pub fn constructor_vecop_int_cmph<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> VecIntCmpOp {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8_u32 => {
                if v2.1 == 0x10_u32 {
                    // Rule at src\isa\s390x\inst.isle line 4919.
                    return VecIntCmpOp::SCmpHi8x16;
                }
            }
            0x10_u32 => {
                if v2.1 == 0x8_u32 {
                    // Rule at src\isa\s390x\inst.isle line 4920.
                    return VecIntCmpOp::SCmpHi16x8;
                }
            }
            0x20_u32 => {
                if v2.1 == 0x4_u32 {
                    // Rule at src\isa\s390x\inst.isle line 4921.
                    return VecIntCmpOp::SCmpHi32x4;
                }
            }
            0x40_u32 => {
                if v2.1 == 0x2_u32 {
                    // Rule at src\isa\s390x\inst.isle line 4922.
                    return VecIntCmpOp::SCmpHi64x2;
                }
            }
            _ => {}
        }
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vecop_int_cmph", "src\\isa\\s390x\\inst.isle line 4918")
}

// Generated as internal constructor for term vec_cmph.
pub fn constructor_vec_cmph<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_int_cmph(ctx, v2);
        let v6 = constructor_vec_int_cmp(ctx, v2, v5, arg1, arg2);
        // Rule at src\isa\s390x\inst.isle line 4925.
        return v6;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_cmph", "src\\isa\\s390x\\inst.isle line 4924")
}

// Generated as internal constructor for term vec_cmphs.
pub fn constructor_vec_cmphs<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_int_cmph(ctx, v2);
        let v6 = &constructor_vec_int_cmps(ctx, v2, v5, arg1, arg2);
        // Rule at src\isa\s390x\inst.isle line 4927.
        return v6.clone();
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_cmphs", "src\\isa\\s390x\\inst.isle line 4926")
}

// Generated as internal constructor for term vecop_int_cmphl.
pub fn constructor_vecop_int_cmphl<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> VecIntCmpOp {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8_u32 => {
                if v2.1 == 0x10_u32 {
                    // Rule at src\isa\s390x\inst.isle line 4930.
                    return VecIntCmpOp::UCmpHi8x16;
                }
            }
            0x10_u32 => {
                if v2.1 == 0x8_u32 {
                    // Rule at src\isa\s390x\inst.isle line 4931.
                    return VecIntCmpOp::UCmpHi16x8;
                }
            }
            0x20_u32 => {
                if v2.1 == 0x4_u32 {
                    // Rule at src\isa\s390x\inst.isle line 4932.
                    return VecIntCmpOp::UCmpHi32x4;
                }
            }
            0x40_u32 => {
                if v2.1 == 0x2_u32 {
                    // Rule at src\isa\s390x\inst.isle line 4933.
                    return VecIntCmpOp::UCmpHi64x2;
                }
            }
            _ => {}
        }
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vecop_int_cmphl", "src\\isa\\s390x\\inst.isle line 4929")
}

// Generated as internal constructor for term vec_cmphl.
pub fn constructor_vec_cmphl<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_int_cmphl(ctx, v2);
        let v6 = constructor_vec_int_cmp(ctx, v2, v5, arg1, arg2);
        // Rule at src\isa\s390x\inst.isle line 4936.
        return v6;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_cmphl", "src\\isa\\s390x\\inst.isle line 4935")
}

// Generated as internal constructor for term vec_cmphls.
pub fn constructor_vec_cmphls<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_int_cmphl(ctx, v2);
        let v6 = &constructor_vec_int_cmps(ctx, v2, v5, arg1, arg2);
        // Rule at src\isa\s390x\inst.isle line 4938.
        return v6.clone();
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_cmphls", "src\\isa\\s390x\\inst.isle line 4937")
}

// Generated as internal constructor for term fcmp_reg.
pub fn constructor_fcmp_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    match arg0 {
        F32 => {
            let v3 = &constructor_fpu_cmp32(ctx, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 4944.
            return v3.clone();
        }
        F64 => {
            let v4 = &constructor_fpu_cmp64(ctx, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 4945.
            return v4.clone();
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "fcmp_reg", "src\\isa\\s390x\\inst.isle line 4943")
}

// Generated as internal constructor for term vecop_float_cmpeq.
pub fn constructor_vecop_float_cmpeq<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> VecFloatCmpOp {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x20_u32 => {
                if v2.1 == 0x4_u32 {
                    // Rule at src\isa\s390x\inst.isle line 4951.
                    return VecFloatCmpOp::CmpEq32x4;
                }
            }
            0x40_u32 => {
                if v2.1 == 0x2_u32 {
                    // Rule at src\isa\s390x\inst.isle line 4952.
                    return VecFloatCmpOp::CmpEq64x2;
                }
            }
            _ => {}
        }
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vecop_float_cmpeq", "src\\isa\\s390x\\inst.isle line 4950")
}

// Generated as internal constructor for term vec_fcmpeq.
pub fn constructor_vec_fcmpeq<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_float_cmpeq(ctx, v2);
        let v6 = constructor_vec_float_cmp(ctx, v2, v5, arg1, arg2);
        // Rule at src\isa\s390x\inst.isle line 4955.
        return v6;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_fcmpeq", "src\\isa\\s390x\\inst.isle line 4954")
}

// Generated as internal constructor for term vec_fcmpeqs.
pub fn constructor_vec_fcmpeqs<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_float_cmpeq(ctx, v2);
        let v6 = &constructor_vec_float_cmps(ctx, v2, v5, arg1, arg2);
        // Rule at src\isa\s390x\inst.isle line 4957.
        return v6.clone();
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_fcmpeqs", "src\\isa\\s390x\\inst.isle line 4956")
}

// Generated as internal constructor for term vecop_float_cmph.
pub fn constructor_vecop_float_cmph<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> VecFloatCmpOp {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x20_u32 => {
                if v2.1 == 0x4_u32 {
                    // Rule at src\isa\s390x\inst.isle line 4960.
                    return VecFloatCmpOp::CmpHi32x4;
                }
            }
            0x40_u32 => {
                if v2.1 == 0x2_u32 {
                    // Rule at src\isa\s390x\inst.isle line 4961.
                    return VecFloatCmpOp::CmpHi64x2;
                }
            }
            _ => {}
        }
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vecop_float_cmph", "src\\isa\\s390x\\inst.isle line 4959")
}

// Generated as internal constructor for term vec_fcmph.
pub fn constructor_vec_fcmph<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_float_cmph(ctx, v2);
        let v6 = constructor_vec_float_cmp(ctx, v2, v5, arg1, arg2);
        // Rule at src\isa\s390x\inst.isle line 4964.
        return v6;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_fcmph", "src\\isa\\s390x\\inst.isle line 4963")
}

// Generated as internal constructor for term vec_fcmphs.
pub fn constructor_vec_fcmphs<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_float_cmph(ctx, v2);
        let v6 = &constructor_vec_float_cmps(ctx, v2, v5, arg1, arg2);
        // Rule at src\isa\s390x\inst.isle line 4966.
        return v6.clone();
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_fcmphs", "src\\isa\\s390x\\inst.isle line 4965")
}

// Generated as internal constructor for term vecop_float_cmphe.
pub fn constructor_vecop_float_cmphe<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> VecFloatCmpOp {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x20_u32 => {
                if v2.1 == 0x4_u32 {
                    // Rule at src\isa\s390x\inst.isle line 4969.
                    return VecFloatCmpOp::CmpHiEq32x4;
                }
            }
            0x40_u32 => {
                if v2.1 == 0x2_u32 {
                    // Rule at src\isa\s390x\inst.isle line 4970.
                    return VecFloatCmpOp::CmpHiEq64x2;
                }
            }
            _ => {}
        }
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vecop_float_cmphe", "src\\isa\\s390x\\inst.isle line 4968")
}

// Generated as internal constructor for term vec_fcmphe.
pub fn constructor_vec_fcmphe<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_float_cmphe(ctx, v2);
        let v6 = constructor_vec_float_cmp(ctx, v2, v5, arg1, arg2);
        // Rule at src\isa\s390x\inst.isle line 4973.
        return v6;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_fcmphe", "src\\isa\\s390x\\inst.isle line 4972")
}

// Generated as internal constructor for term vec_fcmphes.
pub fn constructor_vec_fcmphes<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_float_cmphe(ctx, v2);
        let v6 = &constructor_vec_float_cmps(ctx, v2, v5, arg1, arg2);
        // Rule at src\isa\s390x\inst.isle line 4975.
        return v6.clone();
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_fcmphes", "src\\isa\\s390x\\inst.isle line 4974")
}

// Generated as internal constructor for term lower.
pub fn constructor_lower<C: Context>(
    ctx: &mut C,
    arg0: Inst,
) -> Option<InstOutput> {
    let v4 = &C::inst_data_value(ctx, arg0);
    match v4 {
        &InstructionData::AtomicCas {
            opcode: ref v2134,
            args: ref v2135,
            flags: v2136,
        } => {
            if let &Opcode::AtomicCas = v2134 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v643 = C::ty_32_or_64(ctx, v3);
                    if let Some(v644) = v643 {
                        let v2141 = C::bigendian(ctx, v2136);
                        if let Some(v2142) = v2141 {
                            let v2137 = C::unpack_value_array_3(ctx, v2135);
                            let v2143 = C::put_in_reg(ctx, v2137.1);
                            let v2144 = C::put_in_reg(ctx, v2137.2);
                            let v2086 = C::zero_offset(ctx);
                            let v2145 = &constructor_lower_address(ctx, v2136, v2137.0, v2086);
                            let v2146 = constructor_atomic_cas_impl(ctx, v644, v2143, v2144, v2145);
                            let v2147 = constructor_output_reg(ctx, v2146);
                            let v2148 = Some(v2147);
                            // Rule at src\isa\s390x\lower.isle line 3178.
                            return v2148;
                        }
                        let v2149 = C::littleendian(ctx, v2136);
                        if let Some(v2150) = v2149 {
                            let v2137 = C::unpack_value_array_3(ctx, v2135);
                            let v2143 = C::put_in_reg(ctx, v2137.1);
                            let v2151 = constructor_bswap_reg(ctx, v644, v2143);
                            let v2152 = C::put_in_reg(ctx, v2137.2);
                            let v2153 = constructor_bswap_reg(ctx, v644, v2152);
                            let v2154 = C::zero_offset(ctx);
                            let v2155 = &constructor_lower_address(ctx, v2136, v2137.0, v2154);
                            let v2156 = constructor_atomic_cas_impl(ctx, v644, v2151, v2153, v2155);
                            let v2157 = constructor_bswap_reg(ctx, v644, v2156);
                            let v2158 = constructor_output_reg(ctx, v2157);
                            let v2159 = Some(v2158);
                            // Rule at src\isa\s390x\lower.isle line 3185.
                            return v2159;
                        }
                    }
                    let v469 = C::ty_8_or_16(ctx, v3);
                    if let Some(v470) = v469 {
                        let v2137 = C::unpack_value_array_3(ctx, v2135);
                        let v2143 = C::put_in_reg(ctx, v2137.1);
                        let v2144 = C::put_in_reg(ctx, v2137.2);
                        let v2160 = C::put_in_reg(ctx, v2137.0);
                        let v2161 = constructor_casloop_bitshift(ctx, v2160);
                        let v2162 = constructor_casloop_aligned_addr(ctx, v2160);
                        let v2163 = &C::inst_builder_new(ctx);
                        let v2164 = constructor_casloop_val_reg(ctx);
                        let v2165 = C::writable_reg_to_reg(ctx, v2164);
                        let v2166 = constructor_casloop_rotate_in(ctx, v2163, v470, v2136, v2161, v2165);
                        let v2167 = constructor_casloop_tmp_reg(ctx);
                        let v2168 = constructor_atomic_cas_body(ctx, v2163, v470, v2136, v2167, v2166, v2143, v2144);
                        let v2169 = constructor_casloop_rotate_out(ctx, v2163, v470, v2136, v2161, v2168);
                        let v2170 = constructor_casloop_subword(ctx, v2163, v470, v2136, v2162, v2161, v2169);
                        let v2171 = constructor_output_reg(ctx, v2170);
                        let v2172 = Some(v2171);
                        // Rule at src\isa\s390x\lower.isle line 3192.
                        return v2172;
                    }
                }
            }
        }
        &InstructionData::AtomicRmw {
            opcode: ref v2068,
            args: ref v2069,
            flags: v2070,
            op: ref v2071,
        } => {
            if let &Opcode::AtomicRmw = v2068 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v643 = C::ty_32_or_64(ctx, v3);
                    if let Some(v644) = v643 {
                        match v2071 {
                            &AtomicRmwOp::Add => {
                                let v2075 = C::bigendian(ctx, v2070);
                                if let Some(v2076) = v2075 {
                                    let v2072 = C::unpack_value_array_2(ctx, v2069);
                                    let v2077 = C::put_in_reg(ctx, v2072.1);
                                    let v2078 = C::zero_offset(ctx);
                                    let v2079 = &constructor_lower_address(ctx, v2070, v2072.0, v2078);
                                    let v2106 = constructor_atomic_rmw_add(ctx, v644, v2077, v2079);
                                    let v2107 = constructor_output_reg(ctx, v2106);
                                    let v2108 = Some(v2107);
                                    // Rule at src\isa\s390x\lower.isle line 2958.
                                    return v2108;
                                }
                            }
                            &AtomicRmwOp::And => {
                                let v2075 = C::bigendian(ctx, v2070);
                                if let Some(v2076) = v2075 {
                                    let v2072 = C::unpack_value_array_2(ctx, v2069);
                                    let v2077 = C::put_in_reg(ctx, v2072.1);
                                    let v2078 = C::zero_offset(ctx);
                                    let v2079 = &constructor_lower_address(ctx, v2070, v2072.0, v2078);
                                    let v2080 = constructor_atomic_rmw_and(ctx, v644, v2077, v2079);
                                    let v2081 = constructor_output_reg(ctx, v2080);
                                    let v2082 = Some(v2081);
                                    // Rule at src\isa\s390x\lower.isle line 2922.
                                    return v2082;
                                }
                                let v2083 = C::littleendian(ctx, v2070);
                                if let Some(v2084) = v2083 {
                                    let v2072 = C::unpack_value_array_2(ctx, v2069);
                                    let v2077 = C::put_in_reg(ctx, v2072.1);
                                    let v2085 = constructor_bswap_reg(ctx, v644, v2077);
                                    let v2086 = C::zero_offset(ctx);
                                    let v2087 = &constructor_lower_address(ctx, v2070, v2072.0, v2086);
                                    let v2088 = constructor_atomic_rmw_and(ctx, v644, v2085, v2087);
                                    let v2089 = constructor_bswap_reg(ctx, v644, v2088);
                                    let v2090 = constructor_output_reg(ctx, v2089);
                                    let v2091 = Some(v2090);
                                    // Rule at src\isa\s390x\lower.isle line 2928.
                                    return v2091;
                                }
                            }
                            &AtomicRmwOp::Or => {
                                let v2075 = C::bigendian(ctx, v2070);
                                if let Some(v2076) = v2075 {
                                    let v2072 = C::unpack_value_array_2(ctx, v2069);
                                    let v2077 = C::put_in_reg(ctx, v2072.1);
                                    let v2078 = C::zero_offset(ctx);
                                    let v2079 = &constructor_lower_address(ctx, v2070, v2072.0, v2078);
                                    let v2092 = constructor_atomic_rmw_or(ctx, v644, v2077, v2079);
                                    let v2093 = constructor_output_reg(ctx, v2092);
                                    let v2094 = Some(v2093);
                                    // Rule at src\isa\s390x\lower.isle line 2934.
                                    return v2094;
                                }
                                let v2083 = C::littleendian(ctx, v2070);
                                if let Some(v2084) = v2083 {
                                    let v2072 = C::unpack_value_array_2(ctx, v2069);
                                    let v2077 = C::put_in_reg(ctx, v2072.1);
                                    let v2085 = constructor_bswap_reg(ctx, v644, v2077);
                                    let v2086 = C::zero_offset(ctx);
                                    let v2087 = &constructor_lower_address(ctx, v2070, v2072.0, v2086);
                                    let v2095 = constructor_atomic_rmw_or(ctx, v644, v2085, v2087);
                                    let v2096 = constructor_bswap_reg(ctx, v644, v2095);
                                    let v2097 = constructor_output_reg(ctx, v2096);
                                    let v2098 = Some(v2097);
                                    // Rule at src\isa\s390x\lower.isle line 2940.
                                    return v2098;
                                }
                            }
                            &AtomicRmwOp::Sub => {
                                let v2075 = C::bigendian(ctx, v2070);
                                if let Some(v2076) = v2075 {
                                    let v2072 = C::unpack_value_array_2(ctx, v2069);
                                    let v2077 = C::put_in_reg(ctx, v2072.1);
                                    let v2109 = constructor_neg_reg(ctx, v644, v2077);
                                    let v2086 = C::zero_offset(ctx);
                                    let v2087 = &constructor_lower_address(ctx, v2070, v2072.0, v2086);
                                    let v2110 = constructor_atomic_rmw_add(ctx, v644, v2109, v2087);
                                    let v2111 = constructor_output_reg(ctx, v2110);
                                    let v2112 = Some(v2111);
                                    // Rule at src\isa\s390x\lower.isle line 2964.
                                    return v2112;
                                }
                            }
                            &AtomicRmwOp::Xor => {
                                let v2075 = C::bigendian(ctx, v2070);
                                if let Some(v2076) = v2075 {
                                    let v2072 = C::unpack_value_array_2(ctx, v2069);
                                    let v2077 = C::put_in_reg(ctx, v2072.1);
                                    let v2078 = C::zero_offset(ctx);
                                    let v2079 = &constructor_lower_address(ctx, v2070, v2072.0, v2078);
                                    let v2099 = constructor_atomic_rmw_xor(ctx, v644, v2077, v2079);
                                    let v2100 = constructor_output_reg(ctx, v2099);
                                    let v2101 = Some(v2100);
                                    // Rule at src\isa\s390x\lower.isle line 2946.
                                    return v2101;
                                }
                                let v2083 = C::littleendian(ctx, v2070);
                                if let Some(v2084) = v2083 {
                                    let v2072 = C::unpack_value_array_2(ctx, v2069);
                                    let v2077 = C::put_in_reg(ctx, v2072.1);
                                    let v2085 = constructor_bswap_reg(ctx, v644, v2077);
                                    let v2086 = C::zero_offset(ctx);
                                    let v2087 = &constructor_lower_address(ctx, v2070, v2072.0, v2086);
                                    let v2102 = constructor_atomic_rmw_xor(ctx, v644, v2085, v2087);
                                    let v2103 = constructor_bswap_reg(ctx, v644, v2102);
                                    let v2104 = constructor_output_reg(ctx, v2103);
                                    let v2105 = Some(v2104);
                                    // Rule at src\isa\s390x\lower.isle line 2952.
                                    return v2105;
                                }
                            }
                            _ => {}
                        }
                        let v2072 = C::unpack_value_array_2(ctx, v2069);
                        let v2077 = C::put_in_reg(ctx, v2072.1);
                        let v2113 = C::put_in_reg(ctx, v2072.0);
                        let v2114 = &C::inst_builder_new(ctx);
                        let v2115 = constructor_casloop_val_reg(ctx);
                        let v2117 = constructor_casloop_tmp_reg(ctx);
                        let v2116 = C::writable_reg_to_reg(ctx, v2115);
                        let v2118 = constructor_atomic_rmw_body(ctx, v2114, v644, v2070, v2071, v2117, v2116, v2077);
                        let v2119 = constructor_casloop(ctx, v2114, v644, v2070, v2113, v2118);
                        let v2120 = constructor_output_reg(ctx, v2119);
                        let v2121 = Some(v2120);
                        // Rule at src\isa\s390x\lower.isle line 2973.
                        return v2121;
                    }
                    let v469 = C::ty_8_or_16(ctx, v3);
                    if let Some(v470) = v469 {
                        let v2072 = C::unpack_value_array_2(ctx, v2069);
                        let v2077 = C::put_in_reg(ctx, v2072.1);
                        let v2113 = C::put_in_reg(ctx, v2072.0);
                        let v2122 = constructor_casloop_bitshift(ctx, v2113);
                        let v2123 = constructor_casloop_aligned_addr(ctx, v2113);
                        let v2124 = &C::inst_builder_new(ctx);
                        let v2125 = constructor_casloop_val_reg(ctx);
                        let v2126 = C::writable_reg_to_reg(ctx, v2125);
                        let v2127 = constructor_casloop_rotate_in(ctx, v2124, v470, v2070, v2122, v2126);
                        let v2128 = constructor_casloop_tmp_reg(ctx);
                        let v2129 = constructor_atomic_rmw_body(ctx, v2124, v470, v2070, v2071, v2128, v2127, v2077);
                        let v2130 = constructor_casloop_rotate_out(ctx, v2124, v470, v2070, v2122, v2129);
                        let v2131 = constructor_casloop_subword(ctx, v2124, v470, v2070, v2123, v2122, v2130);
                        let v2132 = constructor_output_reg(ctx, v2131);
                        let v2133 = Some(v2132);
                        // Rule at src\isa\s390x\lower.isle line 2985.
                        return v2133;
                    }
                }
            }
        }
        &InstructionData::Binary {
            opcode: ref v53,
            args: ref v54,
        } => {
            match v53 {
                &Opcode::Swizzle => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v182 = C::ty_vec128(ctx, v3);
                        if let Some(v183) = v182 {
                            let v1826 = &C::lane_order(ctx);
                            match v1826 {
                                &LaneOrder::LittleEndian => {
                                    let v1834 = constructor_vec_imm(ctx, v183, 0x0_u128);
                                    let v55 = C::unpack_value_array_2(ctx, v54);
                                    let v59 = C::put_in_reg(ctx, v55.0);
                                    let v1836 = constructor_vec_imm_splat(ctx, I8X16, 0xef_u64);
                                    let v501 = C::put_in_reg(ctx, v55.1);
                                    let v1837 = constructor_vec_not(ctx, I8X16, v501);
                                    let v1838 = constructor_vec_umax(ctx, I8X16, v1836, v1837);
                                    let v1839 = constructor_vec_permute(ctx, v183, v1834, v59, v1838);
                                    let v1840 = constructor_output_reg(ctx, v1839);
                                    let v1841 = Some(v1840);
                                    // Rule at src\isa\s390x\lower.isle line 2249.
                                    return v1841;
                                }
                                &LaneOrder::BigEndian => {
                                    let v55 = C::unpack_value_array_2(ctx, v54);
                                    let v80 = C::put_in_reg(ctx, v55.0);
                                    let v1827 = constructor_vec_imm(ctx, v183, 0x0_u128);
                                    let v1829 = constructor_vec_imm_splat(ctx, I8X16, 0x10_u64);
                                    let v501 = C::put_in_reg(ctx, v55.1);
                                    let v1830 = constructor_vec_umin(ctx, I8X16, v1829, v501);
                                    let v1831 = constructor_vec_permute(ctx, v183, v80, v1827, v1830);
                                    let v1832 = constructor_output_reg(ctx, v1831);
                                    let v1833 = Some(v1832);
                                    // Rule at src\isa\s390x\lower.isle line 2230.
                                    return v1833;
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::Smin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v78 = C::fits_in_64(ctx, v3);
                        if let Some(v79) = v78 {
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v373 = constructor_put_in_reg_sext32(ctx, v55.0);
                            let v374 = constructor_put_in_reg_sext32(ctx, v55.1);
                            let v345 = constructor_ty_ext32(ctx, v79);
                            let v375 = &constructor_icmps_reg(ctx, v345, v373, v374);
                            let v390 = &C::intcc_as_cond(ctx, &IntCC::SignedGreaterThan);
                            let v391 = &constructor_bool(ctx, v375, v390);
                            let v392 = constructor_select_bool_reg(ctx, v79, v391, v374, v373);
                            let v393 = constructor_output_reg(ctx, v392);
                            let v394 = Some(v393);
                            // Rule at src\isa\s390x\lower.isle line 321.
                            return v394;
                        }
                        if v3 == I128 {
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v80 = C::put_in_reg(ctx, v55.0);
                            let v81 = C::put_in_reg(ctx, v55.1);
                            let v395 = &constructor_vec_int128_scmphi(ctx, v80, v81);
                            let v396 = constructor_select_bool_reg(ctx, I128, v395, v81, v80);
                            let v397 = constructor_output_reg(ctx, v396);
                            let v398 = Some(v397);
                            // Rule at src\isa\s390x\lower.isle line 329.
                            return v398;
                        }
                        let v182 = C::ty_vec128(ctx, v3);
                        if let Some(v183) = v182 {
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v80 = C::put_in_reg(ctx, v55.0);
                            let v81 = C::put_in_reg(ctx, v55.1);
                            let v399 = constructor_vec_smin(ctx, v183, v80, v81);
                            let v400 = constructor_output_reg(ctx, v399);
                            let v401 = Some(v400);
                            // Rule at src\isa\s390x\lower.isle line 336.
                            return v401;
                        }
                    }
                }
                &Opcode::Umin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v78 = C::fits_in_64(ctx, v3);
                        if let Some(v79) = v78 {
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v343 = constructor_put_in_reg_zext32(ctx, v55.0);
                            let v344 = constructor_put_in_reg_zext32(ctx, v55.1);
                            let v345 = constructor_ty_ext32(ctx, v79);
                            let v346 = &constructor_icmpu_reg(ctx, v345, v343, v344);
                            let v361 = &C::intcc_as_cond(ctx, &IntCC::UnsignedGreaterThan);
                            let v362 = &constructor_bool(ctx, v346, v361);
                            let v363 = constructor_select_bool_reg(ctx, v79, v362, v344, v343);
                            let v364 = constructor_output_reg(ctx, v363);
                            let v365 = Some(v364);
                            // Rule at src\isa\s390x\lower.isle line 277.
                            return v365;
                        }
                        if v3 == I128 {
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v80 = C::put_in_reg(ctx, v55.0);
                            let v81 = C::put_in_reg(ctx, v55.1);
                            let v366 = &constructor_vec_int128_ucmphi(ctx, v80, v81);
                            let v367 = constructor_select_bool_reg(ctx, I128, v366, v81, v80);
                            let v368 = constructor_output_reg(ctx, v367);
                            let v369 = Some(v368);
                            // Rule at src\isa\s390x\lower.isle line 285.
                            return v369;
                        }
                        let v182 = C::ty_vec128(ctx, v3);
                        if let Some(v183) = v182 {
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v80 = C::put_in_reg(ctx, v55.0);
                            let v81 = C::put_in_reg(ctx, v55.1);
                            let v370 = constructor_vec_umin(ctx, v183, v80, v81);
                            let v371 = constructor_output_reg(ctx, v370);
                            let v372 = Some(v371);
                            // Rule at src\isa\s390x\lower.isle line 292.
                            return v372;
                        }
                    }
                }
                &Opcode::Smax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v78 = C::fits_in_64(ctx, v3);
                        if let Some(v79) = v78 {
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v373 = constructor_put_in_reg_sext32(ctx, v55.0);
                            let v374 = constructor_put_in_reg_sext32(ctx, v55.1);
                            let v345 = constructor_ty_ext32(ctx, v79);
                            let v375 = &constructor_icmps_reg(ctx, v345, v373, v374);
                            let v377 = &C::intcc_as_cond(ctx, &IntCC::SignedLessThan);
                            let v378 = &constructor_bool(ctx, v375, v377);
                            let v379 = constructor_select_bool_reg(ctx, v79, v378, v374, v373);
                            let v380 = constructor_output_reg(ctx, v379);
                            let v381 = Some(v380);
                            // Rule at src\isa\s390x\lower.isle line 299.
                            return v381;
                        }
                        if v3 == I128 {
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v80 = C::put_in_reg(ctx, v55.0);
                            let v81 = C::put_in_reg(ctx, v55.1);
                            let v382 = &constructor_vec_int128_scmphi(ctx, v81, v80);
                            let v383 = constructor_select_bool_reg(ctx, I128, v382, v81, v80);
                            let v384 = constructor_output_reg(ctx, v383);
                            let v385 = Some(v384);
                            // Rule at src\isa\s390x\lower.isle line 307.
                            return v385;
                        }
                        let v182 = C::ty_vec128(ctx, v3);
                        if let Some(v183) = v182 {
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v80 = C::put_in_reg(ctx, v55.0);
                            let v81 = C::put_in_reg(ctx, v55.1);
                            let v386 = constructor_vec_smax(ctx, v183, v80, v81);
                            let v387 = constructor_output_reg(ctx, v386);
                            let v388 = Some(v387);
                            // Rule at src\isa\s390x\lower.isle line 314.
                            return v388;
                        }
                    }
                }
                &Opcode::Umax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v78 = C::fits_in_64(ctx, v3);
                        if let Some(v79) = v78 {
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v343 = constructor_put_in_reg_zext32(ctx, v55.0);
                            let v344 = constructor_put_in_reg_zext32(ctx, v55.1);
                            let v345 = constructor_ty_ext32(ctx, v79);
                            let v346 = &constructor_icmpu_reg(ctx, v345, v343, v344);
                            let v348 = &C::intcc_as_cond(ctx, &IntCC::UnsignedLessThan);
                            let v349 = &constructor_bool(ctx, v346, v348);
                            let v350 = constructor_select_bool_reg(ctx, v79, v349, v344, v343);
                            let v351 = constructor_output_reg(ctx, v350);
                            let v352 = Some(v351);
                            // Rule at src\isa\s390x\lower.isle line 255.
                            return v352;
                        }
                        if v3 == I128 {
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v80 = C::put_in_reg(ctx, v55.0);
                            let v81 = C::put_in_reg(ctx, v55.1);
                            let v353 = &constructor_vec_int128_ucmphi(ctx, v81, v80);
                            let v354 = constructor_select_bool_reg(ctx, I128, v353, v81, v80);
                            let v355 = constructor_output_reg(ctx, v354);
                            let v356 = Some(v355);
                            // Rule at src\isa\s390x\lower.isle line 263.
                            return v356;
                        }
                        let v182 = C::ty_vec128(ctx, v3);
                        if let Some(v183) = v182 {
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v80 = C::put_in_reg(ctx, v55.0);
                            let v81 = C::put_in_reg(ctx, v55.1);
                            let v357 = constructor_vec_umax(ctx, v183, v80, v81);
                            let v358 = constructor_output_reg(ctx, v357);
                            let v359 = Some(v358);
                            // Rule at src\isa\s390x\lower.isle line 270.
                            return v359;
                        }
                    }
                }
                &Opcode::AvgRound => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v182 = C::ty_vec128(ctx, v3);
                        if let Some(v183) = v182 {
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v80 = C::put_in_reg(ctx, v55.0);
                            let v81 = C::put_in_reg(ctx, v55.1);
                            let v402 = constructor_vec_uavg(ctx, v183, v80, v81);
                            let v403 = constructor_output_reg(ctx, v402);
                            let v404 = Some(v403);
                            // Rule at src\isa\s390x\lower.isle line 343.
                            return v404;
                        }
                    }
                }
                &Opcode::UaddSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v182 = C::ty_vec128(ctx, v3);
                        if let Some(v183) = v182 {
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v80 = C::put_in_reg(ctx, v55.0);
                            let v81 = C::put_in_reg(ctx, v55.1);
                            let v184 = constructor_vec_add(ctx, v183, v80, v81);
                            let v185 = C::put_in_reg(ctx, v55.0);
                            let v186 = constructor_vec_cmphl(ctx, v183, v185, v184);
                            let v187 = constructor_vec_or(ctx, v183, v184, v186);
                            let v188 = constructor_output_reg(ctx, v187);
                            let v189 = Some(v188);
                            // Rule at src\isa\s390x\lower.isle line 121.
                            return v189;
                        }
                    }
                }
                &Opcode::SaddSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v182 = C::ty_vec128(ctx, v3);
                        if let Some(v183) = v182 {
                            let v190 = constructor_vec_widen_type(ctx, v183);
                            let v191 = constructor_vec_widen_type(ctx, v183);
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v192 = C::put_in_reg(ctx, v55.0);
                            let v193 = constructor_vec_unpacks_high(ctx, v183, v192);
                            let v194 = C::put_in_reg(ctx, v55.1);
                            let v195 = constructor_vec_unpacks_high(ctx, v183, v194);
                            let v196 = constructor_vec_add(ctx, v191, v193, v195);
                            let v197 = constructor_vec_widen_type(ctx, v183);
                            let v198 = C::put_in_reg(ctx, v55.0);
                            let v199 = constructor_vec_unpacks_low(ctx, v183, v198);
                            let v200 = C::put_in_reg(ctx, v55.1);
                            let v201 = constructor_vec_unpacks_low(ctx, v183, v200);
                            let v202 = constructor_vec_add(ctx, v197, v199, v201);
                            let v203 = constructor_vec_pack_ssat(ctx, v190, v196, v202);
                            let v204 = constructor_output_reg(ctx, v203);
                            let v205 = Some(v204);
                            // Rule at src\isa\s390x\lower.isle line 129.
                            return v205;
                        }
                    }
                }
                &Opcode::UsubSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v182 = C::ty_vec128(ctx, v3);
                        if let Some(v183) = v182 {
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v80 = C::put_in_reg(ctx, v55.0);
                            let v81 = C::put_in_reg(ctx, v55.1);
                            let v294 = constructor_vec_sub(ctx, v183, v80, v81);
                            let v185 = C::put_in_reg(ctx, v55.0);
                            let v194 = C::put_in_reg(ctx, v55.1);
                            let v295 = constructor_vec_cmphl(ctx, v183, v185, v194);
                            let v296 = constructor_vec_and(ctx, v183, v294, v295);
                            let v297 = constructor_output_reg(ctx, v296);
                            let v298 = Some(v297);
                            // Rule at src\isa\s390x\lower.isle line 193.
                            return v298;
                        }
                    }
                }
                &Opcode::SsubSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v182 = C::ty_vec128(ctx, v3);
                        if let Some(v183) = v182 {
                            let v190 = constructor_vec_widen_type(ctx, v183);
                            let v191 = constructor_vec_widen_type(ctx, v183);
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v192 = C::put_in_reg(ctx, v55.0);
                            let v193 = constructor_vec_unpacks_high(ctx, v183, v192);
                            let v194 = C::put_in_reg(ctx, v55.1);
                            let v195 = constructor_vec_unpacks_high(ctx, v183, v194);
                            let v299 = constructor_vec_sub(ctx, v191, v193, v195);
                            let v197 = constructor_vec_widen_type(ctx, v183);
                            let v198 = C::put_in_reg(ctx, v55.0);
                            let v199 = constructor_vec_unpacks_low(ctx, v183, v198);
                            let v200 = C::put_in_reg(ctx, v55.1);
                            let v201 = constructor_vec_unpacks_low(ctx, v183, v200);
                            let v300 = constructor_vec_sub(ctx, v197, v199, v201);
                            let v301 = constructor_vec_pack_ssat(ctx, v190, v299, v300);
                            let v302 = constructor_output_reg(ctx, v301);
                            let v303 = Some(v302);
                            // Rule at src\isa\s390x\lower.isle line 200.
                            return v303;
                        }
                    }
                }
                &Opcode::Iadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v78 = C::fits_in_64(ctx, v3);
                        if let Some(v79) = v78 {
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v95 = C::def_inst(ctx, v55.0);
                            if let Some(v96) = v95 {
                                let v97 = &C::inst_data_value(ctx, v96);
                                if let &InstructionData::Unary {
                                    opcode: ref v98,
                                    arg: v99,
                                } = v97 {
                                    if let &Opcode::Sextend = v98 {
                                        let v100 = C::value_type(ctx, v99);
                                        if v100 == I32 {
                                            let v58 = C::put_in_reg(ctx, v55.1);
                                            let v101 = C::put_in_reg(ctx, v99);
                                            let v102 = constructor_add_reg_sext32(ctx, v79, v58, v101);
                                            let v103 = constructor_output_reg(ctx, v102);
                                            let v104 = Some(v103);
                                            // Rule at src\isa\s390x\lower.isle line 78.
                                            return v104;
                                        }
                                    }
                                }
                            }
                            let v110 = C::i16_from_value(ctx, v55.0);
                            if let Some(v111) = v110 {
                                let v58 = C::put_in_reg(ctx, v55.1);
                                let v112 = constructor_add_simm16(ctx, v79, v58, v111);
                                let v113 = constructor_output_reg(ctx, v112);
                                let v114 = Some(v113);
                                // Rule at src\isa\s390x\lower.isle line 84.
                                return v114;
                            }
                            let v120 = C::i32_from_value(ctx, v55.0);
                            if let Some(v121) = v120 {
                                let v58 = C::put_in_reg(ctx, v55.1);
                                let v122 = constructor_add_simm32(ctx, v79, v58, v121);
                                let v123 = constructor_output_reg(ctx, v122);
                                let v124 = Some(v123);
                                // Rule at src\isa\s390x\lower.isle line 88.
                                return v124;
                            }
                            let v144 = C::sinkable_inst(ctx, v55.0);
                            if let Some(v145) = v144 {
                                let v146 = &C::inst_data_value(ctx, v145);
                                if let &InstructionData::Load {
                                    opcode: ref v147,
                                    arg: v148,
                                    flags: v149,
                                    offset: v150,
                                } = v146 {
                                    match v147 {
                                        &Opcode::Load => {
                                            let v151 = C::bigendian(ctx, v149);
                                            if let Some(v152) = v151 {
                                                let v141 = C::value_type(ctx, v55.0);
                                                let v142 = C::ty_32_or_64(ctx, v141);
                                                if let Some(v143) = v142 {
                                                    let v58 = C::put_in_reg(ctx, v55.1);
                                                    let v153 = &constructor_sink_load(ctx, v145);
                                                    let v154 = constructor_add_mem(ctx, v79, v58, v153);
                                                    let v155 = constructor_output_reg(ctx, v154);
                                                    let v156 = Some(v155);
                                                    // Rule at src\isa\s390x\lower.isle line 94.
                                                    return v156;
                                                }
                                                if v141 == I16 {
                                                    let v58 = C::put_in_reg(ctx, v55.1);
                                                    let v153 = &constructor_sink_load(ctx, v145);
                                                    let v160 = constructor_add_mem_sext16(ctx, v79, v58, v153);
                                                    let v161 = constructor_output_reg(ctx, v160);
                                                    let v162 = Some(v161);
                                                    // Rule at src\isa\s390x\lower.isle line 100.
                                                    return v162;
                                                }
                                            }
                                        }
                                        &Opcode::Sload16 => {
                                            let v151 = C::bigendian(ctx, v149);
                                            if let Some(v152) = v151 {
                                                let v58 = C::put_in_reg(ctx, v55.1);
                                                let v167 = &constructor_sink_sload16(ctx, v145);
                                                let v168 = constructor_add_mem_sext16(ctx, v79, v58, v167);
                                                let v169 = constructor_output_reg(ctx, v168);
                                                let v170 = Some(v169);
                                                // Rule at src\isa\s390x\lower.isle line 106.
                                                return v170;
                                            }
                                        }
                                        &Opcode::Sload32 => {
                                            let v151 = C::bigendian(ctx, v149);
                                            if let Some(v152) = v151 {
                                                let v58 = C::put_in_reg(ctx, v55.1);
                                                let v175 = &constructor_sink_sload32(ctx, v145);
                                                let v176 = constructor_add_mem_sext32(ctx, v79, v58, v175);
                                                let v177 = constructor_output_reg(ctx, v176);
                                                let v178 = Some(v177);
                                                // Rule at src\isa\s390x\lower.isle line 110.
                                                return v178;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            let v85 = C::def_inst(ctx, v55.1);
                            if let Some(v86) = v85 {
                                let v87 = &C::inst_data_value(ctx, v86);
                                if let &InstructionData::Unary {
                                    opcode: ref v88,
                                    arg: v89,
                                } = v87 {
                                    if let &Opcode::Sextend = v88 {
                                        let v90 = C::value_type(ctx, v89);
                                        if v90 == I32 {
                                            let v80 = C::put_in_reg(ctx, v55.0);
                                            let v91 = C::put_in_reg(ctx, v89);
                                            let v92 = constructor_add_reg_sext32(ctx, v79, v80, v91);
                                            let v93 = constructor_output_reg(ctx, v92);
                                            let v94 = Some(v93);
                                            // Rule at src\isa\s390x\lower.isle line 76.
                                            return v94;
                                        }
                                    }
                                }
                            }
                            let v105 = C::i16_from_value(ctx, v55.1);
                            if let Some(v106) = v105 {
                                let v80 = C::put_in_reg(ctx, v55.0);
                                let v107 = constructor_add_simm16(ctx, v79, v80, v106);
                                let v108 = constructor_output_reg(ctx, v107);
                                let v109 = Some(v108);
                                // Rule at src\isa\s390x\lower.isle line 82.
                                return v109;
                            }
                            let v115 = C::i32_from_value(ctx, v55.1);
                            if let Some(v116) = v115 {
                                let v80 = C::put_in_reg(ctx, v55.0);
                                let v117 = constructor_add_simm32(ctx, v79, v80, v116);
                                let v118 = constructor_output_reg(ctx, v117);
                                let v119 = Some(v118);
                                // Rule at src\isa\s390x\lower.isle line 86.
                                return v119;
                            }
                            let v128 = C::sinkable_inst(ctx, v55.1);
                            if let Some(v129) = v128 {
                                let v130 = &C::inst_data_value(ctx, v129);
                                if let &InstructionData::Load {
                                    opcode: ref v131,
                                    arg: v132,
                                    flags: v133,
                                    offset: v134,
                                } = v130 {
                                    match v131 {
                                        &Opcode::Load => {
                                            let v135 = C::bigendian(ctx, v133);
                                            if let Some(v136) = v135 {
                                                let v125 = C::value_type(ctx, v55.1);
                                                let v126 = C::ty_32_or_64(ctx, v125);
                                                if let Some(v127) = v126 {
                                                    let v80 = C::put_in_reg(ctx, v55.0);
                                                    let v137 = &constructor_sink_load(ctx, v129);
                                                    let v138 = constructor_add_mem(ctx, v79, v80, v137);
                                                    let v139 = constructor_output_reg(ctx, v138);
                                                    let v140 = Some(v139);
                                                    // Rule at src\isa\s390x\lower.isle line 92.
                                                    return v140;
                                                }
                                                if v125 == I16 {
                                                    let v80 = C::put_in_reg(ctx, v55.0);
                                                    let v137 = &constructor_sink_load(ctx, v129);
                                                    let v157 = constructor_add_mem_sext16(ctx, v79, v80, v137);
                                                    let v158 = constructor_output_reg(ctx, v157);
                                                    let v159 = Some(v158);
                                                    // Rule at src\isa\s390x\lower.isle line 98.
                                                    return v159;
                                                }
                                            }
                                        }
                                        &Opcode::Sload16 => {
                                            let v135 = C::bigendian(ctx, v133);
                                            if let Some(v136) = v135 {
                                                let v80 = C::put_in_reg(ctx, v55.0);
                                                let v163 = &constructor_sink_sload16(ctx, v129);
                                                let v164 = constructor_add_mem_sext16(ctx, v79, v80, v163);
                                                let v165 = constructor_output_reg(ctx, v164);
                                                let v166 = Some(v165);
                                                // Rule at src\isa\s390x\lower.isle line 104.
                                                return v166;
                                            }
                                        }
                                        &Opcode::Sload32 => {
                                            let v135 = C::bigendian(ctx, v133);
                                            if let Some(v136) = v135 {
                                                let v80 = C::put_in_reg(ctx, v55.0);
                                                let v171 = &constructor_sink_sload32(ctx, v129);
                                                let v172 = constructor_add_mem_sext32(ctx, v79, v80, v171);
                                                let v173 = constructor_output_reg(ctx, v172);
                                                let v174 = Some(v173);
                                                // Rule at src\isa\s390x\lower.isle line 108.
                                                return v174;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                        }
                        let v51 = C::vr128_ty(ctx, v3);
                        if let Some(v52) = v51 {
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v80 = C::put_in_reg(ctx, v55.0);
                            let v81 = C::put_in_reg(ctx, v55.1);
                            let v179 = constructor_vec_add(ctx, v52, v80, v81);
                            let v180 = constructor_output_reg(ctx, v179);
                            let v181 = Some(v180);
                            // Rule at src\isa\s390x\lower.isle line 114.
                            return v181;
                        }
                        if let Some(v79) = v78 {
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v80 = C::put_in_reg(ctx, v55.0);
                            let v81 = C::put_in_reg(ctx, v55.1);
                            let v82 = constructor_add_reg(ctx, v79, v80, v81);
                            let v83 = constructor_output_reg(ctx, v82);
                            let v84 = Some(v83);
                            // Rule at src\isa\s390x\lower.isle line 72.
                            return v84;
                        }
                    }
                }
                &Opcode::Isub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v78 = C::fits_in_64(ctx, v3);
                        if let Some(v79) = v78 {
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v85 = C::def_inst(ctx, v55.1);
                            if let Some(v86) = v85 {
                                let v87 = &C::inst_data_value(ctx, v86);
                                if let &InstructionData::Unary {
                                    opcode: ref v88,
                                    arg: v89,
                                } = v87 {
                                    if let &Opcode::Sextend = v88 {
                                        let v90 = C::value_type(ctx, v89);
                                        if v90 == I32 {
                                            let v80 = C::put_in_reg(ctx, v55.0);
                                            let v91 = C::put_in_reg(ctx, v89);
                                            let v266 = constructor_sub_reg_sext32(ctx, v79, v80, v91);
                                            let v267 = constructor_output_reg(ctx, v266);
                                            let v268 = Some(v267);
                                            // Rule at src\isa\s390x\lower.isle line 162.
                                            return v268;
                                        }
                                    }
                                }
                            }
                            let v269 = C::i16_from_negated_value(ctx, v55.1);
                            if let Some(v270) = v269 {
                                let v80 = C::put_in_reg(ctx, v55.0);
                                let v271 = constructor_add_simm16(ctx, v79, v80, v270);
                                let v272 = constructor_output_reg(ctx, v271);
                                let v273 = Some(v272);
                                // Rule at src\isa\s390x\lower.isle line 166.
                                return v273;
                            }
                            let v274 = C::i32_from_negated_value(ctx, v55.1);
                            if let Some(v275) = v274 {
                                let v80 = C::put_in_reg(ctx, v55.0);
                                let v276 = constructor_add_simm32(ctx, v79, v80, v275);
                                let v277 = constructor_output_reg(ctx, v276);
                                let v278 = Some(v277);
                                // Rule at src\isa\s390x\lower.isle line 168.
                                return v278;
                            }
                            let v128 = C::sinkable_inst(ctx, v55.1);
                            if let Some(v129) = v128 {
                                let v130 = &C::inst_data_value(ctx, v129);
                                if let &InstructionData::Load {
                                    opcode: ref v131,
                                    arg: v132,
                                    flags: v133,
                                    offset: v134,
                                } = v130 {
                                    match v131 {
                                        &Opcode::Load => {
                                            let v135 = C::bigendian(ctx, v133);
                                            if let Some(v136) = v135 {
                                                let v125 = C::value_type(ctx, v55.1);
                                                let v126 = C::ty_32_or_64(ctx, v125);
                                                if let Some(v127) = v126 {
                                                    let v80 = C::put_in_reg(ctx, v55.0);
                                                    let v137 = &constructor_sink_load(ctx, v129);
                                                    let v279 = constructor_sub_mem(ctx, v79, v80, v137);
                                                    let v280 = constructor_output_reg(ctx, v279);
                                                    let v281 = Some(v280);
                                                    // Rule at src\isa\s390x\lower.isle line 172.
                                                    return v281;
                                                }
                                                if v125 == I16 {
                                                    let v80 = C::put_in_reg(ctx, v55.0);
                                                    let v137 = &constructor_sink_load(ctx, v129);
                                                    let v282 = constructor_sub_mem_sext16(ctx, v79, v80, v137);
                                                    let v283 = constructor_output_reg(ctx, v282);
                                                    let v284 = Some(v283);
                                                    // Rule at src\isa\s390x\lower.isle line 176.
                                                    return v284;
                                                }
                                            }
                                        }
                                        &Opcode::Sload16 => {
                                            let v135 = C::bigendian(ctx, v133);
                                            if let Some(v136) = v135 {
                                                let v80 = C::put_in_reg(ctx, v55.0);
                                                let v163 = &constructor_sink_sload16(ctx, v129);
                                                let v285 = constructor_sub_mem_sext16(ctx, v79, v80, v163);
                                                let v286 = constructor_output_reg(ctx, v285);
                                                let v287 = Some(v286);
                                                // Rule at src\isa\s390x\lower.isle line 180.
                                                return v287;
                                            }
                                        }
                                        &Opcode::Sload32 => {
                                            let v135 = C::bigendian(ctx, v133);
                                            if let Some(v136) = v135 {
                                                let v80 = C::put_in_reg(ctx, v55.0);
                                                let v171 = &constructor_sink_sload32(ctx, v129);
                                                let v288 = constructor_sub_mem_sext32(ctx, v79, v80, v171);
                                                let v289 = constructor_output_reg(ctx, v288);
                                                let v290 = Some(v289);
                                                // Rule at src\isa\s390x\lower.isle line 182.
                                                return v290;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                        }
                        let v51 = C::vr128_ty(ctx, v3);
                        if let Some(v52) = v51 {
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v80 = C::put_in_reg(ctx, v55.0);
                            let v81 = C::put_in_reg(ctx, v55.1);
                            let v291 = constructor_vec_sub(ctx, v52, v80, v81);
                            let v292 = constructor_output_reg(ctx, v291);
                            let v293 = Some(v292);
                            // Rule at src\isa\s390x\lower.isle line 186.
                            return v293;
                        }
                        if let Some(v79) = v78 {
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v80 = C::put_in_reg(ctx, v55.0);
                            let v81 = C::put_in_reg(ctx, v55.1);
                            let v263 = constructor_sub_reg(ctx, v79, v80, v81);
                            let v264 = constructor_output_reg(ctx, v263);
                            let v265 = Some(v264);
                            // Rule at src\isa\s390x\lower.isle line 158.
                            return v265;
                        }
                    }
                }
                &Opcode::Imul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v55 = C::unpack_value_array_2(ctx, v54);
                        let v95 = C::def_inst(ctx, v55.0);
                        if let Some(v96) = v95 {
                            let v97 = &C::inst_data_value(ctx, v96);
                            if let &InstructionData::Unary {
                                opcode: ref v98,
                                arg: v99,
                            } = v97 {
                                match v98 {
                                    &Opcode::Uextend => {
                                        let v3 = C::value_type(ctx, v2);
                                        if v3 == I128 {
                                            let v85 = C::def_inst(ctx, v55.1);
                                            if let Some(v86) = v85 {
                                                let v87 = &C::inst_data_value(ctx, v86);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v88,
                                                    arg: v89,
                                                } = v87 {
                                                    if let &Opcode::Uextend = v88 {
                                                        let v453 = constructor_put_in_reg_zext64(ctx, v99);
                                                        let v454 = constructor_put_in_reg_zext64(ctx, v89);
                                                        let v455 = constructor_umul_wide(ctx, v453, v454);
                                                        let v456 = C::regpair_hi(ctx, v455);
                                                        let v457 = C::regpair_lo(ctx, v455);
                                                        let v458 = constructor_mov_to_vec128(ctx, I64X2, v456, v457);
                                                        let v459 = constructor_output_reg(ctx, v458);
                                                        let v460 = Some(v459);
                                                        // Rule at src\isa\s390x\lower.isle line 425.
                                                        return v460;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    &Opcode::Sextend => {
                                        let v3 = C::value_type(ctx, v2);
                                        if v3 == I128 {
                                            let v85 = C::def_inst(ctx, v55.1);
                                            if let Some(v86) = v85 {
                                                let v87 = &C::inst_data_value(ctx, v86);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v88,
                                                    arg: v89,
                                                } = v87 {
                                                    if let &Opcode::Sextend = v88 {
                                                        let v461 = constructor_put_in_reg_sext64(ctx, v99);
                                                        let v462 = constructor_put_in_reg_sext64(ctx, v89);
                                                        let v463 = constructor_smul_wide(ctx, v461, v462);
                                                        let v464 = C::regpair_hi(ctx, v463);
                                                        let v465 = C::regpair_lo(ctx, v463);
                                                        let v466 = constructor_mov_to_vec128(ctx, I64X2, v464, v465);
                                                        let v467 = constructor_output_reg(ctx, v466);
                                                        let v468 = Some(v467);
                                                        // Rule at src\isa\s390x\lower.isle line 429.
                                                        return v468;
                                                    }
                                                }
                                            }
                                        }
                                        let v78 = C::fits_in_64(ctx, v3);
                                        if let Some(v79) = v78 {
                                            let v100 = C::value_type(ctx, v99);
                                            if v100 == I32 {
                                                let v58 = C::put_in_reg(ctx, v55.1);
                                                let v101 = C::put_in_reg(ctx, v99);
                                                let v411 = constructor_mul_reg_sext32(ctx, v79, v58, v101);
                                                let v412 = constructor_output_reg(ctx, v411);
                                                let v413 = Some(v412);
                                                // Rule at src\isa\s390x\lower.isle line 356.
                                                return v413;
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        let v78 = C::fits_in_64(ctx, v3);
                        if let Some(v79) = v78 {
                            let v110 = C::i16_from_value(ctx, v55.0);
                            if let Some(v111) = v110 {
                                let v58 = C::put_in_reg(ctx, v55.1);
                                let v417 = constructor_mul_simm16(ctx, v79, v58, v111);
                                let v418 = constructor_output_reg(ctx, v417);
                                let v419 = Some(v418);
                                // Rule at src\isa\s390x\lower.isle line 362.
                                return v419;
                            }
                            let v120 = C::i32_from_value(ctx, v55.0);
                            if let Some(v121) = v120 {
                                let v58 = C::put_in_reg(ctx, v55.1);
                                let v423 = constructor_mul_simm32(ctx, v79, v58, v121);
                                let v424 = constructor_output_reg(ctx, v423);
                                let v425 = Some(v424);
                                // Rule at src\isa\s390x\lower.isle line 366.
                                return v425;
                            }
                            let v144 = C::sinkable_inst(ctx, v55.0);
                            if let Some(v145) = v144 {
                                let v146 = &C::inst_data_value(ctx, v145);
                                if let &InstructionData::Load {
                                    opcode: ref v147,
                                    arg: v148,
                                    flags: v149,
                                    offset: v150,
                                } = v146 {
                                    match v147 {
                                        &Opcode::Load => {
                                            let v151 = C::bigendian(ctx, v149);
                                            if let Some(v152) = v151 {
                                                let v141 = C::value_type(ctx, v55.0);
                                                let v142 = C::ty_32_or_64(ctx, v141);
                                                if let Some(v143) = v142 {
                                                    let v58 = C::put_in_reg(ctx, v55.1);
                                                    let v153 = &constructor_sink_load(ctx, v145);
                                                    let v429 = constructor_mul_mem(ctx, v79, v58, v153);
                                                    let v430 = constructor_output_reg(ctx, v429);
                                                    let v431 = Some(v430);
                                                    // Rule at src\isa\s390x\lower.isle line 372.
                                                    return v431;
                                                }
                                                if v141 == I16 {
                                                    let v58 = C::put_in_reg(ctx, v55.1);
                                                    let v153 = &constructor_sink_load(ctx, v145);
                                                    let v435 = constructor_mul_mem_sext16(ctx, v79, v58, v153);
                                                    let v436 = constructor_output_reg(ctx, v435);
                                                    let v437 = Some(v436);
                                                    // Rule at src\isa\s390x\lower.isle line 378.
                                                    return v437;
                                                }
                                            }
                                        }
                                        &Opcode::Sload16 => {
                                            let v151 = C::bigendian(ctx, v149);
                                            if let Some(v152) = v151 {
                                                let v58 = C::put_in_reg(ctx, v55.1);
                                                let v167 = &constructor_sink_sload16(ctx, v145);
                                                let v441 = constructor_mul_mem_sext16(ctx, v79, v58, v167);
                                                let v442 = constructor_output_reg(ctx, v441);
                                                let v443 = Some(v442);
                                                // Rule at src\isa\s390x\lower.isle line 384.
                                                return v443;
                                            }
                                        }
                                        &Opcode::Sload32 => {
                                            let v151 = C::bigendian(ctx, v149);
                                            if let Some(v152) = v151 {
                                                let v58 = C::put_in_reg(ctx, v55.1);
                                                let v175 = &constructor_sink_sload32(ctx, v145);
                                                let v447 = constructor_mul_mem_sext32(ctx, v79, v58, v175);
                                                let v448 = constructor_output_reg(ctx, v447);
                                                let v449 = Some(v448);
                                                // Rule at src\isa\s390x\lower.isle line 388.
                                                return v449;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            let v85 = C::def_inst(ctx, v55.1);
                            if let Some(v86) = v85 {
                                let v87 = &C::inst_data_value(ctx, v86);
                                if let &InstructionData::Unary {
                                    opcode: ref v88,
                                    arg: v89,
                                } = v87 {
                                    if let &Opcode::Sextend = v88 {
                                        let v90 = C::value_type(ctx, v89);
                                        if v90 == I32 {
                                            let v80 = C::put_in_reg(ctx, v55.0);
                                            let v91 = C::put_in_reg(ctx, v89);
                                            let v408 = constructor_mul_reg_sext32(ctx, v79, v80, v91);
                                            let v409 = constructor_output_reg(ctx, v408);
                                            let v410 = Some(v409);
                                            // Rule at src\isa\s390x\lower.isle line 354.
                                            return v410;
                                        }
                                    }
                                }
                            }
                            let v105 = C::i16_from_value(ctx, v55.1);
                            if let Some(v106) = v105 {
                                let v80 = C::put_in_reg(ctx, v55.0);
                                let v414 = constructor_mul_simm16(ctx, v79, v80, v106);
                                let v415 = constructor_output_reg(ctx, v414);
                                let v416 = Some(v415);
                                // Rule at src\isa\s390x\lower.isle line 360.
                                return v416;
                            }
                            let v115 = C::i32_from_value(ctx, v55.1);
                            if let Some(v116) = v115 {
                                let v80 = C::put_in_reg(ctx, v55.0);
                                let v420 = constructor_mul_simm32(ctx, v79, v80, v116);
                                let v421 = constructor_output_reg(ctx, v420);
                                let v422 = Some(v421);
                                // Rule at src\isa\s390x\lower.isle line 364.
                                return v422;
                            }
                            let v128 = C::sinkable_inst(ctx, v55.1);
                            if let Some(v129) = v128 {
                                let v130 = &C::inst_data_value(ctx, v129);
                                if let &InstructionData::Load {
                                    opcode: ref v131,
                                    arg: v132,
                                    flags: v133,
                                    offset: v134,
                                } = v130 {
                                    match v131 {
                                        &Opcode::Load => {
                                            let v135 = C::bigendian(ctx, v133);
                                            if let Some(v136) = v135 {
                                                let v125 = C::value_type(ctx, v55.1);
                                                let v126 = C::ty_32_or_64(ctx, v125);
                                                if let Some(v127) = v126 {
                                                    let v80 = C::put_in_reg(ctx, v55.0);
                                                    let v137 = &constructor_sink_load(ctx, v129);
                                                    let v426 = constructor_mul_mem(ctx, v79, v80, v137);
                                                    let v427 = constructor_output_reg(ctx, v426);
                                                    let v428 = Some(v427);
                                                    // Rule at src\isa\s390x\lower.isle line 370.
                                                    return v428;
                                                }
                                                if v125 == I16 {
                                                    let v80 = C::put_in_reg(ctx, v55.0);
                                                    let v137 = &constructor_sink_load(ctx, v129);
                                                    let v432 = constructor_mul_mem_sext16(ctx, v79, v80, v137);
                                                    let v433 = constructor_output_reg(ctx, v432);
                                                    let v434 = Some(v433);
                                                    // Rule at src\isa\s390x\lower.isle line 376.
                                                    return v434;
                                                }
                                            }
                                        }
                                        &Opcode::Sload16 => {
                                            let v135 = C::bigendian(ctx, v133);
                                            if let Some(v136) = v135 {
                                                let v80 = C::put_in_reg(ctx, v55.0);
                                                let v163 = &constructor_sink_sload16(ctx, v129);
                                                let v438 = constructor_mul_mem_sext16(ctx, v79, v80, v163);
                                                let v439 = constructor_output_reg(ctx, v438);
                                                let v440 = Some(v439);
                                                // Rule at src\isa\s390x\lower.isle line 382.
                                                return v440;
                                            }
                                        }
                                        &Opcode::Sload32 => {
                                            let v135 = C::bigendian(ctx, v133);
                                            if let Some(v136) = v135 {
                                                let v80 = C::put_in_reg(ctx, v55.0);
                                                let v171 = &constructor_sink_sload32(ctx, v129);
                                                let v444 = constructor_mul_mem_sext32(ctx, v79, v80, v171);
                                                let v445 = constructor_output_reg(ctx, v444);
                                                let v446 = Some(v445);
                                                // Rule at src\isa\s390x\lower.isle line 386.
                                                return v446;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                        }
                        let v51 = C::vr128_ty(ctx, v3);
                        if let Some(v52) = v51 {
                            let v80 = C::put_in_reg(ctx, v55.0);
                            let v81 = C::put_in_reg(ctx, v55.1);
                            let v450 = constructor_vec_mul_impl(ctx, v52, v80, v81);
                            let v451 = constructor_output_reg(ctx, v450);
                            let v452 = Some(v451);
                            // Rule at src\isa\s390x\lower.isle line 393.
                            return v452;
                        }
                        if let Some(v79) = v78 {
                            let v80 = C::put_in_reg(ctx, v55.0);
                            let v81 = C::put_in_reg(ctx, v55.1);
                            let v405 = constructor_mul_reg(ctx, v79, v80, v81);
                            let v406 = constructor_output_reg(ctx, v405);
                            let v407 = Some(v406);
                            // Rule at src\isa\s390x\lower.isle line 350.
                            return v407;
                        }
                    }
                }
                &Opcode::Umulhi => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32 => {
                                let v55 = C::unpack_value_array_2(ctx, v54);
                                let v477 = constructor_put_in_reg_zext64(ctx, v55.0);
                                let v478 = constructor_put_in_reg_zext64(ctx, v55.1);
                                let v480 = constructor_mul_reg(ctx, I64, v477, v478);
                                let v482 = constructor_lshr_imm(ctx, I64, v480, 0x20_u8);
                                let v483 = constructor_output_reg(ctx, v482);
                                let v484 = Some(v483);
                                // Rule at src\isa\s390x\lower.isle line 443.
                                return v484;
                            }
                            I64 => {
                                let v55 = C::unpack_value_array_2(ctx, v54);
                                let v80 = C::put_in_reg(ctx, v55.0);
                                let v81 = C::put_in_reg(ctx, v55.1);
                                let v485 = constructor_umul_wide(ctx, v80, v81);
                                let v486 = C::regpair_hi(ctx, v485);
                                let v487 = constructor_output_reg(ctx, v486);
                                let v488 = Some(v487);
                                // Rule at src\isa\s390x\lower.isle line 450.
                                return v488;
                            }
                            I8X16 => {
                                let v55 = C::unpack_value_array_2(ctx, v54);
                                let v80 = C::put_in_reg(ctx, v55.0);
                                let v81 = C::put_in_reg(ctx, v55.1);
                                let v489 = constructor_vec_umulhi(ctx, I8X16, v80, v81);
                                let v490 = constructor_output_reg(ctx, v489);
                                let v491 = Some(v490);
                                // Rule at src\isa\s390x\lower.isle line 455.
                                return v491;
                            }
                            I16X8 => {
                                let v55 = C::unpack_value_array_2(ctx, v54);
                                let v80 = C::put_in_reg(ctx, v55.0);
                                let v81 = C::put_in_reg(ctx, v55.1);
                                let v493 = constructor_vec_umulhi(ctx, I16X8, v80, v81);
                                let v494 = constructor_output_reg(ctx, v493);
                                let v495 = Some(v494);
                                // Rule at src\isa\s390x\lower.isle line 456.
                                return v495;
                            }
                            I32X4 => {
                                let v55 = C::unpack_value_array_2(ctx, v54);
                                let v80 = C::put_in_reg(ctx, v55.0);
                                let v81 = C::put_in_reg(ctx, v55.1);
                                let v497 = constructor_vec_umulhi(ctx, I32X4, v80, v81);
                                let v498 = constructor_output_reg(ctx, v497);
                                let v499 = Some(v498);
                                // Rule at src\isa\s390x\lower.isle line 457.
                                return v499;
                            }
                            I64X2 => {
                                let v55 = C::unpack_value_array_2(ctx, v54);
                                let v80 = C::put_in_reg(ctx, v55.0);
                                let v69 = C::zero_reg(ctx);
                                let v500 = constructor_vec_extract_lane(ctx, I64X2, v80, 0x0_u8, v69);
                                let v501 = C::put_in_reg(ctx, v55.1);
                                let v502 = C::zero_reg(ctx);
                                let v503 = constructor_vec_extract_lane(ctx, I64X2, v501, 0x0_u8, v502);
                                let v504 = constructor_umul_wide(ctx, v500, v503);
                                let v505 = C::regpair_hi(ctx, v504);
                                let v198 = C::put_in_reg(ctx, v55.0);
                                let v506 = C::zero_reg(ctx);
                                let v507 = constructor_vec_extract_lane(ctx, I64X2, v198, 0x1_u8, v506);
                                let v508 = C::put_in_reg(ctx, v55.1);
                                let v509 = C::zero_reg(ctx);
                                let v510 = constructor_vec_extract_lane(ctx, I64X2, v508, 0x1_u8, v509);
                                let v511 = constructor_umul_wide(ctx, v507, v510);
                                let v512 = C::regpair_hi(ctx, v511);
                                let v513 = constructor_mov_to_vec128(ctx, I64X2, v505, v512);
                                let v514 = constructor_output_reg(ctx, v513);
                                let v515 = Some(v514);
                                // Rule at src\isa\s390x\lower.isle line 461.
                                return v515;
                            }
                            _ => {}
                        }
                        let v469 = C::ty_8_or_16(ctx, v3);
                        if let Some(v470) = v469 {
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v343 = constructor_put_in_reg_zext32(ctx, v55.0);
                            let v344 = constructor_put_in_reg_zext32(ctx, v55.1);
                            let v472 = constructor_mul_reg(ctx, I32, v343, v344);
                            let v473 = C::ty_bits(ctx, v470);
                            let v474 = constructor_lshr_imm(ctx, I32, v472, v473);
                            let v475 = constructor_output_reg(ctx, v474);
                            let v476 = Some(v475);
                            // Rule at src\isa\s390x\lower.isle line 436.
                            return v476;
                        }
                    }
                }
                &Opcode::Smulhi => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32 => {
                                let v55 = C::unpack_value_array_2(ctx, v54);
                                let v520 = constructor_put_in_reg_sext64(ctx, v55.0);
                                let v521 = constructor_put_in_reg_sext64(ctx, v55.1);
                                let v522 = constructor_mul_reg(ctx, I64, v520, v521);
                                let v523 = constructor_ashr_imm(ctx, I64, v522, 0x20_u8);
                                let v524 = constructor_output_reg(ctx, v523);
                                let v525 = Some(v524);
                                // Rule at src\isa\s390x\lower.isle line 481.
                                return v525;
                            }
                            I64 => {
                                let v55 = C::unpack_value_array_2(ctx, v54);
                                let v80 = C::put_in_reg(ctx, v55.0);
                                let v81 = C::put_in_reg(ctx, v55.1);
                                let v526 = constructor_smul_wide(ctx, v80, v81);
                                let v527 = C::regpair_hi(ctx, v526);
                                let v528 = constructor_output_reg(ctx, v527);
                                let v529 = Some(v528);
                                // Rule at src\isa\s390x\lower.isle line 488.
                                return v529;
                            }
                            I8X16 => {
                                let v55 = C::unpack_value_array_2(ctx, v54);
                                let v80 = C::put_in_reg(ctx, v55.0);
                                let v81 = C::put_in_reg(ctx, v55.1);
                                let v530 = constructor_vec_smulhi(ctx, I8X16, v80, v81);
                                let v531 = constructor_output_reg(ctx, v530);
                                let v532 = Some(v531);
                                // Rule at src\isa\s390x\lower.isle line 493.
                                return v532;
                            }
                            I16X8 => {
                                let v55 = C::unpack_value_array_2(ctx, v54);
                                let v80 = C::put_in_reg(ctx, v55.0);
                                let v81 = C::put_in_reg(ctx, v55.1);
                                let v533 = constructor_vec_smulhi(ctx, I16X8, v80, v81);
                                let v534 = constructor_output_reg(ctx, v533);
                                let v535 = Some(v534);
                                // Rule at src\isa\s390x\lower.isle line 494.
                                return v535;
                            }
                            I32X4 => {
                                let v55 = C::unpack_value_array_2(ctx, v54);
                                let v80 = C::put_in_reg(ctx, v55.0);
                                let v81 = C::put_in_reg(ctx, v55.1);
                                let v536 = constructor_vec_smulhi(ctx, I32X4, v80, v81);
                                let v537 = constructor_output_reg(ctx, v536);
                                let v538 = Some(v537);
                                // Rule at src\isa\s390x\lower.isle line 495.
                                return v538;
                            }
                            I64X2 => {
                                let v55 = C::unpack_value_array_2(ctx, v54);
                                let v80 = C::put_in_reg(ctx, v55.0);
                                let v69 = C::zero_reg(ctx);
                                let v500 = constructor_vec_extract_lane(ctx, I64X2, v80, 0x0_u8, v69);
                                let v501 = C::put_in_reg(ctx, v55.1);
                                let v502 = C::zero_reg(ctx);
                                let v503 = constructor_vec_extract_lane(ctx, I64X2, v501, 0x0_u8, v502);
                                let v539 = constructor_smul_wide(ctx, v500, v503);
                                let v540 = C::regpair_hi(ctx, v539);
                                let v541 = constructor_copy_reg(ctx, I64, v540);
                                let v542 = C::put_in_reg(ctx, v55.0);
                                let v543 = C::zero_reg(ctx);
                                let v544 = constructor_vec_extract_lane(ctx, I64X2, v542, 0x1_u8, v543);
                                let v545 = C::put_in_reg(ctx, v55.1);
                                let v546 = C::zero_reg(ctx);
                                let v547 = constructor_vec_extract_lane(ctx, I64X2, v545, 0x1_u8, v546);
                                let v548 = constructor_smul_wide(ctx, v544, v547);
                                let v549 = C::regpair_hi(ctx, v548);
                                let v550 = constructor_mov_to_vec128(ctx, I64X2, v541, v549);
                                let v551 = constructor_output_reg(ctx, v550);
                                let v552 = Some(v551);
                                // Rule at src\isa\s390x\lower.isle line 499.
                                return v552;
                            }
                            _ => {}
                        }
                        let v469 = C::ty_8_or_16(ctx, v3);
                        if let Some(v470) = v469 {
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v373 = constructor_put_in_reg_sext32(ctx, v55.0);
                            let v374 = constructor_put_in_reg_sext32(ctx, v55.1);
                            let v516 = constructor_mul_reg(ctx, I32, v373, v374);
                            let v473 = C::ty_bits(ctx, v470);
                            let v517 = constructor_ashr_imm(ctx, I32, v516, v473);
                            let v518 = constructor_output_reg(ctx, v517);
                            let v519 = Some(v518);
                            // Rule at src\isa\s390x\lower.isle line 474.
                            return v519;
                        }
                    }
                }
                &Opcode::SqmulRoundSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v182 = C::ty_vec128(ctx, v3);
                        if let Some(v183) = v182 {
                            let v190 = constructor_vec_widen_type(ctx, v183);
                            let v191 = constructor_vec_widen_type(ctx, v183);
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v192 = C::put_in_reg(ctx, v55.0);
                            let v193 = constructor_vec_unpacks_high(ctx, v183, v192);
                            let v194 = C::put_in_reg(ctx, v55.1);
                            let v195 = constructor_vec_unpacks_high(ctx, v183, v194);
                            let v553 = constructor_sqmul_impl(ctx, v191, v193, v195);
                            let v197 = constructor_vec_widen_type(ctx, v183);
                            let v198 = C::put_in_reg(ctx, v55.0);
                            let v199 = constructor_vec_unpacks_low(ctx, v183, v198);
                            let v200 = C::put_in_reg(ctx, v55.1);
                            let v201 = constructor_vec_unpacks_low(ctx, v183, v200);
                            let v554 = constructor_sqmul_impl(ctx, v197, v199, v201);
                            let v555 = constructor_vec_pack_ssat(ctx, v190, v553, v554);
                            let v556 = constructor_output_reg(ctx, v555);
                            let v557 = Some(v556);
                            // Rule at src\isa\s390x\lower.isle line 512.
                            return v557;
                        }
                    }
                }
                &Opcode::Udiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v78 = C::fits_in_64(ctx, v3);
                        if let Some(v79) = v78 {
                            let v304 = constructor_ty_ext32(ctx, v79);
                            let v559 = constructor_imm(ctx, v304, 0x0_u64);
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v560 = constructor_put_in_reg_zext32(ctx, v55.0);
                            let v561 = C::regpair(ctx, v559, v560);
                            let v562 = constructor_put_in_reg_zext32(ctx, v55.1);
                            let v563 = constructor_ty_ext32(ctx, v79);
                            let v564 = constructor_udivmod(ctx, v563, v561, v562);
                            let v565 = C::regpair_lo(ctx, v564);
                            let v566 = constructor_output_reg(ctx, v565);
                            let v567 = Some(v566);
                            // Rule at src\isa\s390x\lower.isle line 550.
                            return v567;
                        }
                    }
                }
                &Opcode::Sdiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v78 = C::fits_in_64(ctx, v3);
                        if let Some(v79) = v78 {
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v571 = constructor_div_overflow_check_needed(ctx, v55.1);
                            let v572 = constructor_put_in_reg_sext64(ctx, v55.0);
                            let v573 = constructor_put_in_reg_sext32(ctx, v55.1);
                            let v574 = constructor_ty_ext32(ctx, v79);
                            let v575 = constructor_maybe_trap_if_sdiv_overflow(ctx, v571, v574, v79, v572, v573);
                            let v576 = constructor_sdivmod(ctx, v574, v572, v573);
                            let v577 = C::regpair_lo(ctx, v576);
                            let v578 = constructor_output_reg(ctx, v577);
                            let v579 = Some(v578);
                            // Rule at src\isa\s390x\lower.isle line 595.
                            return v579;
                        }
                    }
                }
                &Opcode::Urem => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v78 = C::fits_in_64(ctx, v3);
                        if let Some(v79) = v78 {
                            let v304 = constructor_ty_ext32(ctx, v79);
                            let v559 = constructor_imm(ctx, v304, 0x0_u64);
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v560 = constructor_put_in_reg_zext32(ctx, v55.0);
                            let v561 = C::regpair(ctx, v559, v560);
                            let v562 = constructor_put_in_reg_zext32(ctx, v55.1);
                            let v563 = constructor_ty_ext32(ctx, v79);
                            let v564 = constructor_udivmod(ctx, v563, v561, v562);
                            let v568 = C::regpair_hi(ctx, v564);
                            let v569 = constructor_output_reg(ctx, v568);
                            let v570 = Some(v569);
                            // Rule at src\isa\s390x\lower.isle line 569.
                            return v570;
                        }
                    }
                }
                &Opcode::Srem => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v78 = C::fits_in_64(ctx, v3);
                        if let Some(v79) = v78 {
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v571 = constructor_div_overflow_check_needed(ctx, v55.1);
                            let v572 = constructor_put_in_reg_sext64(ctx, v55.0);
                            let v573 = constructor_put_in_reg_sext32(ctx, v55.1);
                            let v574 = constructor_ty_ext32(ctx, v79);
                            let v580 = constructor_maybe_avoid_srem_overflow(ctx, v571, v574, v572, v573);
                            let v581 = constructor_sdivmod(ctx, v574, v580, v573);
                            let v582 = C::regpair_hi(ctx, v581);
                            let v583 = constructor_output_reg(ctx, v582);
                            let v584 = Some(v583);
                            // Rule at src\isa\s390x\lower.isle line 615.
                            return v584;
                        }
                    }
                }
                &Opcode::Band => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v51 = C::vr128_ty(ctx, v3);
                        if let Some(v52) = v51 {
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v95 = C::def_inst(ctx, v55.0);
                            if let Some(v96) = v95 {
                                let v97 = &C::inst_data_value(ctx, v96);
                                if let &InstructionData::Unary {
                                    opcode: ref v98,
                                    arg: v99,
                                } = v97 {
                                    if let &Opcode::Bnot = v98 {
                                        let v58 = C::put_in_reg(ctx, v55.1);
                                        let v101 = C::put_in_reg(ctx, v99);
                                        let v859 = constructor_vec_and_not(ctx, v52, v58, v101);
                                        let v860 = constructor_output_reg(ctx, v859);
                                        let v861 = Some(v860);
                                        // Rule at src\isa\s390x\lower.isle line 1048.
                                        return v861;
                                    }
                                }
                            }
                            let v85 = C::def_inst(ctx, v55.1);
                            if let Some(v86) = v85 {
                                let v87 = &C::inst_data_value(ctx, v86);
                                if let &InstructionData::Unary {
                                    opcode: ref v88,
                                    arg: v89,
                                } = v87 {
                                    if let &Opcode::Bnot = v88 {
                                        let v80 = C::put_in_reg(ctx, v55.0);
                                        let v91 = C::put_in_reg(ctx, v89);
                                        let v856 = constructor_vec_and_not(ctx, v52, v80, v91);
                                        let v857 = constructor_output_reg(ctx, v856);
                                        let v858 = Some(v857);
                                        // Rule at src\isa\s390x\lower.isle line 1046.
                                        return v858;
                                    }
                                }
                            }
                        }
                        let v78 = C::fits_in_64(ctx, v3);
                        if let Some(v79) = v78 {
                            let v792 = C::mie2_enabled(ctx, v3);
                            if let Some(v793) = v792 {
                                let v55 = C::unpack_value_array_2(ctx, v54);
                                let v95 = C::def_inst(ctx, v55.0);
                                if let Some(v96) = v95 {
                                    let v97 = &C::inst_data_value(ctx, v96);
                                    if let &InstructionData::Unary {
                                        opcode: ref v98,
                                        arg: v99,
                                    } = v97 {
                                        if let &Opcode::Bnot = v98 {
                                            let v58 = C::put_in_reg(ctx, v55.1);
                                            let v101 = C::put_in_reg(ctx, v99);
                                            let v853 = constructor_and_not_reg(ctx, v79, v58, v101);
                                            let v854 = constructor_output_reg(ctx, v853);
                                            let v855 = Some(v854);
                                            // Rule at src\isa\s390x\lower.isle line 1042.
                                            return v855;
                                        }
                                    }
                                }
                                let v85 = C::def_inst(ctx, v55.1);
                                if let Some(v86) = v85 {
                                    let v87 = &C::inst_data_value(ctx, v86);
                                    if let &InstructionData::Unary {
                                        opcode: ref v88,
                                        arg: v89,
                                    } = v87 {
                                        if let &Opcode::Bnot = v88 {
                                            let v80 = C::put_in_reg(ctx, v55.0);
                                            let v91 = C::put_in_reg(ctx, v89);
                                            let v850 = constructor_and_not_reg(ctx, v79, v80, v91);
                                            let v851 = constructor_output_reg(ctx, v850);
                                            let v852 = Some(v851);
                                            // Rule at src\isa\s390x\lower.isle line 1040.
                                            return v852;
                                        }
                                    }
                                }
                            }
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v826 = C::uimm16shifted_from_inverted_value(ctx, v55.0);
                            if let Some(v827) = v826 {
                                let v58 = C::put_in_reg(ctx, v55.1);
                                let v828 = constructor_and_uimm16shifted(ctx, v79, v58, v827);
                                let v829 = constructor_output_reg(ctx, v828);
                                let v830 = Some(v829);
                                // Rule at src\isa\s390x\lower.isle line 1018.
                                return v830;
                            }
                            let v821 = C::uimm16shifted_from_inverted_value(ctx, v55.1);
                            if let Some(v822) = v821 {
                                let v80 = C::put_in_reg(ctx, v55.0);
                                let v823 = constructor_and_uimm16shifted(ctx, v79, v80, v822);
                                let v824 = constructor_output_reg(ctx, v823);
                                let v825 = Some(v824);
                                // Rule at src\isa\s390x\lower.isle line 1016.
                                return v825;
                            }
                            let v836 = C::uimm32shifted_from_inverted_value(ctx, v55.0);
                            if let Some(v837) = v836 {
                                let v58 = C::put_in_reg(ctx, v55.1);
                                let v838 = constructor_and_uimm32shifted(ctx, v79, v58, v837);
                                let v839 = constructor_output_reg(ctx, v838);
                                let v840 = Some(v839);
                                // Rule at src\isa\s390x\lower.isle line 1022.
                                return v840;
                            }
                            let v831 = C::uimm32shifted_from_inverted_value(ctx, v55.1);
                            if let Some(v832) = v831 {
                                let v80 = C::put_in_reg(ctx, v55.0);
                                let v833 = constructor_and_uimm32shifted(ctx, v79, v80, v832);
                                let v834 = constructor_output_reg(ctx, v833);
                                let v835 = Some(v834);
                                // Rule at src\isa\s390x\lower.isle line 1020.
                                return v835;
                            }
                            let v141 = C::value_type(ctx, v55.0);
                            let v142 = C::ty_32_or_64(ctx, v141);
                            if let Some(v143) = v142 {
                                let v144 = C::sinkable_inst(ctx, v55.0);
                                if let Some(v145) = v144 {
                                    let v146 = &C::inst_data_value(ctx, v145);
                                    if let &InstructionData::Load {
                                        opcode: ref v147,
                                        arg: v148,
                                        flags: v149,
                                        offset: v150,
                                    } = v146 {
                                        if let &Opcode::Load = v147 {
                                            let v151 = C::bigendian(ctx, v149);
                                            if let Some(v152) = v151 {
                                                let v58 = C::put_in_reg(ctx, v55.1);
                                                let v153 = &constructor_sink_load(ctx, v145);
                                                let v844 = constructor_and_mem(ctx, v79, v58, v153);
                                                let v845 = constructor_output_reg(ctx, v844);
                                                let v846 = Some(v845);
                                                // Rule at src\isa\s390x\lower.isle line 1028.
                                                return v846;
                                            }
                                        }
                                    }
                                }
                            }
                            let v125 = C::value_type(ctx, v55.1);
                            let v126 = C::ty_32_or_64(ctx, v125);
                            if let Some(v127) = v126 {
                                let v128 = C::sinkable_inst(ctx, v55.1);
                                if let Some(v129) = v128 {
                                    let v130 = &C::inst_data_value(ctx, v129);
                                    if let &InstructionData::Load {
                                        opcode: ref v131,
                                        arg: v132,
                                        flags: v133,
                                        offset: v134,
                                    } = v130 {
                                        if let &Opcode::Load = v131 {
                                            let v135 = C::bigendian(ctx, v133);
                                            if let Some(v136) = v135 {
                                                let v80 = C::put_in_reg(ctx, v55.0);
                                                let v137 = &constructor_sink_load(ctx, v129);
                                                let v841 = constructor_and_mem(ctx, v79, v80, v137);
                                                let v842 = constructor_output_reg(ctx, v841);
                                                let v843 = Some(v842);
                                                // Rule at src\isa\s390x\lower.isle line 1026.
                                                return v843;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if let Some(v52) = v51 {
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v80 = C::put_in_reg(ctx, v55.0);
                            let v81 = C::put_in_reg(ctx, v55.1);
                            let v847 = constructor_vec_and(ctx, v52, v80, v81);
                            let v848 = constructor_output_reg(ctx, v847);
                            let v849 = Some(v848);
                            // Rule at src\isa\s390x\lower.isle line 1032.
                            return v849;
                        }
                        if let Some(v79) = v78 {
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v80 = C::put_in_reg(ctx, v55.0);
                            let v81 = C::put_in_reg(ctx, v55.1);
                            let v818 = constructor_and_reg(ctx, v79, v80, v81);
                            let v819 = constructor_output_reg(ctx, v818);
                            let v820 = Some(v819);
                            // Rule at src\isa\s390x\lower.isle line 1012.
                            return v820;
                        }
                    }
                }
                &Opcode::Bor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v51 = C::vr128_ty(ctx, v3);
                        if let Some(v52) = v51 {
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v95 = C::def_inst(ctx, v55.0);
                            if let Some(v96) = v95 {
                                let v97 = &C::inst_data_value(ctx, v96);
                                if let &InstructionData::Unary {
                                    opcode: ref v98,
                                    arg: v99,
                                } = v97 {
                                    if let &Opcode::Bnot = v98 {
                                        let v58 = C::put_in_reg(ctx, v55.1);
                                        let v101 = C::put_in_reg(ctx, v99);
                                        let v903 = constructor_vec_or_not(ctx, v52, v58, v101);
                                        let v904 = constructor_output_reg(ctx, v903);
                                        let v905 = Some(v904);
                                        // Rule at src\isa\s390x\lower.isle line 1090.
                                        return v905;
                                    }
                                }
                            }
                            let v85 = C::def_inst(ctx, v55.1);
                            if let Some(v86) = v85 {
                                let v87 = &C::inst_data_value(ctx, v86);
                                if let &InstructionData::Unary {
                                    opcode: ref v88,
                                    arg: v89,
                                } = v87 {
                                    if let &Opcode::Bnot = v88 {
                                        let v80 = C::put_in_reg(ctx, v55.0);
                                        let v91 = C::put_in_reg(ctx, v89);
                                        let v900 = constructor_vec_or_not(ctx, v52, v80, v91);
                                        let v901 = constructor_output_reg(ctx, v900);
                                        let v902 = Some(v901);
                                        // Rule at src\isa\s390x\lower.isle line 1088.
                                        return v902;
                                    }
                                }
                            }
                        }
                        let v78 = C::fits_in_64(ctx, v3);
                        if let Some(v79) = v78 {
                            let v792 = C::mie2_enabled(ctx, v3);
                            if let Some(v793) = v792 {
                                let v55 = C::unpack_value_array_2(ctx, v54);
                                let v95 = C::def_inst(ctx, v55.0);
                                if let Some(v96) = v95 {
                                    let v97 = &C::inst_data_value(ctx, v96);
                                    if let &InstructionData::Unary {
                                        opcode: ref v98,
                                        arg: v99,
                                    } = v97 {
                                        if let &Opcode::Bnot = v98 {
                                            let v58 = C::put_in_reg(ctx, v55.1);
                                            let v101 = C::put_in_reg(ctx, v99);
                                            let v897 = constructor_or_not_reg(ctx, v79, v58, v101);
                                            let v898 = constructor_output_reg(ctx, v897);
                                            let v899 = Some(v898);
                                            // Rule at src\isa\s390x\lower.isle line 1084.
                                            return v899;
                                        }
                                    }
                                }
                                let v85 = C::def_inst(ctx, v55.1);
                                if let Some(v86) = v85 {
                                    let v87 = &C::inst_data_value(ctx, v86);
                                    if let &InstructionData::Unary {
                                        opcode: ref v88,
                                        arg: v89,
                                    } = v87 {
                                        if let &Opcode::Bnot = v88 {
                                            let v80 = C::put_in_reg(ctx, v55.0);
                                            let v91 = C::put_in_reg(ctx, v89);
                                            let v894 = constructor_or_not_reg(ctx, v79, v80, v91);
                                            let v895 = constructor_output_reg(ctx, v894);
                                            let v896 = Some(v895);
                                            // Rule at src\isa\s390x\lower.isle line 1082.
                                            return v896;
                                        }
                                    }
                                }
                            }
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v870 = C::uimm16shifted_from_value(ctx, v55.0);
                            if let Some(v871) = v870 {
                                let v58 = C::put_in_reg(ctx, v55.1);
                                let v872 = constructor_or_uimm16shifted(ctx, v79, v58, v871);
                                let v873 = constructor_output_reg(ctx, v872);
                                let v874 = Some(v873);
                                // Rule at src\isa\s390x\lower.isle line 1060.
                                return v874;
                            }
                            let v865 = C::uimm16shifted_from_value(ctx, v55.1);
                            if let Some(v866) = v865 {
                                let v80 = C::put_in_reg(ctx, v55.0);
                                let v867 = constructor_or_uimm16shifted(ctx, v79, v80, v866);
                                let v868 = constructor_output_reg(ctx, v867);
                                let v869 = Some(v868);
                                // Rule at src\isa\s390x\lower.isle line 1058.
                                return v869;
                            }
                            let v880 = C::uimm32shifted_from_value(ctx, v55.0);
                            if let Some(v881) = v880 {
                                let v58 = C::put_in_reg(ctx, v55.1);
                                let v882 = constructor_or_uimm32shifted(ctx, v79, v58, v881);
                                let v883 = constructor_output_reg(ctx, v882);
                                let v884 = Some(v883);
                                // Rule at src\isa\s390x\lower.isle line 1064.
                                return v884;
                            }
                            let v875 = C::uimm32shifted_from_value(ctx, v55.1);
                            if let Some(v876) = v875 {
                                let v80 = C::put_in_reg(ctx, v55.0);
                                let v877 = constructor_or_uimm32shifted(ctx, v79, v80, v876);
                                let v878 = constructor_output_reg(ctx, v877);
                                let v879 = Some(v878);
                                // Rule at src\isa\s390x\lower.isle line 1062.
                                return v879;
                            }
                            let v141 = C::value_type(ctx, v55.0);
                            let v142 = C::ty_32_or_64(ctx, v141);
                            if let Some(v143) = v142 {
                                let v144 = C::sinkable_inst(ctx, v55.0);
                                if let Some(v145) = v144 {
                                    let v146 = &C::inst_data_value(ctx, v145);
                                    if let &InstructionData::Load {
                                        opcode: ref v147,
                                        arg: v148,
                                        flags: v149,
                                        offset: v150,
                                    } = v146 {
                                        if let &Opcode::Load = v147 {
                                            let v151 = C::bigendian(ctx, v149);
                                            if let Some(v152) = v151 {
                                                let v58 = C::put_in_reg(ctx, v55.1);
                                                let v153 = &constructor_sink_load(ctx, v145);
                                                let v888 = constructor_or_mem(ctx, v79, v58, v153);
                                                let v889 = constructor_output_reg(ctx, v888);
                                                let v890 = Some(v889);
                                                // Rule at src\isa\s390x\lower.isle line 1070.
                                                return v890;
                                            }
                                        }
                                    }
                                }
                            }
                            let v125 = C::value_type(ctx, v55.1);
                            let v126 = C::ty_32_or_64(ctx, v125);
                            if let Some(v127) = v126 {
                                let v128 = C::sinkable_inst(ctx, v55.1);
                                if let Some(v129) = v128 {
                                    let v130 = &C::inst_data_value(ctx, v129);
                                    if let &InstructionData::Load {
                                        opcode: ref v131,
                                        arg: v132,
                                        flags: v133,
                                        offset: v134,
                                    } = v130 {
                                        if let &Opcode::Load = v131 {
                                            let v135 = C::bigendian(ctx, v133);
                                            if let Some(v136) = v135 {
                                                let v80 = C::put_in_reg(ctx, v55.0);
                                                let v137 = &constructor_sink_load(ctx, v129);
                                                let v885 = constructor_or_mem(ctx, v79, v80, v137);
                                                let v886 = constructor_output_reg(ctx, v885);
                                                let v887 = Some(v886);
                                                // Rule at src\isa\s390x\lower.isle line 1068.
                                                return v887;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if let Some(v52) = v51 {
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v80 = C::put_in_reg(ctx, v55.0);
                            let v81 = C::put_in_reg(ctx, v55.1);
                            let v891 = constructor_vec_or(ctx, v52, v80, v81);
                            let v892 = constructor_output_reg(ctx, v891);
                            let v893 = Some(v892);
                            // Rule at src\isa\s390x\lower.isle line 1074.
                            return v893;
                        }
                        if let Some(v79) = v78 {
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v80 = C::put_in_reg(ctx, v55.0);
                            let v81 = C::put_in_reg(ctx, v55.1);
                            let v862 = constructor_or_reg(ctx, v79, v80, v81);
                            let v863 = constructor_output_reg(ctx, v862);
                            let v864 = Some(v863);
                            // Rule at src\isa\s390x\lower.isle line 1054.
                            return v864;
                        }
                    }
                }
                &Opcode::Bxor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v51 = C::vr128_ty(ctx, v3);
                        if let Some(v52) = v51 {
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v95 = C::def_inst(ctx, v55.0);
                            if let Some(v96) = v95 {
                                let v97 = &C::inst_data_value(ctx, v96);
                                if let &InstructionData::Unary {
                                    opcode: ref v98,
                                    arg: v99,
                                } = v97 {
                                    if let &Opcode::Bnot = v98 {
                                        let v58 = C::put_in_reg(ctx, v55.1);
                                        let v101 = C::put_in_reg(ctx, v99);
                                        let v933 = constructor_vec_not_xor(ctx, v52, v58, v101);
                                        let v934 = constructor_output_reg(ctx, v933);
                                        let v935 = Some(v934);
                                        // Rule at src\isa\s390x\lower.isle line 1129.
                                        return v935;
                                    }
                                }
                            }
                            let v85 = C::def_inst(ctx, v55.1);
                            if let Some(v86) = v85 {
                                let v87 = &C::inst_data_value(ctx, v86);
                                if let &InstructionData::Unary {
                                    opcode: ref v88,
                                    arg: v89,
                                } = v87 {
                                    if let &Opcode::Bnot = v88 {
                                        let v80 = C::put_in_reg(ctx, v55.0);
                                        let v91 = C::put_in_reg(ctx, v89);
                                        let v930 = constructor_vec_not_xor(ctx, v52, v80, v91);
                                        let v931 = constructor_output_reg(ctx, v930);
                                        let v932 = Some(v931);
                                        // Rule at src\isa\s390x\lower.isle line 1127.
                                        return v932;
                                    }
                                }
                            }
                        }
                        let v78 = C::fits_in_64(ctx, v3);
                        if let Some(v79) = v78 {
                            let v792 = C::mie2_enabled(ctx, v3);
                            if let Some(v793) = v792 {
                                let v55 = C::unpack_value_array_2(ctx, v54);
                                let v95 = C::def_inst(ctx, v55.0);
                                if let Some(v96) = v95 {
                                    let v97 = &C::inst_data_value(ctx, v96);
                                    if let &InstructionData::Unary {
                                        opcode: ref v98,
                                        arg: v99,
                                    } = v97 {
                                        if let &Opcode::Bnot = v98 {
                                            let v58 = C::put_in_reg(ctx, v55.1);
                                            let v101 = C::put_in_reg(ctx, v99);
                                            let v927 = constructor_not_xor_reg(ctx, v79, v58, v101);
                                            let v928 = constructor_output_reg(ctx, v927);
                                            let v929 = Some(v928);
                                            // Rule at src\isa\s390x\lower.isle line 1123.
                                            return v929;
                                        }
                                    }
                                }
                                let v85 = C::def_inst(ctx, v55.1);
                                if let Some(v86) = v85 {
                                    let v87 = &C::inst_data_value(ctx, v86);
                                    if let &InstructionData::Unary {
                                        opcode: ref v88,
                                        arg: v89,
                                    } = v87 {
                                        if let &Opcode::Bnot = v88 {
                                            let v80 = C::put_in_reg(ctx, v55.0);
                                            let v91 = C::put_in_reg(ctx, v89);
                                            let v924 = constructor_not_xor_reg(ctx, v79, v80, v91);
                                            let v925 = constructor_output_reg(ctx, v924);
                                            let v926 = Some(v925);
                                            // Rule at src\isa\s390x\lower.isle line 1121.
                                            return v926;
                                        }
                                    }
                                }
                            }
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v880 = C::uimm32shifted_from_value(ctx, v55.0);
                            if let Some(v881) = v880 {
                                let v58 = C::put_in_reg(ctx, v55.1);
                                let v912 = constructor_xor_uimm32shifted(ctx, v79, v58, v881);
                                let v913 = constructor_output_reg(ctx, v912);
                                let v914 = Some(v913);
                                // Rule at src\isa\s390x\lower.isle line 1103.
                                return v914;
                            }
                            let v875 = C::uimm32shifted_from_value(ctx, v55.1);
                            if let Some(v876) = v875 {
                                let v80 = C::put_in_reg(ctx, v55.0);
                                let v909 = constructor_xor_uimm32shifted(ctx, v79, v80, v876);
                                let v910 = constructor_output_reg(ctx, v909);
                                let v911 = Some(v910);
                                // Rule at src\isa\s390x\lower.isle line 1101.
                                return v911;
                            }
                            let v141 = C::value_type(ctx, v55.0);
                            let v142 = C::ty_32_or_64(ctx, v141);
                            if let Some(v143) = v142 {
                                let v144 = C::sinkable_inst(ctx, v55.0);
                                if let Some(v145) = v144 {
                                    let v146 = &C::inst_data_value(ctx, v145);
                                    if let &InstructionData::Load {
                                        opcode: ref v147,
                                        arg: v148,
                                        flags: v149,
                                        offset: v150,
                                    } = v146 {
                                        if let &Opcode::Load = v147 {
                                            let v151 = C::bigendian(ctx, v149);
                                            if let Some(v152) = v151 {
                                                let v58 = C::put_in_reg(ctx, v55.1);
                                                let v153 = &constructor_sink_load(ctx, v145);
                                                let v918 = constructor_xor_mem(ctx, v79, v58, v153);
                                                let v919 = constructor_output_reg(ctx, v918);
                                                let v920 = Some(v919);
                                                // Rule at src\isa\s390x\lower.isle line 1109.
                                                return v920;
                                            }
                                        }
                                    }
                                }
                            }
                            let v125 = C::value_type(ctx, v55.1);
                            let v126 = C::ty_32_or_64(ctx, v125);
                            if let Some(v127) = v126 {
                                let v128 = C::sinkable_inst(ctx, v55.1);
                                if let Some(v129) = v128 {
                                    let v130 = &C::inst_data_value(ctx, v129);
                                    if let &InstructionData::Load {
                                        opcode: ref v131,
                                        arg: v132,
                                        flags: v133,
                                        offset: v134,
                                    } = v130 {
                                        if let &Opcode::Load = v131 {
                                            let v135 = C::bigendian(ctx, v133);
                                            if let Some(v136) = v135 {
                                                let v80 = C::put_in_reg(ctx, v55.0);
                                                let v137 = &constructor_sink_load(ctx, v129);
                                                let v915 = constructor_xor_mem(ctx, v79, v80, v137);
                                                let v916 = constructor_output_reg(ctx, v915);
                                                let v917 = Some(v916);
                                                // Rule at src\isa\s390x\lower.isle line 1107.
                                                return v917;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if let Some(v52) = v51 {
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v80 = C::put_in_reg(ctx, v55.0);
                            let v81 = C::put_in_reg(ctx, v55.1);
                            let v921 = constructor_vec_xor(ctx, v52, v80, v81);
                            let v922 = constructor_output_reg(ctx, v921);
                            let v923 = Some(v922);
                            // Rule at src\isa\s390x\lower.isle line 1113.
                            return v923;
                        }
                        if let Some(v79) = v78 {
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v80 = C::put_in_reg(ctx, v55.0);
                            let v81 = C::put_in_reg(ctx, v55.1);
                            let v906 = constructor_xor_reg(ctx, v79, v80, v81);
                            let v907 = constructor_output_reg(ctx, v906);
                            let v908 = Some(v907);
                            // Rule at src\isa\s390x\lower.isle line 1097.
                            return v908;
                        }
                    }
                }
                &Opcode::Rotl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v80 = C::put_in_reg(ctx, v55.0);
                            let v677 = constructor_amt_vr(ctx, v55.1);
                            let v678 = constructor_vec_neg(ctx, I8X16, v677);
                            let v679 = constructor_vec_lshl_by_byte(ctx, v80, v677);
                            let v680 = constructor_vec_lshl_by_bit(ctx, v679, v677);
                            let v681 = constructor_vec_lshr_by_byte(ctx, v80, v678);
                            let v682 = constructor_vec_lshr_by_bit(ctx, v681, v678);
                            let v683 = constructor_vec_or(ctx, I128, v680, v682);
                            let v684 = constructor_output_reg(ctx, v683);
                            let v685 = Some(v684);
                            // Rule at src\isa\s390x\lower.isle line 824.
                            return v685;
                        }
                        let v182 = C::ty_vec128(ctx, v3);
                        if let Some(v183) = v182 {
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v590 = C::i64_from_value(ctx, v55.1);
                            if let Some(v591) = v590 {
                                let v600 = C::mask_amt_imm(ctx, v183, v591);
                                let v59 = C::put_in_reg(ctx, v55.0);
                                let v674 = constructor_vec_rot_imm(ctx, v183, v59, v600);
                                let v675 = constructor_output_reg(ctx, v674);
                                let v676 = Some(v675);
                                // Rule at src\isa\s390x\lower.isle line 818.
                                return v676;
                            }
                            let v80 = C::put_in_reg(ctx, v55.0);
                            let v596 = constructor_amt_reg(ctx, v55.1);
                            let v671 = constructor_vec_rot_reg(ctx, v183, v80, v596);
                            let v672 = constructor_output_reg(ctx, v671);
                            let v673 = Some(v672);
                            // Rule at src\isa\s390x\lower.isle line 814.
                            return v673;
                        }
                        let v469 = C::ty_8_or_16(ctx, v3);
                        if let Some(v470) = v469 {
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v590 = C::i64_from_value(ctx, v55.1);
                            if let Some(v591) = v590 {
                                let v662 = C::i64_from_negated_value(ctx, v55.1);
                                if let Some(v663) = v662 {
                                    let v343 = constructor_put_in_reg_zext32(ctx, v55.0);
                                    let v652 = constructor_ty_ext32(ctx, v470);
                                    let v664 = C::mask_amt_imm(ctx, v470, v591);
                                    let v665 = C::mask_amt_imm(ctx, v470, v663);
                                    let v666 = constructor_lshl_imm(ctx, v652, v343, v664);
                                    let v667 = constructor_lshr_imm(ctx, v652, v343, v665);
                                    let v668 = constructor_or_reg(ctx, v470, v666, v667);
                                    let v669 = constructor_output_reg(ctx, v668);
                                    let v670 = Some(v669);
                                    // Rule at src\isa\s390x\lower.isle line 804.
                                    return v670;
                                }
                            }
                            let v343 = constructor_put_in_reg_zext32(ctx, v55.0);
                            let v652 = constructor_ty_ext32(ctx, v470);
                            let v653 = constructor_amt_reg(ctx, v55.1);
                            let v654 = constructor_neg_reg(ctx, I32, v653);
                            let v655 = constructor_mask_amt_reg(ctx, v470, v653);
                            let v656 = constructor_mask_amt_reg(ctx, v470, v654);
                            let v657 = constructor_lshl_reg(ctx, v652, v343, v655);
                            let v658 = constructor_lshr_reg(ctx, v652, v343, v656);
                            let v659 = constructor_or_reg(ctx, v470, v657, v658);
                            let v660 = constructor_output_reg(ctx, v659);
                            let v661 = Some(v660);
                            // Rule at src\isa\s390x\lower.isle line 792.
                            return v661;
                        }
                        let v643 = C::ty_32_or_64(ctx, v3);
                        if let Some(v644) = v643 {
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v590 = C::i64_from_value(ctx, v55.1);
                            if let Some(v591) = v590 {
                                let v648 = C::mask_amt_imm(ctx, v644, v591);
                                let v59 = C::put_in_reg(ctx, v55.0);
                                let v649 = constructor_rot_imm(ctx, v644, v59, v648);
                                let v650 = constructor_output_reg(ctx, v649);
                                let v651 = Some(v650);
                                // Rule at src\isa\s390x\lower.isle line 786.
                                return v651;
                            }
                            let v80 = C::put_in_reg(ctx, v55.0);
                            let v596 = constructor_amt_reg(ctx, v55.1);
                            let v645 = constructor_rot_reg(ctx, v644, v80, v596);
                            let v646 = constructor_output_reg(ctx, v645);
                            let v647 = Some(v646);
                            // Rule at src\isa\s390x\lower.isle line 782.
                            return v647;
                        }
                    }
                }
                &Opcode::Rotr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v80 = C::put_in_reg(ctx, v55.0);
                            let v677 = constructor_amt_vr(ctx, v55.1);
                            let v678 = constructor_vec_neg(ctx, I8X16, v677);
                            let v711 = constructor_vec_lshl_by_byte(ctx, v80, v678);
                            let v712 = constructor_vec_lshl_by_bit(ctx, v711, v678);
                            let v713 = constructor_vec_lshr_by_byte(ctx, v80, v677);
                            let v714 = constructor_vec_lshr_by_bit(ctx, v713, v677);
                            let v715 = constructor_vec_or(ctx, I128, v712, v714);
                            let v716 = constructor_output_reg(ctx, v715);
                            let v717 = Some(v716);
                            // Rule at src\isa\s390x\lower.isle line 884.
                            return v717;
                        }
                        let v182 = C::ty_vec128(ctx, v3);
                        if let Some(v183) = v182 {
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v662 = C::i64_from_negated_value(ctx, v55.1);
                            if let Some(v663) = v662 {
                                let v707 = C::mask_amt_imm(ctx, v183, v663);
                                let v59 = C::put_in_reg(ctx, v55.0);
                                let v708 = constructor_vec_rot_imm(ctx, v183, v59, v707);
                                let v709 = constructor_output_reg(ctx, v708);
                                let v710 = Some(v709);
                                // Rule at src\isa\s390x\lower.isle line 878.
                                return v710;
                            }
                            let v585 = constructor_amt_reg(ctx, v55.1);
                            let v686 = constructor_neg_reg(ctx, I32, v585);
                            let v192 = C::put_in_reg(ctx, v55.0);
                            let v704 = constructor_vec_rot_reg(ctx, v183, v192, v686);
                            let v705 = constructor_output_reg(ctx, v704);
                            let v706 = Some(v705);
                            // Rule at src\isa\s390x\lower.isle line 872.
                            return v706;
                        }
                        let v469 = C::ty_8_or_16(ctx, v3);
                        if let Some(v470) = v469 {
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v590 = C::i64_from_value(ctx, v55.1);
                            if let Some(v591) = v590 {
                                let v662 = C::i64_from_negated_value(ctx, v55.1);
                                if let Some(v663) = v662 {
                                    let v343 = constructor_put_in_reg_zext32(ctx, v55.0);
                                    let v652 = constructor_ty_ext32(ctx, v470);
                                    let v664 = C::mask_amt_imm(ctx, v470, v591);
                                    let v665 = C::mask_amt_imm(ctx, v470, v663);
                                    let v699 = constructor_lshl_imm(ctx, v652, v343, v665);
                                    let v700 = constructor_lshr_imm(ctx, v652, v343, v664);
                                    let v701 = constructor_or_reg(ctx, v470, v699, v700);
                                    let v702 = constructor_output_reg(ctx, v701);
                                    let v703 = Some(v702);
                                    // Rule at src\isa\s390x\lower.isle line 861.
                                    return v703;
                                }
                            }
                            let v343 = constructor_put_in_reg_zext32(ctx, v55.0);
                            let v652 = constructor_ty_ext32(ctx, v470);
                            let v653 = constructor_amt_reg(ctx, v55.1);
                            let v654 = constructor_neg_reg(ctx, I32, v653);
                            let v655 = constructor_mask_amt_reg(ctx, v470, v653);
                            let v656 = constructor_mask_amt_reg(ctx, v470, v654);
                            let v694 = constructor_lshl_reg(ctx, v652, v343, v656);
                            let v695 = constructor_lshr_reg(ctx, v652, v343, v655);
                            let v696 = constructor_or_reg(ctx, v470, v694, v695);
                            let v697 = constructor_output_reg(ctx, v696);
                            let v698 = Some(v697);
                            // Rule at src\isa\s390x\lower.isle line 849.
                            return v698;
                        }
                        let v643 = C::ty_32_or_64(ctx, v3);
                        if let Some(v644) = v643 {
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v662 = C::i64_from_negated_value(ctx, v55.1);
                            if let Some(v663) = v662 {
                                let v690 = C::mask_amt_imm(ctx, v644, v663);
                                let v59 = C::put_in_reg(ctx, v55.0);
                                let v691 = constructor_rot_imm(ctx, v644, v59, v690);
                                let v692 = constructor_output_reg(ctx, v691);
                                let v693 = Some(v692);
                                // Rule at src\isa\s390x\lower.isle line 843.
                                return v693;
                            }
                            let v585 = constructor_amt_reg(ctx, v55.1);
                            let v686 = constructor_neg_reg(ctx, I32, v585);
                            let v192 = C::put_in_reg(ctx, v55.0);
                            let v687 = constructor_rot_reg(ctx, v644, v192, v686);
                            let v688 = constructor_output_reg(ctx, v687);
                            let v689 = Some(v688);
                            // Rule at src\isa\s390x\lower.isle line 837.
                            return v689;
                        }
                    }
                }
                &Opcode::Ishl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v604 = constructor_amt_vr(ctx, v55.1);
                            let v59 = C::put_in_reg(ctx, v55.0);
                            let v605 = constructor_vec_lshl_by_byte(ctx, v59, v604);
                            let v606 = constructor_vec_lshl_by_bit(ctx, v605, v604);
                            let v607 = constructor_output_reg(ctx, v606);
                            let v608 = Some(v607);
                            // Rule at src\isa\s390x\lower.isle line 712.
                            return v608;
                        }
                        let v182 = C::ty_vec128(ctx, v3);
                        if let Some(v183) = v182 {
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v590 = C::i64_from_value(ctx, v55.1);
                            if let Some(v591) = v590 {
                                let v600 = C::mask_amt_imm(ctx, v183, v591);
                                let v59 = C::put_in_reg(ctx, v55.0);
                                let v601 = constructor_vec_lshl_imm(ctx, v183, v59, v600);
                                let v602 = constructor_output_reg(ctx, v601);
                                let v603 = Some(v602);
                                // Rule at src\isa\s390x\lower.isle line 707.
                                return v603;
                            }
                            let v80 = C::put_in_reg(ctx, v55.0);
                            let v596 = constructor_amt_reg(ctx, v55.1);
                            let v597 = constructor_vec_lshl_reg(ctx, v183, v80, v596);
                            let v598 = constructor_output_reg(ctx, v597);
                            let v599 = Some(v598);
                            // Rule at src\isa\s390x\lower.isle line 703.
                            return v599;
                        }
                        let v78 = C::fits_in_64(ctx, v3);
                        if let Some(v79) = v78 {
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v590 = C::i64_from_value(ctx, v55.1);
                            if let Some(v591) = v590 {
                                let v592 = C::mask_amt_imm(ctx, v79, v591);
                                let v59 = C::put_in_reg(ctx, v55.0);
                                let v593 = constructor_lshl_imm(ctx, v79, v59, v592);
                                let v594 = constructor_output_reg(ctx, v593);
                                let v595 = Some(v594);
                                // Rule at src\isa\s390x\lower.isle line 698.
                                return v595;
                            }
                            let v585 = constructor_amt_reg(ctx, v55.1);
                            let v586 = constructor_mask_amt_reg(ctx, v79, v585);
                            let v192 = C::put_in_reg(ctx, v55.0);
                            let v587 = constructor_lshl_reg(ctx, v79, v192, v586);
                            let v588 = constructor_output_reg(ctx, v587);
                            let v589 = Some(v588);
                            // Rule at src\isa\s390x\lower.isle line 693.
                            return v589;
                        }
                    }
                }
                &Opcode::Ushr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v604 = constructor_amt_vr(ctx, v55.1);
                            let v59 = C::put_in_reg(ctx, v55.0);
                            let v623 = constructor_vec_lshr_by_byte(ctx, v59, v604);
                            let v624 = constructor_vec_lshr_by_bit(ctx, v623, v604);
                            let v625 = constructor_output_reg(ctx, v624);
                            let v626 = Some(v625);
                            // Rule at src\isa\s390x\lower.isle line 743.
                            return v626;
                        }
                        let v182 = C::ty_vec128(ctx, v3);
                        if let Some(v183) = v182 {
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v590 = C::i64_from_value(ctx, v55.1);
                            if let Some(v591) = v590 {
                                let v600 = C::mask_amt_imm(ctx, v183, v591);
                                let v59 = C::put_in_reg(ctx, v55.0);
                                let v620 = constructor_vec_lshr_imm(ctx, v183, v59, v600);
                                let v621 = constructor_output_reg(ctx, v620);
                                let v622 = Some(v621);
                                // Rule at src\isa\s390x\lower.isle line 738.
                                return v622;
                            }
                            let v80 = C::put_in_reg(ctx, v55.0);
                            let v596 = constructor_amt_reg(ctx, v55.1);
                            let v617 = constructor_vec_lshr_reg(ctx, v183, v80, v596);
                            let v618 = constructor_output_reg(ctx, v617);
                            let v619 = Some(v618);
                            // Rule at src\isa\s390x\lower.isle line 734.
                            return v619;
                        }
                        let v78 = C::fits_in_64(ctx, v3);
                        if let Some(v79) = v78 {
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v590 = C::i64_from_value(ctx, v55.1);
                            if let Some(v591) = v590 {
                                let v343 = constructor_put_in_reg_zext32(ctx, v55.0);
                                let v613 = C::mask_amt_imm(ctx, v79, v591);
                                let v345 = constructor_ty_ext32(ctx, v79);
                                let v614 = constructor_lshr_imm(ctx, v345, v343, v613);
                                let v615 = constructor_output_reg(ctx, v614);
                                let v616 = Some(v615);
                                // Rule at src\isa\s390x\lower.isle line 728.
                                return v616;
                            }
                            let v343 = constructor_put_in_reg_zext32(ctx, v55.0);
                            let v596 = constructor_amt_reg(ctx, v55.1);
                            let v609 = constructor_mask_amt_reg(ctx, v79, v596);
                            let v574 = constructor_ty_ext32(ctx, v79);
                            let v610 = constructor_lshr_reg(ctx, v574, v343, v609);
                            let v611 = constructor_output_reg(ctx, v610);
                            let v612 = Some(v611);
                            // Rule at src\isa\s390x\lower.isle line 721.
                            return v612;
                        }
                    }
                }
                &Opcode::Sshr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v604 = constructor_amt_vr(ctx, v55.1);
                            let v59 = C::put_in_reg(ctx, v55.0);
                            let v639 = constructor_vec_ashr_by_byte(ctx, v59, v604);
                            let v640 = constructor_vec_ashr_by_bit(ctx, v639, v604);
                            let v641 = constructor_output_reg(ctx, v640);
                            let v642 = Some(v641);
                            // Rule at src\isa\s390x\lower.isle line 774.
                            return v642;
                        }
                        let v182 = C::ty_vec128(ctx, v3);
                        if let Some(v183) = v182 {
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v590 = C::i64_from_value(ctx, v55.1);
                            if let Some(v591) = v590 {
                                let v600 = C::mask_amt_imm(ctx, v183, v591);
                                let v59 = C::put_in_reg(ctx, v55.0);
                                let v636 = constructor_vec_ashr_imm(ctx, v183, v59, v600);
                                let v637 = constructor_output_reg(ctx, v636);
                                let v638 = Some(v637);
                                // Rule at src\isa\s390x\lower.isle line 769.
                                return v638;
                            }
                            let v80 = C::put_in_reg(ctx, v55.0);
                            let v596 = constructor_amt_reg(ctx, v55.1);
                            let v633 = constructor_vec_ashr_reg(ctx, v183, v80, v596);
                            let v634 = constructor_output_reg(ctx, v633);
                            let v635 = Some(v634);
                            // Rule at src\isa\s390x\lower.isle line 765.
                            return v635;
                        }
                        let v78 = C::fits_in_64(ctx, v3);
                        if let Some(v79) = v78 {
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v590 = C::i64_from_value(ctx, v55.1);
                            if let Some(v591) = v590 {
                                let v373 = constructor_put_in_reg_sext32(ctx, v55.0);
                                let v613 = C::mask_amt_imm(ctx, v79, v591);
                                let v345 = constructor_ty_ext32(ctx, v79);
                                let v630 = constructor_ashr_imm(ctx, v345, v373, v613);
                                let v631 = constructor_output_reg(ctx, v630);
                                let v632 = Some(v631);
                                // Rule at src\isa\s390x\lower.isle line 759.
                                return v632;
                            }
                            let v373 = constructor_put_in_reg_sext32(ctx, v55.0);
                            let v596 = constructor_amt_reg(ctx, v55.1);
                            let v609 = constructor_mask_amt_reg(ctx, v79, v596);
                            let v574 = constructor_ty_ext32(ctx, v79);
                            let v627 = constructor_ashr_reg(ctx, v574, v373, v609);
                            let v628 = constructor_output_reg(ctx, v627);
                            let v629 = Some(v628);
                            // Rule at src\isa\s390x\lower.isle line 752.
                            return v629;
                        }
                    }
                }
                &Opcode::Fadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v55 = C::unpack_value_array_2(ctx, v54);
                        let v80 = C::put_in_reg(ctx, v55.0);
                        let v81 = C::put_in_reg(ctx, v55.1);
                        let v3 = C::value_type(ctx, v2);
                        let v1109 = constructor_fadd_reg(ctx, v3, v80, v81);
                        let v1110 = constructor_output_reg(ctx, v1109);
                        let v1111 = Some(v1110);
                        // Rule at src\isa\s390x\lower.isle line 1376.
                        return v1111;
                    }
                }
                &Opcode::Fsub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v55 = C::unpack_value_array_2(ctx, v54);
                        let v80 = C::put_in_reg(ctx, v55.0);
                        let v81 = C::put_in_reg(ctx, v55.1);
                        let v3 = C::value_type(ctx, v2);
                        let v1112 = constructor_fsub_reg(ctx, v3, v80, v81);
                        let v1113 = constructor_output_reg(ctx, v1112);
                        let v1114 = Some(v1113);
                        // Rule at src\isa\s390x\lower.isle line 1383.
                        return v1114;
                    }
                }
                &Opcode::Fmul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v55 = C::unpack_value_array_2(ctx, v54);
                        let v80 = C::put_in_reg(ctx, v55.0);
                        let v81 = C::put_in_reg(ctx, v55.1);
                        let v3 = C::value_type(ctx, v2);
                        let v1115 = constructor_fmul_reg(ctx, v3, v80, v81);
                        let v1116 = constructor_output_reg(ctx, v1115);
                        let v1117 = Some(v1116);
                        // Rule at src\isa\s390x\lower.isle line 1390.
                        return v1117;
                    }
                }
                &Opcode::Fdiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v55 = C::unpack_value_array_2(ctx, v54);
                        let v80 = C::put_in_reg(ctx, v55.0);
                        let v81 = C::put_in_reg(ctx, v55.1);
                        let v3 = C::value_type(ctx, v2);
                        let v1118 = constructor_fdiv_reg(ctx, v3, v80, v81);
                        let v1119 = constructor_output_reg(ctx, v1118);
                        let v1120 = Some(v1119);
                        // Rule at src\isa\s390x\lower.isle line 1397.
                        return v1120;
                    }
                }
                &Opcode::Fcopysign => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v55 = C::unpack_value_array_2(ctx, v54);
                                let v80 = C::put_in_reg(ctx, v55.0);
                                let v81 = C::put_in_reg(ctx, v55.1);
                                let v1128 = constructor_imm(ctx, F32, 0x7fffffff_u64);
                                let v1129 = constructor_vec_select(ctx, F32, v80, v81, v1128);
                                let v1130 = constructor_output_reg(ctx, v1129);
                                let v1131 = Some(v1130);
                                // Rule at src\isa\s390x\lower.isle line 1418.
                                return v1131;
                            }
                            F64 => {
                                let v55 = C::unpack_value_array_2(ctx, v54);
                                let v80 = C::put_in_reg(ctx, v55.0);
                                let v81 = C::put_in_reg(ctx, v55.1);
                                let v1133 = constructor_imm(ctx, F64, 0x7fffffffffffffff_u64);
                                let v1134 = constructor_vec_select(ctx, F64, v80, v81, v1133);
                                let v1135 = constructor_output_reg(ctx, v1134);
                                let v1136 = Some(v1135);
                                // Rule at src\isa\s390x\lower.isle line 1420.
                                return v1136;
                            }
                            F32X4 => {
                                let v55 = C::unpack_value_array_2(ctx, v54);
                                let v80 = C::put_in_reg(ctx, v55.0);
                                let v81 = C::put_in_reg(ctx, v55.1);
                                let v1139 = constructor_vec_imm_bit_mask(ctx, F32X4, 0x1_u8, 0x1f_u8);
                                let v1140 = constructor_vec_select(ctx, F32X4, v80, v81, v1139);
                                let v1141 = constructor_output_reg(ctx, v1140);
                                let v1142 = Some(v1141);
                                // Rule at src\isa\s390x\lower.isle line 1422.
                                return v1142;
                            }
                            F64X2 => {
                                let v55 = C::unpack_value_array_2(ctx, v54);
                                let v80 = C::put_in_reg(ctx, v55.0);
                                let v81 = C::put_in_reg(ctx, v55.1);
                                let v1144 = constructor_vec_imm_bit_mask(ctx, F64X2, 0x1_u8, 0x3f_u8);
                                let v1145 = constructor_vec_select(ctx, F64X2, v80, v81, v1144);
                                let v1146 = constructor_output_reg(ctx, v1145);
                                let v1147 = Some(v1146);
                                // Rule at src\isa\s390x\lower.isle line 1424.
                                return v1147;
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fmin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v55 = C::unpack_value_array_2(ctx, v54);
                        let v80 = C::put_in_reg(ctx, v55.0);
                        let v81 = C::put_in_reg(ctx, v55.1);
                        let v3 = C::value_type(ctx, v2);
                        let v1121 = constructor_fmin_reg(ctx, v3, v80, v81);
                        let v1122 = constructor_output_reg(ctx, v1121);
                        let v1123 = Some(v1122);
                        // Rule at src\isa\s390x\lower.isle line 1404.
                        return v1123;
                    }
                }
                &Opcode::Fmax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v55 = C::unpack_value_array_2(ctx, v54);
                        let v80 = C::put_in_reg(ctx, v55.0);
                        let v81 = C::put_in_reg(ctx, v55.1);
                        let v3 = C::value_type(ctx, v2);
                        let v1124 = constructor_fmax_reg(ctx, v3, v80, v81);
                        let v1125 = constructor_output_reg(ctx, v1124);
                        let v1126 = Some(v1125);
                        // Rule at src\isa\s390x\lower.isle line 1411.
                        return v1126;
                    }
                }
                &Opcode::Snarrow => {
                    let v55 = C::unpack_value_array_2(ctx, v54);
                    let v141 = C::value_type(ctx, v55.0);
                    let v764 = C::ty_vec128(ctx, v141);
                    if let Some(v765) = v764 {
                        let v80 = C::put_in_reg(ctx, v55.0);
                        let v81 = C::put_in_reg(ctx, v55.1);
                        let v766 = constructor_vec_pack_ssat_lane_order(ctx, v765, v80, v81);
                        let v767 = constructor_output_reg(ctx, v766);
                        let v768 = Some(v767);
                        // Rule at src\isa\s390x\lower.isle line 943.
                        return v768;
                    }
                }
                &Opcode::Unarrow => {
                    let v55 = C::unpack_value_array_2(ctx, v54);
                    let v141 = C::value_type(ctx, v55.0);
                    let v764 = C::ty_vec128(ctx, v141);
                    if let Some(v765) = v764 {
                        let v772 = constructor_vec_imm(ctx, v765, 0x0_u128);
                        let v59 = C::put_in_reg(ctx, v55.0);
                        let v773 = constructor_vec_smax(ctx, v765, v59, v772);
                        let v501 = C::put_in_reg(ctx, v55.1);
                        let v774 = constructor_vec_smax(ctx, v765, v501, v772);
                        let v775 = constructor_vec_pack_usat_lane_order(ctx, v765, v773, v774);
                        let v776 = constructor_output_reg(ctx, v775);
                        let v777 = Some(v776);
                        // Rule at src\isa\s390x\lower.isle line 955.
                        return v777;
                    }
                }
                &Opcode::Uunarrow => {
                    let v55 = C::unpack_value_array_2(ctx, v54);
                    let v141 = C::value_type(ctx, v55.0);
                    let v764 = C::ty_vec128(ctx, v141);
                    if let Some(v765) = v764 {
                        let v80 = C::put_in_reg(ctx, v55.0);
                        let v81 = C::put_in_reg(ctx, v55.1);
                        let v769 = constructor_vec_pack_usat_lane_order(ctx, v765, v80, v81);
                        let v770 = constructor_output_reg(ctx, v769);
                        let v771 = Some(v770);
                        // Rule at src\isa\s390x\lower.isle line 949.
                        return v771;
                    }
                }
                &Opcode::IaddPairwise => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v55 = C::unpack_value_array_2(ctx, v54);
                        let v85 = C::def_inst(ctx, v55.1);
                        if let Some(v86) = v85 {
                            let v87 = &C::inst_data_value(ctx, v86);
                            if let &InstructionData::Binary {
                                opcode: ref v239,
                                args: ref v240,
                            } = v87 {
                                if let &Opcode::Imul = v239 {
                                    let v95 = C::def_inst(ctx, v55.0);
                                    if let Some(v96) = v95 {
                                        let v97 = &C::inst_data_value(ctx, v96);
                                        if let &InstructionData::Binary {
                                            opcode: ref v223,
                                            args: ref v224,
                                        } = v97 {
                                            if let &Opcode::Imul = v223 {
                                                let v225 = C::unpack_value_array_2(ctx, v224);
                                                let v228 = C::def_inst(ctx, v225.0);
                                                if let Some(v229) = v228 {
                                                    let v230 = &C::inst_data_value(ctx, v229);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v231,
                                                        arg: v232,
                                                    } = v230 {
                                                        if let &Opcode::SwidenLow = v231 {
                                                            let v234 = C::def_inst(ctx, v225.1);
                                                            if let Some(v235) = v234 {
                                                                let v236 = &C::inst_data_value(ctx, v235);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v237,
                                                                    arg: v238,
                                                                } = v236 {
                                                                    if let &Opcode::SwidenLow = v237 {
                                                                        let v241 = C::unpack_value_array_2(ctx, v240);
                                                                        let v244 = C::def_inst(ctx, v241.0);
                                                                        if let Some(v245) = v244 {
                                                                            let v246 = &C::inst_data_value(ctx, v245);
                                                                            if let &InstructionData::Unary {
                                                                                opcode: ref v247,
                                                                                arg: v248,
                                                                            } = v246 {
                                                                                if let &Opcode::SwidenHigh = v247 {
                                                                                    if v232 == v248 {
                                                                                        let v249 = C::def_inst(ctx, v241.1);
                                                                                        if let Some(v250) = v249 {
                                                                                            let v251 = &C::inst_data_value(ctx, v250);
                                                                                            if let &InstructionData::Unary {
                                                                                                opcode: ref v252,
                                                                                                arg: v253,
                                                                                            } = v251 {
                                                                                                if let &Opcode::SwidenHigh = v252 {
                                                                                                    if v238 == v253 {
                                                                                                        let v254 = C::put_in_reg(ctx, v232);
                                                                                                        let v255 = C::put_in_reg(ctx, v238);
                                                                                                        let v233 = C::value_type(ctx, v232);
                                                                                                        let v256 = constructor_vec_smul_even(ctx, v233, v254, v255);
                                                                                                        let v257 = C::put_in_reg(ctx, v232);
                                                                                                        let v258 = C::put_in_reg(ctx, v238);
                                                                                                        let v259 = constructor_vec_smul_odd(ctx, v233, v257, v258);
                                                                                                        let v3 = C::value_type(ctx, v2);
                                                                                                        let v260 = constructor_vec_add(ctx, v3, v256, v259);
                                                                                                        let v261 = constructor_output_reg(ctx, v260);
                                                                                                        let v262 = Some(v261);
                                                                                                        // Rule at src\isa\s390x\lower.isle line 147.
                                                                                                        return v262;
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        let v206 = C::multi_lane(ctx, v3);
                        if let Some(v207) = v206 {
                            let v211 = C::u32_as_u64(ctx, v207.0);
                            let v212 = constructor_vec_imm_splat(ctx, I8X16, v211);
                            let v213 = constructor_vec_widen_type(ctx, v3);
                            let v192 = C::put_in_reg(ctx, v55.0);
                            let v185 = C::put_in_reg(ctx, v55.0);
                            let v214 = constructor_vec_lshr_by_byte(ctx, v185, v212);
                            let v215 = constructor_vec_add(ctx, v3, v192, v214);
                            let v216 = C::put_in_reg(ctx, v55.1);
                            let v217 = C::put_in_reg(ctx, v55.1);
                            let v218 = constructor_vec_lshr_by_byte(ctx, v217, v212);
                            let v219 = constructor_vec_add(ctx, v3, v216, v218);
                            let v220 = constructor_vec_pack_lane_order(ctx, v213, v215, v219);
                            let v221 = constructor_output_reg(ctx, v220);
                            let v222 = Some(v221);
                            // Rule at src\isa\s390x\lower.isle line 140.
                            return v222;
                        }
                    }
                }
                &Opcode::Iconcat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v51 = C::vr128_ty(ctx, v3);
                        if let Some(v52) = v51 {
                            let v55 = C::unpack_value_array_2(ctx, v54);
                            let v58 = C::put_in_reg(ctx, v55.1);
                            let v59 = C::put_in_reg(ctx, v55.0);
                            let v60 = constructor_mov_to_vec128(ctx, v52, v58, v59);
                            let v61 = constructor_output_reg(ctx, v60);
                            let v62 = Some(v61);
                            // Rule at src\isa\s390x\lower.isle line 56.
                            return v62;
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::BinaryImm8 {
            opcode: ref v1452,
            arg: v1453,
            imm: v1454,
        } => {
            if let &Opcode::Extractlane = v1452 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v1457 = C::ty_int_ref_scalar_64(ctx, v3);
                    if let Some(v1458) = v1457 {
                        let v1459 = C::put_in_reg(ctx, v1453);
                        let v1455 = C::value_type(ctx, v1453);
                        let v1456 = C::u8_from_uimm8(ctx, v1454);
                        let v1460 = C::be_lane_idx(ctx, v1455, v1456);
                        let v738 = C::zero_reg(ctx);
                        let v1461 = constructor_vec_extract_lane(ctx, v1455, v1459, v1460, v738);
                        let v1462 = constructor_output_reg(ctx, v1461);
                        let v1463 = Some(v1462);
                        // Rule at src\isa\s390x\lower.isle line 1904.
                        return v1463;
                    }
                    let v1378 = C::ty_scalar_float(ctx, v3);
                    if let Some(v1379) = v1378 {
                        let v1459 = C::put_in_reg(ctx, v1453);
                        let v1455 = C::value_type(ctx, v1453);
                        let v1456 = C::u8_from_uimm8(ctx, v1454);
                        let v1460 = C::be_lane_idx(ctx, v1455, v1456);
                        let v1464 = constructor_vec_replicate_lane(ctx, v1455, v1459, v1460);
                        let v1465 = constructor_output_reg(ctx, v1464);
                        let v1466 = Some(v1465);
                        // Rule at src\isa\s390x\lower.isle line 1910.
                        return v1466;
                    }
                }
            }
        }
        &InstructionData::Call {
            opcode: ref v2543,
            args: v2544,
            func_ref: v2545,
        } => {
            match v2543 {
                &Opcode::Call => {
                    let v2547 = C::func_ref_data(ctx, v2545);
                    let v2551 = C::reloc_distance_near(ctx, v2547.2);
                    if let Some(v2552) = v2551 {
                        let v2553 = C::abi_sig(ctx, v2547.0);
                        let v2555 = C::abi_num_args(ctx, v2553);
                        let v2556 = C::range(ctx, 0x0_usize, v2555);
                        let v2546 = C::value_list_slice(ctx, v2544);
                        let v2557 = &constructor_lower_call_args(ctx, v2553, v2556, v2546);
                        let v2558 = CallInstDest::Direct {
                            name: v2547.1,
                        };
                        let v2559 = constructor_abi_call(ctx, v2553, &v2558, v2557);
                        let v2560 = Some(v2559);
                        // Rule at src\isa\s390x\lower.isle line 3921.
                        return v2560;
                    }
                    let v2553 = C::abi_sig(ctx, v2547.0);
                    let v2555 = C::abi_num_args(ctx, v2553);
                    let v2556 = C::range(ctx, 0x0_usize, v2555);
                    let v2546 = C::value_list_slice(ctx, v2544);
                    let v2557 = &constructor_lower_call_args(ctx, v2553, v2556, v2546);
                    let v2561 = SymbolReloc::Absolute {
                        name: v2547.1,
                        offset: 0_i64,
                    };
                    let v2562 = constructor_load_symbol_reloc(ctx, &v2561);
                    let v2563 = CallInstDest::Indirect {
                        reg: v2562,
                    };
                    let v2564 = constructor_abi_call(ctx, v2553, &v2563, v2557);
                    let v2565 = Some(v2564);
                    // Rule at src\isa\s390x\lower.isle line 3927.
                    return v2565;
                }
                &Opcode::ReturnCall => {
                    let v2547 = C::func_ref_data(ctx, v2545);
                    let v2551 = C::reloc_distance_near(ctx, v2547.2);
                    if let Some(v2552) = v2551 {
                        let v2553 = C::abi_sig(ctx, v2547.0);
                        let v2555 = C::abi_num_args(ctx, v2553);
                        let v2556 = C::range(ctx, 0x0_usize, v2555);
                        let v2546 = C::value_list_slice(ctx, v2544);
                        let v2582 = &constructor_lower_return_call_args(ctx, v2553, v2556, v2546);
                        let v2558 = CallInstDest::Direct {
                            name: v2547.1,
                        };
                        let v2583 = &constructor_abi_return_call(ctx, v2553, &v2558, v2582);
                        let v2584 = constructor_side_effect(ctx, v2583);
                        let v2585 = Some(v2584);
                        // Rule at src\isa\s390x\lower.isle line 3954.
                        return v2585;
                    }
                    let v2553 = C::abi_sig(ctx, v2547.0);
                    let v2555 = C::abi_num_args(ctx, v2553);
                    let v2556 = C::range(ctx, 0x0_usize, v2555);
                    let v2546 = C::value_list_slice(ctx, v2544);
                    let v2582 = &constructor_lower_return_call_args(ctx, v2553, v2556, v2546);
                    let v2561 = SymbolReloc::Absolute {
                        name: v2547.1,
                        offset: 0_i64,
                    };
                    let v2562 = constructor_load_symbol_reloc(ctx, &v2561);
                    let v2563 = CallInstDest::Indirect {
                        reg: v2562,
                    };
                    let v2586 = &constructor_abi_return_call(ctx, v2553, &v2563, v2582);
                    let v2587 = constructor_side_effect(ctx, v2586);
                    let v2588 = Some(v2587);
                    // Rule at src\isa\s390x\lower.isle line 3960.
                    return v2588;
                }
                _ => {}
            }
        }
        &InstructionData::CallIndirect {
            opcode: ref v2566,
            args: v2567,
            sig_ref: v2568,
        } => {
            match v2566 {
                &Opcode::CallIndirect => {
                    let v2569 = C::value_list_slice(ctx, v2567);
                    let v2570 = C::value_slice_unwrap(ctx, v2569);
                    if let Some(v2571) = v2570 {
                        let v2574 = C::abi_sig(ctx, v2568);
                        let v2575 = C::put_in_reg(ctx, v2571.0);
                        let v2576 = C::abi_num_args(ctx, v2574);
                        let v2577 = C::range(ctx, 0x0_usize, v2576);
                        let v2578 = &constructor_lower_call_args(ctx, v2574, v2577, v2571.1);
                        let v2579 = CallInstDest::Indirect {
                            reg: v2575,
                        };
                        let v2580 = constructor_abi_call(ctx, v2574, &v2579, v2578);
                        let v2581 = Some(v2580);
                        // Rule at src\isa\s390x\lower.isle line 3934.
                        return v2581;
                    }
                }
                &Opcode::ReturnCallIndirect => {
                    let v2569 = C::value_list_slice(ctx, v2567);
                    let v2570 = C::value_slice_unwrap(ctx, v2569);
                    if let Some(v2571) = v2570 {
                        let v2574 = C::abi_sig(ctx, v2568);
                        let v2575 = C::put_in_reg(ctx, v2571.0);
                        let v2576 = C::abi_num_args(ctx, v2574);
                        let v2577 = C::range(ctx, 0x0_usize, v2576);
                        let v2589 = &constructor_lower_return_call_args(ctx, v2574, v2577, v2571.1);
                        let v2579 = CallInstDest::Indirect {
                            reg: v2575,
                        };
                        let v2590 = &constructor_abi_return_call(ctx, v2574, &v2579, v2589);
                        let v2591 = constructor_side_effect(ctx, v2590);
                        let v2592 = Some(v2591);
                        // Rule at src\isa\s390x\lower.isle line 3967.
                        return v2592;
                    }
                }
                _ => {}
            }
        }
        &InstructionData::CondTrap {
            opcode: ref v2429,
            arg: v2430,
            code: ref v2431,
        } => {
            match v2429 {
                &Opcode::Trapz => {
                    let v2432 = &constructor_value_nonzero(ctx, v2430);
                    let v2433 = &constructor_invert_bool(ctx, v2432);
                    let v2434 = &constructor_trap_if_bool(ctx, v2433, v2431);
                    let v2435 = constructor_side_effect(ctx, v2434);
                    let v2436 = Some(v2435);
                    // Rule at src\isa\s390x\lower.isle line 3828.
                    return v2436;
                }
                &Opcode::Trapnz => {
                    let v2432 = &constructor_value_nonzero(ctx, v2430);
                    let v2437 = &constructor_trap_if_bool(ctx, v2432, v2431);
                    let v2438 = constructor_side_effect(ctx, v2437);
                    let v2439 = Some(v2438);
                    // Rule at src\isa\s390x\lower.isle line 3834.
                    return v2439;
                }
                _ => {}
            }
        }
        &InstructionData::FloatCompare {
            opcode: ref v2267,
            args: ref v2268,
            cond: ref v2269,
        } => {
            if let &Opcode::Fcmp = v2267 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    match v2269 {
                        &FloatCC::Equal => {
                            let v3 = C::value_type(ctx, v2);
                            let v182 = C::ty_vec128(ctx, v3);
                            if let Some(v183) = v182 {
                                let v2270 = C::unpack_value_array_2(ctx, v2268);
                                let v2277 = C::put_in_reg(ctx, v2270.0);
                                let v2278 = C::put_in_reg(ctx, v2270.1);
                                let v2279 = constructor_vec_fcmpeq(ctx, v183, v2277, v2278);
                                let v2280 = constructor_output_reg(ctx, v2279);
                                let v2281 = Some(v2280);
                                // Rule at src\isa\s390x\lower.isle line 3498.
                                return v2281;
                            }
                        }
                        &FloatCC::GreaterThan => {
                            let v3 = C::value_type(ctx, v2);
                            let v182 = C::ty_vec128(ctx, v3);
                            if let Some(v183) = v182 {
                                let v2270 = C::unpack_value_array_2(ctx, v2268);
                                let v2277 = C::put_in_reg(ctx, v2270.0);
                                let v2278 = C::put_in_reg(ctx, v2270.1);
                                let v2285 = constructor_vec_fcmph(ctx, v183, v2277, v2278);
                                let v2286 = constructor_output_reg(ctx, v2285);
                                let v2287 = Some(v2286);
                                // Rule at src\isa\s390x\lower.isle line 3502.
                                return v2287;
                            }
                        }
                        &FloatCC::GreaterThanOrEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v182 = C::ty_vec128(ctx, v3);
                            if let Some(v183) = v182 {
                                let v2270 = C::unpack_value_array_2(ctx, v2268);
                                let v2277 = C::put_in_reg(ctx, v2270.0);
                                let v2278 = C::put_in_reg(ctx, v2270.1);
                                let v2291 = constructor_vec_fcmphe(ctx, v183, v2277, v2278);
                                let v2292 = constructor_output_reg(ctx, v2291);
                                let v2293 = Some(v2292);
                                // Rule at src\isa\s390x\lower.isle line 3506.
                                return v2293;
                            }
                        }
                        &FloatCC::LessThan => {
                            let v3 = C::value_type(ctx, v2);
                            let v182 = C::ty_vec128(ctx, v3);
                            if let Some(v183) = v182 {
                                let v2270 = C::unpack_value_array_2(ctx, v2268);
                                let v2297 = C::put_in_reg(ctx, v2270.1);
                                let v2298 = C::put_in_reg(ctx, v2270.0);
                                let v2299 = constructor_vec_fcmph(ctx, v183, v2297, v2298);
                                let v2300 = constructor_output_reg(ctx, v2299);
                                let v2301 = Some(v2300);
                                // Rule at src\isa\s390x\lower.isle line 3510.
                                return v2301;
                            }
                        }
                        &FloatCC::LessThanOrEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v182 = C::ty_vec128(ctx, v3);
                            if let Some(v183) = v182 {
                                let v2270 = C::unpack_value_array_2(ctx, v2268);
                                let v2297 = C::put_in_reg(ctx, v2270.1);
                                let v2298 = C::put_in_reg(ctx, v2270.0);
                                let v2305 = constructor_vec_fcmphe(ctx, v183, v2297, v2298);
                                let v2306 = constructor_output_reg(ctx, v2305);
                                let v2307 = Some(v2306);
                                // Rule at src\isa\s390x\lower.isle line 3514.
                                return v2307;
                            }
                        }
                        &FloatCC::NotEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v182 = C::ty_vec128(ctx, v3);
                            if let Some(v183) = v182 {
                                let v2270 = C::unpack_value_array_2(ctx, v2268);
                                let v2277 = C::put_in_reg(ctx, v2270.0);
                                let v2278 = C::put_in_reg(ctx, v2270.1);
                                let v2279 = constructor_vec_fcmpeq(ctx, v183, v2277, v2278);
                                let v2282 = constructor_vec_not(ctx, v183, v2279);
                                let v2283 = constructor_output_reg(ctx, v2282);
                                let v2284 = Some(v2283);
                                // Rule at src\isa\s390x\lower.isle line 3500.
                                return v2284;
                            }
                        }
                        &FloatCC::Ordered => {
                            let v3 = C::value_type(ctx, v2);
                            let v182 = C::ty_vec128(ctx, v3);
                            if let Some(v183) = v182 {
                                let v2270 = C::unpack_value_array_2(ctx, v2268);
                                let v2277 = C::put_in_reg(ctx, v2270.0);
                                let v2278 = C::put_in_reg(ctx, v2270.1);
                                let v2291 = constructor_vec_fcmphe(ctx, v183, v2277, v2278);
                                let v2311 = C::put_in_reg(ctx, v2270.1);
                                let v2312 = C::put_in_reg(ctx, v2270.0);
                                let v2313 = constructor_vec_fcmphe(ctx, v183, v2311, v2312);
                                let v2314 = constructor_vec_or(ctx, v183, v2291, v2313);
                                let v2315 = constructor_output_reg(ctx, v2314);
                                let v2316 = Some(v2315);
                                // Rule at src\isa\s390x\lower.isle line 3518.
                                return v2316;
                            }
                        }
                        &FloatCC::OrderedNotEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v182 = C::ty_vec128(ctx, v3);
                            if let Some(v183) = v182 {
                                let v2270 = C::unpack_value_array_2(ctx, v2268);
                                let v2277 = C::put_in_reg(ctx, v2270.0);
                                let v2278 = C::put_in_reg(ctx, v2270.1);
                                let v2285 = constructor_vec_fcmph(ctx, v183, v2277, v2278);
                                let v2311 = C::put_in_reg(ctx, v2270.1);
                                let v2312 = C::put_in_reg(ctx, v2270.0);
                                let v2320 = constructor_vec_fcmph(ctx, v183, v2311, v2312);
                                let v2321 = constructor_vec_or(ctx, v183, v2285, v2320);
                                let v2322 = constructor_output_reg(ctx, v2321);
                                let v2323 = Some(v2322);
                                // Rule at src\isa\s390x\lower.isle line 3522.
                                return v2323;
                            }
                        }
                        &FloatCC::Unordered => {
                            let v3 = C::value_type(ctx, v2);
                            let v182 = C::ty_vec128(ctx, v3);
                            if let Some(v183) = v182 {
                                let v2270 = C::unpack_value_array_2(ctx, v2268);
                                let v2277 = C::put_in_reg(ctx, v2270.0);
                                let v2278 = C::put_in_reg(ctx, v2270.1);
                                let v2291 = constructor_vec_fcmphe(ctx, v183, v2277, v2278);
                                let v2311 = C::put_in_reg(ctx, v2270.1);
                                let v2312 = C::put_in_reg(ctx, v2270.0);
                                let v2313 = constructor_vec_fcmphe(ctx, v183, v2311, v2312);
                                let v2317 = constructor_vec_not_or(ctx, v183, v2291, v2313);
                                let v2318 = constructor_output_reg(ctx, v2317);
                                let v2319 = Some(v2318);
                                // Rule at src\isa\s390x\lower.isle line 3520.
                                return v2319;
                            }
                        }
                        &FloatCC::UnorderedOrEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v182 = C::ty_vec128(ctx, v3);
                            if let Some(v183) = v182 {
                                let v2270 = C::unpack_value_array_2(ctx, v2268);
                                let v2277 = C::put_in_reg(ctx, v2270.0);
                                let v2278 = C::put_in_reg(ctx, v2270.1);
                                let v2285 = constructor_vec_fcmph(ctx, v183, v2277, v2278);
                                let v2311 = C::put_in_reg(ctx, v2270.1);
                                let v2312 = C::put_in_reg(ctx, v2270.0);
                                let v2320 = constructor_vec_fcmph(ctx, v183, v2311, v2312);
                                let v2324 = constructor_vec_not_or(ctx, v183, v2285, v2320);
                                let v2325 = constructor_output_reg(ctx, v2324);
                                let v2326 = Some(v2325);
                                // Rule at src\isa\s390x\lower.isle line 3524.
                                return v2326;
                            }
                        }
                        &FloatCC::UnorderedOrGreaterThan => {
                            let v3 = C::value_type(ctx, v2);
                            let v182 = C::ty_vec128(ctx, v3);
                            if let Some(v183) = v182 {
                                let v2270 = C::unpack_value_array_2(ctx, v2268);
                                let v2297 = C::put_in_reg(ctx, v2270.1);
                                let v2298 = C::put_in_reg(ctx, v2270.0);
                                let v2305 = constructor_vec_fcmphe(ctx, v183, v2297, v2298);
                                let v2308 = constructor_vec_not(ctx, v183, v2305);
                                let v2309 = constructor_output_reg(ctx, v2308);
                                let v2310 = Some(v2309);
                                // Rule at src\isa\s390x\lower.isle line 3516.
                                return v2310;
                            }
                        }
                        &FloatCC::UnorderedOrGreaterThanOrEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v182 = C::ty_vec128(ctx, v3);
                            if let Some(v183) = v182 {
                                let v2270 = C::unpack_value_array_2(ctx, v2268);
                                let v2297 = C::put_in_reg(ctx, v2270.1);
                                let v2298 = C::put_in_reg(ctx, v2270.0);
                                let v2299 = constructor_vec_fcmph(ctx, v183, v2297, v2298);
                                let v2302 = constructor_vec_not(ctx, v183, v2299);
                                let v2303 = constructor_output_reg(ctx, v2302);
                                let v2304 = Some(v2303);
                                // Rule at src\isa\s390x\lower.isle line 3512.
                                return v2304;
                            }
                        }
                        &FloatCC::UnorderedOrLessThan => {
                            let v3 = C::value_type(ctx, v2);
                            let v182 = C::ty_vec128(ctx, v3);
                            if let Some(v183) = v182 {
                                let v2270 = C::unpack_value_array_2(ctx, v2268);
                                let v2277 = C::put_in_reg(ctx, v2270.0);
                                let v2278 = C::put_in_reg(ctx, v2270.1);
                                let v2291 = constructor_vec_fcmphe(ctx, v183, v2277, v2278);
                                let v2294 = constructor_vec_not(ctx, v183, v2291);
                                let v2295 = constructor_output_reg(ctx, v2294);
                                let v2296 = Some(v2295);
                                // Rule at src\isa\s390x\lower.isle line 3508.
                                return v2296;
                            }
                        }
                        &FloatCC::UnorderedOrLessThanOrEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v182 = C::ty_vec128(ctx, v3);
                            if let Some(v183) = v182 {
                                let v2270 = C::unpack_value_array_2(ctx, v2268);
                                let v2277 = C::put_in_reg(ctx, v2270.0);
                                let v2278 = C::put_in_reg(ctx, v2270.1);
                                let v2285 = constructor_vec_fcmph(ctx, v183, v2277, v2278);
                                let v2288 = constructor_vec_not(ctx, v183, v2285);
                                let v2289 = constructor_output_reg(ctx, v2288);
                                let v2290 = Some(v2289);
                                // Rule at src\isa\s390x\lower.isle line 3504.
                                return v2290;
                            }
                        }
                        _ => {}
                    }
                    let v3 = C::value_type(ctx, v2);
                    let v78 = C::fits_in_64(ctx, v3);
                    if let Some(v79) = v78 {
                        let v2270 = C::unpack_value_array_2(ctx, v2268);
                        let v2273 = &constructor_fcmp_val(ctx, v2269, v2270.0, v2270.1);
                        let v2274 = constructor_lower_bool(ctx, v79, v2273);
                        let v2275 = constructor_output_reg(ctx, v2274);
                        let v2276 = Some(v2275);
                        // Rule at src\isa\s390x\lower.isle line 3486.
                        return v2276;
                    }
                }
            }
        }
        &InstructionData::FuncAddr {
            opcode: ref v1848,
            func_ref: v1849,
        } => {
            if let &Opcode::FuncAddr = v1848 {
                let v1850 = C::func_ref_data(ctx, v1849);
                let v1854 = C::reloc_distance_near(ctx, v1850.2);
                if let Some(v1855) = v1854 {
                    let v1857 = C::memflags_trusted(ctx);
                    let v1858 = &C::memarg_symbol(ctx, v1850.1, 0_i32, v1857);
                    let v1859 = constructor_load_addr(ctx, v1858);
                    let v1860 = constructor_output_reg(ctx, v1859);
                    let v1861 = Some(v1860);
                    // Rule at src\isa\s390x\lower.isle line 2266.
                    return v1861;
                }
                let v1863 = SymbolReloc::Absolute {
                    name: v1850.1,
                    offset: 0_i64,
                };
                let v1864 = constructor_load_symbol_reloc(ctx, &v1863);
                let v1865 = constructor_output_reg(ctx, v1864);
                let v1866 = Some(v1865);
                // Rule at src\isa\s390x\lower.isle line 2270.
                return v1866;
            }
        }
        &InstructionData::IntAddTrap {
            opcode: ref v2443,
            args: ref v2444,
            code: ref v2445,
        } => {
            if let &Opcode::UaddOverflowTrap = v2443 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v78 = C::fits_in_64(ctx, v3);
                    if let Some(v79) = v78 {
                        let v2446 = C::unpack_value_array_2(ctx, v2444);
                        let v2468 = C::def_inst(ctx, v2446.0);
                        if let Some(v2469) = v2468 {
                            let v2470 = &C::inst_data_value(ctx, v2469);
                            if let &InstructionData::Unary {
                                opcode: ref v2471,
                                arg: v2472,
                            } = v2470 {
                                if let &Opcode::Uextend = v2471 {
                                    let v2473 = C::value_type(ctx, v2472);
                                    if v2473 == I32 {
                                        let v2474 = C::put_in_reg(ctx, v2446.1);
                                        let v2475 = C::put_in_reg(ctx, v2472);
                                        let v2476 = &constructor_add_logical_reg_zext32_with_flags_paired(ctx, v79, v2474, v2475);
                                        let v2452 = &C::mask_as_cond(ctx, 0x3_u8);
                                        let v2453 = &constructor_trap_if_impl(ctx, v2452, v2445);
                                        let v2477 = constructor_with_flags(ctx, v2476, v2453);
                                        let v2478 = C::output(ctx, v2477);
                                        let v2479 = Some(v2478);
                                        // Rule at src\isa\s390x\lower.isle line 3870.
                                        return v2479;
                                    }
                                }
                            }
                        }
                        let v2488 = C::u32_from_value(ctx, v2446.0);
                        if let Some(v2489) = v2488 {
                            let v2474 = C::put_in_reg(ctx, v2446.1);
                            let v2490 = &constructor_add_logical_zimm32_with_flags_paired(ctx, v79, v2474, v2489);
                            let v2483 = &C::mask_as_cond(ctx, 0x3_u8);
                            let v2484 = &constructor_trap_if_impl(ctx, v2483, v2445);
                            let v2491 = constructor_with_flags(ctx, v2490, v2484);
                            let v2492 = C::output(ctx, v2491);
                            let v2493 = Some(v2492);
                            // Rule at src\isa\s390x\lower.isle line 3882.
                            return v2493;
                        }
                        let v2514 = C::sinkable_inst(ctx, v2446.0);
                        if let Some(v2515) = v2514 {
                            let v2516 = &C::inst_data_value(ctx, v2515);
                            if let &InstructionData::Load {
                                opcode: ref v2517,
                                arg: v2518,
                                flags: v2519,
                                offset: v2520,
                            } = v2516 {
                                match v2517 {
                                    &Opcode::Load => {
                                        let v2511 = C::value_type(ctx, v2446.0);
                                        let v2512 = C::ty_32_or_64(ctx, v2511);
                                        if let Some(v2513) = v2512 {
                                            let v2521 = C::bigendian(ctx, v2519);
                                            if let Some(v2522) = v2521 {
                                                let v2474 = C::put_in_reg(ctx, v2446.1);
                                                let v2523 = &constructor_sink_load(ctx, v2515);
                                                let v2524 = &constructor_add_logical_mem_with_flags_paired(ctx, v79, v2474, v2523);
                                                let v2452 = &C::mask_as_cond(ctx, 0x3_u8);
                                                let v2453 = &constructor_trap_if_impl(ctx, v2452, v2445);
                                                let v2525 = constructor_with_flags(ctx, v2524, v2453);
                                                let v2526 = C::output(ctx, v2525);
                                                let v2527 = Some(v2526);
                                                // Rule at src\isa\s390x\lower.isle line 3894.
                                                return v2527;
                                            }
                                        }
                                    }
                                    &Opcode::Uload32 => {
                                        let v2521 = C::bigendian(ctx, v2519);
                                        if let Some(v2522) = v2521 {
                                            let v2474 = C::put_in_reg(ctx, v2446.1);
                                            let v2533 = &constructor_sink_uload32(ctx, v2515);
                                            let v2534 = &constructor_add_logical_mem_zext32_with_flags_paired(ctx, v79, v2474, v2533);
                                            let v2452 = &C::mask_as_cond(ctx, 0x3_u8);
                                            let v2453 = &constructor_trap_if_impl(ctx, v2452, v2445);
                                            let v2535 = constructor_with_flags(ctx, v2534, v2453);
                                            let v2536 = C::output(ctx, v2535);
                                            let v2537 = Some(v2536);
                                            // Rule at src\isa\s390x\lower.isle line 3906.
                                            return v2537;
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        let v2457 = C::def_inst(ctx, v2446.1);
                        if let Some(v2458) = v2457 {
                            let v2459 = &C::inst_data_value(ctx, v2458);
                            if let &InstructionData::Unary {
                                opcode: ref v2460,
                                arg: v2461,
                            } = v2459 {
                                if let &Opcode::Uextend = v2460 {
                                    let v2462 = C::value_type(ctx, v2461);
                                    if v2462 == I32 {
                                        let v2449 = C::put_in_reg(ctx, v2446.0);
                                        let v2463 = C::put_in_reg(ctx, v2461);
                                        let v2464 = &constructor_add_logical_reg_zext32_with_flags_paired(ctx, v79, v2449, v2463);
                                        let v2452 = &C::mask_as_cond(ctx, 0x3_u8);
                                        let v2453 = &constructor_trap_if_impl(ctx, v2452, v2445);
                                        let v2465 = constructor_with_flags(ctx, v2464, v2453);
                                        let v2466 = C::output(ctx, v2465);
                                        let v2467 = Some(v2466);
                                        // Rule at src\isa\s390x\lower.isle line 3865.
                                        return v2467;
                                    }
                                }
                            }
                        }
                        let v2480 = C::u32_from_value(ctx, v2446.1);
                        if let Some(v2481) = v2480 {
                            let v2449 = C::put_in_reg(ctx, v2446.0);
                            let v2482 = &constructor_add_logical_zimm32_with_flags_paired(ctx, v79, v2449, v2481);
                            let v2483 = &C::mask_as_cond(ctx, 0x3_u8);
                            let v2484 = &constructor_trap_if_impl(ctx, v2483, v2445);
                            let v2485 = constructor_with_flags(ctx, v2482, v2484);
                            let v2486 = C::output(ctx, v2485);
                            let v2487 = Some(v2486);
                            // Rule at src\isa\s390x\lower.isle line 3877.
                            return v2487;
                        }
                        let v2497 = C::sinkable_inst(ctx, v2446.1);
                        if let Some(v2498) = v2497 {
                            let v2499 = &C::inst_data_value(ctx, v2498);
                            if let &InstructionData::Load {
                                opcode: ref v2500,
                                arg: v2501,
                                flags: v2502,
                                offset: v2503,
                            } = v2499 {
                                match v2500 {
                                    &Opcode::Load => {
                                        let v2494 = C::value_type(ctx, v2446.1);
                                        let v2495 = C::ty_32_or_64(ctx, v2494);
                                        if let Some(v2496) = v2495 {
                                            let v2504 = C::bigendian(ctx, v2502);
                                            if let Some(v2505) = v2504 {
                                                let v2449 = C::put_in_reg(ctx, v2446.0);
                                                let v2506 = &constructor_sink_load(ctx, v2498);
                                                let v2507 = &constructor_add_logical_mem_with_flags_paired(ctx, v79, v2449, v2506);
                                                let v2452 = &C::mask_as_cond(ctx, 0x3_u8);
                                                let v2453 = &constructor_trap_if_impl(ctx, v2452, v2445);
                                                let v2508 = constructor_with_flags(ctx, v2507, v2453);
                                                let v2509 = C::output(ctx, v2508);
                                                let v2510 = Some(v2509);
                                                // Rule at src\isa\s390x\lower.isle line 3889.
                                                return v2510;
                                            }
                                        }
                                    }
                                    &Opcode::Uload32 => {
                                        let v2504 = C::bigendian(ctx, v2502);
                                        if let Some(v2505) = v2504 {
                                            let v2449 = C::put_in_reg(ctx, v2446.0);
                                            let v2528 = &constructor_sink_uload32(ctx, v2498);
                                            let v2529 = &constructor_add_logical_mem_zext32_with_flags_paired(ctx, v79, v2449, v2528);
                                            let v2452 = &C::mask_as_cond(ctx, 0x3_u8);
                                            let v2453 = &constructor_trap_if_impl(ctx, v2452, v2445);
                                            let v2530 = constructor_with_flags(ctx, v2529, v2453);
                                            let v2531 = C::output(ctx, v2530);
                                            let v2532 = Some(v2531);
                                            // Rule at src\isa\s390x\lower.isle line 3901.
                                            return v2532;
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        let v2449 = C::put_in_reg(ctx, v2446.0);
                        let v2450 = C::put_in_reg(ctx, v2446.1);
                        let v2451 = &constructor_add_logical_reg_with_flags_paired(ctx, v79, v2449, v2450);
                        let v2452 = &C::mask_as_cond(ctx, 0x3_u8);
                        let v2453 = &constructor_trap_if_impl(ctx, v2452, v2445);
                        let v2454 = constructor_with_flags(ctx, v2451, v2453);
                        let v2455 = C::output(ctx, v2454);
                        let v2456 = Some(v2455);
                        // Rule at src\isa\s390x\lower.isle line 3859.
                        return v2456;
                    }
                }
            }
        }
        &InstructionData::IntCompare {
            opcode: ref v2222,
            args: ref v2223,
            cond: ref v2224,
        } => {
            if let &Opcode::Icmp = v2222 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    match v2224 {
                        &IntCC::Equal => {
                            let v3 = C::value_type(ctx, v2);
                            let v182 = C::ty_vec128(ctx, v3);
                            if let Some(v183) = v182 {
                                let v2225 = C::unpack_value_array_2(ctx, v2223);
                                let v2233 = C::put_in_reg(ctx, v2225.0);
                                let v2234 = C::put_in_reg(ctx, v2225.1);
                                let v2235 = constructor_vec_cmpeq(ctx, v183, v2233, v2234);
                                let v2236 = constructor_output_reg(ctx, v2235);
                                let v2237 = Some(v2236);
                                // Rule at src\isa\s390x\lower.isle line 3460.
                                return v2237;
                            }
                        }
                        &IntCC::NotEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v182 = C::ty_vec128(ctx, v3);
                            if let Some(v183) = v182 {
                                let v2225 = C::unpack_value_array_2(ctx, v2223);
                                let v2233 = C::put_in_reg(ctx, v2225.0);
                                let v2234 = C::put_in_reg(ctx, v2225.1);
                                let v2235 = constructor_vec_cmpeq(ctx, v183, v2233, v2234);
                                let v2238 = constructor_vec_not(ctx, v183, v2235);
                                let v2239 = constructor_output_reg(ctx, v2238);
                                let v2240 = Some(v2239);
                                // Rule at src\isa\s390x\lower.isle line 3462.
                                return v2240;
                            }
                        }
                        &IntCC::SignedGreaterThan => {
                            let v3 = C::value_type(ctx, v2);
                            let v182 = C::ty_vec128(ctx, v3);
                            if let Some(v183) = v182 {
                                let v2225 = C::unpack_value_array_2(ctx, v2223);
                                let v2233 = C::put_in_reg(ctx, v2225.0);
                                let v2234 = C::put_in_reg(ctx, v2225.1);
                                let v2241 = constructor_vec_cmph(ctx, v183, v2233, v2234);
                                let v2242 = constructor_output_reg(ctx, v2241);
                                let v2243 = Some(v2242);
                                // Rule at src\isa\s390x\lower.isle line 3464.
                                return v2243;
                            }
                        }
                        &IntCC::SignedGreaterThanOrEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v182 = C::ty_vec128(ctx, v3);
                            if let Some(v183) = v182 {
                                let v2225 = C::unpack_value_array_2(ctx, v2223);
                                let v2247 = C::put_in_reg(ctx, v2225.1);
                                let v2248 = C::put_in_reg(ctx, v2225.0);
                                let v2249 = constructor_vec_cmph(ctx, v183, v2247, v2248);
                                let v2252 = constructor_vec_not(ctx, v183, v2249);
                                let v2253 = constructor_output_reg(ctx, v2252);
                                let v2254 = Some(v2253);
                                // Rule at src\isa\s390x\lower.isle line 3470.
                                return v2254;
                            }
                        }
                        &IntCC::SignedLessThan => {
                            let v3 = C::value_type(ctx, v2);
                            let v182 = C::ty_vec128(ctx, v3);
                            if let Some(v183) = v182 {
                                let v2225 = C::unpack_value_array_2(ctx, v2223);
                                let v2247 = C::put_in_reg(ctx, v2225.1);
                                let v2248 = C::put_in_reg(ctx, v2225.0);
                                let v2249 = constructor_vec_cmph(ctx, v183, v2247, v2248);
                                let v2250 = constructor_output_reg(ctx, v2249);
                                let v2251 = Some(v2250);
                                // Rule at src\isa\s390x\lower.isle line 3468.
                                return v2251;
                            }
                        }
                        &IntCC::SignedLessThanOrEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v182 = C::ty_vec128(ctx, v3);
                            if let Some(v183) = v182 {
                                let v2225 = C::unpack_value_array_2(ctx, v2223);
                                let v2233 = C::put_in_reg(ctx, v2225.0);
                                let v2234 = C::put_in_reg(ctx, v2225.1);
                                let v2241 = constructor_vec_cmph(ctx, v183, v2233, v2234);
                                let v2244 = constructor_vec_not(ctx, v183, v2241);
                                let v2245 = constructor_output_reg(ctx, v2244);
                                let v2246 = Some(v2245);
                                // Rule at src\isa\s390x\lower.isle line 3466.
                                return v2246;
                            }
                        }
                        &IntCC::UnsignedGreaterThan => {
                            let v3 = C::value_type(ctx, v2);
                            let v182 = C::ty_vec128(ctx, v3);
                            if let Some(v183) = v182 {
                                let v2225 = C::unpack_value_array_2(ctx, v2223);
                                let v2233 = C::put_in_reg(ctx, v2225.0);
                                let v2234 = C::put_in_reg(ctx, v2225.1);
                                let v2255 = constructor_vec_cmphl(ctx, v183, v2233, v2234);
                                let v2256 = constructor_output_reg(ctx, v2255);
                                let v2257 = Some(v2256);
                                // Rule at src\isa\s390x\lower.isle line 3472.
                                return v2257;
                            }
                        }
                        &IntCC::UnsignedGreaterThanOrEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v182 = C::ty_vec128(ctx, v3);
                            if let Some(v183) = v182 {
                                let v2225 = C::unpack_value_array_2(ctx, v2223);
                                let v2247 = C::put_in_reg(ctx, v2225.1);
                                let v2248 = C::put_in_reg(ctx, v2225.0);
                                let v2261 = constructor_vec_cmphl(ctx, v183, v2247, v2248);
                                let v2264 = constructor_vec_not(ctx, v183, v2261);
                                let v2265 = constructor_output_reg(ctx, v2264);
                                let v2266 = Some(v2265);
                                // Rule at src\isa\s390x\lower.isle line 3478.
                                return v2266;
                            }
                        }
                        &IntCC::UnsignedLessThan => {
                            let v3 = C::value_type(ctx, v2);
                            let v182 = C::ty_vec128(ctx, v3);
                            if let Some(v183) = v182 {
                                let v2225 = C::unpack_value_array_2(ctx, v2223);
                                let v2247 = C::put_in_reg(ctx, v2225.1);
                                let v2248 = C::put_in_reg(ctx, v2225.0);
                                let v2261 = constructor_vec_cmphl(ctx, v183, v2247, v2248);
                                let v2262 = constructor_output_reg(ctx, v2261);
                                let v2263 = Some(v2262);
                                // Rule at src\isa\s390x\lower.isle line 3476.
                                return v2263;
                            }
                        }
                        &IntCC::UnsignedLessThanOrEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v182 = C::ty_vec128(ctx, v3);
                            if let Some(v183) = v182 {
                                let v2225 = C::unpack_value_array_2(ctx, v2223);
                                let v2233 = C::put_in_reg(ctx, v2225.0);
                                let v2234 = C::put_in_reg(ctx, v2225.1);
                                let v2255 = constructor_vec_cmphl(ctx, v183, v2233, v2234);
                                let v2258 = constructor_vec_not(ctx, v183, v2255);
                                let v2259 = constructor_output_reg(ctx, v2258);
                                let v2260 = Some(v2259);
                                // Rule at src\isa\s390x\lower.isle line 3474.
                                return v2260;
                            }
                        }
                        _ => {}
                    }
                    let v3 = C::value_type(ctx, v2);
                    let v78 = C::fits_in_64(ctx, v3);
                    if let Some(v79) = v78 {
                        let v2228 = true;
                        let v2225 = C::unpack_value_array_2(ctx, v2223);
                        let v2229 = &constructor_icmp_val(ctx, v2228, v2224, v2225.0, v2225.1);
                        let v2230 = constructor_lower_bool(ctx, v79, v2229);
                        let v2231 = constructor_output_reg(ctx, v2230);
                        let v2232 = Some(v2231);
                        // Rule at src\isa\s390x\lower.isle line 3338.
                        return v2232;
                    }
                }
            }
        }
        &InstructionData::Load {
            opcode: ref v1897,
            arg: v1898,
            flags: v1899,
            offset: v1900,
        } => {
            match v1897 {
                &Opcode::Load => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v51 = C::vr128_ty(ctx, v3);
                        if let Some(v52) = v51 {
                            let v1826 = &C::lane_order(ctx);
                            match v1826 {
                                &LaneOrder::LittleEndian => {
                                    let v1906 = C::bigendian(ctx, v1899);
                                    if let Some(v1907) = v1906 {
                                        let v1953 = constructor_vec_load_elt_rev(ctx, v52, v1899, v1898, v1900);
                                        let v1954 = constructor_output_reg(ctx, v1953);
                                        let v1955 = Some(v1954);
                                        // Rule at src\isa\s390x\lower.isle line 2380.
                                        return v1955;
                                    }
                                    let v1912 = C::littleendian(ctx, v1899);
                                    if let Some(v1913) = v1912 {
                                        let v1956 = constructor_vec_load_full_rev(ctx, v52, v1899, v1898, v1900);
                                        let v1957 = constructor_output_reg(ctx, v1956);
                                        let v1958 = Some(v1957);
                                        // Rule at src\isa\s390x\lower.isle line 2385.
                                        return v1958;
                                    }
                                }
                                &LaneOrder::BigEndian => {
                                    let v1906 = C::bigendian(ctx, v1899);
                                    if let Some(v1907) = v1906 {
                                        let v1902 = &constructor_lower_address(ctx, v1899, v1898, v1900);
                                        let v1947 = constructor_vec_load(ctx, v52, v1902);
                                        let v1948 = constructor_output_reg(ctx, v1947);
                                        let v1949 = Some(v1948);
                                        // Rule at src\isa\s390x\lower.isle line 2370.
                                        return v1949;
                                    }
                                    let v1912 = C::littleendian(ctx, v1899);
                                    if let Some(v1913) = v1912 {
                                        let v1950 = constructor_vec_load_byte_rev(ctx, v52, v1899, v1898, v1900);
                                        let v1951 = constructor_output_reg(ctx, v1950);
                                        let v1952 = Some(v1951);
                                        // Rule at src\isa\s390x\lower.isle line 2375.
                                        return v1952;
                                    }
                                }
                                _ => {}
                            }
                        }
                        match v3 {
                            I8 => {
                                let v1902 = &constructor_lower_address(ctx, v1899, v1898, v1900);
                                let v1903 = constructor_zext32_mem(ctx, I8, v1902);
                                let v1904 = constructor_output_reg(ctx, v1903);
                                let v1905 = Some(v1904);
                                // Rule at src\isa\s390x\lower.isle line 2318.
                                return v1905;
                            }
                            I16 => {
                                let v1906 = C::bigendian(ctx, v1899);
                                if let Some(v1907) = v1906 {
                                    let v1902 = &constructor_lower_address(ctx, v1899, v1898, v1900);
                                    let v1909 = constructor_zext32_mem(ctx, I16, v1902);
                                    let v1910 = constructor_output_reg(ctx, v1909);
                                    let v1911 = Some(v1910);
                                    // Rule at src\isa\s390x\lower.isle line 2322.
                                    return v1911;
                                }
                                let v1912 = C::littleendian(ctx, v1899);
                                if let Some(v1913) = v1912 {
                                    let v1902 = &constructor_lower_address(ctx, v1899, v1898, v1900);
                                    let v1914 = constructor_loadrev16(ctx, v1902);
                                    let v1915 = constructor_output_reg(ctx, v1914);
                                    let v1916 = Some(v1915);
                                    // Rule at src\isa\s390x\lower.isle line 2326.
                                    return v1916;
                                }
                            }
                            I32 => {
                                let v1906 = C::bigendian(ctx, v1899);
                                if let Some(v1907) = v1906 {
                                    let v1902 = &constructor_lower_address(ctx, v1899, v1898, v1900);
                                    let v1917 = constructor_load32(ctx, v1902);
                                    let v1918 = constructor_output_reg(ctx, v1917);
                                    let v1919 = Some(v1918);
                                    // Rule at src\isa\s390x\lower.isle line 2330.
                                    return v1919;
                                }
                                let v1912 = C::littleendian(ctx, v1899);
                                if let Some(v1913) = v1912 {
                                    let v1902 = &constructor_lower_address(ctx, v1899, v1898, v1900);
                                    let v1920 = constructor_loadrev32(ctx, v1902);
                                    let v1921 = constructor_output_reg(ctx, v1920);
                                    let v1922 = Some(v1921);
                                    // Rule at src\isa\s390x\lower.isle line 2334.
                                    return v1922;
                                }
                            }
                            I64 => {
                                let v1906 = C::bigendian(ctx, v1899);
                                if let Some(v1907) = v1906 {
                                    let v1902 = &constructor_lower_address(ctx, v1899, v1898, v1900);
                                    let v1923 = constructor_load64(ctx, v1902);
                                    let v1924 = constructor_output_reg(ctx, v1923);
                                    let v1925 = Some(v1924);
                                    // Rule at src\isa\s390x\lower.isle line 2338.
                                    return v1925;
                                }
                                let v1912 = C::littleendian(ctx, v1899);
                                if let Some(v1913) = v1912 {
                                    let v1902 = &constructor_lower_address(ctx, v1899, v1898, v1900);
                                    let v1926 = constructor_loadrev64(ctx, v1902);
                                    let v1927 = constructor_output_reg(ctx, v1926);
                                    let v1928 = Some(v1927);
                                    // Rule at src\isa\s390x\lower.isle line 2342.
                                    return v1928;
                                }
                            }
                            F16 => {
                                let v1906 = C::bigendian(ctx, v1899);
                                if let Some(v1907) = v1906 {
                                    let v1902 = &constructor_lower_address(ctx, v1899, v1898, v1900);
                                    let v1929 = constructor_vec_load_lane_undef(ctx, F16X8, v1902, 0x0_u8);
                                    let v1930 = constructor_output_reg(ctx, v1929);
                                    let v1931 = Some(v1930);
                                    // Rule at src\isa\s390x\lower.isle line 2346.
                                    return v1931;
                                }
                                let v1912 = C::littleendian(ctx, v1899);
                                if let Some(v1913) = v1912 {
                                    let v1902 = &constructor_lower_address(ctx, v1899, v1898, v1900);
                                    let v1932 = constructor_vec_load_lane_little_undef(ctx, F16X8, v1902, 0x0_u8);
                                    let v1933 = constructor_output_reg(ctx, v1932);
                                    let v1934 = Some(v1933);
                                    // Rule at src\isa\s390x\lower.isle line 2350.
                                    return v1934;
                                }
                            }
                            F32 => {
                                let v1906 = C::bigendian(ctx, v1899);
                                if let Some(v1907) = v1906 {
                                    let v1902 = &constructor_lower_address(ctx, v1899, v1898, v1900);
                                    let v1935 = constructor_vec_load_lane_undef(ctx, F32X4, v1902, 0x0_u8);
                                    let v1936 = constructor_output_reg(ctx, v1935);
                                    let v1937 = Some(v1936);
                                    // Rule at src\isa\s390x\lower.isle line 2354.
                                    return v1937;
                                }
                                let v1912 = C::littleendian(ctx, v1899);
                                if let Some(v1913) = v1912 {
                                    let v1902 = &constructor_lower_address(ctx, v1899, v1898, v1900);
                                    let v1938 = constructor_vec_load_lane_little_undef(ctx, F32X4, v1902, 0x0_u8);
                                    let v1939 = constructor_output_reg(ctx, v1938);
                                    let v1940 = Some(v1939);
                                    // Rule at src\isa\s390x\lower.isle line 2358.
                                    return v1940;
                                }
                            }
                            F64 => {
                                let v1906 = C::bigendian(ctx, v1899);
                                if let Some(v1907) = v1906 {
                                    let v1902 = &constructor_lower_address(ctx, v1899, v1898, v1900);
                                    let v1941 = constructor_vec_load_lane_undef(ctx, F64X2, v1902, 0x0_u8);
                                    let v1942 = constructor_output_reg(ctx, v1941);
                                    let v1943 = Some(v1942);
                                    // Rule at src\isa\s390x\lower.isle line 2362.
                                    return v1943;
                                }
                                let v1912 = C::littleendian(ctx, v1899);
                                if let Some(v1913) = v1912 {
                                    let v1902 = &constructor_lower_address(ctx, v1899, v1898, v1900);
                                    let v1944 = constructor_vec_load_lane_little_undef(ctx, F64X2, v1902, 0x0_u8);
                                    let v1945 = constructor_output_reg(ctx, v1944);
                                    let v1946 = Some(v1945);
                                    // Rule at src\isa\s390x\lower.isle line 2366.
                                    return v1946;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Uload8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v732 = C::gpr64_ty(ctx, v3);
                        if let Some(v733) = v732 {
                            let v1902 = &constructor_lower_address(ctx, v1899, v1898, v1900);
                            let v1959 = constructor_zext64_mem(ctx, I8, v1902);
                            let v1960 = constructor_output_reg(ctx, v1959);
                            let v1961 = Some(v1960);
                            // Rule at src\isa\s390x\lower.isle line 2490.
                            return v1961;
                        }
                        let v727 = C::gpr32_ty(ctx, v3);
                        if let Some(v728) = v727 {
                            let v1902 = &constructor_lower_address(ctx, v1899, v1898, v1900);
                            let v1903 = constructor_zext32_mem(ctx, I8, v1902);
                            let v1904 = constructor_output_reg(ctx, v1903);
                            let v1905 = Some(v1904);
                            // Rule at src\isa\s390x\lower.isle line 2486.
                            return v1905;
                        }
                    }
                }
                &Opcode::Sload8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v732 = C::gpr64_ty(ctx, v3);
                        if let Some(v733) = v732 {
                            let v1902 = &constructor_lower_address(ctx, v1899, v1898, v1900);
                            let v1965 = constructor_sext64_mem(ctx, I8, v1902);
                            let v1966 = constructor_output_reg(ctx, v1965);
                            let v1967 = Some(v1966);
                            // Rule at src\isa\s390x\lower.isle line 2501.
                            return v1967;
                        }
                        let v727 = C::gpr32_ty(ctx, v3);
                        if let Some(v728) = v727 {
                            let v1902 = &constructor_lower_address(ctx, v1899, v1898, v1900);
                            let v1962 = constructor_sext32_mem(ctx, I8, v1902);
                            let v1963 = constructor_output_reg(ctx, v1962);
                            let v1964 = Some(v1963);
                            // Rule at src\isa\s390x\lower.isle line 2497.
                            return v1964;
                        }
                    }
                }
                &Opcode::Uload16 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1906 = C::bigendian(ctx, v1899);
                        if let Some(v1907) = v1906 {
                            let v3 = C::value_type(ctx, v2);
                            let v732 = C::gpr64_ty(ctx, v3);
                            if let Some(v733) = v732 {
                                let v1902 = &constructor_lower_address(ctx, v1899, v1898, v1900);
                                let v1971 = constructor_zext64_mem(ctx, I16, v1902);
                                let v1972 = constructor_output_reg(ctx, v1971);
                                let v1973 = Some(v1972);
                                // Rule at src\isa\s390x\lower.isle line 2519.
                                return v1973;
                            }
                            let v727 = C::gpr32_ty(ctx, v3);
                            if let Some(v728) = v727 {
                                let v1902 = &constructor_lower_address(ctx, v1899, v1898, v1900);
                                let v1909 = constructor_zext32_mem(ctx, I16, v1902);
                                let v1910 = constructor_output_reg(ctx, v1909);
                                let v1911 = Some(v1910);
                                // Rule at src\isa\s390x\lower.isle line 2508.
                                return v1911;
                            }
                        }
                        let v1912 = C::littleendian(ctx, v1899);
                        if let Some(v1913) = v1912 {
                            let v3 = C::value_type(ctx, v2);
                            let v732 = C::gpr64_ty(ctx, v3);
                            if let Some(v733) = v732 {
                                let v1902 = &constructor_lower_address(ctx, v1899, v1898, v1900);
                                let v1914 = constructor_loadrev16(ctx, v1902);
                                let v1974 = constructor_zext64_reg(ctx, I16, v1914);
                                let v1975 = constructor_output_reg(ctx, v1974);
                                let v1976 = Some(v1975);
                                // Rule at src\isa\s390x\lower.isle line 2524.
                                return v1976;
                            }
                            let v727 = C::gpr32_ty(ctx, v3);
                            if let Some(v728) = v727 {
                                let v1902 = &constructor_lower_address(ctx, v1899, v1898, v1900);
                                let v1914 = constructor_loadrev16(ctx, v1902);
                                let v1968 = constructor_zext32_reg(ctx, I16, v1914);
                                let v1969 = constructor_output_reg(ctx, v1968);
                                let v1970 = Some(v1969);
                                // Rule at src\isa\s390x\lower.isle line 2513.
                                return v1970;
                            }
                        }
                    }
                }
                &Opcode::Sload16 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1906 = C::bigendian(ctx, v1899);
                        if let Some(v1907) = v1906 {
                            let v3 = C::value_type(ctx, v2);
                            let v732 = C::gpr64_ty(ctx, v3);
                            if let Some(v733) = v732 {
                                let v1902 = &constructor_lower_address(ctx, v1899, v1898, v1900);
                                let v1983 = constructor_sext64_mem(ctx, I16, v1902);
                                let v1984 = constructor_output_reg(ctx, v1983);
                                let v1985 = Some(v1984);
                                // Rule at src\isa\s390x\lower.isle line 2544.
                                return v1985;
                            }
                            let v727 = C::gpr32_ty(ctx, v3);
                            if let Some(v728) = v727 {
                                let v1902 = &constructor_lower_address(ctx, v1899, v1898, v1900);
                                let v1977 = constructor_sext32_mem(ctx, I16, v1902);
                                let v1978 = constructor_output_reg(ctx, v1977);
                                let v1979 = Some(v1978);
                                // Rule at src\isa\s390x\lower.isle line 2533.
                                return v1979;
                            }
                        }
                        let v1912 = C::littleendian(ctx, v1899);
                        if let Some(v1913) = v1912 {
                            let v3 = C::value_type(ctx, v2);
                            let v732 = C::gpr64_ty(ctx, v3);
                            if let Some(v733) = v732 {
                                let v1902 = &constructor_lower_address(ctx, v1899, v1898, v1900);
                                let v1914 = constructor_loadrev16(ctx, v1902);
                                let v1986 = constructor_sext64_reg(ctx, I16, v1914);
                                let v1987 = constructor_output_reg(ctx, v1986);
                                let v1988 = Some(v1987);
                                // Rule at src\isa\s390x\lower.isle line 2549.
                                return v1988;
                            }
                            let v727 = C::gpr32_ty(ctx, v3);
                            if let Some(v728) = v727 {
                                let v1902 = &constructor_lower_address(ctx, v1899, v1898, v1900);
                                let v1914 = constructor_loadrev16(ctx, v1902);
                                let v1980 = constructor_sext32_reg(ctx, I16, v1914);
                                let v1981 = constructor_output_reg(ctx, v1980);
                                let v1982 = Some(v1981);
                                // Rule at src\isa\s390x\lower.isle line 2538.
                                return v1982;
                            }
                        }
                    }
                }
                &Opcode::Uload32 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v732 = C::gpr64_ty(ctx, v3);
                        if let Some(v733) = v732 {
                            let v1906 = C::bigendian(ctx, v1899);
                            if let Some(v1907) = v1906 {
                                let v1902 = &constructor_lower_address(ctx, v1899, v1898, v1900);
                                let v1989 = constructor_zext64_mem(ctx, I32, v1902);
                                let v1990 = constructor_output_reg(ctx, v1989);
                                let v1991 = Some(v1990);
                                // Rule at src\isa\s390x\lower.isle line 2558.
                                return v1991;
                            }
                            let v1912 = C::littleendian(ctx, v1899);
                            if let Some(v1913) = v1912 {
                                let v1902 = &constructor_lower_address(ctx, v1899, v1898, v1900);
                                let v1920 = constructor_loadrev32(ctx, v1902);
                                let v1992 = constructor_zext64_reg(ctx, I32, v1920);
                                let v1993 = constructor_output_reg(ctx, v1992);
                                let v1994 = Some(v1993);
                                // Rule at src\isa\s390x\lower.isle line 2563.
                                return v1994;
                            }
                        }
                    }
                }
                &Opcode::Sload32 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v732 = C::gpr64_ty(ctx, v3);
                        if let Some(v733) = v732 {
                            let v1906 = C::bigendian(ctx, v1899);
                            if let Some(v1907) = v1906 {
                                let v1902 = &constructor_lower_address(ctx, v1899, v1898, v1900);
                                let v1995 = constructor_sext64_mem(ctx, I32, v1902);
                                let v1996 = constructor_output_reg(ctx, v1995);
                                let v1997 = Some(v1996);
                                // Rule at src\isa\s390x\lower.isle line 2572.
                                return v1997;
                            }
                            let v1912 = C::littleendian(ctx, v1899);
                            if let Some(v1913) = v1912 {
                                let v1902 = &constructor_lower_address(ctx, v1899, v1898, v1900);
                                let v1920 = constructor_loadrev32(ctx, v1902);
                                let v1998 = constructor_sext64_reg(ctx, I32, v1920);
                                let v1999 = constructor_output_reg(ctx, v1998);
                                let v2000 = Some(v1999);
                                // Rule at src\isa\s390x\lower.isle line 2577.
                                return v2000;
                            }
                        }
                    }
                }
                &Opcode::Uload8x8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I16X8 {
                            let v2001 = constructor_load_v64(ctx, I8X16, v1899, v1898, v1900);
                            let v2002 = constructor_vec_unpacku_high(ctx, I8X16, v2001);
                            let v2003 = constructor_output_reg(ctx, v2002);
                            let v2004 = Some(v2003);
                            // Rule at src\isa\s390x\lower.isle line 2586.
                            return v2004;
                        }
                    }
                }
                &Opcode::Sload8x8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I16X8 {
                            let v2001 = constructor_load_v64(ctx, I8X16, v1899, v1898, v1900);
                            let v2005 = constructor_vec_unpacks_high(ctx, I8X16, v2001);
                            let v2006 = constructor_output_reg(ctx, v2005);
                            let v2007 = Some(v2006);
                            // Rule at src\isa\s390x\lower.isle line 2590.
                            return v2007;
                        }
                    }
                }
                &Opcode::Uload16x4 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I32X4 {
                            let v2008 = constructor_load_v64(ctx, I16X8, v1899, v1898, v1900);
                            let v2009 = constructor_vec_unpacku_high(ctx, I16X8, v2008);
                            let v2010 = constructor_output_reg(ctx, v2009);
                            let v2011 = Some(v2010);
                            // Rule at src\isa\s390x\lower.isle line 2594.
                            return v2011;
                        }
                    }
                }
                &Opcode::Sload16x4 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I32X4 {
                            let v2008 = constructor_load_v64(ctx, I16X8, v1899, v1898, v1900);
                            let v2012 = constructor_vec_unpacks_high(ctx, I16X8, v2008);
                            let v2013 = constructor_output_reg(ctx, v2012);
                            let v2014 = Some(v2013);
                            // Rule at src\isa\s390x\lower.isle line 2598.
                            return v2014;
                        }
                    }
                }
                &Opcode::Uload32x2 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64X2 {
                            let v2015 = constructor_load_v64(ctx, I32X4, v1899, v1898, v1900);
                            let v2016 = constructor_vec_unpacku_high(ctx, I32X4, v2015);
                            let v2017 = constructor_output_reg(ctx, v2016);
                            let v2018 = Some(v2017);
                            // Rule at src\isa\s390x\lower.isle line 2602.
                            return v2018;
                        }
                    }
                }
                &Opcode::Sload32x2 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64X2 {
                            let v2015 = constructor_load_v64(ctx, I32X4, v1899, v1898, v1900);
                            let v2019 = constructor_vec_unpacks_high(ctx, I32X4, v2015);
                            let v2020 = constructor_output_reg(ctx, v2019);
                            let v2021 = Some(v2020);
                            // Rule at src\isa\s390x\lower.isle line 2606.
                            return v2021;
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::LoadNoOffset {
            opcode: ref v1348,
            arg: v1349,
            flags: v1350,
        } => {
            match v1348 {
                &Opcode::Bitcast => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v206 = C::multi_lane(ctx, v3);
                        if let Some(v207) = v206 {
                            let v1351 = C::value_type(ctx, v1349);
                            let v1382 = C::multi_lane(ctx, v1351);
                            if let Some(v1383) = v1382 {
                                if v207.0 == v1383.0 {
                                    if v207.1 == v1383.1 {
                                        let v1374 = constructor_output_value(ctx, v1349);
                                        let v1375 = Some(v1374);
                                        // Rule at src\isa\s390x\lower.isle line 1767.
                                        return v1375;
                                    }
                                }
                            }
                        }
                        let v51 = C::vr128_ty(ctx, v3);
                        if let Some(v52) = v51 {
                            let v1351 = C::value_type(ctx, v1349);
                            let v1386 = C::vr128_ty(ctx, v1351);
                            if let Some(v1387) = v1386 {
                                let v1352 = C::put_in_reg(ctx, v1349);
                                let v1388 = &constructor_lane_order_from_memflags(ctx, v1350);
                                let v1389 = constructor_abi_vec_elt_rev(ctx, v1388, v1387, v1352);
                                let v1390 = constructor_abi_vec_elt_rev(ctx, v1388, v52, v1389);
                                let v1391 = constructor_output_reg(ctx, v1390);
                                let v1392 = Some(v1391);
                                // Rule at src\isa\s390x\lower.isle line 1778.
                                return v1392;
                            }
                        }
                        let v1378 = C::ty_scalar_float(ctx, v3);
                        if let Some(v1379) = v1378 {
                            let v1351 = C::value_type(ctx, v1349);
                            let v1380 = C::ty_scalar_float(ctx, v1351);
                            if let Some(v1381) = v1380 {
                                let v1374 = constructor_output_value(ctx, v1349);
                                let v1375 = Some(v1374);
                                // Rule at src\isa\s390x\lower.isle line 1762.
                                return v1375;
                            }
                        }
                        let v732 = C::gpr64_ty(ctx, v3);
                        if let Some(v733) = v732 {
                            let v1351 = C::value_type(ctx, v1349);
                            let v1376 = C::gpr64_ty(ctx, v1351);
                            if let Some(v1377) = v1376 {
                                let v1374 = constructor_output_value(ctx, v1349);
                                let v1375 = Some(v1374);
                                // Rule at src\isa\s390x\lower.isle line 1757.
                                return v1375;
                            }
                        }
                        let v727 = C::gpr32_ty(ctx, v3);
                        if let Some(v728) = v727 {
                            let v1351 = C::value_type(ctx, v1349);
                            let v1372 = C::gpr32_ty(ctx, v1351);
                            if let Some(v1373) = v1372 {
                                let v1374 = constructor_output_value(ctx, v1349);
                                let v1375 = Some(v1374);
                                // Rule at src\isa\s390x\lower.isle line 1754.
                                return v1375;
                            }
                        }
                        match v3 {
                            I16 => {
                                let v1351 = C::value_type(ctx, v1349);
                                if v1351 == F16 {
                                    let v1352 = C::put_in_reg(ctx, v1349);
                                    let v69 = C::zero_reg(ctx);
                                    let v1369 = constructor_vec_extract_lane(ctx, F16X8, v1352, 0x0_u8, v69);
                                    let v1370 = constructor_output_reg(ctx, v1369);
                                    let v1371 = Some(v1370);
                                    // Rule at src\isa\s390x\lower.isle line 1750.
                                    return v1371;
                                }
                            }
                            I32 => {
                                let v1351 = C::value_type(ctx, v1349);
                                if v1351 == F32 {
                                    let v1352 = C::put_in_reg(ctx, v1349);
                                    let v69 = C::zero_reg(ctx);
                                    let v1362 = constructor_vec_extract_lane(ctx, F32X4, v1352, 0x0_u8, v69);
                                    let v1363 = constructor_output_reg(ctx, v1362);
                                    let v1364 = Some(v1363);
                                    // Rule at src\isa\s390x\lower.isle line 1742.
                                    return v1364;
                                }
                            }
                            I64 => {
                                let v1351 = C::value_type(ctx, v1349);
                                if v1351 == F64 {
                                    let v1352 = C::put_in_reg(ctx, v1349);
                                    let v69 = C::zero_reg(ctx);
                                    let v1356 = constructor_vec_extract_lane(ctx, F64X2, v1352, 0x0_u8, v69);
                                    let v1357 = constructor_output_reg(ctx, v1356);
                                    let v1358 = Some(v1357);
                                    // Rule at src\isa\s390x\lower.isle line 1734.
                                    return v1358;
                                }
                            }
                            F16 => {
                                let v1351 = C::value_type(ctx, v1349);
                                if v1351 == I16 {
                                    let v1352 = C::put_in_reg(ctx, v1349);
                                    let v69 = C::zero_reg(ctx);
                                    let v1366 = constructor_vec_insert_lane_undef(ctx, F16X8, v1352, 0x0_u8, v69);
                                    let v1367 = constructor_output_reg(ctx, v1366);
                                    let v1368 = Some(v1367);
                                    // Rule at src\isa\s390x\lower.isle line 1746.
                                    return v1368;
                                }
                            }
                            F32 => {
                                let v1351 = C::value_type(ctx, v1349);
                                if v1351 == I32 {
                                    let v1352 = C::put_in_reg(ctx, v1349);
                                    let v69 = C::zero_reg(ctx);
                                    let v1359 = constructor_vec_insert_lane_undef(ctx, F32X4, v1352, 0x0_u8, v69);
                                    let v1360 = constructor_output_reg(ctx, v1359);
                                    let v1361 = Some(v1360);
                                    // Rule at src\isa\s390x\lower.isle line 1738.
                                    return v1361;
                                }
                            }
                            F64 => {
                                let v1351 = C::value_type(ctx, v1349);
                                if v1351 == I64 {
                                    let v1352 = C::put_in_reg(ctx, v1349);
                                    let v69 = C::zero_reg(ctx);
                                    let v1353 = constructor_vec_insert_lane_undef(ctx, F64X2, v1352, 0x0_u8, v69);
                                    let v1354 = constructor_output_reg(ctx, v1353);
                                    let v1355 = Some(v1354);
                                    // Rule at src\isa\s390x\lower.isle line 1730.
                                    return v1355;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::AtomicLoad => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v2173 = C::zero_offset(ctx);
                                let v2174 = &constructor_lower_address(ctx, v1350, v1349, v2173);
                                let v2175 = constructor_zext32_mem(ctx, I8, v2174);
                                let v2176 = constructor_output_reg(ctx, v2175);
                                let v2177 = Some(v2176);
                                // Rule at src\isa\s390x\lower.isle line 3249.
                                return v2177;
                            }
                            I16 => {
                                let v2178 = C::bigendian(ctx, v1350);
                                if let Some(v2179) = v2178 {
                                    let v2173 = C::zero_offset(ctx);
                                    let v2174 = &constructor_lower_address(ctx, v1350, v1349, v2173);
                                    let v2180 = constructor_zext32_mem(ctx, I16, v2174);
                                    let v2181 = constructor_output_reg(ctx, v2180);
                                    let v2182 = Some(v2181);
                                    // Rule at src\isa\s390x\lower.isle line 3253.
                                    return v2182;
                                }
                                let v2183 = C::littleendian(ctx, v1350);
                                if let Some(v2184) = v2183 {
                                    let v2173 = C::zero_offset(ctx);
                                    let v2174 = &constructor_lower_address(ctx, v1350, v1349, v2173);
                                    let v2185 = constructor_loadrev16(ctx, v2174);
                                    let v2186 = constructor_output_reg(ctx, v2185);
                                    let v2187 = Some(v2186);
                                    // Rule at src\isa\s390x\lower.isle line 3257.
                                    return v2187;
                                }
                            }
                            I32 => {
                                let v2178 = C::bigendian(ctx, v1350);
                                if let Some(v2179) = v2178 {
                                    let v2173 = C::zero_offset(ctx);
                                    let v2174 = &constructor_lower_address(ctx, v1350, v1349, v2173);
                                    let v2188 = constructor_load32(ctx, v2174);
                                    let v2189 = constructor_output_reg(ctx, v2188);
                                    let v2190 = Some(v2189);
                                    // Rule at src\isa\s390x\lower.isle line 3261.
                                    return v2190;
                                }
                                let v2183 = C::littleendian(ctx, v1350);
                                if let Some(v2184) = v2183 {
                                    let v2173 = C::zero_offset(ctx);
                                    let v2174 = &constructor_lower_address(ctx, v1350, v1349, v2173);
                                    let v2191 = constructor_loadrev32(ctx, v2174);
                                    let v2192 = constructor_output_reg(ctx, v2191);
                                    let v2193 = Some(v2192);
                                    // Rule at src\isa\s390x\lower.isle line 3265.
                                    return v2193;
                                }
                            }
                            I64 => {
                                let v2178 = C::bigendian(ctx, v1350);
                                if let Some(v2179) = v2178 {
                                    let v2173 = C::zero_offset(ctx);
                                    let v2174 = &constructor_lower_address(ctx, v1350, v1349, v2173);
                                    let v2194 = constructor_load64(ctx, v2174);
                                    let v2195 = constructor_output_reg(ctx, v2194);
                                    let v2196 = Some(v2195);
                                    // Rule at src\isa\s390x\lower.isle line 3269.
                                    return v2196;
                                }
                                let v2183 = C::littleendian(ctx, v1350);
                                if let Some(v2184) = v2183 {
                                    let v2173 = C::zero_offset(ctx);
                                    let v2174 = &constructor_lower_address(ctx, v1350, v1349, v2173);
                                    let v2197 = constructor_loadrev64(ctx, v2174);
                                    let v2198 = constructor_output_reg(ctx, v2197);
                                    let v2199 = Some(v2198);
                                    // Rule at src\isa\s390x\lower.isle line 3273.
                                    return v2199;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::MultiAry {
            opcode: ref v2538,
            args: v2539,
        } => {
            if let &Opcode::Return = v2538 {
                let v2540 = C::value_list_slice(ctx, v2539);
                let v2541 = constructor_lower_return(ctx, v2540);
                let v2542 = Some(v2541);
                // Rule at src\isa\s390x\lower.isle line 3914.
                return v2542;
            }
        }
        &InstructionData::NullAry {
            opcode: ref v47,
        } => {
            match v47 {
                &Opcode::Debugtrap => {
                    let v2440 = &constructor_debugtrap_impl(ctx);
                    let v2441 = constructor_side_effect(ctx, v2440);
                    let v2442 = Some(v2441);
                    // Rule at src\isa\s390x\lower.isle line 3840.
                    return v2442;
                }
                &Opcode::GetFramePointer => {
                    let v2596 = &C::memarg_frame_pointer_offset(ctx);
                    let v2597 = constructor_load64(ctx, v2596);
                    let v2598 = constructor_output_reg(ctx, v2597);
                    let v2599 = Some(v2598);
                    // Rule at src\isa\s390x\lower.isle line 4047.
                    return v2599;
                }
                &Opcode::GetStackPointer => {
                    let v2593 = constructor_sp(ctx);
                    let v2594 = constructor_output_reg(ctx, v2593);
                    let v2595 = Some(v2594);
                    // Rule at src\isa\s390x\lower.isle line 4044.
                    return v2595;
                }
                &Opcode::GetReturnAddress => {
                    let v2600 = &C::memarg_return_address_offset(ctx);
                    let v2601 = constructor_load64(ctx, v2600);
                    let v2602 = constructor_output_reg(ctx, v2601);
                    let v2603 = Some(v2602);
                    // Rule at src\isa\s390x\lower.isle line 4050.
                    return v2603;
                }
                &Opcode::Nop => {
                    let v48 = C::invalid_reg(ctx);
                    let v49 = constructor_output_reg(ctx, v48);
                    let v50 = Some(v49);
                    // Rule at src\isa\s390x\lower.isle line 50.
                    return v50;
                }
                &Opcode::Fence => {
                    let v2219 = &constructor_fence_impl(ctx);
                    let v2220 = constructor_side_effect(ctx, v2219);
                    let v2221 = Some(v2220);
                    // Rule at src\isa\s390x\lower.isle line 3305.
                    return v2221;
                }
                _ => {}
            }
        }
        &InstructionData::Shuffle {
            opcode: ref v1563,
            args: ref v1564,
            imm: v1565,
        } => {
            if let &Opcode::Shuffle = v1563 {
                let v1569 = C::u128_from_immediate(ctx, v1565);
                if let Some(v1570) = v1569 {
                    let v1571 = C::shuffle_mask_from_u128(ctx, v1570);
                    match v1571.1 {
                        0xf0f_u16 => {
                            let v1588 = C::u64_pair_split(ctx, v1571.0);
                            let v1591 = C::u32_pair_split(ctx, v1588.0);
                            let v1603 = C::u16_pair_split(ctx, v1591.1);
                            let v1606 = C::u8_pair_split(ctx, v1603.0);
                            match v1606.0 {
                                0x0_u8 => {
                                    if v1606.1 == 0x1_u8 {
                                        let v1609 = C::u8_pair_split(ctx, v1603.1);
                                        if v1609.0 == 0x2_u8 {
                                            if v1609.1 == 0x3_u8 {
                                                let v1612 = C::u32_pair_split(ctx, v1588.1);
                                                let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                if v1627.0 == 0x4_u8 {
                                                    if v1627.1 == 0x5_u8 {
                                                        let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                        if v1630.0 == 0x6_u8 {
                                                            if v1630.1 == 0x7_u8 {
                                                                let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                let v1582 = C::put_in_reg(ctx, v1566.0);
                                                                let v1766 = constructor_vec_unpacku_high(ctx, I32X4, v1582);
                                                                let v1767 = constructor_output_reg(ctx, v1766);
                                                                let v1768 = Some(v1767);
                                                                // Rule at src\isa\s390x\lower.isle line 2175.
                                                                return v1768;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x8_u8 => {
                                    if v1606.1 == 0x9_u8 {
                                        let v1609 = C::u8_pair_split(ctx, v1603.1);
                                        if v1609.0 == 0xa_u8 {
                                            if v1609.1 == 0xb_u8 {
                                                let v1612 = C::u32_pair_split(ctx, v1588.1);
                                                let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                if v1627.0 == 0xc_u8 {
                                                    if v1627.1 == 0xd_u8 {
                                                        let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                        if v1630.0 == 0xe_u8 {
                                                            if v1630.1 == 0xf_u8 {
                                                                let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                let v1582 = C::put_in_reg(ctx, v1566.0);
                                                                let v1784 = constructor_vec_unpacku_low(ctx, I32X4, v1582);
                                                                let v1785 = constructor_output_reg(ctx, v1784);
                                                                let v1786 = Some(v1785);
                                                                // Rule at src\isa\s390x\lower.isle line 2189.
                                                                return v1786;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x10_u8 => {
                                    if v1606.1 == 0x11_u8 {
                                        let v1609 = C::u8_pair_split(ctx, v1603.1);
                                        if v1609.0 == 0x12_u8 {
                                            if v1609.1 == 0x13_u8 {
                                                let v1612 = C::u32_pair_split(ctx, v1588.1);
                                                let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                if v1627.0 == 0x14_u8 {
                                                    if v1627.1 == 0x15_u8 {
                                                        let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                        if v1630.0 == 0x16_u8 {
                                                            if v1630.1 == 0x17_u8 {
                                                                let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                let v1645 = C::put_in_reg(ctx, v1566.1);
                                                                let v1775 = constructor_vec_unpacku_high(ctx, I32X4, v1645);
                                                                let v1776 = constructor_output_reg(ctx, v1775);
                                                                let v1777 = Some(v1776);
                                                                // Rule at src\isa\s390x\lower.isle line 2181.
                                                                return v1777;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x18_u8 => {
                                    if v1606.1 == 0x19_u8 {
                                        let v1609 = C::u8_pair_split(ctx, v1603.1);
                                        if v1609.0 == 0x1a_u8 {
                                            if v1609.1 == 0x1b_u8 {
                                                let v1612 = C::u32_pair_split(ctx, v1588.1);
                                                let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                if v1627.0 == 0x1c_u8 {
                                                    if v1627.1 == 0x1d_u8 {
                                                        let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                        if v1630.0 == 0x1e_u8 {
                                                            if v1630.1 == 0x1f_u8 {
                                                                let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                let v1645 = C::put_in_reg(ctx, v1566.1);
                                                                let v1793 = constructor_vec_unpacku_low(ctx, I32X4, v1645);
                                                                let v1794 = constructor_output_reg(ctx, v1793);
                                                                let v1795 = Some(v1794);
                                                                // Rule at src\isa\s390x\lower.isle line 2195.
                                                                return v1795;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        0x3333_u16 => {
                            let v1588 = C::u64_pair_split(ctx, v1571.0);
                            let v1591 = C::u32_pair_split(ctx, v1588.0);
                            let v1594 = C::u16_pair_split(ctx, v1591.0);
                            let v1600 = C::u8_pair_split(ctx, v1594.1);
                            match v1600.0 {
                                0x0_u8 => {
                                    if v1600.1 == 0x1_u8 {
                                        let v1603 = C::u16_pair_split(ctx, v1591.1);
                                        let v1609 = C::u8_pair_split(ctx, v1603.1);
                                        if v1609.0 == 0x2_u8 {
                                            if v1609.1 == 0x3_u8 {
                                                let v1612 = C::u32_pair_split(ctx, v1588.1);
                                                let v1615 = C::u16_pair_split(ctx, v1612.0);
                                                let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                if v1621.0 == 0x4_u8 {
                                                    if v1621.1 == 0x5_u8 {
                                                        let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                        let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                        if v1630.0 == 0x6_u8 {
                                                            if v1630.1 == 0x7_u8 {
                                                                let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                let v1582 = C::put_in_reg(ctx, v1566.0);
                                                                let v1769 = constructor_vec_unpacku_high(ctx, I16X8, v1582);
                                                                let v1770 = constructor_output_reg(ctx, v1769);
                                                                let v1771 = Some(v1770);
                                                                // Rule at src\isa\s390x\lower.isle line 2177.
                                                                return v1771;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x8_u8 => {
                                    if v1600.1 == 0x9_u8 {
                                        let v1603 = C::u16_pair_split(ctx, v1591.1);
                                        let v1609 = C::u8_pair_split(ctx, v1603.1);
                                        if v1609.0 == 0xa_u8 {
                                            if v1609.1 == 0xb_u8 {
                                                let v1612 = C::u32_pair_split(ctx, v1588.1);
                                                let v1615 = C::u16_pair_split(ctx, v1612.0);
                                                let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                if v1621.0 == 0xc_u8 {
                                                    if v1621.1 == 0xd_u8 {
                                                        let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                        let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                        if v1630.0 == 0xe_u8 {
                                                            if v1630.1 == 0xf_u8 {
                                                                let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                let v1582 = C::put_in_reg(ctx, v1566.0);
                                                                let v1787 = constructor_vec_unpacku_low(ctx, I16X8, v1582);
                                                                let v1788 = constructor_output_reg(ctx, v1787);
                                                                let v1789 = Some(v1788);
                                                                // Rule at src\isa\s390x\lower.isle line 2191.
                                                                return v1789;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x10_u8 => {
                                    if v1600.1 == 0x11_u8 {
                                        let v1603 = C::u16_pair_split(ctx, v1591.1);
                                        let v1609 = C::u8_pair_split(ctx, v1603.1);
                                        if v1609.0 == 0x12_u8 {
                                            if v1609.1 == 0x13_u8 {
                                                let v1612 = C::u32_pair_split(ctx, v1588.1);
                                                let v1615 = C::u16_pair_split(ctx, v1612.0);
                                                let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                if v1621.0 == 0x14_u8 {
                                                    if v1621.1 == 0x15_u8 {
                                                        let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                        let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                        if v1630.0 == 0x16_u8 {
                                                            if v1630.1 == 0x17_u8 {
                                                                let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                let v1645 = C::put_in_reg(ctx, v1566.1);
                                                                let v1778 = constructor_vec_unpacku_high(ctx, I16X8, v1645);
                                                                let v1779 = constructor_output_reg(ctx, v1778);
                                                                let v1780 = Some(v1779);
                                                                // Rule at src\isa\s390x\lower.isle line 2183.
                                                                return v1780;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x18_u8 => {
                                    if v1600.1 == 0x19_u8 {
                                        let v1603 = C::u16_pair_split(ctx, v1591.1);
                                        let v1609 = C::u8_pair_split(ctx, v1603.1);
                                        if v1609.0 == 0x1a_u8 {
                                            if v1609.1 == 0x1b_u8 {
                                                let v1612 = C::u32_pair_split(ctx, v1588.1);
                                                let v1615 = C::u16_pair_split(ctx, v1612.0);
                                                let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                if v1621.0 == 0x1c_u8 {
                                                    if v1621.1 == 0x1d_u8 {
                                                        let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                        let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                        if v1630.0 == 0x1e_u8 {
                                                            if v1630.1 == 0x1f_u8 {
                                                                let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                let v1645 = C::put_in_reg(ctx, v1566.1);
                                                                let v1796 = constructor_vec_unpacku_low(ctx, I16X8, v1645);
                                                                let v1797 = constructor_output_reg(ctx, v1796);
                                                                let v1798 = Some(v1797);
                                                                // Rule at src\isa\s390x\lower.isle line 2197.
                                                                return v1798;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        0x5555_u16 => {
                            let v1588 = C::u64_pair_split(ctx, v1571.0);
                            let v1591 = C::u32_pair_split(ctx, v1588.0);
                            let v1594 = C::u16_pair_split(ctx, v1591.0);
                            let v1597 = C::u8_pair_split(ctx, v1594.0);
                            match v1597.1 {
                                0x0_u8 => {
                                    let v1600 = C::u8_pair_split(ctx, v1594.1);
                                    if v1600.1 == 0x1_u8 {
                                        let v1603 = C::u16_pair_split(ctx, v1591.1);
                                        let v1606 = C::u8_pair_split(ctx, v1603.0);
                                        if v1606.1 == 0x2_u8 {
                                            let v1609 = C::u8_pair_split(ctx, v1603.1);
                                            if v1609.1 == 0x3_u8 {
                                                let v1612 = C::u32_pair_split(ctx, v1588.1);
                                                let v1615 = C::u16_pair_split(ctx, v1612.0);
                                                let v1618 = C::u8_pair_split(ctx, v1615.0);
                                                if v1618.1 == 0x4_u8 {
                                                    let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                    if v1621.1 == 0x5_u8 {
                                                        let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                        let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                        if v1627.1 == 0x6_u8 {
                                                            let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                            if v1630.1 == 0x7_u8 {
                                                                let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                let v1582 = C::put_in_reg(ctx, v1566.0);
                                                                let v1772 = constructor_vec_unpacku_high(ctx, I8X16, v1582);
                                                                let v1773 = constructor_output_reg(ctx, v1772);
                                                                let v1774 = Some(v1773);
                                                                // Rule at src\isa\s390x\lower.isle line 2179.
                                                                return v1774;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x8_u8 => {
                                    let v1600 = C::u8_pair_split(ctx, v1594.1);
                                    if v1600.1 == 0x9_u8 {
                                        let v1603 = C::u16_pair_split(ctx, v1591.1);
                                        let v1606 = C::u8_pair_split(ctx, v1603.0);
                                        if v1606.1 == 0xa_u8 {
                                            let v1609 = C::u8_pair_split(ctx, v1603.1);
                                            if v1609.1 == 0xb_u8 {
                                                let v1612 = C::u32_pair_split(ctx, v1588.1);
                                                let v1615 = C::u16_pair_split(ctx, v1612.0);
                                                let v1618 = C::u8_pair_split(ctx, v1615.0);
                                                if v1618.1 == 0xc_u8 {
                                                    let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                    if v1621.1 == 0xd_u8 {
                                                        let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                        let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                        if v1627.1 == 0xe_u8 {
                                                            let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                            if v1630.1 == 0xf_u8 {
                                                                let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                let v1582 = C::put_in_reg(ctx, v1566.0);
                                                                let v1790 = constructor_vec_unpacku_low(ctx, I8X16, v1582);
                                                                let v1791 = constructor_output_reg(ctx, v1790);
                                                                let v1792 = Some(v1791);
                                                                // Rule at src\isa\s390x\lower.isle line 2193.
                                                                return v1792;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x10_u8 => {
                                    let v1600 = C::u8_pair_split(ctx, v1594.1);
                                    if v1600.1 == 0x11_u8 {
                                        let v1603 = C::u16_pair_split(ctx, v1591.1);
                                        let v1606 = C::u8_pair_split(ctx, v1603.0);
                                        if v1606.1 == 0x12_u8 {
                                            let v1609 = C::u8_pair_split(ctx, v1603.1);
                                            if v1609.1 == 0x13_u8 {
                                                let v1612 = C::u32_pair_split(ctx, v1588.1);
                                                let v1615 = C::u16_pair_split(ctx, v1612.0);
                                                let v1618 = C::u8_pair_split(ctx, v1615.0);
                                                if v1618.1 == 0x14_u8 {
                                                    let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                    if v1621.1 == 0x15_u8 {
                                                        let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                        let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                        if v1627.1 == 0x16_u8 {
                                                            let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                            if v1630.1 == 0x17_u8 {
                                                                let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                let v1645 = C::put_in_reg(ctx, v1566.1);
                                                                let v1781 = constructor_vec_unpacku_high(ctx, I8X16, v1645);
                                                                let v1782 = constructor_output_reg(ctx, v1781);
                                                                let v1783 = Some(v1782);
                                                                // Rule at src\isa\s390x\lower.isle line 2185.
                                                                return v1783;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x18_u8 => {
                                    let v1600 = C::u8_pair_split(ctx, v1594.1);
                                    if v1600.1 == 0x19_u8 {
                                        let v1603 = C::u16_pair_split(ctx, v1591.1);
                                        let v1606 = C::u8_pair_split(ctx, v1603.0);
                                        if v1606.1 == 0x1a_u8 {
                                            let v1609 = C::u8_pair_split(ctx, v1603.1);
                                            if v1609.1 == 0x1b_u8 {
                                                let v1612 = C::u32_pair_split(ctx, v1588.1);
                                                let v1615 = C::u16_pair_split(ctx, v1612.0);
                                                let v1618 = C::u8_pair_split(ctx, v1615.0);
                                                if v1618.1 == 0x1c_u8 {
                                                    let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                    if v1621.1 == 0x1d_u8 {
                                                        let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                        let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                        if v1627.1 == 0x1e_u8 {
                                                            let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                            if v1630.1 == 0x1f_u8 {
                                                                let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                let v1645 = C::put_in_reg(ctx, v1566.1);
                                                                let v1799 = constructor_vec_unpacku_low(ctx, I8X16, v1645);
                                                                let v1800 = constructor_output_reg(ctx, v1799);
                                                                let v1801 = Some(v1800);
                                                                // Rule at src\isa\s390x\lower.isle line 2199.
                                                                return v1801;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        0xffff_u16 => {
                            let v1588 = C::u64_pair_split(ctx, v1571.0);
                            let v1591 = C::u32_pair_split(ctx, v1588.0);
                            let v1594 = C::u16_pair_split(ctx, v1591.0);
                            let v1597 = C::u8_pair_split(ctx, v1594.0);
                            match v1597.0 {
                                0x0_u8 => {
                                    match v1597.1 {
                                        0x0_u8 => {
                                            let v1600 = C::u8_pair_split(ctx, v1594.1);
                                            if v1600.0 == 0x1_u8 {
                                                if v1600.1 == 0x1_u8 {
                                                    let v1603 = C::u16_pair_split(ctx, v1591.1);
                                                    let v1606 = C::u8_pair_split(ctx, v1603.0);
                                                    if v1606.0 == 0x2_u8 {
                                                        if v1606.1 == 0x2_u8 {
                                                            let v1609 = C::u8_pair_split(ctx, v1603.1);
                                                            if v1609.0 == 0x3_u8 {
                                                                if v1609.1 == 0x3_u8 {
                                                                    let v1612 = C::u32_pair_split(ctx, v1588.1);
                                                                    let v1615 = C::u16_pair_split(ctx, v1612.0);
                                                                    let v1618 = C::u8_pair_split(ctx, v1615.0);
                                                                    if v1618.0 == 0x4_u8 {
                                                                        if v1618.1 == 0x4_u8 {
                                                                            let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                                            if v1621.0 == 0x5_u8 {
                                                                                if v1621.1 == 0x5_u8 {
                                                                                    let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                                                    let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                                                    if v1627.0 == 0x6_u8 {
                                                                                        if v1627.1 == 0x6_u8 {
                                                                                            let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                                                            if v1630.0 == 0x7_u8 {
                                                                                                if v1630.1 == 0x7_u8 {
                                                                                                    let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                                                    let v1582 = C::put_in_reg(ctx, v1566.0);
                                                                                                    let v1575 = C::put_in_reg(ctx, v1566.0);
                                                                                                    let v1667 = constructor_vec_merge_high(ctx, I8X16, v1582, v1575);
                                                                                                    let v1668 = constructor_output_reg(ctx, v1667);
                                                                                                    let v1669 = Some(v1668);
                                                                                                    // Rule at src\isa\s390x\lower.isle line 2103.
                                                                                                    return v1669;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        0x1_u8 => {
                                            let v1600 = C::u8_pair_split(ctx, v1594.1);
                                            match v1600.0 {
                                                0x0_u8 => {
                                                    if v1600.1 == 0x1_u8 {
                                                        let v1603 = C::u16_pair_split(ctx, v1591.1);
                                                        let v1606 = C::u8_pair_split(ctx, v1603.0);
                                                        if v1606.0 == 0x2_u8 {
                                                            if v1606.1 == 0x3_u8 {
                                                                let v1609 = C::u8_pair_split(ctx, v1603.1);
                                                                if v1609.0 == 0x2_u8 {
                                                                    if v1609.1 == 0x3_u8 {
                                                                        let v1612 = C::u32_pair_split(ctx, v1588.1);
                                                                        let v1615 = C::u16_pair_split(ctx, v1612.0);
                                                                        let v1618 = C::u8_pair_split(ctx, v1615.0);
                                                                        if v1618.0 == 0x4_u8 {
                                                                            if v1618.1 == 0x5_u8 {
                                                                                let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                                                if v1621.0 == 0x4_u8 {
                                                                                    if v1621.1 == 0x5_u8 {
                                                                                        let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                                                        let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                                                        if v1627.0 == 0x6_u8 {
                                                                                            if v1627.1 == 0x7_u8 {
                                                                                                let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                                                                if v1630.0 == 0x6_u8 {
                                                                                                    if v1630.1 == 0x7_u8 {
                                                                                                        let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                                                        let v1582 = C::put_in_reg(ctx, v1566.0);
                                                                                                        let v1575 = C::put_in_reg(ctx, v1566.0);
                                                                                                        let v1664 = constructor_vec_merge_high(ctx, I16X8, v1582, v1575);
                                                                                                        let v1665 = constructor_output_reg(ctx, v1664);
                                                                                                        let v1666 = Some(v1665);
                                                                                                        // Rule at src\isa\s390x\lower.isle line 2101.
                                                                                                        return v1666;
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                0x2_u8 => {
                                                    if v1600.1 == 0x3_u8 {
                                                        let v1603 = C::u16_pair_split(ctx, v1591.1);
                                                        let v1606 = C::u8_pair_split(ctx, v1603.0);
                                                        match v1606.0 {
                                                            0x0_u8 => {
                                                                if v1606.1 == 0x1_u8 {
                                                                    let v1609 = C::u8_pair_split(ctx, v1603.1);
                                                                    if v1609.0 == 0x2_u8 {
                                                                        if v1609.1 == 0x3_u8 {
                                                                            let v1612 = C::u32_pair_split(ctx, v1588.1);
                                                                            let v1615 = C::u16_pair_split(ctx, v1612.0);
                                                                            let v1618 = C::u8_pair_split(ctx, v1615.0);
                                                                            if v1618.0 == 0x4_u8 {
                                                                                if v1618.1 == 0x5_u8 {
                                                                                    let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                                                    if v1621.0 == 0x6_u8 {
                                                                                        if v1621.1 == 0x7_u8 {
                                                                                            let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                                                            let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                                                            if v1627.0 == 0x4_u8 {
                                                                                                if v1627.1 == 0x5_u8 {
                                                                                                    let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                                                                    if v1630.0 == 0x6_u8 {
                                                                                                        if v1630.1 == 0x7_u8 {
                                                                                                            let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                                                            let v1582 = C::put_in_reg(ctx, v1566.0);
                                                                                                            let v1575 = C::put_in_reg(ctx, v1566.0);
                                                                                                            let v1661 = constructor_vec_merge_high(ctx, I32X4, v1582, v1575);
                                                                                                            let v1662 = constructor_output_reg(ctx, v1661);
                                                                                                            let v1663 = Some(v1662);
                                                                                                            // Rule at src\isa\s390x\lower.isle line 2099.
                                                                                                            return v1663;
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0x4_u8 => {
                                                                if v1606.1 == 0x5_u8 {
                                                                    let v1609 = C::u8_pair_split(ctx, v1603.1);
                                                                    if v1609.0 == 0x6_u8 {
                                                                        if v1609.1 == 0x7_u8 {
                                                                            let v1612 = C::u32_pair_split(ctx, v1588.1);
                                                                            let v1615 = C::u16_pair_split(ctx, v1612.0);
                                                                            let v1618 = C::u8_pair_split(ctx, v1615.0);
                                                                            match v1618.0 {
                                                                                0x0_u8 => {
                                                                                    if v1618.1 == 0x1_u8 {
                                                                                        let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                                                        if v1621.0 == 0x2_u8 {
                                                                                            if v1621.1 == 0x3_u8 {
                                                                                                let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                                                                let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                                                                if v1627.0 == 0x4_u8 {
                                                                                                    if v1627.1 == 0x5_u8 {
                                                                                                        let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                                                                        if v1630.0 == 0x6_u8 {
                                                                                                            if v1630.1 == 0x7_u8 {
                                                                                                                let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                                                                let v1582 = C::put_in_reg(ctx, v1566.0);
                                                                                                                let v1575 = C::put_in_reg(ctx, v1566.0);
                                                                                                                let v1658 = constructor_vec_merge_high(ctx, I64X2, v1582, v1575);
                                                                                                                let v1659 = constructor_output_reg(ctx, v1658);
                                                                                                                let v1660 = Some(v1659);
                                                                                                                // Rule at src\isa\s390x\lower.isle line 2097.
                                                                                                                return v1660;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x8_u8 => {
                                                                                    if v1618.1 == 0x9_u8 {
                                                                                        let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                                                        if v1621.0 == 0xa_u8 {
                                                                                            if v1621.1 == 0xb_u8 {
                                                                                                let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                                                                let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                                                                if v1627.0 == 0xc_u8 {
                                                                                                    if v1627.1 == 0xd_u8 {
                                                                                                        let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                                                                        if v1630.0 == 0xe_u8 {
                                                                                                            if v1630.1 == 0xf_u8 {
                                                                                                                let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                                                                let v1582 = C::put_in_reg(ctx, v1566.0);
                                                                                                                let v1575 = C::put_in_reg(ctx, v1566.0);
                                                                                                                let v1814 = constructor_vec_permute_dw_imm(ctx, I8X16, v1582, 0x0_u8, v1575, 0x1_u8);
                                                                                                                let v1815 = constructor_output_reg(ctx, v1814);
                                                                                                                let v1816 = Some(v1815);
                                                                                                                // Rule at src\isa\s390x\lower.isle line 2211.
                                                                                                                return v1816;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x10_u8 => {
                                                                                    if v1618.1 == 0x11_u8 {
                                                                                        let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                                                        if v1621.0 == 0x12_u8 {
                                                                                            if v1621.1 == 0x13_u8 {
                                                                                                let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                                                                let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                                                                if v1627.0 == 0x14_u8 {
                                                                                                    if v1627.1 == 0x15_u8 {
                                                                                                        let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                                                                        if v1630.0 == 0x16_u8 {
                                                                                                            if v1630.1 == 0x17_u8 {
                                                                                                                let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                                                                let v1582 = C::put_in_reg(ctx, v1566.0);
                                                                                                                let v1583 = C::put_in_reg(ctx, v1566.1);
                                                                                                                let v1633 = constructor_vec_merge_high(ctx, I64X2, v1582, v1583);
                                                                                                                let v1634 = constructor_output_reg(ctx, v1633);
                                                                                                                let v1635 = Some(v1634);
                                                                                                                // Rule at src\isa\s390x\lower.isle line 2081.
                                                                                                                return v1635;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x18_u8 => {
                                                                                    if v1618.1 == 0x19_u8 {
                                                                                        let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                                                        if v1621.0 == 0x1a_u8 {
                                                                                            if v1621.1 == 0x1b_u8 {
                                                                                                let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                                                                let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                                                                if v1627.0 == 0x1c_u8 {
                                                                                                    if v1627.1 == 0x1d_u8 {
                                                                                                        let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                                                                        if v1630.0 == 0x1e_u8 {
                                                                                                            if v1630.1 == 0x1f_u8 {
                                                                                                                let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                                                                let v1582 = C::put_in_reg(ctx, v1566.0);
                                                                                                                let v1583 = C::put_in_reg(ctx, v1566.1);
                                                                                                                let v1802 = constructor_vec_permute_dw_imm(ctx, I8X16, v1582, 0x0_u8, v1583, 0x1_u8);
                                                                                                                let v1803 = constructor_output_reg(ctx, v1802);
                                                                                                                let v1804 = Some(v1803);
                                                                                                                // Rule at src\isa\s390x\lower.isle line 2203.
                                                                                                                return v1804;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                _ => {}
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0x10_u8 => {
                                                                if v1606.1 == 0x11_u8 {
                                                                    let v1609 = C::u8_pair_split(ctx, v1603.1);
                                                                    if v1609.0 == 0x12_u8 {
                                                                        if v1609.1 == 0x13_u8 {
                                                                            let v1612 = C::u32_pair_split(ctx, v1588.1);
                                                                            let v1615 = C::u16_pair_split(ctx, v1612.0);
                                                                            let v1618 = C::u8_pair_split(ctx, v1615.0);
                                                                            if v1618.0 == 0x4_u8 {
                                                                                if v1618.1 == 0x5_u8 {
                                                                                    let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                                                    if v1621.0 == 0x6_u8 {
                                                                                        if v1621.1 == 0x7_u8 {
                                                                                            let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                                                            let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                                                            if v1627.0 == 0x14_u8 {
                                                                                                if v1627.1 == 0x15_u8 {
                                                                                                    let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                                                                    if v1630.0 == 0x16_u8 {
                                                                                                        if v1630.1 == 0x17_u8 {
                                                                                                            let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                                                            let v1582 = C::put_in_reg(ctx, v1566.0);
                                                                                                            let v1583 = C::put_in_reg(ctx, v1566.1);
                                                                                                            let v1636 = constructor_vec_merge_high(ctx, I32X4, v1582, v1583);
                                                                                                            let v1637 = constructor_output_reg(ctx, v1636);
                                                                                                            let v1638 = Some(v1637);
                                                                                                            // Rule at src\isa\s390x\lower.isle line 2083.
                                                                                                            return v1638;
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                0x10_u8 => {
                                                    if v1600.1 == 0x11_u8 {
                                                        let v1603 = C::u16_pair_split(ctx, v1591.1);
                                                        let v1606 = C::u8_pair_split(ctx, v1603.0);
                                                        if v1606.0 == 0x2_u8 {
                                                            if v1606.1 == 0x3_u8 {
                                                                let v1609 = C::u8_pair_split(ctx, v1603.1);
                                                                if v1609.0 == 0x12_u8 {
                                                                    if v1609.1 == 0x13_u8 {
                                                                        let v1612 = C::u32_pair_split(ctx, v1588.1);
                                                                        let v1615 = C::u16_pair_split(ctx, v1612.0);
                                                                        let v1618 = C::u8_pair_split(ctx, v1615.0);
                                                                        if v1618.0 == 0x4_u8 {
                                                                            if v1618.1 == 0x5_u8 {
                                                                                let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                                                if v1621.0 == 0x14_u8 {
                                                                                    if v1621.1 == 0x15_u8 {
                                                                                        let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                                                        let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                                                        if v1627.0 == 0x6_u8 {
                                                                                            if v1627.1 == 0x7_u8 {
                                                                                                let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                                                                if v1630.0 == 0x16_u8 {
                                                                                                    if v1630.1 == 0x17_u8 {
                                                                                                        let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                                                        let v1582 = C::put_in_reg(ctx, v1566.0);
                                                                                                        let v1583 = C::put_in_reg(ctx, v1566.1);
                                                                                                        let v1639 = constructor_vec_merge_high(ctx, I16X8, v1582, v1583);
                                                                                                        let v1640 = constructor_output_reg(ctx, v1639);
                                                                                                        let v1641 = Some(v1640);
                                                                                                        // Rule at src\isa\s390x\lower.isle line 2085.
                                                                                                        return v1641;
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                        0x10_u8 => {
                                            let v1600 = C::u8_pair_split(ctx, v1594.1);
                                            if v1600.0 == 0x1_u8 {
                                                if v1600.1 == 0x11_u8 {
                                                    let v1603 = C::u16_pair_split(ctx, v1591.1);
                                                    let v1606 = C::u8_pair_split(ctx, v1603.0);
                                                    if v1606.0 == 0x2_u8 {
                                                        if v1606.1 == 0x12_u8 {
                                                            let v1609 = C::u8_pair_split(ctx, v1603.1);
                                                            if v1609.0 == 0x3_u8 {
                                                                if v1609.1 == 0x13_u8 {
                                                                    let v1612 = C::u32_pair_split(ctx, v1588.1);
                                                                    let v1615 = C::u16_pair_split(ctx, v1612.0);
                                                                    let v1618 = C::u8_pair_split(ctx, v1615.0);
                                                                    if v1618.0 == 0x4_u8 {
                                                                        if v1618.1 == 0x14_u8 {
                                                                            let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                                            if v1621.0 == 0x5_u8 {
                                                                                if v1621.1 == 0x15_u8 {
                                                                                    let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                                                    let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                                                    if v1627.0 == 0x6_u8 {
                                                                                        if v1627.1 == 0x16_u8 {
                                                                                            let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                                                            if v1630.0 == 0x7_u8 {
                                                                                                if v1630.1 == 0x17_u8 {
                                                                                                    let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                                                    let v1582 = C::put_in_reg(ctx, v1566.0);
                                                                                                    let v1583 = C::put_in_reg(ctx, v1566.1);
                                                                                                    let v1642 = constructor_vec_merge_high(ctx, I8X16, v1582, v1583);
                                                                                                    let v1643 = constructor_output_reg(ctx, v1642);
                                                                                                    let v1644 = Some(v1643);
                                                                                                    // Rule at src\isa\s390x\lower.isle line 2087.
                                                                                                    return v1644;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                0x1_u8 => {
                                    if v1597.1 == 0x3_u8 {
                                        let v1600 = C::u8_pair_split(ctx, v1594.1);
                                        if v1600.0 == 0x5_u8 {
                                            if v1600.1 == 0x7_u8 {
                                                let v1603 = C::u16_pair_split(ctx, v1591.1);
                                                let v1606 = C::u8_pair_split(ctx, v1603.0);
                                                if v1606.0 == 0x9_u8 {
                                                    if v1606.1 == 0xb_u8 {
                                                        let v1609 = C::u8_pair_split(ctx, v1603.1);
                                                        if v1609.0 == 0xd_u8 {
                                                            if v1609.1 == 0xf_u8 {
                                                                let v1612 = C::u32_pair_split(ctx, v1588.1);
                                                                let v1615 = C::u16_pair_split(ctx, v1612.0);
                                                                let v1618 = C::u8_pair_split(ctx, v1615.0);
                                                                match v1618.0 {
                                                                    0x1_u8 => {
                                                                        if v1618.1 == 0x3_u8 {
                                                                            let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                                            if v1621.0 == 0x5_u8 {
                                                                                if v1621.1 == 0x7_u8 {
                                                                                    let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                                                    let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                                                    if v1627.0 == 0x9_u8 {
                                                                                        if v1627.1 == 0xb_u8 {
                                                                                            let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                                                            if v1630.0 == 0xd_u8 {
                                                                                                if v1630.1 == 0xf_u8 {
                                                                                                    let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                                                    let v1582 = C::put_in_reg(ctx, v1566.0);
                                                                                                    let v1575 = C::put_in_reg(ctx, v1566.0);
                                                                                                    let v1754 = constructor_vec_pack(ctx, I16X8, v1582, v1575);
                                                                                                    let v1755 = constructor_output_reg(ctx, v1754);
                                                                                                    let v1756 = Some(v1755);
                                                                                                    // Rule at src\isa\s390x\lower.isle line 2165.
                                                                                                    return v1756;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    0x11_u8 => {
                                                                        if v1618.1 == 0x13_u8 {
                                                                            let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                                            if v1621.0 == 0x15_u8 {
                                                                                if v1621.1 == 0x17_u8 {
                                                                                    let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                                                    let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                                                    if v1627.0 == 0x19_u8 {
                                                                                        if v1627.1 == 0x1b_u8 {
                                                                                            let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                                                            if v1630.0 == 0x1d_u8 {
                                                                                                if v1630.1 == 0x1f_u8 {
                                                                                                    let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                                                    let v1582 = C::put_in_reg(ctx, v1566.0);
                                                                                                    let v1583 = C::put_in_reg(ctx, v1566.1);
                                                                                                    let v1736 = constructor_vec_pack(ctx, I16X8, v1582, v1583);
                                                                                                    let v1737 = constructor_output_reg(ctx, v1736);
                                                                                                    let v1738 = Some(v1737);
                                                                                                    // Rule at src\isa\s390x\lower.isle line 2153.
                                                                                                    return v1738;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    _ => {}
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x2_u8 => {
                                    if v1597.1 == 0x3_u8 {
                                        let v1600 = C::u8_pair_split(ctx, v1594.1);
                                        if v1600.0 == 0x6_u8 {
                                            if v1600.1 == 0x7_u8 {
                                                let v1603 = C::u16_pair_split(ctx, v1591.1);
                                                let v1606 = C::u8_pair_split(ctx, v1603.0);
                                                if v1606.0 == 0xa_u8 {
                                                    if v1606.1 == 0xb_u8 {
                                                        let v1609 = C::u8_pair_split(ctx, v1603.1);
                                                        if v1609.0 == 0xe_u8 {
                                                            if v1609.1 == 0xf_u8 {
                                                                let v1612 = C::u32_pair_split(ctx, v1588.1);
                                                                let v1615 = C::u16_pair_split(ctx, v1612.0);
                                                                let v1618 = C::u8_pair_split(ctx, v1615.0);
                                                                match v1618.0 {
                                                                    0x2_u8 => {
                                                                        if v1618.1 == 0x3_u8 {
                                                                            let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                                            if v1621.0 == 0x6_u8 {
                                                                                if v1621.1 == 0x7_u8 {
                                                                                    let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                                                    let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                                                    if v1627.0 == 0xa_u8 {
                                                                                        if v1627.1 == 0xb_u8 {
                                                                                            let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                                                            if v1630.0 == 0xe_u8 {
                                                                                                if v1630.1 == 0xf_u8 {
                                                                                                    let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                                                    let v1582 = C::put_in_reg(ctx, v1566.0);
                                                                                                    let v1575 = C::put_in_reg(ctx, v1566.0);
                                                                                                    let v1751 = constructor_vec_pack(ctx, I32X4, v1582, v1575);
                                                                                                    let v1752 = constructor_output_reg(ctx, v1751);
                                                                                                    let v1753 = Some(v1752);
                                                                                                    // Rule at src\isa\s390x\lower.isle line 2163.
                                                                                                    return v1753;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    0x12_u8 => {
                                                                        if v1618.1 == 0x13_u8 {
                                                                            let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                                            if v1621.0 == 0x16_u8 {
                                                                                if v1621.1 == 0x17_u8 {
                                                                                    let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                                                    let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                                                    if v1627.0 == 0x1a_u8 {
                                                                                        if v1627.1 == 0x1b_u8 {
                                                                                            let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                                                            if v1630.0 == 0x1e_u8 {
                                                                                                if v1630.1 == 0x1f_u8 {
                                                                                                    let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                                                    let v1582 = C::put_in_reg(ctx, v1566.0);
                                                                                                    let v1583 = C::put_in_reg(ctx, v1566.1);
                                                                                                    let v1733 = constructor_vec_pack(ctx, I32X4, v1582, v1583);
                                                                                                    let v1734 = constructor_output_reg(ctx, v1733);
                                                                                                    let v1735 = Some(v1734);
                                                                                                    // Rule at src\isa\s390x\lower.isle line 2151.
                                                                                                    return v1735;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    _ => {}
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x4_u8 => {
                                    if v1597.1 == 0x5_u8 {
                                        let v1600 = C::u8_pair_split(ctx, v1594.1);
                                        if v1600.0 == 0x6_u8 {
                                            if v1600.1 == 0x7_u8 {
                                                let v1603 = C::u16_pair_split(ctx, v1591.1);
                                                let v1606 = C::u8_pair_split(ctx, v1603.0);
                                                if v1606.0 == 0xc_u8 {
                                                    if v1606.1 == 0xd_u8 {
                                                        let v1609 = C::u8_pair_split(ctx, v1603.1);
                                                        if v1609.0 == 0xe_u8 {
                                                            if v1609.1 == 0xf_u8 {
                                                                let v1612 = C::u32_pair_split(ctx, v1588.1);
                                                                let v1615 = C::u16_pair_split(ctx, v1612.0);
                                                                let v1618 = C::u8_pair_split(ctx, v1615.0);
                                                                match v1618.0 {
                                                                    0x4_u8 => {
                                                                        if v1618.1 == 0x5_u8 {
                                                                            let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                                            if v1621.0 == 0x6_u8 {
                                                                                if v1621.1 == 0x7_u8 {
                                                                                    let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                                                    let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                                                    if v1627.0 == 0xc_u8 {
                                                                                        if v1627.1 == 0xd_u8 {
                                                                                            let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                                                            if v1630.0 == 0xe_u8 {
                                                                                                if v1630.1 == 0xf_u8 {
                                                                                                    let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                                                    let v1582 = C::put_in_reg(ctx, v1566.0);
                                                                                                    let v1575 = C::put_in_reg(ctx, v1566.0);
                                                                                                    let v1748 = constructor_vec_pack(ctx, I64X2, v1582, v1575);
                                                                                                    let v1749 = constructor_output_reg(ctx, v1748);
                                                                                                    let v1750 = Some(v1749);
                                                                                                    // Rule at src\isa\s390x\lower.isle line 2161.
                                                                                                    return v1750;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    0x14_u8 => {
                                                                        if v1618.1 == 0x15_u8 {
                                                                            let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                                            if v1621.0 == 0x16_u8 {
                                                                                if v1621.1 == 0x17_u8 {
                                                                                    let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                                                    let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                                                    if v1627.0 == 0x1c_u8 {
                                                                                        if v1627.1 == 0x1d_u8 {
                                                                                            let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                                                            if v1630.0 == 0x1e_u8 {
                                                                                                if v1630.1 == 0x1f_u8 {
                                                                                                    let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                                                    let v1582 = C::put_in_reg(ctx, v1566.0);
                                                                                                    let v1583 = C::put_in_reg(ctx, v1566.1);
                                                                                                    let v1730 = constructor_vec_pack(ctx, I64X2, v1582, v1583);
                                                                                                    let v1731 = constructor_output_reg(ctx, v1730);
                                                                                                    let v1732 = Some(v1731);
                                                                                                    // Rule at src\isa\s390x\lower.isle line 2149.
                                                                                                    return v1732;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    _ => {}
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x8_u8 => {
                                    match v1597.1 {
                                        0x8_u8 => {
                                            let v1600 = C::u8_pair_split(ctx, v1594.1);
                                            if v1600.0 == 0x9_u8 {
                                                if v1600.1 == 0x9_u8 {
                                                    let v1603 = C::u16_pair_split(ctx, v1591.1);
                                                    let v1606 = C::u8_pair_split(ctx, v1603.0);
                                                    if v1606.0 == 0xa_u8 {
                                                        if v1606.1 == 0xa_u8 {
                                                            let v1609 = C::u8_pair_split(ctx, v1603.1);
                                                            if v1609.0 == 0xb_u8 {
                                                                if v1609.1 == 0xb_u8 {
                                                                    let v1612 = C::u32_pair_split(ctx, v1588.1);
                                                                    let v1615 = C::u16_pair_split(ctx, v1612.0);
                                                                    let v1618 = C::u8_pair_split(ctx, v1615.0);
                                                                    if v1618.0 == 0xc_u8 {
                                                                        if v1618.1 == 0xc_u8 {
                                                                            let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                                            if v1621.0 == 0xd_u8 {
                                                                                if v1621.1 == 0xd_u8 {
                                                                                    let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                                                    let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                                                    if v1627.0 == 0xe_u8 {
                                                                                        if v1627.1 == 0xe_u8 {
                                                                                            let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                                                            if v1630.0 == 0xf_u8 {
                                                                                                if v1630.1 == 0xf_u8 {
                                                                                                    let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                                                    let v1582 = C::put_in_reg(ctx, v1566.0);
                                                                                                    let v1575 = C::put_in_reg(ctx, v1566.0);
                                                                                                    let v1715 = constructor_vec_merge_low(ctx, I8X16, v1582, v1575);
                                                                                                    let v1716 = constructor_output_reg(ctx, v1715);
                                                                                                    let v1717 = Some(v1716);
                                                                                                    // Rule at src\isa\s390x\lower.isle line 2137.
                                                                                                    return v1717;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        0x9_u8 => {
                                            let v1600 = C::u8_pair_split(ctx, v1594.1);
                                            match v1600.0 {
                                                0x8_u8 => {
                                                    if v1600.1 == 0x9_u8 {
                                                        let v1603 = C::u16_pair_split(ctx, v1591.1);
                                                        let v1606 = C::u8_pair_split(ctx, v1603.0);
                                                        if v1606.0 == 0xa_u8 {
                                                            if v1606.1 == 0xb_u8 {
                                                                let v1609 = C::u8_pair_split(ctx, v1603.1);
                                                                if v1609.0 == 0xa_u8 {
                                                                    if v1609.1 == 0xb_u8 {
                                                                        let v1612 = C::u32_pair_split(ctx, v1588.1);
                                                                        let v1615 = C::u16_pair_split(ctx, v1612.0);
                                                                        let v1618 = C::u8_pair_split(ctx, v1615.0);
                                                                        if v1618.0 == 0xc_u8 {
                                                                            if v1618.1 == 0xd_u8 {
                                                                                let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                                                if v1621.0 == 0xc_u8 {
                                                                                    if v1621.1 == 0xd_u8 {
                                                                                        let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                                                        let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                                                        if v1627.0 == 0xe_u8 {
                                                                                            if v1627.1 == 0xf_u8 {
                                                                                                let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                                                                if v1630.0 == 0xe_u8 {
                                                                                                    if v1630.1 == 0xf_u8 {
                                                                                                        let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                                                        let v1582 = C::put_in_reg(ctx, v1566.0);
                                                                                                        let v1575 = C::put_in_reg(ctx, v1566.0);
                                                                                                        let v1712 = constructor_vec_merge_low(ctx, I16X8, v1582, v1575);
                                                                                                        let v1713 = constructor_output_reg(ctx, v1712);
                                                                                                        let v1714 = Some(v1713);
                                                                                                        // Rule at src\isa\s390x\lower.isle line 2135.
                                                                                                        return v1714;
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                0xa_u8 => {
                                                    if v1600.1 == 0xb_u8 {
                                                        let v1603 = C::u16_pair_split(ctx, v1591.1);
                                                        let v1606 = C::u8_pair_split(ctx, v1603.0);
                                                        match v1606.0 {
                                                            0x8_u8 => {
                                                                if v1606.1 == 0x9_u8 {
                                                                    let v1609 = C::u8_pair_split(ctx, v1603.1);
                                                                    if v1609.0 == 0xa_u8 {
                                                                        if v1609.1 == 0xb_u8 {
                                                                            let v1612 = C::u32_pair_split(ctx, v1588.1);
                                                                            let v1615 = C::u16_pair_split(ctx, v1612.0);
                                                                            let v1618 = C::u8_pair_split(ctx, v1615.0);
                                                                            if v1618.0 == 0xc_u8 {
                                                                                if v1618.1 == 0xd_u8 {
                                                                                    let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                                                    if v1621.0 == 0xe_u8 {
                                                                                        if v1621.1 == 0xf_u8 {
                                                                                            let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                                                            let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                                                            if v1627.0 == 0xc_u8 {
                                                                                                if v1627.1 == 0xd_u8 {
                                                                                                    let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                                                                    if v1630.0 == 0xe_u8 {
                                                                                                        if v1630.1 == 0xf_u8 {
                                                                                                            let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                                                            let v1582 = C::put_in_reg(ctx, v1566.0);
                                                                                                            let v1575 = C::put_in_reg(ctx, v1566.0);
                                                                                                            let v1709 = constructor_vec_merge_low(ctx, I32X4, v1582, v1575);
                                                                                                            let v1710 = constructor_output_reg(ctx, v1709);
                                                                                                            let v1711 = Some(v1710);
                                                                                                            // Rule at src\isa\s390x\lower.isle line 2133.
                                                                                                            return v1711;
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0xc_u8 => {
                                                                if v1606.1 == 0xd_u8 {
                                                                    let v1609 = C::u8_pair_split(ctx, v1603.1);
                                                                    if v1609.0 == 0xe_u8 {
                                                                        if v1609.1 == 0xf_u8 {
                                                                            let v1612 = C::u32_pair_split(ctx, v1588.1);
                                                                            let v1615 = C::u16_pair_split(ctx, v1612.0);
                                                                            let v1618 = C::u8_pair_split(ctx, v1615.0);
                                                                            match v1618.0 {
                                                                                0x0_u8 => {
                                                                                    if v1618.1 == 0x1_u8 {
                                                                                        let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                                                        if v1621.0 == 0x2_u8 {
                                                                                            if v1621.1 == 0x3_u8 {
                                                                                                let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                                                                let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                                                                if v1627.0 == 0x4_u8 {
                                                                                                    if v1627.1 == 0x5_u8 {
                                                                                                        let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                                                                        if v1630.0 == 0x6_u8 {
                                                                                                            if v1630.1 == 0x7_u8 {
                                                                                                                let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                                                                let v1582 = C::put_in_reg(ctx, v1566.0);
                                                                                                                let v1575 = C::put_in_reg(ctx, v1566.0);
                                                                                                                let v1817 = constructor_vec_permute_dw_imm(ctx, I8X16, v1582, 0x1_u8, v1575, 0x0_u8);
                                                                                                                let v1818 = constructor_output_reg(ctx, v1817);
                                                                                                                let v1819 = Some(v1818);
                                                                                                                // Rule at src\isa\s390x\lower.isle line 2213.
                                                                                                                return v1819;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x8_u8 => {
                                                                                    if v1618.1 == 0x9_u8 {
                                                                                        let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                                                        if v1621.0 == 0xa_u8 {
                                                                                            if v1621.1 == 0xb_u8 {
                                                                                                let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                                                                let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                                                                if v1627.0 == 0xc_u8 {
                                                                                                    if v1627.1 == 0xd_u8 {
                                                                                                        let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                                                                        if v1630.0 == 0xe_u8 {
                                                                                                            if v1630.1 == 0xf_u8 {
                                                                                                                let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                                                                let v1582 = C::put_in_reg(ctx, v1566.0);
                                                                                                                let v1575 = C::put_in_reg(ctx, v1566.0);
                                                                                                                let v1706 = constructor_vec_merge_low(ctx, I64X2, v1582, v1575);
                                                                                                                let v1707 = constructor_output_reg(ctx, v1706);
                                                                                                                let v1708 = Some(v1707);
                                                                                                                // Rule at src\isa\s390x\lower.isle line 2131.
                                                                                                                return v1708;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x10_u8 => {
                                                                                    if v1618.1 == 0x11_u8 {
                                                                                        let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                                                        if v1621.0 == 0x12_u8 {
                                                                                            if v1621.1 == 0x13_u8 {
                                                                                                let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                                                                let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                                                                if v1627.0 == 0x14_u8 {
                                                                                                    if v1627.1 == 0x15_u8 {
                                                                                                        let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                                                                        if v1630.0 == 0x16_u8 {
                                                                                                            if v1630.1 == 0x17_u8 {
                                                                                                                let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                                                                let v1582 = C::put_in_reg(ctx, v1566.0);
                                                                                                                let v1583 = C::put_in_reg(ctx, v1566.1);
                                                                                                                let v1805 = constructor_vec_permute_dw_imm(ctx, I8X16, v1582, 0x1_u8, v1583, 0x0_u8);
                                                                                                                let v1806 = constructor_output_reg(ctx, v1805);
                                                                                                                let v1807 = Some(v1806);
                                                                                                                // Rule at src\isa\s390x\lower.isle line 2205.
                                                                                                                return v1807;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x18_u8 => {
                                                                                    if v1618.1 == 0x19_u8 {
                                                                                        let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                                                        if v1621.0 == 0x1a_u8 {
                                                                                            if v1621.1 == 0x1b_u8 {
                                                                                                let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                                                                let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                                                                if v1627.0 == 0x1c_u8 {
                                                                                                    if v1627.1 == 0x1d_u8 {
                                                                                                        let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                                                                        if v1630.0 == 0x1e_u8 {
                                                                                                            if v1630.1 == 0x1f_u8 {
                                                                                                                let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                                                                let v1582 = C::put_in_reg(ctx, v1566.0);
                                                                                                                let v1583 = C::put_in_reg(ctx, v1566.1);
                                                                                                                let v1682 = constructor_vec_merge_low(ctx, I64X2, v1582, v1583);
                                                                                                                let v1683 = constructor_output_reg(ctx, v1682);
                                                                                                                let v1684 = Some(v1683);
                                                                                                                // Rule at src\isa\s390x\lower.isle line 2115.
                                                                                                                return v1684;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                _ => {}
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0x18_u8 => {
                                                                if v1606.1 == 0x19_u8 {
                                                                    let v1609 = C::u8_pair_split(ctx, v1603.1);
                                                                    if v1609.0 == 0x1a_u8 {
                                                                        if v1609.1 == 0x1b_u8 {
                                                                            let v1612 = C::u32_pair_split(ctx, v1588.1);
                                                                            let v1615 = C::u16_pair_split(ctx, v1612.0);
                                                                            let v1618 = C::u8_pair_split(ctx, v1615.0);
                                                                            if v1618.0 == 0xc_u8 {
                                                                                if v1618.1 == 0xd_u8 {
                                                                                    let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                                                    if v1621.0 == 0xe_u8 {
                                                                                        if v1621.1 == 0xf_u8 {
                                                                                            let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                                                            let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                                                            if v1627.0 == 0x1c_u8 {
                                                                                                if v1627.1 == 0x1d_u8 {
                                                                                                    let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                                                                    if v1630.0 == 0x1e_u8 {
                                                                                                        if v1630.1 == 0x1f_u8 {
                                                                                                            let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                                                            let v1582 = C::put_in_reg(ctx, v1566.0);
                                                                                                            let v1583 = C::put_in_reg(ctx, v1566.1);
                                                                                                            let v1685 = constructor_vec_merge_low(ctx, I32X4, v1582, v1583);
                                                                                                            let v1686 = constructor_output_reg(ctx, v1685);
                                                                                                            let v1687 = Some(v1686);
                                                                                                            // Rule at src\isa\s390x\lower.isle line 2117.
                                                                                                            return v1687;
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                0x18_u8 => {
                                                    if v1600.1 == 0x19_u8 {
                                                        let v1603 = C::u16_pair_split(ctx, v1591.1);
                                                        let v1606 = C::u8_pair_split(ctx, v1603.0);
                                                        if v1606.0 == 0xa_u8 {
                                                            if v1606.1 == 0xb_u8 {
                                                                let v1609 = C::u8_pair_split(ctx, v1603.1);
                                                                if v1609.0 == 0x1a_u8 {
                                                                    if v1609.1 == 0x1b_u8 {
                                                                        let v1612 = C::u32_pair_split(ctx, v1588.1);
                                                                        let v1615 = C::u16_pair_split(ctx, v1612.0);
                                                                        let v1618 = C::u8_pair_split(ctx, v1615.0);
                                                                        if v1618.0 == 0xc_u8 {
                                                                            if v1618.1 == 0xd_u8 {
                                                                                let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                                                if v1621.0 == 0x1c_u8 {
                                                                                    if v1621.1 == 0x1d_u8 {
                                                                                        let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                                                        let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                                                        if v1627.0 == 0xe_u8 {
                                                                                            if v1627.1 == 0xf_u8 {
                                                                                                let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                                                                if v1630.0 == 0x1e_u8 {
                                                                                                    if v1630.1 == 0x1f_u8 {
                                                                                                        let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                                                        let v1582 = C::put_in_reg(ctx, v1566.0);
                                                                                                        let v1583 = C::put_in_reg(ctx, v1566.1);
                                                                                                        let v1688 = constructor_vec_merge_low(ctx, I16X8, v1582, v1583);
                                                                                                        let v1689 = constructor_output_reg(ctx, v1688);
                                                                                                        let v1690 = Some(v1689);
                                                                                                        // Rule at src\isa\s390x\lower.isle line 2119.
                                                                                                        return v1690;
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                        0x18_u8 => {
                                            let v1600 = C::u8_pair_split(ctx, v1594.1);
                                            if v1600.0 == 0x9_u8 {
                                                if v1600.1 == 0x19_u8 {
                                                    let v1603 = C::u16_pair_split(ctx, v1591.1);
                                                    let v1606 = C::u8_pair_split(ctx, v1603.0);
                                                    if v1606.0 == 0xa_u8 {
                                                        if v1606.1 == 0x1a_u8 {
                                                            let v1609 = C::u8_pair_split(ctx, v1603.1);
                                                            if v1609.0 == 0xb_u8 {
                                                                if v1609.1 == 0x1b_u8 {
                                                                    let v1612 = C::u32_pair_split(ctx, v1588.1);
                                                                    let v1615 = C::u16_pair_split(ctx, v1612.0);
                                                                    let v1618 = C::u8_pair_split(ctx, v1615.0);
                                                                    if v1618.0 == 0xc_u8 {
                                                                        if v1618.1 == 0x1c_u8 {
                                                                            let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                                            if v1621.0 == 0xd_u8 {
                                                                                if v1621.1 == 0x1d_u8 {
                                                                                    let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                                                    let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                                                    if v1627.0 == 0xe_u8 {
                                                                                        if v1627.1 == 0x1e_u8 {
                                                                                            let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                                                            if v1630.0 == 0xf_u8 {
                                                                                                if v1630.1 == 0x1f_u8 {
                                                                                                    let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                                                    let v1582 = C::put_in_reg(ctx, v1566.0);
                                                                                                    let v1583 = C::put_in_reg(ctx, v1566.1);
                                                                                                    let v1691 = constructor_vec_merge_low(ctx, I8X16, v1582, v1583);
                                                                                                    let v1692 = constructor_output_reg(ctx, v1691);
                                                                                                    let v1693 = Some(v1692);
                                                                                                    // Rule at src\isa\s390x\lower.isle line 2121.
                                                                                                    return v1693;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                0x10_u8 => {
                                    match v1597.1 {
                                        0x0_u8 => {
                                            let v1600 = C::u8_pair_split(ctx, v1594.1);
                                            if v1600.0 == 0x11_u8 {
                                                if v1600.1 == 0x1_u8 {
                                                    let v1603 = C::u16_pair_split(ctx, v1591.1);
                                                    let v1606 = C::u8_pair_split(ctx, v1603.0);
                                                    if v1606.0 == 0x12_u8 {
                                                        if v1606.1 == 0x2_u8 {
                                                            let v1609 = C::u8_pair_split(ctx, v1603.1);
                                                            if v1609.0 == 0x13_u8 {
                                                                if v1609.1 == 0x3_u8 {
                                                                    let v1612 = C::u32_pair_split(ctx, v1588.1);
                                                                    let v1615 = C::u16_pair_split(ctx, v1612.0);
                                                                    let v1618 = C::u8_pair_split(ctx, v1615.0);
                                                                    if v1618.0 == 0x14_u8 {
                                                                        if v1618.1 == 0x4_u8 {
                                                                            let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                                            if v1621.0 == 0x15_u8 {
                                                                                if v1621.1 == 0x5_u8 {
                                                                                    let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                                                    let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                                                    if v1627.0 == 0x16_u8 {
                                                                                        if v1627.1 == 0x6_u8 {
                                                                                            let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                                                            if v1630.0 == 0x17_u8 {
                                                                                                if v1630.1 == 0x7_u8 {
                                                                                                    let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                                                    let v1645 = C::put_in_reg(ctx, v1566.1);
                                                                                                    let v1575 = C::put_in_reg(ctx, v1566.0);
                                                                                                    let v1655 = constructor_vec_merge_high(ctx, I8X16, v1645, v1575);
                                                                                                    let v1656 = constructor_output_reg(ctx, v1655);
                                                                                                    let v1657 = Some(v1656);
                                                                                                    // Rule at src\isa\s390x\lower.isle line 2095.
                                                                                                    return v1657;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        0x10_u8 => {
                                            let v1600 = C::u8_pair_split(ctx, v1594.1);
                                            if v1600.0 == 0x11_u8 {
                                                if v1600.1 == 0x11_u8 {
                                                    let v1603 = C::u16_pair_split(ctx, v1591.1);
                                                    let v1606 = C::u8_pair_split(ctx, v1603.0);
                                                    if v1606.0 == 0x12_u8 {
                                                        if v1606.1 == 0x12_u8 {
                                                            let v1609 = C::u8_pair_split(ctx, v1603.1);
                                                            if v1609.0 == 0x13_u8 {
                                                                if v1609.1 == 0x13_u8 {
                                                                    let v1612 = C::u32_pair_split(ctx, v1588.1);
                                                                    let v1615 = C::u16_pair_split(ctx, v1612.0);
                                                                    let v1618 = C::u8_pair_split(ctx, v1615.0);
                                                                    if v1618.0 == 0x14_u8 {
                                                                        if v1618.1 == 0x14_u8 {
                                                                            let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                                            if v1621.0 == 0x15_u8 {
                                                                                if v1621.1 == 0x15_u8 {
                                                                                    let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                                                    let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                                                    if v1627.0 == 0x16_u8 {
                                                                                        if v1627.1 == 0x16_u8 {
                                                                                            let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                                                            if v1630.0 == 0x17_u8 {
                                                                                                if v1630.1 == 0x17_u8 {
                                                                                                    let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                                                    let v1645 = C::put_in_reg(ctx, v1566.1);
                                                                                                    let v1583 = C::put_in_reg(ctx, v1566.1);
                                                                                                    let v1679 = constructor_vec_merge_high(ctx, I8X16, v1645, v1583);
                                                                                                    let v1680 = constructor_output_reg(ctx, v1679);
                                                                                                    let v1681 = Some(v1680);
                                                                                                    // Rule at src\isa\s390x\lower.isle line 2111.
                                                                                                    return v1681;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        0x11_u8 => {
                                            let v1600 = C::u8_pair_split(ctx, v1594.1);
                                            match v1600.0 {
                                                0x0_u8 => {
                                                    if v1600.1 == 0x1_u8 {
                                                        let v1603 = C::u16_pair_split(ctx, v1591.1);
                                                        let v1606 = C::u8_pair_split(ctx, v1603.0);
                                                        if v1606.0 == 0x12_u8 {
                                                            if v1606.1 == 0x13_u8 {
                                                                let v1609 = C::u8_pair_split(ctx, v1603.1);
                                                                if v1609.0 == 0x2_u8 {
                                                                    if v1609.1 == 0x3_u8 {
                                                                        let v1612 = C::u32_pair_split(ctx, v1588.1);
                                                                        let v1615 = C::u16_pair_split(ctx, v1612.0);
                                                                        let v1618 = C::u8_pair_split(ctx, v1615.0);
                                                                        if v1618.0 == 0x14_u8 {
                                                                            if v1618.1 == 0x15_u8 {
                                                                                let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                                                if v1621.0 == 0x4_u8 {
                                                                                    if v1621.1 == 0x5_u8 {
                                                                                        let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                                                        let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                                                        if v1627.0 == 0x16_u8 {
                                                                                            if v1627.1 == 0x17_u8 {
                                                                                                let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                                                                if v1630.0 == 0x6_u8 {
                                                                                                    if v1630.1 == 0x7_u8 {
                                                                                                        let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                                                        let v1645 = C::put_in_reg(ctx, v1566.1);
                                                                                                        let v1575 = C::put_in_reg(ctx, v1566.0);
                                                                                                        let v1652 = constructor_vec_merge_high(ctx, I16X8, v1645, v1575);
                                                                                                        let v1653 = constructor_output_reg(ctx, v1652);
                                                                                                        let v1654 = Some(v1653);
                                                                                                        // Rule at src\isa\s390x\lower.isle line 2093.
                                                                                                        return v1654;
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                0x10_u8 => {
                                                    if v1600.1 == 0x11_u8 {
                                                        let v1603 = C::u16_pair_split(ctx, v1591.1);
                                                        let v1606 = C::u8_pair_split(ctx, v1603.0);
                                                        if v1606.0 == 0x12_u8 {
                                                            if v1606.1 == 0x13_u8 {
                                                                let v1609 = C::u8_pair_split(ctx, v1603.1);
                                                                if v1609.0 == 0x12_u8 {
                                                                    if v1609.1 == 0x13_u8 {
                                                                        let v1612 = C::u32_pair_split(ctx, v1588.1);
                                                                        let v1615 = C::u16_pair_split(ctx, v1612.0);
                                                                        let v1618 = C::u8_pair_split(ctx, v1615.0);
                                                                        if v1618.0 == 0x14_u8 {
                                                                            if v1618.1 == 0x15_u8 {
                                                                                let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                                                if v1621.0 == 0x14_u8 {
                                                                                    if v1621.1 == 0x15_u8 {
                                                                                        let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                                                        let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                                                        if v1627.0 == 0x16_u8 {
                                                                                            if v1627.1 == 0x17_u8 {
                                                                                                let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                                                                if v1630.0 == 0x16_u8 {
                                                                                                    if v1630.1 == 0x17_u8 {
                                                                                                        let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                                                        let v1645 = C::put_in_reg(ctx, v1566.1);
                                                                                                        let v1583 = C::put_in_reg(ctx, v1566.1);
                                                                                                        let v1676 = constructor_vec_merge_high(ctx, I16X8, v1645, v1583);
                                                                                                        let v1677 = constructor_output_reg(ctx, v1676);
                                                                                                        let v1678 = Some(v1677);
                                                                                                        // Rule at src\isa\s390x\lower.isle line 2109.
                                                                                                        return v1678;
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                0x12_u8 => {
                                                    if v1600.1 == 0x13_u8 {
                                                        let v1603 = C::u16_pair_split(ctx, v1591.1);
                                                        let v1606 = C::u8_pair_split(ctx, v1603.0);
                                                        match v1606.0 {
                                                            0x0_u8 => {
                                                                if v1606.1 == 0x1_u8 {
                                                                    let v1609 = C::u8_pair_split(ctx, v1603.1);
                                                                    if v1609.0 == 0x2_u8 {
                                                                        if v1609.1 == 0x3_u8 {
                                                                            let v1612 = C::u32_pair_split(ctx, v1588.1);
                                                                            let v1615 = C::u16_pair_split(ctx, v1612.0);
                                                                            let v1618 = C::u8_pair_split(ctx, v1615.0);
                                                                            if v1618.0 == 0x14_u8 {
                                                                                if v1618.1 == 0x15_u8 {
                                                                                    let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                                                    if v1621.0 == 0x16_u8 {
                                                                                        if v1621.1 == 0x17_u8 {
                                                                                            let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                                                            let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                                                            if v1627.0 == 0x4_u8 {
                                                                                                if v1627.1 == 0x5_u8 {
                                                                                                    let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                                                                    if v1630.0 == 0x6_u8 {
                                                                                                        if v1630.1 == 0x7_u8 {
                                                                                                            let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                                                            let v1645 = C::put_in_reg(ctx, v1566.1);
                                                                                                            let v1575 = C::put_in_reg(ctx, v1566.0);
                                                                                                            let v1649 = constructor_vec_merge_high(ctx, I32X4, v1645, v1575);
                                                                                                            let v1650 = constructor_output_reg(ctx, v1649);
                                                                                                            let v1651 = Some(v1650);
                                                                                                            // Rule at src\isa\s390x\lower.isle line 2091.
                                                                                                            return v1651;
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0x10_u8 => {
                                                                if v1606.1 == 0x11_u8 {
                                                                    let v1609 = C::u8_pair_split(ctx, v1603.1);
                                                                    if v1609.0 == 0x12_u8 {
                                                                        if v1609.1 == 0x13_u8 {
                                                                            let v1612 = C::u32_pair_split(ctx, v1588.1);
                                                                            let v1615 = C::u16_pair_split(ctx, v1612.0);
                                                                            let v1618 = C::u8_pair_split(ctx, v1615.0);
                                                                            if v1618.0 == 0x14_u8 {
                                                                                if v1618.1 == 0x15_u8 {
                                                                                    let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                                                    if v1621.0 == 0x16_u8 {
                                                                                        if v1621.1 == 0x17_u8 {
                                                                                            let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                                                            let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                                                            if v1627.0 == 0x14_u8 {
                                                                                                if v1627.1 == 0x15_u8 {
                                                                                                    let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                                                                    if v1630.0 == 0x16_u8 {
                                                                                                        if v1630.1 == 0x17_u8 {
                                                                                                            let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                                                            let v1645 = C::put_in_reg(ctx, v1566.1);
                                                                                                            let v1583 = C::put_in_reg(ctx, v1566.1);
                                                                                                            let v1673 = constructor_vec_merge_high(ctx, I32X4, v1645, v1583);
                                                                                                            let v1674 = constructor_output_reg(ctx, v1673);
                                                                                                            let v1675 = Some(v1674);
                                                                                                            // Rule at src\isa\s390x\lower.isle line 2107.
                                                                                                            return v1675;
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0x14_u8 => {
                                                                if v1606.1 == 0x15_u8 {
                                                                    let v1609 = C::u8_pair_split(ctx, v1603.1);
                                                                    if v1609.0 == 0x16_u8 {
                                                                        if v1609.1 == 0x17_u8 {
                                                                            let v1612 = C::u32_pair_split(ctx, v1588.1);
                                                                            let v1615 = C::u16_pair_split(ctx, v1612.0);
                                                                            let v1618 = C::u8_pair_split(ctx, v1615.0);
                                                                            match v1618.0 {
                                                                                0x0_u8 => {
                                                                                    if v1618.1 == 0x1_u8 {
                                                                                        let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                                                        if v1621.0 == 0x2_u8 {
                                                                                            if v1621.1 == 0x3_u8 {
                                                                                                let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                                                                let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                                                                if v1627.0 == 0x4_u8 {
                                                                                                    if v1627.1 == 0x5_u8 {
                                                                                                        let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                                                                        if v1630.0 == 0x6_u8 {
                                                                                                            if v1630.1 == 0x7_u8 {
                                                                                                                let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                                                                let v1645 = C::put_in_reg(ctx, v1566.1);
                                                                                                                let v1575 = C::put_in_reg(ctx, v1566.0);
                                                                                                                let v1646 = constructor_vec_merge_high(ctx, I64X2, v1645, v1575);
                                                                                                                let v1647 = constructor_output_reg(ctx, v1646);
                                                                                                                let v1648 = Some(v1647);
                                                                                                                // Rule at src\isa\s390x\lower.isle line 2089.
                                                                                                                return v1648;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x8_u8 => {
                                                                                    if v1618.1 == 0x9_u8 {
                                                                                        let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                                                        if v1621.0 == 0xa_u8 {
                                                                                            if v1621.1 == 0xb_u8 {
                                                                                                let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                                                                let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                                                                if v1627.0 == 0xc_u8 {
                                                                                                    if v1627.1 == 0xd_u8 {
                                                                                                        let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                                                                        if v1630.0 == 0xe_u8 {
                                                                                                            if v1630.1 == 0xf_u8 {
                                                                                                                let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                                                                let v1645 = C::put_in_reg(ctx, v1566.1);
                                                                                                                let v1575 = C::put_in_reg(ctx, v1566.0);
                                                                                                                let v1808 = constructor_vec_permute_dw_imm(ctx, I8X16, v1645, 0x0_u8, v1575, 0x1_u8);
                                                                                                                let v1809 = constructor_output_reg(ctx, v1808);
                                                                                                                let v1810 = Some(v1809);
                                                                                                                // Rule at src\isa\s390x\lower.isle line 2207.
                                                                                                                return v1810;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x10_u8 => {
                                                                                    if v1618.1 == 0x11_u8 {
                                                                                        let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                                                        if v1621.0 == 0x12_u8 {
                                                                                            if v1621.1 == 0x13_u8 {
                                                                                                let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                                                                let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                                                                if v1627.0 == 0x14_u8 {
                                                                                                    if v1627.1 == 0x15_u8 {
                                                                                                        let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                                                                        if v1630.0 == 0x16_u8 {
                                                                                                            if v1630.1 == 0x17_u8 {
                                                                                                                let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                                                                let v1645 = C::put_in_reg(ctx, v1566.1);
                                                                                                                let v1583 = C::put_in_reg(ctx, v1566.1);
                                                                                                                let v1670 = constructor_vec_merge_high(ctx, I64X2, v1645, v1583);
                                                                                                                let v1671 = constructor_output_reg(ctx, v1670);
                                                                                                                let v1672 = Some(v1671);
                                                                                                                // Rule at src\isa\s390x\lower.isle line 2105.
                                                                                                                return v1672;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x18_u8 => {
                                                                                    if v1618.1 == 0x19_u8 {
                                                                                        let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                                                        if v1621.0 == 0x1a_u8 {
                                                                                            if v1621.1 == 0x1b_u8 {
                                                                                                let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                                                                let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                                                                if v1627.0 == 0x1c_u8 {
                                                                                                    if v1627.1 == 0x1d_u8 {
                                                                                                        let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                                                                        if v1630.0 == 0x1e_u8 {
                                                                                                            if v1630.1 == 0x1f_u8 {
                                                                                                                let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                                                                let v1645 = C::put_in_reg(ctx, v1566.1);
                                                                                                                let v1583 = C::put_in_reg(ctx, v1566.1);
                                                                                                                let v1820 = constructor_vec_permute_dw_imm(ctx, I8X16, v1645, 0x0_u8, v1583, 0x1_u8);
                                                                                                                let v1821 = constructor_output_reg(ctx, v1820);
                                                                                                                let v1822 = Some(v1821);
                                                                                                                // Rule at src\isa\s390x\lower.isle line 2215.
                                                                                                                return v1822;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                _ => {}
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                0x11_u8 => {
                                    if v1597.1 == 0x13_u8 {
                                        let v1600 = C::u8_pair_split(ctx, v1594.1);
                                        if v1600.0 == 0x15_u8 {
                                            if v1600.1 == 0x17_u8 {
                                                let v1603 = C::u16_pair_split(ctx, v1591.1);
                                                let v1606 = C::u8_pair_split(ctx, v1603.0);
                                                if v1606.0 == 0x19_u8 {
                                                    if v1606.1 == 0x1b_u8 {
                                                        let v1609 = C::u8_pair_split(ctx, v1603.1);
                                                        if v1609.0 == 0x1d_u8 {
                                                            if v1609.1 == 0x1f_u8 {
                                                                let v1612 = C::u32_pair_split(ctx, v1588.1);
                                                                let v1615 = C::u16_pair_split(ctx, v1612.0);
                                                                let v1618 = C::u8_pair_split(ctx, v1615.0);
                                                                match v1618.0 {
                                                                    0x1_u8 => {
                                                                        if v1618.1 == 0x3_u8 {
                                                                            let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                                            if v1621.0 == 0x5_u8 {
                                                                                if v1621.1 == 0x7_u8 {
                                                                                    let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                                                    let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                                                    if v1627.0 == 0x9_u8 {
                                                                                        if v1627.1 == 0xb_u8 {
                                                                                            let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                                                            if v1630.0 == 0xd_u8 {
                                                                                                if v1630.1 == 0xf_u8 {
                                                                                                    let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                                                    let v1645 = C::put_in_reg(ctx, v1566.1);
                                                                                                    let v1575 = C::put_in_reg(ctx, v1566.0);
                                                                                                    let v1745 = constructor_vec_pack(ctx, I16X8, v1645, v1575);
                                                                                                    let v1746 = constructor_output_reg(ctx, v1745);
                                                                                                    let v1747 = Some(v1746);
                                                                                                    // Rule at src\isa\s390x\lower.isle line 2159.
                                                                                                    return v1747;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    0x11_u8 => {
                                                                        if v1618.1 == 0x13_u8 {
                                                                            let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                                            if v1621.0 == 0x15_u8 {
                                                                                if v1621.1 == 0x17_u8 {
                                                                                    let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                                                    let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                                                    if v1627.0 == 0x19_u8 {
                                                                                        if v1627.1 == 0x1b_u8 {
                                                                                            let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                                                            if v1630.0 == 0x1d_u8 {
                                                                                                if v1630.1 == 0x1f_u8 {
                                                                                                    let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                                                    let v1645 = C::put_in_reg(ctx, v1566.1);
                                                                                                    let v1583 = C::put_in_reg(ctx, v1566.1);
                                                                                                    let v1763 = constructor_vec_pack(ctx, I16X8, v1645, v1583);
                                                                                                    let v1764 = constructor_output_reg(ctx, v1763);
                                                                                                    let v1765 = Some(v1764);
                                                                                                    // Rule at src\isa\s390x\lower.isle line 2171.
                                                                                                    return v1765;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    _ => {}
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x12_u8 => {
                                    if v1597.1 == 0x13_u8 {
                                        let v1600 = C::u8_pair_split(ctx, v1594.1);
                                        if v1600.0 == 0x16_u8 {
                                            if v1600.1 == 0x17_u8 {
                                                let v1603 = C::u16_pair_split(ctx, v1591.1);
                                                let v1606 = C::u8_pair_split(ctx, v1603.0);
                                                if v1606.0 == 0x1a_u8 {
                                                    if v1606.1 == 0x1b_u8 {
                                                        let v1609 = C::u8_pair_split(ctx, v1603.1);
                                                        if v1609.0 == 0x1e_u8 {
                                                            if v1609.1 == 0x1f_u8 {
                                                                let v1612 = C::u32_pair_split(ctx, v1588.1);
                                                                let v1615 = C::u16_pair_split(ctx, v1612.0);
                                                                let v1618 = C::u8_pair_split(ctx, v1615.0);
                                                                match v1618.0 {
                                                                    0x2_u8 => {
                                                                        if v1618.1 == 0x3_u8 {
                                                                            let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                                            if v1621.0 == 0x6_u8 {
                                                                                if v1621.1 == 0x7_u8 {
                                                                                    let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                                                    let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                                                    if v1627.0 == 0xa_u8 {
                                                                                        if v1627.1 == 0xb_u8 {
                                                                                            let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                                                            if v1630.0 == 0xe_u8 {
                                                                                                if v1630.1 == 0xf_u8 {
                                                                                                    let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                                                    let v1645 = C::put_in_reg(ctx, v1566.1);
                                                                                                    let v1575 = C::put_in_reg(ctx, v1566.0);
                                                                                                    let v1742 = constructor_vec_pack(ctx, I32X4, v1645, v1575);
                                                                                                    let v1743 = constructor_output_reg(ctx, v1742);
                                                                                                    let v1744 = Some(v1743);
                                                                                                    // Rule at src\isa\s390x\lower.isle line 2157.
                                                                                                    return v1744;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    0x12_u8 => {
                                                                        if v1618.1 == 0x13_u8 {
                                                                            let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                                            if v1621.0 == 0x16_u8 {
                                                                                if v1621.1 == 0x17_u8 {
                                                                                    let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                                                    let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                                                    if v1627.0 == 0x1a_u8 {
                                                                                        if v1627.1 == 0x1b_u8 {
                                                                                            let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                                                            if v1630.0 == 0x1e_u8 {
                                                                                                if v1630.1 == 0x1f_u8 {
                                                                                                    let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                                                    let v1645 = C::put_in_reg(ctx, v1566.1);
                                                                                                    let v1583 = C::put_in_reg(ctx, v1566.1);
                                                                                                    let v1760 = constructor_vec_pack(ctx, I32X4, v1645, v1583);
                                                                                                    let v1761 = constructor_output_reg(ctx, v1760);
                                                                                                    let v1762 = Some(v1761);
                                                                                                    // Rule at src\isa\s390x\lower.isle line 2169.
                                                                                                    return v1762;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    _ => {}
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x14_u8 => {
                                    if v1597.1 == 0x15_u8 {
                                        let v1600 = C::u8_pair_split(ctx, v1594.1);
                                        if v1600.0 == 0x16_u8 {
                                            if v1600.1 == 0x17_u8 {
                                                let v1603 = C::u16_pair_split(ctx, v1591.1);
                                                let v1606 = C::u8_pair_split(ctx, v1603.0);
                                                if v1606.0 == 0x1c_u8 {
                                                    if v1606.1 == 0x1d_u8 {
                                                        let v1609 = C::u8_pair_split(ctx, v1603.1);
                                                        if v1609.0 == 0x1e_u8 {
                                                            if v1609.1 == 0x1f_u8 {
                                                                let v1612 = C::u32_pair_split(ctx, v1588.1);
                                                                let v1615 = C::u16_pair_split(ctx, v1612.0);
                                                                let v1618 = C::u8_pair_split(ctx, v1615.0);
                                                                match v1618.0 {
                                                                    0x4_u8 => {
                                                                        if v1618.1 == 0x5_u8 {
                                                                            let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                                            if v1621.0 == 0x6_u8 {
                                                                                if v1621.1 == 0x7_u8 {
                                                                                    let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                                                    let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                                                    if v1627.0 == 0xc_u8 {
                                                                                        if v1627.1 == 0xd_u8 {
                                                                                            let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                                                            if v1630.0 == 0xe_u8 {
                                                                                                if v1630.1 == 0xf_u8 {
                                                                                                    let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                                                    let v1645 = C::put_in_reg(ctx, v1566.1);
                                                                                                    let v1575 = C::put_in_reg(ctx, v1566.0);
                                                                                                    let v1739 = constructor_vec_pack(ctx, I64X2, v1645, v1575);
                                                                                                    let v1740 = constructor_output_reg(ctx, v1739);
                                                                                                    let v1741 = Some(v1740);
                                                                                                    // Rule at src\isa\s390x\lower.isle line 2155.
                                                                                                    return v1741;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    0x14_u8 => {
                                                                        if v1618.1 == 0x15_u8 {
                                                                            let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                                            if v1621.0 == 0x16_u8 {
                                                                                if v1621.1 == 0x17_u8 {
                                                                                    let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                                                    let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                                                    if v1627.0 == 0x1c_u8 {
                                                                                        if v1627.1 == 0x1d_u8 {
                                                                                            let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                                                            if v1630.0 == 0x1e_u8 {
                                                                                                if v1630.1 == 0x1f_u8 {
                                                                                                    let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                                                    let v1645 = C::put_in_reg(ctx, v1566.1);
                                                                                                    let v1583 = C::put_in_reg(ctx, v1566.1);
                                                                                                    let v1757 = constructor_vec_pack(ctx, I64X2, v1645, v1583);
                                                                                                    let v1758 = constructor_output_reg(ctx, v1757);
                                                                                                    let v1759 = Some(v1758);
                                                                                                    // Rule at src\isa\s390x\lower.isle line 2167.
                                                                                                    return v1759;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    _ => {}
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x18_u8 => {
                                    match v1597.1 {
                                        0x8_u8 => {
                                            let v1600 = C::u8_pair_split(ctx, v1594.1);
                                            if v1600.0 == 0x19_u8 {
                                                if v1600.1 == 0x9_u8 {
                                                    let v1603 = C::u16_pair_split(ctx, v1591.1);
                                                    let v1606 = C::u8_pair_split(ctx, v1603.0);
                                                    if v1606.0 == 0x1a_u8 {
                                                        if v1606.1 == 0xa_u8 {
                                                            let v1609 = C::u8_pair_split(ctx, v1603.1);
                                                            if v1609.0 == 0x1b_u8 {
                                                                if v1609.1 == 0xb_u8 {
                                                                    let v1612 = C::u32_pair_split(ctx, v1588.1);
                                                                    let v1615 = C::u16_pair_split(ctx, v1612.0);
                                                                    let v1618 = C::u8_pair_split(ctx, v1615.0);
                                                                    if v1618.0 == 0x1c_u8 {
                                                                        if v1618.1 == 0xc_u8 {
                                                                            let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                                            if v1621.0 == 0x1d_u8 {
                                                                                if v1621.1 == 0xd_u8 {
                                                                                    let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                                                    let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                                                    if v1627.0 == 0x1e_u8 {
                                                                                        if v1627.1 == 0xe_u8 {
                                                                                            let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                                                            if v1630.0 == 0x1f_u8 {
                                                                                                if v1630.1 == 0xf_u8 {
                                                                                                    let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                                                    let v1645 = C::put_in_reg(ctx, v1566.1);
                                                                                                    let v1575 = C::put_in_reg(ctx, v1566.0);
                                                                                                    let v1703 = constructor_vec_merge_low(ctx, I8X16, v1645, v1575);
                                                                                                    let v1704 = constructor_output_reg(ctx, v1703);
                                                                                                    let v1705 = Some(v1704);
                                                                                                    // Rule at src\isa\s390x\lower.isle line 2129.
                                                                                                    return v1705;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        0x18_u8 => {
                                            let v1600 = C::u8_pair_split(ctx, v1594.1);
                                            if v1600.0 == 0x19_u8 {
                                                if v1600.1 == 0x19_u8 {
                                                    let v1603 = C::u16_pair_split(ctx, v1591.1);
                                                    let v1606 = C::u8_pair_split(ctx, v1603.0);
                                                    if v1606.0 == 0x1a_u8 {
                                                        if v1606.1 == 0x1a_u8 {
                                                            let v1609 = C::u8_pair_split(ctx, v1603.1);
                                                            if v1609.0 == 0x1b_u8 {
                                                                if v1609.1 == 0x1b_u8 {
                                                                    let v1612 = C::u32_pair_split(ctx, v1588.1);
                                                                    let v1615 = C::u16_pair_split(ctx, v1612.0);
                                                                    let v1618 = C::u8_pair_split(ctx, v1615.0);
                                                                    if v1618.0 == 0x1c_u8 {
                                                                        if v1618.1 == 0x1c_u8 {
                                                                            let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                                            if v1621.0 == 0x1d_u8 {
                                                                                if v1621.1 == 0x1d_u8 {
                                                                                    let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                                                    let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                                                    if v1627.0 == 0x1e_u8 {
                                                                                        if v1627.1 == 0x1e_u8 {
                                                                                            let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                                                            if v1630.0 == 0x1f_u8 {
                                                                                                if v1630.1 == 0x1f_u8 {
                                                                                                    let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                                                    let v1645 = C::put_in_reg(ctx, v1566.1);
                                                                                                    let v1583 = C::put_in_reg(ctx, v1566.1);
                                                                                                    let v1727 = constructor_vec_merge_low(ctx, I8X16, v1645, v1583);
                                                                                                    let v1728 = constructor_output_reg(ctx, v1727);
                                                                                                    let v1729 = Some(v1728);
                                                                                                    // Rule at src\isa\s390x\lower.isle line 2145.
                                                                                                    return v1729;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        0x19_u8 => {
                                            let v1600 = C::u8_pair_split(ctx, v1594.1);
                                            match v1600.0 {
                                                0x8_u8 => {
                                                    if v1600.1 == 0x9_u8 {
                                                        let v1603 = C::u16_pair_split(ctx, v1591.1);
                                                        let v1606 = C::u8_pair_split(ctx, v1603.0);
                                                        if v1606.0 == 0x1a_u8 {
                                                            if v1606.1 == 0x1b_u8 {
                                                                let v1609 = C::u8_pair_split(ctx, v1603.1);
                                                                if v1609.0 == 0xa_u8 {
                                                                    if v1609.1 == 0xb_u8 {
                                                                        let v1612 = C::u32_pair_split(ctx, v1588.1);
                                                                        let v1615 = C::u16_pair_split(ctx, v1612.0);
                                                                        let v1618 = C::u8_pair_split(ctx, v1615.0);
                                                                        if v1618.0 == 0x1c_u8 {
                                                                            if v1618.1 == 0x1d_u8 {
                                                                                let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                                                if v1621.0 == 0xc_u8 {
                                                                                    if v1621.1 == 0xd_u8 {
                                                                                        let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                                                        let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                                                        if v1627.0 == 0x1e_u8 {
                                                                                            if v1627.1 == 0x1f_u8 {
                                                                                                let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                                                                if v1630.0 == 0xe_u8 {
                                                                                                    if v1630.1 == 0xf_u8 {
                                                                                                        let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                                                        let v1645 = C::put_in_reg(ctx, v1566.1);
                                                                                                        let v1575 = C::put_in_reg(ctx, v1566.0);
                                                                                                        let v1700 = constructor_vec_merge_low(ctx, I16X8, v1645, v1575);
                                                                                                        let v1701 = constructor_output_reg(ctx, v1700);
                                                                                                        let v1702 = Some(v1701);
                                                                                                        // Rule at src\isa\s390x\lower.isle line 2127.
                                                                                                        return v1702;
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                0x18_u8 => {
                                                    if v1600.1 == 0x19_u8 {
                                                        let v1603 = C::u16_pair_split(ctx, v1591.1);
                                                        let v1606 = C::u8_pair_split(ctx, v1603.0);
                                                        if v1606.0 == 0x1a_u8 {
                                                            if v1606.1 == 0x1b_u8 {
                                                                let v1609 = C::u8_pair_split(ctx, v1603.1);
                                                                if v1609.0 == 0x1a_u8 {
                                                                    if v1609.1 == 0x1b_u8 {
                                                                        let v1612 = C::u32_pair_split(ctx, v1588.1);
                                                                        let v1615 = C::u16_pair_split(ctx, v1612.0);
                                                                        let v1618 = C::u8_pair_split(ctx, v1615.0);
                                                                        if v1618.0 == 0x1c_u8 {
                                                                            if v1618.1 == 0x1d_u8 {
                                                                                let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                                                if v1621.0 == 0x1c_u8 {
                                                                                    if v1621.1 == 0x1d_u8 {
                                                                                        let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                                                        let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                                                        if v1627.0 == 0x1e_u8 {
                                                                                            if v1627.1 == 0x1f_u8 {
                                                                                                let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                                                                if v1630.0 == 0x1e_u8 {
                                                                                                    if v1630.1 == 0x1f_u8 {
                                                                                                        let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                                                        let v1645 = C::put_in_reg(ctx, v1566.1);
                                                                                                        let v1583 = C::put_in_reg(ctx, v1566.1);
                                                                                                        let v1724 = constructor_vec_merge_low(ctx, I16X8, v1645, v1583);
                                                                                                        let v1725 = constructor_output_reg(ctx, v1724);
                                                                                                        let v1726 = Some(v1725);
                                                                                                        // Rule at src\isa\s390x\lower.isle line 2143.
                                                                                                        return v1726;
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                0x1a_u8 => {
                                                    if v1600.1 == 0x1b_u8 {
                                                        let v1603 = C::u16_pair_split(ctx, v1591.1);
                                                        let v1606 = C::u8_pair_split(ctx, v1603.0);
                                                        match v1606.0 {
                                                            0x8_u8 => {
                                                                if v1606.1 == 0x9_u8 {
                                                                    let v1609 = C::u8_pair_split(ctx, v1603.1);
                                                                    if v1609.0 == 0xa_u8 {
                                                                        if v1609.1 == 0xb_u8 {
                                                                            let v1612 = C::u32_pair_split(ctx, v1588.1);
                                                                            let v1615 = C::u16_pair_split(ctx, v1612.0);
                                                                            let v1618 = C::u8_pair_split(ctx, v1615.0);
                                                                            if v1618.0 == 0x1c_u8 {
                                                                                if v1618.1 == 0x1d_u8 {
                                                                                    let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                                                    if v1621.0 == 0x1e_u8 {
                                                                                        if v1621.1 == 0x1f_u8 {
                                                                                            let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                                                            let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                                                            if v1627.0 == 0xc_u8 {
                                                                                                if v1627.1 == 0xd_u8 {
                                                                                                    let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                                                                    if v1630.0 == 0xe_u8 {
                                                                                                        if v1630.1 == 0xf_u8 {
                                                                                                            let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                                                            let v1645 = C::put_in_reg(ctx, v1566.1);
                                                                                                            let v1575 = C::put_in_reg(ctx, v1566.0);
                                                                                                            let v1697 = constructor_vec_merge_low(ctx, I32X4, v1645, v1575);
                                                                                                            let v1698 = constructor_output_reg(ctx, v1697);
                                                                                                            let v1699 = Some(v1698);
                                                                                                            // Rule at src\isa\s390x\lower.isle line 2125.
                                                                                                            return v1699;
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0x18_u8 => {
                                                                if v1606.1 == 0x19_u8 {
                                                                    let v1609 = C::u8_pair_split(ctx, v1603.1);
                                                                    if v1609.0 == 0x1a_u8 {
                                                                        if v1609.1 == 0x1b_u8 {
                                                                            let v1612 = C::u32_pair_split(ctx, v1588.1);
                                                                            let v1615 = C::u16_pair_split(ctx, v1612.0);
                                                                            let v1618 = C::u8_pair_split(ctx, v1615.0);
                                                                            if v1618.0 == 0x1c_u8 {
                                                                                if v1618.1 == 0x1d_u8 {
                                                                                    let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                                                    if v1621.0 == 0x1e_u8 {
                                                                                        if v1621.1 == 0x1f_u8 {
                                                                                            let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                                                            let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                                                            if v1627.0 == 0x1c_u8 {
                                                                                                if v1627.1 == 0x1d_u8 {
                                                                                                    let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                                                                    if v1630.0 == 0x1e_u8 {
                                                                                                        if v1630.1 == 0x1f_u8 {
                                                                                                            let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                                                            let v1645 = C::put_in_reg(ctx, v1566.1);
                                                                                                            let v1583 = C::put_in_reg(ctx, v1566.1);
                                                                                                            let v1721 = constructor_vec_merge_low(ctx, I32X4, v1645, v1583);
                                                                                                            let v1722 = constructor_output_reg(ctx, v1721);
                                                                                                            let v1723 = Some(v1722);
                                                                                                            // Rule at src\isa\s390x\lower.isle line 2141.
                                                                                                            return v1723;
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0x1c_u8 => {
                                                                if v1606.1 == 0x1d_u8 {
                                                                    let v1609 = C::u8_pair_split(ctx, v1603.1);
                                                                    if v1609.0 == 0x1e_u8 {
                                                                        if v1609.1 == 0x1f_u8 {
                                                                            let v1612 = C::u32_pair_split(ctx, v1588.1);
                                                                            let v1615 = C::u16_pair_split(ctx, v1612.0);
                                                                            let v1618 = C::u8_pair_split(ctx, v1615.0);
                                                                            match v1618.0 {
                                                                                0x0_u8 => {
                                                                                    if v1618.1 == 0x1_u8 {
                                                                                        let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                                                        if v1621.0 == 0x2_u8 {
                                                                                            if v1621.1 == 0x3_u8 {
                                                                                                let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                                                                let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                                                                if v1627.0 == 0x4_u8 {
                                                                                                    if v1627.1 == 0x5_u8 {
                                                                                                        let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                                                                        if v1630.0 == 0x6_u8 {
                                                                                                            if v1630.1 == 0x7_u8 {
                                                                                                                let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                                                                let v1645 = C::put_in_reg(ctx, v1566.1);
                                                                                                                let v1575 = C::put_in_reg(ctx, v1566.0);
                                                                                                                let v1811 = constructor_vec_permute_dw_imm(ctx, I8X16, v1645, 0x1_u8, v1575, 0x0_u8);
                                                                                                                let v1812 = constructor_output_reg(ctx, v1811);
                                                                                                                let v1813 = Some(v1812);
                                                                                                                // Rule at src\isa\s390x\lower.isle line 2209.
                                                                                                                return v1813;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x8_u8 => {
                                                                                    if v1618.1 == 0x9_u8 {
                                                                                        let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                                                        if v1621.0 == 0xa_u8 {
                                                                                            if v1621.1 == 0xb_u8 {
                                                                                                let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                                                                let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                                                                if v1627.0 == 0xc_u8 {
                                                                                                    if v1627.1 == 0xd_u8 {
                                                                                                        let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                                                                        if v1630.0 == 0xe_u8 {
                                                                                                            if v1630.1 == 0xf_u8 {
                                                                                                                let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                                                                let v1645 = C::put_in_reg(ctx, v1566.1);
                                                                                                                let v1575 = C::put_in_reg(ctx, v1566.0);
                                                                                                                let v1694 = constructor_vec_merge_low(ctx, I64X2, v1645, v1575);
                                                                                                                let v1695 = constructor_output_reg(ctx, v1694);
                                                                                                                let v1696 = Some(v1695);
                                                                                                                // Rule at src\isa\s390x\lower.isle line 2123.
                                                                                                                return v1696;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x10_u8 => {
                                                                                    if v1618.1 == 0x11_u8 {
                                                                                        let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                                                        if v1621.0 == 0x12_u8 {
                                                                                            if v1621.1 == 0x13_u8 {
                                                                                                let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                                                                let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                                                                if v1627.0 == 0x14_u8 {
                                                                                                    if v1627.1 == 0x15_u8 {
                                                                                                        let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                                                                        if v1630.0 == 0x16_u8 {
                                                                                                            if v1630.1 == 0x17_u8 {
                                                                                                                let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                                                                let v1645 = C::put_in_reg(ctx, v1566.1);
                                                                                                                let v1583 = C::put_in_reg(ctx, v1566.1);
                                                                                                                let v1823 = constructor_vec_permute_dw_imm(ctx, I8X16, v1645, 0x1_u8, v1583, 0x0_u8);
                                                                                                                let v1824 = constructor_output_reg(ctx, v1823);
                                                                                                                let v1825 = Some(v1824);
                                                                                                                // Rule at src\isa\s390x\lower.isle line 2217.
                                                                                                                return v1825;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x18_u8 => {
                                                                                    if v1618.1 == 0x19_u8 {
                                                                                        let v1621 = C::u8_pair_split(ctx, v1615.1);
                                                                                        if v1621.0 == 0x1a_u8 {
                                                                                            if v1621.1 == 0x1b_u8 {
                                                                                                let v1624 = C::u16_pair_split(ctx, v1612.1);
                                                                                                let v1627 = C::u8_pair_split(ctx, v1624.0);
                                                                                                if v1627.0 == 0x1c_u8 {
                                                                                                    if v1627.1 == 0x1d_u8 {
                                                                                                        let v1630 = C::u8_pair_split(ctx, v1624.1);
                                                                                                        if v1630.0 == 0x1e_u8 {
                                                                                                            if v1630.1 == 0x1f_u8 {
                                                                                                                let v1566 = C::unpack_value_array_2(ctx, v1564);
                                                                                                                let v1645 = C::put_in_reg(ctx, v1566.1);
                                                                                                                let v1583 = C::put_in_reg(ctx, v1566.1);
                                                                                                                let v1718 = constructor_vec_merge_low(ctx, I64X2, v1645, v1583);
                                                                                                                let v1719 = constructor_output_reg(ctx, v1718);
                                                                                                                let v1720 = Some(v1719);
                                                                                                                // Rule at src\isa\s390x\lower.isle line 2139.
                                                                                                                return v1720;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                _ => {}
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                _ => {}
                            }
                            let v1566 = C::unpack_value_array_2(ctx, v1564);
                            let v1582 = C::put_in_reg(ctx, v1566.0);
                            let v1583 = C::put_in_reg(ctx, v1566.1);
                            let v1584 = constructor_vec_imm(ctx, I8X16, v1571.0);
                            let v1585 = constructor_vec_permute(ctx, I8X16, v1582, v1583, v1584);
                            let v1586 = constructor_output_reg(ctx, v1585);
                            let v1587 = Some(v1586);
                            // Rule at src\isa\s390x\lower.isle line 2077.
                            return v1587;
                        }
                        _ => {}
                    }
                    let v1574 = constructor_vec_imm_byte_mask(ctx, I8X16, v1571.1);
                    let v1566 = C::unpack_value_array_2(ctx, v1564);
                    let v1575 = C::put_in_reg(ctx, v1566.0);
                    let v1576 = C::put_in_reg(ctx, v1566.1);
                    let v1577 = constructor_vec_imm(ctx, I8X16, v1571.0);
                    let v1578 = constructor_vec_permute(ctx, I8X16, v1575, v1576, v1577);
                    let v1579 = constructor_vec_and(ctx, I8X16, v1574, v1578);
                    let v1580 = constructor_output_reg(ctx, v1579);
                    let v1581 = Some(v1580);
                    // Rule at src\isa\s390x\lower.isle line 2072.
                    return v1581;
                }
            }
        }
        &InstructionData::StackLoad {
            opcode: ref v1842,
            stack_slot: v1843,
            offset: v1844,
        } => {
            if let &Opcode::StackAddr = v1842 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v1845 = constructor_stack_addr_impl(ctx, v3, v1843, v1844);
                    let v1846 = constructor_output_reg(ctx, v1845);
                    let v1847 = Some(v1846);
                    // Rule at src\isa\s390x\lower.isle line 2259.
                    return v1847;
                }
            }
        }
        &InstructionData::Store {
            opcode: ref v1467,
            args: ref v1468,
            flags: v1469,
            offset: v1470,
        } => {
            match v1467 {
                &Opcode::Store => {
                    let v1471 = C::unpack_value_array_2(ctx, v1468);
                    let v1474 = C::def_inst(ctx, v1471.0);
                    if let Some(v1475) = v1474 {
                        let v1476 = &C::inst_data_value(ctx, v1475);
                        if let &InstructionData::BinaryImm8 {
                            opcode: ref v1477,
                            arg: v1478,
                            imm: v1479,
                        } = v1476 {
                            if let &Opcode::Extractlane = v1477 {
                                let v1482 = C::bigendian(ctx, v1469);
                                if let Some(v1483) = v1482 {
                                    let v1484 = C::put_in_reg(ctx, v1478);
                                    let v1485 = &constructor_lower_address(ctx, v1469, v1471.1, v1470);
                                    let v1480 = C::value_type(ctx, v1478);
                                    let v1481 = C::u8_from_uimm8(ctx, v1479);
                                    let v1486 = C::be_lane_idx(ctx, v1480, v1481);
                                    let v1487 = &constructor_vec_store_lane(ctx, v1480, v1484, v1485, v1486);
                                    let v1488 = constructor_side_effect(ctx, v1487);
                                    let v1489 = Some(v1488);
                                    // Rule at src\isa\s390x\lower.isle line 1915.
                                    return v1489;
                                }
                                let v1490 = C::littleendian(ctx, v1469);
                                if let Some(v1491) = v1490 {
                                    let v1484 = C::put_in_reg(ctx, v1478);
                                    let v1485 = &constructor_lower_address(ctx, v1469, v1471.1, v1470);
                                    let v1480 = C::value_type(ctx, v1478);
                                    let v1481 = C::u8_from_uimm8(ctx, v1479);
                                    let v1486 = C::be_lane_idx(ctx, v1480, v1481);
                                    let v1492 = &constructor_vec_store_lane_little(ctx, v1480, v1484, v1485, v1486);
                                    let v1493 = constructor_side_effect(ctx, v1492);
                                    let v1494 = Some(v1493);
                                    // Rule at src\isa\s390x\lower.isle line 1922.
                                    return v1494;
                                }
                            }
                        }
                    }
                    let v1826 = &C::lane_order(ctx);
                    match v1826 {
                        &LaneOrder::LittleEndian => {
                            let v2022 = C::value_type(ctx, v1471.0);
                            let v2054 = C::vr128_ty(ctx, v2022);
                            if let Some(v2055) = v2054 {
                                let v1482 = C::bigendian(ctx, v1469);
                                if let Some(v1483) = v1482 {
                                    let v2035 = C::put_in_reg(ctx, v1471.0);
                                    let v2062 = &constructor_vec_store_elt_rev(ctx, v2055, v2035, v1469, v1471.1, v1470);
                                    let v2063 = constructor_side_effect(ctx, v2062);
                                    let v2064 = Some(v2063);
                                    // Rule at src\isa\s390x\lower.isle line 2728.
                                    return v2064;
                                }
                                let v1490 = C::littleendian(ctx, v1469);
                                if let Some(v1491) = v1490 {
                                    let v2035 = C::put_in_reg(ctx, v1471.0);
                                    let v2065 = &constructor_vec_store_full_rev(ctx, v2055, v2035, v1469, v1471.1, v1470);
                                    let v2066 = constructor_side_effect(ctx, v2065);
                                    let v2067 = Some(v2066);
                                    // Rule at src\isa\s390x\lower.isle line 2734.
                                    return v2067;
                                }
                            }
                        }
                        &LaneOrder::BigEndian => {
                            let v2022 = C::value_type(ctx, v1471.0);
                            let v2054 = C::vr128_ty(ctx, v2022);
                            if let Some(v2055) = v2054 {
                                let v1482 = C::bigendian(ctx, v1469);
                                if let Some(v1483) = v1482 {
                                    let v2035 = C::put_in_reg(ctx, v1471.0);
                                    let v1485 = &constructor_lower_address(ctx, v1469, v1471.1, v1470);
                                    let v2056 = &constructor_vec_store(ctx, v2035, v1485);
                                    let v2057 = constructor_side_effect(ctx, v2056);
                                    let v2058 = Some(v2057);
                                    // Rule at src\isa\s390x\lower.isle line 2716.
                                    return v2058;
                                }
                                let v1490 = C::littleendian(ctx, v1469);
                                if let Some(v1491) = v1490 {
                                    let v2035 = C::put_in_reg(ctx, v1471.0);
                                    let v2059 = &constructor_vec_store_byte_rev(ctx, v2055, v2035, v1469, v1471.1, v1470);
                                    let v2060 = constructor_side_effect(ctx, v2059);
                                    let v2061 = Some(v2060);
                                    // Rule at src\isa\s390x\lower.isle line 2722.
                                    return v2061;
                                }
                            }
                        }
                        _ => {}
                    }
                    let v2022 = C::value_type(ctx, v1471.0);
                    match v2022 {
                        I8 => {
                            let v2023 = &constructor_istore8_impl(ctx, v1469, v1471.0, v1471.1, v1470);
                            let v2024 = constructor_side_effect(ctx, v2023);
                            let v2025 = Some(v2024);
                            // Rule at src\isa\s390x\lower.isle line 2664.
                            return v2025;
                        }
                        I16 => {
                            let v2026 = &constructor_istore16_impl(ctx, v1469, v1471.0, v1471.1, v1470);
                            let v2027 = constructor_side_effect(ctx, v2026);
                            let v2028 = Some(v2027);
                            // Rule at src\isa\s390x\lower.isle line 2668.
                            return v2028;
                        }
                        I32 => {
                            let v2029 = &constructor_istore32_impl(ctx, v1469, v1471.0, v1471.1, v1470);
                            let v2030 = constructor_side_effect(ctx, v2029);
                            let v2031 = Some(v2030);
                            // Rule at src\isa\s390x\lower.isle line 2672.
                            return v2031;
                        }
                        I64 => {
                            let v2032 = &constructor_istore64_impl(ctx, v1469, v1471.0, v1471.1, v1470);
                            let v2033 = constructor_side_effect(ctx, v2032);
                            let v2034 = Some(v2033);
                            // Rule at src\isa\s390x\lower.isle line 2676.
                            return v2034;
                        }
                        F16 => {
                            let v1490 = C::littleendian(ctx, v1469);
                            if let Some(v1491) = v1490 {
                                let v2035 = C::put_in_reg(ctx, v1471.0);
                                let v1485 = &constructor_lower_address(ctx, v1469, v1471.1, v1470);
                                let v2039 = &constructor_vec_store_lane_little(ctx, F16X8, v2035, v1485, 0x0_u8);
                                let v2040 = constructor_side_effect(ctx, v2039);
                                let v2041 = Some(v2040);
                                // Rule at src\isa\s390x\lower.isle line 2686.
                                return v2041;
                            }
                            let v1482 = C::bigendian(ctx, v1469);
                            if let Some(v1483) = v1482 {
                                let v2035 = C::put_in_reg(ctx, v1471.0);
                                let v1485 = &constructor_lower_address(ctx, v1469, v1471.1, v1470);
                                let v2036 = &constructor_vec_store_lane(ctx, F16X8, v2035, v1485, 0x0_u8);
                                let v2037 = constructor_side_effect(ctx, v2036);
                                let v2038 = Some(v2037);
                                // Rule at src\isa\s390x\lower.isle line 2680.
                                return v2038;
                            }
                        }
                        F32 => {
                            let v1490 = C::littleendian(ctx, v1469);
                            if let Some(v1491) = v1490 {
                                let v2035 = C::put_in_reg(ctx, v1471.0);
                                let v1485 = &constructor_lower_address(ctx, v1469, v1471.1, v1470);
                                let v2045 = &constructor_vec_store_lane_little(ctx, F32X4, v2035, v1485, 0x0_u8);
                                let v2046 = constructor_side_effect(ctx, v2045);
                                let v2047 = Some(v2046);
                                // Rule at src\isa\s390x\lower.isle line 2698.
                                return v2047;
                            }
                            let v1482 = C::bigendian(ctx, v1469);
                            if let Some(v1483) = v1482 {
                                let v2035 = C::put_in_reg(ctx, v1471.0);
                                let v1485 = &constructor_lower_address(ctx, v1469, v1471.1, v1470);
                                let v2042 = &constructor_vec_store_lane(ctx, F32X4, v2035, v1485, 0x0_u8);
                                let v2043 = constructor_side_effect(ctx, v2042);
                                let v2044 = Some(v2043);
                                // Rule at src\isa\s390x\lower.isle line 2692.
                                return v2044;
                            }
                        }
                        F64 => {
                            let v1490 = C::littleendian(ctx, v1469);
                            if let Some(v1491) = v1490 {
                                let v2035 = C::put_in_reg(ctx, v1471.0);
                                let v1485 = &constructor_lower_address(ctx, v1469, v1471.1, v1470);
                                let v2051 = &constructor_vec_store_lane_little(ctx, F64X2, v2035, v1485, 0x0_u8);
                                let v2052 = constructor_side_effect(ctx, v2051);
                                let v2053 = Some(v2052);
                                // Rule at src\isa\s390x\lower.isle line 2710.
                                return v2053;
                            }
                            let v1482 = C::bigendian(ctx, v1469);
                            if let Some(v1483) = v1482 {
                                let v2035 = C::put_in_reg(ctx, v1471.0);
                                let v1485 = &constructor_lower_address(ctx, v1469, v1471.1, v1470);
                                let v2048 = &constructor_vec_store_lane(ctx, F64X2, v2035, v1485, 0x0_u8);
                                let v2049 = constructor_side_effect(ctx, v2048);
                                let v2050 = Some(v2049);
                                // Rule at src\isa\s390x\lower.isle line 2704.
                                return v2050;
                            }
                        }
                        _ => {}
                    }
                }
                &Opcode::Istore8 => {
                    let v1471 = C::unpack_value_array_2(ctx, v1468);
                    let v2023 = &constructor_istore8_impl(ctx, v1469, v1471.0, v1471.1, v1470);
                    let v2024 = constructor_side_effect(ctx, v2023);
                    let v2025 = Some(v2024);
                    // Rule at src\isa\s390x\lower.isle line 2836.
                    return v2025;
                }
                &Opcode::Istore16 => {
                    let v1471 = C::unpack_value_array_2(ctx, v1468);
                    let v2026 = &constructor_istore16_impl(ctx, v1469, v1471.0, v1471.1, v1470);
                    let v2027 = constructor_side_effect(ctx, v2026);
                    let v2028 = Some(v2027);
                    // Rule at src\isa\s390x\lower.isle line 2854.
                    return v2028;
                }
                &Opcode::Istore32 => {
                    let v1471 = C::unpack_value_array_2(ctx, v1468);
                    let v2029 = &constructor_istore32_impl(ctx, v1469, v1471.0, v1471.1, v1470);
                    let v2030 = constructor_side_effect(ctx, v2029);
                    let v2031 = Some(v2030);
                    // Rule at src\isa\s390x\lower.isle line 2880.
                    return v2031;
                }
                _ => {}
            }
        }
        &InstructionData::StoreNoOffset {
            opcode: ref v2200,
            args: ref v2201,
            flags: v2202,
        } => {
            if let &Opcode::AtomicStore = v2200 {
                let v2203 = C::unpack_value_array_2(ctx, v2201);
                let v2206 = C::value_type(ctx, v2203.0);
                match v2206 {
                    I8 => {
                        let v2173 = C::zero_offset(ctx);
                        let v2207 = &constructor_istore8_impl(ctx, v2202, v2203.0, v2203.1, v2173);
                        let v2208 = constructor_atomic_store_impl(ctx, v2207);
                        let v2209 = Some(v2208);
                        // Rule at src\isa\s390x\lower.isle line 3286.
                        return v2209;
                    }
                    I16 => {
                        let v2173 = C::zero_offset(ctx);
                        let v2210 = &constructor_istore16_impl(ctx, v2202, v2203.0, v2203.1, v2173);
                        let v2211 = constructor_atomic_store_impl(ctx, v2210);
                        let v2212 = Some(v2211);
                        // Rule at src\isa\s390x\lower.isle line 3290.
                        return v2212;
                    }
                    I32 => {
                        let v2173 = C::zero_offset(ctx);
                        let v2213 = &constructor_istore32_impl(ctx, v2202, v2203.0, v2203.1, v2173);
                        let v2214 = constructor_atomic_store_impl(ctx, v2213);
                        let v2215 = Some(v2214);
                        // Rule at src\isa\s390x\lower.isle line 3294.
                        return v2215;
                    }
                    I64 => {
                        let v2173 = C::zero_offset(ctx);
                        let v2216 = &constructor_istore64_impl(ctx, v2202, v2203.0, v2203.1, v2173);
                        let v2217 = constructor_atomic_store_impl(ctx, v2216);
                        let v2218 = Some(v2217);
                        // Rule at src\isa\s390x\lower.isle line 3298.
                        return v2218;
                    }
                    _ => {}
                }
            }
        }
        &InstructionData::Ternary {
            opcode: ref v936,
            args: ref v937,
        } => {
            match v936 {
                &Opcode::Select => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1378 = C::ty_scalar_float(ctx, v3);
                        if let Some(v1379) = v1378 {
                            let v938 = C::unpack_value_array_3(ctx, v937);
                            let v2403 = C::maybe_uextend(ctx, v938.0);
                            if let Some(v2404) = v2403 {
                                let v2405 = C::def_inst(ctx, v2404);
                                if let Some(v2406) = v2405 {
                                    let v2407 = &C::inst_data_value(ctx, v2406);
                                    if let &InstructionData::FloatCompare {
                                        opcode: ref v2408,
                                        args: ref v2409,
                                        cond: ref v2410,
                                    } = v2407 {
                                        if let &Opcode::Fcmp = v2408 {
                                            if let &FloatCC::LessThan = v2410 {
                                                let v2411 = C::unpack_value_array_2(ctx, v2409);
                                                if v938.1 == v2411.1 {
                                                    if v938.2 == v2411.0 {
                                                        let v2419 = C::put_in_reg(ctx, v2411.0);
                                                        let v2420 = C::put_in_reg(ctx, v2411.1);
                                                        let v2421 = constructor_fmax_pseudo_reg(ctx, v1379, v2419, v2420);
                                                        let v2422 = constructor_output_reg(ctx, v2421);
                                                        let v2423 = Some(v2422);
                                                        // Rule at src\isa\s390x\lower.isle line 3758.
                                                        return v2423;
                                                    }
                                                }
                                                if v938.1 == v2411.0 {
                                                    if v938.2 == v2411.1 {
                                                        let v2414 = C::put_in_reg(ctx, v2411.1);
                                                        let v2415 = C::put_in_reg(ctx, v2411.0);
                                                        let v2416 = constructor_fmin_pseudo_reg(ctx, v1379, v2414, v2415);
                                                        let v2417 = constructor_output_reg(ctx, v2416);
                                                        let v2418 = Some(v2417);
                                                        // Rule at src\isa\s390x\lower.isle line 3756.
                                                        return v2418;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let v938 = C::unpack_value_array_3(ctx, v937);
                        let v2399 = &constructor_value_nonzero(ctx, v938.0);
                        let v943 = C::put_in_reg(ctx, v938.1);
                        let v1148 = C::put_in_reg(ctx, v938.2);
                        let v2400 = constructor_select_bool_reg(ctx, v3, v2399, v943, v1148);
                        let v2401 = constructor_output_reg(ctx, v2400);
                        let v2402 = Some(v2401);
                        // Rule at src\isa\s390x\lower.isle line 3751.
                        return v2402;
                    }
                }
                &Opcode::SelectSpectreGuard => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v938 = C::unpack_value_array_3(ctx, v937);
                        let v2399 = &constructor_value_nonzero(ctx, v938.0);
                        let v943 = C::put_in_reg(ctx, v938.1);
                        let v1148 = C::put_in_reg(ctx, v938.2);
                        let v3 = C::value_type(ctx, v2);
                        let v2400 = constructor_select_bool_reg(ctx, v3, v2399, v943, v1148);
                        let v2401 = constructor_output_reg(ctx, v2400);
                        let v2402 = Some(v2401);
                        // Rule at src\isa\s390x\lower.isle line 3767.
                        return v2402;
                    }
                }
                &Opcode::Bitselect => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v182 = C::ty_vec128(ctx, v3);
                        if let Some(v183) = v182 {
                            let v938 = C::unpack_value_array_3(ctx, v937);
                            let v961 = C::def_inst(ctx, v938.0);
                            if let Some(v962) = v961 {
                                let v963 = &C::inst_data_value(ctx, v962);
                                if let &InstructionData::LoadNoOffset {
                                    opcode: ref v964,
                                    arg: v965,
                                    flags: v966,
                                } = v963 {
                                    if let &Opcode::Bitcast = v964 {
                                        let v967 = C::def_inst(ctx, v965);
                                        if let Some(v968) = v967 {
                                            let v969 = &C::inst_data_value(ctx, v968);
                                            if let &InstructionData::FloatCompare {
                                                opcode: ref v970,
                                                args: ref v971,
                                                cond: ref v972,
                                            } = v969 {
                                                if let &Opcode::Fcmp = v970 {
                                                    if let &FloatCC::LessThan = v972 {
                                                        let v973 = C::unpack_value_array_2(ctx, v971);
                                                        if v938.1 == v973.1 {
                                                            if v938.2 == v973.0 {
                                                                let v981 = C::put_in_reg(ctx, v973.0);
                                                                let v982 = C::put_in_reg(ctx, v973.1);
                                                                let v983 = constructor_fmax_pseudo_reg(ctx, v183, v981, v982);
                                                                let v984 = constructor_output_reg(ctx, v983);
                                                                let v985 = Some(v984);
                                                                // Rule at src\isa\s390x\lower.isle line 1156.
                                                                return v985;
                                                            }
                                                        }
                                                        if v938.1 == v973.0 {
                                                            if v938.2 == v973.1 {
                                                                let v976 = C::put_in_reg(ctx, v973.1);
                                                                let v977 = C::put_in_reg(ctx, v973.0);
                                                                let v978 = constructor_fmin_pseudo_reg(ctx, v183, v976, v977);
                                                                let v979 = constructor_output_reg(ctx, v978);
                                                                let v980 = Some(v979);
                                                                // Rule at src\isa\s390x\lower.isle line 1154.
                                                                return v980;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let v78 = C::fits_in_64(ctx, v3);
                        if let Some(v79) = v78 {
                            let v792 = C::mie2_enabled(ctx, v3);
                            if let Some(v793) = v792 {
                                let v938 = C::unpack_value_array_3(ctx, v937);
                                let v942 = C::put_in_reg(ctx, v938.0);
                                let v943 = C::put_in_reg(ctx, v938.1);
                                let v944 = constructor_and_reg(ctx, v79, v943, v942);
                                let v945 = C::put_in_reg(ctx, v938.2);
                                let v946 = constructor_and_not_reg(ctx, v79, v945, v942);
                                let v947 = constructor_or_reg(ctx, v79, v946, v944);
                                let v948 = constructor_output_reg(ctx, v947);
                                let v949 = Some(v948);
                                // Rule at src\isa\s390x\lower.isle line 1136.
                                return v949;
                            }
                            let v797 = C::mie2_disabled(ctx, v3);
                            if let Some(v798) = v797 {
                                let v938 = C::unpack_value_array_3(ctx, v937);
                                let v942 = C::put_in_reg(ctx, v938.0);
                                let v943 = C::put_in_reg(ctx, v938.1);
                                let v944 = constructor_and_reg(ctx, v79, v943, v942);
                                let v945 = C::put_in_reg(ctx, v938.2);
                                let v950 = constructor_not_reg(ctx, v79, v942);
                                let v951 = constructor_and_reg(ctx, v79, v945, v950);
                                let v952 = constructor_or_reg(ctx, v79, v951, v944);
                                let v953 = constructor_output_reg(ctx, v952);
                                let v954 = Some(v953);
                                // Rule at src\isa\s390x\lower.isle line 1143.
                                return v954;
                            }
                        }
                        let v51 = C::vr128_ty(ctx, v3);
                        if let Some(v52) = v51 {
                            let v938 = C::unpack_value_array_3(ctx, v937);
                            let v955 = C::put_in_reg(ctx, v938.1);
                            let v956 = C::put_in_reg(ctx, v938.2);
                            let v957 = C::put_in_reg(ctx, v938.0);
                            let v958 = constructor_vec_select(ctx, v52, v955, v956, v957);
                            let v959 = constructor_output_reg(ctx, v958);
                            let v960 = Some(v959);
                            // Rule at src\isa\s390x\lower.isle line 1150.
                            return v960;
                        }
                    }
                }
                &Opcode::Fma => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v938 = C::unpack_value_array_3(ctx, v937);
                        let v942 = C::put_in_reg(ctx, v938.0);
                        let v943 = C::put_in_reg(ctx, v938.1);
                        let v1148 = C::put_in_reg(ctx, v938.2);
                        let v3 = C::value_type(ctx, v2);
                        let v1149 = constructor_fma_reg(ctx, v3, v942, v943, v1148);
                        let v1150 = constructor_output_reg(ctx, v1149);
                        let v1151 = Some(v1150);
                        // Rule at src\isa\s390x\lower.isle line 1431.
                        return v1151;
                    }
                }
                _ => {}
            }
        }
        &InstructionData::TernaryImm8 {
            opcode: ref v1393,
            args: ref v1394,
            imm: v1395,
        } => {
            if let &Opcode::Insertlane = v1393 {
                let v1396 = C::unpack_value_array_2(ctx, v1394);
                let v1434 = C::sinkable_inst(ctx, v1396.1);
                if let Some(v1435) = v1434 {
                    let v1436 = &C::inst_data_value(ctx, v1435);
                    if let &InstructionData::Load {
                        opcode: ref v1437,
                        arg: v1438,
                        flags: v1439,
                        offset: v1440,
                    } = v1436 {
                        if let &Opcode::Load = v1437 {
                            let v1447 = C::littleendian(ctx, v1439);
                            if let Some(v1448) = v1447 {
                                let v1404 = C::put_in_reg(ctx, v1396.0);
                                let v1443 = &constructor_sink_load(ctx, v1435);
                                let v1399 = C::value_type(ctx, v1396.0);
                                let v1401 = C::u8_from_uimm8(ctx, v1395);
                                let v1406 = C::be_lane_idx(ctx, v1399, v1401);
                                let v1449 = constructor_vec_load_lane_little(ctx, v1399, v1404, v1443, v1406);
                                let v1450 = constructor_output_reg(ctx, v1449);
                                let v1451 = Some(v1450);
                                // Rule at src\isa\s390x\lower.isle line 1817.
                                return v1451;
                            }
                            let v1441 = C::bigendian(ctx, v1439);
                            if let Some(v1442) = v1441 {
                                let v1404 = C::put_in_reg(ctx, v1396.0);
                                let v1443 = &constructor_sink_load(ctx, v1435);
                                let v1399 = C::value_type(ctx, v1396.0);
                                let v1401 = C::u8_from_uimm8(ctx, v1395);
                                let v1406 = C::be_lane_idx(ctx, v1399, v1401);
                                let v1444 = constructor_vec_load_lane(ctx, v1399, v1404, v1443, v1406);
                                let v1445 = constructor_output_reg(ctx, v1444);
                                let v1446 = Some(v1445);
                                // Rule at src\isa\s390x\lower.isle line 1812.
                                return v1446;
                            }
                        }
                    }
                }
                let v1429 = C::i16_from_value(ctx, v1396.1);
                if let Some(v1430) = v1429 {
                    let v1404 = C::put_in_reg(ctx, v1396.0);
                    let v1399 = C::value_type(ctx, v1396.0);
                    let v1401 = C::u8_from_uimm8(ctx, v1395);
                    let v1412 = C::be_lane_idx(ctx, v1399, v1401);
                    let v1431 = constructor_vec_insert_lane_imm(ctx, v1399, v1404, v1430, v1412);
                    let v1432 = constructor_output_reg(ctx, v1431);
                    let v1433 = Some(v1432);
                    // Rule at src\isa\s390x\lower.isle line 1807.
                    return v1433;
                }
                let v1417 = C::def_inst(ctx, v1396.1);
                if let Some(v1418) = v1417 {
                    let v1419 = &C::inst_data_value(ctx, v1418);
                    if let &InstructionData::BinaryImm8 {
                        opcode: ref v1420,
                        arg: v1421,
                        imm: v1422,
                    } = v1419 {
                        if let &Opcode::Extractlane = v1420 {
                            let v1404 = C::put_in_reg(ctx, v1396.0);
                            let v1399 = C::value_type(ctx, v1396.0);
                            let v1401 = C::u8_from_uimm8(ctx, v1395);
                            let v1412 = C::be_lane_idx(ctx, v1399, v1401);
                            let v1424 = C::put_in_reg(ctx, v1421);
                            let v1423 = C::u8_from_uimm8(ctx, v1422);
                            let v1425 = C::be_lane_idx(ctx, v1399, v1423);
                            let v1426 = constructor_vec_move_lane_and_insert(ctx, v1399, v1404, v1412, v1424, v1425);
                            let v1427 = constructor_output_reg(ctx, v1426);
                            let v1428 = Some(v1427);
                            // Rule at src\isa\s390x\lower.isle line 1800.
                            return v1428;
                        }
                    }
                }
                let v1400 = C::value_type(ctx, v1396.1);
                let v1402 = C::ty_int_ref_scalar_64(ctx, v1400);
                if let Some(v1403) = v1402 {
                    let v1404 = C::put_in_reg(ctx, v1396.0);
                    let v1405 = C::put_in_reg(ctx, v1396.1);
                    let v1399 = C::value_type(ctx, v1396.0);
                    let v1401 = C::u8_from_uimm8(ctx, v1395);
                    let v1406 = C::be_lane_idx(ctx, v1399, v1401);
                    let v72 = C::zero_reg(ctx);
                    let v1407 = constructor_vec_insert_lane(ctx, v1399, v1404, v1405, v1406, v72);
                    let v1408 = constructor_output_reg(ctx, v1407);
                    let v1409 = Some(v1408);
                    // Rule at src\isa\s390x\lower.isle line 1787.
                    return v1409;
                }
                let v1410 = C::ty_scalar_float(ctx, v1400);
                if let Some(v1411) = v1410 {
                    let v1404 = C::put_in_reg(ctx, v1396.0);
                    let v1399 = C::value_type(ctx, v1396.0);
                    let v1401 = C::u8_from_uimm8(ctx, v1395);
                    let v1412 = C::be_lane_idx(ctx, v1399, v1401);
                    let v1413 = C::put_in_reg(ctx, v1396.1);
                    let v1414 = constructor_vec_move_lane_and_insert(ctx, v1399, v1404, v1412, v1413, 0x0_u8);
                    let v1415 = constructor_output_reg(ctx, v1414);
                    let v1416 = Some(v1415);
                    // Rule at src\isa\s390x\lower.isle line 1794.
                    return v1416;
                }
            }
        }
        &InstructionData::Trap {
            opcode: ref v2424,
            code: ref v2425,
        } => {
            if let &Opcode::Trap = v2424 {
                let v2426 = &constructor_trap_impl(ctx, v2425);
                let v2427 = constructor_side_effect(ctx, v2426);
                let v2428 = Some(v2427);
                // Rule at src\isa\s390x\lower.isle line 3822.
                return v2428;
            }
        }
        &InstructionData::Unary {
            opcode: ref v63,
            arg: v64,
        } => {
            match v63 {
                &Opcode::Splat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1520 = C::sinkable_inst(ctx, v64);
                        if let Some(v1521) = v1520 {
                            let v1522 = &C::inst_data_value(ctx, v1521);
                            if let &InstructionData::Load {
                                opcode: ref v1523,
                                arg: v1524,
                                flags: v1525,
                                offset: v1526,
                            } = v1522 {
                                if let &Opcode::Load = v1523 {
                                    let v1533 = C::littleendian(ctx, v1525);
                                    if let Some(v1534) = v1533 {
                                        let v1529 = &constructor_sink_load(ctx, v1521);
                                        let v3 = C::value_type(ctx, v2);
                                        let v1535 = constructor_vec_load_replicate_little(ctx, v3, v1529);
                                        let v1536 = constructor_output_reg(ctx, v1535);
                                        let v1537 = Some(v1536);
                                        // Rule at src\isa\s390x\lower.isle line 1984.
                                        return v1537;
                                    }
                                    let v1527 = C::bigendian(ctx, v1525);
                                    if let Some(v1528) = v1527 {
                                        let v1529 = &constructor_sink_load(ctx, v1521);
                                        let v3 = C::value_type(ctx, v2);
                                        let v1530 = constructor_vec_load_replicate(ctx, v3, v1529);
                                        let v1531 = constructor_output_reg(ctx, v1530);
                                        let v1532 = Some(v1531);
                                        // Rule at src\isa\s390x\lower.isle line 1980.
                                        return v1532;
                                    }
                                }
                            }
                        }
                        let v1515 = C::i16_from_value(ctx, v64);
                        if let Some(v1516) = v1515 {
                            let v3 = C::value_type(ctx, v2);
                            let v1517 = constructor_vec_imm_replicate(ctx, v3, v1516);
                            let v1518 = constructor_output_reg(ctx, v1517);
                            let v1519 = Some(v1518);
                            // Rule at src\isa\s390x\lower.isle line 1976.
                            return v1519;
                        }
                        let v309 = C::def_inst(ctx, v64);
                        if let Some(v310) = v309 {
                            let v311 = &C::inst_data_value(ctx, v310);
                            if let &InstructionData::BinaryImm8 {
                                opcode: ref v1506,
                                arg: v1507,
                                imm: v1508,
                            } = v311 {
                                if let &Opcode::Extractlane = v1506 {
                                    let v1510 = C::put_in_reg(ctx, v1507);
                                    let v3 = C::value_type(ctx, v2);
                                    let v1509 = C::u8_from_uimm8(ctx, v1508);
                                    let v1511 = C::be_lane_idx(ctx, v3, v1509);
                                    let v1512 = constructor_vec_replicate_lane(ctx, v3, v1510, v1511);
                                    let v1513 = constructor_output_reg(ctx, v1512);
                                    let v1514 = Some(v1513);
                                    // Rule at src\isa\s390x\lower.isle line 1972.
                                    return v1514;
                                }
                            }
                        }
                        let v65 = C::value_type(ctx, v64);
                        let v1495 = C::ty_int_ref_scalar_64(ctx, v65);
                        if let Some(v1496) = v1495 {
                            let v66 = C::put_in_reg(ctx, v64);
                            let v69 = C::zero_reg(ctx);
                            let v3 = C::value_type(ctx, v2);
                            let v1497 = constructor_vec_insert_lane_undef(ctx, v3, v66, 0x0_u8, v69);
                            let v1498 = constructor_vec_replicate_lane(ctx, v3, v1497, 0x0_u8);
                            let v1499 = constructor_output_reg(ctx, v1498);
                            let v1500 = Some(v1499);
                            // Rule at src\isa\s390x\lower.isle line 1962.
                            return v1500;
                        }
                        let v1501 = C::ty_scalar_float(ctx, v65);
                        if let Some(v1502) = v1501 {
                            let v66 = C::put_in_reg(ctx, v64);
                            let v3 = C::value_type(ctx, v2);
                            let v1503 = constructor_vec_replicate_lane(ctx, v3, v66, 0x0_u8);
                            let v1504 = constructor_output_reg(ctx, v1503);
                            let v1505 = Some(v1504);
                            // Rule at src\isa\s390x\lower.isle line 1967.
                            return v1505;
                        }
                    }
                }
                &Opcode::VanyTrue => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v78 = C::fits_in_64(ctx, v3);
                        if let Some(v79) = v78 {
                            let v2331 = &constructor_vany_true_val(ctx, v64);
                            let v2332 = constructor_lower_bool(ctx, v79, v2331);
                            let v2333 = constructor_output_reg(ctx, v2332);
                            let v2334 = Some(v2333);
                            // Rule at src\isa\s390x\lower.isle line 3610.
                            return v2334;
                        }
                    }
                }
                &Opcode::VallTrue => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v78 = C::fits_in_64(ctx, v3);
                        if let Some(v79) = v78 {
                            let v2327 = &constructor_vall_true_val(ctx, v64);
                            let v2328 = constructor_lower_bool(ctx, v79, v2327);
                            let v2329 = constructor_output_reg(ctx, v2328);
                            let v2330 = Some(v2329);
                            // Rule at src\isa\s390x\lower.isle line 3532.
                            return v2330;
                        }
                    }
                }
                &Opcode::VhighBits => {
                    let v1826 = &C::lane_order(ctx);
                    match v1826 {
                        &LaneOrder::LittleEndian => {
                            let v65 = C::value_type(ctx, v64);
                            let v2335 = C::multi_lane(ctx, v65);
                            if let Some(v2336) = v2335 {
                                match v2336.0 {
                                    0x8_u32 => {
                                        if v2336.1 == 0x10_u32 {
                                            let v2349 = constructor_imm8x16(ctx, 0x0_u8, 0x8_u8, 0x10_u8, 0x18_u8, 0x20_u8, 0x28_u8, 0x30_u8, 0x38_u8, 0x40_u8, 0x48_u8, 0x50_u8, 0x58_u8, 0x60_u8, 0x68_u8, 0x70_u8, 0x78_u8);
                                            let v2350 = constructor_vec_imm(ctx, I8X16, v2349);
                                            let v2351 = C::put_in_reg(ctx, v64);
                                            let v2352 = constructor_vec_bitpermute(ctx, v2351, v2350);
                                            let v502 = C::zero_reg(ctx);
                                            let v2353 = constructor_vec_extract_lane(ctx, I64X2, v2352, 0x0_u8, v502);
                                            let v2354 = constructor_output_reg(ctx, v2353);
                                            let v2355 = Some(v2354);
                                            // Rule at src\isa\s390x\lower.isle line 3686.
                                            return v2355;
                                        }
                                    }
                                    0x10_u32 => {
                                        if v2336.1 == 0x8_u32 {
                                            let v2363 = constructor_imm8x16(ctx, 0x80_u8, 0x80_u8, 0x80_u8, 0x80_u8, 0x80_u8, 0x80_u8, 0x80_u8, 0x80_u8, 0x0_u8, 0x10_u8, 0x20_u8, 0x30_u8, 0x40_u8, 0x50_u8, 0x60_u8, 0x70_u8);
                                            let v2364 = constructor_vec_imm(ctx, I8X16, v2363);
                                            let v2351 = C::put_in_reg(ctx, v64);
                                            let v2365 = constructor_vec_bitpermute(ctx, v2351, v2364);
                                            let v502 = C::zero_reg(ctx);
                                            let v2366 = constructor_vec_extract_lane(ctx, I64X2, v2365, 0x0_u8, v502);
                                            let v2367 = constructor_output_reg(ctx, v2366);
                                            let v2368 = Some(v2367);
                                            // Rule at src\isa\s390x\lower.isle line 3697.
                                            return v2368;
                                        }
                                    }
                                    0x20_u32 => {
                                        if v2336.1 == 0x4_u32 {
                                            let v2375 = constructor_imm8x16(ctx, 0x80_u8, 0x80_u8, 0x80_u8, 0x80_u8, 0x80_u8, 0x80_u8, 0x80_u8, 0x80_u8, 0x80_u8, 0x80_u8, 0x80_u8, 0x80_u8, 0x0_u8, 0x20_u8, 0x40_u8, 0x60_u8);
                                            let v2376 = constructor_vec_imm(ctx, I8X16, v2375);
                                            let v2351 = C::put_in_reg(ctx, v64);
                                            let v2377 = constructor_vec_bitpermute(ctx, v2351, v2376);
                                            let v502 = C::zero_reg(ctx);
                                            let v2378 = constructor_vec_extract_lane(ctx, I64X2, v2377, 0x0_u8, v502);
                                            let v2379 = constructor_output_reg(ctx, v2378);
                                            let v2380 = Some(v2379);
                                            // Rule at src\isa\s390x\lower.isle line 3708.
                                            return v2380;
                                        }
                                    }
                                    0x40_u32 => {
                                        if v2336.1 == 0x2_u32 {
                                            let v2387 = constructor_imm8x16(ctx, 0x80_u8, 0x80_u8, 0x80_u8, 0x80_u8, 0x80_u8, 0x80_u8, 0x80_u8, 0x80_u8, 0x80_u8, 0x80_u8, 0x80_u8, 0x80_u8, 0x80_u8, 0x80_u8, 0x0_u8, 0x40_u8);
                                            let v2388 = constructor_vec_imm(ctx, I8X16, v2387);
                                            let v2351 = C::put_in_reg(ctx, v64);
                                            let v2389 = constructor_vec_bitpermute(ctx, v2351, v2388);
                                            let v502 = C::zero_reg(ctx);
                                            let v2390 = constructor_vec_extract_lane(ctx, I64X2, v2389, 0x0_u8, v502);
                                            let v2391 = constructor_output_reg(ctx, v2390);
                                            let v2392 = Some(v2391);
                                            // Rule at src\isa\s390x\lower.isle line 3719.
                                            return v2392;
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        &LaneOrder::BigEndian => {
                            let v65 = C::value_type(ctx, v64);
                            let v2335 = C::multi_lane(ctx, v65);
                            if let Some(v2336) = v2335 {
                                match v2336.0 {
                                    0x8_u32 => {
                                        if v2336.1 == 0x10_u32 {
                                            let v2356 = constructor_imm8x16(ctx, 0x78_u8, 0x70_u8, 0x68_u8, 0x60_u8, 0x58_u8, 0x50_u8, 0x48_u8, 0x40_u8, 0x38_u8, 0x30_u8, 0x28_u8, 0x20_u8, 0x18_u8, 0x10_u8, 0x8_u8, 0x0_u8);
                                            let v2357 = constructor_vec_imm(ctx, I8X16, v2356);
                                            let v2351 = C::put_in_reg(ctx, v64);
                                            let v2358 = constructor_vec_bitpermute(ctx, v2351, v2357);
                                            let v502 = C::zero_reg(ctx);
                                            let v2359 = constructor_vec_extract_lane(ctx, I64X2, v2358, 0x0_u8, v502);
                                            let v2360 = constructor_output_reg(ctx, v2359);
                                            let v2361 = Some(v2360);
                                            // Rule at src\isa\s390x\lower.isle line 3691.
                                            return v2361;
                                        }
                                    }
                                    0x10_u32 => {
                                        if v2336.1 == 0x8_u32 {
                                            let v2369 = constructor_imm8x16(ctx, 0x80_u8, 0x80_u8, 0x80_u8, 0x80_u8, 0x80_u8, 0x80_u8, 0x80_u8, 0x80_u8, 0x70_u8, 0x60_u8, 0x50_u8, 0x40_u8, 0x30_u8, 0x20_u8, 0x10_u8, 0x0_u8);
                                            let v2370 = constructor_vec_imm(ctx, I8X16, v2369);
                                            let v2351 = C::put_in_reg(ctx, v64);
                                            let v2371 = constructor_vec_bitpermute(ctx, v2351, v2370);
                                            let v502 = C::zero_reg(ctx);
                                            let v2372 = constructor_vec_extract_lane(ctx, I64X2, v2371, 0x0_u8, v502);
                                            let v2373 = constructor_output_reg(ctx, v2372);
                                            let v2374 = Some(v2373);
                                            // Rule at src\isa\s390x\lower.isle line 3702.
                                            return v2374;
                                        }
                                    }
                                    0x20_u32 => {
                                        if v2336.1 == 0x4_u32 {
                                            let v2381 = constructor_imm8x16(ctx, 0x80_u8, 0x80_u8, 0x80_u8, 0x80_u8, 0x80_u8, 0x80_u8, 0x80_u8, 0x80_u8, 0x80_u8, 0x80_u8, 0x80_u8, 0x80_u8, 0x60_u8, 0x40_u8, 0x20_u8, 0x0_u8);
                                            let v2382 = constructor_vec_imm(ctx, I8X16, v2381);
                                            let v2351 = C::put_in_reg(ctx, v64);
                                            let v2383 = constructor_vec_bitpermute(ctx, v2351, v2382);
                                            let v502 = C::zero_reg(ctx);
                                            let v2384 = constructor_vec_extract_lane(ctx, I64X2, v2383, 0x0_u8, v502);
                                            let v2385 = constructor_output_reg(ctx, v2384);
                                            let v2386 = Some(v2385);
                                            // Rule at src\isa\s390x\lower.isle line 3713.
                                            return v2386;
                                        }
                                    }
                                    0x40_u32 => {
                                        if v2336.1 == 0x2_u32 {
                                            let v2393 = constructor_imm8x16(ctx, 0x80_u8, 0x80_u8, 0x80_u8, 0x80_u8, 0x80_u8, 0x80_u8, 0x80_u8, 0x80_u8, 0x80_u8, 0x80_u8, 0x80_u8, 0x80_u8, 0x80_u8, 0x80_u8, 0x40_u8, 0x0_u8);
                                            let v2394 = constructor_vec_imm(ctx, I8X16, v2393);
                                            let v2351 = C::put_in_reg(ctx, v64);
                                            let v2395 = constructor_vec_bitpermute(ctx, v2351, v2394);
                                            let v502 = C::zero_reg(ctx);
                                            let v2396 = constructor_vec_extract_lane(ctx, I64X2, v2395, 0x0_u8, v502);
                                            let v2397 = constructor_output_reg(ctx, v2396);
                                            let v2398 = Some(v2397);
                                            // Rule at src\isa\s390x\lower.isle line 3724.
                                            return v2398;
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        _ => {}
                    }
                }
                &Opcode::Ineg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v78 = C::fits_in_64(ctx, v3);
                        if let Some(v79) = v78 {
                            let v309 = C::def_inst(ctx, v64);
                            if let Some(v310) = v309 {
                                let v311 = &C::inst_data_value(ctx, v310);
                                if let &InstructionData::Unary {
                                    opcode: ref v312,
                                    arg: v313,
                                } = v311 {
                                    if let &Opcode::Sextend = v312 {
                                        let v314 = C::value_type(ctx, v313);
                                        if v314 == I32 {
                                            let v315 = C::put_in_reg(ctx, v313);
                                            let v335 = constructor_neg_reg_sext32(ctx, v79, v315);
                                            let v336 = constructor_output_reg(ctx, v335);
                                            let v337 = Some(v336);
                                            // Rule at src\isa\s390x\lower.isle line 240.
                                            return v337;
                                        }
                                    }
                                }
                            }
                            let v66 = C::put_in_reg(ctx, v64);
                            let v332 = constructor_neg_reg(ctx, v79, v66);
                            let v333 = constructor_output_reg(ctx, v332);
                            let v334 = Some(v333);
                            // Rule at src\isa\s390x\lower.isle line 236.
                            return v334;
                        }
                        let v182 = C::ty_vec128(ctx, v3);
                        if let Some(v183) = v182 {
                            let v66 = C::put_in_reg(ctx, v64);
                            let v338 = constructor_vec_neg(ctx, v183, v66);
                            let v339 = constructor_output_reg(ctx, v338);
                            let v340 = Some(v339);
                            // Rule at src\isa\s390x\lower.isle line 244.
                            return v340;
                        }
                        if v3 == I128 {
                            let v324 = constructor_vec_imm(ctx, I128, 0x0_u128);
                            let v325 = C::put_in_reg(ctx, v64);
                            let v326 = constructor_vec_sub(ctx, I128, v324, v325);
                            let v341 = constructor_output_reg(ctx, v326);
                            let v342 = Some(v341);
                            // Rule at src\isa\s390x\lower.isle line 248.
                            return v342;
                        }
                    }
                }
                &Opcode::Iabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v78 = C::fits_in_64(ctx, v3);
                        if let Some(v79) = v78 {
                            let v309 = C::def_inst(ctx, v64);
                            if let Some(v310) = v309 {
                                let v311 = &C::inst_data_value(ctx, v310);
                                if let &InstructionData::Unary {
                                    opcode: ref v312,
                                    arg: v313,
                                } = v311 {
                                    if let &Opcode::Sextend = v312 {
                                        let v314 = C::value_type(ctx, v313);
                                        if v314 == I32 {
                                            let v315 = C::put_in_reg(ctx, v313);
                                            let v316 = constructor_abs_reg_sext32(ctx, v79, v315);
                                            let v317 = constructor_output_reg(ctx, v316);
                                            let v318 = Some(v317);
                                            // Rule at src\isa\s390x\lower.isle line 216.
                                            return v318;
                                        }
                                    }
                                }
                            }
                            let v304 = constructor_ty_ext32(ctx, v79);
                            let v305 = constructor_put_in_reg_sext32(ctx, v64);
                            let v306 = constructor_abs_reg(ctx, v304, v305);
                            let v307 = constructor_output_reg(ctx, v306);
                            let v308 = Some(v307);
                            // Rule at src\isa\s390x\lower.isle line 212.
                            return v308;
                        }
                        let v182 = C::ty_vec128(ctx, v3);
                        if let Some(v183) = v182 {
                            let v66 = C::put_in_reg(ctx, v64);
                            let v319 = constructor_vec_abs(ctx, v183, v66);
                            let v320 = constructor_output_reg(ctx, v319);
                            let v321 = Some(v320);
                            // Rule at src\isa\s390x\lower.isle line 220.
                            return v321;
                        }
                        if v3 == I128 {
                            let v324 = constructor_vec_imm(ctx, I128, 0x0_u128);
                            let v325 = C::put_in_reg(ctx, v64);
                            let v326 = constructor_vec_sub(ctx, I128, v324, v325);
                            let v327 = constructor_vec_replicate_lane(ctx, I64X2, v325, 0x0_u8);
                            let v328 = constructor_vec_cmph(ctx, I64X2, v324, v327);
                            let v329 = constructor_vec_select(ctx, I128, v326, v325, v328);
                            let v330 = constructor_output_reg(ctx, v329);
                            let v331 = Some(v330);
                            // Rule at src\isa\s390x\lower.isle line 224.
                            return v331;
                        }
                    }
                }
                &Opcode::Bnot => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v309 = C::def_inst(ctx, v64);
                        if let Some(v310) = v309 {
                            let v311 = &C::inst_data_value(ctx, v310);
                            if let &InstructionData::Binary {
                                opcode: ref v805,
                                args: ref v806,
                            } = v311 {
                                if let &Opcode::Bxor = v805 {
                                    let v3 = C::value_type(ctx, v2);
                                    let v51 = C::vr128_ty(ctx, v3);
                                    if let Some(v52) = v51 {
                                        let v807 = C::unpack_value_array_2(ctx, v806);
                                        let v810 = C::put_in_reg(ctx, v807.0);
                                        let v811 = C::put_in_reg(ctx, v807.1);
                                        let v815 = constructor_vec_not_xor(ctx, v52, v810, v811);
                                        let v816 = constructor_output_reg(ctx, v815);
                                        let v817 = Some(v816);
                                        // Rule at src\isa\s390x\lower.isle line 1005.
                                        return v817;
                                    }
                                    let v78 = C::fits_in_64(ctx, v3);
                                    if let Some(v79) = v78 {
                                        let v792 = C::mie2_enabled(ctx, v3);
                                        if let Some(v793) = v792 {
                                            let v807 = C::unpack_value_array_2(ctx, v806);
                                            let v810 = C::put_in_reg(ctx, v807.0);
                                            let v811 = C::put_in_reg(ctx, v807.1);
                                            let v812 = constructor_not_xor_reg(ctx, v79, v810, v811);
                                            let v813 = constructor_output_reg(ctx, v812);
                                            let v814 = Some(v813);
                                            // Rule at src\isa\s390x\lower.isle line 1001.
                                            return v814;
                                        }
                                    }
                                }
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        let v78 = C::fits_in_64(ctx, v3);
                        if let Some(v79) = v78 {
                            let v792 = C::mie2_enabled(ctx, v3);
                            if let Some(v793) = v792 {
                                let v66 = C::put_in_reg(ctx, v64);
                                let v794 = constructor_not_or_reg(ctx, v79, v66, v66);
                                let v795 = constructor_output_reg(ctx, v794);
                                let v796 = Some(v795);
                                // Rule at src\isa\s390x\lower.isle line 987.
                                return v796;
                            }
                            let v797 = C::mie2_disabled(ctx, v3);
                            if let Some(v798) = v797 {
                                let v66 = C::put_in_reg(ctx, v64);
                                let v799 = constructor_not_reg(ctx, v79, v66);
                                let v800 = constructor_output_reg(ctx, v799);
                                let v801 = Some(v800);
                                // Rule at src\isa\s390x\lower.isle line 992.
                                return v801;
                            }
                        }
                        let v51 = C::vr128_ty(ctx, v3);
                        if let Some(v52) = v51 {
                            let v66 = C::put_in_reg(ctx, v64);
                            let v802 = constructor_vec_not(ctx, v52, v66);
                            let v803 = constructor_output_reg(ctx, v802);
                            let v804 = Some(v803);
                            // Rule at src\isa\s390x\lower.isle line 996.
                            return v804;
                        }
                    }
                }
                &Opcode::Bitrev => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v66 = C::put_in_reg(ctx, v64);
                        let v3 = C::value_type(ctx, v2);
                        let v995 = constructor_bitrev_bits(ctx, 0x1_u8, 0xaaaaaaaaaaaaaaaa_u64, v3, v66);
                        let v996 = constructor_bitrev_bits(ctx, 0x2_u8, 0xcccccccccccccccc_u64, v3, v995);
                        let v997 = constructor_bitrev_bits(ctx, 0x4_u8, 0xf0f0f0f0f0f0f0f0_u64, v3, v996);
                        let v998 = constructor_bitrev_bytes(ctx, v3, v997);
                        let v999 = constructor_output_reg(ctx, v998);
                        let v1000 = Some(v999);
                        // Rule at src\isa\s390x\lower.isle line 1169.
                        return v1000;
                    }
                }
                &Opcode::Clz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v78 = C::fits_in_64(ctx, v3);
                        if let Some(v79) = v78 {
                            let v734 = constructor_put_in_reg_zext64(ctx, v64);
                            let v1005 = constructor_clz_reg(ctx, 64_i16, v734);
                            let v1006 = constructor_clz_offset(ctx, v79, v1005);
                            let v1007 = constructor_output_reg(ctx, v1006);
                            let v1008 = Some(v1007);
                            // Rule at src\isa\s390x\lower.isle line 1220.
                            return v1008;
                        }
                        if v3 == I128 {
                            let v66 = C::put_in_reg(ctx, v64);
                            let v1009 = constructor_vec_clz(ctx, I64X2, v66);
                            let v1010 = constructor_vec_imm(ctx, I64X2, 0x0_u128);
                            let v1011 = constructor_vec_permute_dw_imm(ctx, I64X2, v1010, 0x0_u8, v1009, 0x0_u8);
                            let v1012 = constructor_vec_permute_dw_imm(ctx, I64X2, v1010, 0x0_u8, v1009, 0x1_u8);
                            let v1013 = constructor_vec_add(ctx, I64X2, v1011, v1012);
                            let v1015 = constructor_vec_imm_splat(ctx, I64X2, 0x40_u64);
                            let v1016 = constructor_vec_cmpeq(ctx, I64X2, v1011, v1015);
                            let v1017 = constructor_vec_select(ctx, I128, v1013, v1011, v1016);
                            let v1018 = constructor_output_reg(ctx, v1017);
                            let v1019 = Some(v1018);
                            // Rule at src\isa\s390x\lower.isle line 1228.
                            return v1019;
                        }
                    }
                }
                &Opcode::Cls => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v78 = C::fits_in_64(ctx, v3);
                        if let Some(v79) = v78 {
                            let v756 = constructor_put_in_reg_sext64(ctx, v64);
                            let v760 = constructor_ashr_imm(ctx, I64, v756, 0x3f_u8);
                            let v1020 = constructor_xor_reg(ctx, I64, v756, v760);
                            let v1021 = constructor_clz_reg(ctx, 64_i16, v1020);
                            let v1022 = constructor_cls_offset(ctx, v79, v1021);
                            let v1023 = constructor_output_reg(ctx, v1022);
                            let v1024 = Some(v1023);
                            // Rule at src\isa\s390x\lower.isle line 1254.
                            return v1024;
                        }
                        if v3 == I128 {
                            let v66 = C::put_in_reg(ctx, v64);
                            let v1026 = constructor_vec_imm_splat(ctx, I8X16, 0xff_u64);
                            let v1027 = constructor_vec_ashr_by_byte(ctx, v66, v1026);
                            let v1028 = constructor_vec_ashr_by_bit(ctx, v1027, v1026);
                            let v1029 = constructor_vec_xor(ctx, I128, v66, v1028);
                            let v1030 = constructor_vec_clz(ctx, I64X2, v1029);
                            let v1031 = constructor_vec_imm(ctx, I64X2, 0x0_u128);
                            let v1032 = constructor_vec_permute_dw_imm(ctx, I64X2, v1031, 0x0_u8, v1030, 0x0_u8);
                            let v1033 = constructor_vec_permute_dw_imm(ctx, I64X2, v1031, 0x0_u8, v1030, 0x1_u8);
                            let v1034 = constructor_vec_add(ctx, I64X2, v1032, v1033);
                            let v1035 = constructor_vec_imm_splat(ctx, I64X2, 0x40_u64);
                            let v1036 = constructor_vec_cmpeq(ctx, I64X2, v1032, v1035);
                            let v1037 = constructor_vec_select(ctx, I128, v1034, v1032, v1036);
                            let v1038 = constructor_vec_add(ctx, I128, v1037, v1026);
                            let v1039 = constructor_output_reg(ctx, v1038);
                            let v1040 = Some(v1039);
                            // Rule at src\isa\s390x\lower.isle line 1262.
                            return v1040;
                        }
                    }
                }
                &Opcode::Ctz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v727 = C::gpr32_ty(ctx, v3);
                        if let Some(v728) = v727 {
                            let v66 = C::put_in_reg(ctx, v64);
                            let v1041 = constructor_ctz_guardbit(ctx, v728);
                            let v1042 = constructor_or_uimm16shifted(ctx, I64, v66, v1041);
                            let v1043 = constructor_neg_reg(ctx, I64, v1042);
                            let v1044 = constructor_and_reg(ctx, I64, v1042, v1043);
                            let v1045 = constructor_clz_reg(ctx, 64_i16, v1044);
                            let v1047 = constructor_imm(ctx, v728, 0x3f_u64);
                            let v1048 = constructor_sub_reg(ctx, v728, v1047, v1045);
                            let v1049 = constructor_output_reg(ctx, v1048);
                            let v1050 = Some(v1049);
                            // Rule at src\isa\s390x\lower.isle line 1291.
                            return v1050;
                        }
                        let v732 = C::gpr64_ty(ctx, v3);
                        if let Some(v733) = v732 {
                            let v66 = C::put_in_reg(ctx, v64);
                            let v1051 = constructor_neg_reg(ctx, I64, v66);
                            let v1052 = constructor_and_reg(ctx, I64, v66, v1051);
                            let v1054 = constructor_clz_reg(ctx, -1_i16, v1052);
                            let v1055 = constructor_imm(ctx, I64, 0x3f_u64);
                            let v1056 = constructor_sub_reg(ctx, I64, v1055, v1054);
                            let v1057 = constructor_output_reg(ctx, v1056);
                            let v1058 = Some(v1057);
                            // Rule at src\isa\s390x\lower.isle line 1306.
                            return v1058;
                        }
                        if v3 == I128 {
                            let v66 = C::put_in_reg(ctx, v64);
                            let v1059 = constructor_vec_ctz(ctx, I64X2, v66);
                            let v1010 = constructor_vec_imm(ctx, I64X2, 0x0_u128);
                            let v1060 = constructor_vec_permute_dw_imm(ctx, I64X2, v1010, 0x0_u8, v1059, 0x0_u8);
                            let v1061 = constructor_vec_permute_dw_imm(ctx, I64X2, v1010, 0x0_u8, v1059, 0x1_u8);
                            let v1062 = constructor_vec_add(ctx, I64X2, v1060, v1061);
                            let v1015 = constructor_vec_imm_splat(ctx, I64X2, 0x40_u64);
                            let v1063 = constructor_vec_cmpeq(ctx, I64X2, v1061, v1015);
                            let v1064 = constructor_vec_select(ctx, I128, v1062, v1061, v1063);
                            let v1065 = constructor_output_reg(ctx, v1064);
                            let v1066 = Some(v1065);
                            // Rule at src\isa\s390x\lower.isle line 1313.
                            return v1066;
                        }
                    }
                }
                &Opcode::Bswap => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v66 = C::put_in_reg(ctx, v64);
                        let v3 = C::value_type(ctx, v2);
                        let v1001 = constructor_bitrev_bytes(ctx, v3, v66);
                        let v1002 = constructor_output_reg(ctx, v1001);
                        let v1003 = Some(v1002);
                        // Rule at src\isa\s390x\lower.isle line 1204.
                        return v1003;
                    }
                }
                &Opcode::Popcnt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v182 = C::ty_vec128(ctx, v3);
                        if let Some(v183) = v182 {
                            let v66 = C::put_in_reg(ctx, v64);
                            let v1100 = constructor_vec_popcnt(ctx, v183, v66);
                            let v1101 = constructor_output_reg(ctx, v1100);
                            let v1102 = Some(v1101);
                            // Rule at src\isa\s390x\lower.isle line 1361.
                            return v1102;
                        }
                        match v3 {
                            I8 => {
                                let v66 = C::put_in_reg(ctx, v64);
                                let v1067 = constructor_popcnt_byte(ctx, v66);
                                let v1068 = constructor_output_reg(ctx, v1067);
                                let v1069 = Some(v1068);
                                // Rule at src\isa\s390x\lower.isle line 1326.
                                return v1069;
                            }
                            I16 => {
                                let v797 = C::mie2_disabled(ctx, v3);
                                if let Some(v798) = v797 {
                                    let v66 = C::put_in_reg(ctx, v64);
                                    let v1067 = constructor_popcnt_byte(ctx, v66);
                                    let v1074 = constructor_lshr_imm(ctx, I32, v1067, 0x8_u8);
                                    let v1075 = constructor_add_reg(ctx, I32, v1067, v1074);
                                    let v1077 = C::uimm16shifted(ctx, 0xff_u16, 0x0_u8);
                                    let v1078 = constructor_and_uimm16shifted(ctx, I32, v1075, v1077);
                                    let v1079 = constructor_output_reg(ctx, v1078);
                                    let v1080 = Some(v1079);
                                    // Rule at src\isa\s390x\lower.isle line 1342.
                                    return v1080;
                                }
                            }
                            I32 => {
                                let v797 = C::mie2_disabled(ctx, v3);
                                if let Some(v798) = v797 {
                                    let v66 = C::put_in_reg(ctx, v64);
                                    let v1067 = constructor_popcnt_byte(ctx, v66);
                                    let v1082 = constructor_lshl_imm(ctx, I32, v1067, 0x10_u8);
                                    let v1083 = constructor_add_reg(ctx, I32, v1067, v1082);
                                    let v1084 = constructor_lshl_imm(ctx, I32, v1083, 0x8_u8);
                                    let v1085 = constructor_add_reg(ctx, I32, v1083, v1084);
                                    let v1087 = constructor_lshr_imm(ctx, I32, v1085, 0x18_u8);
                                    let v1088 = constructor_output_reg(ctx, v1087);
                                    let v1089 = Some(v1088);
                                    // Rule at src\isa\s390x\lower.isle line 1347.
                                    return v1089;
                                }
                            }
                            I64 => {
                                let v797 = C::mie2_disabled(ctx, v3);
                                if let Some(v798) = v797 {
                                    let v66 = C::put_in_reg(ctx, v64);
                                    let v1067 = constructor_popcnt_byte(ctx, v66);
                                    let v1090 = constructor_lshl_imm(ctx, I64, v1067, 0x20_u8);
                                    let v1091 = constructor_add_reg(ctx, I64, v1067, v1090);
                                    let v1092 = constructor_lshl_imm(ctx, I64, v1091, 0x10_u8);
                                    let v1093 = constructor_add_reg(ctx, I64, v1091, v1092);
                                    let v1094 = constructor_lshl_imm(ctx, I64, v1093, 0x8_u8);
                                    let v1095 = constructor_add_reg(ctx, I64, v1093, v1094);
                                    let v1097 = constructor_lshr_imm(ctx, I64, v1095, 0x38_u8);
                                    let v1098 = constructor_output_reg(ctx, v1097);
                                    let v1099 = Some(v1098);
                                    // Rule at src\isa\s390x\lower.isle line 1353.
                                    return v1099;
                                }
                            }
                            I128 => {
                                let v66 = C::put_in_reg(ctx, v64);
                                let v1103 = constructor_vec_popcnt(ctx, I64X2, v66);
                                let v1010 = constructor_vec_imm(ctx, I64X2, 0x0_u128);
                                let v1104 = constructor_vec_permute_dw_imm(ctx, I64X2, v1010, 0x0_u8, v1103, 0x0_u8);
                                let v1105 = constructor_vec_permute_dw_imm(ctx, I64X2, v1010, 0x0_u8, v1103, 0x1_u8);
                                let v1106 = constructor_vec_add(ctx, I64X2, v1104, v1105);
                                let v1107 = constructor_output_reg(ctx, v1106);
                                let v1108 = Some(v1107);
                                // Rule at src\isa\s390x\lower.isle line 1365.
                                return v1108;
                            }
                            _ => {}
                        }
                        let v78 = C::fits_in_64(ctx, v3);
                        if let Some(v79) = v78 {
                            let v792 = C::mie2_enabled(ctx, v3);
                            if let Some(v793) = v792 {
                                let v734 = constructor_put_in_reg_zext64(ctx, v64);
                                let v1070 = constructor_popcnt_reg(ctx, v734);
                                let v1071 = constructor_output_reg(ctx, v1070);
                                let v1072 = Some(v1071);
                                // Rule at src\isa\s390x\lower.isle line 1331.
                                return v1072;
                            }
                        }
                    }
                }
                &Opcode::Sqrt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v66 = C::put_in_reg(ctx, v64);
                        let v3 = C::value_type(ctx, v2);
                        let v1152 = constructor_sqrt_reg(ctx, v3, v66);
                        let v1153 = constructor_output_reg(ctx, v1152);
                        let v1154 = Some(v1153);
                        // Rule at src\isa\s390x\lower.isle line 1438.
                        return v1154;
                    }
                }
                &Opcode::Fneg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v66 = C::put_in_reg(ctx, v64);
                        let v3 = C::value_type(ctx, v2);
                        let v1155 = constructor_fneg_reg(ctx, v3, v66);
                        let v1156 = constructor_output_reg(ctx, v1155);
                        let v1157 = Some(v1156);
                        // Rule at src\isa\s390x\lower.isle line 1445.
                        return v1157;
                    }
                }
                &Opcode::Fabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v66 = C::put_in_reg(ctx, v64);
                        let v3 = C::value_type(ctx, v2);
                        let v1158 = constructor_fabs_reg(ctx, v3, v66);
                        let v1159 = constructor_output_reg(ctx, v1158);
                        let v1160 = Some(v1159);
                        // Rule at src\isa\s390x\lower.isle line 1452.
                        return v1160;
                    }
                }
                &Opcode::Ceil => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v66 = C::put_in_reg(ctx, v64);
                        let v3 = C::value_type(ctx, v2);
                        let v1161 = constructor_ceil_reg(ctx, v3, v66);
                        let v1162 = constructor_output_reg(ctx, v1161);
                        let v1163 = Some(v1162);
                        // Rule at src\isa\s390x\lower.isle line 1459.
                        return v1163;
                    }
                }
                &Opcode::Floor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v66 = C::put_in_reg(ctx, v64);
                        let v3 = C::value_type(ctx, v2);
                        let v1164 = constructor_floor_reg(ctx, v3, v66);
                        let v1165 = constructor_output_reg(ctx, v1164);
                        let v1166 = Some(v1165);
                        // Rule at src\isa\s390x\lower.isle line 1466.
                        return v1166;
                    }
                }
                &Opcode::Trunc => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v66 = C::put_in_reg(ctx, v64);
                        let v3 = C::value_type(ctx, v2);
                        let v1167 = constructor_trunc_reg(ctx, v3, v66);
                        let v1168 = constructor_output_reg(ctx, v1167);
                        let v1169 = Some(v1168);
                        // Rule at src\isa\s390x\lower.isle line 1473.
                        return v1169;
                    }
                }
                &Opcode::Nearest => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v66 = C::put_in_reg(ctx, v64);
                        let v3 = C::value_type(ctx, v2);
                        let v1170 = constructor_nearest_reg(ctx, v3, v66);
                        let v1171 = constructor_output_reg(ctx, v1170);
                        let v1172 = Some(v1171);
                        // Rule at src\isa\s390x\lower.isle line 1480.
                        return v1172;
                    }
                }
                &Opcode::ScalarToVector => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1520 = C::sinkable_inst(ctx, v64);
                        if let Some(v1521) = v1520 {
                            let v1522 = &C::inst_data_value(ctx, v1521);
                            if let &InstructionData::Load {
                                opcode: ref v1523,
                                arg: v1524,
                                flags: v1525,
                                offset: v1526,
                            } = v1522 {
                                if let &Opcode::Load = v1523 {
                                    let v1533 = C::littleendian(ctx, v1525);
                                    if let Some(v1534) = v1533 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v1538 = constructor_vec_imm(ctx, v3, 0x0_u128);
                                        let v1556 = &constructor_sink_load(ctx, v1521);
                                        let v1539 = C::be_lane_idx(ctx, v3, 0x0_u8);
                                        let v1560 = constructor_vec_load_lane_little(ctx, v3, v1538, v1556, v1539);
                                        let v1561 = constructor_output_reg(ctx, v1560);
                                        let v1562 = Some(v1561);
                                        // Rule at src\isa\s390x\lower.isle line 2045.
                                        return v1562;
                                    }
                                    let v1527 = C::bigendian(ctx, v1525);
                                    if let Some(v1528) = v1527 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v1538 = constructor_vec_imm(ctx, v3, 0x0_u128);
                                        let v1556 = &constructor_sink_load(ctx, v1521);
                                        let v1539 = C::be_lane_idx(ctx, v3, 0x0_u8);
                                        let v1557 = constructor_vec_load_lane(ctx, v3, v1538, v1556, v1539);
                                        let v1558 = constructor_output_reg(ctx, v1557);
                                        let v1559 = Some(v1558);
                                        // Rule at src\isa\s390x\lower.isle line 2041.
                                        return v1559;
                                    }
                                }
                            }
                        }
                        let v1515 = C::i16_from_value(ctx, v64);
                        if let Some(v1516) = v1515 {
                            let v3 = C::value_type(ctx, v2);
                            let v1538 = constructor_vec_imm(ctx, v3, 0x0_u128);
                            let v1552 = C::be_lane_idx(ctx, v3, 0x0_u8);
                            let v1553 = constructor_vec_insert_lane_imm(ctx, v3, v1538, v1516, v1552);
                            let v1554 = constructor_output_reg(ctx, v1553);
                            let v1555 = Some(v1554);
                            // Rule at src\isa\s390x\lower.isle line 2037.
                            return v1555;
                        }
                        let v309 = C::def_inst(ctx, v64);
                        if let Some(v310) = v309 {
                            let v311 = &C::inst_data_value(ctx, v310);
                            if let &InstructionData::BinaryImm8 {
                                opcode: ref v1506,
                                arg: v1507,
                                imm: v1508,
                            } = v311 {
                                if let &Opcode::Extractlane = v1506 {
                                    let v3 = C::value_type(ctx, v2);
                                    let v1543 = C::be_lane_idx(ctx, v3, 0x0_u8);
                                    let v1547 = C::put_in_reg(ctx, v1507);
                                    let v1509 = C::u8_from_uimm8(ctx, v1508);
                                    let v1548 = C::be_lane_idx(ctx, v3, v1509);
                                    let v1549 = constructor_vec_move_lane_and_zero(ctx, v3, v1543, v1547, v1548);
                                    let v1550 = constructor_output_reg(ctx, v1549);
                                    let v1551 = Some(v1550);
                                    // Rule at src\isa\s390x\lower.isle line 2032.
                                    return v1551;
                                }
                            }
                        }
                        let v65 = C::value_type(ctx, v64);
                        let v1495 = C::ty_int_ref_scalar_64(ctx, v65);
                        if let Some(v1496) = v1495 {
                            let v3 = C::value_type(ctx, v2);
                            let v1538 = constructor_vec_imm(ctx, v3, 0x0_u128);
                            let v325 = C::put_in_reg(ctx, v64);
                            let v1539 = C::be_lane_idx(ctx, v3, 0x0_u8);
                            let v72 = C::zero_reg(ctx);
                            let v1540 = constructor_vec_insert_lane(ctx, v3, v1538, v325, v1539, v72);
                            let v1541 = constructor_output_reg(ctx, v1540);
                            let v1542 = Some(v1541);
                            // Rule at src\isa\s390x\lower.isle line 2021.
                            return v1542;
                        }
                        let v1501 = C::ty_scalar_float(ctx, v65);
                        if let Some(v1502) = v1501 {
                            let v3 = C::value_type(ctx, v2);
                            let v1543 = C::be_lane_idx(ctx, v3, 0x0_u8);
                            let v325 = C::put_in_reg(ctx, v64);
                            let v1544 = constructor_vec_move_lane_and_zero(ctx, v3, v1543, v325, 0x0_u8);
                            let v1545 = constructor_output_reg(ctx, v1544);
                            let v1546 = Some(v1545);
                            // Rule at src\isa\s390x\lower.isle line 2027.
                            return v1546;
                        }
                    }
                }
                &Opcode::Bmask => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v986 = &constructor_value_nonzero(ctx, v64);
                        let v3 = C::value_type(ctx, v2);
                        let v987 = constructor_lower_bool_to_mask(ctx, v3, v986);
                        let v988 = constructor_output_reg(ctx, v987);
                        let v989 = Some(v988);
                        // Rule at src\isa\s390x\lower.isle line 1163.
                        return v989;
                    }
                }
                &Opcode::Ireduce => {
                    let v65 = C::value_type(ctx, v64);
                    let v718 = C::fits_in_64(ctx, v65);
                    if let Some(v719) = v718 {
                        let v720 = constructor_output_value(ctx, v64);
                        let v721 = Some(v720);
                        // Rule at src\isa\s390x\lower.isle line 896.
                        return v721;
                    }
                    let v722 = C::vr128_ty(ctx, v65);
                    if let Some(v723) = v722 {
                        let v66 = C::put_in_reg(ctx, v64);
                        let v69 = C::zero_reg(ctx);
                        let v724 = constructor_vec_extract_lane(ctx, I64X2, v66, 0x1_u8, v69);
                        let v725 = constructor_output_reg(ctx, v724);
                        let v726 = Some(v725);
                        // Rule at src\isa\s390x\lower.isle line 900.
                        return v726;
                    }
                }
                &Opcode::SwidenLow => {
                    let v65 = C::value_type(ctx, v64);
                    let v778 = C::ty_vec128(ctx, v65);
                    if let Some(v779) = v778 {
                        let v66 = C::put_in_reg(ctx, v64);
                        let v780 = constructor_vec_unpacks_low_lane_order(ctx, v779, v66);
                        let v781 = constructor_output_reg(ctx, v780);
                        let v782 = Some(v781);
                        // Rule at src\isa\s390x\lower.isle line 962.
                        return v782;
                    }
                }
                &Opcode::SwidenHigh => {
                    let v65 = C::value_type(ctx, v64);
                    let v778 = C::ty_vec128(ctx, v65);
                    if let Some(v779) = v778 {
                        let v66 = C::put_in_reg(ctx, v64);
                        let v783 = constructor_vec_unpacks_high_lane_order(ctx, v779, v66);
                        let v784 = constructor_output_reg(ctx, v783);
                        let v785 = Some(v784);
                        // Rule at src\isa\s390x\lower.isle line 968.
                        return v785;
                    }
                }
                &Opcode::UwidenLow => {
                    let v65 = C::value_type(ctx, v64);
                    let v778 = C::ty_vec128(ctx, v65);
                    if let Some(v779) = v778 {
                        let v66 = C::put_in_reg(ctx, v64);
                        let v786 = constructor_vec_unpacku_low_lane_order(ctx, v779, v66);
                        let v787 = constructor_output_reg(ctx, v786);
                        let v788 = Some(v787);
                        // Rule at src\isa\s390x\lower.isle line 974.
                        return v788;
                    }
                }
                &Opcode::UwidenHigh => {
                    let v65 = C::value_type(ctx, v64);
                    let v778 = C::ty_vec128(ctx, v65);
                    if let Some(v779) = v778 {
                        let v66 = C::put_in_reg(ctx, v64);
                        let v789 = constructor_vec_unpacku_high_lane_order(ctx, v779, v66);
                        let v790 = constructor_output_reg(ctx, v789);
                        let v791 = Some(v790);
                        // Rule at src\isa\s390x\lower.isle line 980.
                        return v791;
                    }
                }
                &Opcode::Uextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v732 = C::gpr64_ty(ctx, v3);
                        if let Some(v733) = v732 {
                            let v734 = constructor_put_in_reg_zext64(ctx, v64);
                            let v735 = constructor_output_reg(ctx, v734);
                            let v736 = Some(v735);
                            // Rule at src\isa\s390x\lower.isle line 911.
                            return v736;
                        }
                        let v727 = C::gpr32_ty(ctx, v3);
                        if let Some(v728) = v727 {
                            let v729 = constructor_put_in_reg_zext32(ctx, v64);
                            let v730 = constructor_output_reg(ctx, v729);
                            let v731 = Some(v730);
                            // Rule at src\isa\s390x\lower.isle line 907.
                            return v731;
                        }
                        if v3 == I128 {
                            let v65 = C::value_type(ctx, v64);
                            match v65 {
                                I8 => {
                                    let v324 = constructor_vec_imm(ctx, I128, 0x0_u128);
                                    let v325 = C::put_in_reg(ctx, v64);
                                    let v738 = C::zero_reg(ctx);
                                    let v739 = constructor_vec_insert_lane(ctx, I8X16, v324, v325, 0xf_u8, v738);
                                    let v740 = constructor_output_reg(ctx, v739);
                                    let v741 = Some(v740);
                                    // Rule at src\isa\s390x\lower.isle line 915.
                                    return v741;
                                }
                                I16 => {
                                    let v324 = constructor_vec_imm(ctx, I128, 0x0_u128);
                                    let v325 = C::put_in_reg(ctx, v64);
                                    let v738 = C::zero_reg(ctx);
                                    let v743 = constructor_vec_insert_lane(ctx, I16X8, v324, v325, 0x7_u8, v738);
                                    let v744 = constructor_output_reg(ctx, v743);
                                    let v745 = Some(v744);
                                    // Rule at src\isa\s390x\lower.isle line 917.
                                    return v745;
                                }
                                I32 => {
                                    let v324 = constructor_vec_imm(ctx, I128, 0x0_u128);
                                    let v325 = C::put_in_reg(ctx, v64);
                                    let v738 = C::zero_reg(ctx);
                                    let v747 = constructor_vec_insert_lane(ctx, I32X4, v324, v325, 0x3_u8, v738);
                                    let v748 = constructor_output_reg(ctx, v747);
                                    let v749 = Some(v748);
                                    // Rule at src\isa\s390x\lower.isle line 919.
                                    return v749;
                                }
                                I64 => {
                                    let v324 = constructor_vec_imm(ctx, I128, 0x0_u128);
                                    let v325 = C::put_in_reg(ctx, v64);
                                    let v738 = C::zero_reg(ctx);
                                    let v750 = constructor_vec_insert_lane(ctx, I64X2, v324, v325, 0x1_u8, v738);
                                    let v751 = constructor_output_reg(ctx, v750);
                                    let v752 = Some(v751);
                                    // Rule at src\isa\s390x\lower.isle line 921.
                                    return v752;
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::Sextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v732 = C::gpr64_ty(ctx, v3);
                        if let Some(v733) = v732 {
                            let v756 = constructor_put_in_reg_sext64(ctx, v64);
                            let v757 = constructor_output_reg(ctx, v756);
                            let v758 = Some(v757);
                            // Rule at src\isa\s390x\lower.isle line 932.
                            return v758;
                        }
                        let v727 = C::gpr32_ty(ctx, v3);
                        if let Some(v728) = v727 {
                            let v753 = constructor_put_in_reg_sext32(ctx, v64);
                            let v754 = constructor_output_reg(ctx, v753);
                            let v755 = Some(v754);
                            // Rule at src\isa\s390x\lower.isle line 928.
                            return v755;
                        }
                        if v3 == I128 {
                            let v756 = constructor_put_in_reg_sext64(ctx, v64);
                            let v760 = constructor_ashr_imm(ctx, I64, v756, 0x3f_u8);
                            let v761 = constructor_mov_to_vec128(ctx, I128, v760, v756);
                            let v762 = constructor_output_reg(ctx, v761);
                            let v763 = Some(v762);
                            // Rule at src\isa\s390x\lower.isle line 936.
                            return v763;
                        }
                    }
                }
                &Opcode::Fpromote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v78 = C::fits_in_64(ctx, v3);
                        if let Some(v79) = v78 {
                            let v66 = C::put_in_reg(ctx, v64);
                            let v65 = C::value_type(ctx, v64);
                            let v1173 = constructor_fpromote_reg(ctx, v79, v65, v66);
                            let v1174 = constructor_output_reg(ctx, v1173);
                            let v1175 = Some(v1174);
                            // Rule at src\isa\s390x\lower.isle line 1487.
                            return v1175;
                        }
                    }
                }
                &Opcode::Fdemote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v78 = C::fits_in_64(ctx, v3);
                        if let Some(v79) = v78 {
                            let v66 = C::put_in_reg(ctx, v64);
                            let v65 = C::value_type(ctx, v64);
                            let v1181 = constructor_fdemote_reg(ctx, v79, v65, &FpuRoundMode::Current, v66);
                            let v1182 = constructor_output_reg(ctx, v1181);
                            let v1183 = Some(v1182);
                            // Rule at src\isa\s390x\lower.isle line 1501.
                            return v1183;
                        }
                    }
                }
                &Opcode::Fvdemote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F32X4 {
                            let v65 = C::value_type(ctx, v64);
                            if v65 == F64X2 {
                                let v66 = C::put_in_reg(ctx, v64);
                                let v1184 = constructor_fdemote_reg(ctx, F32X4, F64X2, &FpuRoundMode::Current, v66);
                                let v1185 = constructor_vec_lshr_imm(ctx, I64X2, v1184, 0x20_u8);
                                let v1186 = constructor_vec_imm(ctx, I64X2, 0x0_u128);
                                let v1187 = constructor_vec_pack_lane_order(ctx, I64X2, v1185, v1186);
                                let v1188 = constructor_output_reg(ctx, v1187);
                                let v1189 = Some(v1188);
                                // Rule at src\isa\s390x\lower.isle line 1508.
                                return v1189;
                            }
                        }
                    }
                }
                &Opcode::FvpromoteLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F64X2 {
                            let v65 = C::value_type(ctx, v64);
                            if v65 == F32X4 {
                                let v66 = C::put_in_reg(ctx, v64);
                                let v325 = C::put_in_reg(ctx, v64);
                                let v1176 = constructor_vec_merge_low_lane_order(ctx, I32X4, v66, v325);
                                let v1177 = constructor_fpromote_reg(ctx, F64X2, F32X4, v1176);
                                let v1178 = constructor_output_reg(ctx, v1177);
                                let v1179 = Some(v1178);
                                // Rule at src\isa\s390x\lower.isle line 1494.
                                return v1179;
                            }
                        }
                    }
                }
                &Opcode::FcvtToUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v78 = C::fits_in_64(ctx, v3);
                        if let Some(v79) = v78 {
                            let v66 = C::put_in_reg(ctx, v64);
                            let v65 = C::value_type(ctx, v64);
                            let v1262 = &constructor_fcmp_reg(ctx, v65, v66, v66);
                            let v1264 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                            let v1265 = &C::trap_code_bad_conversion_to_integer(ctx);
                            let v1266 = constructor_trap_if(ctx, v1262, v1264, v1265);
                            let v1267 = constructor_fcvt_to_uint_ub(ctx, v65, v79);
                            let v1268 = &constructor_fcmp_reg(ctx, v65, v66, v1267);
                            let v1270 = &C::floatcc_as_cond(ctx, &FloatCC::GreaterThanOrEqual);
                            let v1271 = &C::trap_code_integer_overflow(ctx);
                            let v1272 = constructor_trap_if(ctx, v1268, v1270, v1271);
                            let v1273 = constructor_fcvt_to_uint_lb(ctx, v65);
                            let v1274 = &constructor_fcmp_reg(ctx, v65, v66, v1273);
                            let v1276 = &C::floatcc_as_cond(ctx, &FloatCC::LessThanOrEqual);
                            let v1277 = constructor_trap_if(ctx, v1274, v1276, v1271);
                            let v1278 = constructor_fcvt_flt_ty(ctx, v79, v65);
                            let v1279 = constructor_fpromote_reg(ctx, v1278, v65, v66);
                            let v1281 = constructor_fcvt_to_uint_reg(ctx, v1278, &FpuRoundMode::ToZero, v1279);
                            let v1282 = constructor_output_reg(ctx, v1281);
                            let v1283 = Some(v1282);
                            // Rule at src\isa\s390x\lower.isle line 1600.
                            return v1283;
                        }
                    }
                }
                &Opcode::FcvtToSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v78 = C::fits_in_64(ctx, v3);
                        if let Some(v79) = v78 {
                            let v66 = C::put_in_reg(ctx, v64);
                            let v65 = C::value_type(ctx, v64);
                            let v1262 = &constructor_fcmp_reg(ctx, v65, v66, v66);
                            let v1264 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                            let v1265 = &C::trap_code_bad_conversion_to_integer(ctx);
                            let v1266 = constructor_trap_if(ctx, v1262, v1264, v1265);
                            let v1284 = constructor_fcvt_to_sint_ub(ctx, v65, v79);
                            let v1285 = &constructor_fcmp_reg(ctx, v65, v66, v1284);
                            let v1270 = &C::floatcc_as_cond(ctx, &FloatCC::GreaterThanOrEqual);
                            let v1271 = &C::trap_code_integer_overflow(ctx);
                            let v1286 = constructor_trap_if(ctx, v1285, v1270, v1271);
                            let v1287 = constructor_fcvt_to_sint_lb(ctx, v65, v79);
                            let v1288 = &constructor_fcmp_reg(ctx, v65, v66, v1287);
                            let v1276 = &C::floatcc_as_cond(ctx, &FloatCC::LessThanOrEqual);
                            let v1289 = constructor_trap_if(ctx, v1288, v1276, v1271);
                            let v1278 = constructor_fcvt_flt_ty(ctx, v79, v65);
                            let v1279 = constructor_fpromote_reg(ctx, v1278, v65, v66);
                            let v1290 = constructor_fcvt_to_sint_reg(ctx, v1278, &FpuRoundMode::ToZero, v1279);
                            let v1291 = constructor_output_reg(ctx, v1290);
                            let v1292 = Some(v1291);
                            // Rule at src\isa\s390x\lower.isle line 1624.
                            return v1292;
                        }
                    }
                }
                &Opcode::FcvtToUintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32X4 => {
                                let v65 = C::value_type(ctx, v64);
                                if v65 == F32X4 {
                                    let v1206 = C::vxrs_ext2_enabled(ctx, v3);
                                    if let Some(v1207) = v1206 {
                                        let v66 = C::put_in_reg(ctx, v64);
                                        let v1300 = constructor_fcvt_to_uint_reg(ctx, F32X4, &FpuRoundMode::ToZero, v66);
                                        let v1301 = constructor_output_reg(ctx, v1300);
                                        let v1302 = Some(v1301);
                                        // Rule at src\isa\s390x\lower.isle line 1660.
                                        return v1302;
                                    }
                                    let v1211 = C::vxrs_ext2_disabled(ctx, v3);
                                    if let Some(v1212) = v1211 {
                                        let v66 = C::put_in_reg(ctx, v64);
                                        let v325 = C::put_in_reg(ctx, v64);
                                        let v1303 = constructor_vec_merge_high(ctx, I32X4, v66, v325);
                                        let v1304 = constructor_fpromote_reg(ctx, F64X2, F32X4, v1303);
                                        let v1305 = constructor_fcvt_to_uint_reg(ctx, F64X2, &FpuRoundMode::ToZero, v1304);
                                        let v1306 = C::put_in_reg(ctx, v64);
                                        let v1307 = C::put_in_reg(ctx, v64);
                                        let v1308 = constructor_vec_merge_low(ctx, I32X4, v1306, v1307);
                                        let v1309 = constructor_fpromote_reg(ctx, F64X2, F32X4, v1308);
                                        let v1310 = constructor_fcvt_to_uint_reg(ctx, F64X2, &FpuRoundMode::ToZero, v1309);
                                        let v1311 = constructor_vec_pack_usat(ctx, I64X2, v1305, v1310);
                                        let v1312 = constructor_output_reg(ctx, v1311);
                                        let v1313 = Some(v1312);
                                        // Rule at src\isa\s390x\lower.isle line 1665.
                                        return v1313;
                                    }
                                }
                            }
                            I64X2 => {
                                let v65 = C::value_type(ctx, v64);
                                if v65 == F64X2 {
                                    let v66 = C::put_in_reg(ctx, v64);
                                    let v1314 = constructor_fcvt_to_uint_reg(ctx, F64X2, &FpuRoundMode::ToZero, v66);
                                    let v1315 = constructor_output_reg(ctx, v1314);
                                    let v1316 = Some(v1315);
                                    // Rule at src\isa\s390x\lower.isle line 1674.
                                    return v1316;
                                }
                            }
                            _ => {}
                        }
                        let v78 = C::fits_in_64(ctx, v3);
                        if let Some(v79) = v78 {
                            let v66 = C::put_in_reg(ctx, v64);
                            let v65 = C::value_type(ctx, v64);
                            let v1293 = constructor_fcvt_flt_ty(ctx, v79, v65);
                            let v1294 = constructor_fcvt_int_ty(ctx, v79, v65);
                            let v1295 = constructor_fpromote_reg(ctx, v1293, v65, v66);
                            let v1296 = constructor_fcvt_to_uint_reg(ctx, v1293, &FpuRoundMode::ToZero, v1295);
                            let v1297 = constructor_uint_sat_reg(ctx, v79, v1294, v1296);
                            let v1298 = constructor_output_reg(ctx, v1297);
                            let v1299 = Some(v1298);
                            // Rule at src\isa\s390x\lower.isle line 1648.
                            return v1299;
                        }
                    }
                }
                &Opcode::FcvtToSintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32X4 => {
                                let v65 = C::value_type(ctx, v64);
                                if v65 == F32X4 {
                                    let v1206 = C::vxrs_ext2_enabled(ctx, v3);
                                    if let Some(v1207) = v1206 {
                                        let v66 = C::put_in_reg(ctx, v64);
                                        let v1326 = constructor_fcvt_to_sint_reg(ctx, F32X4, &FpuRoundMode::ToZero, v66);
                                        let v1327 = constructor_vec_imm(ctx, I32X4, 0x0_u128);
                                        let v1328 = C::put_in_reg(ctx, v64);
                                        let v1216 = C::put_in_reg(ctx, v64);
                                        let v1329 = constructor_vec_fcmpeq(ctx, F32X4, v1328, v1216);
                                        let v1330 = constructor_vec_select(ctx, I32X4, v1326, v1327, v1329);
                                        let v1331 = constructor_output_reg(ctx, v1330);
                                        let v1332 = Some(v1331);
                                        // Rule at src\isa\s390x\lower.isle line 1700.
                                        return v1332;
                                    }
                                    let v1211 = C::vxrs_ext2_disabled(ctx, v3);
                                    if let Some(v1212) = v1211 {
                                        let v66 = C::put_in_reg(ctx, v64);
                                        let v325 = C::put_in_reg(ctx, v64);
                                        let v1303 = constructor_vec_merge_high(ctx, I32X4, v66, v325);
                                        let v1304 = constructor_fpromote_reg(ctx, F64X2, F32X4, v1303);
                                        let v1333 = constructor_fcvt_to_sint_reg(ctx, F64X2, &FpuRoundMode::ToZero, v1304);
                                        let v1306 = C::put_in_reg(ctx, v64);
                                        let v1307 = C::put_in_reg(ctx, v64);
                                        let v1308 = constructor_vec_merge_low(ctx, I32X4, v1306, v1307);
                                        let v1309 = constructor_fpromote_reg(ctx, F64X2, F32X4, v1308);
                                        let v1334 = constructor_fcvt_to_sint_reg(ctx, F64X2, &FpuRoundMode::ToZero, v1309);
                                        let v1335 = constructor_vec_pack_ssat(ctx, I64X2, v1333, v1334);
                                        let v1336 = constructor_vec_imm(ctx, I32X4, 0x0_u128);
                                        let v1337 = C::put_in_reg(ctx, v64);
                                        let v1338 = C::put_in_reg(ctx, v64);
                                        let v1339 = constructor_vec_fcmpeq(ctx, F32X4, v1337, v1338);
                                        let v1340 = constructor_vec_select(ctx, I32X4, v1335, v1336, v1339);
                                        let v1341 = constructor_output_reg(ctx, v1340);
                                        let v1342 = Some(v1341);
                                        // Rule at src\isa\s390x\lower.isle line 1708.
                                        return v1342;
                                    }
                                }
                            }
                            I64X2 => {
                                let v65 = C::value_type(ctx, v64);
                                if v65 == F64X2 {
                                    let v66 = C::put_in_reg(ctx, v64);
                                    let v1343 = constructor_fcvt_to_sint_reg(ctx, F64X2, &FpuRoundMode::ToZero, v66);
                                    let v1010 = constructor_vec_imm(ctx, I64X2, 0x0_u128);
                                    let v1328 = C::put_in_reg(ctx, v64);
                                    let v1216 = C::put_in_reg(ctx, v64);
                                    let v1344 = constructor_vec_fcmpeq(ctx, F64X2, v1328, v1216);
                                    let v1345 = constructor_vec_select(ctx, I64X2, v1343, v1010, v1344);
                                    let v1346 = constructor_output_reg(ctx, v1345);
                                    let v1347 = Some(v1346);
                                    // Rule at src\isa\s390x\lower.isle line 1720.
                                    return v1347;
                                }
                            }
                            _ => {}
                        }
                        let v78 = C::fits_in_64(ctx, v3);
                        if let Some(v79) = v78 {
                            let v66 = C::put_in_reg(ctx, v64);
                            let v65 = C::value_type(ctx, v64);
                            let v1293 = constructor_fcvt_flt_ty(ctx, v79, v65);
                            let v1294 = constructor_fcvt_int_ty(ctx, v79, v65);
                            let v1295 = constructor_fpromote_reg(ctx, v1293, v65, v66);
                            let v1317 = constructor_fcvt_to_sint_reg(ctx, v1293, &FpuRoundMode::ToZero, v1295);
                            let v1318 = &constructor_fcmp_reg(ctx, v65, v66, v66);
                            let v1319 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                            let v1321 = &constructor_cmov_imm(ctx, v1294, v1319, 0_i16, v1317);
                            let v1322 = constructor_with_flags_reg(ctx, v1318, v1321);
                            let v1323 = constructor_sint_sat_reg(ctx, v79, v1294, v1322);
                            let v1324 = constructor_output_reg(ctx, v1323);
                            let v1325 = Some(v1324);
                            // Rule at src\isa\s390x\lower.isle line 1681.
                            return v1325;
                        }
                    }
                }
                &Opcode::FcvtFromUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v65 = C::value_type(ctx, v64);
                                let v1190 = C::vxrs_ext2_enabled(ctx, v65);
                                if let Some(v1191) = v1190 {
                                    let v1192 = C::fits_in_32(ctx, v65);
                                    if let Some(v1193) = v1192 {
                                        let v729 = constructor_put_in_reg_zext32(ctx, v64);
                                        let v1195 = constructor_fcvt_from_uint_reg(ctx, F32, &FpuRoundMode::ToNearestTiesToEven, v729);
                                        let v1196 = constructor_output_reg(ctx, v1195);
                                        let v1197 = Some(v1196);
                                        // Rule at src\isa\s390x\lower.isle line 1517.
                                        return v1197;
                                    }
                                }
                                let v718 = C::fits_in_64(ctx, v65);
                                if let Some(v719) = v718 {
                                    let v734 = constructor_put_in_reg_zext64(ctx, v64);
                                    let v1199 = constructor_fcvt_from_uint_reg(ctx, F64, &FpuRoundMode::ShorterPrecision, v734);
                                    let v1200 = constructor_fdemote_reg(ctx, F32, F64, &FpuRoundMode::ToNearestTiesToEven, v1199);
                                    let v1201 = constructor_output_reg(ctx, v1200);
                                    let v1202 = Some(v1201);
                                    // Rule at src\isa\s390x\lower.isle line 1523.
                                    return v1202;
                                }
                            }
                            F64 => {
                                let v65 = C::value_type(ctx, v64);
                                let v718 = C::fits_in_64(ctx, v65);
                                if let Some(v719) = v718 {
                                    let v734 = constructor_put_in_reg_zext64(ctx, v64);
                                    let v1203 = constructor_fcvt_from_uint_reg(ctx, F64, &FpuRoundMode::ToNearestTiesToEven, v734);
                                    let v1204 = constructor_output_reg(ctx, v1203);
                                    let v1205 = Some(v1204);
                                    // Rule at src\isa\s390x\lower.isle line 1529.
                                    return v1205;
                                }
                            }
                            F32X4 => {
                                let v65 = C::value_type(ctx, v64);
                                if v65 == I32X4 {
                                    let v1206 = C::vxrs_ext2_enabled(ctx, v3);
                                    if let Some(v1207) = v1206 {
                                        let v66 = C::put_in_reg(ctx, v64);
                                        let v1208 = constructor_fcvt_from_uint_reg(ctx, F32X4, &FpuRoundMode::ToNearestTiesToEven, v66);
                                        let v1209 = constructor_output_reg(ctx, v1208);
                                        let v1210 = Some(v1209);
                                        // Rule at src\isa\s390x\lower.isle line 1534.
                                        return v1210;
                                    }
                                    let v1211 = C::vxrs_ext2_disabled(ctx, v3);
                                    if let Some(v1212) = v1211 {
                                        let v66 = C::put_in_reg(ctx, v64);
                                        let v1213 = constructor_vec_unpacku_high(ctx, I32X4, v66);
                                        let v1214 = constructor_fcvt_from_uint_reg(ctx, F64X2, &FpuRoundMode::ShorterPrecision, v1213);
                                        let v1215 = constructor_fdemote_reg(ctx, F32X4, F64X2, &FpuRoundMode::ToNearestTiesToEven, v1214);
                                        let v1216 = C::put_in_reg(ctx, v64);
                                        let v1217 = constructor_vec_unpacku_low(ctx, I32X4, v1216);
                                        let v1218 = constructor_fcvt_from_uint_reg(ctx, F64X2, &FpuRoundMode::ShorterPrecision, v1217);
                                        let v1219 = constructor_fdemote_reg(ctx, F32X4, F64X2, &FpuRoundMode::ToNearestTiesToEven, v1218);
                                        let v1229 = constructor_imm8x16(ctx, 0x0_u8, 0x1_u8, 0x2_u8, 0x3_u8, 0x8_u8, 0x9_u8, 0xa_u8, 0xb_u8, 0x10_u8, 0x11_u8, 0x12_u8, 0x13_u8, 0x18_u8, 0x19_u8, 0x1a_u8, 0x1b_u8);
                                        let v1230 = constructor_vec_imm(ctx, I8X16, v1229);
                                        let v1231 = constructor_vec_permute(ctx, F32X4, v1215, v1219, v1230);
                                        let v1232 = constructor_output_reg(ctx, v1231);
                                        let v1233 = Some(v1232);
                                        // Rule at src\isa\s390x\lower.isle line 1539.
                                        return v1233;
                                    }
                                }
                            }
                            F64X2 => {
                                let v65 = C::value_type(ctx, v64);
                                if v65 == I64X2 {
                                    let v66 = C::put_in_reg(ctx, v64);
                                    let v1234 = constructor_fcvt_from_uint_reg(ctx, F64X2, &FpuRoundMode::ToNearestTiesToEven, v66);
                                    let v1235 = constructor_output_reg(ctx, v1234);
                                    let v1236 = Some(v1235);
                                    // Rule at src\isa\s390x\lower.isle line 1551.
                                    return v1236;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::FcvtFromSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v65 = C::value_type(ctx, v64);
                                let v1190 = C::vxrs_ext2_enabled(ctx, v65);
                                if let Some(v1191) = v1190 {
                                    let v1192 = C::fits_in_32(ctx, v65);
                                    if let Some(v1193) = v1192 {
                                        let v753 = constructor_put_in_reg_sext32(ctx, v64);
                                        let v1237 = constructor_fcvt_from_sint_reg(ctx, F32, &FpuRoundMode::ToNearestTiesToEven, v753);
                                        let v1238 = constructor_output_reg(ctx, v1237);
                                        let v1239 = Some(v1238);
                                        // Rule at src\isa\s390x\lower.isle line 1558.
                                        return v1239;
                                    }
                                }
                                let v718 = C::fits_in_64(ctx, v65);
                                if let Some(v719) = v718 {
                                    let v756 = constructor_put_in_reg_sext64(ctx, v64);
                                    let v1240 = constructor_fcvt_from_sint_reg(ctx, F64, &FpuRoundMode::ShorterPrecision, v756);
                                    let v1241 = constructor_fdemote_reg(ctx, F32, F64, &FpuRoundMode::ToNearestTiesToEven, v1240);
                                    let v1242 = constructor_output_reg(ctx, v1241);
                                    let v1243 = Some(v1242);
                                    // Rule at src\isa\s390x\lower.isle line 1564.
                                    return v1243;
                                }
                            }
                            F64 => {
                                let v65 = C::value_type(ctx, v64);
                                let v718 = C::fits_in_64(ctx, v65);
                                if let Some(v719) = v718 {
                                    let v756 = constructor_put_in_reg_sext64(ctx, v64);
                                    let v1244 = constructor_fcvt_from_sint_reg(ctx, F64, &FpuRoundMode::ToNearestTiesToEven, v756);
                                    let v1245 = constructor_output_reg(ctx, v1244);
                                    let v1246 = Some(v1245);
                                    // Rule at src\isa\s390x\lower.isle line 1570.
                                    return v1246;
                                }
                            }
                            F32X4 => {
                                let v65 = C::value_type(ctx, v64);
                                if v65 == I32X4 {
                                    let v1206 = C::vxrs_ext2_enabled(ctx, v3);
                                    if let Some(v1207) = v1206 {
                                        let v66 = C::put_in_reg(ctx, v64);
                                        let v1247 = constructor_fcvt_from_sint_reg(ctx, F32X4, &FpuRoundMode::ToNearestTiesToEven, v66);
                                        let v1248 = constructor_output_reg(ctx, v1247);
                                        let v1249 = Some(v1248);
                                        // Rule at src\isa\s390x\lower.isle line 1575.
                                        return v1249;
                                    }
                                    let v1211 = C::vxrs_ext2_disabled(ctx, v3);
                                    if let Some(v1212) = v1211 {
                                        let v66 = C::put_in_reg(ctx, v64);
                                        let v1250 = constructor_vec_unpacks_high(ctx, I32X4, v66);
                                        let v1251 = constructor_fcvt_from_sint_reg(ctx, F64X2, &FpuRoundMode::ShorterPrecision, v1250);
                                        let v1252 = constructor_fdemote_reg(ctx, F32X4, F64X2, &FpuRoundMode::ToNearestTiesToEven, v1251);
                                        let v1216 = C::put_in_reg(ctx, v64);
                                        let v1253 = constructor_vec_unpacks_low(ctx, I32X4, v1216);
                                        let v1254 = constructor_fcvt_from_sint_reg(ctx, F64X2, &FpuRoundMode::ShorterPrecision, v1253);
                                        let v1255 = constructor_fdemote_reg(ctx, F32X4, F64X2, &FpuRoundMode::ToNearestTiesToEven, v1254);
                                        let v1229 = constructor_imm8x16(ctx, 0x0_u8, 0x1_u8, 0x2_u8, 0x3_u8, 0x8_u8, 0x9_u8, 0xa_u8, 0xb_u8, 0x10_u8, 0x11_u8, 0x12_u8, 0x13_u8, 0x18_u8, 0x19_u8, 0x1a_u8, 0x1b_u8);
                                        let v1230 = constructor_vec_imm(ctx, I8X16, v1229);
                                        let v1256 = constructor_vec_permute(ctx, F32X4, v1252, v1255, v1230);
                                        let v1257 = constructor_output_reg(ctx, v1256);
                                        let v1258 = Some(v1257);
                                        // Rule at src\isa\s390x\lower.isle line 1580.
                                        return v1258;
                                    }
                                }
                            }
                            F64X2 => {
                                let v65 = C::value_type(ctx, v64);
                                if v65 == I64X2 {
                                    let v66 = C::put_in_reg(ctx, v64);
                                    let v1259 = constructor_fcvt_from_sint_reg(ctx, F64X2, &FpuRoundMode::ToNearestTiesToEven, v66);
                                    let v1260 = constructor_output_reg(ctx, v1259);
                                    let v1261 = Some(v1260);
                                    // Rule at src\isa\s390x\lower.isle line 1592.
                                    return v1261;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Isplit => {
                    let v65 = C::value_type(ctx, v64);
                    if v65 == I128 {
                        let v66 = C::put_in_reg(ctx, v64);
                        let v69 = C::zero_reg(ctx);
                        let v70 = constructor_vec_extract_lane(ctx, I64X2, v66, 0x0_u8, v69);
                        let v72 = C::zero_reg(ctx);
                        let v73 = constructor_vec_extract_lane(ctx, I64X2, v66, 0x1_u8, v72);
                        let v74 = C::value_reg(ctx, v73);
                        let v75 = C::value_reg(ctx, v70);
                        let v76 = C::output_pair(ctx, v74, v75);
                        let v77 = Some(v76);
                        // Rule at src\isa\s390x\lower.isle line 62.
                        return v77;
                    }
                }
                _ => {}
            }
        }
        &InstructionData::UnaryConst {
            opcode: ref v34,
            constant_handle: v35,
        } => {
            match v34 {
                &Opcode::F128const => {
                    let v36 = C::u128_from_constant(ctx, v35);
                    if let Some(v37) = v36 {
                        let v39 = C::be_vec_const(ctx, F128, v37);
                        let v40 = constructor_vec_imm(ctx, F128, v39);
                        let v41 = constructor_output_reg(ctx, v40);
                        let v42 = Some(v41);
                        // Rule at src\isa\s390x\lower.isle line 38.
                        return v42;
                    }
                }
                &Opcode::Vconst => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v36 = C::u128_from_constant(ctx, v35);
                        if let Some(v37) = v36 {
                            let v3 = C::value_type(ctx, v2);
                            let v43 = C::be_vec_const(ctx, v3, v37);
                            let v44 = constructor_vec_imm(ctx, v3, v43);
                            let v45 = constructor_output_reg(ctx, v44);
                            let v46 = Some(v45);
                            // Rule at src\isa\s390x\lower.isle line 44.
                            return v46;
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::UnaryGlobalValue {
            opcode: ref v1867,
            global_value: v1868,
        } => {
            match v1867 {
                &Opcode::SymbolValue => {
                    let v1869 = C::symbol_value_data(ctx, v1868);
                    if let Some(v1870) = v1869 {
                        let v1874 = C::reloc_distance_near(ctx, v1870.1);
                        if let Some(v1875) = v1874 {
                            let v1876 = constructor_memarg_symbol_offset(ctx, v1870.2);
                            if let Some(v1877) = v1876 {
                                let v1857 = C::memflags_trusted(ctx);
                                let v1878 = &C::memarg_symbol(ctx, v1870.0, v1877, v1857);
                                let v1879 = constructor_load_addr(ctx, v1878);
                                let v1880 = constructor_output_reg(ctx, v1879);
                                let v1881 = Some(v1880);
                                // Rule at src\isa\s390x\lower.isle line 2277.
                                return v1881;
                            }
                        }
                        let v1882 = SymbolReloc::Absolute {
                            name: v1870.0,
                            offset: v1870.2,
                        };
                        let v1883 = constructor_load_symbol_reloc(ctx, &v1882);
                        let v1884 = constructor_output_reg(ctx, v1883);
                        let v1885 = Some(v1884);
                        // Rule at src\isa\s390x\lower.isle line 2283.
                        return v1885;
                    }
                }
                &Opcode::TlsValue => {
                    let v1869 = C::symbol_value_data(ctx, v1868);
                    if let Some(v1870) = v1869 {
                        if v1870.2 == 0_i64 {
                            let v1886 = C::tls_model_is_elf_gd(ctx);
                            if let Some(v1887) = v1886 {
                                let v1889 = &C::memarg_got(ctx);
                                let v1890 = constructor_load_addr(ctx, v1889);
                                let v1888 = SymbolReloc::TlsGd {
                                    name: v1870.0,
                                };
                                let v1891 = constructor_load_symbol_reloc(ctx, &v1888);
                                let v1892 = constructor_lib_call_tls_get_offset(ctx, v1890, v1891, &v1888);
                                let v1893 = constructor_thread_pointer(ctx);
                                let v1894 = constructor_add_reg(ctx, I64, v1892, v1893);
                                let v1895 = constructor_output_reg(ctx, v1894);
                                let v1896 = Some(v1895);
                                // Rule at src\isa\s390x\lower.isle line 2290.
                                return v1896;
                            }
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::UnaryIeee16 {
            opcode: ref v11,
            imm: v12,
        } => {
            if let &Opcode::F16const = v11 {
                let v13 = C::u16_from_ieee16(ctx, v12);
                let v15 = C::u16_as_u64(ctx, v13);
                let v16 = constructor_imm(ctx, F16, v15);
                let v17 = constructor_output_reg(ctx, v16);
                let v18 = Some(v17);
                // Rule at src\isa\s390x\lower.isle line 20.
                return v18;
            }
        }
        &InstructionData::UnaryIeee32 {
            opcode: ref v19,
            imm: v20,
        } => {
            if let &Opcode::F32const = v19 {
                let v21 = C::u32_from_ieee32(ctx, v20);
                let v23 = C::u32_as_u64(ctx, v21);
                let v24 = constructor_imm(ctx, F32, v23);
                let v25 = constructor_output_reg(ctx, v24);
                let v26 = Some(v25);
                // Rule at src\isa\s390x\lower.isle line 26.
                return v26;
            }
        }
        &InstructionData::UnaryIeee64 {
            opcode: ref v27,
            imm: v28,
        } => {
            if let &Opcode::F64const = v27 {
                let v29 = C::u64_from_ieee64(ctx, v28);
                let v31 = constructor_imm(ctx, F64, v29);
                let v32 = constructor_output_reg(ctx, v31);
                let v33 = Some(v32);
                // Rule at src\isa\s390x\lower.isle line 32.
                return v33;
            }
        }
        &InstructionData::UnaryImm {
            opcode: ref v5,
            imm: v6,
        } => {
            if let &Opcode::Iconst = v5 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v7 = C::u64_from_imm64(ctx, v6);
                    let v8 = constructor_imm(ctx, v3, v7);
                    let v9 = constructor_output_reg(ctx, v8);
                    let v10 = Some(v9);
                    // Rule at src\isa\s390x\lower.isle line 14.
                    return v10;
                }
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term lower_branch.
pub fn constructor_lower_branch<C: Context>(
    ctx: &mut C,
    arg0: Inst,
    arg1: &MachLabelSlice,
) -> Option<Unit> {
    let v1 = &C::inst_data_value(ctx, arg0);
    match v1 {
        &InstructionData::BranchTable {
            opcode: ref v10,
            arg: v11,
            table: v12,
        } => {
            if let &Opcode::BrTable = v10 {
                let v13 = C::jump_table_targets(ctx, arg1);
                if let Some(v14) = v13 {
                    let v17 = constructor_put_in_reg_zext64(ctx, v11);
                    let v19 = C::jump_table_size(ctx, &v14.1);
                    let v20 = &constructor_icmpu_uimm32(ctx, I64, v17, v19);
                    let v22 = &C::intcc_as_cond(ctx, &IntCC::UnsignedGreaterThanOrEqual);
                    let v23 = &constructor_bool(ctx, v20, v22);
                    let v25 = constructor_lshl_imm(ctx, I64, v17, 0x2_u8);
                    let v26 = &constructor_jt_sequence_default_bool(ctx, v25, v14.0, v23, &v14.1);
                    let v27 = constructor_emit_side_effect(ctx, v26);
                    let v28 = Some(v27);
                    // Rule at src\isa\s390x\lower.isle line 3785.
                    return v28;
                }
            }
        }
        &InstructionData::Brif {
            opcode: ref v29,
            arg: v30,
            blocks: ref v31,
        } => {
            if let &Opcode::Brif = v29 {
                let v35 = C::two_targets(ctx, arg1);
                if let Some(v36) = v35 {
                    let v39 = &constructor_value_nonzero(ctx, v30);
                    let v40 = &constructor_cond_br_bool(ctx, v39, v36.0, v36.1);
                    let v41 = constructor_emit_side_effect(ctx, v40);
                    let v42 = Some(v41);
                    // Rule at src\isa\s390x\lower.isle line 3816.
                    return v42;
                }
            }
        }
        &InstructionData::Jump {
            opcode: ref v2,
            destination: v3,
        } => {
            if let &Opcode::Jump = v2 {
                let v5 = C::single_target(ctx, arg1);
                if let Some(v6) = v5 {
                    let v7 = &constructor_jump_impl(ctx, v6);
                    let v8 = constructor_emit_side_effect(ctx, v7);
                    let v9 = Some(v8);
                    // Rule at src\isa\s390x\lower.isle line 3777.
                    return v9;
                }
            }
        }
        &InstructionData::TryCall {
            opcode: ref v43,
            args: v44,
            func_ref: v45,
            exception: v46,
        } => {
            if let &Opcode::TryCall = v43 {
                let v48 = C::func_ref_data(ctx, v45);
                let v52 = C::reloc_distance_near(ctx, v48.2);
                if let Some(v53) = v52 {
                    let v54 = C::abi_sig(ctx, v48.0);
                    let v56 = C::abi_num_args(ctx, v54);
                    let v57 = C::range(ctx, 0x0_usize, v56);
                    let v47 = C::value_list_slice(ctx, v44);
                    let v58 = &constructor_lower_call_args(ctx, v54, v57, v47);
                    let v59 = CallInstDest::Direct {
                        name: v48.1,
                    };
                    let v60 = &constructor_abi_try_call(ctx, v54, &v59, v58, v46, arg1);
                    let v61 = constructor_emit_side_effect(ctx, v60);
                    let v62 = Some(v61);
                    // Rule at src\isa\s390x\lower.isle line 3987.
                    return v62;
                }
                let v54 = C::abi_sig(ctx, v48.0);
                let v56 = C::abi_num_args(ctx, v54);
                let v57 = C::range(ctx, 0x0_usize, v56);
                let v47 = C::value_list_slice(ctx, v44);
                let v58 = &constructor_lower_call_args(ctx, v54, v57, v47);
                let v64 = SymbolReloc::Absolute {
                    name: v48.1,
                    offset: 0_i64,
                };
                let v65 = constructor_load_symbol_reloc(ctx, &v64);
                let v66 = CallInstDest::Indirect {
                    reg: v65,
                };
                let v67 = &constructor_abi_try_call(ctx, v54, &v66, v58, v46, arg1);
                let v68 = constructor_emit_side_effect(ctx, v67);
                let v69 = Some(v68);
                // Rule at src\isa\s390x\lower.isle line 3993.
                return v69;
            }
        }
        &InstructionData::TryCallIndirect {
            opcode: ref v70,
            args: v71,
            exception: v72,
        } => {
            if let &Opcode::TryCallIndirect = v70 {
                let v73 = C::value_list_slice(ctx, v71);
                let v74 = C::value_slice_unwrap(ctx, v73);
                if let Some(v75) = v74 {
                    let v78 = C::exception_sig(ctx, v72);
                    let v79 = C::abi_sig(ctx, v78);
                    let v80 = C::put_in_reg(ctx, v75.0);
                    let v81 = C::abi_num_args(ctx, v79);
                    let v82 = C::range(ctx, 0x0_usize, v81);
                    let v83 = &constructor_lower_call_args(ctx, v79, v82, v75.1);
                    let v84 = CallInstDest::Indirect {
                        reg: v80,
                    };
                    let v85 = &constructor_abi_try_call(ctx, v79, &v84, v83, v72, arg1);
                    let v86 = constructor_emit_side_effect(ctx, v85);
                    let v87 = Some(v86);
                    // Rule at src\isa\s390x\lower.isle line 4000.
                    return v87;
                }
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term vec_mul_impl.
pub fn constructor_vec_mul_impl<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    match arg0 {
        I128 => {
            let v12 = C::zero_reg(ctx);
            let v13 = constructor_vec_extract_lane(ctx, I64X2, arg1, 0x0_u8, v12);
            let v14 = C::zero_reg(ctx);
            let v24 = constructor_vec_extract_lane(ctx, I64X2, arg1, 0x1_u8, v14);
            let v25 = C::zero_reg(ctx);
            let v26 = constructor_vec_extract_lane(ctx, I64X2, arg2, 0x0_u8, v25);
            let v27 = C::zero_reg(ctx);
            let v28 = constructor_vec_extract_lane(ctx, I64X2, arg2, 0x1_u8, v27);
            let v29 = constructor_umul_wide(ctx, v24, v28);
            let v30 = C::regpair_lo(ctx, v29);
            let v31 = C::regpair_hi(ctx, v29);
            let v32 = constructor_mul_reg(ctx, I64, v24, v26);
            let v33 = constructor_mul_reg(ctx, I64, v13, v28);
            let v34 = constructor_add_reg(ctx, I64, v32, v31);
            let v35 = constructor_add_reg(ctx, I64, v33, v34);
            let v36 = constructor_mov_to_vec128(ctx, I64X2, v35, v30);
            // Rule at src\isa\s390x\lower.isle line 410.
            return v36;
        }
        I8X16 => {
            let v4 = constructor_vec_mul(ctx, I8X16, arg1, arg2);
            // Rule at src\isa\s390x\lower.isle line 397.
            return v4;
        }
        I16X8 => {
            let v6 = constructor_vec_mul(ctx, I16X8, arg1, arg2);
            // Rule at src\isa\s390x\lower.isle line 398.
            return v6;
        }
        I32X4 => {
            let v8 = constructor_vec_mul(ctx, I32X4, arg1, arg2);
            // Rule at src\isa\s390x\lower.isle line 399.
            return v8;
        }
        I64X2 => {
            let v12 = C::zero_reg(ctx);
            let v13 = constructor_vec_extract_lane(ctx, I64X2, arg1, 0x0_u8, v12);
            let v14 = C::zero_reg(ctx);
            let v15 = constructor_vec_extract_lane(ctx, I64X2, arg2, 0x0_u8, v14);
            let v16 = constructor_mul_reg(ctx, I64, v13, v15);
            let v18 = C::zero_reg(ctx);
            let v19 = constructor_vec_extract_lane(ctx, I64X2, arg1, 0x1_u8, v18);
            let v20 = C::zero_reg(ctx);
            let v21 = constructor_vec_extract_lane(ctx, I64X2, arg2, 0x1_u8, v20);
            let v22 = constructor_mul_reg(ctx, I64, v19, v21);
            let v23 = constructor_mov_to_vec128(ctx, I64X2, v16, v22);
            // Rule at src\isa\s390x\lower.isle line 402.
            return v23;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_mul_impl", "src\\isa\\s390x\\lower.isle line 392")
}

// Generated as internal constructor for term sqmul_impl.
pub fn constructor_sqmul_impl<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    match arg0 {
        I32X4 => {
            let v4 = constructor_vec_mul_impl(ctx, I32X4, arg1, arg2);
            let v6 = constructor_vec_imm_bit_mask(ctx, I32X4, 0x11_u8, 0x11_u8);
            let v7 = constructor_vec_add(ctx, I32X4, v4, v6);
            let v9 = constructor_vec_ashr_imm(ctx, I32X4, v7, 0xf_u8);
            // Rule at src\isa\s390x\lower.isle line 523.
            return v9;
        }
        I64X2 => {
            let v11 = constructor_vec_mul_impl(ctx, I64X2, arg1, arg2);
            let v13 = constructor_vec_imm_bit_mask(ctx, I64X2, 0x21_u8, 0x21_u8);
            let v14 = constructor_vec_add(ctx, I64X2, v11, v13);
            let v16 = constructor_vec_ashr_imm(ctx, I64X2, v14, 0x1f_u8);
            // Rule at src\isa\s390x\lower.isle line 527.
            return v16;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "sqmul_impl", "src\\isa\\s390x\\lower.isle line 522")
}

// Generated as internal constructor for term div_overflow_check_needed.
pub fn constructor_div_overflow_check_needed<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> bool {
    let v1 = C::i64_from_value(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = constructor_i64_not_neg1(ctx, v2);
        if let Some(v4) = v3 {
            let v5 = false;
            // Rule at src\isa\s390x\lower.isle line 640.
            return v5;
        }
    }
    let v6 = true;
    // Rule at src\isa\s390x\lower.isle line 643.
    return v6;
}

// Generated as internal constructor for term maybe_trap_if_sdiv_overflow.
pub fn constructor_maybe_trap_if_sdiv_overflow<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: Type,
    arg2: Type,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    match arg0 {
        false => {
            let v5 = C::invalid_reg(ctx);
            // Rule at src\isa\s390x\lower.isle line 655.
            return v5;
        }
        true => {
            let v6 = constructor_int_max(ctx, arg2);
            let v7 = constructor_imm(ctx, arg1, v6);
            let v8 = constructor_xor_reg(ctx, arg1, v7, arg3);
            let v9 = constructor_and_reg(ctx, arg1, v8, arg4);
            let v12 = &C::intcc_as_cond(ctx, &IntCC::Equal);
            let v13 = &C::trap_code_integer_overflow(ctx);
            let v14 = constructor_icmps_simm16_and_trap(ctx, arg1, v9, -1_i16, v12, v13);
            // Rule at src\isa\s390x\lower.isle line 656.
            return v14;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "maybe_trap_if_sdiv_overflow", "src\\isa\\s390x\\lower.isle line 654")
}

// Generated as internal constructor for term int_max.
pub fn constructor_int_max<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> u64 {
    match arg0 {
        I8 => {
            // Rule at src\isa\s390x\lower.isle line 663.
            return 0x7f_u64;
        }
        I16 => {
            // Rule at src\isa\s390x\lower.isle line 664.
            return 0x7fff_u64;
        }
        I32 => {
            // Rule at src\isa\s390x\lower.isle line 665.
            return 0x7fffffff_u64;
        }
        I64 => {
            // Rule at src\isa\s390x\lower.isle line 666.
            return 0x7fffffffffffffff_u64;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "int_max", "src\\isa\\s390x\\lower.isle line 662")
}

// Generated as internal constructor for term maybe_avoid_srem_overflow.
pub fn constructor_maybe_avoid_srem_overflow<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: Type,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    match arg0 {
        false => {
            // Rule at src\isa\s390x\lower.isle line 683.
            return arg2;
        }
        true => {
            match arg1 {
                I32 => {
                    // Rule at src\isa\s390x\lower.isle line 684.
                    return arg2;
                }
                I64 => {
                    let v6 = &constructor_icmps_simm16(ctx, I64, arg3, -1_i16);
                    let v8 = &C::intcc_as_cond(ctx, &IntCC::Equal);
                    let v10 = &constructor_cmov_imm(ctx, I64, v8, 0_i16, arg2);
                    let v11 = constructor_with_flags_reg(ctx, v6, v10);
                    // Rule at src\isa\s390x\lower.isle line 685.
                    return v11;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "maybe_avoid_srem_overflow", "src\\isa\\s390x\\lower.isle line 682")
}

// Generated as internal constructor for term bitrev_bits.
pub fn constructor_bitrev_bits<C: Context>(
    ctx: &mut C,
    arg0: u8,
    arg1: u64,
    arg2: Type,
    arg3: Reg,
) -> Reg {
    let v3 = C::fits_in_64(ctx, arg2);
    if let Some(v4) = v3 {
        let v6 = constructor_imm(ctx, v4, arg1);
        let v7 = constructor_ty_ext32(ctx, v4);
        let v8 = constructor_lshl_imm(ctx, v7, arg3, arg0);
        let v9 = constructor_ty_ext32(ctx, v4);
        let v10 = constructor_lshr_imm(ctx, v9, arg3, arg0);
        let v11 = constructor_and_reg(ctx, v4, v8, v6);
        let v12 = constructor_not_reg(ctx, v4, v6);
        let v13 = constructor_and_reg(ctx, v4, v10, v12);
        let v14 = constructor_or_reg(ctx, v4, v11, v13);
        // Rule at src\isa\s390x\lower.isle line 1176.
        return v14;
    }
    let v15 = C::vr128_ty(ctx, arg2);
    if let Some(v16) = v15 {
        let v18 = constructor_vec_imm_splat(ctx, I64X2, arg1);
        let v20 = C::u8_as_u64(ctx, arg0);
        let v21 = constructor_vec_imm_splat(ctx, I8X16, v20);
        let v22 = constructor_vec_lshl_by_bit(ctx, arg3, v21);
        let v23 = constructor_vec_lshr_by_bit(ctx, arg3, v21);
        let v24 = constructor_vec_select(ctx, v16, v22, v23, v18);
        // Rule at src\isa\s390x\lower.isle line 1184.
        return v24;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "bitrev_bits", "src\\isa\\s390x\\lower.isle line 1175")
}

// Generated as internal constructor for term bitrev_bytes.
pub fn constructor_bitrev_bytes<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    match arg0 {
        I8 => {
            // Rule at src\isa\s390x\lower.isle line 1192.
            return arg1;
        }
        I16 => {
            let v3 = constructor_bswap_reg(ctx, I32, arg1);
            let v5 = constructor_lshr_imm(ctx, I32, v3, 0x10_u8);
            // Rule at src\isa\s390x\lower.isle line 1193.
            return v5;
        }
        I32 => {
            let v3 = constructor_bswap_reg(ctx, I32, arg1);
            // Rule at src\isa\s390x\lower.isle line 1194.
            return v3;
        }
        I64 => {
            let v7 = constructor_bswap_reg(ctx, I64, arg1);
            // Rule at src\isa\s390x\lower.isle line 1195.
            return v7;
        }
        I128 => {
            let v26 = constructor_imm8x16(ctx, 0xf_u8, 0xe_u8, 0xd_u8, 0xc_u8, 0xb_u8, 0xa_u8, 0x9_u8, 0x8_u8, 0x7_u8, 0x6_u8, 0x5_u8, 0x4_u8, 0x3_u8, 0x2_u8, 0x1_u8, 0x0_u8);
            let v27 = constructor_vec_imm(ctx, I8X16, v26);
            let v28 = constructor_vec_permute(ctx, I128, arg1, arg1, v27);
            // Rule at src\isa\s390x\lower.isle line 1196.
            return v28;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "bitrev_bytes", "src\\isa\\s390x\\lower.isle line 1191")
}

// Generated as internal constructor for term clz_offset.
pub fn constructor_clz_offset<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    match arg0 {
        I8 => {
            let v4 = constructor_add_simm16(ctx, I8, arg1, -56_i16);
            // Rule at src\isa\s390x\lower.isle line 1213.
            return v4;
        }
        I16 => {
            let v7 = constructor_add_simm16(ctx, I16, arg1, -48_i16);
            // Rule at src\isa\s390x\lower.isle line 1214.
            return v7;
        }
        I32 => {
            let v10 = constructor_add_simm16(ctx, I32, arg1, -32_i16);
            // Rule at src\isa\s390x\lower.isle line 1215.
            return v10;
        }
        I64 => {
            // Rule at src\isa\s390x\lower.isle line 1216.
            return arg1;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "clz_offset", "src\\isa\\s390x\\lower.isle line 1212")
}

// Generated as internal constructor for term cls_offset.
pub fn constructor_cls_offset<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    match arg0 {
        I8 => {
            let v4 = constructor_add_simm16(ctx, I8, arg1, -57_i16);
            // Rule at src\isa\s390x\lower.isle line 1244.
            return v4;
        }
        I16 => {
            let v7 = constructor_add_simm16(ctx, I16, arg1, -49_i16);
            // Rule at src\isa\s390x\lower.isle line 1245.
            return v7;
        }
        I32 => {
            let v10 = constructor_add_simm16(ctx, I32, arg1, -33_i16);
            // Rule at src\isa\s390x\lower.isle line 1246.
            return v10;
        }
        I64 => {
            let v13 = constructor_add_simm16(ctx, I64, arg1, -1_i16);
            // Rule at src\isa\s390x\lower.isle line 1247.
            return v13;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "cls_offset", "src\\isa\\s390x\\lower.isle line 1243")
}

// Generated as internal constructor for term ctz_guardbit.
pub fn constructor_ctz_guardbit<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> UImm16Shifted {
    match arg0 {
        I8 => {
            let v3 = C::uimm16shifted(ctx, 0x100_u16, 0x0_u8);
            // Rule at src\isa\s390x\lower.isle line 1298.
            return v3;
        }
        I16 => {
            let v6 = C::uimm16shifted(ctx, 0x1_u16, 0x10_u8);
            // Rule at src\isa\s390x\lower.isle line 1299.
            return v6;
        }
        I32 => {
            let v8 = C::uimm16shifted(ctx, 0x1_u16, 0x20_u8);
            // Rule at src\isa\s390x\lower.isle line 1300.
            return v8;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "ctz_guardbit", "src\\isa\\s390x\\lower.isle line 1297")
}

// Generated as internal constructor for term vec_move_lane_and_insert.
pub fn constructor_vec_move_lane_and_insert<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u8,
    arg3: Reg,
    arg4: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        if v2.0 == 0x40_u32 {
            match arg2 {
                0x0_u8 => {
                    let v10 = constructor_vec_permute_dw_imm(ctx, arg0, arg3, arg4, arg1, 0x1_u8);
                    // Rule at src\isa\s390x\lower.isle line 1826.
                    return v10;
                }
                0x1_u8 => {
                    let v12 = constructor_vec_permute_dw_imm(ctx, arg0, arg1, 0x0_u8, arg3, arg4);
                    // Rule at src\isa\s390x\lower.isle line 1828.
                    return v12;
                }
                _ => {}
            }
        }
    }
    if arg2 == arg4 {
        let v13 = C::lane_byte_mask(ctx, arg0, arg2);
        let v14 = constructor_vec_imm_byte_mask(ctx, arg0, v13);
        let v15 = constructor_vec_select(ctx, arg0, arg3, arg1, v14);
        // Rule at src\isa\s390x\lower.isle line 1832.
        return v15;
    }
    let v16 = constructor_vec_replicate_lane(ctx, arg0, arg3, arg4);
    let v17 = C::lane_byte_mask(ctx, arg0, arg2);
    let v18 = constructor_vec_imm_byte_mask(ctx, arg0, v17);
    let v19 = constructor_vec_select(ctx, arg0, v16, arg1, v18);
    // Rule at src\isa\s390x\lower.isle line 1837.
    return v19;
}

// Generated as internal constructor for term vec_load_lane_little.
pub fn constructor_vec_load_lane_little<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
    arg3: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8_u32 => {
                let v8 = constructor_vec_load_lane(ctx, arg0, arg1, arg2, arg3);
                // Rule at src\isa\s390x\lower.isle line 1846.
                return v8;
            }
            0x10_u32 => {
                let v9 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v10) = v9 {
                    let v11 = constructor_vec_load_lane_rev(ctx, arg0, arg1, arg2, arg3);
                    // Rule at src\isa\s390x\lower.isle line 1850.
                    return v11;
                }
                let v12 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v13) = v12 {
                    let v14 = constructor_loadrev16(ctx, arg2);
                    let v15 = C::zero_reg(ctx);
                    let v16 = constructor_vec_insert_lane(ctx, arg0, arg1, v14, arg3, v15);
                    // Rule at src\isa\s390x\lower.isle line 1861.
                    return v16;
                }
            }
            0x20_u32 => {
                let v9 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v10) = v9 {
                    let v11 = constructor_vec_load_lane_rev(ctx, arg0, arg1, arg2, arg3);
                    // Rule at src\isa\s390x\lower.isle line 1853.
                    return v11;
                }
                let v12 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v13) = v12 {
                    let v17 = constructor_loadrev32(ctx, arg2);
                    let v15 = C::zero_reg(ctx);
                    let v18 = constructor_vec_insert_lane(ctx, arg0, arg1, v17, arg3, v15);
                    // Rule at src\isa\s390x\lower.isle line 1864.
                    return v18;
                }
            }
            0x40_u32 => {
                let v9 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v10) = v9 {
                    let v11 = constructor_vec_load_lane_rev(ctx, arg0, arg1, arg2, arg3);
                    // Rule at src\isa\s390x\lower.isle line 1856.
                    return v11;
                }
                let v12 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v13) = v12 {
                    let v19 = constructor_loadrev64(ctx, arg2);
                    let v15 = C::zero_reg(ctx);
                    let v20 = constructor_vec_insert_lane(ctx, arg0, arg1, v19, arg3, v15);
                    // Rule at src\isa\s390x\lower.isle line 1867.
                    return v20;
                }
            }
            _ => {}
        }
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_load_lane_little", "src\\isa\\s390x\\lower.isle line 1843")
}

// Generated as internal constructor for term vec_load_lane_little_undef.
pub fn constructor_vec_load_lane_little_undef<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MemArg,
    arg2: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8_u32 => {
                let v7 = constructor_vec_load_lane_undef(ctx, arg0, arg1, arg2);
                // Rule at src\isa\s390x\lower.isle line 1875.
                return v7;
            }
            0x10_u32 => {
                let v8 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v9) = v8 {
                    let v10 = constructor_vec_load_lane_rev_undef(ctx, arg0, arg1, arg2);
                    // Rule at src\isa\s390x\lower.isle line 1879.
                    return v10;
                }
                let v11 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v12) = v11 {
                    let v13 = constructor_loadrev16(ctx, arg1);
                    let v14 = C::zero_reg(ctx);
                    let v15 = constructor_vec_insert_lane_undef(ctx, arg0, v13, arg2, v14);
                    // Rule at src\isa\s390x\lower.isle line 1890.
                    return v15;
                }
            }
            0x20_u32 => {
                let v8 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v9) = v8 {
                    let v10 = constructor_vec_load_lane_rev_undef(ctx, arg0, arg1, arg2);
                    // Rule at src\isa\s390x\lower.isle line 1882.
                    return v10;
                }
                let v11 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v12) = v11 {
                    let v16 = constructor_loadrev32(ctx, arg1);
                    let v14 = C::zero_reg(ctx);
                    let v17 = constructor_vec_insert_lane_undef(ctx, arg0, v16, arg2, v14);
                    // Rule at src\isa\s390x\lower.isle line 1893.
                    return v17;
                }
            }
            0x40_u32 => {
                let v8 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v9) = v8 {
                    let v10 = constructor_vec_load_lane_rev_undef(ctx, arg0, arg1, arg2);
                    // Rule at src\isa\s390x\lower.isle line 1885.
                    return v10;
                }
                let v11 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v12) = v11 {
                    let v18 = constructor_loadrev64(ctx, arg1);
                    let v14 = C::zero_reg(ctx);
                    let v19 = constructor_vec_insert_lane_undef(ctx, arg0, v18, arg2, v14);
                    // Rule at src\isa\s390x\lower.isle line 1896.
                    return v19;
                }
            }
            _ => {}
        }
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_load_lane_little_undef", "src\\isa\\s390x\\lower.isle line 1872")
}

// Generated as internal constructor for term vec_store_lane_little.
pub fn constructor_vec_store_lane_little<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
    arg3: u8,
) -> SideEffectNoResult {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8_u32 => {
                let v8 = &constructor_vec_store_lane(ctx, arg0, arg1, arg2, arg3);
                // Rule at src\isa\s390x\lower.isle line 1933.
                return v8.clone();
            }
            0x10_u32 => {
                let v9 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v10) = v9 {
                    let v11 = &constructor_vec_store_lane_rev(ctx, arg0, arg1, arg2, arg3);
                    // Rule at src\isa\s390x\lower.isle line 1937.
                    return v11.clone();
                }
                let v12 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v13) = v12 {
                    let v14 = C::zero_reg(ctx);
                    let v15 = constructor_vec_extract_lane(ctx, arg0, arg1, arg3, v14);
                    let v16 = &constructor_storerev16(ctx, v15, arg2);
                    // Rule at src\isa\s390x\lower.isle line 1948.
                    return v16.clone();
                }
            }
            0x20_u32 => {
                let v9 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v10) = v9 {
                    let v11 = &constructor_vec_store_lane_rev(ctx, arg0, arg1, arg2, arg3);
                    // Rule at src\isa\s390x\lower.isle line 1940.
                    return v11.clone();
                }
                let v12 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v13) = v12 {
                    let v14 = C::zero_reg(ctx);
                    let v15 = constructor_vec_extract_lane(ctx, arg0, arg1, arg3, v14);
                    let v17 = &constructor_storerev32(ctx, v15, arg2);
                    // Rule at src\isa\s390x\lower.isle line 1951.
                    return v17.clone();
                }
            }
            0x40_u32 => {
                let v9 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v10) = v9 {
                    let v11 = &constructor_vec_store_lane_rev(ctx, arg0, arg1, arg2, arg3);
                    // Rule at src\isa\s390x\lower.isle line 1943.
                    return v11.clone();
                }
                let v12 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v13) = v12 {
                    let v14 = C::zero_reg(ctx);
                    let v15 = constructor_vec_extract_lane(ctx, arg0, arg1, arg3, v14);
                    let v18 = &constructor_storerev64(ctx, v15, arg2);
                    // Rule at src\isa\s390x\lower.isle line 1954.
                    return v18.clone();
                }
            }
            _ => {}
        }
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_store_lane_little", "src\\isa\\s390x\\lower.isle line 1930")
}

// Generated as internal constructor for term vec_load_replicate_little.
pub fn constructor_vec_load_replicate_little<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MemArg,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8_u32 => {
                let v6 = constructor_vec_load_replicate(ctx, arg0, arg1);
                // Rule at src\isa\s390x\lower.isle line 1992.
                return v6;
            }
            0x10_u32 => {
                let v7 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v8) = v7 {
                    let v9 = constructor_vec_load_replicate_rev(ctx, arg0, arg1);
                    // Rule at src\isa\s390x\lower.isle line 1996.
                    return v9;
                }
                let v10 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v11) = v10 {
                    let v13 = constructor_vec_load_lane_little_undef(ctx, arg0, arg1, 0x0_u8);
                    let v14 = constructor_vec_replicate_lane(ctx, arg0, v13, 0x0_u8);
                    // Rule at src\isa\s390x\lower.isle line 2007.
                    return v14;
                }
            }
            0x20_u32 => {
                let v7 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v8) = v7 {
                    let v9 = constructor_vec_load_replicate_rev(ctx, arg0, arg1);
                    // Rule at src\isa\s390x\lower.isle line 1999.
                    return v9;
                }
                let v10 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v11) = v10 {
                    let v13 = constructor_vec_load_lane_little_undef(ctx, arg0, arg1, 0x0_u8);
                    let v14 = constructor_vec_replicate_lane(ctx, arg0, v13, 0x0_u8);
                    // Rule at src\isa\s390x\lower.isle line 2010.
                    return v14;
                }
            }
            0x40_u32 => {
                let v7 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v8) = v7 {
                    let v9 = constructor_vec_load_replicate_rev(ctx, arg0, arg1);
                    // Rule at src\isa\s390x\lower.isle line 2002.
                    return v9;
                }
                let v10 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v11) = v10 {
                    let v13 = constructor_vec_load_lane_little_undef(ctx, arg0, arg1, 0x0_u8);
                    let v14 = constructor_vec_replicate_lane(ctx, arg0, v13, 0x0_u8);
                    // Rule at src\isa\s390x\lower.isle line 2013.
                    return v14;
                }
            }
            _ => {}
        }
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_load_replicate_little", "src\\isa\\s390x\\lower.isle line 1989")
}

// Generated as internal constructor for term vec_move_lane_and_zero.
pub fn constructor_vec_move_lane_and_zero<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: u8,
    arg2: Reg,
    arg3: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        if v2.0 == 0x40_u32 {
            match arg1 {
                0x0_u8 => {
                    let v9 = constructor_vec_imm(ctx, arg0, 0x0_u128);
                    let v11 = constructor_vec_permute_dw_imm(ctx, arg0, arg2, arg3, v9, 0x0_u8);
                    // Rule at src\isa\s390x\lower.isle line 2053.
                    return v11;
                }
                0x1_u8 => {
                    let v9 = constructor_vec_imm(ctx, arg0, 0x0_u128);
                    let v12 = constructor_vec_permute_dw_imm(ctx, arg0, v9, 0x0_u8, arg2, arg3);
                    // Rule at src\isa\s390x\lower.isle line 2055.
                    return v12;
                }
                _ => {}
            }
        }
    }
    if arg1 == arg3 {
        let v13 = C::lane_byte_mask(ctx, arg0, arg1);
        let v14 = constructor_vec_imm_byte_mask(ctx, arg0, v13);
        let v15 = constructor_vec_and(ctx, arg0, arg2, v14);
        // Rule at src\isa\s390x\lower.isle line 2059.
        return v15;
    }
    let v16 = constructor_vec_replicate_lane(ctx, arg0, arg2, arg3);
    let v17 = C::lane_byte_mask(ctx, arg0, arg1);
    let v18 = constructor_vec_imm_byte_mask(ctx, arg0, v17);
    let v19 = constructor_vec_and(ctx, arg0, v16, v18);
    // Rule at src\isa\s390x\lower.isle line 2064.
    return v19;
}

// Generated as internal constructor for term lib_call_tls_get_offset.
pub fn constructor_lib_call_tls_get_offset<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &SymbolReloc,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = C::abi_for_elf_tls_get_offset(ctx);
    let v6 = C::box_symbol_reloc(ctx, arg2);
    let v7 = MInst::ElfTlsGetOffset {
        tls_offset: v4,
        got: arg0,
        got_offset: arg1,
        symbol: v6,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\s390x\lower.isle line 2300.
    return v9;
}

// Generated as internal constructor for term thread_pointer.
pub fn constructor_thread_pointer<C: Context>(
    ctx: &mut C,
) -> Reg {
    let v2 = constructor_load_ar(ctx, 0x0_u8);
    let v4 = constructor_lshl_imm(ctx, I64, v2, 0x20_u8);
    let v6 = constructor_insert_ar(ctx, v4, 0x1_u8);
    // Rule at src\isa\s390x\lower.isle line 2311.
    return v6;
}

// Generated as internal constructor for term vec_load_full_rev.
pub fn constructor_vec_load_full_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Reg {
    let v3 = C::vr128_ty(ctx, arg0);
    if let Some(v4) = v3 {
        let v1 = C::vxrs_ext2_enabled(ctx, arg0);
        if let Some(v2) = v1 {
            let v8 = &constructor_lower_address(ctx, arg1, arg2, arg3);
            let v9 = constructor_vec_loadrev(ctx, v4, v8);
            // Rule at src\isa\s390x\lower.isle line 2394.
            return v9;
        }
        let v10 = C::vxrs_ext2_disabled(ctx, arg0);
        if let Some(v11) = v10 {
            let v13 = &constructor_lower_address_bias(ctx, arg1, arg2, arg3, 0x0_u8);
            let v15 = &constructor_lower_address_bias(ctx, arg1, arg2, arg3, 0x8_u8);
            let v16 = constructor_loadrev64(ctx, v13);
            let v17 = constructor_loadrev64(ctx, v15);
            let v18 = constructor_mov_to_vec128(ctx, v4, v17, v16);
            // Rule at src\isa\s390x\lower.isle line 2398.
            return v18;
        }
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_load_full_rev", "src\\isa\\s390x\\lower.isle line 2391")
}

// Generated as internal constructor for term vec_load_byte_rev.
pub fn constructor_vec_load_byte_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Reg {
    let v8 = C::multi_lane(ctx, arg0);
    if let Some(v9) = v8 {
        match v9.0 {
            0x8_u32 => {
                if v9.1 == 0x10_u32 {
                    let v12 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                    let v13 = constructor_vec_load(ctx, arg0, v12);
                    // Rule at src\isa\s390x\lower.isle line 2418.
                    return v13;
                }
            }
            0x10_u32 => {
                if v9.1 == 0x8_u32 {
                    let v14 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v15) = v14 {
                        let v12 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                        let v18 = constructor_vec_load_byte16rev(ctx, arg0, v12);
                        // Rule at src\isa\s390x\lower.isle line 2428.
                        return v18;
                    }
                    let v19 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v20) = v19 {
                        let v21 = constructor_vec_load_full_rev(ctx, arg0, arg1, arg2, arg3);
                        let v22 = constructor_vec_elt_rev(ctx, arg0, v21);
                        // Rule at src\isa\s390x\lower.isle line 2439.
                        return v22;
                    }
                }
            }
            0x20_u32 => {
                if v9.1 == 0x4_u32 {
                    let v14 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v15) = v14 {
                        let v12 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                        let v17 = constructor_vec_load_byte32rev(ctx, arg0, v12);
                        // Rule at src\isa\s390x\lower.isle line 2425.
                        return v17;
                    }
                    let v19 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v20) = v19 {
                        let v21 = constructor_vec_load_full_rev(ctx, arg0, arg1, arg2, arg3);
                        let v22 = constructor_vec_elt_rev(ctx, arg0, v21);
                        // Rule at src\isa\s390x\lower.isle line 2436.
                        return v22;
                    }
                }
            }
            0x40_u32 => {
                if v9.1 == 0x2_u32 {
                    let v14 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v15) = v14 {
                        let v12 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                        let v16 = constructor_vec_load_byte64rev(ctx, arg0, v12);
                        // Rule at src\isa\s390x\lower.isle line 2422.
                        return v16;
                    }
                    let v19 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v20) = v19 {
                        let v21 = constructor_vec_load_full_rev(ctx, arg0, arg1, arg2, arg3);
                        let v22 = constructor_vec_elt_rev(ctx, arg0, v21);
                        // Rule at src\isa\s390x\lower.isle line 2433.
                        return v22;
                    }
                }
            }
            _ => {}
        }
    }
    match arg0 {
        I128 => {
            let v5 = constructor_vec_load_full_rev(ctx, I128, arg1, arg2, arg3);
            // Rule at src\isa\s390x\lower.isle line 2410.
            return v5;
        }
        F128 => {
            let v7 = constructor_vec_load_full_rev(ctx, F128, arg1, arg2, arg3);
            // Rule at src\isa\s390x\lower.isle line 2414.
            return v7;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_load_byte_rev", "src\\isa\\s390x\\lower.isle line 2407")
}

// Generated as internal constructor for term vec_load_elt_rev.
pub fn constructor_vec_load_elt_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Reg {
    let v9 = C::multi_lane(ctx, arg0);
    if let Some(v10) = v9 {
        match v10.0 {
            0x8_u32 => {
                if v10.1 == 0x10_u32 {
                    let v13 = constructor_vec_load_full_rev(ctx, arg0, arg1, arg2, arg3);
                    // Rule at src\isa\s390x\lower.isle line 2457.
                    return v13;
                }
            }
            0x10_u32 => {
                if v10.1 == 0x8_u32 {
                    let v14 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v15) = v14 {
                        let v5 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                        let v18 = constructor_vec_load_elt16rev(ctx, arg0, v5);
                        // Rule at src\isa\s390x\lower.isle line 2467.
                        return v18;
                    }
                    let v19 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v20) = v19 {
                        let v5 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                        let v21 = constructor_vec_load(ctx, arg0, v5);
                        let v22 = constructor_vec_elt_rev(ctx, arg0, v21);
                        // Rule at src\isa\s390x\lower.isle line 2478.
                        return v22;
                    }
                }
            }
            0x20_u32 => {
                if v10.1 == 0x4_u32 {
                    let v14 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v15) = v14 {
                        let v5 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                        let v17 = constructor_vec_load_elt32rev(ctx, arg0, v5);
                        // Rule at src\isa\s390x\lower.isle line 2464.
                        return v17;
                    }
                    let v19 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v20) = v19 {
                        let v5 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                        let v21 = constructor_vec_load(ctx, arg0, v5);
                        let v22 = constructor_vec_elt_rev(ctx, arg0, v21);
                        // Rule at src\isa\s390x\lower.isle line 2475.
                        return v22;
                    }
                }
            }
            0x40_u32 => {
                if v10.1 == 0x2_u32 {
                    let v14 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v15) = v14 {
                        let v5 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                        let v16 = constructor_vec_load_elt64rev(ctx, arg0, v5);
                        // Rule at src\isa\s390x\lower.isle line 2461.
                        return v16;
                    }
                    let v19 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v20) = v19 {
                        let v5 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                        let v21 = constructor_vec_load(ctx, arg0, v5);
                        let v22 = constructor_vec_elt_rev(ctx, arg0, v21);
                        // Rule at src\isa\s390x\lower.isle line 2472.
                        return v22;
                    }
                }
            }
            _ => {}
        }
    }
    match arg0 {
        I128 => {
            let v5 = &constructor_lower_address(ctx, arg1, arg2, arg3);
            let v6 = constructor_vec_load(ctx, I128, v5);
            // Rule at src\isa\s390x\lower.isle line 2449.
            return v6;
        }
        F128 => {
            let v5 = &constructor_lower_address(ctx, arg1, arg2, arg3);
            let v8 = constructor_vec_load(ctx, F128, v5);
            // Rule at src\isa\s390x\lower.isle line 2453.
            return v8;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_load_elt_rev", "src\\isa\\s390x\\lower.isle line 2445")
}

// Generated as internal constructor for term load_v64.
pub fn constructor_load_v64<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Reg {
    let v6 = &C::lane_order(ctx);
    match v6 {
        &LaneOrder::LittleEndian => {
            let v14 = C::multi_lane(ctx, arg0);
            if let Some(v15) = v14 {
                match v15.0 {
                    0x8_u32 => {
                        if v15.1 == 0x10_u32 {
                            let v8 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                            let v13 = constructor_vec_load_lane_little_undef(ctx, I64X2, v8, 0x0_u8);
                            // Rule at src\isa\s390x\lower.isle line 2629.
                            return v13;
                        }
                    }
                    0x10_u32 => {
                        let v2 = C::bigendian(ctx, arg1);
                        if let Some(v3) = v2 {
                            if v15.1 == 0x8_u32 {
                                let v8 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                                let v13 = constructor_vec_load_lane_little_undef(ctx, I64X2, v8, 0x0_u8);
                                let v21 = constructor_vec_rot_imm(ctx, I16X8, v13, 0x8_u8);
                                // Rule at src\isa\s390x\lower.isle line 2640.
                                return v21;
                            }
                        }
                    }
                    0x20_u32 => {
                        let v2 = C::bigendian(ctx, arg1);
                        if let Some(v3) = v2 {
                            if v15.1 == 0x4_u32 {
                                let v8 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                                let v10 = constructor_vec_load_lane_undef(ctx, I64X2, v8, 0x0_u8);
                                let v24 = constructor_vec_rot_imm(ctx, I64X2, v10, 0x20_u8);
                                // Rule at src\isa\s390x\lower.isle line 2652.
                                return v24;
                            }
                        }
                    }
                    _ => {}
                }
            }
            let v11 = C::littleendian(ctx, arg1);
            if let Some(v12) = v11 {
                let v8 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                let v13 = constructor_vec_load_lane_little_undef(ctx, I64X2, v8, 0x0_u8);
                // Rule at src\isa\s390x\lower.isle line 2619.
                return v13;
            }
        }
        &LaneOrder::BigEndian => {
            let v14 = C::multi_lane(ctx, arg0);
            if let Some(v15) = v14 {
                match v15.0 {
                    0x8_u32 => {
                        if v15.1 == 0x10_u32 {
                            let v8 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                            let v10 = constructor_vec_load_lane_undef(ctx, I64X2, v8, 0x0_u8);
                            // Rule at src\isa\s390x\lower.isle line 2624.
                            return v10;
                        }
                    }
                    0x10_u32 => {
                        let v11 = C::littleendian(ctx, arg1);
                        if let Some(v12) = v11 {
                            if v15.1 == 0x8_u32 {
                                let v8 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                                let v10 = constructor_vec_load_lane_undef(ctx, I64X2, v8, 0x0_u8);
                                let v20 = constructor_vec_rot_imm(ctx, I16X8, v10, 0x8_u8);
                                // Rule at src\isa\s390x\lower.isle line 2634.
                                return v20;
                            }
                        }
                    }
                    0x20_u32 => {
                        let v11 = C::littleendian(ctx, arg1);
                        if let Some(v12) = v11 {
                            if v15.1 == 0x4_u32 {
                                let v8 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                                let v13 = constructor_vec_load_lane_little_undef(ctx, I64X2, v8, 0x0_u8);
                                let v23 = constructor_vec_rot_imm(ctx, I64X2, v13, 0x20_u8);
                                // Rule at src\isa\s390x\lower.isle line 2646.
                                return v23;
                            }
                        }
                    }
                    _ => {}
                }
            }
            let v2 = C::bigendian(ctx, arg1);
            if let Some(v3) = v2 {
                let v8 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                let v10 = constructor_vec_load_lane_undef(ctx, I64X2, v8, 0x0_u8);
                // Rule at src\isa\s390x\lower.isle line 2614.
                return v10;
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "load_v64", "src\\isa\\s390x\\lower.isle line 2611")
}

// Generated as internal constructor for term vec_store_full_rev.
pub fn constructor_vec_store_full_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: MemFlags,
    arg3: Value,
    arg4: Offset32,
) -> SideEffectNoResult {
    let v1 = C::vxrs_ext2_enabled(ctx, arg0);
    if let Some(v2) = v1 {
        let v7 = &constructor_lower_address(ctx, arg2, arg3, arg4);
        let v8 = &constructor_vec_storerev(ctx, arg1, v7);
        // Rule at src\isa\s390x\lower.isle line 2744.
        return v8.clone();
    }
    let v9 = C::vxrs_ext2_disabled(ctx, arg0);
    if let Some(v10) = v9 {
        let v12 = &constructor_lower_address_bias(ctx, arg2, arg3, arg4, 0x0_u8);
        let v14 = &constructor_lower_address_bias(ctx, arg2, arg3, arg4, 0x8_u8);
        let v17 = C::zero_reg(ctx);
        let v18 = constructor_vec_extract_lane(ctx, I64X2, arg1, 0x1_u8, v17);
        let v19 = C::zero_reg(ctx);
        let v20 = constructor_vec_extract_lane(ctx, I64X2, arg1, 0x0_u8, v19);
        let v21 = &constructor_storerev64(ctx, v18, v12);
        let v22 = &constructor_storerev64(ctx, v20, v14);
        let v23 = &constructor_side_effect_concat(ctx, v21, v22);
        // Rule at src\isa\s390x\lower.isle line 2748.
        return v23.clone();
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_store_full_rev", "src\\isa\\s390x\\lower.isle line 2741")
}

// Generated as internal constructor for term vec_store_byte_rev.
pub fn constructor_vec_store_byte_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: MemFlags,
    arg3: Value,
    arg4: Offset32,
) -> SideEffectNoResult {
    let v9 = C::multi_lane(ctx, arg0);
    if let Some(v10) = v9 {
        match v10.0 {
            0x8_u32 => {
                if v10.1 == 0x10_u32 {
                    let v13 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                    let v14 = &constructor_vec_store(ctx, arg1, v13);
                    // Rule at src\isa\s390x\lower.isle line 2769.
                    return v14.clone();
                }
            }
            0x10_u32 => {
                if v10.1 == 0x8_u32 {
                    let v15 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v16) = v15 {
                        let v13 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                        let v19 = &constructor_vec_store_byte16rev(ctx, arg1, v13);
                        // Rule at src\isa\s390x\lower.isle line 2779.
                        return v19.clone();
                    }
                    let v20 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v21) = v20 {
                        let v22 = constructor_vec_elt_rev(ctx, arg0, arg1);
                        let v23 = &constructor_vec_store_full_rev(ctx, arg0, v22, arg2, arg3, arg4);
                        // Rule at src\isa\s390x\lower.isle line 2790.
                        return v23.clone();
                    }
                }
            }
            0x20_u32 => {
                if v10.1 == 0x4_u32 {
                    let v15 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v16) = v15 {
                        let v13 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                        let v18 = &constructor_vec_store_byte32rev(ctx, arg1, v13);
                        // Rule at src\isa\s390x\lower.isle line 2776.
                        return v18.clone();
                    }
                    let v20 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v21) = v20 {
                        let v22 = constructor_vec_elt_rev(ctx, arg0, arg1);
                        let v23 = &constructor_vec_store_full_rev(ctx, arg0, v22, arg2, arg3, arg4);
                        // Rule at src\isa\s390x\lower.isle line 2787.
                        return v23.clone();
                    }
                }
            }
            0x40_u32 => {
                if v10.1 == 0x2_u32 {
                    let v15 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v16) = v15 {
                        let v13 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                        let v17 = &constructor_vec_store_byte64rev(ctx, arg1, v13);
                        // Rule at src\isa\s390x\lower.isle line 2773.
                        return v17.clone();
                    }
                    let v20 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v21) = v20 {
                        let v22 = constructor_vec_elt_rev(ctx, arg0, arg1);
                        let v23 = &constructor_vec_store_full_rev(ctx, arg0, v22, arg2, arg3, arg4);
                        // Rule at src\isa\s390x\lower.isle line 2784.
                        return v23.clone();
                    }
                }
            }
            _ => {}
        }
    }
    match arg0 {
        I128 => {
            let v6 = &constructor_vec_store_full_rev(ctx, I128, arg1, arg2, arg3, arg4);
            // Rule at src\isa\s390x\lower.isle line 2761.
            return v6.clone();
        }
        F128 => {
            let v8 = &constructor_vec_store_full_rev(ctx, F128, arg1, arg2, arg3, arg4);
            // Rule at src\isa\s390x\lower.isle line 2765.
            return v8.clone();
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_store_byte_rev", "src\\isa\\s390x\\lower.isle line 2758")
}

// Generated as internal constructor for term vec_store_elt_rev.
pub fn constructor_vec_store_elt_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: MemFlags,
    arg3: Value,
    arg4: Offset32,
) -> SideEffectNoResult {
    let v7 = C::multi_lane(ctx, arg0);
    if let Some(v8) = v7 {
        match v8.0 {
            0x8_u32 => {
                if v8.1 == 0x10_u32 {
                    let v11 = &constructor_vec_store_full_rev(ctx, arg0, arg1, arg2, arg3, arg4);
                    // Rule at src\isa\s390x\lower.isle line 2807.
                    return v11.clone();
                }
            }
            0x10_u32 => {
                if v8.1 == 0x8_u32 {
                    let v12 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v13) = v12 {
                        let v5 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                        let v16 = &constructor_vec_store_elt16rev(ctx, arg1, v5);
                        // Rule at src\isa\s390x\lower.isle line 2817.
                        return v16.clone();
                    }
                    let v17 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v18) = v17 {
                        let v19 = constructor_vec_elt_rev(ctx, arg0, arg1);
                        let v20 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                        let v21 = &constructor_vec_store(ctx, v19, v20);
                        // Rule at src\isa\s390x\lower.isle line 2828.
                        return v21.clone();
                    }
                }
            }
            0x20_u32 => {
                if v8.1 == 0x4_u32 {
                    let v12 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v13) = v12 {
                        let v5 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                        let v15 = &constructor_vec_store_elt32rev(ctx, arg1, v5);
                        // Rule at src\isa\s390x\lower.isle line 2814.
                        return v15.clone();
                    }
                    let v17 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v18) = v17 {
                        let v19 = constructor_vec_elt_rev(ctx, arg0, arg1);
                        let v20 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                        let v21 = &constructor_vec_store(ctx, v19, v20);
                        // Rule at src\isa\s390x\lower.isle line 2825.
                        return v21.clone();
                    }
                }
            }
            0x40_u32 => {
                if v8.1 == 0x2_u32 {
                    let v12 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v13) = v12 {
                        let v5 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                        let v14 = &constructor_vec_store_elt64rev(ctx, arg1, v5);
                        // Rule at src\isa\s390x\lower.isle line 2811.
                        return v14.clone();
                    }
                    let v17 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v18) = v17 {
                        let v19 = constructor_vec_elt_rev(ctx, arg0, arg1);
                        let v20 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                        let v21 = &constructor_vec_store(ctx, v19, v20);
                        // Rule at src\isa\s390x\lower.isle line 2822.
                        return v21.clone();
                    }
                }
            }
            _ => {}
        }
    }
    match arg0 {
        I128 => {
            let v5 = &constructor_lower_address(ctx, arg2, arg3, arg4);
            let v6 = &constructor_vec_store(ctx, arg1, v5);
            // Rule at src\isa\s390x\lower.isle line 2799.
            return v6.clone();
        }
        F128 => {
            let v5 = &constructor_lower_address(ctx, arg2, arg3, arg4);
            let v6 = &constructor_vec_store(ctx, arg1, v5);
            // Rule at src\isa\s390x\lower.isle line 2803.
            return v6.clone();
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_store_elt_rev", "src\\isa\\s390x\\lower.isle line 2796")
}

// Generated as internal constructor for term istore8_impl.
pub fn constructor_istore8_impl<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Value,
    arg3: Offset32,
) -> SideEffectNoResult {
    let v7 = C::u8_from_value(ctx, arg1);
    if let Some(v8) = v7 {
        let v9 = &constructor_lower_address(ctx, arg0, arg2, arg3);
        let v10 = &constructor_store8_imm(ctx, v8, v9);
        // Rule at src\isa\s390x\lower.isle line 2847.
        return v10.clone();
    }
    let v4 = C::put_in_reg(ctx, arg1);
    let v5 = &constructor_lower_address(ctx, arg0, arg2, arg3);
    let v6 = &constructor_store8(ctx, v4, v5);
    // Rule at src\isa\s390x\lower.isle line 2843.
    return v6.clone();
}

// Generated as internal constructor for term istore16_impl.
pub fn constructor_istore16_impl<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Value,
    arg3: Offset32,
) -> SideEffectNoResult {
    let v1 = C::bigendian(ctx, arg0);
    if let Some(v2) = v1 {
        let v12 = C::i16_from_value(ctx, arg1);
        if let Some(v13) = v12 {
            let v14 = &constructor_lower_address(ctx, arg0, arg2, arg3);
            let v15 = &constructor_store16_imm(ctx, v13, v14);
            // Rule at src\isa\s390x\lower.isle line 2869.
            return v15.clone();
        }
        let v6 = C::put_in_reg(ctx, arg1);
        let v7 = &constructor_lower_address(ctx, arg0, arg2, arg3);
        let v8 = &constructor_store16(ctx, v6, v7);
        // Rule at src\isa\s390x\lower.isle line 2861.
        return v8.clone();
    }
    let v9 = C::littleendian(ctx, arg0);
    if let Some(v10) = v9 {
        let v16 = C::i16_from_swapped_value(ctx, arg1);
        if let Some(v17) = v16 {
            let v14 = &constructor_lower_address(ctx, arg0, arg2, arg3);
            let v18 = &constructor_store16_imm(ctx, v17, v14);
            // Rule at src\isa\s390x\lower.isle line 2873.
            return v18.clone();
        }
        let v6 = C::put_in_reg(ctx, arg1);
        let v7 = &constructor_lower_address(ctx, arg0, arg2, arg3);
        let v11 = &constructor_storerev16(ctx, v6, v7);
        // Rule at src\isa\s390x\lower.isle line 2865.
        return v11.clone();
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "istore16_impl", "src\\isa\\s390x\\lower.isle line 2858")
}

// Generated as internal constructor for term istore32_impl.
pub fn constructor_istore32_impl<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Value,
    arg3: Offset32,
) -> SideEffectNoResult {
    let v1 = C::bigendian(ctx, arg0);
    if let Some(v2) = v1 {
        let v9 = C::i16_from_value(ctx, arg1);
        if let Some(v10) = v9 {
            let v11 = &constructor_lower_address(ctx, arg0, arg2, arg3);
            let v12 = &constructor_store32_simm16(ctx, v10, v11);
            // Rule at src\isa\s390x\lower.isle line 2891.
            return v12.clone();
        }
        let v6 = C::put_in_reg(ctx, arg1);
        let v7 = &constructor_lower_address(ctx, arg0, arg2, arg3);
        let v8 = &constructor_store32(ctx, v6, v7);
        // Rule at src\isa\s390x\lower.isle line 2887.
        return v8.clone();
    }
    let v13 = C::littleendian(ctx, arg0);
    if let Some(v14) = v13 {
        let v6 = C::put_in_reg(ctx, arg1);
        let v7 = &constructor_lower_address(ctx, arg0, arg2, arg3);
        let v15 = &constructor_storerev32(ctx, v6, v7);
        // Rule at src\isa\s390x\lower.isle line 2895.
        return v15.clone();
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "istore32_impl", "src\\isa\\s390x\\lower.isle line 2884")
}

// Generated as internal constructor for term istore64_impl.
pub fn constructor_istore64_impl<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Value,
    arg3: Offset32,
) -> SideEffectNoResult {
    let v1 = C::bigendian(ctx, arg0);
    if let Some(v2) = v1 {
        let v9 = C::i16_from_value(ctx, arg1);
        if let Some(v10) = v9 {
            let v11 = &constructor_lower_address(ctx, arg0, arg2, arg3);
            let v12 = &constructor_store64_simm16(ctx, v10, v11);
            // Rule at src\isa\s390x\lower.isle line 2909.
            return v12.clone();
        }
        let v6 = C::put_in_reg(ctx, arg1);
        let v7 = &constructor_lower_address(ctx, arg0, arg2, arg3);
        let v8 = &constructor_store64(ctx, v6, v7);
        // Rule at src\isa\s390x\lower.isle line 2905.
        return v8.clone();
    }
    let v13 = C::littleendian(ctx, arg0);
    if let Some(v14) = v13 {
        let v6 = C::put_in_reg(ctx, arg1);
        let v7 = &constructor_lower_address(ctx, arg0, arg2, arg3);
        let v15 = &constructor_storerev64(ctx, v6, v7);
        // Rule at src\isa\s390x\lower.isle line 2913.
        return v15.clone();
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "istore64_impl", "src\\isa\\s390x\\lower.isle line 2902")
}

// Generated as internal constructor for term atomic_rmw_body.
pub fn constructor_atomic_rmw_body<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: &AtomicRmwOp,
    arg4: WritableReg,
    arg5: Reg,
    arg6: Reg,
) -> Reg {
    match arg3 {
        &AtomicRmwOp::Add => {
            let v38 = constructor_ty_ext32(ctx, arg1);
            let v39 = &constructor_aluop_add(ctx, v38);
            let v40 = constructor_atomic_rmw_body_addsub(ctx, arg0, arg1, arg2, v39, arg4, arg5, arg6);
            // Rule at src\isa\s390x\lower.isle line 3076.
            return v40;
        }
        &AtomicRmwOp::And => {
            let v27 = C::ty_8_or_16(ctx, arg1);
            if let Some(v28) = v27 {
                let v32 = constructor_atomic_rmw_body_rxsbg(ctx, arg0, v28, arg2, &RxSBGOp::And, arg4, arg5, arg6);
                // Rule at src\isa\s390x\lower.isle line 3038.
                return v32;
            }
        }
        &AtomicRmwOp::Nand => {
            let v2 = C::ty_32_or_64(ctx, arg1);
            if let Some(v3) = v2 {
                let v14 = C::mie2_enabled(ctx, arg1);
                if let Some(v15) = v14 {
                    let v5 = C::bigendian(ctx, arg2);
                    if let Some(v6) = v5 {
                        let v16 = &constructor_aluop_not_and(ctx, v3);
                        let v17 = constructor_push_alu_reg(ctx, arg0, v16, arg4, arg5, arg6);
                        // Rule at src\isa\s390x\lower.isle line 3018.
                        return v17;
                    }
                    let v11 = C::littleendian(ctx, arg2);
                    if let Some(v12) = v11 {
                        let v16 = &constructor_aluop_not_and(ctx, v3);
                        let v18 = constructor_bswap_reg(ctx, v3, arg6);
                        let v19 = constructor_push_alu_reg(ctx, arg0, v16, arg4, arg5, v18);
                        // Rule at src\isa\s390x\lower.isle line 3021.
                        return v19;
                    }
                }
                let v20 = C::mie2_disabled(ctx, arg1);
                if let Some(v21) = v20 {
                    let v5 = C::bigendian(ctx, arg2);
                    if let Some(v6) = v5 {
                        let v22 = &constructor_aluop_and(ctx, v3);
                        let v23 = constructor_push_alu_reg(ctx, arg0, v22, arg4, arg5, arg6);
                        let v24 = constructor_push_not_reg(ctx, arg0, v3, arg4, v23);
                        // Rule at src\isa\s390x\lower.isle line 3024.
                        return v24;
                    }
                    let v11 = C::littleendian(ctx, arg2);
                    if let Some(v12) = v11 {
                        let v22 = &constructor_aluop_and(ctx, v3);
                        let v18 = constructor_bswap_reg(ctx, v3, arg6);
                        let v25 = constructor_push_alu_reg(ctx, arg0, v22, arg4, arg5, v18);
                        let v26 = constructor_push_not_reg(ctx, arg0, v3, arg4, v25);
                        // Rule at src\isa\s390x\lower.isle line 3028.
                        return v26;
                    }
                }
            }
            let v27 = C::ty_8_or_16(ctx, arg1);
            if let Some(v28) = v27 {
                let v32 = constructor_atomic_rmw_body_rxsbg(ctx, arg0, v28, arg2, &RxSBGOp::And, arg4, arg5, arg6);
                let v37 = constructor_atomic_rmw_body_invert(ctx, arg0, v28, arg2, arg4, v32);
                // Rule at src\isa\s390x\lower.isle line 3044.
                return v37;
            }
        }
        &AtomicRmwOp::Or => {
            let v27 = C::ty_8_or_16(ctx, arg1);
            if let Some(v28) = v27 {
                let v34 = constructor_atomic_rmw_body_rxsbg(ctx, arg0, v28, arg2, &RxSBGOp::Or, arg4, arg5, arg6);
                // Rule at src\isa\s390x\lower.isle line 3040.
                return v34;
            }
        }
        &AtomicRmwOp::Smax => {
            let v38 = constructor_ty_ext32(ctx, arg1);
            let v43 = &constructor_cmpop_cmps(ctx, v38);
            let v48 = &C::intcc_as_cond(ctx, &IntCC::SignedGreaterThan);
            let v49 = constructor_atomic_rmw_body_minmax(ctx, arg0, arg1, arg2, v43, v48, arg4, arg5, arg6);
            // Rule at src\isa\s390x\lower.isle line 3117.
            return v49;
        }
        &AtomicRmwOp::Smin => {
            let v38 = constructor_ty_ext32(ctx, arg1);
            let v43 = &constructor_cmpop_cmps(ctx, v38);
            let v45 = &C::intcc_as_cond(ctx, &IntCC::SignedLessThan);
            let v46 = constructor_atomic_rmw_body_minmax(ctx, arg0, arg1, arg2, v43, v45, arg4, arg5, arg6);
            // Rule at src\isa\s390x\lower.isle line 3114.
            return v46;
        }
        &AtomicRmwOp::Sub => {
            let v38 = constructor_ty_ext32(ctx, arg1);
            let v41 = &constructor_aluop_sub(ctx, v38);
            let v42 = constructor_atomic_rmw_body_addsub(ctx, arg0, arg1, arg2, v41, arg4, arg5, arg6);
            // Rule at src\isa\s390x\lower.isle line 3078.
            return v42;
        }
        &AtomicRmwOp::Umax => {
            let v38 = constructor_ty_ext32(ctx, arg1);
            let v50 = &constructor_cmpop_cmpu(ctx, v38);
            let v55 = &C::intcc_as_cond(ctx, &IntCC::UnsignedGreaterThan);
            let v56 = constructor_atomic_rmw_body_minmax(ctx, arg0, arg1, arg2, v50, v55, arg4, arg5, arg6);
            // Rule at src\isa\s390x\lower.isle line 3123.
            return v56;
        }
        &AtomicRmwOp::Umin => {
            let v38 = constructor_ty_ext32(ctx, arg1);
            let v50 = &constructor_cmpop_cmpu(ctx, v38);
            let v52 = &C::intcc_as_cond(ctx, &IntCC::UnsignedLessThan);
            let v53 = constructor_atomic_rmw_body_minmax(ctx, arg0, arg1, arg2, v50, v52, arg4, arg5, arg6);
            // Rule at src\isa\s390x\lower.isle line 3120.
            return v53;
        }
        &AtomicRmwOp::Xchg => {
            let v2 = C::ty_32_or_64(ctx, arg1);
            if let Some(v3) = v2 {
                let v5 = C::bigendian(ctx, arg2);
                if let Some(v6) = v5 {
                    // Rule at src\isa\s390x\lower.isle line 3007.
                    return arg6;
                }
                let v11 = C::littleendian(ctx, arg2);
                if let Some(v12) = v11 {
                    let v13 = constructor_bswap_reg(ctx, v3, arg6);
                    // Rule at src\isa\s390x\lower.isle line 3010.
                    return v13;
                }
            }
            let v27 = C::ty_8_or_16(ctx, arg1);
            if let Some(v28) = v27 {
                let v30 = constructor_atomic_rmw_body_rxsbg(ctx, arg0, v28, arg2, &RxSBGOp::Insert, arg4, arg5, arg6);
                // Rule at src\isa\s390x\lower.isle line 3036.
                return v30;
            }
        }
        &AtomicRmwOp::Xor => {
            let v27 = C::ty_8_or_16(ctx, arg1);
            if let Some(v28) = v27 {
                let v36 = constructor_atomic_rmw_body_rxsbg(ctx, arg0, v28, arg2, &RxSBGOp::Xor, arg4, arg5, arg6);
                // Rule at src\isa\s390x\lower.isle line 3042.
                return v36;
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "atomic_rmw_body", "src\\isa\\s390x\\lower.isle line 3002")
}

// Generated as internal constructor for term atomic_rmw_body_rxsbg.
pub fn constructor_atomic_rmw_body_rxsbg<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: &RxSBGOp,
    arg4: WritableReg,
    arg5: Reg,
    arg6: Reg,
) -> Reg {
    match arg1 {
        I8 => {
            let v10 = constructor_push_rxsbg(ctx, arg0, arg3, arg4, arg5, arg6, 0x20_u8, 0x28_u8, 24_i8);
            // Rule at src\isa\s390x\lower.isle line 3052.
            return v10;
        }
        I16 => {
            let v11 = C::bigendian(ctx, arg2);
            if let Some(v12) = v11 {
                let v15 = constructor_push_rxsbg(ctx, arg0, arg3, arg4, arg5, arg6, 0x20_u8, 0x30_u8, 16_i8);
                // Rule at src\isa\s390x\lower.isle line 3056.
                return v15;
            }
            let v16 = C::littleendian(ctx, arg2);
            if let Some(v17) = v16 {
                let v19 = constructor_bswap_reg(ctx, I32, arg6);
                let v22 = constructor_push_rxsbg(ctx, arg0, arg3, arg4, arg5, v19, 0x30_u8, 0x40_u8, -16_i8);
                // Rule at src\isa\s390x\lower.isle line 3060.
                return v22;
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "atomic_rmw_body_rxsbg", "src\\isa\\s390x\\lower.isle line 3049")
}

// Generated as internal constructor for term atomic_rmw_body_invert.
pub fn constructor_atomic_rmw_body_invert<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: WritableReg,
    arg4: Reg,
) -> Reg {
    match arg1 {
        I8 => {
            let v8 = C::uimm32shifted(ctx, 0xff000000_u32, 0x0_u8);
            let v9 = constructor_push_xor_uimm32shifted(ctx, arg0, I32, arg3, arg4, v8);
            // Rule at src\isa\s390x\lower.isle line 3066.
            return v9;
        }
        I16 => {
            let v10 = C::bigendian(ctx, arg2);
            if let Some(v11) = v10 {
                let v13 = C::uimm32shifted(ctx, 0xffff0000_u32, 0x0_u8);
                let v14 = constructor_push_xor_uimm32shifted(ctx, arg0, I32, arg3, arg4, v13);
                // Rule at src\isa\s390x\lower.isle line 3069.
                return v14;
            }
            let v15 = C::littleendian(ctx, arg2);
            if let Some(v16) = v15 {
                let v18 = C::uimm32shifted(ctx, 0xffff_u32, 0x0_u8);
                let v19 = constructor_push_xor_uimm32shifted(ctx, arg0, I32, arg3, arg4, v18);
                // Rule at src\isa\s390x\lower.isle line 3072.
                return v19;
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "atomic_rmw_body_invert", "src\\isa\\s390x\\lower.isle line 3064")
}

// Generated as internal constructor for term atomic_rmw_body_addsub.
pub fn constructor_atomic_rmw_body_addsub<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: &ALUOp,
    arg4: WritableReg,
    arg5: Reg,
    arg6: Reg,
) -> Reg {
    let v5 = C::bigendian(ctx, arg2);
    if let Some(v6) = v5 {
        if arg1 == I16 {
            let v22 = constructor_lshl_imm(ctx, I32, arg6, 0x10_u8);
            let v23 = constructor_push_alu_reg(ctx, arg0, arg3, arg4, arg5, v22);
            // Rule at src\isa\s390x\lower.isle line 3099.
            return v23;
        }
        let v2 = C::ty_32_or_64(ctx, arg1);
        if let Some(v3) = v2 {
            let v11 = constructor_push_alu_reg(ctx, arg0, arg3, arg4, arg5, arg6);
            // Rule at src\isa\s390x\lower.isle line 3085.
            return v11;
        }
    }
    let v12 = C::littleendian(ctx, arg2);
    if let Some(v13) = v12 {
        let v2 = C::ty_32_or_64(ctx, arg1);
        if let Some(v3) = v2 {
            let v14 = constructor_push_bswap_reg(ctx, arg0, v3, arg4, arg5);
            let v15 = constructor_push_alu_reg(ctx, arg0, arg3, arg4, v14, arg6);
            let v16 = constructor_push_bswap_reg(ctx, arg0, v3, arg4, v15);
            // Rule at src\isa\s390x\lower.isle line 3089.
            return v16;
        }
        if arg1 == I16 {
            let v22 = constructor_lshl_imm(ctx, I32, arg6, 0x10_u8);
            let v24 = constructor_push_bswap_reg(ctx, arg0, I32, arg4, arg5);
            let v25 = constructor_push_alu_reg(ctx, arg0, arg3, arg4, v24, v22);
            let v26 = constructor_push_bswap_reg(ctx, arg0, I32, arg4, v25);
            // Rule at src\isa\s390x\lower.isle line 3107.
            return v26;
        }
    }
    if arg1 == I8 {
        let v19 = constructor_lshl_imm(ctx, I32, arg6, 0x18_u8);
        let v20 = constructor_push_alu_reg(ctx, arg0, arg3, arg4, arg5, v19);
        // Rule at src\isa\s390x\lower.isle line 3095.
        return v20;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "atomic_rmw_body_addsub", "src\\isa\\s390x\\lower.isle line 3082")
}

// Generated as internal constructor for term atomic_rmw_body_minmax.
pub fn constructor_atomic_rmw_body_minmax<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: &CmpOp,
    arg4: &Cond,
    arg5: WritableReg,
    arg6: Reg,
    arg7: Reg,
) -> Reg {
    let v5 = C::bigendian(ctx, arg2);
    if let Some(v6) = v5 {
        if arg1 == I16 {
            let v33 = constructor_lshl_imm(ctx, I32, arg7, 0x10_u8);
            let v34 = &constructor_cmp_rr(ctx, arg3, v33, arg6);
            let v19 = &C::invert_cond(ctx, arg4);
            let v35 = constructor_push_break_if(ctx, arg0, v34, v19);
            let v37 = constructor_push_rxsbg(ctx, arg0, &RxSBGOp::Insert, arg5, arg6, v33, 0x20_u8, 0x30_u8, 0_i8);
            // Rule at src\isa\s390x\lower.isle line 3158.
            return v37;
        }
        let v2 = C::ty_32_or_64(ctx, arg1);
        if let Some(v3) = v2 {
            let v12 = &constructor_cmp_rr(ctx, arg3, arg7, arg6);
            let v13 = &C::invert_cond(ctx, arg4);
            let v14 = constructor_push_break_if(ctx, arg0, v12, v13);
            // Rule at src\isa\s390x\lower.isle line 3133.
            return arg7;
        }
    }
    let v15 = C::littleendian(ctx, arg2);
    if let Some(v16) = v15 {
        let v2 = C::ty_32_or_64(ctx, arg1);
        if let Some(v3) = v2 {
            let v17 = constructor_push_bswap_reg(ctx, arg0, v3, arg5, arg6);
            let v18 = &constructor_cmp_rr(ctx, arg3, arg7, v17);
            let v19 = &C::invert_cond(ctx, arg4);
            let v20 = constructor_push_break_if(ctx, arg0, v18, v19);
            let v21 = constructor_push_bswap_reg(ctx, arg0, v3, arg5, arg7);
            // Rule at src\isa\s390x\lower.isle line 3140.
            return v21;
        }
        if arg1 == I16 {
            let v33 = constructor_lshl_imm(ctx, I32, arg7, 0x10_u8);
            let v38 = constructor_push_bswap_reg(ctx, arg0, I32, arg5, arg6);
            let v39 = &constructor_cmp_rr(ctx, arg3, v33, v38);
            let v40 = &C::invert_cond(ctx, arg4);
            let v41 = constructor_push_break_if(ctx, arg0, v39, v40);
            let v42 = constructor_push_rxsbg(ctx, arg0, &RxSBGOp::Insert, arg5, v38, v33, 0x20_u8, 0x30_u8, 0_i8);
            let v43 = constructor_push_bswap_reg(ctx, arg0, I32, arg5, v42);
            // Rule at src\isa\s390x\lower.isle line 3165.
            return v43;
        }
    }
    if arg1 == I8 {
        let v24 = constructor_lshl_imm(ctx, I32, arg7, 0x18_u8);
        let v25 = &constructor_cmp_rr(ctx, arg3, v24, arg6);
        let v19 = &C::invert_cond(ctx, arg4);
        let v26 = constructor_push_break_if(ctx, arg0, v25, v19);
        let v31 = constructor_push_rxsbg(ctx, arg0, &RxSBGOp::Insert, arg5, arg6, v24, 0x20_u8, 0x28_u8, 0_i8);
        // Rule at src\isa\s390x\lower.isle line 3152.
        return v31;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "atomic_rmw_body_minmax", "src\\isa\\s390x\\lower.isle line 3128")
}

// Generated as internal constructor for term atomic_cas_body.
pub fn constructor_atomic_cas_body<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: WritableReg,
    arg4: Reg,
    arg5: Reg,
    arg6: Reg,
) -> Reg {
    match arg1 {
        I8 => {
            let v11 = &constructor_rxsbg_test(ctx, &RxSBGOp::Xor, arg4, arg5, 0x20_u8, 0x28_u8, 24_i8);
            let v13 = &C::intcc_as_cond(ctx, &IntCC::NotEqual);
            let v14 = constructor_push_break_if(ctx, arg0, v11, v13);
            let v16 = constructor_push_rxsbg(ctx, arg0, &RxSBGOp::Insert, arg3, arg4, arg6, 0x20_u8, 0x28_u8, 24_i8);
            // Rule at src\isa\s390x\lower.isle line 3217.
            return v16;
        }
        I16 => {
            let v17 = C::bigendian(ctx, arg2);
            if let Some(v18) = v17 {
                let v21 = &constructor_rxsbg_test(ctx, &RxSBGOp::Xor, arg4, arg5, 0x20_u8, 0x30_u8, 16_i8);
                let v13 = &C::intcc_as_cond(ctx, &IntCC::NotEqual);
                let v22 = constructor_push_break_if(ctx, arg0, v21, v13);
                let v23 = constructor_push_rxsbg(ctx, arg0, &RxSBGOp::Insert, arg3, arg4, arg6, 0x20_u8, 0x30_u8, 16_i8);
                // Rule at src\isa\s390x\lower.isle line 3224.
                return v23;
            }
            let v24 = C::littleendian(ctx, arg2);
            if let Some(v25) = v24 {
                let v27 = constructor_bswap_reg(ctx, I32, arg5);
                let v28 = constructor_bswap_reg(ctx, I32, arg6);
                let v31 = &constructor_rxsbg_test(ctx, &RxSBGOp::Xor, arg4, v27, 0x30_u8, 0x40_u8, -16_i8);
                let v32 = &C::intcc_as_cond(ctx, &IntCC::NotEqual);
                let v33 = constructor_push_break_if(ctx, arg0, v31, v32);
                let v34 = constructor_push_rxsbg(ctx, arg0, &RxSBGOp::Insert, arg3, arg4, v28, 0x30_u8, 0x40_u8, -16_i8);
                // Rule at src\isa\s390x\lower.isle line 3235.
                return v34;
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "atomic_cas_body", "src\\isa\\s390x\\lower.isle line 3210")
}

// Generated as internal constructor for term atomic_store_impl.
pub fn constructor_atomic_store_impl<C: Context>(
    ctx: &mut C,
    arg0: &SideEffectNoResult,
) -> InstOutput {
    let v1 = constructor_side_effect(ctx, arg0);
    let v2 = &constructor_fence_impl(ctx);
    let v3 = constructor_side_effect(ctx, v2);
    // Rule at src\isa\s390x\lower.isle line 3281.
    return v3;
}

// Generated as internal constructor for term icmp_val.
pub fn constructor_icmp_val<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: &IntCC,
    arg2: Value,
    arg3: Value,
) -> ProducesBool {
    match arg1 {
        &IntCC::Equal => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v19 = C::put_in_reg(ctx, arg2);
                let v20 = C::put_in_reg(ctx, arg3);
                let v21 = &constructor_vec_cmpeqs(ctx, I64X2, v19, v20);
                let v23 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                let v24 = &constructor_bool(ctx, v21, v23);
                // Rule at src\isa\s390x\lower.isle line 3427.
                return v24.clone();
            }
        }
        &IntCC::NotEqual => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v19 = C::put_in_reg(ctx, arg2);
                let v20 = C::put_in_reg(ctx, arg3);
                let v21 = &constructor_vec_cmpeqs(ctx, I64X2, v19, v20);
                let v26 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                let v27 = &constructor_bool(ctx, v21, v26);
                // Rule at src\isa\s390x\lower.isle line 3430.
                return v27.clone();
            }
        }
        &IntCC::SignedGreaterThan => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v19 = C::put_in_reg(ctx, arg2);
                let v20 = C::put_in_reg(ctx, arg3);
                let v28 = &constructor_vec_int128_scmphi(ctx, v19, v20);
                // Rule at src\isa\s390x\lower.isle line 3436.
                return v28.clone();
            }
        }
        &IntCC::SignedGreaterThanOrEqual => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v29 = C::put_in_reg(ctx, arg3);
                let v30 = C::put_in_reg(ctx, arg2);
                let v31 = &constructor_vec_int128_scmphi(ctx, v29, v30);
                let v32 = &constructor_invert_bool(ctx, v31);
                // Rule at src\isa\s390x\lower.isle line 3440.
                return v32.clone();
            }
        }
        &IntCC::SignedLessThan => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v29 = C::put_in_reg(ctx, arg3);
                let v30 = C::put_in_reg(ctx, arg2);
                let v31 = &constructor_vec_int128_scmphi(ctx, v29, v30);
                // Rule at src\isa\s390x\lower.isle line 3438.
                return v31.clone();
            }
        }
        &IntCC::SignedLessThanOrEqual => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v19 = C::put_in_reg(ctx, arg2);
                let v20 = C::put_in_reg(ctx, arg3);
                let v28 = &constructor_vec_int128_scmphi(ctx, v19, v20);
                let v33 = &constructor_invert_bool(ctx, v28);
                // Rule at src\isa\s390x\lower.isle line 3442.
                return v33.clone();
            }
        }
        &IntCC::UnsignedGreaterThan => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v19 = C::put_in_reg(ctx, arg2);
                let v20 = C::put_in_reg(ctx, arg3);
                let v34 = &constructor_vec_int128_ucmphi(ctx, v19, v20);
                // Rule at src\isa\s390x\lower.isle line 3447.
                return v34.clone();
            }
        }
        &IntCC::UnsignedGreaterThanOrEqual => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v29 = C::put_in_reg(ctx, arg3);
                let v30 = C::put_in_reg(ctx, arg2);
                let v35 = &constructor_vec_int128_ucmphi(ctx, v29, v30);
                let v36 = &constructor_invert_bool(ctx, v35);
                // Rule at src\isa\s390x\lower.isle line 3451.
                return v36.clone();
            }
        }
        &IntCC::UnsignedLessThan => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v29 = C::put_in_reg(ctx, arg3);
                let v30 = C::put_in_reg(ctx, arg2);
                let v35 = &constructor_vec_int128_ucmphi(ctx, v29, v30);
                // Rule at src\isa\s390x\lower.isle line 3449.
                return v35.clone();
            }
        }
        &IntCC::UnsignedLessThanOrEqual => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v19 = C::put_in_reg(ctx, arg2);
                let v20 = C::put_in_reg(ctx, arg3);
                let v34 = &constructor_vec_int128_ucmphi(ctx, v19, v20);
                let v37 = &constructor_invert_bool(ctx, v34);
                // Rule at src\isa\s390x\lower.isle line 3453.
                return v37.clone();
            }
        }
        _ => {}
    }
    let v5 = C::value_type(ctx, arg2);
    let v6 = C::fits_in_64(ctx, v5);
    if let Some(v7) = v6 {
        let v2 = C::signed(ctx, arg1);
        if let Some(v3) = v2 {
            let v9 = &constructor_icmps_val(ctx, arg0, arg2, arg3);
            let v10 = &C::intcc_as_cond(ctx, arg1);
            let v11 = &constructor_bool(ctx, v9, v10);
            // Rule at src\isa\s390x\lower.isle line 3348.
            return v11.clone();
        }
        let v12 = C::unsigned(ctx, arg1);
        if let Some(v13) = v12 {
            let v14 = &constructor_icmpu_val(ctx, arg0, arg2, arg3);
            let v10 = &C::intcc_as_cond(ctx, arg1);
            let v15 = &constructor_bool(ctx, v14, v10);
            // Rule at src\isa\s390x\lower.isle line 3351.
            return v15.clone();
        }
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "icmp_val", "src\\isa\\s390x\\lower.isle line 3345")
}

// Generated as internal constructor for term icmps_val.
pub fn constructor_icmps_val<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: Value,
    arg2: Value,
) -> ProducesFlags {
    let v2 = C::value_type(ctx, arg1);
    let v3 = C::fits_in_64(ctx, v2);
    if let Some(v4) = v3 {
        if arg0 == true {
            let v28 = C::sinkable_inst(ctx, arg2);
            if let Some(v29) = v28 {
                let v30 = &C::inst_data_value(ctx, v29);
                if let &InstructionData::Load {
                    opcode: ref v31,
                    arg: v32,
                    flags: v33,
                    offset: v34,
                } = v30 {
                    match v31 {
                        &Opcode::Load => {
                            let v35 = C::bigendian(ctx, v33);
                            if let Some(v36) = v35 {
                                let v25 = C::value_type(ctx, arg2);
                                if v25 == I16 {
                                    let v6 = constructor_ty_ext32(ctx, v4);
                                    let v7 = constructor_put_in_reg_sext32(ctx, arg1);
                                    let v39 = &constructor_sink_load(ctx, v29);
                                    let v40 = &constructor_icmps_mem_sext16(ctx, v6, v7, v39);
                                    // Rule at src\isa\s390x\lower.isle line 3377.
                                    return v40.clone();
                                }
                                let v26 = C::ty_32_or_64(ctx, v25);
                                if let Some(v27) = v26 {
                                    let v16 = C::put_in_reg(ctx, arg1);
                                    let v37 = &constructor_sink_load(ctx, v29);
                                    let v38 = &constructor_icmps_mem(ctx, v4, v16, v37);
                                    // Rule at src\isa\s390x\lower.isle line 3373.
                                    return v38.clone();
                                }
                            }
                        }
                        &Opcode::Sload16 => {
                            let v35 = C::bigendian(ctx, v33);
                            if let Some(v36) = v35 {
                                let v16 = C::put_in_reg(ctx, arg1);
                                let v41 = &constructor_sink_sload16(ctx, v29);
                                let v42 = &constructor_icmps_mem_sext16(ctx, v4, v16, v41);
                                // Rule at src\isa\s390x\lower.isle line 3381.
                                return v42.clone();
                            }
                        }
                        &Opcode::Sload32 => {
                            let v35 = C::bigendian(ctx, v33);
                            if let Some(v36) = v35 {
                                let v16 = C::put_in_reg(ctx, arg1);
                                let v43 = &constructor_sink_sload32(ctx, v29);
                                let v44 = &constructor_icmps_mem_sext32(ctx, v4, v16, v43);
                                // Rule at src\isa\s390x\lower.isle line 3383.
                                return v44.clone();
                            }
                        }
                        _ => {}
                    }
                }
            }
        }
        let v10 = C::def_inst(ctx, arg2);
        if let Some(v11) = v10 {
            let v12 = &C::inst_data_value(ctx, v11);
            if let &InstructionData::Unary {
                opcode: ref v13,
                arg: v14,
            } = v12 {
                if let &Opcode::Sextend = v13 {
                    let v15 = C::value_type(ctx, v14);
                    if v15 == I32 {
                        let v16 = C::put_in_reg(ctx, arg1);
                        let v17 = C::put_in_reg(ctx, v14);
                        let v18 = &constructor_icmps_reg_sext32(ctx, v4, v16, v17);
                        // Rule at src\isa\s390x\lower.isle line 3363.
                        return v18.clone();
                    }
                }
            }
        }
        let v19 = C::i16_from_value(ctx, arg2);
        if let Some(v20) = v19 {
            let v6 = constructor_ty_ext32(ctx, v4);
            let v7 = constructor_put_in_reg_sext32(ctx, arg1);
            let v21 = &constructor_icmps_simm16(ctx, v6, v7, v20);
            // Rule at src\isa\s390x\lower.isle line 3367.
            return v21.clone();
        }
        let v22 = C::i32_from_value(ctx, arg2);
        if let Some(v23) = v22 {
            let v6 = constructor_ty_ext32(ctx, v4);
            let v7 = constructor_put_in_reg_sext32(ctx, arg1);
            let v24 = &constructor_icmps_simm32(ctx, v6, v7, v23);
            // Rule at src\isa\s390x\lower.isle line 3369.
            return v24.clone();
        }
        let v6 = constructor_ty_ext32(ctx, v4);
        let v7 = constructor_put_in_reg_sext32(ctx, arg1);
        let v8 = constructor_put_in_reg_sext32(ctx, arg2);
        let v9 = &constructor_icmps_reg(ctx, v6, v7, v8);
        // Rule at src\isa\s390x\lower.isle line 3359.
        return v9.clone();
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "icmps_val", "src\\isa\\s390x\\lower.isle line 3356")
}

// Generated as internal constructor for term icmpu_val.
pub fn constructor_icmpu_val<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: Value,
    arg2: Value,
) -> ProducesFlags {
    let v2 = C::value_type(ctx, arg1);
    let v3 = C::fits_in_64(ctx, v2);
    if let Some(v4) = v3 {
        if arg0 == true {
            let v25 = C::sinkable_inst(ctx, arg2);
            if let Some(v26) = v25 {
                let v27 = &C::inst_data_value(ctx, v26);
                if let &InstructionData::Load {
                    opcode: ref v28,
                    arg: v29,
                    flags: v30,
                    offset: v31,
                } = v27 {
                    match v28 {
                        &Opcode::Load => {
                            let v32 = C::bigendian(ctx, v30);
                            if let Some(v33) = v32 {
                                let v22 = C::value_type(ctx, arg2);
                                let v23 = C::ty_32_or_64(ctx, v22);
                                if let Some(v24) = v23 {
                                    let v16 = C::put_in_reg(ctx, arg1);
                                    let v34 = &constructor_sink_load(ctx, v26);
                                    let v35 = &constructor_icmpu_mem(ctx, v4, v16, v34);
                                    // Rule at src\isa\s390x\lower.isle line 3403.
                                    return v35.clone();
                                }
                                if v22 == I16 {
                                    let v36 = constructor_load_sym(ctx, v26);
                                    if let Some(v37) = v36 {
                                        let v6 = constructor_ty_ext32(ctx, v4);
                                        let v7 = constructor_put_in_reg_zext32(ctx, arg1);
                                        let v38 = &constructor_sink_load(ctx, v37);
                                        let v39 = &constructor_icmpu_mem_zext16(ctx, v6, v7, v38);
                                        // Rule at src\isa\s390x\lower.isle line 3409.
                                        return v39.clone();
                                    }
                                }
                            }
                        }
                        &Opcode::Uload16 => {
                            let v32 = C::bigendian(ctx, v30);
                            if let Some(v33) = v32 {
                                let v40 = constructor_uload16_sym(ctx, v26);
                                if let Some(v41) = v40 {
                                    let v16 = C::put_in_reg(ctx, arg1);
                                    let v42 = &constructor_sink_uload16(ctx, v41);
                                    let v43 = &constructor_icmpu_mem_zext16(ctx, v4, v16, v42);
                                    // Rule at src\isa\s390x\lower.isle line 3417.
                                    return v43.clone();
                                }
                            }
                        }
                        &Opcode::Uload32 => {
                            let v32 = C::bigendian(ctx, v30);
                            if let Some(v33) = v32 {
                                let v16 = C::put_in_reg(ctx, arg1);
                                let v44 = &constructor_sink_uload32(ctx, v26);
                                let v45 = &constructor_icmpu_mem_zext32(ctx, v4, v16, v44);
                                // Rule at src\isa\s390x\lower.isle line 3421.
                                return v45.clone();
                            }
                        }
                        _ => {}
                    }
                }
            }
        }
        let v19 = C::u32_from_value(ctx, arg2);
        if let Some(v20) = v19 {
            let v6 = constructor_ty_ext32(ctx, v4);
            let v7 = constructor_put_in_reg_zext32(ctx, arg1);
            let v21 = &constructor_icmpu_uimm32(ctx, v6, v7, v20);
            // Rule at src\isa\s390x\lower.isle line 3399.
            return v21.clone();
        }
        let v10 = C::def_inst(ctx, arg2);
        if let Some(v11) = v10 {
            let v12 = &C::inst_data_value(ctx, v11);
            if let &InstructionData::Unary {
                opcode: ref v13,
                arg: v14,
            } = v12 {
                if let &Opcode::Uextend = v13 {
                    let v15 = C::value_type(ctx, v14);
                    if v15 == I32 {
                        let v16 = C::put_in_reg(ctx, arg1);
                        let v17 = C::put_in_reg(ctx, v14);
                        let v18 = &constructor_icmpu_reg_zext32(ctx, v4, v16, v17);
                        // Rule at src\isa\s390x\lower.isle line 3395.
                        return v18.clone();
                    }
                }
            }
        }
        let v6 = constructor_ty_ext32(ctx, v4);
        let v7 = constructor_put_in_reg_zext32(ctx, arg1);
        let v8 = constructor_put_in_reg_zext32(ctx, arg2);
        let v9 = &constructor_icmpu_reg(ctx, v6, v7, v8);
        // Rule at src\isa\s390x\lower.isle line 3391.
        return v9.clone();
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "icmpu_val", "src\\isa\\s390x\\lower.isle line 3388")
}

// Generated as internal constructor for term fcmp_val.
pub fn constructor_fcmp_val<C: Context>(
    ctx: &mut C,
    arg0: &FloatCC,
    arg1: Value,
    arg2: Value,
) -> ProducesBool {
    let v4 = C::put_in_reg(ctx, arg1);
    let v5 = C::put_in_reg(ctx, arg2);
    let v2 = C::value_type(ctx, arg1);
    let v6 = &constructor_fcmp_reg(ctx, v2, v4, v5);
    let v7 = &C::floatcc_as_cond(ctx, arg0);
    let v8 = &constructor_bool(ctx, v6, v7);
    // Rule at src\isa\s390x\lower.isle line 3491.
    return v8.clone();
}

// Generated as internal constructor for term vall_true_val.
pub fn constructor_vall_true_val<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> ProducesBool {
    let v9 = C::def_inst(ctx, arg0);
    if let Some(v10) = v9 {
        let v11 = C::first_result(ctx, v10);
        if let Some(v12) = v11 {
            let v14 = &C::inst_data_value(ctx, v10);
            match v14 {
                &InstructionData::FloatCompare {
                    opcode: ref v42,
                    args: ref v43,
                    cond: ref v44,
                } => {
                    if let &Opcode::Fcmp = v42 {
                        match v44 {
                            &FloatCC::Equal => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v50 = &constructor_vec_fcmpeqs(ctx, v13, v48, v49);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v51 = &constructor_bool(ctx, v50, v25);
                                // Rule at src\isa\s390x\lower.isle line 3574.
                                return v51.clone();
                            }
                            &FloatCC::GreaterThan => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v53 = &constructor_vec_fcmphs(ctx, v13, v48, v49);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v54 = &constructor_bool(ctx, v53, v25);
                                // Rule at src\isa\s390x\lower.isle line 3580.
                                return v54.clone();
                            }
                            &FloatCC::GreaterThanOrEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v56 = &constructor_vec_fcmphes(ctx, v13, v48, v49);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v57 = &constructor_bool(ctx, v56, v25);
                                // Rule at src\isa\s390x\lower.isle line 3586.
                                return v57.clone();
                            }
                            &FloatCC::LessThan => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v59 = C::put_in_reg(ctx, v45.1);
                                let v60 = C::put_in_reg(ctx, v45.0);
                                let v13 = C::value_type(ctx, v12);
                                let v61 = &constructor_vec_fcmphs(ctx, v13, v59, v60);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v62 = &constructor_bool(ctx, v61, v25);
                                // Rule at src\isa\s390x\lower.isle line 3592.
                                return v62.clone();
                            }
                            &FloatCC::LessThanOrEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v59 = C::put_in_reg(ctx, v45.1);
                                let v60 = C::put_in_reg(ctx, v45.0);
                                let v13 = C::value_type(ctx, v12);
                                let v64 = &constructor_vec_fcmphes(ctx, v13, v59, v60);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v65 = &constructor_bool(ctx, v64, v25);
                                // Rule at src\isa\s390x\lower.isle line 3598.
                                return v65.clone();
                            }
                            &FloatCC::NotEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v50 = &constructor_vec_fcmpeqs(ctx, v13, v48, v49);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v52 = &constructor_bool(ctx, v50, v7);
                                // Rule at src\isa\s390x\lower.isle line 3577.
                                return v52.clone();
                            }
                            &FloatCC::UnorderedOrGreaterThan => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v59 = C::put_in_reg(ctx, v45.1);
                                let v60 = C::put_in_reg(ctx, v45.0);
                                let v13 = C::value_type(ctx, v12);
                                let v64 = &constructor_vec_fcmphes(ctx, v13, v59, v60);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v66 = &constructor_bool(ctx, v64, v7);
                                // Rule at src\isa\s390x\lower.isle line 3601.
                                return v66.clone();
                            }
                            &FloatCC::UnorderedOrGreaterThanOrEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v59 = C::put_in_reg(ctx, v45.1);
                                let v60 = C::put_in_reg(ctx, v45.0);
                                let v13 = C::value_type(ctx, v12);
                                let v61 = &constructor_vec_fcmphs(ctx, v13, v59, v60);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v63 = &constructor_bool(ctx, v61, v7);
                                // Rule at src\isa\s390x\lower.isle line 3595.
                                return v63.clone();
                            }
                            &FloatCC::UnorderedOrLessThan => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v56 = &constructor_vec_fcmphes(ctx, v13, v48, v49);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v58 = &constructor_bool(ctx, v56, v7);
                                // Rule at src\isa\s390x\lower.isle line 3589.
                                return v58.clone();
                            }
                            &FloatCC::UnorderedOrLessThanOrEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v53 = &constructor_vec_fcmphs(ctx, v13, v48, v49);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v55 = &constructor_bool(ctx, v53, v7);
                                // Rule at src\isa\s390x\lower.isle line 3583.
                                return v55.clone();
                            }
                            _ => {}
                        }
                    }
                }
                &InstructionData::IntCompare {
                    opcode: ref v15,
                    args: ref v16,
                    cond: ref v17,
                } => {
                    if let &Opcode::Icmp = v15 {
                        match v17 {
                            &IntCC::Equal => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v23 = &constructor_vec_cmpeqs(ctx, v13, v21, v22);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v26 = &constructor_bool(ctx, v23, v25);
                                // Rule at src\isa\s390x\lower.isle line 3542.
                                return v26.clone();
                            }
                            &IntCC::NotEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v23 = &constructor_vec_cmpeqs(ctx, v13, v21, v22);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v27 = &constructor_bool(ctx, v23, v7);
                                // Rule at src\isa\s390x\lower.isle line 3545.
                                return v27.clone();
                            }
                            &IntCC::SignedGreaterThan => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v28 = &constructor_vec_cmphs(ctx, v13, v21, v22);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v29 = &constructor_bool(ctx, v28, v25);
                                // Rule at src\isa\s390x\lower.isle line 3548.
                                return v29.clone();
                            }
                            &IntCC::SignedGreaterThanOrEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v31 = C::put_in_reg(ctx, v18.1);
                                let v32 = C::put_in_reg(ctx, v18.0);
                                let v13 = C::value_type(ctx, v12);
                                let v33 = &constructor_vec_cmphs(ctx, v13, v31, v32);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v35 = &constructor_bool(ctx, v33, v7);
                                // Rule at src\isa\s390x\lower.isle line 3557.
                                return v35.clone();
                            }
                            &IntCC::SignedLessThan => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v31 = C::put_in_reg(ctx, v18.1);
                                let v32 = C::put_in_reg(ctx, v18.0);
                                let v13 = C::value_type(ctx, v12);
                                let v33 = &constructor_vec_cmphs(ctx, v13, v31, v32);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v34 = &constructor_bool(ctx, v33, v25);
                                // Rule at src\isa\s390x\lower.isle line 3554.
                                return v34.clone();
                            }
                            &IntCC::SignedLessThanOrEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v28 = &constructor_vec_cmphs(ctx, v13, v21, v22);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v30 = &constructor_bool(ctx, v28, v7);
                                // Rule at src\isa\s390x\lower.isle line 3551.
                                return v30.clone();
                            }
                            &IntCC::UnsignedGreaterThan => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v36 = &constructor_vec_cmphls(ctx, v13, v21, v22);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v37 = &constructor_bool(ctx, v36, v25);
                                // Rule at src\isa\s390x\lower.isle line 3560.
                                return v37.clone();
                            }
                            &IntCC::UnsignedGreaterThanOrEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v31 = C::put_in_reg(ctx, v18.1);
                                let v32 = C::put_in_reg(ctx, v18.0);
                                let v13 = C::value_type(ctx, v12);
                                let v39 = &constructor_vec_cmphls(ctx, v13, v31, v32);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v41 = &constructor_bool(ctx, v39, v7);
                                // Rule at src\isa\s390x\lower.isle line 3569.
                                return v41.clone();
                            }
                            &IntCC::UnsignedLessThan => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v31 = C::put_in_reg(ctx, v18.1);
                                let v32 = C::put_in_reg(ctx, v18.0);
                                let v13 = C::value_type(ctx, v12);
                                let v39 = &constructor_vec_cmphls(ctx, v13, v31, v32);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v40 = &constructor_bool(ctx, v39, v25);
                                // Rule at src\isa\s390x\lower.isle line 3566.
                                return v40.clone();
                            }
                            &IntCC::UnsignedLessThanOrEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v36 = &constructor_vec_cmphls(ctx, v13, v21, v22);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v38 = &constructor_bool(ctx, v36, v7);
                                // Rule at src\isa\s390x\lower.isle line 3563.
                                return v38.clone();
                            }
                            _ => {}
                        }
                    }
                }
                _ => {}
            }
        }
    }
    let v2 = C::put_in_reg(ctx, arg0);
    let v1 = C::value_type(ctx, arg0);
    let v4 = constructor_vec_imm(ctx, v1, 0x0_u128);
    let v5 = &constructor_vec_cmpeqs(ctx, v1, v2, v4);
    let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
    let v8 = &constructor_bool(ctx, v5, v7);
    // Rule at src\isa\s390x\lower.isle line 3537.
    return v8.clone();
}

// Generated as internal constructor for term vany_true_val.
pub fn constructor_vany_true_val<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> ProducesBool {
    let v9 = C::def_inst(ctx, arg0);
    if let Some(v10) = v9 {
        let v11 = C::first_result(ctx, v10);
        if let Some(v12) = v11 {
            let v14 = &C::inst_data_value(ctx, v10);
            match v14 {
                &InstructionData::FloatCompare {
                    opcode: ref v42,
                    args: ref v43,
                    cond: ref v44,
                } => {
                    if let &Opcode::Fcmp = v42 {
                        match v44 {
                            &FloatCC::Equal => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v50 = &constructor_vec_fcmpeqs(ctx, v13, v48, v49);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v51 = &constructor_bool(ctx, v50, v25);
                                // Rule at src\isa\s390x\lower.isle line 3652.
                                return v51.clone();
                            }
                            &FloatCC::GreaterThan => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v53 = &constructor_vec_fcmphs(ctx, v13, v48, v49);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v54 = &constructor_bool(ctx, v53, v25);
                                // Rule at src\isa\s390x\lower.isle line 3658.
                                return v54.clone();
                            }
                            &FloatCC::GreaterThanOrEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v56 = &constructor_vec_fcmphes(ctx, v13, v48, v49);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v57 = &constructor_bool(ctx, v56, v25);
                                // Rule at src\isa\s390x\lower.isle line 3664.
                                return v57.clone();
                            }
                            &FloatCC::LessThan => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v59 = C::put_in_reg(ctx, v45.1);
                                let v60 = C::put_in_reg(ctx, v45.0);
                                let v13 = C::value_type(ctx, v12);
                                let v61 = &constructor_vec_fcmphs(ctx, v13, v59, v60);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v62 = &constructor_bool(ctx, v61, v25);
                                // Rule at src\isa\s390x\lower.isle line 3670.
                                return v62.clone();
                            }
                            &FloatCC::LessThanOrEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v59 = C::put_in_reg(ctx, v45.1);
                                let v60 = C::put_in_reg(ctx, v45.0);
                                let v13 = C::value_type(ctx, v12);
                                let v64 = &constructor_vec_fcmphes(ctx, v13, v59, v60);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v65 = &constructor_bool(ctx, v64, v25);
                                // Rule at src\isa\s390x\lower.isle line 3676.
                                return v65.clone();
                            }
                            &FloatCC::NotEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v50 = &constructor_vec_fcmpeqs(ctx, v13, v48, v49);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v52 = &constructor_bool(ctx, v50, v7);
                                // Rule at src\isa\s390x\lower.isle line 3655.
                                return v52.clone();
                            }
                            &FloatCC::UnorderedOrGreaterThan => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v59 = C::put_in_reg(ctx, v45.1);
                                let v60 = C::put_in_reg(ctx, v45.0);
                                let v13 = C::value_type(ctx, v12);
                                let v64 = &constructor_vec_fcmphes(ctx, v13, v59, v60);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v66 = &constructor_bool(ctx, v64, v7);
                                // Rule at src\isa\s390x\lower.isle line 3679.
                                return v66.clone();
                            }
                            &FloatCC::UnorderedOrGreaterThanOrEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v59 = C::put_in_reg(ctx, v45.1);
                                let v60 = C::put_in_reg(ctx, v45.0);
                                let v13 = C::value_type(ctx, v12);
                                let v61 = &constructor_vec_fcmphs(ctx, v13, v59, v60);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v63 = &constructor_bool(ctx, v61, v7);
                                // Rule at src\isa\s390x\lower.isle line 3673.
                                return v63.clone();
                            }
                            &FloatCC::UnorderedOrLessThan => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v56 = &constructor_vec_fcmphes(ctx, v13, v48, v49);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v58 = &constructor_bool(ctx, v56, v7);
                                // Rule at src\isa\s390x\lower.isle line 3667.
                                return v58.clone();
                            }
                            &FloatCC::UnorderedOrLessThanOrEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v53 = &constructor_vec_fcmphs(ctx, v13, v48, v49);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v55 = &constructor_bool(ctx, v53, v7);
                                // Rule at src\isa\s390x\lower.isle line 3661.
                                return v55.clone();
                            }
                            _ => {}
                        }
                    }
                }
                &InstructionData::IntCompare {
                    opcode: ref v15,
                    args: ref v16,
                    cond: ref v17,
                } => {
                    if let &Opcode::Icmp = v15 {
                        match v17 {
                            &IntCC::Equal => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v23 = &constructor_vec_cmpeqs(ctx, v13, v21, v22);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v26 = &constructor_bool(ctx, v23, v25);
                                // Rule at src\isa\s390x\lower.isle line 3620.
                                return v26.clone();
                            }
                            &IntCC::NotEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v23 = &constructor_vec_cmpeqs(ctx, v13, v21, v22);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v27 = &constructor_bool(ctx, v23, v7);
                                // Rule at src\isa\s390x\lower.isle line 3623.
                                return v27.clone();
                            }
                            &IntCC::SignedGreaterThan => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v28 = &constructor_vec_cmphs(ctx, v13, v21, v22);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v29 = &constructor_bool(ctx, v28, v25);
                                // Rule at src\isa\s390x\lower.isle line 3626.
                                return v29.clone();
                            }
                            &IntCC::SignedGreaterThanOrEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v31 = C::put_in_reg(ctx, v18.1);
                                let v32 = C::put_in_reg(ctx, v18.0);
                                let v13 = C::value_type(ctx, v12);
                                let v33 = &constructor_vec_cmphs(ctx, v13, v31, v32);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v35 = &constructor_bool(ctx, v33, v7);
                                // Rule at src\isa\s390x\lower.isle line 3635.
                                return v35.clone();
                            }
                            &IntCC::SignedLessThan => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v31 = C::put_in_reg(ctx, v18.1);
                                let v32 = C::put_in_reg(ctx, v18.0);
                                let v13 = C::value_type(ctx, v12);
                                let v33 = &constructor_vec_cmphs(ctx, v13, v31, v32);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v34 = &constructor_bool(ctx, v33, v25);
                                // Rule at src\isa\s390x\lower.isle line 3632.
                                return v34.clone();
                            }
                            &IntCC::SignedLessThanOrEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v28 = &constructor_vec_cmphs(ctx, v13, v21, v22);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v30 = &constructor_bool(ctx, v28, v7);
                                // Rule at src\isa\s390x\lower.isle line 3629.
                                return v30.clone();
                            }
                            &IntCC::UnsignedGreaterThan => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v36 = &constructor_vec_cmphls(ctx, v13, v21, v22);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v37 = &constructor_bool(ctx, v36, v25);
                                // Rule at src\isa\s390x\lower.isle line 3638.
                                return v37.clone();
                            }
                            &IntCC::UnsignedGreaterThanOrEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v31 = C::put_in_reg(ctx, v18.1);
                                let v32 = C::put_in_reg(ctx, v18.0);
                                let v13 = C::value_type(ctx, v12);
                                let v39 = &constructor_vec_cmphls(ctx, v13, v31, v32);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v41 = &constructor_bool(ctx, v39, v7);
                                // Rule at src\isa\s390x\lower.isle line 3647.
                                return v41.clone();
                            }
                            &IntCC::UnsignedLessThan => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v31 = C::put_in_reg(ctx, v18.1);
                                let v32 = C::put_in_reg(ctx, v18.0);
                                let v13 = C::value_type(ctx, v12);
                                let v39 = &constructor_vec_cmphls(ctx, v13, v31, v32);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v40 = &constructor_bool(ctx, v39, v25);
                                // Rule at src\isa\s390x\lower.isle line 3644.
                                return v40.clone();
                            }
                            &IntCC::UnsignedLessThanOrEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v36 = &constructor_vec_cmphls(ctx, v13, v21, v22);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v38 = &constructor_bool(ctx, v36, v7);
                                // Rule at src\isa\s390x\lower.isle line 3641.
                                return v38.clone();
                            }
                            _ => {}
                        }
                    }
                }
                _ => {}
            }
        }
    }
    let v2 = C::put_in_reg(ctx, arg0);
    let v1 = C::value_type(ctx, arg0);
    let v4 = constructor_vec_imm(ctx, v1, 0x0_u128);
    let v5 = &constructor_vec_cmpeqs(ctx, v1, v2, v4);
    let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
    let v8 = &constructor_bool(ctx, v5, v7);
    // Rule at src\isa\s390x\lower.isle line 3615.
    return v8.clone();
}

// Generated as internal constructor for term value_nonzero.
pub fn constructor_value_nonzero<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> ProducesBool {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = &C::inst_data_value(ctx, v2);
        match v3 {
            &InstructionData::FloatCompare {
                opcode: ref v12,
                args: ref v13,
                cond: ref v14,
            } => {
                if let &Opcode::Fcmp = v12 {
                    let v15 = C::unpack_value_array_2(ctx, v13);
                    let v18 = &constructor_fcmp_val(ctx, v14, v15.0, v15.1);
                    // Rule at src\isa\s390x\lower.isle line 3739.
                    return v18.clone();
                }
            }
            &InstructionData::IntCompare {
                opcode: ref v4,
                args: ref v5,
                cond: ref v6,
            } => {
                if let &Opcode::Icmp = v4 {
                    let v10 = false;
                    let v7 = C::unpack_value_array_2(ctx, v5);
                    let v11 = &constructor_icmp_val(ctx, v10, v6, v7.0, v7.1);
                    // Rule at src\isa\s390x\lower.isle line 3738.
                    return v11.clone();
                }
            }
            _ => {}
        }
    }
    let v19 = C::value_type(ctx, arg0);
    let v20 = C::gpr32_ty(ctx, v19);
    if let Some(v21) = v20 {
        let v23 = constructor_put_in_reg_sext32(ctx, arg0);
        let v25 = &constructor_icmps_simm16(ctx, I32, v23, 0_i16);
        let v27 = &C::intcc_as_cond(ctx, &IntCC::NotEqual);
        let v28 = &constructor_bool(ctx, v25, v27);
        // Rule at src\isa\s390x\lower.isle line 3740.
        return v28.clone();
    }
    let v29 = C::gpr64_ty(ctx, v19);
    if let Some(v30) = v29 {
        let v32 = C::put_in_reg(ctx, arg0);
        let v33 = &constructor_icmps_simm16(ctx, I64, v32, 0_i16);
        let v27 = &C::intcc_as_cond(ctx, &IntCC::NotEqual);
        let v34 = &constructor_bool(ctx, v33, v27);
        // Rule at src\isa\s390x\lower.isle line 3743.
        return v34.clone();
    }
    let v35 = C::vr128_ty(ctx, v19);
    if let Some(v36) = v35 {
        let v32 = C::put_in_reg(ctx, arg0);
        let v39 = constructor_vec_imm(ctx, I64X2, 0x0_u128);
        let v40 = &constructor_vec_cmpeqs(ctx, I64X2, v32, v39);
        let v42 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
        let v43 = &constructor_bool(ctx, v40, v42);
        // Rule at src\isa\s390x\lower.isle line 3746.
        return v43.clone();
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "value_nonzero", "src\\isa\\s390x\\lower.isle line 3737")
}

// Generated as internal constructor for term lower_call_args.
pub fn constructor_lower_call_args<C: Context>(
    ctx: &mut C,
    arg0: Sig,
    arg1: Range,
    arg2: ValueSlice,
) -> CallArgList {
    let v3 = &C::args_builder_new(ctx);
    let v4 = &C::abi_call_stack_args(ctx, arg0);
    let v5 = constructor_lower_call_args_buffer(ctx, arg0, v4, arg1, arg2);
    let v6 = constructor_lower_call_args_slots(ctx, arg0, v3, v4, arg1, arg2);
    let v7 = constructor_lower_call_ret_arg(ctx, arg0, v3, v4);
    let v8 = &C::args_builder_finish(ctx, v3);
    // Rule at src\isa\s390x\lower.isle line 3942.
    return v8.clone();
}

// Generated as internal constructor for term lower_return_call_args.
pub fn constructor_lower_return_call_args<C: Context>(
    ctx: &mut C,
    arg0: Sig,
    arg1: Range,
    arg2: ValueSlice,
) -> CallArgList {
    let v3 = &C::args_builder_new(ctx);
    let v4 = &C::abi_return_call_stack_args(ctx, arg0);
    let v5 = constructor_lower_call_args_buffer(ctx, arg0, v4, arg1, arg2);
    let v6 = constructor_lower_call_args_slots(ctx, arg0, v3, v4, arg1, arg2);
    let v7 = constructor_lower_return_call_ret_arg(ctx, arg0, v3, v4);
    let v8 = &C::args_builder_finish(ctx, v3);
    // Rule at src\isa\s390x\lower.isle line 3975.
    return v8.clone();
}

// Generated as internal constructor for term lower_call_args_buffer.
pub fn constructor_lower_call_args_buffer<C: Context>(
    ctx: &mut C,
    arg0: Sig,
    arg1: &MemArg,
    arg2: Range,
    arg3: ValueSlice,
) -> InstOutput {
    let v3 = &C::range_view(ctx, arg2);
    match v3 {
        &RangeView::Empty => {
            let v5 = C::output_none(ctx);
            // Rule at src\isa\s390x\lower.isle line 4012.
            return v5;
        }
        &RangeView::NonEmpty {
            index: v6,
            rest: v7,
        } => {
            let v8 = &C::abi_get_arg(ctx, arg0, v6);
            let v9 = C::value_slice_get(ctx, arg3, v6);
            let v10 = constructor_copy_to_buffer(ctx, arg1, v8, v9);
            let v11 = constructor_lower_call_args_buffer(ctx, arg0, arg1, v7, arg3);
            // Rule at src\isa\s390x\lower.isle line 4013.
            return v11;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "lower_call_args_buffer", "src\\isa\\s390x\\lower.isle line 4011")
}

// Generated as internal constructor for term lower_call_args_slots.
pub fn constructor_lower_call_args_slots<C: Context>(
    ctx: &mut C,
    arg0: Sig,
    arg1: &CallArgListBuilder,
    arg2: &MemArg,
    arg3: Range,
    arg4: ValueSlice,
) -> InstOutput {
    let v4 = &C::range_view(ctx, arg3);
    match v4 {
        &RangeView::Empty => {
            let v6 = C::output_none(ctx);
            // Rule at src\isa\s390x\lower.isle line 4020.
            return v6;
        }
        &RangeView::NonEmpty {
            index: v7,
            rest: v8,
        } => {
            let v9 = &C::abi_lane_order(ctx, arg0);
            let v10 = &C::abi_get_arg(ctx, arg0, v7);
            let v11 = C::value_slice_get(ctx, arg4, v7);
            let v12 = constructor_copy_to_arg(ctx, arg1, v9, arg2, v10, v11);
            let v13 = constructor_lower_call_args_slots(ctx, arg0, arg1, arg2, v8, arg4);
            // Rule at src\isa\s390x\lower.isle line 4021.
            return v13;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "lower_call_args_slots", "src\\isa\\s390x\\lower.isle line 4019")
}

// Generated as internal constructor for term lower_call_ret_arg.
pub fn constructor_lower_call_ret_arg<C: Context>(
    ctx: &mut C,
    arg0: Sig,
    arg1: &CallArgListBuilder,
    arg2: &MemArg,
) -> InstOutput {
    let v6 = &C::abi_ret_arg(ctx, arg0);
    if let Some(v7) = v6 {
        let v8 = &C::abi_arg_only_slot(ctx, v7);
        if let Some(v9) = v8 {
            let v10 = &C::abi_lane_order(ctx, arg0);
            let v11 = &C::abi_call_stack_rets(ctx, arg0);
            let v12 = constructor_load_addr(ctx, v11);
            let v13 = constructor_copy_reg_to_arg_slot(ctx, arg1, v10, arg2, v9, v12);
            // Rule at src\isa\s390x\lower.isle line 4030.
            return v13;
        }
    }
    let v1 = C::abi_no_ret_arg(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = C::output_none(ctx);
        // Rule at src\isa\s390x\lower.isle line 4029.
        return v5;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "lower_call_ret_arg", "src\\isa\\s390x\\lower.isle line 4028")
}

// Generated as internal constructor for term lower_return_call_ret_arg.
pub fn constructor_lower_return_call_ret_arg<C: Context>(
    ctx: &mut C,
    arg0: Sig,
    arg1: &CallArgListBuilder,
    arg2: &MemArg,
) -> InstOutput {
    let v6 = &C::abi_ret_arg(ctx, arg0);
    if let Some(v7) = v6 {
        let v8 = &C::abi_arg_only_slot(ctx, v7);
        if let Some(v9) = v8 {
            let v10 = &C::abi_lane_order(ctx, arg0);
            let v11 = C::abi_unwrap_ret_area_ptr(ctx);
            let v12 = constructor_copy_reg_to_arg_slot(ctx, arg1, v10, arg2, v9, v11);
            // Rule at src\isa\s390x\lower.isle line 4037.
            return v12;
        }
    }
    let v1 = C::abi_no_ret_arg(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = C::output_none(ctx);
        // Rule at src\isa\s390x\lower.isle line 4036.
        return v5;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "lower_return_call_ret_arg", "src\\isa\\s390x\\lower.isle line 4035")
}
