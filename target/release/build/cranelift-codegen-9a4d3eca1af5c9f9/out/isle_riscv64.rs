// GENERATED BY ISLE. DO NOT EDIT!
//
// Generated automatically from the instruction-selection DSL code in:
// - src\prelude.isle
// - src\prelude_lower.isle
// - src\isa\riscv64\inst.isle
// - src\isa\riscv64\inst_vector.isle
// - src\isa\riscv64\lower.isle
// - <OUT_DIR>\clif_lower.isle

use super::*;  // Pulls in all external types.
use std::marker::PhantomData;

/// Context during lowering: an implementation of this trait
/// must be provided with all external constructors and extractors.
/// A mutable borrow is passed along through all lowering logic.
pub trait Context {
    fn unit(&mut self, ) -> Unit;
    fn def_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn value_type(&mut self, arg0: Value) -> Type;
    fn u32_nonnegative(&mut self, arg0: u32) -> Option<u32>;
    fn offset32(&mut self, arg0: Offset32) -> i32;
    fn u32_lteq(&mut self, arg0: u32, arg1: u32) -> Option<Unit>;
    fn u8_lteq(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn u8_lt(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn u8_as_i8(&mut self, arg0: u8) -> i8;
    fn u8_as_u32(&mut self, arg0: u8) -> u32;
    fn u8_as_u64(&mut self, arg0: u8) -> u64;
    fn u16_as_i16(&mut self, arg0: u16) -> i16;
    fn u16_as_u32(&mut self, arg0: u16) -> u32;
    fn u16_as_u64(&mut self, arg0: u16) -> u64;
    fn u64_as_u8(&mut self, arg0: u64) -> u8;
    fn u64_as_u16(&mut self, arg0: u64) -> u16;
    fn u64_as_i64(&mut self, arg0: u64) -> i64;
    fn u8_try_from_u64(&mut self, arg0: u64) -> Option<u8>;
    fn u8_try_from_u16(&mut self, arg0: u16) -> Option<u8>;
    fn u8_try_from_i32(&mut self, arg0: i32) -> Option<u8>;
    fn u16_try_from_u64(&mut self, arg0: u64) -> Option<u16>;
    fn u32_try_from_u64(&mut self, arg0: u64) -> Option<u32>;
    fn u64_try_from_i64(&mut self, arg0: i64) -> Option<u64>;
    fn i8_try_from_u64(&mut self, arg0: u64) -> Option<i8>;
    fn i16_try_from_u64(&mut self, arg0: u64) -> Option<i16>;
    fn i32_try_from_u64(&mut self, arg0: u64) -> Option<i32>;
    fn u32_as_u64(&mut self, arg0: u32) -> u64;
    fn i32_as_i64(&mut self, arg0: i32) -> i64;
    fn i64_as_u64(&mut self, arg0: i64) -> u64;
    fn i64_neg(&mut self, arg0: i64) -> i64;
    fn i8_neg(&mut self, arg0: i8) -> i8;
    fn u128_as_u64(&mut self, arg0: u128) -> Option<u64>;
    fn u64_as_u32(&mut self, arg0: u64) -> Option<u32>;
    fn u32_as_u16(&mut self, arg0: u32) -> Option<u16>;
    fn i32_as_i8(&mut self, arg0: i32) -> Option<i8>;
    fn u64_as_i32(&mut self, arg0: u64) -> i32;
    fn u8_and(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_shl(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_shr(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_sub(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u32_add(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_sub(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_and(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_shl(&mut self, arg0: u32, arg1: u32) -> u32;
    fn s32_add_fallible(&mut self, arg0: i32, arg1: i32) -> Option<i32>;
    fn checked_add_with_type(&mut self, arg0: Type, arg1: u64, arg2: u64) -> Option<u64>;
    fn add_overflows_with_type(&mut self, arg0: Type, arg1: u64, arg2: u64) -> bool;
    fn u64_add(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sub(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_mul(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_udiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_and(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_or(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_xor(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_shl(&mut self, arg0: u64, arg1: u64) -> u64;
    fn imm64_sdiv(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Option<Imm64>;
    fn imm64_shl(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_ushr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_sshr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn u64_not(&mut self, arg0: u64) -> u64;
    fn u64_eq(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_le(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_lt(&mut self, arg0: u64, arg1: u64) -> bool;
    fn i64_shr(&mut self, arg0: i64, arg1: i64) -> i64;
    fn i64_ctz(&mut self, arg0: i64) -> i64;
    fn i64_sextend_u64(&mut self, arg0: Type, arg1: u64) -> i64;
    fn i64_sextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> i64;
    fn u64_uextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> u64;
    fn imm64_icmp(&mut self, arg0: Type, arg1: &IntCC, arg2: Imm64, arg3: Imm64) -> Imm64;
    fn u64_is_zero(&mut self, arg0: u64) -> bool;
    fn i64_is_zero(&mut self, arg0: i64) -> bool;
    fn u64_is_odd(&mut self, arg0: u64) -> bool;
    fn u128_replicated_u64(&mut self, arg0: u128) -> Option<u64>;
    fn u64_replicated_u32(&mut self, arg0: u64) -> Option<u64>;
    fn u32_replicated_u16(&mut self, arg0: u64) -> Option<u64>;
    fn u16_replicated_u8(&mut self, arg0: u64) -> Option<u8>;
    fn u128_low_bits(&mut self, arg0: u128) -> u64;
    fn u128_high_bits(&mut self, arg0: u128) -> u64;
    fn f16_min(&mut self, arg0: Ieee16, arg1: Ieee16) -> Option<Ieee16>;
    fn f16_max(&mut self, arg0: Ieee16, arg1: Ieee16) -> Option<Ieee16>;
    fn f16_neg(&mut self, arg0: Ieee16) -> Ieee16;
    fn f16_abs(&mut self, arg0: Ieee16) -> Ieee16;
    fn f16_copysign(&mut self, arg0: Ieee16, arg1: Ieee16) -> Ieee16;
    fn f32_add(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_sub(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_mul(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_div(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_sqrt(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_ceil(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_floor(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_trunc(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_nearest(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_min(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_max(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_neg(&mut self, arg0: Ieee32) -> Ieee32;
    fn f32_abs(&mut self, arg0: Ieee32) -> Ieee32;
    fn f32_copysign(&mut self, arg0: Ieee32, arg1: Ieee32) -> Ieee32;
    fn f64_add(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_sub(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_mul(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_div(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_sqrt(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_ceil(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_floor(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_trunc(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_nearest(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_min(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_max(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_neg(&mut self, arg0: Ieee64) -> Ieee64;
    fn f64_abs(&mut self, arg0: Ieee64) -> Ieee64;
    fn f64_copysign(&mut self, arg0: Ieee64, arg1: Ieee64) -> Ieee64;
    fn f128_min(&mut self, arg0: Ieee128, arg1: Ieee128) -> Option<Ieee128>;
    fn f128_max(&mut self, arg0: Ieee128, arg1: Ieee128) -> Option<Ieee128>;
    fn f128_neg(&mut self, arg0: Ieee128) -> Ieee128;
    fn f128_abs(&mut self, arg0: Ieee128) -> Ieee128;
    fn f128_copysign(&mut self, arg0: Ieee128, arg1: Ieee128) -> Ieee128;
    fn ty_umin(&mut self, arg0: Type) -> u64;
    fn ty_umax(&mut self, arg0: Type) -> u64;
    fn ty_smin(&mut self, arg0: Type) -> u64;
    fn ty_smax(&mut self, arg0: Type) -> u64;
    fn ty_bits(&mut self, arg0: Type) -> u8;
    fn ty_bits_u16(&mut self, arg0: Type) -> u16;
    fn ty_bits_u64(&mut self, arg0: Type) -> u64;
    fn ty_mask(&mut self, arg0: Type) -> u64;
    fn ty_lane_mask(&mut self, arg0: Type) -> u64;
    fn ty_lane_count(&mut self, arg0: Type) -> u64;
    fn ty_bytes(&mut self, arg0: Type) -> u16;
    fn lane_type(&mut self, arg0: Type) -> Type;
    fn ty_half_lanes(&mut self, arg0: Type) -> Option<Type>;
    fn ty_half_width(&mut self, arg0: Type) -> Option<Type>;
    fn ty_equal(&mut self, arg0: Type, arg1: Type) -> bool;
    fn mem_flags_trusted(&mut self, ) -> MemFlags;
    fn intcc_swap_args(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_complement(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_without_eq(&mut self, arg0: &IntCC) -> IntCC;
    fn floatcc_swap_args(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_complement(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_unordered(&mut self, arg0: &FloatCC) -> bool;
    fn fits_in_16(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn lane_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_16(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64_extract(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32_or_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_8_or_16(&mut self, arg0: Type) -> Option<Type>;
    fn ty_16_or_32(&mut self, arg0: Type) -> Option<Type>;
    fn int_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_16_to_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_float_or_vec(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_not_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_ctor(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_addr64(&mut self, arg0: Type) -> Option<Type>;
    fn not_vec32x2(&mut self, arg0: Type) -> Option<Type>;
    fn not_i64x2(&mut self, arg0: Type) -> Option<()>;
    fn u8_from_uimm8(&mut self, arg0: Uimm8) -> u8;
    fn u64_from_bool(&mut self, arg0: bool) -> u64;
    fn u64_from_imm64(&mut self, arg0: Imm64) -> u64;
    fn nonzero_u64_from_imm64(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64_power_of_two(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64(&mut self, arg0: u64) -> Imm64;
    fn imm64_masked(&mut self, arg0: Type, arg1: u64) -> Imm64;
    fn u16_from_ieee16(&mut self, arg0: Ieee16) -> u16;
    fn u32_from_ieee32(&mut self, arg0: Ieee32) -> u32;
    fn u64_from_ieee64(&mut self, arg0: Ieee64) -> u64;
    fn multi_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn ty_dyn64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn128_int(&mut self, arg0: Type) -> Option<Type>;
    fn offset32_to_i32(&mut self, arg0: Offset32) -> i32;
    fn i32_to_offset32(&mut self, arg0: i32) -> Offset32;
    fn intcc_unsigned(&mut self, arg0: &IntCC) -> IntCC;
    fn signed_cond_code(&mut self, arg0: &IntCC) -> Option<IntCC>;
    fn trap_code_division_by_zero(&mut self, ) -> TrapCode;
    fn trap_code_integer_overflow(&mut self, ) -> TrapCode;
    fn trap_code_bad_conversion_to_integer(&mut self, ) -> TrapCode;
    fn range(&mut self, arg0: usize, arg1: usize) -> Range;
    fn range_view(&mut self, arg0: Range) -> RangeView;
    fn value_reg(&mut self, arg0: Reg) -> ValueRegs;
    fn writable_value_reg(&mut self, arg0: WritableReg) -> WritableValueRegs;
    fn value_regs(&mut self, arg0: Reg, arg1: Reg) -> ValueRegs;
    fn writable_value_regs(&mut self, arg0: WritableReg, arg1: WritableReg) -> WritableValueRegs;
    fn value_regs_invalid(&mut self, ) -> ValueRegs;
    fn output_none(&mut self, ) -> InstOutput;
    fn output(&mut self, arg0: ValueRegs) -> InstOutput;
    fn output_pair(&mut self, arg0: ValueRegs, arg1: ValueRegs) -> InstOutput;
    fn output_builder_new(&mut self, ) -> InstOutputBuilder;
    fn output_builder_push(&mut self, arg0: &InstOutputBuilder, arg1: ValueRegs) -> Unit;
    fn output_builder_finish(&mut self, arg0: &InstOutputBuilder) -> InstOutput;
    fn temp_writable_reg(&mut self, arg0: Type) -> WritableReg;
    fn is_valid_reg(&mut self, arg0: Reg) -> bool;
    fn invalid_reg(&mut self, ) -> Reg;
    fn mark_value_used(&mut self, arg0: Value) -> Unit;
    fn put_in_reg(&mut self, arg0: Value) -> Reg;
    fn put_in_regs(&mut self, arg0: Value) -> ValueRegs;
    fn ensure_in_vreg(&mut self, arg0: Reg, arg1: Type) -> Reg;
    fn value_regs_get(&mut self, arg0: ValueRegs, arg1: usize) -> Reg;
    fn value_regs_len(&mut self, arg0: ValueRegs) -> usize;
    fn preg_to_reg(&mut self, arg0: PReg) -> Reg;
    fn add_range_fact(&mut self, arg0: Reg, arg1: u16, arg2: u64, arg3: u64) -> Reg;
    fn single_target(&mut self, arg0: &MachLabelSlice) -> Option<MachLabel>;
    fn two_targets(&mut self, arg0: &MachLabelSlice) -> Option<(MachLabel, MachLabel)>;
    fn jump_table_targets(&mut self, arg0: &MachLabelSlice) -> Option<(MachLabel, BoxVecMachLabel)>;
    fn jump_table_size(&mut self, arg0: &BoxVecMachLabel) -> u32;
    fn value_list_slice(&mut self, arg0: ValueList) -> ValueSlice;
    fn value_slice_empty(&mut self, arg0: ValueSlice) -> Option<()>;
    fn value_slice_unwrap(&mut self, arg0: ValueSlice) -> Option<(Value, ValueSlice)>;
    fn value_slice_len(&mut self, arg0: ValueSlice) -> usize;
    fn value_slice_get(&mut self, arg0: ValueSlice, arg1: usize) -> Value;
    fn writable_reg_to_reg(&mut self, arg0: WritableReg) -> Reg;
    fn inst_results(&mut self, arg0: Inst) -> ValueSlice;
    fn value_is_unused(&mut self, arg0: Value) -> bool;
    fn first_result(&mut self, arg0: Inst) -> Option<Value>;
    fn inst_data_value(&mut self, arg0: Inst) -> InstructionData;
    fn i32_from_iconst(&mut self, arg0: Value) -> Option<i32>;
    fn i64_from_iconst(&mut self, arg0: Value) -> Option<i64>;
    fn zero_value(&mut self, arg0: Value) -> Option<Value>;
    fn is_sinkable_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn maybe_uextend(&mut self, arg0: Value) -> Option<Value>;
    fn uimm8(&mut self, arg0: Imm64) -> Option<u8>;
    fn emit(&mut self, arg0: &MInst) -> Unit;
    fn sink_inst(&mut self, arg0: Inst) -> Unit;
    fn emit_u64_le_const(&mut self, arg0: u64) -> VCodeConstant;
    fn emit_u128_le_const(&mut self, arg0: u128) -> VCodeConstant;
    fn const_to_vconst(&mut self, arg0: Constant) -> VCodeConstant;
    fn tls_model(&mut self, arg0: Type) -> TlsModel;
    fn tls_model_is_elf_gd(&mut self, ) -> Option<Unit>;
    fn tls_model_is_macho(&mut self, ) -> Option<Unit>;
    fn tls_model_is_coff(&mut self, ) -> Option<Unit>;
    fn preserve_frame_pointers(&mut self, ) -> Option<Unit>;
    fn stack_switch_model(&mut self, ) -> Option<StackSwitchModel>;
    fn box_external_name(&mut self, arg0: ExternalName) -> BoxExternalName;
    fn func_ref_data(&mut self, arg0: FuncRef) -> (SigRef, ExternalName, RelocDistance);
    fn exception_sig(&mut self, arg0: ExceptionTable) -> SigRef;
    fn symbol_value_data(&mut self, arg0: GlobalValue) -> Option<(ExternalName, RelocDistance, i64)>;
    fn reloc_distance_near(&mut self, arg0: RelocDistance) -> Option<()>;
    fn vec_mask_from_immediate(&mut self, arg0: Immediate) -> Option<VecMask>;
    fn u128_from_immediate(&mut self, arg0: Immediate) -> Option<u128>;
    fn vconst_from_immediate(&mut self, arg0: Immediate) -> Option<VCodeConstant>;
    fn u128_from_constant(&mut self, arg0: Constant) -> Option<u128>;
    fn u64_from_constant(&mut self, arg0: Constant) -> Option<u64>;
    fn shuffle64_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8)>;
    fn shuffle32_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8, u8, u8)>;
    fn shuffle16_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8, u8, u8, u8, u8, u8, u8)>;
    fn only_writable_reg(&mut self, arg0: WritableValueRegs) -> Option<WritableReg>;
    fn writable_regs_get(&mut self, arg0: WritableValueRegs, arg1: usize) -> WritableReg;
    fn abi_num_args(&mut self, arg0: Sig) -> usize;
    fn abi_get_arg(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_num_rets(&mut self, arg0: Sig) -> usize;
    fn abi_get_ret(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_ret_arg(&mut self, arg0: Sig) -> Option<ABIArg>;
    fn abi_no_ret_arg(&mut self, arg0: Sig) -> Option<()>;
    fn abi_unwrap_ret_area_ptr(&mut self, ) -> Reg;
    fn abi_stackslot_addr(&mut self, arg0: WritableReg, arg1: StackSlot, arg2: Offset32) -> MInst;
    fn abi_dynamic_stackslot_addr(&mut self, arg0: WritableReg, arg1: DynamicStackSlot) -> MInst;
    fn abi_arg_only_slot(&mut self, arg0: &ABIArg) -> Option<ABIArgSlot>;
    fn abi_arg_implicit_pointer(&mut self, arg0: &ABIArg) -> Option<(ABIArgSlot, i64, Type)>;
    fn real_reg_to_reg(&mut self, arg0: RealReg) -> Reg;
    fn real_reg_to_writable_reg(&mut self, arg0: RealReg) -> WritableReg;
    fn gen_move(&mut self, arg0: Type, arg1: WritableReg, arg2: Reg) -> MInst;
    fn gen_return(&mut self, arg0: ValueSlice) -> Unit;
    fn gen_return_call(&mut self, arg0: SigRef, arg1: ExternalName, arg2: RelocDistance, arg3: ValueSlice) -> InstOutput;
    fn gen_return_call_indirect(&mut self, arg0: SigRef, arg1: Value, arg2: ValueSlice) -> InstOutput;
    fn safe_divisor_from_imm64(&mut self, arg0: Type, arg1: Imm64) -> Option<u64>;
    fn fpu_op_width_from_ty(&mut self, arg0: Type) -> FpuOPWidth;
    fn frm_bits(&mut self, arg0: &FRM) -> UImm5;
    fn xreg_new(&mut self, arg0: Reg) -> XReg;
    fn writable_xreg_new(&mut self, arg0: WritableReg) -> WritableXReg;
    fn writable_xreg_to_xreg(&mut self, arg0: WritableXReg) -> XReg;
    fn writable_xreg_to_writable_reg(&mut self, arg0: WritableXReg) -> WritableReg;
    fn xreg_to_reg(&mut self, arg0: XReg) -> Reg;
    fn freg_new(&mut self, arg0: Reg) -> FReg;
    fn writable_freg_new(&mut self, arg0: WritableReg) -> WritableFReg;
    fn writable_freg_to_freg(&mut self, arg0: WritableFReg) -> FReg;
    fn writable_freg_to_writable_reg(&mut self, arg0: WritableFReg) -> WritableReg;
    fn freg_to_reg(&mut self, arg0: FReg) -> Reg;
    fn vreg_new(&mut self, arg0: Reg) -> VReg;
    fn writable_vreg_new(&mut self, arg0: WritableReg) -> WritableVReg;
    fn writable_vreg_to_vreg(&mut self, arg0: WritableVReg) -> VReg;
    fn writable_vreg_to_writable_reg(&mut self, arg0: WritableVReg) -> WritableReg;
    fn vreg_to_reg(&mut self, arg0: VReg) -> Reg;
    fn u8_as_i32(&mut self, arg0: u8) -> i32;
    fn has_m(&mut self, ) -> bool;
    fn has_v(&mut self, ) -> bool;
    fn has_zfa(&mut self, ) -> bool;
    fn has_zfhmin(&mut self, ) -> bool;
    fn has_zfh(&mut self, ) -> bool;
    fn has_zvfh(&mut self, ) -> bool;
    fn has_zbkb(&mut self, ) -> bool;
    fn has_zba(&mut self, ) -> bool;
    fn has_zbb(&mut self, ) -> bool;
    fn has_zbc(&mut self, ) -> bool;
    fn has_zbs(&mut self, ) -> bool;
    fn has_zicond(&mut self, ) -> bool;
    fn ty_supported(&mut self, arg0: Type) -> Option<Type>;
    fn ty_supported_float_size(&mut self, arg0: Type) -> Option<Type>;
    fn ty_supported_float_min(&mut self, arg0: Type) -> Option<Type>;
    fn ty_supported_float_full(&mut self, arg0: Type) -> Option<Type>;
    fn ty_supported_vec(&mut self, arg0: Type) -> Option<Type>;
    fn ty_reg_pair(&mut self, arg0: Type) -> Option<Type>;
    fn fli_constant_from_u64(&mut self, arg0: Type, arg1: u64) -> Option<FliConstant>;
    fn fli_constant_from_negated_u64(&mut self, arg0: Type, arg1: u64) -> Option<FliConstant>;
    fn i64_generate_imm(&mut self, arg0: i64) -> Option<(Imm20, Imm12)>;
    fn i64_shift_for_lui(&mut self, arg0: i64) -> Option<(u64, Imm12)>;
    fn i64_shift(&mut self, arg0: i64) -> Option<(i64, Imm12)>;
    fn imm12_const(&mut self, arg0: i32) -> Imm12;
    fn imm_from_bits(&mut self, arg0: u64) -> Imm12;
    fn imm_from_neg_bits(&mut self, arg0: i64) -> Imm12;
    fn imm12_const_add(&mut self, arg0: i32, arg1: i32) -> Imm12;
    fn imm12_add(&mut self, arg0: Imm12, arg1: i32) -> Option<Imm12>;
    fn imm12_and(&mut self, arg0: Imm12, arg1: u64) -> Imm12;
    fn imm12_from_u64(&mut self, arg0: u64) -> Option<Imm12>;
    fn imm12_from_i64(&mut self, arg0: i64) -> Option<Imm12>;
    fn imm12_is_zero(&mut self, arg0: Imm12) -> Option<()>;
    fn imm20_is_zero(&mut self, arg0: Imm20) -> Option<()>;
    fn imm20_from_u64(&mut self, arg0: u64) -> Option<Imm20>;
    fn imm20_from_i64(&mut self, arg0: i64) -> Option<Imm20>;
    fn imm5_from_u64(&mut self, arg0: u64) -> Option<Imm5>;
    fn imm5_from_i64(&mut self, arg0: i64) -> Option<Imm5>;
    fn i8_to_imm5(&mut self, arg0: i8) -> Option<Imm5>;
    fn uimm5_from_u8(&mut self, arg0: u8) -> Option<UImm5>;
    fn uimm5_from_u64(&mut self, arg0: u64) -> Option<UImm5>;
    fn uimm5_bitcast_to_imm5(&mut self, arg0: UImm5) -> Imm5;
    fn gen_shamt(&mut self, arg0: Type, arg1: XReg) -> ValueRegs;
    fn gen_reg_offset_amode(&mut self, arg0: Reg, arg1: i64) -> AMode;
    fn gen_sp_offset_amode(&mut self, arg0: i64) -> AMode;
    fn gen_fp_offset_amode(&mut self, arg0: i64) -> AMode;
    fn gen_stack_slot_amode(&mut self, arg0: StackSlot, arg1: i64) -> AMode;
    fn gen_const_amode(&mut self, arg0: VCodeConstant) -> AMode;
    fn sinkable_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn valid_atomic_transaction(&mut self, arg0: Type) -> Option<Type>;
    fn atomic_amo(&mut self, ) -> AMO;
    fn gen_stack_addr(&mut self, arg0: StackSlot, arg1: Offset32) -> Reg;
    fn load_op(&mut self, arg0: Type) -> LoadOP;
    fn store_op(&mut self, arg0: Type) -> StoreOP;
    fn load_ext_name(&mut self, arg0: ExternalName, arg1: i64) -> Reg;
    fn int_compare(&mut self, arg0: &IntCC, arg1: XReg, arg2: XReg) -> IntegerCompare;
    fn int_compare_decompose(&mut self, arg0: IntegerCompare) -> (IntCC, XReg, XReg);
    fn label_to_br_target(&mut self, arg0: MachLabel) -> CondBrTarget;
    fn lower_br_table(&mut self, arg0: Reg, arg1: &MachLabelSlice) -> Unit;
    fn load_ra(&mut self, ) -> Reg;
    fn gen_call(&mut self, arg0: SigRef, arg1: ExternalName, arg2: RelocDistance, arg3: ValueSlice) -> InstOutput;
    fn gen_call_indirect(&mut self, arg0: SigRef, arg1: Value, arg2: ValueSlice) -> InstOutput;
    fn gen_try_call(&mut self, arg0: SigRef, arg1: ExternalName, arg2: RelocDistance, arg3: ExceptionTable, arg4: ValueSlice, arg5: &MachLabelSlice) -> Unit;
    fn gen_try_call_indirect(&mut self, arg0: SigRef, arg1: Value, arg2: ExceptionTable, arg3: ValueSlice, arg4: &MachLabelSlice) -> Unit;
    fn fp_reg(&mut self, ) -> PReg;
    fn sp_reg(&mut self, ) -> PReg;
    fn is_non_zero_reg(&mut self, arg0: XReg) -> Option<()>;
    fn is_zero_reg(&mut self, arg0: XReg) -> Option<()>;
    fn zero_reg(&mut self, ) -> XReg;
    fn writable_zero_reg(&mut self, ) -> WritableReg;
    fn vec_alu_rr_dst_type(&mut self, arg0: &VecAluOpRR) -> Type;
    fn vstate_from_type(&mut self, arg0: Type) -> VState;
    fn vstate_mf2(&mut self, arg0: VState) -> VState;
    fn min_vec_reg_size(&mut self, ) -> u64;
    fn ty_vec_fits_in_register(&mut self, arg0: Type) -> Option<Type>;
    fn bclr_imm(&mut self, arg0: Type, arg1: u64) -> Option<Imm12>;
    fn bseti_imm(&mut self, arg0: u64) -> Option<Imm12>;
    fn binvi_imm(&mut self, arg0: u64) -> Option<Imm12>;
    fn is_atomic_rmw_max_etc(&mut self, arg0: &AtomicRmwOp) -> Option<(AtomicRmwOp, bool)>;
    fn fcvt_smax_bound(&mut self, arg0: Type, arg1: Type, arg2: bool) -> u64;
    fn fcvt_smin_bound(&mut self, arg0: Type, arg1: Type, arg2: bool) -> u64;
    fn fcvt_umax_bound(&mut self, arg0: Type, arg1: Type, arg2: bool) -> u64;
    fn fcvt_umin_bound(&mut self, arg0: Type, arg1: bool) -> u64;
    fn unpack_value_array_2(&mut self, arg0: &ValueArray2) -> (Value, Value);
    fn pack_value_array_2(&mut self, arg0: Value, arg1: Value) -> ValueArray2;
    fn unpack_value_array_3(&mut self, arg0: &ValueArray3) -> (Value, Value, Value);
    fn pack_value_array_3(&mut self, arg0: Value, arg1: Value, arg2: Value) -> ValueArray3;
    fn unpack_block_array_2(&mut self, arg0: &BlockArray2) -> (BlockCall, BlockCall);
    fn pack_block_array_2(&mut self, arg0: BlockCall, arg1: BlockCall) -> BlockArray2;
}

pub trait ContextIter {
    type Context;
    type Output;
    fn next(&mut self, ctx: &mut Self::Context) -> Option<Self::Output>;
    fn size_hint(&self) -> (usize, Option<usize>) { (0, None) }
}

pub trait IntoContextIter {
    type Context;
    type Output;
    type IntoIter: ContextIter<Context = Self::Context, Output = Self::Output>;
    fn into_context_iter(self) -> Self::IntoIter;
}

pub trait Length {
    fn len(&self) -> usize;
}

impl<T> Length for std::vec::Vec<T> {
    fn len(&self) -> usize {
        std::vec::Vec::len(self)
    }
}

pub struct ContextIterWrapper<I, C> {
    iter: I,
    _ctx: std::marker::PhantomData<C>,
}
impl<I: Default, C> Default for ContextIterWrapper<I, C> {
    fn default() -> Self {
        ContextIterWrapper {
            iter: I::default(),
            _ctx: std::marker::PhantomData
        }
    }
}
impl<I, C> std::ops::Deref for ContextIterWrapper<I, C> {
    type Target = I;
    fn deref(&self) -> &I {
        &self.iter
    }
}
impl<I, C> std::ops::DerefMut for ContextIterWrapper<I, C> {
    fn deref_mut(&mut self) -> &mut I {
        &mut self.iter
    }
}
impl<I: Iterator, C: Context> From<I> for ContextIterWrapper<I, C> {
    fn from(iter: I) -> Self {
        Self { iter, _ctx: std::marker::PhantomData }
    }
}
impl<I: Iterator, C: Context> ContextIter for ContextIterWrapper<I, C> {
    type Context = C;
    type Output = I::Item;
    fn next(&mut self, _ctx: &mut Self::Context) -> Option<Self::Output> {
        self.iter.next()
    }
    fn size_hint(&self) -> (usize, Option<usize>) {
        self.iter.size_hint()
    }
}
impl<I: IntoIterator, C: Context> IntoContextIter for ContextIterWrapper<I, C> {
    type Context = C;
    type Output = I::Item;
    type IntoIter = ContextIterWrapper<I::IntoIter, C>;
    fn into_context_iter(self) -> Self::IntoIter {
        ContextIterWrapper {
            iter: self.iter.into_iter(),
            _ctx: std::marker::PhantomData
        }
    }
}
impl<T, E: Extend<T>, C> Extend<T> for ContextIterWrapper<E, C> {
    fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
        self.iter.extend(iter);
    }
}
impl<L: Length, C> Length for ContextIterWrapper<L, C> {
    fn len(&self) -> usize {
        self.iter.len()
    }
}
           

/// Internal type MultiReg: defined at src\prelude_lower.isle line 17.
#[derive(Clone, Debug)]
pub enum MultiReg {
    Empty,
    One {
        a: Reg,
    },
    Two {
        a: Reg,
        b: Reg,
    },
    Three {
        a: Reg,
        b: Reg,
        c: Reg,
    },
    Four {
        a: Reg,
        b: Reg,
        c: Reg,
        d: Reg,
    },
}

/// Internal type SideEffectNoResult: defined at src\prelude_lower.isle line 422.
#[derive(Clone, Debug)]
pub enum SideEffectNoResult {
    Inst {
        inst: MInst,
    },
    Inst2 {
        inst1: MInst,
        inst2: MInst,
    },
    Inst3 {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
    },
}

/// Internal type ProducesFlags: defined at src\prelude_lower.isle line 475.
#[derive(Clone, Debug)]
pub enum ProducesFlags {
    AlreadyExistingFlags,
    ProducesFlagsSideEffect {
        inst: MInst,
    },
    ProducesFlagsTwiceSideEffect {
        inst1: MInst,
        inst2: MInst,
    },
    ProducesFlagsReturnsReg {
        inst: MInst,
        result: Reg,
    },
    ProducesFlagsReturnsResultWithConsumer {
        inst: MInst,
        result: Reg,
    },
}

/// Internal type ConsumesAndProducesFlags: defined at src\prelude_lower.isle line 494.
#[derive(Clone, Debug)]
pub enum ConsumesAndProducesFlags {
    SideEffect {
        inst: MInst,
    },
    ReturnsReg {
        inst: MInst,
        result: Reg,
    },
}

/// Internal type ConsumesFlags: defined at src\prelude_lower.isle line 502.
#[derive(Clone, Debug)]
pub enum ConsumesFlags {
    ConsumesFlagsSideEffect {
        inst: MInst,
    },
    ConsumesFlagsSideEffect2 {
        inst1: MInst,
        inst2: MInst,
    },
    ConsumesFlagsReturnsResultWithProducer {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsReturnsReg {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsTwiceReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        result: ValueRegs,
    },
    ConsumesFlagsFourTimesReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
        inst4: MInst,
        result: ValueRegs,
    },
}

/// Internal type MInst: defined at src\isa\riscv64\inst.isle line 1.
#[derive(Clone, Debug)]
pub enum MInst {
    Nop0,
    Nop4,
    Lui {
        rd: WritableReg,
        imm: Imm20,
    },
    LoadInlineConst {
        rd: WritableReg,
        ty: Type,
        imm: u64,
    },
    Auipc {
        rd: WritableReg,
        imm: Imm20,
    },
    Fli {
        width: FpuOPWidth,
        imm: FliConstant,
        rd: WritableReg,
    },
    FpuRR {
        alu_op: FpuOPRR,
        width: FpuOPWidth,
        frm: FRM,
        rd: WritableReg,
        rs: Reg,
    },
    AluRRR {
        alu_op: AluOPRRR,
        rd: WritableReg,
        rs1: Reg,
        rs2: Reg,
    },
    FpuRRR {
        alu_op: FpuOPRRR,
        width: FpuOPWidth,
        frm: FRM,
        rd: WritableReg,
        rs1: Reg,
        rs2: Reg,
    },
    FpuRRRR {
        alu_op: FpuOPRRRR,
        width: FpuOPWidth,
        frm: FRM,
        rd: WritableReg,
        rs1: Reg,
        rs2: Reg,
        rs3: Reg,
    },
    AluRRImm12 {
        alu_op: AluOPRRI,
        rd: WritableReg,
        rs: Reg,
        imm12: Imm12,
    },
    CsrReg {
        op: CsrRegOP,
        rd: WritableReg,
        rs: Reg,
        csr: CSR,
    },
    CsrImm {
        op: CsrImmOP,
        rd: WritableReg,
        imm: UImm5,
        csr: CSR,
    },
    Load {
        rd: WritableReg,
        op: LoadOP,
        flags: MemFlags,
        from: AMode,
    },
    Store {
        to: AMode,
        op: StoreOP,
        flags: MemFlags,
        src: Reg,
    },
    Args {
        args: VecArgPair,
    },
    Rets {
        rets: VecRetPair,
    },
    Ret,
    Extend {
        rd: WritableReg,
        rn: Reg,
        signed: bool,
        from_bits: u8,
        to_bits: u8,
    },
    Call {
        info: BoxCallInfo,
    },
    CallInd {
        info: BoxCallIndInfo,
    },
    ReturnCall {
        info: BoxReturnCallInfo,
    },
    ReturnCallInd {
        info: BoxReturnCallIndInfo,
    },
    TrapIf {
        rs1: Reg,
        rs2: Reg,
        cc: IntCC,
        trap_code: TrapCode,
    },
    Jal {
        label: MachLabel,
    },
    CondBr {
        taken: CondBrTarget,
        not_taken: CondBrTarget,
        kind: IntegerCompare,
    },
    LoadExtName {
        rd: WritableReg,
        name: BoxExternalName,
        offset: i64,
    },
    ElfTlsGetAddr {
        rd: WritableReg,
        name: BoxExternalName,
    },
    LoadAddr {
        rd: WritableReg,
        mem: AMode,
    },
    Mov {
        rd: WritableReg,
        rm: Reg,
        ty: Type,
    },
    MovFromPReg {
        rd: WritableReg,
        rm: PReg,
    },
    Fence {
        pred: u8,
        succ: u8,
    },
    EBreak,
    Udf {
        trap_code: TrapCode,
    },
    Jalr {
        rd: WritableReg,
        base: Reg,
        offset: Imm12,
    },
    Atomic {
        op: AtomicOP,
        rd: WritableReg,
        addr: Reg,
        src: Reg,
        amo: AMO,
    },
    AtomicStore {
        src: Reg,
        ty: Type,
        p: Reg,
    },
    AtomicLoad {
        rd: WritableReg,
        ty: Type,
        p: Reg,
    },
    AtomicRmwLoop {
        offset: Reg,
        op: AtomicRmwOp,
        dst: WritableReg,
        ty: Type,
        p: Reg,
        x: Reg,
        t0: WritableReg,
    },
    Select {
        dst: WritableValueRegs,
        condition: IntegerCompare,
        x: ValueRegs,
        y: ValueRegs,
    },
    BrTable {
        index: Reg,
        tmp1: WritableReg,
        tmp2: WritableReg,
        targets: VecMachLabel,
    },
    AtomicCas {
        offset: Reg,
        t0: WritableReg,
        dst: WritableReg,
        e: Reg,
        addr: Reg,
        v: Reg,
        ty: Type,
    },
    RawData {
        data: VecU8,
    },
    Unwind {
        inst: UnwindInst,
    },
    DummyUse {
        reg: Reg,
    },
    Popcnt {
        sum: WritableReg,
        step: WritableReg,
        tmp: WritableReg,
        rs: Reg,
        ty: Type,
    },
    Cltz {
        leading: bool,
        sum: WritableReg,
        step: WritableReg,
        tmp: WritableReg,
        rs: Reg,
        ty: Type,
    },
    Brev8 {
        rs: Reg,
        ty: Type,
        step: WritableReg,
        tmp: WritableReg,
        tmp2: WritableReg,
        rd: WritableReg,
    },
    StackProbeLoop {
        guard_size: u32,
        probe_count: u32,
        tmp: WritableReg,
    },
    VecAluRRRR {
        op: VecAluOpRRRR,
        vd: WritableReg,
        vd_src: Reg,
        vs2: Reg,
        vs1: Reg,
        mask: VecOpMasking,
        vstate: VState,
    },
    VecAluRRRImm5 {
        op: VecAluOpRRRImm5,
        vd: WritableReg,
        vd_src: Reg,
        vs2: Reg,
        imm: Imm5,
        mask: VecOpMasking,
        vstate: VState,
    },
    VecAluRRR {
        op: VecAluOpRRR,
        vd: WritableReg,
        vs2: Reg,
        vs1: Reg,
        mask: VecOpMasking,
        vstate: VState,
    },
    VecAluRRImm5 {
        op: VecAluOpRRImm5,
        vd: WritableReg,
        vs2: Reg,
        imm: Imm5,
        mask: VecOpMasking,
        vstate: VState,
    },
    VecAluRR {
        op: VecAluOpRR,
        vd: WritableReg,
        vs: Reg,
        mask: VecOpMasking,
        vstate: VState,
    },
    VecAluRImm5 {
        op: VecAluOpRImm5,
        vd: WritableReg,
        imm: Imm5,
        mask: VecOpMasking,
        vstate: VState,
    },
    VecSetState {
        rd: WritableReg,
        vstate: VState,
    },
    VecLoad {
        eew: VecElementWidth,
        to: WritableReg,
        from: VecAMode,
        flags: MemFlags,
        mask: VecOpMasking,
        vstate: VState,
    },
    VecStore {
        eew: VecElementWidth,
        to: VecAMode,
        from: Reg,
        flags: MemFlags,
        mask: VecOpMasking,
        vstate: VState,
    },
    EmitIsland {
        needed_space: u32,
    },
}

/// Internal type AtomicOP: defined at src\isa\riscv64\inst.isle line 353.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum AtomicOP {
    LrW,
    ScW,
    AmoswapW,
    AmoaddW,
    AmoxorW,
    AmoandW,
    AmoorW,
    AmominW,
    AmomaxW,
    AmominuW,
    AmomaxuW,
    LrD,
    ScD,
    AmoswapD,
    AmoaddD,
    AmoxorD,
    AmoandD,
    AmoorD,
    AmominD,
    AmomaxD,
    AmominuD,
    AmomaxuD,
}

/// Internal type FpuOPRRRR: defined at src\isa\riscv64\inst.isle line 378.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuOPRRRR {
    Fmadd,
    Fmsub,
    Fnmsub,
    Fnmadd,
}

/// Internal type FClassResult: defined at src\isa\riscv64\inst.isle line 385.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FClassResult {
    NegInfinite,
    NegNormal,
    NegSubNormal,
    NegZero,
    PosZero,
    PosSubNormal,
    PosNormal,
    PosInfinite,
    SNaN,
    QNaN,
}

/// Internal type FpuOPWidth: defined at src\isa\riscv64\inst.isle line 410.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuOPWidth {
    S,
    D,
    H,
    Q,
}

/// Internal type FpuOPRR: defined at src\isa\riscv64\inst.isle line 421.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuOPRR {
    Fsqrt,
    Fclass,
    FcvtWFmt,
    FcvtWuFmt,
    FcvtLFmt,
    FcvtLuFmt,
    FcvtFmtW,
    FcvtFmtWu,
    FcvtFmtL,
    FcvtFmtLu,
    FmvXFmt,
    FmvFmtX,
    FcvtSD,
    FcvtDS,
    Fround,
}

/// Internal type LoadOP: defined at src\isa\riscv64\inst.isle line 441.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum LoadOP {
    Lb,
    Lh,
    Lw,
    Lbu,
    Lhu,
    Lwu,
    Ld,
    Flh,
    Flw,
    Fld,
}

/// Internal type StoreOP: defined at src\isa\riscv64\inst.isle line 454.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum StoreOP {
    Sb,
    Sh,
    Sw,
    Sd,
    Fsh,
    Fsw,
    Fsd,
}

/// Internal type AluOPRRR: defined at src\isa\riscv64\inst.isle line 464.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum AluOPRRR {
    Add,
    Sub,
    Sll,
    Slt,
    SltU,
    Sgt,
    Sgtu,
    Xor,
    Srl,
    Sra,
    Or,
    And,
    Addw,
    Subw,
    Sllw,
    Srlw,
    Sraw,
    Mul,
    Mulh,
    Mulhsu,
    Mulhu,
    Div,
    DivU,
    Rem,
    RemU,
    Mulw,
    Divw,
    Divuw,
    Remw,
    Remuw,
    Adduw,
    Sh1add,
    Sh1adduw,
    Sh2add,
    Sh2adduw,
    Sh3add,
    Sh3adduw,
    Andn,
    Orn,
    Xnor,
    Max,
    Maxu,
    Min,
    Minu,
    Rol,
    Rolw,
    Ror,
    Rorw,
    Bclr,
    Bext,
    Binv,
    Bset,
    Clmul,
    Clmulh,
    Clmulr,
    Pack,
    Packw,
    Packh,
    CzeroEqz,
    CzeroNez,
}

/// Internal type FpuOPRRR: defined at src\isa\riscv64\inst.isle line 548.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuOPRRR {
    Fadd,
    Fsub,
    Fmul,
    Fdiv,
    Fsgnj,
    Fsgnjn,
    Fsgnjx,
    Fmin,
    Fmax,
    Feq,
    Flt,
    Fle,
    Fminm,
    Fmaxm,
}

/// Internal type AluOPRRI: defined at src\isa\riscv64\inst.isle line 569.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum AluOPRRI {
    Addi,
    Slti,
    SltiU,
    Xori,
    Ori,
    Andi,
    Slli,
    Srli,
    Srai,
    Addiw,
    Slliw,
    SrliW,
    Sraiw,
    SlliUw,
    Clz,
    Clzw,
    Ctz,
    Ctzw,
    Cpop,
    Cpopw,
    Sextb,
    Sexth,
    Zexth,
    Rori,
    Roriw,
    Rev8,
    Brev8,
    Orcb,
    Bclri,
    Bexti,
    Binvi,
    Bseti,
}

/// Internal type COpcodeSpace: defined at src\isa\riscv64\inst.isle line 611.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum COpcodeSpace {
    C0,
    C1,
    C2,
}

/// Internal type CrOp: defined at src\isa\riscv64\inst.isle line 618.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CrOp {
    CMv,
    CAdd,
    CJr,
    CJalr,
    CEbreak,
}

/// Internal type CaOp: defined at src\isa\riscv64\inst.isle line 629.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CaOp {
    CAnd,
    COr,
    CXor,
    CSub,
    CAddw,
    CSubw,
    CMul,
}

/// Internal type CjOp: defined at src\isa\riscv64\inst.isle line 640.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CjOp {
    CJ,
}

/// Internal type CiOp: defined at src\isa\riscv64\inst.isle line 645.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CiOp {
    CAddi,
    CAddiw,
    CAddi16sp,
    CSlli,
    CLi,
    CLui,
    CLwsp,
    CLdsp,
    CFldsp,
}

/// Internal type CiwOp: defined at src\isa\riscv64\inst.isle line 658.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CiwOp {
    CAddi4spn,
}

/// Internal type CbOp: defined at src\isa\riscv64\inst.isle line 663.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CbOp {
    CSrli,
    CSrai,
    CAndi,
}

/// Internal type CssOp: defined at src\isa\riscv64\inst.isle line 670.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CssOp {
    CSwsp,
    CSdsp,
    CFsdsp,
}

/// Internal type CsOp: defined at src\isa\riscv64\inst.isle line 677.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CsOp {
    CSw,
    CSd,
    CFsd,
}

/// Internal type ClOp: defined at src\isa\riscv64\inst.isle line 684.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ClOp {
    CLw,
    CLd,
    CFld,
}

/// Internal type CsznOp: defined at src\isa\riscv64\inst.isle line 691.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CsznOp {
    CNot,
    CZextb,
    CZexth,
    CZextw,
    CSextb,
    CSexth,
}

/// Internal type ZcbMemOp: defined at src\isa\riscv64\inst.isle line 704.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ZcbMemOp {
    CLbu,
    CLhu,
    CLh,
    CSb,
    CSh,
}

/// Internal type CsrRegOP: defined at src\isa\riscv64\inst.isle line 713.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CsrRegOP {
    CsrRW,
    CsrRS,
    CsrRC,
}

/// Internal type CsrImmOP: defined at src\isa\riscv64\inst.isle line 722.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CsrImmOP {
    CsrRWI,
    CsrRSI,
    CsrRCI,
}

/// Internal type CSR: defined at src\isa\riscv64\inst.isle line 732.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CSR {
    Frm,
}

/// Internal type FRM: defined at src\isa\riscv64\inst.isle line 738.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FRM {
    RNE,
    RTZ,
    RDN,
    RUP,
    RMM,
    Fcsr,
}

/// Internal type FFlagsException: defined at src\isa\riscv64\inst.isle line 758.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FFlagsException {
    NV,
    DZ,
    OF,
    UF,
    NX,
}

/// Internal type ExtendOp: defined at src\isa\riscv64\inst.isle line 2318.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ExtendOp {
    Zero,
    Signed,
}

/// Internal type ZeroCond: defined at src\isa\riscv64\inst.isle line 3039.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ZeroCond {
    Zero,
    NonZero,
}

/// Internal type FloatCompare: defined at src\isa\riscv64\inst.isle line 3141.
#[derive(Clone, Debug)]
pub enum FloatCompare {
    One {
        r: XReg,
    },
    Zero {
        r: XReg,
    },
}

/// Internal type VecElementWidth: defined at src\isa\riscv64\inst_vector.isle line 1.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecElementWidth {
    E8,
    E16,
    E32,
    E64,
}

/// Internal type VecLmul: defined at src\isa\riscv64\inst_vector.isle line 14.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecLmul {
    LmulF8,
    LmulF4,
    LmulF2,
    Lmul1,
    Lmul2,
    Lmul4,
    Lmul8,
}

/// Internal type VecTailMode: defined at src\isa\riscv64\inst_vector.isle line 27.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecTailMode {
    Agnostic,
    Undisturbed,
}

/// Internal type VecMaskMode: defined at src\isa\riscv64\inst_vector.isle line 37.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecMaskMode {
    Agnostic,
    Undisturbed,
}

/// Internal type VecAvl: defined at src\isa\riscv64\inst_vector.isle line 49.
#[derive(Clone, Debug)]
pub enum VecAvl {
    Static {
        size: UImm5,
    },
}

/// Internal type VecOpCategory: defined at src\isa\riscv64\inst_vector.isle line 63.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecOpCategory {
    OPIVV,
    OPFVV,
    OPMVV,
    OPIVI,
    OPIVX,
    OPFVF,
    OPMVX,
    OPCFG,
}

/// Internal type VecOpMasking: defined at src\isa\riscv64\inst_vector.isle line 78.
#[derive(Clone, Debug)]
pub enum VecOpMasking {
    Enabled {
        reg: Reg,
    },
    Disabled,
}

/// Internal type VecAluOpRRR: defined at src\isa\riscv64\inst_vector.isle line 90.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecAluOpRRR {
    VaddVV,
    VsaddVV,
    VsadduVV,
    VwaddVV,
    VwaddWV,
    VwadduVV,
    VwadduWV,
    VsubVV,
    VwsubVV,
    VwsubWV,
    VwsubuVV,
    VwsubuWV,
    VssubVV,
    VssubuVV,
    VmulVV,
    VmulhVV,
    VmulhuVV,
    VsmulVV,
    VsllVV,
    VsrlVV,
    VsraVV,
    VandVV,
    VorVV,
    VxorVV,
    VmaxVV,
    VmaxuVV,
    VminVV,
    VminuVV,
    VfaddVV,
    VfsubVV,
    VfmulVV,
    VfdivVV,
    VfminVV,
    VfmaxVV,
    VfsgnjVV,
    VfsgnjnVV,
    VfsgnjxVV,
    VmergeVVM,
    VredmaxuVS,
    VredminuVS,
    VrgatherVV,
    VcompressVM,
    VmseqVV,
    VmsneVV,
    VmsltuVV,
    VmsltVV,
    VmsleuVV,
    VmsleVV,
    VmfeqVV,
    VmfneVV,
    VmfltVV,
    VmfleVV,
    VmandMM,
    VmorMM,
    VmnandMM,
    VmnorMM,
    VaddVX,
    VsaddVX,
    VsadduVX,
    VwaddVX,
    VwaddWX,
    VwadduVX,
    VwadduWX,
    VsubVX,
    VrsubVX,
    VwsubVX,
    VwsubWX,
    VwsubuVX,
    VwsubuWX,
    VssubVX,
    VssubuVX,
    VmulVX,
    VmulhVX,
    VmulhuVX,
    VsmulVX,
    VsllVX,
    VsrlVX,
    VsraVX,
    VandVX,
    VorVX,
    VxorVX,
    VmaxVX,
    VmaxuVX,
    VminVX,
    VminuVX,
    VslidedownVX,
    VfaddVF,
    VfsubVF,
    VfrsubVF,
    VfmulVF,
    VfdivVF,
    VfsgnjVF,
    VfrdivVF,
    VmergeVXM,
    VfmergeVFM,
    VrgatherVX,
    VmseqVX,
    VmsneVX,
    VmsltuVX,
    VmsltVX,
    VmsleuVX,
    VmsleVX,
    VmsgtuVX,
    VmsgtVX,
    VmfeqVF,
    VmfneVF,
    VmfltVF,
    VmfleVF,
    VmfgtVF,
    VmfgeVF,
}

/// Internal type VecAluOpRRRImm5: defined at src\isa\riscv64\inst_vector.isle line 210.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecAluOpRRRImm5 {
    VslideupVI,
}

/// Internal type VecAluOpRRRR: defined at src\isa\riscv64\inst_vector.isle line 215.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecAluOpRRRR {
    VmaccVV,
    VnmsacVV,
    VfmaccVV,
    VfnmaccVV,
    VfmsacVV,
    VfnmsacVV,
    VmaccVX,
    VnmsacVX,
    VfmaccVF,
    VfnmaccVF,
    VfmsacVF,
    VfnmsacVF,
    Vslide1upVX,
}

/// Internal type VecAluOpRRImm5: defined at src\isa\riscv64\inst_vector.isle line 235.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecAluOpRRImm5 {
    VaddVI,
    VsaddVI,
    VsadduVI,
    VrsubVI,
    VsllVI,
    VsrlVI,
    VsraVI,
    VandVI,
    VorVI,
    VxorVI,
    VssrlVI,
    VslidedownVI,
    VmergeVIM,
    VrgatherVI,
    VmvrV,
    VnclipWI,
    VnclipuWI,
    VmseqVI,
    VmsneVI,
    VmsleuVI,
    VmsleVI,
    VmsgtuVI,
    VmsgtVI,
}

/// Internal type VecAluOpRImm5: defined at src\isa\riscv64\inst_vector.isle line 265.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecAluOpRImm5 {
    VmvVI,
}

/// Internal type VecAluOpRR: defined at src\isa\riscv64\inst_vector.isle line 272.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecAluOpRR {
    VmvSX,
    VmvXS,
    VfmvSF,
    VfmvFS,
    VmvVV,
    VmvVX,
    VfmvVF,
    VfsqrtV,
    VsextVF2,
    VsextVF4,
    VsextVF8,
    VzextVF2,
    VzextVF4,
    VzextVF8,
    VfcvtxufV,
    VfcvtxfV,
    VfcvtrtzxufV,
    VfcvtrtzxfV,
    VfcvtfxuV,
    VfcvtfxV,
    VfwcvtffV,
    VfncvtffW,
}

/// Internal type VecAMode: defined at src\isa\riscv64\inst_vector.isle line 304.
#[derive(Clone, Debug)]
pub enum VecAMode {
    UnitStride {
        base: AMode,
    },
}

/// Internal type IsFneg: defined at src\isa\riscv64\lower.isle line 1589.
#[derive(Clone, Debug)]
pub enum IsFneg {
    Result {
        negate: u64,
        value: Value,
    },
}

// Generated as internal constructor for term ty_shift_mask.
pub fn constructor_ty_shift_mask<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> u64 {
    let v1 = C::lane_type(ctx, arg0);
    let v2 = C::ty_bits(ctx, v1);
    let v3 = C::u8_as_u64(ctx, v2);
    let v5 = C::u64_sub(ctx, v3, 0x1_u64);
    // Rule at src\prelude.isle line 495.
    return v5;
}

// Generated as internal constructor for term output_reg.
pub fn constructor_output_reg<C: Context>(
    ctx: &mut C,
    arg0: Reg,
) -> InstOutput {
    let v1 = C::value_reg(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src\prelude_lower.isle line 82.
    return v2;
}

// Generated as internal constructor for term output_value.
pub fn constructor_output_value<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> InstOutput {
    let v1 = C::put_in_regs(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src\prelude_lower.isle line 86.
    return v2;
}

// Generated as internal constructor for term temp_reg.
pub fn constructor_temp_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> Reg {
    let v1 = C::temp_writable_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src\prelude_lower.isle line 106.
    return v2;
}

// Generated as internal constructor for term value_regs_range.
pub fn constructor_value_regs_range<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
) -> Range {
    let v2 = C::value_regs_len(ctx, arg0);
    let v3 = C::range(ctx, 0x0_usize, v2);
    // Rule at src\prelude_lower.isle line 160.
    return v3;
}

// Generated as internal constructor for term lo_reg.
pub fn constructor_lo_reg<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> Reg {
    let v1 = C::put_in_regs(ctx, arg0);
    let v3 = C::value_regs_get(ctx, v1, 0x0_usize);
    // Rule at src\prelude_lower.isle line 171.
    return v3;
}

// Generated as internal constructor for term multi_reg_to_pair_and_single.
pub fn constructor_multi_reg_to_pair_and_single<C: Context>(
    ctx: &mut C,
    arg0: &MultiReg,
) -> InstOutput {
    if let &MultiReg::Three {
        a: v1,
        b: v2,
        c: v3,
    } = arg0 {
        let v4 = C::value_regs(ctx, v1, v2);
        let v5 = C::value_reg(ctx, v3);
        let v6 = C::output_pair(ctx, v4, v5);
        // Rule at src\prelude_lower.isle line 182.
        return v6;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "multi_reg_to_pair_and_single", "src\\prelude_lower.isle line 181")
}

// Generated as internal constructor for term multi_reg_to_pair.
pub fn constructor_multi_reg_to_pair<C: Context>(
    ctx: &mut C,
    arg0: &MultiReg,
) -> InstOutput {
    if let &MultiReg::Two {
        a: v1,
        b: v2,
    } = arg0 {
        let v3 = C::value_regs(ctx, v1, v2);
        let v4 = C::output(ctx, v3);
        // Rule at src\prelude_lower.isle line 187.
        return v4;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "multi_reg_to_pair", "src\\prelude_lower.isle line 186")
}

// Generated as internal constructor for term multi_reg_to_single.
pub fn constructor_multi_reg_to_single<C: Context>(
    ctx: &mut C,
    arg0: &MultiReg,
) -> InstOutput {
    if let &MultiReg::One {
        a: v1,
    } = arg0 {
        let v2 = C::value_reg(ctx, v1);
        let v3 = C::output(ctx, v2);
        // Rule at src\prelude_lower.isle line 192.
        return v3;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "multi_reg_to_single", "src\\prelude_lower.isle line 191")
}

// Generated as internal constructor for term emit_side_effect.
pub fn constructor_emit_side_effect<C: Context>(
    ctx: &mut C,
    arg0: &SideEffectNoResult,
) -> Unit {
    match arg0 {
        &SideEffectNoResult::Inst {
            inst: ref v1,
        } => {
            let v2 = C::emit(ctx, v1);
            // Rule at src\prelude_lower.isle line 434.
            return v2;
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v3,
            inst2: ref v4,
        } => {
            let v5 = C::emit(ctx, v3);
            let v6 = C::emit(ctx, v4);
            // Rule at src\prelude_lower.isle line 436.
            return v6;
        }
        &SideEffectNoResult::Inst3 {
            inst1: ref v7,
            inst2: ref v8,
            inst3: ref v9,
        } => {
            let v10 = C::emit(ctx, v7);
            let v11 = C::emit(ctx, v8);
            let v12 = C::emit(ctx, v9);
            // Rule at src\prelude_lower.isle line 439.
            return v12;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "emit_side_effect", "src\\prelude_lower.isle line 433")
}

// Generated as internal constructor for term side_effect.
pub fn constructor_side_effect<C: Context>(
    ctx: &mut C,
    arg0: &SideEffectNoResult,
) -> InstOutput {
    let v1 = constructor_emit_side_effect(ctx, arg0);
    let v2 = C::output_none(ctx);
    // Rule at src\prelude_lower.isle line 449.
    return v2;
}

// Generated as internal constructor for term side_effect_concat.
pub fn constructor_side_effect_concat<C: Context>(
    ctx: &mut C,
    arg0: &SideEffectNoResult,
    arg1: &SideEffectNoResult,
) -> SideEffectNoResult {
    match arg0 {
        &SideEffectNoResult::Inst {
            inst: ref v1,
        } => {
            match arg1 {
                &SideEffectNoResult::Inst {
                    inst: ref v3,
                } => {
                    let v4 = SideEffectNoResult::Inst2 {
                        inst1: v1.clone(),
                        inst2: v3.clone(),
                    };
                    // Rule at src\prelude_lower.isle line 454.
                    return v4;
                }
                &SideEffectNoResult::Inst2 {
                    inst1: ref v5,
                    inst2: ref v6,
                } => {
                    let v7 = SideEffectNoResult::Inst3 {
                        inst1: v1.clone(),
                        inst2: v5.clone(),
                        inst3: v6.clone(),
                    };
                    // Rule at src\prelude_lower.isle line 456.
                    return v7;
                }
                _ => {}
            }
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v8,
            inst2: ref v9,
        } => {
            if let &SideEffectNoResult::Inst {
                inst: ref v3,
            } = arg1 {
                let v10 = SideEffectNoResult::Inst3 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                    inst3: v3.clone(),
                };
                // Rule at src\prelude_lower.isle line 458.
                return v10;
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "side_effect_concat", "src\\prelude_lower.isle line 453")
}

// Generated as internal constructor for term side_effect_as_invalid.
pub fn constructor_side_effect_as_invalid<C: Context>(
    ctx: &mut C,
    arg0: &SideEffectNoResult,
) -> InstOutput {
    let v1 = constructor_side_effect(ctx, arg0);
    let v2 = C::invalid_reg(ctx);
    let v3 = constructor_output_reg(ctx, v2);
    // Rule at src\prelude_lower.isle line 464.
    return v3;
}

// Generated as internal constructor for term produces_flags_concat.
pub fn constructor_produces_flags_concat<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ProducesFlags,
) -> ProducesFlags {
    if let &ProducesFlags::ProducesFlagsSideEffect {
        inst: ref v1,
    } = arg0 {
        if let &ProducesFlags::ProducesFlagsSideEffect {
            inst: ref v3,
        } = arg1 {
            let v4 = ProducesFlags::ProducesFlagsTwiceSideEffect {
                inst1: v1.clone(),
                inst2: v3.clone(),
            };
            // Rule at src\prelude_lower.isle line 490.
            return v4;
        }
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "produces_flags_concat", "src\\prelude_lower.isle line 489")
}

// Generated as internal constructor for term produces_flags_get_reg.
pub fn constructor_produces_flags_get_reg<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
) -> Reg {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            // Rule at src\prelude_lower.isle line 520.
            return v2;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v3,
            result: v4,
        } => {
            // Rule at src\prelude_lower.isle line 521.
            return v4;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "produces_flags_get_reg", "src\\prelude_lower.isle line 519")
}

// Generated as internal constructor for term produces_flags_ignore.
pub fn constructor_produces_flags_ignore<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
) -> ProducesFlags {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            let v3 = ProducesFlags::ProducesFlagsSideEffect {
                inst: v1.clone(),
            };
            // Rule at src\prelude_lower.isle line 526.
            return v3;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v4,
            result: v5,
        } => {
            let v6 = ProducesFlags::ProducesFlagsSideEffect {
                inst: v4.clone(),
            };
            // Rule at src\prelude_lower.isle line 528.
            return v6;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "produces_flags_ignore", "src\\prelude_lower.isle line 525")
}

// Generated as internal constructor for term consumes_flags_concat.
pub fn constructor_consumes_flags_concat<C: Context>(
    ctx: &mut C,
    arg0: &ConsumesFlags,
    arg1: &ConsumesFlags,
) -> ConsumesFlags {
    match arg0 {
        &ConsumesFlags::ConsumesFlagsSideEffect {
            inst: ref v8,
        } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect {
                inst: ref v9,
            } = arg1 {
                let v10 = ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                };
                // Rule at src\prelude_lower.isle line 541.
                return v10;
            }
        }
        &ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            if let &ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: ref v4,
                result: v5,
            } = arg1 {
                let v6 = C::value_regs(ctx, v2, v5);
                let v7 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: v1.clone(),
                    inst2: v4.clone(),
                    result: v6,
                };
                // Rule at src\prelude_lower.isle line 535.
                return v7;
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "consumes_flags_concat", "src\\prelude_lower.isle line 534")
}

// Generated as internal constructor for term with_flags.
pub fn constructor_with_flags<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> ValueRegs {
    match arg0 {
        &ProducesFlags::ProducesFlagsSideEffect {
            inst: ref v12,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v16 = C::emit(ctx, v13);
                    let v17 = C::value_reg(ctx, v14);
                    // Rule at src\prelude_lower.isle line 572.
                    return v17;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v21 = C::emit(ctx, v18);
                    let v22 = C::emit(ctx, v19);
                    // Rule at src\prelude_lower.isle line 578.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v28 = C::emit(ctx, v23);
                    let v29 = C::emit(ctx, v24);
                    let v30 = C::emit(ctx, v25);
                    let v31 = C::emit(ctx, v26);
                    // Rule at src\prelude_lower.isle line 590.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v32,
            inst2: ref v33,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v36 = C::emit(ctx, v13);
                    let v37 = C::value_reg(ctx, v14);
                    // Rule at src\prelude_lower.isle line 606.
                    return v37;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v38 = C::emit(ctx, v18);
                    let v39 = C::emit(ctx, v19);
                    // Rule at src\prelude_lower.isle line 613.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v40 = C::emit(ctx, v23);
                    let v41 = C::emit(ctx, v24);
                    let v42 = C::emit(ctx, v25);
                    let v43 = C::emit(ctx, v26);
                    // Rule at src\prelude_lower.isle line 626.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v1,
            result: v2,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect {
                    inst: ref v9,
                } => {
                    let v6 = C::emit(ctx, v1);
                    let v10 = C::emit(ctx, v9);
                    let v11 = C::value_reg(ctx, v2);
                    // Rule at src\prelude_lower.isle line 566.
                    return v11;
                }
                &ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
                    inst: ref v4,
                    result: v5,
                } => {
                    let v6 = C::emit(ctx, v1);
                    let v7 = C::emit(ctx, v4);
                    let v8 = C::value_regs(ctx, v2, v5);
                    // Rule at src\prelude_lower.isle line 558.
                    return v8;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "with_flags", "src\\prelude_lower.isle line 556")
}

// Generated as internal constructor for term with_flags_reg.
pub fn constructor_with_flags_reg<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> Reg {
    let v2 = constructor_with_flags(ctx, arg0, arg1);
    let v4 = C::value_regs_get(ctx, v2, 0x0_usize);
    // Rule at src\prelude_lower.isle line 644.
    return v4;
}

// Generated as internal constructor for term flags_to_producesflags.
pub fn constructor_flags_to_producesflags<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> ProducesFlags {
    let v1 = C::mark_value_used(ctx, arg0);
    // Rule at src\prelude_lower.isle line 651.
    return ProducesFlags::AlreadyExistingFlags;
}

// Generated as internal constructor for term with_flags_side_effect.
pub fn constructor_with_flags_side_effect<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> SideEffectNoResult {
    match arg0 {
        &ProducesFlags::AlreadyExistingFlags => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect {
                    inst: ref v2,
                } => {
                    let v3 = SideEffectNoResult::Inst {
                        inst: v2.clone(),
                    };
                    // Rule at src\prelude_lower.isle line 662.
                    return v3;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v6 = SideEffectNoResult::Inst2 {
                        inst1: v4.clone(),
                        inst2: v5.clone(),
                    };
                    // Rule at src\prelude_lower.isle line 667.
                    return v6;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsSideEffect {
            inst: ref v7,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect {
                    inst: ref v2,
                } => {
                    let v8 = SideEffectNoResult::Inst2 {
                        inst1: v7.clone(),
                        inst2: v2.clone(),
                    };
                    // Rule at src\prelude_lower.isle line 672.
                    return v8;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v9 = SideEffectNoResult::Inst3 {
                        inst1: v7.clone(),
                        inst2: v4.clone(),
                        inst3: v5.clone(),
                    };
                    // Rule at src\prelude_lower.isle line 677.
                    return v9;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v10,
            inst2: ref v11,
        } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect {
                inst: ref v2,
            } = arg1 {
                let v12 = SideEffectNoResult::Inst3 {
                    inst1: v10.clone(),
                    inst2: v11.clone(),
                    inst3: v2.clone(),
                };
                // Rule at src\prelude_lower.isle line 682.
                return v12;
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "with_flags_side_effect", "src\\prelude_lower.isle line 660")
}

// Generated as internal constructor for term with_flags_chained.
pub fn constructor_with_flags_chained<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesAndProducesFlags,
    arg2: &ConsumesFlags,
) -> MultiReg {
    match arg0 {
        &ProducesFlags::ProducesFlagsSideEffect {
            inst: ref v1,
        } => {
            match arg1 {
                &ConsumesAndProducesFlags::SideEffect {
                    inst: ref v3,
                } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect {
                            inst: ref v5,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v8 = C::emit(ctx, v5);
                            // Rule at src\prelude_lower.isle line 691.
                            return MultiReg::Empty;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            // Rule at src\prelude_lower.isle line 699.
                            return MultiReg::Empty;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v16 = C::emit(ctx, v14);
                            let v17 = MultiReg::One {
                                a: v15,
                            };
                            // Rule at src\prelude_lower.isle line 708.
                            return v17;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0_usize);
                            let v26 = C::value_regs_get(ctx, v20, 0x1_usize);
                            let v27 = MultiReg::Two {
                                a: v24,
                                b: v26,
                            };
                            // Rule at src\prelude_lower.isle line 716.
                            return v27;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0_usize);
                            let v38 = C::value_regs_get(ctx, v32, 0x1_usize);
                            let v39 = MultiReg::Two {
                                a: v37,
                                b: v38,
                            };
                            // Rule at src\prelude_lower.isle line 725.
                            return v39;
                        }
                        _ => {}
                    }
                }
                &ConsumesAndProducesFlags::ReturnsReg {
                    inst: ref v47,
                    result: v48,
                } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect {
                            inst: ref v5,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v8 = C::emit(ctx, v5);
                            let v50 = MultiReg::One {
                                a: v48,
                            };
                            // Rule at src\prelude_lower.isle line 785.
                            return v50;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v50 = MultiReg::One {
                                a: v48,
                            };
                            // Rule at src\prelude_lower.isle line 793.
                            return v50;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v16 = C::emit(ctx, v14);
                            let v51 = MultiReg::Two {
                                a: v48,
                                b: v15,
                            };
                            // Rule at src\prelude_lower.isle line 802.
                            return v51;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0_usize);
                            let v26 = C::value_regs_get(ctx, v20, 0x1_usize);
                            let v52 = MultiReg::Three {
                                a: v48,
                                b: v24,
                                c: v26,
                            };
                            // Rule at src\prelude_lower.isle line 810.
                            return v52;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0_usize);
                            let v38 = C::value_regs_get(ctx, v32, 0x1_usize);
                            let v53 = MultiReg::Three {
                                a: v48,
                                b: v37,
                                c: v38,
                            };
                            // Rule at src\prelude_lower.isle line 819.
                            return v53;
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v40,
            result: v41,
        } => {
            match arg1 {
                &ConsumesAndProducesFlags::SideEffect {
                    inst: ref v3,
                } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect {
                            inst: ref v5,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v8 = C::emit(ctx, v5);
                            let v43 = MultiReg::One {
                                a: v41,
                            };
                            // Rule at src\prelude_lower.isle line 738.
                            return v43;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v43 = MultiReg::One {
                                a: v41,
                            };
                            // Rule at src\prelude_lower.isle line 746.
                            return v43;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v16 = C::emit(ctx, v14);
                            let v44 = MultiReg::Two {
                                a: v41,
                                b: v15,
                            };
                            // Rule at src\prelude_lower.isle line 755.
                            return v44;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0_usize);
                            let v26 = C::value_regs_get(ctx, v20, 0x1_usize);
                            let v45 = MultiReg::Three {
                                a: v41,
                                b: v24,
                                c: v26,
                            };
                            // Rule at src\prelude_lower.isle line 763.
                            return v45;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0_usize);
                            let v38 = C::value_regs_get(ctx, v32, 0x1_usize);
                            let v46 = MultiReg::Three {
                                a: v41,
                                b: v37,
                                c: v38,
                            };
                            // Rule at src\prelude_lower.isle line 772.
                            return v46;
                        }
                        _ => {}
                    }
                }
                &ConsumesAndProducesFlags::ReturnsReg {
                    inst: ref v47,
                    result: v48,
                } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect {
                            inst: ref v5,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v8 = C::emit(ctx, v5);
                            let v54 = MultiReg::Two {
                                a: v41,
                                b: v48,
                            };
                            // Rule at src\prelude_lower.isle line 832.
                            return v54;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v54 = MultiReg::Two {
                                a: v41,
                                b: v48,
                            };
                            // Rule at src\prelude_lower.isle line 840.
                            return v54;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v16 = C::emit(ctx, v14);
                            let v55 = MultiReg::Three {
                                a: v41,
                                b: v48,
                                c: v15,
                            };
                            // Rule at src\prelude_lower.isle line 849.
                            return v55;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0_usize);
                            let v26 = C::value_regs_get(ctx, v20, 0x1_usize);
                            let v56 = MultiReg::Four {
                                a: v41,
                                b: v48,
                                c: v24,
                                d: v26,
                            };
                            // Rule at src\prelude_lower.isle line 857.
                            return v56;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0_usize);
                            let v38 = C::value_regs_get(ctx, v32, 0x1_usize);
                            let v57 = MultiReg::Four {
                                a: v41,
                                b: v48,
                                c: v37,
                                d: v38,
                            };
                            // Rule at src\prelude_lower.isle line 866.
                            return v57;
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v58,
            result: v59,
        } => {
            if let &ConsumesAndProducesFlags::ReturnsReg {
                inst: ref v47,
                result: v48,
            } = arg1 {
                match arg2 {
                    &ConsumesFlags::ConsumesFlagsSideEffect {
                        inst: ref v5,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v8 = C::emit(ctx, v5);
                        let v61 = MultiReg::Two {
                            a: v59,
                            b: v48,
                        };
                        // Rule at src\prelude_lower.isle line 878.
                        return v61;
                    }
                    &ConsumesFlags::ConsumesFlagsSideEffect2 {
                        inst1: ref v10,
                        inst2: ref v11,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v12 = C::emit(ctx, v10);
                        let v13 = C::emit(ctx, v11);
                        let v61 = MultiReg::Two {
                            a: v59,
                            b: v48,
                        };
                        // Rule at src\prelude_lower.isle line 886.
                        return v61;
                    }
                    &ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
                        inst: ref v63,
                        result: v64,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v65 = C::emit(ctx, v63);
                        let v66 = MultiReg::Three {
                            a: v59,
                            b: v48,
                            c: v64,
                        };
                        // Rule at src\prelude_lower.isle line 903.
                        return v66;
                    }
                    &ConsumesFlags::ConsumesFlagsReturnsReg {
                        inst: ref v14,
                        result: v15,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v16 = C::emit(ctx, v14);
                        let v62 = MultiReg::Three {
                            a: v59,
                            b: v48,
                            c: v15,
                        };
                        // Rule at src\prelude_lower.isle line 895.
                        return v62;
                    }
                    &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                        inst1: ref v18,
                        inst2: ref v19,
                        result: v20,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v21 = C::emit(ctx, v18);
                        let v22 = C::emit(ctx, v19);
                        let v24 = C::value_regs_get(ctx, v20, 0x0_usize);
                        let v26 = C::value_regs_get(ctx, v20, 0x1_usize);
                        let v67 = MultiReg::Four {
                            a: v59,
                            b: v48,
                            c: v24,
                            d: v26,
                        };
                        // Rule at src\prelude_lower.isle line 911.
                        return v67;
                    }
                    &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                        inst1: ref v28,
                        inst2: ref v29,
                        inst3: ref v30,
                        inst4: ref v31,
                        result: v32,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v33 = C::emit(ctx, v28);
                        let v34 = C::emit(ctx, v29);
                        let v35 = C::emit(ctx, v30);
                        let v36 = C::emit(ctx, v31);
                        let v37 = C::value_regs_get(ctx, v32, 0x0_usize);
                        let v38 = C::value_regs_get(ctx, v32, 0x1_usize);
                        let v68 = MultiReg::Four {
                            a: v59,
                            b: v48,
                            c: v37,
                            d: v38,
                        };
                        // Rule at src\prelude_lower.isle line 920.
                        return v68;
                    }
                    _ => {}
                }
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "with_flags_chained", "src\\prelude_lower.isle line 688")
}

// Generated as internal constructor for term lower_return.
pub fn constructor_lower_return<C: Context>(
    ctx: &mut C,
    arg0: ValueSlice,
) -> InstOutput {
    let v1 = C::gen_return(ctx, arg0);
    let v2 = C::output_none(ctx);
    // Rule at src\prelude_lower.isle line 1127.
    return v2;
}

// Generated as internal constructor for term put_in_xreg.
pub fn constructor_put_in_xreg<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> XReg {
    let v1 = C::put_in_reg(ctx, arg0);
    let v2 = C::xreg_new(ctx, v1);
    // Rule at src\isa\riscv64\inst.isle line 824.
    return v2;
}

// Generated as internal constructor for term output_xreg.
pub fn constructor_output_xreg<C: Context>(
    ctx: &mut C,
    arg0: XReg,
) -> InstOutput {
    let v1 = C::xreg_to_reg(ctx, arg0);
    let v2 = constructor_output_reg(ctx, v1);
    // Rule at src\isa\riscv64\inst.isle line 829.
    return v2;
}

// Generated as internal constructor for term writable_xreg_to_reg.
pub fn constructor_writable_xreg_to_reg<C: Context>(
    ctx: &mut C,
    arg0: WritableXReg,
) -> Reg {
    let v1 = C::writable_xreg_to_writable_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src\isa\riscv64\inst.isle line 844.
    return v2;
}

// Generated as internal constructor for term xreg_to_value_regs.
pub fn constructor_xreg_to_value_regs<C: Context>(
    ctx: &mut C,
    arg0: XReg,
) -> ValueRegs {
    let v1 = C::xreg_to_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src\isa\riscv64\inst.isle line 854.
    return v2;
}

// Generated as internal constructor for term writable_xreg_to_value_regs.
pub fn constructor_writable_xreg_to_value_regs<C: Context>(
    ctx: &mut C,
    arg0: WritableXReg,
) -> ValueRegs {
    let v1 = constructor_writable_xreg_to_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src\isa\riscv64\inst.isle line 859.
    return v2;
}

// Generated as internal constructor for term temp_writable_xreg.
pub fn constructor_temp_writable_xreg<C: Context>(
    ctx: &mut C,
) -> WritableXReg {
    let v1 = C::temp_writable_reg(ctx, I64);
    let v2 = C::writable_xreg_new(ctx, v1);
    // Rule at src\isa\riscv64\inst.isle line 864.
    return v2;
}

// Generated as internal constructor for term put_in_freg.
pub fn constructor_put_in_freg<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> FReg {
    let v1 = C::put_in_reg(ctx, arg0);
    let v2 = C::freg_new(ctx, v1);
    // Rule at src\isa\riscv64\inst.isle line 885.
    return v2;
}

// Generated as internal constructor for term output_freg.
pub fn constructor_output_freg<C: Context>(
    ctx: &mut C,
    arg0: FReg,
) -> InstOutput {
    let v1 = C::freg_to_reg(ctx, arg0);
    let v2 = constructor_output_reg(ctx, v1);
    // Rule at src\isa\riscv64\inst.isle line 890.
    return v2;
}

// Generated as internal constructor for term writable_freg_to_reg.
pub fn constructor_writable_freg_to_reg<C: Context>(
    ctx: &mut C,
    arg0: WritableFReg,
) -> Reg {
    let v1 = C::writable_freg_to_writable_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src\isa\riscv64\inst.isle line 905.
    return v2;
}

// Generated as internal constructor for term freg_to_value_regs.
pub fn constructor_freg_to_value_regs<C: Context>(
    ctx: &mut C,
    arg0: FReg,
) -> ValueRegs {
    let v1 = C::freg_to_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src\isa\riscv64\inst.isle line 915.
    return v2;
}

// Generated as internal constructor for term writable_freg_to_value_regs.
pub fn constructor_writable_freg_to_value_regs<C: Context>(
    ctx: &mut C,
    arg0: WritableFReg,
) -> ValueRegs {
    let v1 = constructor_writable_freg_to_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src\isa\riscv64\inst.isle line 920.
    return v2;
}

// Generated as internal constructor for term temp_writable_freg.
pub fn constructor_temp_writable_freg<C: Context>(
    ctx: &mut C,
) -> WritableFReg {
    let v1 = C::temp_writable_reg(ctx, F64);
    let v2 = C::writable_freg_new(ctx, v1);
    // Rule at src\isa\riscv64\inst.isle line 925.
    return v2;
}

// Generated as internal constructor for term put_in_vreg.
pub fn constructor_put_in_vreg<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> VReg {
    let v1 = C::put_in_reg(ctx, arg0);
    let v2 = C::vreg_new(ctx, v1);
    // Rule at src\isa\riscv64\inst.isle line 947.
    return v2;
}

// Generated as internal constructor for term output_vreg.
pub fn constructor_output_vreg<C: Context>(
    ctx: &mut C,
    arg0: VReg,
) -> InstOutput {
    let v1 = C::vreg_to_reg(ctx, arg0);
    let v2 = constructor_output_reg(ctx, v1);
    // Rule at src\isa\riscv64\inst.isle line 952.
    return v2;
}

// Generated as internal constructor for term writable_vreg_to_reg.
pub fn constructor_writable_vreg_to_reg<C: Context>(
    ctx: &mut C,
    arg0: WritableVReg,
) -> Reg {
    let v1 = C::writable_vreg_to_writable_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src\isa\riscv64\inst.isle line 967.
    return v2;
}

// Generated as internal constructor for term vreg_to_value_regs.
pub fn constructor_vreg_to_value_regs<C: Context>(
    ctx: &mut C,
    arg0: VReg,
) -> ValueRegs {
    let v1 = C::vreg_to_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src\isa\riscv64\inst.isle line 977.
    return v2;
}

// Generated as internal constructor for term writable_vreg_to_value_regs.
pub fn constructor_writable_vreg_to_value_regs<C: Context>(
    ctx: &mut C,
    arg0: WritableVReg,
) -> ValueRegs {
    let v1 = constructor_writable_vreg_to_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src\isa\riscv64\inst.isle line 982.
    return v2;
}

// Generated as internal constructor for term temp_writable_vreg.
pub fn constructor_temp_writable_vreg<C: Context>(
    ctx: &mut C,
) -> WritableVReg {
    let v1 = C::temp_writable_reg(ctx, I8X16);
    let v2 = C::writable_vreg_new(ctx, v1);
    // Rule at src\isa\riscv64\inst.isle line 987.
    return v2;
}

// Generated as internal constructor for term rv_add.
pub fn constructor_rv_add<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Add, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1072.
    return v6;
}

// Generated as internal constructor for term rv_addi.
pub fn constructor_rv_addi<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: Imm12,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Addi, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src\isa\riscv64\inst.isle line 1078.
    return v5;
}

// Generated as internal constructor for term rv_sub.
pub fn constructor_rv_sub<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Sub, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1084.
    return v6;
}

// Generated as internal constructor for term rv_neg.
pub fn constructor_rv_neg<C: Context>(
    ctx: &mut C,
    arg0: XReg,
) -> XReg {
    let v2 = C::zero_reg(ctx);
    let v3 = C::xreg_to_reg(ctx, v2);
    let v4 = C::xreg_to_reg(ctx, arg0);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Sub, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1090.
    return v6;
}

// Generated as internal constructor for term rv_sll.
pub fn constructor_rv_sll<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Sll, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1096.
    return v6;
}

// Generated as internal constructor for term rv_slli.
pub fn constructor_rv_slli<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: Imm12,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Slli, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src\isa\riscv64\inst.isle line 1102.
    return v5;
}

// Generated as internal constructor for term rv_srl.
pub fn constructor_rv_srl<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Srl, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1108.
    return v6;
}

// Generated as internal constructor for term rv_srli.
pub fn constructor_rv_srli<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: Imm12,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Srli, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src\isa\riscv64\inst.isle line 1114.
    return v5;
}

// Generated as internal constructor for term rv_sra.
pub fn constructor_rv_sra<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Sra, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1120.
    return v6;
}

// Generated as internal constructor for term rv_srai.
pub fn constructor_rv_srai<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: Imm12,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Srai, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src\isa\riscv64\inst.isle line 1126.
    return v5;
}

// Generated as internal constructor for term rv_or.
pub fn constructor_rv_or<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Or, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1132.
    return v6;
}

// Generated as internal constructor for term rv_ori.
pub fn constructor_rv_ori<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: Imm12,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Ori, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src\isa\riscv64\inst.isle line 1138.
    return v5;
}

// Generated as internal constructor for term rv_xor.
pub fn constructor_rv_xor<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Xor, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1144.
    return v6;
}

// Generated as internal constructor for term rv_xori.
pub fn constructor_rv_xori<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: Imm12,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Xori, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src\isa\riscv64\inst.isle line 1150.
    return v5;
}

// Generated as internal constructor for term rv_not.
pub fn constructor_rv_not<C: Context>(
    ctx: &mut C,
    arg0: XReg,
) -> XReg {
    let v2 = C::imm12_const(ctx, -1_i32);
    let v3 = constructor_rv_xori(ctx, arg0, v2);
    // Rule at src\isa\riscv64\inst.isle line 1156.
    return v3;
}

// Generated as internal constructor for term rv_and.
pub fn constructor_rv_and<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::And, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1162.
    return v6;
}

// Generated as internal constructor for term rv_andi.
pub fn constructor_rv_andi<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: Imm12,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Andi, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src\isa\riscv64\inst.isle line 1168.
    return v5;
}

// Generated as internal constructor for term rv_slt.
pub fn constructor_rv_slt<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Slt, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1174.
    return v6;
}

// Generated as internal constructor for term rv_sltu.
pub fn constructor_rv_sltu<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::SltU, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1180.
    return v6;
}

// Generated as internal constructor for term rv_snez.
pub fn constructor_rv_snez<C: Context>(
    ctx: &mut C,
    arg0: XReg,
) -> XReg {
    let v1 = C::zero_reg(ctx);
    let v2 = constructor_rv_sltu(ctx, v1, arg0);
    // Rule at src\isa\riscv64\inst.isle line 1186.
    return v2;
}

// Generated as internal constructor for term rv_slti.
pub fn constructor_rv_slti<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: Imm12,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Slti, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src\isa\riscv64\inst.isle line 1192.
    return v5;
}

// Generated as internal constructor for term rv_sltiu.
pub fn constructor_rv_sltiu<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: Imm12,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::SltiU, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src\isa\riscv64\inst.isle line 1198.
    return v5;
}

// Generated as internal constructor for term rv_seqz.
pub fn constructor_rv_seqz<C: Context>(
    ctx: &mut C,
    arg0: XReg,
) -> XReg {
    let v2 = C::imm12_const(ctx, 1_i32);
    let v3 = constructor_rv_sltiu(ctx, arg0, v2);
    // Rule at src\isa\riscv64\inst.isle line 1204.
    return v3;
}

// Generated as internal constructor for term rv_addw.
pub fn constructor_rv_addw<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Addw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1214.
    return v6;
}

// Generated as internal constructor for term rv_addiw.
pub fn constructor_rv_addiw<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: Imm12,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Addiw, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src\isa\riscv64\inst.isle line 1220.
    return v5;
}

// Generated as internal constructor for term rv_sextw.
pub fn constructor_rv_sextw<C: Context>(
    ctx: &mut C,
    arg0: XReg,
) -> XReg {
    let v2 = C::imm12_const(ctx, 0_i32);
    let v3 = constructor_rv_addiw(ctx, arg0, v2);
    // Rule at src\isa\riscv64\inst.isle line 1226.
    return v3;
}

// Generated as internal constructor for term rv_subw.
pub fn constructor_rv_subw<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Subw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1232.
    return v6;
}

// Generated as internal constructor for term rv_sllw.
pub fn constructor_rv_sllw<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Sllw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1238.
    return v6;
}

// Generated as internal constructor for term rv_slliw.
pub fn constructor_rv_slliw<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: Imm12,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Slliw, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src\isa\riscv64\inst.isle line 1244.
    return v5;
}

// Generated as internal constructor for term rv_srlw.
pub fn constructor_rv_srlw<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Srlw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1250.
    return v6;
}

// Generated as internal constructor for term rv_srliw.
pub fn constructor_rv_srliw<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: Imm12,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::SrliW, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src\isa\riscv64\inst.isle line 1256.
    return v5;
}

// Generated as internal constructor for term rv_sraw.
pub fn constructor_rv_sraw<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Sraw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1262.
    return v6;
}

// Generated as internal constructor for term rv_sraiw.
pub fn constructor_rv_sraiw<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: Imm12,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Sraiw, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src\isa\riscv64\inst.isle line 1268.
    return v5;
}

// Generated as internal constructor for term rv_mul.
pub fn constructor_rv_mul<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Mul, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1278.
    return v6;
}

// Generated as internal constructor for term rv_mulh.
pub fn constructor_rv_mulh<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Mulh, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1284.
    return v6;
}

// Generated as internal constructor for term rv_mulhu.
pub fn constructor_rv_mulhu<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Mulhu, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1290.
    return v6;
}

// Generated as internal constructor for term rv_div.
pub fn constructor_rv_div<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Div, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1296.
    return v6;
}

// Generated as internal constructor for term rv_divu.
pub fn constructor_rv_divu<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::DivU, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1302.
    return v6;
}

// Generated as internal constructor for term rv_rem.
pub fn constructor_rv_rem<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Rem, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1308.
    return v6;
}

// Generated as internal constructor for term rv_remu.
pub fn constructor_rv_remu<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::RemU, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1314.
    return v6;
}

// Generated as internal constructor for term rv_mulw.
pub fn constructor_rv_mulw<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Mulw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1323.
    return v6;
}

// Generated as internal constructor for term rv_divw.
pub fn constructor_rv_divw<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Divw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1329.
    return v6;
}

// Generated as internal constructor for term rv_divuw.
pub fn constructor_rv_divuw<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Divuw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1335.
    return v6;
}

// Generated as internal constructor for term rv_remw.
pub fn constructor_rv_remw<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Remw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1341.
    return v6;
}

// Generated as internal constructor for term rv_remuw.
pub fn constructor_rv_remuw<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Remuw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1347.
    return v6;
}

// Generated as internal constructor for term rv_fadd.
pub fn constructor_rv_fadd<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FRM,
    arg2: FReg,
    arg3: FReg,
) -> FReg {
    let v5 = C::freg_to_reg(ctx, arg2);
    let v6 = C::freg_to_reg(ctx, arg3);
    let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::Fadd, arg0, arg1, v5, v6);
    // Rule at src\isa\riscv64\inst.isle line 1356.
    return v7;
}

// Generated as internal constructor for term rv_fsub.
pub fn constructor_rv_fsub<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FRM,
    arg2: FReg,
    arg3: FReg,
) -> FReg {
    let v5 = C::freg_to_reg(ctx, arg2);
    let v6 = C::freg_to_reg(ctx, arg3);
    let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::Fsub, arg0, arg1, v5, v6);
    // Rule at src\isa\riscv64\inst.isle line 1360.
    return v7;
}

// Generated as internal constructor for term rv_fmul.
pub fn constructor_rv_fmul<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FRM,
    arg2: FReg,
    arg3: FReg,
) -> FReg {
    let v5 = C::freg_to_reg(ctx, arg2);
    let v6 = C::freg_to_reg(ctx, arg3);
    let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::Fmul, arg0, arg1, v5, v6);
    // Rule at src\isa\riscv64\inst.isle line 1364.
    return v7;
}

// Generated as internal constructor for term rv_fdiv.
pub fn constructor_rv_fdiv<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FRM,
    arg2: FReg,
    arg3: FReg,
) -> FReg {
    let v5 = C::freg_to_reg(ctx, arg2);
    let v6 = C::freg_to_reg(ctx, arg3);
    let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::Fdiv, arg0, arg1, v5, v6);
    // Rule at src\isa\riscv64\inst.isle line 1368.
    return v7;
}

// Generated as internal constructor for term rv_fsqrt.
pub fn constructor_rv_fsqrt<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FRM,
    arg2: FReg,
) -> FReg {
    let v4 = C::freg_to_reg(ctx, arg2);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::Fsqrt, arg0, arg1, v4);
    // Rule at src\isa\riscv64\inst.isle line 1372.
    return v5;
}

// Generated as internal constructor for term rv_fmadd.
pub fn constructor_rv_fmadd<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FRM,
    arg2: FReg,
    arg3: FReg,
    arg4: FReg,
) -> FReg {
    let v6 = C::freg_to_reg(ctx, arg2);
    let v7 = C::freg_to_reg(ctx, arg3);
    let v8 = C::freg_to_reg(ctx, arg4);
    let v9 = constructor_fpu_rrrr(ctx, &FpuOPRRRR::Fmadd, arg0, arg1, v6, v7, v8);
    // Rule at src\isa\riscv64\inst.isle line 1376.
    return v9;
}

// Generated as internal constructor for term rv_fmsub.
pub fn constructor_rv_fmsub<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FRM,
    arg2: FReg,
    arg3: FReg,
    arg4: FReg,
) -> FReg {
    let v6 = C::freg_to_reg(ctx, arg2);
    let v7 = C::freg_to_reg(ctx, arg3);
    let v8 = C::freg_to_reg(ctx, arg4);
    let v9 = constructor_fpu_rrrr(ctx, &FpuOPRRRR::Fmsub, arg0, arg1, v6, v7, v8);
    // Rule at src\isa\riscv64\inst.isle line 1380.
    return v9;
}

// Generated as internal constructor for term rv_fnmadd.
pub fn constructor_rv_fnmadd<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FRM,
    arg2: FReg,
    arg3: FReg,
    arg4: FReg,
) -> FReg {
    let v6 = C::freg_to_reg(ctx, arg2);
    let v7 = C::freg_to_reg(ctx, arg3);
    let v8 = C::freg_to_reg(ctx, arg4);
    let v9 = constructor_fpu_rrrr(ctx, &FpuOPRRRR::Fnmadd, arg0, arg1, v6, v7, v8);
    // Rule at src\isa\riscv64\inst.isle line 1384.
    return v9;
}

// Generated as internal constructor for term rv_fnmsub.
pub fn constructor_rv_fnmsub<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FRM,
    arg2: FReg,
    arg3: FReg,
    arg4: FReg,
) -> FReg {
    let v6 = C::freg_to_reg(ctx, arg2);
    let v7 = C::freg_to_reg(ctx, arg3);
    let v8 = C::freg_to_reg(ctx, arg4);
    let v9 = constructor_fpu_rrrr(ctx, &FpuOPRRRR::Fnmsub, arg0, arg1, v6, v7, v8);
    // Rule at src\isa\riscv64\inst.isle line 1388.
    return v9;
}

// Generated as internal constructor for term rv_fmvxh.
pub fn constructor_rv_fmvxh<C: Context>(
    ctx: &mut C,
    arg0: FReg,
) -> XReg {
    let v4 = C::freg_to_reg(ctx, arg0);
    let v5 = constructor_fpu_rr_int(ctx, &FpuOPRR::FmvXFmt, F16, &FRM::RNE, v4);
    // Rule at src\isa\riscv64\inst.isle line 1392.
    return v5;
}

// Generated as internal constructor for term rv_fmvxw.
pub fn constructor_rv_fmvxw<C: Context>(
    ctx: &mut C,
    arg0: FReg,
) -> XReg {
    let v4 = C::freg_to_reg(ctx, arg0);
    let v5 = constructor_fpu_rr_int(ctx, &FpuOPRR::FmvXFmt, F32, &FRM::RNE, v4);
    // Rule at src\isa\riscv64\inst.isle line 1396.
    return v5;
}

// Generated as internal constructor for term rv_fmvxd.
pub fn constructor_rv_fmvxd<C: Context>(
    ctx: &mut C,
    arg0: FReg,
) -> XReg {
    let v4 = C::freg_to_reg(ctx, arg0);
    let v5 = constructor_fpu_rr_int(ctx, &FpuOPRR::FmvXFmt, F64, &FRM::RNE, v4);
    // Rule at src\isa\riscv64\inst.isle line 1400.
    return v5;
}

// Generated as internal constructor for term rv_fmvhx.
pub fn constructor_rv_fmvhx<C: Context>(
    ctx: &mut C,
    arg0: XReg,
) -> FReg {
    let v4 = C::xreg_to_reg(ctx, arg0);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FmvFmtX, F16, &FRM::RNE, v4);
    // Rule at src\isa\riscv64\inst.isle line 1404.
    return v5;
}

// Generated as internal constructor for term rv_fmvwx.
pub fn constructor_rv_fmvwx<C: Context>(
    ctx: &mut C,
    arg0: XReg,
) -> FReg {
    let v4 = C::xreg_to_reg(ctx, arg0);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FmvFmtX, F32, &FRM::RNE, v4);
    // Rule at src\isa\riscv64\inst.isle line 1408.
    return v5;
}

// Generated as internal constructor for term rv_fmvdx.
pub fn constructor_rv_fmvdx<C: Context>(
    ctx: &mut C,
    arg0: XReg,
) -> FReg {
    let v4 = C::xreg_to_reg(ctx, arg0);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FmvFmtX, F64, &FRM::RNE, v4);
    // Rule at src\isa\riscv64\inst.isle line 1412.
    return v5;
}

// Generated as internal constructor for term rv_fcvtds.
pub fn constructor_rv_fcvtds<C: Context>(
    ctx: &mut C,
    arg0: FReg,
) -> FReg {
    let v4 = C::freg_to_reg(ctx, arg0);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtDS, F64, &FRM::RNE, v4);
    // Rule at src\isa\riscv64\inst.isle line 1416.
    return v5;
}

// Generated as internal constructor for term rv_fcvtsd.
pub fn constructor_rv_fcvtsd<C: Context>(
    ctx: &mut C,
    arg0: &FRM,
    arg1: FReg,
) -> FReg {
    let v4 = C::freg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtSD, F32, arg0, v4);
    // Rule at src\isa\riscv64\inst.isle line 1420.
    return v5;
}

// Generated as internal constructor for term rv_fcvtsw.
pub fn constructor_rv_fcvtsw<C: Context>(
    ctx: &mut C,
    arg0: &FRM,
    arg1: XReg,
) -> FReg {
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtFmtW, F32, arg0, v4);
    // Rule at src\isa\riscv64\inst.isle line 1424.
    return v5;
}

// Generated as internal constructor for term rv_fcvtswu.
pub fn constructor_rv_fcvtswu<C: Context>(
    ctx: &mut C,
    arg0: &FRM,
    arg1: XReg,
) -> FReg {
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtFmtWu, F32, arg0, v4);
    // Rule at src\isa\riscv64\inst.isle line 1428.
    return v5;
}

// Generated as internal constructor for term rv_fcvtdw.
pub fn constructor_rv_fcvtdw<C: Context>(
    ctx: &mut C,
    arg0: XReg,
) -> FReg {
    let v4 = C::xreg_to_reg(ctx, arg0);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtFmtW, F64, &FRM::RNE, v4);
    // Rule at src\isa\riscv64\inst.isle line 1432.
    return v5;
}

// Generated as internal constructor for term rv_fcvtdwu.
pub fn constructor_rv_fcvtdwu<C: Context>(
    ctx: &mut C,
    arg0: XReg,
) -> FReg {
    let v4 = C::xreg_to_reg(ctx, arg0);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtFmtWu, F64, &FRM::RNE, v4);
    // Rule at src\isa\riscv64\inst.isle line 1436.
    return v5;
}

// Generated as internal constructor for term rv_fcvtsl.
pub fn constructor_rv_fcvtsl<C: Context>(
    ctx: &mut C,
    arg0: &FRM,
    arg1: XReg,
) -> FReg {
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtFmtL, F32, arg0, v4);
    // Rule at src\isa\riscv64\inst.isle line 1440.
    return v5;
}

// Generated as internal constructor for term rv_fcvtslu.
pub fn constructor_rv_fcvtslu<C: Context>(
    ctx: &mut C,
    arg0: &FRM,
    arg1: XReg,
) -> FReg {
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtFmtLu, F32, arg0, v4);
    // Rule at src\isa\riscv64\inst.isle line 1444.
    return v5;
}

// Generated as internal constructor for term rv_fcvtdl.
pub fn constructor_rv_fcvtdl<C: Context>(
    ctx: &mut C,
    arg0: &FRM,
    arg1: XReg,
) -> FReg {
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtFmtL, F64, arg0, v4);
    // Rule at src\isa\riscv64\inst.isle line 1448.
    return v5;
}

// Generated as internal constructor for term rv_fcvtdlu.
pub fn constructor_rv_fcvtdlu<C: Context>(
    ctx: &mut C,
    arg0: &FRM,
    arg1: XReg,
) -> FReg {
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtFmtLu, F64, arg0, v4);
    // Rule at src\isa\riscv64\inst.isle line 1452.
    return v5;
}

// Generated as internal constructor for term rv_fcvtws.
pub fn constructor_rv_fcvtws<C: Context>(
    ctx: &mut C,
    arg0: &FRM,
    arg1: FReg,
) -> XReg {
    let v4 = C::freg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr_int(ctx, &FpuOPRR::FcvtWFmt, F32, arg0, v4);
    // Rule at src\isa\riscv64\inst.isle line 1456.
    return v5;
}

// Generated as internal constructor for term rv_fcvtls.
pub fn constructor_rv_fcvtls<C: Context>(
    ctx: &mut C,
    arg0: &FRM,
    arg1: FReg,
) -> XReg {
    let v4 = C::freg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr_int(ctx, &FpuOPRR::FcvtLFmt, F32, arg0, v4);
    // Rule at src\isa\riscv64\inst.isle line 1460.
    return v5;
}

// Generated as internal constructor for term rv_fcvtwus.
pub fn constructor_rv_fcvtwus<C: Context>(
    ctx: &mut C,
    arg0: &FRM,
    arg1: FReg,
) -> XReg {
    let v4 = C::freg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr_int(ctx, &FpuOPRR::FcvtWuFmt, F32, arg0, v4);
    // Rule at src\isa\riscv64\inst.isle line 1464.
    return v5;
}

// Generated as internal constructor for term rv_fcvtlus.
pub fn constructor_rv_fcvtlus<C: Context>(
    ctx: &mut C,
    arg0: &FRM,
    arg1: FReg,
) -> XReg {
    let v4 = C::freg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr_int(ctx, &FpuOPRR::FcvtLuFmt, F32, arg0, v4);
    // Rule at src\isa\riscv64\inst.isle line 1468.
    return v5;
}

// Generated as internal constructor for term rv_fcvtwd.
pub fn constructor_rv_fcvtwd<C: Context>(
    ctx: &mut C,
    arg0: &FRM,
    arg1: FReg,
) -> XReg {
    let v4 = C::freg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr_int(ctx, &FpuOPRR::FcvtWFmt, F64, arg0, v4);
    // Rule at src\isa\riscv64\inst.isle line 1472.
    return v5;
}

// Generated as internal constructor for term rv_fcvtld.
pub fn constructor_rv_fcvtld<C: Context>(
    ctx: &mut C,
    arg0: &FRM,
    arg1: FReg,
) -> XReg {
    let v4 = C::freg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr_int(ctx, &FpuOPRR::FcvtLFmt, F64, arg0, v4);
    // Rule at src\isa\riscv64\inst.isle line 1476.
    return v5;
}

// Generated as internal constructor for term rv_fcvtwud.
pub fn constructor_rv_fcvtwud<C: Context>(
    ctx: &mut C,
    arg0: &FRM,
    arg1: FReg,
) -> XReg {
    let v4 = C::freg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr_int(ctx, &FpuOPRR::FcvtWuFmt, F64, arg0, v4);
    // Rule at src\isa\riscv64\inst.isle line 1480.
    return v5;
}

// Generated as internal constructor for term rv_fcvtlud.
pub fn constructor_rv_fcvtlud<C: Context>(
    ctx: &mut C,
    arg0: &FRM,
    arg1: FReg,
) -> XReg {
    let v4 = C::freg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr_int(ctx, &FpuOPRR::FcvtLuFmt, F64, arg0, v4);
    // Rule at src\isa\riscv64\inst.isle line 1484.
    return v5;
}

// Generated as internal constructor for term rv_fcvtw.
pub fn constructor_rv_fcvtw<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FRM,
    arg2: FReg,
) -> XReg {
    match arg0 {
        F32 => {
            let v3 = constructor_rv_fcvtws(ctx, arg1, arg2);
            // Rule at src\isa\riscv64\inst.isle line 1488.
            return v3;
        }
        F64 => {
            let v4 = constructor_rv_fcvtwd(ctx, arg1, arg2);
            // Rule at src\isa\riscv64\inst.isle line 1489.
            return v4;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "rv_fcvtw", "src\\isa\\riscv64\\inst.isle line 1487")
}

// Generated as internal constructor for term rv_fcvtl.
pub fn constructor_rv_fcvtl<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FRM,
    arg2: FReg,
) -> XReg {
    match arg0 {
        F32 => {
            let v3 = constructor_rv_fcvtls(ctx, arg1, arg2);
            // Rule at src\isa\riscv64\inst.isle line 1493.
            return v3;
        }
        F64 => {
            let v4 = constructor_rv_fcvtld(ctx, arg1, arg2);
            // Rule at src\isa\riscv64\inst.isle line 1494.
            return v4;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "rv_fcvtl", "src\\isa\\riscv64\\inst.isle line 1492")
}

// Generated as internal constructor for term rv_fcvtwu.
pub fn constructor_rv_fcvtwu<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FRM,
    arg2: FReg,
) -> XReg {
    match arg0 {
        F32 => {
            let v3 = constructor_rv_fcvtwus(ctx, arg1, arg2);
            // Rule at src\isa\riscv64\inst.isle line 1498.
            return v3;
        }
        F64 => {
            let v4 = constructor_rv_fcvtwud(ctx, arg1, arg2);
            // Rule at src\isa\riscv64\inst.isle line 1499.
            return v4;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "rv_fcvtwu", "src\\isa\\riscv64\\inst.isle line 1497")
}

// Generated as internal constructor for term rv_fcvtlu.
pub fn constructor_rv_fcvtlu<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FRM,
    arg2: FReg,
) -> XReg {
    match arg0 {
        F32 => {
            let v3 = constructor_rv_fcvtlus(ctx, arg1, arg2);
            // Rule at src\isa\riscv64\inst.isle line 1503.
            return v3;
        }
        F64 => {
            let v4 = constructor_rv_fcvtlud(ctx, arg1, arg2);
            // Rule at src\isa\riscv64\inst.isle line 1504.
            return v4;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "rv_fcvtlu", "src\\isa\\riscv64\\inst.isle line 1502")
}

// Generated as internal constructor for term rv_fsgnj.
pub fn constructor_rv_fsgnj<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: FReg,
    arg2: FReg,
) -> FReg {
    let v5 = C::freg_to_reg(ctx, arg1);
    let v6 = C::freg_to_reg(ctx, arg2);
    let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::Fsgnj, arg0, &FRM::RNE, v5, v6);
    // Rule at src\isa\riscv64\inst.isle line 1510.
    return v7;
}

// Generated as internal constructor for term rv_fsgnjn.
pub fn constructor_rv_fsgnjn<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: FReg,
    arg2: FReg,
) -> FReg {
    let v5 = C::freg_to_reg(ctx, arg1);
    let v6 = C::freg_to_reg(ctx, arg2);
    let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::Fsgnjn, arg0, &FRM::RTZ, v5, v6);
    // Rule at src\isa\riscv64\inst.isle line 1516.
    return v7;
}

// Generated as internal constructor for term rv_fneg.
pub fn constructor_rv_fneg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: FReg,
) -> FReg {
    let v2 = constructor_rv_fsgnjn(ctx, arg0, arg1, arg1);
    // Rule at src\isa\riscv64\inst.isle line 1521.
    return v2;
}

// Generated as internal constructor for term rv_fsgnjx.
pub fn constructor_rv_fsgnjx<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: FReg,
    arg2: FReg,
) -> FReg {
    let v5 = C::freg_to_reg(ctx, arg1);
    let v6 = C::freg_to_reg(ctx, arg2);
    let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::Fsgnjx, arg0, &FRM::RDN, v5, v6);
    // Rule at src\isa\riscv64\inst.isle line 1527.
    return v7;
}

// Generated as internal constructor for term rv_fabs.
pub fn constructor_rv_fabs<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: FReg,
) -> FReg {
    let v2 = constructor_rv_fsgnjx(ctx, arg0, arg1, arg1);
    // Rule at src\isa\riscv64\inst.isle line 1532.
    return v2;
}

// Generated as internal constructor for term rv_feq.
pub fn constructor_rv_feq<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: FReg,
    arg2: FReg,
) -> XReg {
    let v5 = C::freg_to_reg(ctx, arg1);
    let v6 = C::freg_to_reg(ctx, arg2);
    let v7 = constructor_fpu_rrr_int(ctx, &FpuOPRRR::Feq, arg0, &FRM::RDN, v5, v6);
    // Rule at src\isa\riscv64\inst.isle line 1536.
    return v7;
}

// Generated as internal constructor for term rv_flt.
pub fn constructor_rv_flt<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: FReg,
    arg2: FReg,
) -> XReg {
    let v5 = C::freg_to_reg(ctx, arg1);
    let v6 = C::freg_to_reg(ctx, arg2);
    let v7 = constructor_fpu_rrr_int(ctx, &FpuOPRRR::Flt, arg0, &FRM::RTZ, v5, v6);
    // Rule at src\isa\riscv64\inst.isle line 1540.
    return v7;
}

// Generated as internal constructor for term rv_fle.
pub fn constructor_rv_fle<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: FReg,
    arg2: FReg,
) -> XReg {
    let v5 = C::freg_to_reg(ctx, arg1);
    let v6 = C::freg_to_reg(ctx, arg2);
    let v7 = constructor_fpu_rrr_int(ctx, &FpuOPRRR::Fle, arg0, &FRM::RNE, v5, v6);
    // Rule at src\isa\riscv64\inst.isle line 1544.
    return v7;
}

// Generated as internal constructor for term rv_fgt.
pub fn constructor_rv_fgt<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: FReg,
    arg2: FReg,
) -> XReg {
    let v3 = constructor_rv_flt(ctx, arg0, arg2, arg1);
    // Rule at src\isa\riscv64\inst.isle line 1549.
    return v3;
}

// Generated as internal constructor for term rv_fge.
pub fn constructor_rv_fge<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: FReg,
    arg2: FReg,
) -> XReg {
    let v3 = constructor_rv_fle(ctx, arg0, arg2, arg1);
    // Rule at src\isa\riscv64\inst.isle line 1554.
    return v3;
}

// Generated as internal constructor for term rv_fmin.
pub fn constructor_rv_fmin<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: FReg,
    arg2: FReg,
) -> FReg {
    let v5 = C::freg_to_reg(ctx, arg1);
    let v6 = C::freg_to_reg(ctx, arg2);
    let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::Fmin, arg0, &FRM::RNE, v5, v6);
    // Rule at src\isa\riscv64\inst.isle line 1558.
    return v7;
}

// Generated as internal constructor for term rv_fmax.
pub fn constructor_rv_fmax<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: FReg,
    arg2: FReg,
) -> FReg {
    let v5 = C::freg_to_reg(ctx, arg1);
    let v6 = C::freg_to_reg(ctx, arg2);
    let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::Fmax, arg0, &FRM::RTZ, v5, v6);
    // Rule at src\isa\riscv64\inst.isle line 1562.
    return v7;
}

// Generated as internal constructor for term rv_fminm.
pub fn constructor_rv_fminm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: FReg,
    arg2: FReg,
) -> FReg {
    let v5 = C::freg_to_reg(ctx, arg1);
    let v6 = C::freg_to_reg(ctx, arg2);
    let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::Fminm, arg0, &FRM::RDN, v5, v6);
    // Rule at src\isa\riscv64\inst.isle line 1568.
    return v7;
}

// Generated as internal constructor for term rv_fmaxm.
pub fn constructor_rv_fmaxm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: FReg,
    arg2: FReg,
) -> FReg {
    let v5 = C::freg_to_reg(ctx, arg1);
    let v6 = C::freg_to_reg(ctx, arg2);
    let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::Fmaxm, arg0, &FRM::RUP, v5, v6);
    // Rule at src\isa\riscv64\inst.isle line 1572.
    return v7;
}

// Generated as internal constructor for term rv_fround.
pub fn constructor_rv_fround<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FRM,
    arg2: FReg,
) -> FReg {
    let v4 = C::freg_to_reg(ctx, arg2);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::Fround, arg0, arg1, v4);
    // Rule at src\isa\riscv64\inst.isle line 1576.
    return v5;
}

// Generated as internal constructor for term rv_fli.
pub fn constructor_rv_fli<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: FliConstant,
) -> FReg {
    let v2 = constructor_temp_writable_freg(ctx);
    let v3 = &C::fpu_op_width_from_ty(ctx, arg0);
    let v4 = C::writable_freg_to_writable_reg(ctx, v2);
    let v5 = MInst::Fli {
        width: v3.clone(),
        imm: arg1,
        rd: v4,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_freg_to_freg(ctx, v2);
    // Rule at src\isa\riscv64\inst.isle line 1580.
    return v7;
}

// Generated as internal constructor for term rv_adduw.
pub fn constructor_rv_adduw<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Adduw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1592.
    return v6;
}

// Generated as internal constructor for term rv_zextw.
pub fn constructor_rv_zextw<C: Context>(
    ctx: &mut C,
    arg0: XReg,
) -> XReg {
    let v1 = C::zero_reg(ctx);
    let v2 = constructor_rv_adduw(ctx, arg0, v1);
    // Rule at src\isa\riscv64\inst.isle line 1599.
    return v2;
}

// Generated as internal constructor for term rv_slliuw.
pub fn constructor_rv_slliuw<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: Imm12,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::SlliUw, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src\isa\riscv64\inst.isle line 1605.
    return v5;
}

// Generated as internal constructor for term rv_andn.
pub fn constructor_rv_andn<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
) -> XReg {
    let v2 = C::has_zbb(ctx);
    match v2 {
        false => {
            let v8 = constructor_rv_not(ctx, arg1);
            let v9 = constructor_rv_and(ctx, arg0, v8);
            // Rule at src\isa\riscv64\inst.isle line 1617.
            return v9;
        }
        true => {
            let v4 = C::xreg_to_reg(ctx, arg0);
            let v5 = C::xreg_to_reg(ctx, arg1);
            let v6 = constructor_alu_rrr(ctx, &AluOPRRR::Andn, v4, v5);
            let v7 = C::xreg_new(ctx, v6);
            // Rule at src\isa\riscv64\inst.isle line 1614.
            return v7;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "rv_andn", "src\\isa\\riscv64\\inst.isle line 1613")
}

// Generated as internal constructor for term rv_orn.
pub fn constructor_rv_orn<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Orn, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1624.
    return v6;
}

// Generated as internal constructor for term rv_xnor.
pub fn constructor_rv_xnor<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Xnor, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1630.
    return v6;
}

// Generated as internal constructor for term rv_clz.
pub fn constructor_rv_clz<C: Context>(
    ctx: &mut C,
    arg0: XReg,
) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Clz, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src\isa\riscv64\inst.isle line 1635.
    return v4;
}

// Generated as internal constructor for term rv_clzw.
pub fn constructor_rv_clzw<C: Context>(
    ctx: &mut C,
    arg0: XReg,
) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Clzw, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src\isa\riscv64\inst.isle line 1640.
    return v4;
}

// Generated as internal constructor for term rv_ctz.
pub fn constructor_rv_ctz<C: Context>(
    ctx: &mut C,
    arg0: XReg,
) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Ctz, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src\isa\riscv64\inst.isle line 1645.
    return v4;
}

// Generated as internal constructor for term rv_ctzw.
pub fn constructor_rv_ctzw<C: Context>(
    ctx: &mut C,
    arg0: XReg,
) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Ctzw, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src\isa\riscv64\inst.isle line 1650.
    return v4;
}

// Generated as internal constructor for term rv_cpop.
pub fn constructor_rv_cpop<C: Context>(
    ctx: &mut C,
    arg0: XReg,
) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Cpop, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src\isa\riscv64\inst.isle line 1655.
    return v4;
}

// Generated as internal constructor for term rv_cpopw.
pub fn constructor_rv_cpopw<C: Context>(
    ctx: &mut C,
    arg0: XReg,
) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Cpopw, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src\isa\riscv64\inst.isle line 1660.
    return v4;
}

// Generated as internal constructor for term rv_max.
pub fn constructor_rv_max<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Max, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1665.
    return v6;
}

// Generated as internal constructor for term rv_maxu.
pub fn constructor_rv_maxu<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Maxu, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1670.
    return v6;
}

// Generated as internal constructor for term rv_min.
pub fn constructor_rv_min<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Min, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1675.
    return v6;
}

// Generated as internal constructor for term rv_minu.
pub fn constructor_rv_minu<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Minu, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1680.
    return v6;
}

// Generated as internal constructor for term rv_sextb.
pub fn constructor_rv_sextb<C: Context>(
    ctx: &mut C,
    arg0: XReg,
) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::imm12_const(ctx, 0_i32);
    let v5 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Sextb, v2, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1685.
    return v6;
}

// Generated as internal constructor for term rv_sexth.
pub fn constructor_rv_sexth<C: Context>(
    ctx: &mut C,
    arg0: XReg,
) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::imm12_const(ctx, 0_i32);
    let v5 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Sexth, v2, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1690.
    return v6;
}

// Generated as internal constructor for term rv_zexth.
pub fn constructor_rv_zexth<C: Context>(
    ctx: &mut C,
    arg0: XReg,
) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::imm12_const(ctx, 0_i32);
    let v5 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Zexth, v2, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1695.
    return v6;
}

// Generated as internal constructor for term rv_rol.
pub fn constructor_rv_rol<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Rol, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1700.
    return v6;
}

// Generated as internal constructor for term rv_rolw.
pub fn constructor_rv_rolw<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Rolw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1705.
    return v6;
}

// Generated as internal constructor for term rv_ror.
pub fn constructor_rv_ror<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Ror, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1710.
    return v6;
}

// Generated as internal constructor for term rv_rorw.
pub fn constructor_rv_rorw<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Rorw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1715.
    return v6;
}

// Generated as internal constructor for term rv_rori.
pub fn constructor_rv_rori<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: Imm12,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Rori, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src\isa\riscv64\inst.isle line 1720.
    return v5;
}

// Generated as internal constructor for term rv_roriw.
pub fn constructor_rv_roriw<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: Imm12,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Roriw, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src\isa\riscv64\inst.isle line 1725.
    return v5;
}

// Generated as internal constructor for term rv_rev8.
pub fn constructor_rv_rev8<C: Context>(
    ctx: &mut C,
    arg0: XReg,
) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Rev8, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src\isa\riscv64\inst.isle line 1730.
    return v4;
}

// Generated as internal constructor for term rv_brev8.
pub fn constructor_rv_brev8<C: Context>(
    ctx: &mut C,
    arg0: XReg,
) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Brev8, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src\isa\riscv64\inst.isle line 1738.
    return v4;
}

// Generated as internal constructor for term rv_bclr.
pub fn constructor_rv_bclr<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Bclr, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1744.
    return v6;
}

// Generated as internal constructor for term rv_bclri.
pub fn constructor_rv_bclri<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: Imm12,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Bclri, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src\isa\riscv64\inst.isle line 1748.
    return v5;
}

// Generated as internal constructor for term rv_bext.
pub fn constructor_rv_bext<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Bext, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1752.
    return v6;
}

// Generated as internal constructor for term rv_bexti.
pub fn constructor_rv_bexti<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: Imm12,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Bexti, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src\isa\riscv64\inst.isle line 1756.
    return v5;
}

// Generated as internal constructor for term rv_binv.
pub fn constructor_rv_binv<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Binv, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1760.
    return v6;
}

// Generated as internal constructor for term rv_binvi.
pub fn constructor_rv_binvi<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: Imm12,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Binvi, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src\isa\riscv64\inst.isle line 1764.
    return v5;
}

// Generated as internal constructor for term rv_bset.
pub fn constructor_rv_bset<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Bset, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1768.
    return v6;
}

// Generated as internal constructor for term rv_bseti.
pub fn constructor_rv_bseti<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: Imm12,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Bseti, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src\isa\riscv64\inst.isle line 1773.
    return v5;
}

// Generated as internal constructor for term rv_pack.
pub fn constructor_rv_pack<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Pack, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1780.
    return v6;
}

// Generated as internal constructor for term rv_packw.
pub fn constructor_rv_packw<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Packw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1785.
    return v6;
}

// Generated as internal constructor for term rv_czero_eqz.
pub fn constructor_rv_czero_eqz<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::CzeroEqz, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1796.
    return v6;
}

// Generated as internal constructor for term rv_czero_nez.
pub fn constructor_rv_czero_nez<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::CzeroNez, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1805.
    return v6;
}

// Generated as internal constructor for term rv_csrrwi.
pub fn constructor_rv_csrrwi<C: Context>(
    ctx: &mut C,
    arg0: &CSR,
    arg1: UImm5,
) -> XReg {
    let v3 = constructor_csr_imm(ctx, &CsrImmOP::CsrRWI, arg0, arg1);
    // Rule at src\isa\riscv64\inst.isle line 1813.
    return v3;
}

// Generated as internal constructor for term rv_fsrmi.
pub fn constructor_rv_fsrmi<C: Context>(
    ctx: &mut C,
    arg0: &FRM,
) -> XReg {
    let v2 = C::frm_bits(ctx, arg0);
    let v3 = constructor_rv_csrrwi(ctx, &CSR::Frm, v2);
    // Rule at src\isa\riscv64\inst.isle line 1818.
    return v3;
}

// Generated as internal constructor for term rv_csrw.
pub fn constructor_rv_csrw<C: Context>(
    ctx: &mut C,
    arg0: &CSR,
    arg1: XReg,
) -> Unit {
    let v3 = constructor_csr_reg_dst_zero(ctx, &CsrRegOP::CsrRW, arg0, arg1);
    // Rule at src\isa\riscv64\inst.isle line 1824.
    return v3;
}

// Generated as internal constructor for term rv_fsrm.
pub fn constructor_rv_fsrm<C: Context>(
    ctx: &mut C,
    arg0: XReg,
) -> Unit {
    let v2 = constructor_rv_csrw(ctx, &CSR::Frm, arg0);
    // Rule at src\isa\riscv64\inst.isle line 1829.
    return v2;
}

// Generated as internal constructor for term has_fli_for_type.
pub fn constructor_has_fli_for_type<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> bool {
    match arg0 {
        F16 => {
            let v1 = C::has_zfh(ctx);
            if v1 == true {
                let v2 = C::has_zfa(ctx);
                // Rule at src\isa\riscv64\inst.isle line 1857.
                return v2;
            }
            let v3 = C::has_zvfh(ctx);
            if v3 == true {
                let v2 = C::has_zfa(ctx);
                // Rule at src\isa\riscv64\inst.isle line 1858.
                return v2;
            }
            let v4 = false;
            // Rule at src\isa\riscv64\inst.isle line 1859.
            return v4;
        }
        F32 => {
            let v2 = C::has_zfa(ctx);
            // Rule at src\isa\riscv64\inst.isle line 1860.
            return v2;
        }
        F64 => {
            let v2 = C::has_zfa(ctx);
            // Rule at src\isa\riscv64\inst.isle line 1861.
            return v2;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "has_fli_for_type", "src\\isa\\riscv64\\inst.isle line 1856")
}

// Generated as internal constructor for term imm.
pub fn constructor_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: u64,
) -> Reg {
    let v1 = C::ty_supported_float_min(ctx, arg0);
    if let Some(v2) = v1 {
        if arg1 == 0x0_u64 {
            let v4 = C::zero_reg(ctx);
            let v6 = constructor_float_int_of_same_size(ctx, v2);
            let v5 = C::xreg_to_reg(ctx, v4);
            let v7 = constructor_gen_bitcast(ctx, v5, v6, v2);
            // Rule at src\isa\riscv64\inst.isle line 1870.
            return v7;
        }
    }
    let v8 = C::ty_supported_float_size(ctx, arg0);
    if let Some(v9) = v8 {
        let v10 = constructor_has_fli_for_type(ctx, v9);
        if v10 == true {
            let v11 = C::fli_constant_from_u64(ctx, v9, arg1);
            if let Some(v12) = v11 {
                let v13 = constructor_rv_fli(ctx, v9, v12);
                let v14 = C::freg_to_reg(ctx, v13);
                // Rule at src\isa\riscv64\inst.isle line 1873.
                return v14;
            }
        }
    }
    let v15 = C::ty_supported_float_full(ctx, arg0);
    if let Some(v16) = v15 {
        let v17 = constructor_has_fli_for_type(ctx, v16);
        if v17 == true {
            let v18 = C::fli_constant_from_negated_u64(ctx, v16, arg1);
            if let Some(v19) = v18 {
                let v20 = constructor_rv_fli(ctx, v16, v19);
                let v21 = constructor_rv_fneg(ctx, v16, v20);
                let v22 = C::freg_to_reg(ctx, v21);
                // Rule at src\isa\riscv64\inst.isle line 1883.
                return v22;
            }
        }
    }
    if let Some(v2) = v1 {
        let v23 = constructor_float_int_of_same_size(ctx, v2);
        let v24 = constructor_imm(ctx, v23, arg1);
        let v25 = constructor_float_int_of_same_size(ctx, v2);
        let v26 = constructor_gen_bitcast(ctx, v24, v25, v2);
        // Rule at src\isa\riscv64\inst.isle line 1889.
        return v26;
    }
    if let Some(v9) = v8 {
        if v9 == F16 {
            let v29 = C::u64_or(ctx, arg1, 0xffff0000_u64);
            let v30 = constructor_imm(ctx, I32, v29);
            let v32 = constructor_gen_bitcast(ctx, v30, I32, F32);
            // Rule at src\isa\riscv64\inst.isle line 1891.
            return v32;
        }
    }
    let v33 = C::ty_int(ctx, arg0);
    if let Some(v34) = v33 {
        let v35 = C::i64_sextend_u64(ctx, v34, arg1);
        let v36 = C::i64_generate_imm(ctx, v35);
        if let Some(v37) = v36 {
            let v40 = C::imm20_is_zero(ctx, v37.0);
            if let Some(v41) = v40 {
                let v4 = C::zero_reg(ctx);
                let v42 = constructor_rv_addi(ctx, v4, v37.1);
                let v43 = C::xreg_to_reg(ctx, v42);
                // Rule at src\isa\riscv64\inst.isle line 1894.
                return v43;
            }
            let v44 = C::imm12_is_zero(ctx, v37.1);
            if let Some(v45) = v44 {
                let v46 = constructor_rv_lui(ctx, v37.0);
                let v47 = C::xreg_to_reg(ctx, v46);
                // Rule at src\isa\riscv64\inst.isle line 1901.
                return v47;
            }
            let v46 = constructor_rv_lui(ctx, v37.0);
            let v48 = constructor_rv_addi(ctx, v46, v37.1);
            let v49 = C::xreg_to_reg(ctx, v48);
            // Rule at src\isa\riscv64\inst.isle line 1907.
            return v49;
        }
        let v50 = C::i64_shift_for_lui(ctx, v35);
        if let Some(v51) = v50 {
            let v54 = C::imm20_from_u64(ctx, v51.0);
            if let Some(v55) = v54 {
                let v56 = constructor_rv_lui(ctx, v55);
                let v57 = constructor_rv_slli(ctx, v56, v51.1);
                let v58 = C::xreg_to_reg(ctx, v57);
                // Rule at src\isa\riscv64\inst.isle line 1912.
                return v58;
            }
        }
        let v59 = C::i64_shift(ctx, v35);
        if let Some(v60) = v59 {
            let v63 = C::i64_generate_imm(ctx, v60.0);
            if let Some(v64) = v63 {
                let v67 = C::i64_as_u64(ctx, v60.0);
                let v68 = constructor_imm(ctx, v34, v67);
                let v69 = C::xreg_new(ctx, v68);
                let v70 = constructor_rv_slli(ctx, v69, v60.1);
                let v71 = C::xreg_to_reg(ctx, v70);
                // Rule at src\isa\riscv64\inst.isle line 1921.
                return v71;
            }
        }
        let v72 = C::emit_u64_le_const(ctx, arg1);
        let v73 = C::gen_const_amode(ctx, v72);
        let v75 = C::mem_flags_trusted(ctx);
        let v76 = constructor_gen_load(ctx, v73, &LoadOP::Ld, v75);
        // Rule at src\isa\riscv64\inst.isle line 1927.
        return v76;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "imm", "src\\isa\\riscv64\\inst.isle line 1866")
}

// Generated as internal constructor for term imm12_zero.
pub fn constructor_imm12_zero<C: Context>(
    ctx: &mut C,
) -> Imm12 {
    let v1 = C::imm12_const(ctx, 0_i32);
    // Rule at src\isa\riscv64\inst.isle line 1936.
    return v1;
}

// Generated as internal constructor for term load_imm12.
pub fn constructor_load_imm12<C: Context>(
    ctx: &mut C,
    arg0: i32,
) -> Reg {
    let v1 = C::zero_reg(ctx);
    let v2 = C::imm12_const(ctx, arg0);
    let v3 = constructor_rv_addi(ctx, v1, v2);
    let v4 = C::xreg_to_reg(ctx, v3);
    // Rule at src\isa\riscv64\inst.isle line 1943.
    return v4;
}

// Generated as internal constructor for term imm12_from_negated_value.
pub fn constructor_imm12_from_negated_value<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> Option<Imm12> {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = C::first_result(ctx, v2);
        if let Some(v4) = v3 {
            let v6 = &C::inst_data_value(ctx, v2);
            if let &InstructionData::UnaryImm {
                opcode: ref v7,
                imm: v8,
            } = v6 {
                if let &Opcode::Iconst = v7 {
                    let v5 = C::value_type(ctx, v4);
                    let v9 = C::i64_sextend_imm64(ctx, v5, v8);
                    let v10 = C::i64_neg(ctx, v9);
                    let v11 = C::i64_as_u64(ctx, v10);
                    let v12 = C::imm12_from_u64(ctx, v11);
                    if let Some(v13) = v12 {
                        let v14 = Some(v13);
                        // Rule at src\isa\riscv64\inst.isle line 1973.
                        return v14;
                    }
                }
            }
        }
    }
    None
}

// Generated as internal constructor for term u64_to_imm12.
pub fn constructor_u64_to_imm12<C: Context>(
    ctx: &mut C,
    arg0: u64,
) -> Option<Imm12> {
    let v1 = C::imm12_from_u64(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = Some(v2);
        // Rule at src\isa\riscv64\inst.isle line 1984.
        return v3;
    }
    None
}

// Generated as internal constructor for term imm5_from_negated_value.
pub fn constructor_imm5_from_negated_value<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> Option<Imm5> {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = C::first_result(ctx, v2);
        if let Some(v4) = v3 {
            let v6 = &C::inst_data_value(ctx, v2);
            if let &InstructionData::UnaryImm {
                opcode: ref v7,
                imm: v8,
            } = v6 {
                if let &Opcode::Iconst = v7 {
                    let v5 = C::value_type(ctx, v4);
                    let v9 = C::i64_sextend_imm64(ctx, v5, v8);
                    let v10 = C::i64_neg(ctx, v9);
                    let v11 = C::imm5_from_i64(ctx, v10);
                    if let Some(v12) = v11 {
                        let v13 = Some(v12);
                        // Rule at src\isa\riscv64\inst.isle line 2020.
                        return v13;
                    }
                }
            }
        }
    }
    None
}

// Generated as internal constructor for term replicated_imm5.
pub fn constructor_replicated_imm5<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> Option<Imm5> {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = &C::inst_data_value(ctx, v2);
        match v3 {
            &InstructionData::Unary {
                opcode: ref v4,
                arg: v5,
            } => {
                if let &Opcode::Splat = v4 {
                    let v6 = C::i64_from_iconst(ctx, v5);
                    if let Some(v7) = v6 {
                        let v8 = C::imm5_from_i64(ctx, v7);
                        if let Some(v9) = v8 {
                            let v10 = Some(v9);
                            // Rule at src\isa\riscv64\inst.isle line 2026.
                            return v10;
                        }
                    }
                }
            }
            &InstructionData::UnaryConst {
                opcode: ref v11,
                constant_handle: v12,
            } => {
                if let &Opcode::Vconst = v11 {
                    let v13 = C::u128_from_constant(ctx, v12);
                    if let Some(v14) = v13 {
                        let v15 = C::u128_replicated_u64(ctx, v14);
                        if let Some(v16) = v15 {
                            let v17 = C::u64_replicated_u32(ctx, v16);
                            if let Some(v18) = v17 {
                                let v19 = C::u32_replicated_u16(ctx, v18);
                                if let Some(v20) = v19 {
                                    let v21 = C::u16_replicated_u8(ctx, v20);
                                    if let Some(v22) = v21 {
                                        let v23 = C::u8_as_i8(ctx, v22);
                                        let v24 = C::i8_to_imm5(ctx, v23);
                                        if let Some(v25) = v24 {
                                            let v26 = Some(v25);
                                            // Rule at src\isa\riscv64\inst.isle line 2027.
                                            return v26;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            _ => {}
        }
    }
    None
}

// Generated as internal constructor for term negated_replicated_imm5.
pub fn constructor_negated_replicated_imm5<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> Option<Imm5> {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = &C::inst_data_value(ctx, v2);
        match v3 {
            &InstructionData::Unary {
                opcode: ref v4,
                arg: v5,
            } => {
                if let &Opcode::Splat = v4 {
                    let v6 = constructor_imm5_from_negated_value(ctx, v5);
                    if let Some(v7) = v6 {
                        let v8 = Some(v7);
                        // Rule at src\isa\riscv64\inst.isle line 2037.
                        return v8;
                    }
                }
            }
            &InstructionData::UnaryConst {
                opcode: ref v9,
                constant_handle: v10,
            } => {
                if let &Opcode::Vconst = v9 {
                    let v11 = C::u128_from_constant(ctx, v10);
                    if let Some(v12) = v11 {
                        let v13 = C::u128_replicated_u64(ctx, v12);
                        if let Some(v14) = v13 {
                            let v15 = C::u64_replicated_u32(ctx, v14);
                            if let Some(v16) = v15 {
                                let v17 = C::u32_replicated_u16(ctx, v16);
                                if let Some(v18) = v17 {
                                    let v19 = C::u16_replicated_u8(ctx, v18);
                                    if let Some(v20) = v19 {
                                        let v21 = C::u8_as_i8(ctx, v20);
                                        let v22 = C::i8_neg(ctx, v21);
                                        let v23 = C::i8_to_imm5(ctx, v22);
                                        if let Some(v24) = v23 {
                                            let v25 = Some(v24);
                                            // Rule at src\isa\riscv64\inst.isle line 2040.
                                            return v25;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            _ => {}
        }
    }
    None
}

// Generated as internal constructor for term replicated_uimm5.
pub fn constructor_replicated_uimm5<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> Option<UImm5> {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = &C::inst_data_value(ctx, v2);
        match v3 {
            &InstructionData::Unary {
                opcode: ref v4,
                arg: v5,
            } => {
                if let &Opcode::Splat = v4 {
                    let v6 = C::def_inst(ctx, v5);
                    if let Some(v7) = v6 {
                        let v8 = &C::inst_data_value(ctx, v7);
                        if let &InstructionData::UnaryImm {
                            opcode: ref v9,
                            imm: v10,
                        } = v8 {
                            if let &Opcode::Iconst = v9 {
                                let v11 = C::u64_from_imm64(ctx, v10);
                                let v12 = C::uimm5_from_u64(ctx, v11);
                                if let Some(v13) = v12 {
                                    let v14 = Some(v13);
                                    // Rule at src\isa\riscv64\inst.isle line 2052.
                                    return v14;
                                }
                            }
                        }
                    }
                }
            }
            &InstructionData::UnaryConst {
                opcode: ref v15,
                constant_handle: v16,
            } => {
                if let &Opcode::Vconst = v15 {
                    let v17 = C::u128_from_constant(ctx, v16);
                    if let Some(v18) = v17 {
                        let v19 = C::u128_replicated_u64(ctx, v18);
                        if let Some(v20) = v19 {
                            let v21 = C::u64_replicated_u32(ctx, v20);
                            if let Some(v22) = v21 {
                                let v23 = C::u32_replicated_u16(ctx, v22);
                                if let Some(v24) = v23 {
                                    let v25 = C::u16_replicated_u8(ctx, v24);
                                    if let Some(v26) = v25 {
                                        let v27 = C::uimm5_from_u8(ctx, v26);
                                        if let Some(v28) = v27 {
                                            let v29 = Some(v28);
                                            // Rule at src\isa\riscv64\inst.isle line 2053.
                                            return v29;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            _ => {}
        }
    }
    None
}

// Generated as internal constructor for term u64_to_uimm5.
pub fn constructor_u64_to_uimm5<C: Context>(
    ctx: &mut C,
    arg0: u64,
) -> Option<UImm5> {
    let v1 = C::uimm5_from_u64(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = Some(v2);
        // Rule at src\isa\riscv64\inst.isle line 2076.
        return v3;
    }
    None
}

// Generated as internal constructor for term canonical_nan_u64.
pub fn constructor_canonical_nan_u64<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> u64 {
    match arg0 {
        F32 => {
            // Rule at src\isa\riscv64\inst.isle line 2085.
            return 0x7fc00000_u64;
        }
        F64 => {
            // Rule at src\isa\riscv64\inst.isle line 2086.
            return 0x7ff8000000000000_u64;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "canonical_nan_u64", "src\\isa\\riscv64\\inst.isle line 2084")
}

// Generated as internal constructor for term fpu_rr.
pub fn constructor_fpu_rr<C: Context>(
    ctx: &mut C,
    arg0: &FpuOPRR,
    arg1: Type,
    arg2: &FRM,
    arg3: Reg,
) -> FReg {
    let v4 = constructor_temp_writable_freg(ctx);
    let v5 = &C::fpu_op_width_from_ty(ctx, arg1);
    let v6 = C::writable_freg_to_writable_reg(ctx, v4);
    let v7 = MInst::FpuRR {
        alu_op: arg0.clone(),
        width: v5.clone(),
        frm: arg2.clone(),
        rd: v6,
        rs: arg3,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_freg_to_freg(ctx, v4);
    // Rule at src\isa\riscv64\inst.isle line 2090.
    return v9;
}

// Generated as internal constructor for term fpu_rr_int.
pub fn constructor_fpu_rr_int<C: Context>(
    ctx: &mut C,
    arg0: &FpuOPRR,
    arg1: Type,
    arg2: &FRM,
    arg3: Reg,
) -> XReg {
    let v4 = constructor_temp_writable_xreg(ctx);
    let v5 = &C::fpu_op_width_from_ty(ctx, arg1);
    let v6 = C::writable_xreg_to_writable_reg(ctx, v4);
    let v7 = MInst::FpuRR {
        alu_op: arg0.clone(),
        width: v5.clone(),
        frm: arg2.clone(),
        rd: v6,
        rs: arg3,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_xreg_to_xreg(ctx, v4);
    // Rule at src\isa\riscv64\inst.isle line 2097.
    return v9;
}

// Generated as internal constructor for term alu_rrr.
pub fn constructor_alu_rrr<C: Context>(
    ctx: &mut C,
    arg0: &AluOPRRR,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = constructor_temp_writable_xreg(ctx);
    let v4 = C::writable_xreg_to_writable_reg(ctx, v3);
    let v5 = MInst::AluRRR {
        alu_op: arg0.clone(),
        rd: v4,
        rs1: arg1,
        rs2: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = constructor_writable_xreg_to_reg(ctx, v3);
    // Rule at src\isa\riscv64\inst.isle line 2104.
    return v7;
}

// Generated as internal constructor for term fpu_rrr.
pub fn constructor_fpu_rrr<C: Context>(
    ctx: &mut C,
    arg0: &FpuOPRRR,
    arg1: Type,
    arg2: &FRM,
    arg3: Reg,
    arg4: Reg,
) -> FReg {
    let v5 = constructor_temp_writable_freg(ctx);
    let v6 = &C::fpu_op_width_from_ty(ctx, arg1);
    let v7 = C::writable_freg_to_writable_reg(ctx, v5);
    let v8 = MInst::FpuRRR {
        alu_op: arg0.clone(),
        width: v6.clone(),
        frm: arg2.clone(),
        rd: v7,
        rs1: arg3,
        rs2: arg4,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_freg_to_freg(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 2111.
    return v10;
}

// Generated as internal constructor for term fpu_rrr_int.
pub fn constructor_fpu_rrr_int<C: Context>(
    ctx: &mut C,
    arg0: &FpuOPRRR,
    arg1: Type,
    arg2: &FRM,
    arg3: Reg,
    arg4: Reg,
) -> XReg {
    let v5 = constructor_temp_writable_xreg(ctx);
    let v6 = &C::fpu_op_width_from_ty(ctx, arg1);
    let v7 = C::writable_xreg_to_writable_reg(ctx, v5);
    let v8 = MInst::FpuRRR {
        alu_op: arg0.clone(),
        width: v6.clone(),
        frm: arg2.clone(),
        rd: v7,
        rs1: arg3,
        rs2: arg4,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_xreg_to_xreg(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 2118.
    return v10;
}

// Generated as internal constructor for term fpu_rrrr.
pub fn constructor_fpu_rrrr<C: Context>(
    ctx: &mut C,
    arg0: &FpuOPRRRR,
    arg1: Type,
    arg2: &FRM,
    arg3: Reg,
    arg4: Reg,
    arg5: Reg,
) -> FReg {
    let v6 = constructor_temp_writable_freg(ctx);
    let v7 = &C::fpu_op_width_from_ty(ctx, arg1);
    let v8 = C::writable_freg_to_writable_reg(ctx, v6);
    let v9 = MInst::FpuRRRR {
        alu_op: arg0.clone(),
        width: v7.clone(),
        frm: arg2.clone(),
        rd: v8,
        rs1: arg3,
        rs2: arg4,
        rs3: arg5,
    };
    let v10 = C::emit(ctx, &v9);
    let v11 = C::writable_freg_to_freg(ctx, v6);
    // Rule at src\isa\riscv64\inst.isle line 2125.
    return v11;
}

// Generated as internal constructor for term alu_rr_imm12.
pub fn constructor_alu_rr_imm12<C: Context>(
    ctx: &mut C,
    arg0: &AluOPRRI,
    arg1: Reg,
    arg2: Imm12,
) -> Reg {
    let v3 = constructor_temp_writable_xreg(ctx);
    let v4 = C::writable_xreg_to_writable_reg(ctx, v3);
    let v5 = MInst::AluRRImm12 {
        alu_op: arg0.clone(),
        rd: v4,
        rs: arg1,
        imm12: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = constructor_writable_xreg_to_reg(ctx, v3);
    // Rule at src\isa\riscv64\inst.isle line 2133.
    return v7;
}

// Generated as internal constructor for term alu_rr_funct12.
pub fn constructor_alu_rr_funct12<C: Context>(
    ctx: &mut C,
    arg0: &AluOPRRI,
    arg1: Reg,
) -> Reg {
    let v2 = constructor_temp_writable_xreg(ctx);
    let v3 = C::writable_xreg_to_writable_reg(ctx, v2);
    let v4 = constructor_imm12_zero(ctx);
    let v5 = MInst::AluRRImm12 {
        alu_op: arg0.clone(),
        rd: v3,
        rs: arg1,
        imm12: v4,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = constructor_writable_xreg_to_reg(ctx, v2);
    // Rule at src\isa\riscv64\inst.isle line 2141.
    return v7;
}

// Generated as internal constructor for term rv_lui.
pub fn constructor_rv_lui<C: Context>(
    ctx: &mut C,
    arg0: Imm20,
) -> XReg {
    let v1 = constructor_temp_writable_xreg(ctx);
    let v2 = C::writable_xreg_to_writable_reg(ctx, v1);
    let v3 = MInst::Lui {
        rd: v2,
        imm: arg0,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_xreg_to_xreg(ctx, v1);
    // Rule at src\isa\riscv64\inst.isle line 2150.
    return v5;
}

// Generated as internal constructor for term csr_imm.
pub fn constructor_csr_imm<C: Context>(
    ctx: &mut C,
    arg0: &CsrImmOP,
    arg1: &CSR,
    arg2: UImm5,
) -> XReg {
    let v3 = constructor_temp_writable_xreg(ctx);
    let v4 = C::writable_xreg_to_writable_reg(ctx, v3);
    let v5 = MInst::CsrImm {
        op: arg0.clone(),
        rd: v4,
        imm: arg2,
        csr: arg1.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xreg_to_xreg(ctx, v3);
    // Rule at src\isa\riscv64\inst.isle line 2157.
    return v7;
}

// Generated as internal constructor for term csr_reg_dst_zero.
pub fn constructor_csr_reg_dst_zero<C: Context>(
    ctx: &mut C,
    arg0: &CsrRegOP,
    arg1: &CSR,
    arg2: XReg,
) -> Unit {
    let v3 = C::writable_zero_reg(ctx);
    let v4 = C::xreg_to_reg(ctx, arg2);
    let v5 = MInst::CsrReg {
        op: arg0.clone(),
        rd: v3,
        rs: v4,
        csr: arg1.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    // Rule at src\isa\riscv64\inst.isle line 2164.
    return v6;
}

// Generated as internal constructor for term select_addi.
pub fn constructor_select_addi<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> AluOPRRI {
    let v1 = C::fits_in_32(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src\isa\riscv64\inst.isle line 2170.
        return AluOPRRI::Addiw;
    }
    let v4 = C::fits_in_64(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src\isa\riscv64\inst.isle line 2171.
        return AluOPRRI::Addi;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "select_addi", "src\\isa\\riscv64\\inst.isle line 2169")
}

// Generated as internal constructor for term gen_andi.
pub fn constructor_gen_andi<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: u64,
) -> XReg {
    let v2 = C::imm12_from_u64(ctx, arg1);
    if let Some(v3) = v2 {
        let v4 = constructor_rv_andi(ctx, arg0, v3);
        // Rule at src\isa\riscv64\inst.isle line 2175.
        return v4;
    }
    let v6 = constructor_imm(ctx, I64, arg1);
    let v7 = C::xreg_new(ctx, v6);
    let v8 = constructor_rv_and(ctx, arg0, v7);
    // Rule at src\isa\riscv64\inst.isle line 2178.
    return v8;
}

// Generated as internal constructor for term gen_or.
pub fn constructor_gen_or<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: ValueRegs,
    arg2: ValueRegs,
) -> ValueRegs {
    if arg0 == I128 {
        let v4 = C::value_regs_get(ctx, arg1, 0x0_usize);
        let v5 = C::xreg_new(ctx, v4);
        let v6 = C::value_regs_get(ctx, arg2, 0x0_usize);
        let v7 = C::xreg_new(ctx, v6);
        let v8 = constructor_rv_or(ctx, v5, v7);
        let v11 = C::value_regs_get(ctx, arg1, 0x1_usize);
        let v12 = C::xreg_new(ctx, v11);
        let v13 = C::value_regs_get(ctx, arg2, 0x1_usize);
        let v14 = C::xreg_new(ctx, v13);
        let v15 = constructor_rv_or(ctx, v12, v14);
        let v9 = C::xreg_to_reg(ctx, v8);
        let v16 = C::xreg_to_reg(ctx, v15);
        let v17 = C::value_regs(ctx, v9, v16);
        // Rule at src\isa\riscv64\inst.isle line 2183.
        return v17;
    }
    let v18 = C::fits_in_64(ctx, arg0);
    if let Some(v19) = v18 {
        let v4 = C::value_regs_get(ctx, arg1, 0x0_usize);
        let v5 = C::xreg_new(ctx, v4);
        let v6 = C::value_regs_get(ctx, arg2, 0x0_usize);
        let v7 = C::xreg_new(ctx, v6);
        let v8 = constructor_rv_or(ctx, v5, v7);
        let v9 = C::xreg_to_reg(ctx, v8);
        let v20 = C::value_reg(ctx, v9);
        // Rule at src\isa\riscv64\inst.isle line 2188.
        return v20;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "gen_or", "src\\isa\\riscv64\\inst.isle line 2182")
}

// Generated as internal constructor for term lower_ctz.
pub fn constructor_lower_ctz<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v8 = C::has_zbb(ctx);
    if v8 == true {
        match arg0 {
            I32 => {
                let v3 = C::xreg_new(ctx, arg1);
                let v15 = constructor_rv_ctzw(ctx, v3);
                let v16 = C::xreg_to_reg(ctx, v15);
                // Rule at src\isa\riscv64\inst.isle line 2201.
                return v16;
            }
            I64 => {
                let v3 = C::xreg_new(ctx, arg1);
                let v17 = constructor_rv_ctz(ctx, v3);
                let v18 = C::xreg_to_reg(ctx, v17);
                // Rule at src\isa\riscv64\inst.isle line 2205.
                return v18;
            }
            _ => {}
        }
        let v6 = C::fits_in_16(ctx, arg0);
        if let Some(v7) = v6 {
            let v9 = C::ty_bits(ctx, v7);
            let v10 = C::u8_as_u64(ctx, v9);
            let v11 = constructor_gen_bseti(ctx, arg1, v10);
            let v12 = C::xreg_new(ctx, v11);
            let v13 = constructor_rv_ctzw(ctx, v12);
            let v14 = C::xreg_to_reg(ctx, v13);
            // Rule at src\isa\riscv64\inst.isle line 2196.
            return v14;
        }
    }
    let v3 = C::xreg_new(ctx, arg1);
    let v2 = false;
    let v4 = constructor_gen_cltz(ctx, v2, v3, arg0);
    let v5 = C::xreg_to_reg(ctx, v4);
    // Rule at src\isa\riscv64\inst.isle line 2193.
    return v5;
}

// Generated as internal constructor for term gen_cltz.
pub fn constructor_gen_cltz<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: XReg,
    arg2: Type,
) -> XReg {
    let v3 = constructor_temp_writable_xreg(ctx);
    let v4 = constructor_temp_writable_xreg(ctx);
    let v5 = constructor_temp_writable_xreg(ctx);
    let v6 = C::writable_xreg_to_writable_reg(ctx, v5);
    let v7 = C::writable_xreg_to_writable_reg(ctx, v4);
    let v8 = C::writable_xreg_to_writable_reg(ctx, v3);
    let v9 = C::xreg_to_reg(ctx, arg1);
    let v10 = MInst::Cltz {
        leading: arg0,
        sum: v6,
        step: v7,
        tmp: v8,
        rs: v9,
        ty: arg2,
    };
    let v11 = C::emit(ctx, &v10);
    let v12 = C::writable_xreg_to_xreg(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 2213.
    return v12;
}

// Generated as internal constructor for term zext.
pub fn constructor_zext<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> XReg {
    let v25 = constructor_val_already_extended(ctx, &ExtendOp::Zero, arg0);
    if let Some(v26) = v25 {
        let v12 = constructor_put_in_xreg(ctx, arg0);
        // Rule at src\isa\riscv64\inst.isle line 2257.
        return v12;
    }
    let v1 = C::value_type(ctx, arg0);
    match v1 {
        I8 => {
            let v12 = constructor_put_in_xreg(ctx, arg0);
            let v14 = C::imm12_const(ctx, 255_i32);
            let v15 = constructor_rv_andi(ctx, v12, v14);
            // Rule at src\isa\riscv64\inst.isle line 2229.
            return v15;
        }
        I16 => {
            let v20 = C::has_zbb(ctx);
            if v20 == true {
                let v12 = constructor_put_in_xreg(ctx, arg0);
                let v21 = constructor_rv_zexth(ctx, v12);
                // Rule at src\isa\riscv64\inst.isle line 2246.
                return v21;
            }
            let v16 = C::has_zbkb(ctx);
            if v16 == true {
                let v12 = constructor_put_in_xreg(ctx, arg0);
                let v17 = C::zero_reg(ctx);
                let v18 = constructor_rv_packw(ctx, v12, v17);
                // Rule at src\isa\riscv64\inst.isle line 2236.
                return v18;
            }
        }
        I32 => {
            let v22 = C::has_zba(ctx);
            if v22 == true {
                let v12 = constructor_put_in_xreg(ctx, arg0);
                let v23 = constructor_rv_zextw(ctx, v12);
                // Rule at src\isa\riscv64\inst.isle line 2251.
                return v23;
            }
            let v16 = C::has_zbkb(ctx);
            if v16 == true {
                let v12 = constructor_put_in_xreg(ctx, arg0);
                let v17 = C::zero_reg(ctx);
                let v19 = constructor_rv_pack(ctx, v12, v17);
                // Rule at src\isa\riscv64\inst.isle line 2241.
                return v19;
            }
        }
        _ => {}
    }
    let v2 = C::fits_in_32(ctx, v1);
    if let Some(v3) = v2 {
        let v5 = C::ty_bits(ctx, v3);
        let v6 = C::u8_as_u64(ctx, v5);
        let v7 = C::u64_sub(ctx, 0x40_u64, v6);
        let v8 = C::imm_from_bits(ctx, v7);
        let v9 = constructor_put_in_xreg(ctx, arg0);
        let v10 = constructor_rv_slli(ctx, v9, v8);
        let v11 = constructor_rv_srli(ctx, v10, v8);
        // Rule at src\isa\riscv64\inst.isle line 2224.
        return v11;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "zext", "src\\isa\\riscv64\\inst.isle line 2221")
}

// Generated as internal constructor for term sext.
pub fn constructor_sext<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> XReg {
    let v18 = constructor_val_already_extended(ctx, &ExtendOp::Signed, arg0);
    if let Some(v19) = v18 {
        let v13 = constructor_put_in_xreg(ctx, arg0);
        // Rule at src\isa\riscv64\inst.isle line 2286.
        return v13;
    }
    let v1 = C::value_type(ctx, arg0);
    match v1 {
        I8 => {
            let v12 = C::has_zbb(ctx);
            if v12 == true {
                let v13 = constructor_put_in_xreg(ctx, arg0);
                let v14 = constructor_rv_sextb(ctx, v13);
                // Rule at src\isa\riscv64\inst.isle line 2270.
                return v14;
            }
        }
        I16 => {
            let v12 = C::has_zbb(ctx);
            if v12 == true {
                let v13 = constructor_put_in_xreg(ctx, arg0);
                let v15 = constructor_rv_sexth(ctx, v13);
                // Rule at src\isa\riscv64\inst.isle line 2275.
                return v15;
            }
        }
        I32 => {
            let v13 = constructor_put_in_xreg(ctx, arg0);
            let v16 = constructor_rv_sextw(ctx, v13);
            // Rule at src\isa\riscv64\inst.isle line 2281.
            return v16;
        }
        _ => {}
    }
    let v2 = C::fits_in_32(ctx, v1);
    if let Some(v3) = v2 {
        let v5 = C::ty_bits(ctx, v3);
        let v6 = C::u8_as_u64(ctx, v5);
        let v7 = C::u64_sub(ctx, 0x40_u64, v6);
        let v8 = C::imm_from_bits(ctx, v7);
        let v9 = constructor_put_in_xreg(ctx, arg0);
        let v10 = constructor_rv_slli(ctx, v9, v8);
        let v11 = constructor_rv_srai(ctx, v10, v8);
        // Rule at src\isa\riscv64\inst.isle line 2265.
        return v11;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "sext", "src\\isa\\riscv64\\inst.isle line 2262")
}

// Generated as internal constructor for term val_already_extended.
pub fn constructor_val_already_extended<C: Context>(
    ctx: &mut C,
    arg0: &ExtendOp,
    arg1: Value,
) -> Option<bool> {
    let v5 = C::def_inst(ctx, arg1);
    if let Some(v6) = v5 {
        let v7 = &C::inst_data_value(ctx, v6);
        match v7 {
            &InstructionData::Binary {
                opcode: ref v25,
                args: ref v26,
            } => {
                match v25 {
                    &Opcode::Iadd => {
                        if let &ExtendOp::Signed = arg0 {
                            let v22 = C::first_result(ctx, v6);
                            if let Some(v23) = v22 {
                                let v24 = C::value_type(ctx, v23);
                                if v24 == I32 {
                                    let v3 = true;
                                    let v4 = Some(v3);
                                    // Rule at src\isa\riscv64\inst.isle line 2315.
                                    return v4;
                                }
                            }
                        }
                    }
                    &Opcode::Isub => {
                        if let &ExtendOp::Signed = arg0 {
                            let v22 = C::first_result(ctx, v6);
                            if let Some(v23) = v22 {
                                let v24 = C::value_type(ctx, v23);
                                if v24 == I32 {
                                    let v3 = true;
                                    let v4 = Some(v3);
                                    // Rule at src\isa\riscv64\inst.isle line 2316.
                                    return v4;
                                }
                            }
                        }
                    }
                    &Opcode::Ishl => {
                        if let &ExtendOp::Signed = arg0 {
                            let v22 = C::first_result(ctx, v6);
                            if let Some(v23) = v22 {
                                let v24 = C::value_type(ctx, v23);
                                if v24 == I32 {
                                    let v3 = true;
                                    let v4 = Some(v3);
                                    // Rule at src\isa\riscv64\inst.isle line 2312.
                                    return v4;
                                }
                            }
                        }
                    }
                    &Opcode::Ushr => {
                        if let &ExtendOp::Signed = arg0 {
                            let v22 = C::first_result(ctx, v6);
                            if let Some(v23) = v22 {
                                let v24 = C::value_type(ctx, v23);
                                if v24 == I32 {
                                    let v3 = true;
                                    let v4 = Some(v3);
                                    // Rule at src\isa\riscv64\inst.isle line 2313.
                                    return v4;
                                }
                            }
                        }
                    }
                    &Opcode::Sshr => {
                        if let &ExtendOp::Signed = arg0 {
                            let v22 = C::first_result(ctx, v6);
                            if let Some(v23) = v22 {
                                let v24 = C::value_type(ctx, v23);
                                if v24 == I32 {
                                    let v3 = true;
                                    let v4 = Some(v3);
                                    // Rule at src\isa\riscv64\inst.isle line 2314.
                                    return v4;
                                }
                            }
                        }
                    }
                    _ => {}
                }
            }
            &InstructionData::FloatCompare {
                opcode: ref v16,
                args: ref v17,
                cond: ref v18,
            } => {
                if let &Opcode::Fcmp = v16 {
                    let v3 = true;
                    let v4 = Some(v3);
                    // Rule at src\isa\riscv64\inst.isle line 2305.
                    return v4;
                }
            }
            &InstructionData::IntCompare {
                opcode: ref v10,
                args: ref v11,
                cond: ref v12,
            } => {
                if let &Opcode::Icmp = v10 {
                    let v3 = true;
                    let v4 = Some(v3);
                    // Rule at src\isa\riscv64\inst.isle line 2304.
                    return v4;
                }
            }
            &InstructionData::Unary {
                opcode: ref v8,
                arg: v9,
            } => {
                match v8 {
                    &Opcode::Uextend => {
                        if let &ExtendOp::Zero = arg0 {
                            let v3 = true;
                            let v4 = Some(v3);
                            // Rule at src\isa\riscv64\inst.isle line 2299.
                            return v4;
                        }
                    }
                    &Opcode::Sextend => {
                        if let &ExtendOp::Signed = arg0 {
                            let v3 = true;
                            let v4 = Some(v3);
                            // Rule at src\isa\riscv64\inst.isle line 2300.
                            return v4;
                        }
                    }
                    _ => {}
                }
            }
            _ => {}
        }
    }
    let v2 = C::value_type(ctx, arg1);
    if v2 == I64 {
        let v3 = true;
        let v4 = Some(v3);
        // Rule at src\isa\riscv64\inst.isle line 2295.
        return v4;
    }
    None
}

// Generated as internal constructor for term lower_b128_binary.
pub fn constructor_lower_b128_binary<C: Context>(
    ctx: &mut C,
    arg0: &AluOPRRR,
    arg1: ValueRegs,
    arg2: ValueRegs,
) -> ValueRegs {
    let v4 = C::value_regs_get(ctx, arg1, 0x0_usize);
    let v5 = C::value_regs_get(ctx, arg2, 0x0_usize);
    let v6 = constructor_alu_rrr(ctx, arg0, v4, v5);
    let v7 = C::xreg_new(ctx, v6);
    let v9 = C::value_regs_get(ctx, arg1, 0x1_usize);
    let v10 = C::value_regs_get(ctx, arg2, 0x1_usize);
    let v11 = constructor_alu_rrr(ctx, arg0, v9, v10);
    let v12 = C::xreg_new(ctx, v11);
    let v13 = C::xreg_to_reg(ctx, v7);
    let v14 = C::xreg_to_reg(ctx, v12);
    let v15 = C::value_regs(ctx, v13, v14);
    // Rule at src\isa\riscv64\inst.isle line 2325.
    return v15;
}

// Generated as internal constructor for term lower_smlhi.
pub fn constructor_lower_smlhi<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: XReg,
    arg2: XReg,
) -> XReg {
    if arg0 == I64 {
        let v3 = constructor_rv_mulh(ctx, arg1, arg2);
        // Rule at src\isa\riscv64\inst.isle line 2334.
        return v3;
    }
    let v4 = constructor_rv_mul(ctx, arg1, arg2);
    let v5 = C::ty_bits(ctx, arg0);
    let v6 = C::u8_as_i32(ctx, v5);
    let v7 = C::imm12_const(ctx, v6);
    let v8 = constructor_rv_srli(ctx, v4, v7);
    // Rule at src\isa\riscv64\inst.isle line 2339.
    return v8;
}

// Generated as internal constructor for term gen_bseti.
pub fn constructor_gen_bseti<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: u64,
) -> Reg {
    let v2 = C::has_zbs(ctx);
    match v2 {
        false => {
            let v4 = C::u64_le(ctx, arg1, 0xc_u64);
            match v4 {
                false => {
                    let v7 = C::u64_shl(ctx, 0x1_u64, arg1);
                    let v8 = constructor_imm(ctx, I64, v7);
                    let v9 = C::xreg_new(ctx, v8);
                    let v10 = C::xreg_new(ctx, arg0);
                    let v11 = constructor_rv_or(ctx, v10, v9);
                    let v12 = C::xreg_to_reg(ctx, v11);
                    // Rule at src\isa\riscv64\inst.isle line 2352.
                    return v12;
                }
                true => {
                    let v13 = C::xreg_new(ctx, arg0);
                    let v7 = C::u64_shl(ctx, 0x1_u64, arg1);
                    let v14 = C::u64_as_i32(ctx, v7);
                    let v15 = C::imm12_const(ctx, v14);
                    let v16 = constructor_rv_ori(ctx, v13, v15);
                    let v17 = C::xreg_to_reg(ctx, v16);
                    // Rule at src\isa\riscv64\inst.isle line 2358.
                    return v17;
                }
                _ => {}
            }
        }
        true => {
            let v13 = C::xreg_new(ctx, arg0);
            let v18 = C::u64_as_i32(ctx, arg1);
            let v19 = C::imm12_const(ctx, v18);
            let v20 = constructor_rv_bseti(ctx, v13, v19);
            let v21 = C::xreg_to_reg(ctx, v20);
            // Rule at src\isa\riscv64\inst.isle line 2363.
            return v21;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "gen_bseti", "src\\isa\\riscv64\\inst.isle line 2351")
}

// Generated as internal constructor for term gen_popcnt.
pub fn constructor_gen_popcnt<C: Context>(
    ctx: &mut C,
    arg0: XReg,
) -> Reg {
    let v1 = constructor_temp_writable_xreg(ctx);
    let v2 = constructor_temp_writable_xreg(ctx);
    let v3 = constructor_temp_writable_xreg(ctx);
    let v4 = C::writable_xreg_to_writable_reg(ctx, v3);
    let v5 = C::writable_xreg_to_writable_reg(ctx, v2);
    let v6 = C::writable_xreg_to_writable_reg(ctx, v1);
    let v7 = C::xreg_to_reg(ctx, arg0);
    let v9 = MInst::Popcnt {
        sum: v4,
        step: v5,
        tmp: v6,
        rs: v7,
        ty: I64,
    };
    let v10 = C::emit(ctx, &v9);
    let v11 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\riscv64\inst.isle line 2369.
    return v11;
}

// Generated as internal constructor for term amode.
pub fn constructor_amode<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: i32,
) -> AMode {
    let v3 = C::def_inst(ctx, arg0);
    if let Some(v4) = v3 {
        let v5 = &C::inst_data_value(ctx, v4);
        if let &InstructionData::Binary {
            opcode: ref v6,
            args: ref v7,
        } = v5 {
            if let &Opcode::Iadd = v6 {
                let v8 = C::unpack_value_array_2(ctx, v7);
                let v16 = C::i32_from_iconst(ctx, v8.0);
                if let Some(v17) = v16 {
                    let v18 = C::s32_add_fallible(ctx, v17, arg1);
                    if let Some(v19) = v18 {
                        let v20 = constructor_amode_inner(ctx, v8.1, v19);
                        // Rule at src\isa\riscv64\inst.isle line 2411.
                        return v20;
                    }
                }
                let v11 = C::i32_from_iconst(ctx, v8.1);
                if let Some(v12) = v11 {
                    let v13 = C::s32_add_fallible(ctx, v12, arg1);
                    if let Some(v14) = v13 {
                        let v15 = constructor_amode_inner(ctx, v8.0, v14);
                        // Rule at src\isa\riscv64\inst.isle line 2408.
                        return v15;
                    }
                }
            }
        }
    }
    let v2 = constructor_amode_inner(ctx, arg0, arg1);
    // Rule at src\isa\riscv64\inst.isle line 2401.
    return v2;
}

// Generated as internal constructor for term amode_inner.
pub fn constructor_amode_inner<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: i32,
) -> AMode {
    let v8 = C::def_inst(ctx, arg0);
    if let Some(v9) = v8 {
        let v10 = &C::inst_data_value(ctx, v9);
        match v10 {
            &InstructionData::NullAry {
                opcode: ref v11,
            } => {
                match v11 {
                    &Opcode::GetFramePointer => {
                        let v6 = C::i32_as_i64(ctx, arg1);
                        let v12 = C::gen_fp_offset_amode(ctx, v6);
                        // Rule at src\isa\riscv64\inst.isle line 2424.
                        return v12;
                    }
                    &Opcode::GetStackPointer => {
                        let v6 = C::i32_as_i64(ctx, arg1);
                        let v13 = C::gen_sp_offset_amode(ctx, v6);
                        // Rule at src\isa\riscv64\inst.isle line 2428.
                        return v13;
                    }
                    _ => {}
                }
            }
            &InstructionData::StackLoad {
                opcode: ref v14,
                stack_slot: v15,
                offset: v16,
            } => {
                if let &Opcode::StackAddr = v14 {
                    let v17 = C::offset32_to_i32(ctx, v16);
                    let v18 = C::s32_add_fallible(ctx, v17, arg1);
                    if let Some(v19) = v18 {
                        let v20 = C::i32_as_i64(ctx, v19);
                        let v21 = C::gen_stack_slot_amode(ctx, v15, v20);
                        // Rule at src\isa\riscv64\inst.isle line 2432.
                        return v21;
                    }
                }
            }
            _ => {}
        }
    }
    let v1 = C::value_type(ctx, arg0);
    let v2 = C::ty_addr64(ctx, v1);
    if let Some(v3) = v2 {
        let v5 = C::put_in_reg(ctx, arg0);
        let v6 = C::i32_as_i64(ctx, arg1);
        let v7 = C::gen_reg_offset_amode(ctx, v5, v6);
        // Rule at src\isa\riscv64\inst.isle line 2420.
        return v7;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "amode_inner", "src\\isa\\riscv64\\inst.isle line 2417")
}

// Generated as internal constructor for term load_op_reg_type.
pub fn constructor_load_op_reg_type<C: Context>(
    ctx: &mut C,
    arg0: &LoadOP,
) -> Type {
    match arg0 {
        &LoadOP::Flh => {
            // Rule at src\isa\riscv64\inst.isle line 2459.
            return F64;
        }
        &LoadOP::Flw => {
            // Rule at src\isa\riscv64\inst.isle line 2458.
            return F64;
        }
        &LoadOP::Fld => {
            // Rule at src\isa\riscv64\inst.isle line 2457.
            return F64;
        }
        _ => {}
    }
    // Rule at src\isa\riscv64\inst.isle line 2460.
    return I64;
}

// Generated as internal constructor for term gen_load.
pub fn constructor_gen_load<C: Context>(
    ctx: &mut C,
    arg0: AMode,
    arg1: &LoadOP,
    arg2: MemFlags,
) -> Reg {
    if let &LoadOP::Flh = arg1 {
        let v8 = C::has_zfhmin(ctx);
        if v8 == false {
            let v10 = constructor_gen_load(ctx, arg0, &LoadOP::Lh, arg2);
            let v13 = constructor_gen_bitcast(ctx, v10, I16, F16);
            // Rule at src\isa\riscv64\inst.isle line 2468.
            return v13;
        }
    }
    let v3 = constructor_load_op_reg_type(ctx, arg1);
    let v4 = C::temp_writable_reg(ctx, v3);
    let v5 = MInst::Load {
        rd: v4,
        op: arg1.clone(),
        flags: arg2,
        from: arg0,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\riscv64\inst.isle line 2464.
    return v7;
}

// Generated as internal constructor for term gen_sunk_load.
pub fn constructor_gen_sunk_load<C: Context>(
    ctx: &mut C,
    arg0: Inst,
    arg1: AMode,
    arg2: &LoadOP,
    arg3: MemFlags,
) -> Reg {
    let v4 = C::sink_inst(ctx, arg0);
    let v5 = constructor_gen_load(ctx, arg1, arg2, arg3);
    // Rule at src\isa\riscv64\inst.isle line 2477.
    return v5;
}

// Generated as internal constructor for term gen_store.
pub fn constructor_gen_store<C: Context>(
    ctx: &mut C,
    arg0: AMode,
    arg1: MemFlags,
    arg2: Value,
) -> InstOutput {
    let v3 = C::value_type(ctx, arg2);
    if v3 == F16 {
        let v4 = C::has_zfhmin(ctx);
        if v4 == false {
            let v6 = C::put_in_reg(ctx, arg2);
            let v9 = constructor_gen_bitcast(ctx, v6, F16, I16);
            let v10 = constructor_rv_store(ctx, arg0, &StoreOP::Sh, arg1, v9);
            // Rule at src\isa\riscv64\inst.isle line 2488.
            return v10;
        }
    }
    let v11 = C::def_inst(ctx, arg2);
    if let Some(v12) = v11 {
        let v13 = &C::inst_data_value(ctx, v12);
        if let &InstructionData::UnaryImm {
            opcode: ref v14,
            imm: v15,
        } = v13 {
            if let &Opcode::Iconst = v14 {
                let v16 = C::u64_from_imm64(ctx, v15);
                if v16 == 0x0_u64 {
                    let v17 = &C::store_op(ctx, v3);
                    let v18 = C::zero_reg(ctx);
                    let v19 = C::xreg_to_reg(ctx, v18);
                    let v20 = constructor_rv_store(ctx, arg0, v17, arg1, v19);
                    // Rule at src\isa\riscv64\inst.isle line 2491.
                    return v20;
                }
            }
        }
    }
    let v17 = &C::store_op(ctx, v3);
    let v21 = C::put_in_reg(ctx, arg2);
    let v22 = constructor_rv_store(ctx, arg0, v17, arg1, v21);
    // Rule at src\isa\riscv64\inst.isle line 2494.
    return v22;
}

// Generated as internal constructor for term rv_store.
pub fn constructor_rv_store<C: Context>(
    ctx: &mut C,
    arg0: AMode,
    arg1: &StoreOP,
    arg2: MemFlags,
    arg3: Reg,
) -> InstOutput {
    let v4 = MInst::Store {
        to: arg0,
        op: arg1.clone(),
        flags: arg2,
        src: arg3,
    };
    let v5 = SideEffectNoResult::Inst {
        inst: v4,
    };
    let v6 = constructor_side_effect(ctx, &v5);
    // Rule at src\isa\riscv64\inst.isle line 2502.
    return v6;
}

// Generated as internal constructor for term gen_atomic.
pub fn constructor_gen_atomic<C: Context>(
    ctx: &mut C,
    arg0: &AtomicOP,
    arg1: Reg,
    arg2: Reg,
    arg3: AMO,
) -> Reg {
    let v4 = constructor_temp_writable_xreg(ctx);
    let v5 = C::writable_xreg_to_writable_reg(ctx, v4);
    let v6 = MInst::Atomic {
        op: arg0.clone(),
        rd: v5,
        addr: arg1,
        src: arg2,
        amo: arg3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = constructor_writable_xreg_to_reg(ctx, v4);
    // Rule at src\isa\riscv64\inst.isle line 2515.
    return v8;
}

// Generated as internal constructor for term get_atomic_rmw_op.
pub fn constructor_get_atomic_rmw_op<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &AtomicRmwOp,
) -> AtomicOP {
    match arg0 {
        I32 => {
            match arg1 {
                &AtomicRmwOp::Add => {
                    // Rule at src\isa\riscv64\inst.isle line 2524.
                    return AtomicOP::AmoaddW;
                }
                &AtomicRmwOp::And => {
                    // Rule at src\isa\riscv64\inst.isle line 2531.
                    return AtomicOP::AmoandW;
                }
                &AtomicRmwOp::Or => {
                    // Rule at src\isa\riscv64\inst.isle line 2539.
                    return AtomicOP::AmoorW;
                }
                &AtomicRmwOp::Smax => {
                    // Rule at src\isa\riscv64\inst.isle line 2547.
                    return AtomicOP::AmomaxW;
                }
                &AtomicRmwOp::Smin => {
                    // Rule at src\isa\riscv64\inst.isle line 2555.
                    return AtomicOP::AmominW;
                }
                &AtomicRmwOp::Umax => {
                    // Rule at src\isa\riscv64\inst.isle line 2563.
                    return AtomicOP::AmomaxuW;
                }
                &AtomicRmwOp::Umin => {
                    // Rule at src\isa\riscv64\inst.isle line 2572.
                    return AtomicOP::AmominuW;
                }
                &AtomicRmwOp::Xchg => {
                    // Rule at src\isa\riscv64\inst.isle line 2580.
                    return AtomicOP::AmoswapW;
                }
                &AtomicRmwOp::Xor => {
                    // Rule at src\isa\riscv64\inst.isle line 2588.
                    return AtomicOP::AmoxorW;
                }
                _ => {}
            }
        }
        I64 => {
            match arg1 {
                &AtomicRmwOp::Add => {
                    // Rule at src\isa\riscv64\inst.isle line 2527.
                    return AtomicOP::AmoaddD;
                }
                &AtomicRmwOp::And => {
                    // Rule at src\isa\riscv64\inst.isle line 2535.
                    return AtomicOP::AmoandD;
                }
                &AtomicRmwOp::Or => {
                    // Rule at src\isa\riscv64\inst.isle line 2543.
                    return AtomicOP::AmoorD;
                }
                &AtomicRmwOp::Smax => {
                    // Rule at src\isa\riscv64\inst.isle line 2551.
                    return AtomicOP::AmomaxD;
                }
                &AtomicRmwOp::Smin => {
                    // Rule at src\isa\riscv64\inst.isle line 2559.
                    return AtomicOP::AmominD;
                }
                &AtomicRmwOp::Umax => {
                    // Rule at src\isa\riscv64\inst.isle line 2568.
                    return AtomicOP::AmomaxuD;
                }
                &AtomicRmwOp::Umin => {
                    // Rule at src\isa\riscv64\inst.isle line 2576.
                    return AtomicOP::AmominuD;
                }
                &AtomicRmwOp::Xchg => {
                    // Rule at src\isa\riscv64\inst.isle line 2584.
                    return AtomicOP::AmoswapD;
                }
                &AtomicRmwOp::Xor => {
                    // Rule at src\isa\riscv64\inst.isle line 2592.
                    return AtomicOP::AmoxorD;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "get_atomic_rmw_op", "src\\isa\\riscv64\\inst.isle line 2522")
}

// Generated as internal constructor for term gen_atomic_load.
pub fn constructor_gen_atomic_load<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Type,
) -> Reg {
    let v2 = constructor_temp_writable_xreg(ctx);
    let v3 = C::writable_xreg_to_writable_reg(ctx, v2);
    let v4 = MInst::AtomicLoad {
        rd: v3,
        ty: arg1,
        p: arg0,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\riscv64\inst.isle line 2601.
    return v6;
}

// Generated as internal constructor for term gen_atomic_store.
pub fn constructor_gen_atomic_store<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Type,
    arg2: Reg,
) -> InstOutput {
    let v3 = MInst::AtomicStore {
        src: arg2,
        ty: arg1,
        p: arg0,
    };
    let v4 = SideEffectNoResult::Inst {
        inst: v3,
    };
    let v5 = constructor_side_effect(ctx, &v4);
    // Rule at src\isa\riscv64\inst.isle line 2610.
    return v5;
}

// Generated as internal constructor for term float_round_fcvt.
pub fn constructor_float_round_fcvt<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FRM,
    arg2: FReg,
) -> FReg {
    match arg0 {
        F32 => {
            let v3 = constructor_rv_fcvtws(ctx, arg1, arg2);
            let v4 = constructor_rv_fcvtsw(ctx, arg1, v3);
            // Rule at src\isa\riscv64\inst.isle line 2618.
            return v4;
        }
        F64 => {
            let v5 = constructor_rv_fcvtld(ctx, arg1, arg2);
            let v6 = constructor_rv_fcvtdl(ctx, arg1, v5);
            // Rule at src\isa\riscv64\inst.isle line 2619.
            return v6;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "float_round_fcvt", "src\\isa\\riscv64\\inst.isle line 2617")
}

// Generated as internal constructor for term gen_float_round.
pub fn constructor_gen_float_round<C: Context>(
    ctx: &mut C,
    arg0: &FRM,
    arg1: FReg,
    arg2: Type,
) -> FReg {
    let v19 = C::has_zfa(ctx);
    if v19 == true {
        let v20 = constructor_rv_fround(ctx, arg2, arg0, arg1);
        // Rule at src\isa\riscv64\inst.isle line 2645.
        return v20;
    }
    let v3 = constructor_float_int_max(ctx, arg2);
    let v4 = constructor_imm(ctx, arg2, v3);
    let v5 = C::freg_new(ctx, v4);
    let v6 = constructor_rv_fabs(ctx, arg2, arg1);
    let v7 = constructor_rv_flt(ctx, arg2, v6, v5);
    let v8 = constructor_float_round_fcvt(ctx, arg2, arg0, arg1);
    let v9 = constructor_rv_fsgnj(ctx, arg2, v8, arg1);
    let v10 = C::zero_reg(ctx);
    let v12 = constructor_float_int_of_same_size(ctx, arg2);
    let v11 = C::xreg_to_reg(ctx, v10);
    let v13 = constructor_gen_bitcast(ctx, v11, v12, arg2);
    let v14 = C::freg_new(ctx, v13);
    let v16 = constructor_rv_fadd(ctx, arg2, &FRM::RNE, arg1, v14);
    let v17 = constructor_cmp_eqz(ctx, v7);
    let v18 = constructor_gen_select_freg(ctx, v17, v16, v9);
    // Rule at src\isa\riscv64\inst.isle line 2622.
    return v18;
}

// Generated as internal constructor for term gen_select_xreg.
pub fn constructor_gen_select_xreg<C: Context>(
    ctx: &mut C,
    arg0: IntegerCompare,
    arg1: XReg,
    arg2: XReg,
) -> XReg {
    let v1 = C::int_compare_decompose(ctx, arg0);
    let v7 = &C::intcc_without_eq(ctx, &v1.0);
    match v7 {
        &IntCC::SignedGreaterThan => {
            let v8 = C::has_zbb(ctx);
            if v8 == true {
                if v1.1 == arg1 {
                    if v1.2 == arg2 {
                        let v12 = constructor_rv_max(ctx, v1.1, v1.2);
                        // Rule at src\isa\riscv64\inst.isle line 2671.
                        return v12;
                    }
                }
            }
        }
        &IntCC::SignedLessThan => {
            let v8 = C::has_zbb(ctx);
            if v8 == true {
                if v1.1 == arg1 {
                    if v1.2 == arg2 {
                        let v10 = constructor_rv_min(ctx, v1.1, v1.2);
                        // Rule at src\isa\riscv64\inst.isle line 2661.
                        return v10;
                    }
                }
            }
        }
        &IntCC::UnsignedGreaterThan => {
            let v8 = C::has_zbb(ctx);
            if v8 == true {
                if v1.1 == arg1 {
                    if v1.2 == arg2 {
                        let v11 = constructor_rv_maxu(ctx, v1.1, v1.2);
                        // Rule at src\isa\riscv64\inst.isle line 2666.
                        return v11;
                    }
                }
            }
        }
        &IntCC::UnsignedLessThan => {
            let v8 = C::has_zbb(ctx);
            if v8 == true {
                if v1.1 == arg1 {
                    if v1.2 == arg2 {
                        let v9 = constructor_rv_minu(ctx, v1.1, v1.2);
                        // Rule at src\isa\riscv64\inst.isle line 2656.
                        return v9;
                    }
                }
            }
        }
        _ => {}
    }
    let v17 = C::has_zicond(ctx);
    if v17 == true {
        let v13 = C::is_zero_reg(ctx, v1.1);
        if let Some(v14) = v13 {
            let v15 = C::is_non_zero_reg(ctx, v1.2);
            if let Some(v16) = v15 {
                let v18 = &C::intcc_swap_args(ctx, &v1.0);
                let v19 = C::int_compare(ctx, v18, v1.2, v1.1);
                let v20 = constructor_gen_select_xreg(ctx, v19, arg1, arg2);
                // Rule at src\isa\riscv64\inst.isle line 2682.
                return v20;
            }
        }
        let v21 = C::is_zero_reg(ctx, arg1);
        if let Some(v22) = v21 {
            let v23 = C::is_non_zero_reg(ctx, arg2);
            if let Some(v24) = v23 {
                let v25 = &C::intcc_complement(ctx, &v1.0);
                let v26 = C::int_compare(ctx, v25, v1.1, v1.2);
                let v27 = constructor_gen_select_xreg(ctx, v26, arg2, arg1);
                // Rule at src\isa\riscv64\inst.isle line 2686.
                return v27;
            }
        }
        match &v1.0 {
            &IntCC::Equal => {
                let v28 = C::is_zero_reg(ctx, v1.2);
                if let Some(v29) = v28 {
                    let v30 = C::is_zero_reg(ctx, arg2);
                    if let Some(v31) = v30 {
                        let v32 = constructor_rv_czero_nez(ctx, arg1, v1.1);
                        // Rule at src\isa\riscv64\inst.isle line 2690.
                        return v32;
                    }
                    let v32 = constructor_rv_czero_nez(ctx, arg1, v1.1);
                    let v34 = constructor_rv_czero_eqz(ctx, arg2, v1.1);
                    let v35 = constructor_rv_or(ctx, v32, v34);
                    // Rule at src\isa\riscv64\inst.isle line 2698.
                    return v35;
                }
            }
            &IntCC::NotEqual => {
                let v28 = C::is_zero_reg(ctx, v1.2);
                if let Some(v29) = v28 {
                    let v30 = C::is_zero_reg(ctx, arg2);
                    if let Some(v31) = v30 {
                        let v33 = constructor_rv_czero_eqz(ctx, arg1, v1.1);
                        // Rule at src\isa\riscv64\inst.isle line 2694.
                        return v33;
                    }
                    let v33 = constructor_rv_czero_eqz(ctx, arg1, v1.1);
                    let v36 = constructor_rv_czero_nez(ctx, arg2, v1.1);
                    let v37 = constructor_rv_or(ctx, v33, v36);
                    // Rule at src\isa\riscv64\inst.isle line 2704.
                    return v37;
                }
            }
            _ => {}
        }
        let v38 = constructor_lower_int_compare(ctx, arg0);
        let v39 = constructor_cmp_nez(ctx, v38);
        let v40 = constructor_gen_select_xreg(ctx, v39, arg1, arg2);
        // Rule at src\isa\riscv64\inst.isle line 2712.
        return v40;
    }
    let v41 = constructor_temp_writable_xreg(ctx);
    let v42 = C::writable_xreg_to_writable_reg(ctx, v41);
    let v43 = C::writable_value_reg(ctx, v42);
    let v44 = C::xreg_to_reg(ctx, arg1);
    let v45 = C::value_reg(ctx, v44);
    let v46 = C::xreg_to_reg(ctx, arg2);
    let v47 = C::value_reg(ctx, v46);
    let v48 = MInst::Select {
        dst: v43,
        condition: arg0,
        x: v45,
        y: v47,
    };
    let v49 = C::emit(ctx, &v48);
    let v50 = C::writable_reg_to_reg(ctx, v42);
    let v51 = C::xreg_new(ctx, v50);
    // Rule at src\isa\riscv64\inst.isle line 2718.
    return v51;
}

// Generated as internal constructor for term gen_select_vreg.
pub fn constructor_gen_select_vreg<C: Context>(
    ctx: &mut C,
    arg0: IntegerCompare,
    arg1: VReg,
    arg2: VReg,
) -> VReg {
    let v3 = constructor_temp_writable_vreg(ctx);
    let v4 = C::writable_vreg_to_writable_reg(ctx, v3);
    let v5 = C::writable_value_reg(ctx, v4);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = C::value_reg(ctx, v6);
    let v8 = C::vreg_to_reg(ctx, arg2);
    let v9 = C::value_reg(ctx, v8);
    let v10 = MInst::Select {
        dst: v5,
        condition: arg0,
        x: v7,
        y: v9,
    };
    let v11 = C::emit(ctx, &v10);
    let v12 = C::writable_reg_to_reg(ctx, v4);
    let v13 = C::vreg_new(ctx, v12);
    // Rule at src\isa\riscv64\inst.isle line 2726.
    return v13;
}

// Generated as internal constructor for term gen_select_freg.
pub fn constructor_gen_select_freg<C: Context>(
    ctx: &mut C,
    arg0: IntegerCompare,
    arg1: FReg,
    arg2: FReg,
) -> FReg {
    let v3 = constructor_temp_writable_freg(ctx);
    let v4 = C::writable_freg_to_writable_reg(ctx, v3);
    let v5 = C::writable_value_reg(ctx, v4);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = C::value_reg(ctx, v6);
    let v8 = C::freg_to_reg(ctx, arg2);
    let v9 = C::value_reg(ctx, v8);
    let v10 = MInst::Select {
        dst: v5,
        condition: arg0,
        x: v7,
        y: v9,
    };
    let v11 = C::emit(ctx, &v10);
    let v12 = C::writable_reg_to_reg(ctx, v4);
    let v13 = C::freg_new(ctx, v12);
    // Rule at src\isa\riscv64\inst.isle line 2732.
    return v13;
}

// Generated as internal constructor for term gen_select_regs.
pub fn constructor_gen_select_regs<C: Context>(
    ctx: &mut C,
    arg0: IntegerCompare,
    arg1: ValueRegs,
    arg2: ValueRegs,
) -> ValueRegs {
    let v3 = constructor_temp_writable_xreg(ctx);
    let v5 = constructor_temp_writable_xreg(ctx);
    let v4 = C::writable_xreg_to_writable_reg(ctx, v3);
    let v6 = C::writable_xreg_to_writable_reg(ctx, v5);
    let v7 = C::writable_value_regs(ctx, v4, v6);
    let v8 = MInst::Select {
        dst: v7,
        condition: arg0,
        x: arg1,
        y: arg2,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_reg_to_reg(ctx, v4);
    let v11 = C::writable_reg_to_reg(ctx, v6);
    let v12 = C::value_regs(ctx, v10, v11);
    // Rule at src\isa\riscv64\inst.isle line 2738.
    return v12;
}

// Generated as internal constructor for term udf.
pub fn constructor_udf<C: Context>(
    ctx: &mut C,
    arg0: &TrapCode,
) -> InstOutput {
    let v1 = MInst::Udf {
        trap_code: arg0.clone(),
    };
    let v2 = SideEffectNoResult::Inst {
        inst: v1,
    };
    let v3 = constructor_side_effect(ctx, &v2);
    // Rule at src\isa\riscv64\inst.isle line 2747.
    return v3;
}

// Generated as internal constructor for term elf_tls_get_addr.
pub fn constructor_elf_tls_get_addr<C: Context>(
    ctx: &mut C,
    arg0: ExternalName,
) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = C::box_external_name(ctx, arg0);
    let v4 = MInst::ElfTlsGetAddr {
        rd: v2,
        name: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src\isa\riscv64\inst.isle line 2762.
    return v6;
}

// Generated as internal constructor for term lower_float_binary.
pub fn constructor_lower_float_binary<C: Context>(
    ctx: &mut C,
    arg0: &AluOPRRR,
    arg1: FReg,
    arg2: FReg,
    arg3: Type,
) -> FReg {
    let v4 = constructor_move_f_to_x(ctx, arg1, arg3);
    let v5 = constructor_move_f_to_x(ctx, arg2, arg3);
    let v6 = C::xreg_to_reg(ctx, v4);
    let v7 = C::xreg_to_reg(ctx, v5);
    let v8 = constructor_alu_rrr(ctx, arg0, v6, v7);
    let v9 = C::xreg_new(ctx, v8);
    let v10 = constructor_move_x_to_f(ctx, v9, arg3);
    // Rule at src\isa\riscv64\inst.isle line 2773.
    return v10;
}

// Generated as internal constructor for term i128_sub.
pub fn constructor_i128_sub<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: ValueRegs,
) -> ValueRegs {
    let v3 = C::value_regs_get(ctx, arg0, 0x0_usize);
    let v4 = C::xreg_new(ctx, v3);
    let v5 = C::value_regs_get(ctx, arg1, 0x0_usize);
    let v6 = C::xreg_new(ctx, v5);
    let v7 = constructor_rv_sub(ctx, v4, v6);
    let v8 = C::value_regs_get(ctx, arg0, 0x0_usize);
    let v9 = C::xreg_new(ctx, v8);
    let v10 = constructor_rv_sltu(ctx, v9, v7);
    let v12 = C::value_regs_get(ctx, arg0, 0x1_usize);
    let v13 = C::xreg_new(ctx, v12);
    let v14 = C::value_regs_get(ctx, arg1, 0x1_usize);
    let v15 = C::xreg_new(ctx, v14);
    let v16 = constructor_rv_sub(ctx, v13, v15);
    let v17 = constructor_rv_sub(ctx, v16, v10);
    let v18 = C::xreg_to_reg(ctx, v7);
    let v19 = C::xreg_to_reg(ctx, v17);
    let v20 = C::value_regs(ctx, v18, v19);
    // Rule at src\isa\riscv64\inst.isle line 2782.
    return v20;
}

// Generated as internal constructor for term cond_br.
pub fn constructor_cond_br<C: Context>(
    ctx: &mut C,
    arg0: IntegerCompare,
    arg1: CondBrTarget,
    arg2: CondBrTarget,
) -> SideEffectNoResult {
    let v3 = MInst::CondBr {
        taken: arg1,
        not_taken: arg2,
        kind: arg0,
    };
    let v4 = SideEffectNoResult::Inst {
        inst: v3,
    };
    // Rule at src\isa\riscv64\inst.isle line 2796.
    return v4;
}

// Generated as internal constructor for term rv_j.
pub fn constructor_rv_j<C: Context>(
    ctx: &mut C,
    arg0: MachLabel,
) -> SideEffectNoResult {
    let v1 = MInst::Jal {
        label: arg0,
    };
    let v2 = SideEffectNoResult::Inst {
        inst: v1,
    };
    // Rule at src\isa\riscv64\inst.isle line 2802.
    return v2;
}

// Generated as internal constructor for term cmp_eqz.
pub fn constructor_cmp_eqz<C: Context>(
    ctx: &mut C,
    arg0: XReg,
) -> IntegerCompare {
    let v2 = C::zero_reg(ctx);
    let v3 = C::int_compare(ctx, &IntCC::Equal, arg0, v2);
    // Rule at src\isa\riscv64\inst.isle line 2818.
    return v3;
}

// Generated as internal constructor for term cmp_nez.
pub fn constructor_cmp_nez<C: Context>(
    ctx: &mut C,
    arg0: XReg,
) -> IntegerCompare {
    let v2 = C::zero_reg(ctx);
    let v3 = C::int_compare(ctx, &IntCC::NotEqual, arg0, v2);
    // Rule at src\isa\riscv64\inst.isle line 2821.
    return v3;
}

// Generated as internal constructor for term cmp_eq.
pub fn constructor_cmp_eq<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
) -> IntegerCompare {
    let v3 = C::int_compare(ctx, &IntCC::Equal, arg0, arg1);
    // Rule at src\isa\riscv64\inst.isle line 2824.
    return v3;
}

// Generated as internal constructor for term cmp_ne.
pub fn constructor_cmp_ne<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
) -> IntegerCompare {
    let v3 = C::int_compare(ctx, &IntCC::NotEqual, arg0, arg1);
    // Rule at src\isa\riscv64\inst.isle line 2827.
    return v3;
}

// Generated as internal constructor for term cmp_lt.
pub fn constructor_cmp_lt<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
) -> IntegerCompare {
    let v3 = C::int_compare(ctx, &IntCC::SignedLessThan, arg0, arg1);
    // Rule at src\isa\riscv64\inst.isle line 2830.
    return v3;
}

// Generated as internal constructor for term cmp_ltz.
pub fn constructor_cmp_ltz<C: Context>(
    ctx: &mut C,
    arg0: XReg,
) -> IntegerCompare {
    let v2 = C::zero_reg(ctx);
    let v3 = C::int_compare(ctx, &IntCC::SignedLessThan, arg0, v2);
    // Rule at src\isa\riscv64\inst.isle line 2833.
    return v3;
}

// Generated as internal constructor for term cmp_gt.
pub fn constructor_cmp_gt<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
) -> IntegerCompare {
    let v3 = C::int_compare(ctx, &IntCC::SignedGreaterThan, arg0, arg1);
    // Rule at src\isa\riscv64\inst.isle line 2836.
    return v3;
}

// Generated as internal constructor for term cmp_ge.
pub fn constructor_cmp_ge<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
) -> IntegerCompare {
    let v3 = C::int_compare(ctx, &IntCC::SignedGreaterThanOrEqual, arg0, arg1);
    // Rule at src\isa\riscv64\inst.isle line 2839.
    return v3;
}

// Generated as internal constructor for term cmp_le.
pub fn constructor_cmp_le<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
) -> IntegerCompare {
    let v3 = C::int_compare(ctx, &IntCC::SignedLessThanOrEqual, arg0, arg1);
    // Rule at src\isa\riscv64\inst.isle line 2842.
    return v3;
}

// Generated as internal constructor for term cmp_gtu.
pub fn constructor_cmp_gtu<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
) -> IntegerCompare {
    let v3 = C::int_compare(ctx, &IntCC::UnsignedGreaterThan, arg0, arg1);
    // Rule at src\isa\riscv64\inst.isle line 2845.
    return v3;
}

// Generated as internal constructor for term cmp_geu.
pub fn constructor_cmp_geu<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
) -> IntegerCompare {
    let v3 = C::int_compare(ctx, &IntCC::UnsignedGreaterThanOrEqual, arg0, arg1);
    // Rule at src\isa\riscv64\inst.isle line 2848.
    return v3;
}

// Generated as internal constructor for term cmp_ltu.
pub fn constructor_cmp_ltu<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
) -> IntegerCompare {
    let v3 = C::int_compare(ctx, &IntCC::UnsignedLessThan, arg0, arg1);
    // Rule at src\isa\riscv64\inst.isle line 2851.
    return v3;
}

// Generated as internal constructor for term cmp_leu.
pub fn constructor_cmp_leu<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
) -> IntegerCompare {
    let v3 = C::int_compare(ctx, &IntCC::UnsignedLessThanOrEqual, arg0, arg1);
    // Rule at src\isa\riscv64\inst.isle line 2854.
    return v3;
}

// Generated as internal constructor for term is_nonzero_cmp.
pub fn constructor_is_nonzero_cmp<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> IntegerCompare {
    let v18 = C::maybe_uextend(ctx, arg0);
    if let Some(v19) = v18 {
        let v20 = C::def_inst(ctx, v19);
        if let Some(v21) = v20 {
            let v22 = &C::inst_data_value(ctx, v21);
            match v22 {
                &InstructionData::FloatCompare {
                    opcode: ref v33,
                    args: ref v34,
                    cond: ref v35,
                } => {
                    if let &Opcode::Fcmp = v33 {
                        let v36 = C::unpack_value_array_2(ctx, v34);
                        let v40 = constructor_put_in_freg(ctx, v36.0);
                        let v41 = constructor_put_in_freg(ctx, v36.1);
                        let v39 = C::value_type(ctx, v36.0);
                        let v42 = &constructor_fcmp_to_float_compare(ctx, v35, v39, v40, v41);
                        let v43 = constructor_float_to_int_compare(ctx, v42);
                        // Rule at src\isa\riscv64\inst.isle line 2885.
                        return v43;
                    }
                }
                &InstructionData::IntCompare {
                    opcode: ref v23,
                    args: ref v24,
                    cond: ref v25,
                } => {
                    if let &Opcode::Icmp = v23 {
                        let v26 = C::unpack_value_array_2(ctx, v24);
                        let v29 = C::value_type(ctx, v26.1);
                        let v30 = C::fits_in_64(ctx, v29);
                        if let Some(v31) = v30 {
                            let v32 = constructor_icmp_to_int_compare(ctx, v25, v26.0, v26.1);
                            // Rule at src\isa\riscv64\inst.isle line 2883.
                            return v32;
                        }
                    }
                }
                _ => {}
            }
        }
    }
    let v1 = C::value_type(ctx, arg0);
    match v1 {
        I8 => {
            let v6 = constructor_zext(ctx, arg0);
            let v7 = constructor_cmp_nez(ctx, v6);
            // Rule at src\isa\riscv64\inst.isle line 2875.
            return v7;
        }
        I128 => {
            let v8 = C::put_in_regs(ctx, arg0);
            let v10 = C::value_regs_get(ctx, v8, 0x0_usize);
            let v11 = C::xreg_new(ctx, v10);
            let v12 = C::put_in_regs(ctx, arg0);
            let v14 = C::value_regs_get(ctx, v12, 0x1_usize);
            let v15 = C::xreg_new(ctx, v14);
            let v16 = constructor_rv_or(ctx, v11, v15);
            let v17 = constructor_cmp_nez(ctx, v16);
            // Rule at src\isa\riscv64\inst.isle line 2877.
            return v17;
        }
        _ => {}
    }
    let v2 = C::fits_in_64(ctx, v1);
    if let Some(v3) = v2 {
        let v4 = constructor_sext(ctx, arg0);
        let v5 = constructor_cmp_nez(ctx, v4);
        // Rule at src\isa\riscv64\inst.isle line 2873.
        return v5;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "is_nonzero_cmp", "src\\isa\\riscv64\\inst.isle line 2862")
}

// Generated as internal constructor for term icmp_to_int_compare.
pub fn constructor_icmp_to_int_compare<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Value,
    arg2: Value,
) -> IntegerCompare {
    let v3 = C::value_type(ctx, arg2);
    if v3 == I128 {
        let v9 = C::put_in_regs(ctx, arg1);
        let v10 = C::put_in_regs(ctx, arg2);
        let v11 = constructor_lower_icmp_i128(ctx, arg0, v9, v10);
        let v12 = constructor_cmp_nez(ctx, v11);
        // Rule at src\isa\riscv64\inst.isle line 2899.
        return v12;
    }
    let v4 = C::fits_in_64(ctx, v3);
    if let Some(v5) = v4 {
        let v6 = constructor_put_value_in_reg_for_icmp(ctx, arg0, arg1);
        let v7 = constructor_put_value_in_reg_for_icmp(ctx, arg0, arg2);
        let v8 = C::int_compare(ctx, arg0, v6, v7);
        // Rule at src\isa\riscv64\inst.isle line 2897.
        return v8;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "icmp_to_int_compare", "src\\isa\\riscv64\\inst.isle line 2896")
}

// Generated as internal constructor for term put_value_in_reg_for_icmp.
pub fn constructor_put_value_in_reg_for_icmp<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Value,
) -> XReg {
    let v9 = C::i64_from_iconst(ctx, arg1);
    if let Some(v10) = v9 {
        if v10 == 0_i64 {
            let v11 = C::zero_reg(ctx);
            // Rule at src\isa\riscv64\inst.isle line 2929.
            return v11;
        }
    }
    match arg0 {
        &IntCC::Equal => {
            let v6 = C::value_type(ctx, arg1);
            if v6 == I8 {
                let v2 = constructor_zext(ctx, arg1);
                // Rule at src\isa\riscv64\inst.isle line 2923.
                return v2;
            }
            let v7 = C::fits_in_64(ctx, v6);
            if let Some(v8) = v7 {
                let v5 = constructor_sext(ctx, arg1);
                // Rule at src\isa\riscv64\inst.isle line 2919.
                return v5;
            }
        }
        &IntCC::NotEqual => {
            let v6 = C::value_type(ctx, arg1);
            if v6 == I8 {
                let v2 = constructor_zext(ctx, arg1);
                // Rule at src\isa\riscv64\inst.isle line 2925.
                return v2;
            }
            let v7 = C::fits_in_64(ctx, v6);
            if let Some(v8) = v7 {
                let v5 = constructor_sext(ctx, arg1);
                // Rule at src\isa\riscv64\inst.isle line 2921.
                return v5;
            }
        }
        _ => {}
    }
    let v3 = &C::signed_cond_code(ctx, arg0);
    if let Some(v4) = v3 {
        let v5 = constructor_sext(ctx, arg1);
        // Rule at src\isa\riscv64\inst.isle line 2912.
        return v5;
    }
    let v2 = constructor_zext(ctx, arg1);
    // Rule at src\isa\riscv64\inst.isle line 2910.
    return v2;
}

// Generated as internal constructor for term lower_branch.
pub fn constructor_lower_branch<C: Context>(
    ctx: &mut C,
    arg0: Inst,
    arg1: &MachLabelSlice,
) -> Option<Unit> {
    let v1 = &C::inst_data_value(ctx, arg0);
    match v1 {
        &InstructionData::BranchTable {
            opcode: ref v26,
            arg: v27,
            table: v28,
        } => {
            if let &Opcode::BrTable = v26 {
                let v29 = C::put_in_reg(ctx, v27);
                let v30 = C::lower_br_table(ctx, v29, arg1);
                let v31 = Some(v30);
                // Rule at src\isa\riscv64\inst.isle line 2943.
                return v31;
            }
        }
        &InstructionData::Brif {
            opcode: ref v10,
            arg: v11,
            blocks: ref v12,
        } => {
            if let &Opcode::Brif = v10 {
                let v16 = C::two_targets(ctx, arg1);
                if let Some(v17) = v16 {
                    let v20 = constructor_is_nonzero_cmp(ctx, v11);
                    let v21 = C::label_to_br_target(ctx, v17.0);
                    let v22 = C::label_to_br_target(ctx, v17.1);
                    let v23 = &constructor_cond_br(ctx, v20, v21, v22);
                    let v24 = constructor_emit_side_effect(ctx, v23);
                    let v25 = Some(v24);
                    // Rule at src\isa\riscv64\inst.isle line 2937.
                    return v25;
                }
            }
        }
        &InstructionData::Jump {
            opcode: ref v2,
            destination: v3,
        } => {
            if let &Opcode::Jump = v2 {
                let v5 = C::single_target(ctx, arg1);
                if let Some(v6) = v5 {
                    let v7 = &constructor_rv_j(ctx, v6);
                    let v8 = constructor_emit_side_effect(ctx, v7);
                    let v9 = Some(v8);
                    // Rule at src\isa\riscv64\inst.isle line 2934.
                    return v9;
                }
            }
        }
        &InstructionData::TryCall {
            opcode: ref v32,
            args: v33,
            func_ref: v34,
            exception: v35,
        } => {
            if let &Opcode::TryCall = v32 {
                let v37 = C::func_ref_data(ctx, v34);
                let v36 = C::value_list_slice(ctx, v33);
                let v41 = C::gen_try_call(ctx, v37.0, v37.1, v37.2, v35, v36, arg1);
                let v42 = Some(v41);
                // Rule at src\isa\riscv64\inst.isle line 2946.
                return v42;
            }
        }
        &InstructionData::TryCallIndirect {
            opcode: ref v43,
            args: v44,
            exception: v45,
        } => {
            if let &Opcode::TryCallIndirect = v43 {
                let v46 = C::value_list_slice(ctx, v44);
                let v47 = C::value_slice_unwrap(ctx, v46);
                if let Some(v48) = v47 {
                    let v51 = C::exception_sig(ctx, v45);
                    let v52 = C::gen_try_call_indirect(ctx, v51, v48.0, v45, v48.1, arg1);
                    let v53 = Some(v52);
                    // Rule at src\isa\riscv64\inst.isle line 2949.
                    return v53;
                }
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term gen_bitcast.
pub fn constructor_gen_bitcast<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Type,
    arg2: Type,
) -> Reg {
    let v7 = C::has_zvfh(ctx);
    if v7 == false {
        let v2 = C::ty_supported_float_size(ctx, arg1);
        if let Some(v3) = v2 {
            if v3 == F16 {
                let v5 = C::ty_supported_vec(ctx, arg2);
                if let Some(v6) = v5 {
                    let v8 = C::freg_new(ctx, arg0);
                    let v10 = C::vstate_from_type(ctx, F32);
                    let v11 = constructor_rv_vfmv_sf(ctx, v8, v10);
                    let v12 = C::vreg_to_reg(ctx, v11);
                    // Rule at src\isa\riscv64\inst.isle line 2961.
                    return v12;
                }
            }
        }
        let v13 = C::ty_supported_vec(ctx, arg1);
        if let Some(v14) = v13 {
            let v15 = C::ty_supported_float_size(ctx, arg2);
            if let Some(v16) = v15 {
                if v16 == F16 {
                    let v18 = constructor_gen_bitcast(ctx, arg0, v14, I16);
                    let v20 = constructor_gen_bitcast(ctx, v18, I16, F16);
                    // Rule at src\isa\riscv64\inst.isle line 2962.
                    return v20;
                }
            }
        }
    }
    let v5 = C::ty_supported_vec(ctx, arg2);
    if let Some(v6) = v5 {
        let v21 = C::ty_supported_float_min(ctx, arg1);
        if let Some(v22) = v21 {
            let v8 = C::freg_new(ctx, arg0);
            let v23 = C::vstate_from_type(ctx, v22);
            let v24 = constructor_rv_vfmv_sf(ctx, v8, v23);
            let v25 = C::vreg_to_reg(ctx, v24);
            // Rule at src\isa\riscv64\inst.isle line 2963.
            return v25;
        }
    }
    let v13 = C::ty_supported_vec(ctx, arg1);
    if let Some(v14) = v13 {
        let v26 = C::ty_supported_float_min(ctx, arg2);
        if let Some(v27) = v26 {
            let v28 = C::vreg_new(ctx, arg0);
            let v29 = C::vstate_from_type(ctx, v27);
            let v30 = constructor_rv_vfmv_fs(ctx, v28, v29);
            let v31 = C::freg_to_reg(ctx, v30);
            // Rule at src\isa\riscv64\inst.isle line 2964.
            return v31;
        }
    }
    if let Some(v6) = v5 {
        let v32 = C::ty_int_ref_scalar_64_extract(ctx, arg1);
        if let Some(v33) = v32 {
            let v34 = C::xreg_new(ctx, arg0);
            let v35 = C::vstate_from_type(ctx, v33);
            let v36 = constructor_rv_vmv_sx(ctx, v34, v35);
            let v37 = C::vreg_to_reg(ctx, v36);
            // Rule at src\isa\riscv64\inst.isle line 2966.
            return v37;
        }
    }
    if let Some(v14) = v13 {
        let v38 = C::ty_int_ref_scalar_64_extract(ctx, arg2);
        if let Some(v39) = v38 {
            let v28 = C::vreg_new(ctx, arg0);
            let v40 = C::vstate_from_type(ctx, v39);
            let v41 = constructor_rv_vmv_xs(ctx, v28, v40);
            let v42 = C::xreg_to_reg(ctx, v41);
            // Rule at src\isa\riscv64\inst.isle line 2967.
            return v42;
        }
    }
    match arg2 {
        I16 => {
            let v21 = C::ty_supported_float_min(ctx, arg1);
            if let Some(v22) = v21 {
                if v22 == F16 {
                    let v8 = C::freg_new(ctx, arg0);
                    let v43 = constructor_rv_fmvxh(ctx, v8);
                    let v44 = C::xreg_to_reg(ctx, v43);
                    // Rule at src\isa\riscv64\inst.isle line 2968.
                    return v44;
                }
            }
            let v2 = C::ty_supported_float_size(ctx, arg1);
            if let Some(v3) = v2 {
                if v3 == F16 {
                    let v8 = C::freg_new(ctx, arg0);
                    let v45 = constructor_rv_fmvxw(ctx, v8);
                    let v46 = C::xreg_to_reg(ctx, v45);
                    // Rule at src\isa\riscv64\inst.isle line 2969.
                    return v46;
                }
            }
        }
        I32 => {
            let v2 = C::ty_supported_float_size(ctx, arg1);
            if let Some(v3) = v2 {
                if v3 == F32 {
                    let v8 = C::freg_new(ctx, arg0);
                    let v45 = constructor_rv_fmvxw(ctx, v8);
                    let v46 = C::xreg_to_reg(ctx, v45);
                    // Rule at src\isa\riscv64\inst.isle line 2970.
                    return v46;
                }
            }
        }
        I64 => {
            let v2 = C::ty_supported_float_size(ctx, arg1);
            if let Some(v3) = v2 {
                if v3 == F64 {
                    let v8 = C::freg_new(ctx, arg0);
                    let v47 = constructor_rv_fmvxd(ctx, v8);
                    let v48 = C::xreg_to_reg(ctx, v47);
                    // Rule at src\isa\riscv64\inst.isle line 2971.
                    return v48;
                }
            }
        }
        _ => {}
    }
    match arg1 {
        I16 => {
            let v26 = C::ty_supported_float_min(ctx, arg2);
            if let Some(v27) = v26 {
                if v27 == F16 {
                    let v34 = C::xreg_new(ctx, arg0);
                    let v49 = constructor_rv_fmvhx(ctx, v34);
                    let v50 = C::freg_to_reg(ctx, v49);
                    // Rule at src\isa\riscv64\inst.isle line 2972.
                    return v50;
                }
            }
            let v15 = C::ty_supported_float_size(ctx, arg2);
            if let Some(v16) = v15 {
                if v16 == F16 {
                    let v34 = C::xreg_new(ctx, arg0);
                    let v53 = constructor_imm(ctx, I32, 0xffff0000_u64);
                    let v54 = C::xreg_new(ctx, v53);
                    let v55 = constructor_rv_or(ctx, v34, v54);
                    let v56 = constructor_rv_fmvwx(ctx, v55);
                    let v57 = C::freg_to_reg(ctx, v56);
                    // Rule at src\isa\riscv64\inst.isle line 2977.
                    return v57;
                }
            }
        }
        I32 => {
            let v15 = C::ty_supported_float_size(ctx, arg2);
            if let Some(v16) = v15 {
                if v16 == F32 {
                    let v34 = C::xreg_new(ctx, arg0);
                    let v58 = constructor_rv_fmvwx(ctx, v34);
                    let v59 = C::freg_to_reg(ctx, v58);
                    // Rule at src\isa\riscv64\inst.isle line 2978.
                    return v59;
                }
            }
        }
        I64 => {
            let v15 = C::ty_supported_float_size(ctx, arg2);
            if let Some(v16) = v15 {
                if v16 == F64 {
                    let v34 = C::xreg_new(ctx, arg0);
                    let v60 = constructor_rv_fmvdx(ctx, v34);
                    let v61 = C::freg_to_reg(ctx, v60);
                    // Rule at src\isa\riscv64\inst.isle line 2979.
                    return v61;
                }
            }
        }
        _ => {}
    }
    let v2 = C::ty_supported_float_size(ctx, arg1);
    if let Some(v3) = v2 {
        let v15 = C::ty_supported_float_size(ctx, arg2);
        if let Some(v16) = v15 {
            // Rule at src\isa\riscv64\inst.isle line 2980.
            return arg0;
        }
    }
    let v32 = C::ty_int_ref_scalar_64_extract(ctx, arg1);
    if let Some(v33) = v32 {
        let v38 = C::ty_int_ref_scalar_64_extract(ctx, arg2);
        if let Some(v39) = v38 {
            // Rule at src\isa\riscv64\inst.isle line 2981.
            return arg0;
        }
    }
    if let Some(v6) = v5 {
        if let Some(v14) = v13 {
            // Rule at src\isa\riscv64\inst.isle line 2982.
            return arg0;
        }
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "gen_bitcast", "src\\isa\\riscv64\\inst.isle line 2959")
}

// Generated as internal constructor for term move_f_to_x.
pub fn constructor_move_f_to_x<C: Context>(
    ctx: &mut C,
    arg0: FReg,
    arg1: Type,
) -> XReg {
    let v3 = constructor_float_int_of_same_size(ctx, arg1);
    let v2 = C::freg_to_reg(ctx, arg0);
    let v4 = constructor_gen_bitcast(ctx, v2, arg1, v3);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src\isa\riscv64\inst.isle line 2985.
    return v5;
}

// Generated as internal constructor for term move_x_to_f.
pub fn constructor_move_x_to_f<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: Type,
) -> FReg {
    let v3 = constructor_float_int_of_same_size(ctx, arg1);
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_gen_bitcast(ctx, v2, v3, arg1);
    let v5 = C::freg_new(ctx, v4);
    // Rule at src\isa\riscv64\inst.isle line 2988.
    return v5;
}

// Generated as internal constructor for term float_int_of_same_size.
pub fn constructor_float_int_of_same_size<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> Type {
    match arg0 {
        F16 => {
            // Rule at src\isa\riscv64\inst.isle line 2991.
            return I16;
        }
        F32 => {
            // Rule at src\isa\riscv64\inst.isle line 2992.
            return I32;
        }
        F64 => {
            // Rule at src\isa\riscv64\inst.isle line 2993.
            return I64;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "float_int_of_same_size", "src\\isa\\riscv64\\inst.isle line 2990")
}

// Generated as internal constructor for term gen_brev8.
pub fn constructor_gen_brev8<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Type,
) -> Reg {
    let v2 = C::has_zbkb(ctx);
    match v2 {
        false => {
            let v6 = constructor_temp_writable_xreg(ctx);
            let v7 = constructor_temp_writable_xreg(ctx);
            let v8 = constructor_temp_writable_xreg(ctx);
            let v9 = constructor_temp_writable_xreg(ctx);
            let v10 = C::writable_xreg_to_writable_reg(ctx, v8);
            let v11 = C::writable_xreg_to_writable_reg(ctx, v6);
            let v12 = C::writable_xreg_to_writable_reg(ctx, v7);
            let v13 = C::writable_xreg_to_writable_reg(ctx, v9);
            let v14 = MInst::Brev8 {
                rs: arg0,
                ty: arg1,
                step: v10,
                tmp: v11,
                tmp2: v12,
                rd: v13,
            };
            let v15 = C::emit(ctx, &v14);
            let v16 = C::writable_reg_to_reg(ctx, v13);
            // Rule at src\isa\riscv64\inst.isle line 3002.
            return v16;
        }
        true => {
            let v3 = C::xreg_new(ctx, arg0);
            let v4 = constructor_rv_brev8(ctx, v3);
            let v5 = C::xreg_to_reg(ctx, v4);
            // Rule at src\isa\riscv64\inst.isle line 2997.
            return v5;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "gen_brev8", "src\\isa\\riscv64\\inst.isle line 2996")
}

// Generated as internal constructor for term neg.
pub fn constructor_neg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: ValueRegs,
) -> ValueRegs {
    if arg0 == I128 {
        let v12 = constructor_value_regs_zero(ctx);
        let v13 = constructor_i128_sub(ctx, v12, arg1);
        // Rule at src\isa\riscv64\inst.isle line 3019.
        return v13;
    }
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = C::ty_int(ctx, v2);
        if let Some(v4) = v3 {
            let v7 = C::value_regs_get(ctx, arg1, 0x0_usize);
            let v8 = C::xreg_new(ctx, v7);
            let v9 = constructor_rv_neg(ctx, v8);
            let v10 = C::xreg_to_reg(ctx, v9);
            let v11 = C::value_reg(ctx, v10);
            // Rule at src\isa\riscv64\inst.isle line 3015.
            return v11;
        }
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "neg", "src\\isa\\riscv64\\inst.isle line 3014")
}

// Generated as internal constructor for term gen_trapif.
pub fn constructor_gen_trapif<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: XReg,
    arg2: XReg,
    arg3: &TrapCode,
) -> InstOutput {
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = C::xreg_to_reg(ctx, arg2);
    let v6 = MInst::TrapIf {
        rs1: v4,
        rs2: v5,
        cc: arg0.clone(),
        trap_code: arg3.clone(),
    };
    let v7 = SideEffectNoResult::Inst {
        inst: v6,
    };
    let v8 = constructor_side_effect(ctx, &v7);
    // Rule at src\isa\riscv64\inst.isle line 3025.
    return v8;
}

// Generated as internal constructor for term gen_trapnz.
pub fn constructor_gen_trapnz<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: &TrapCode,
) -> InstOutput {
    let v3 = C::zero_reg(ctx);
    let v4 = constructor_gen_trapif(ctx, &IntCC::NotEqual, arg0, v3, arg1);
    // Rule at src\isa\riscv64\inst.isle line 3030.
    return v4;
}

// Generated as internal constructor for term gen_trapz.
pub fn constructor_gen_trapz<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: &TrapCode,
) -> InstOutput {
    let v3 = C::zero_reg(ctx);
    let v4 = constructor_gen_trapif(ctx, &IntCC::Equal, arg0, v3, arg1);
    // Rule at src\isa\riscv64\inst.isle line 3035.
    return v4;
}

// Generated as internal constructor for term zero_cond_to_cc.
pub fn constructor_zero_cond_to_cc<C: Context>(
    ctx: &mut C,
    arg0: &ZeroCond,
) -> IntCC {
    match arg0 {
        &ZeroCond::Zero => {
            // Rule at src\isa\riscv64\inst.isle line 3045.
            return IntCC::Equal;
        }
        &ZeroCond::NonZero => {
            // Rule at src\isa\riscv64\inst.isle line 3046.
            return IntCC::NotEqual;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "zero_cond_to_cc", "src\\isa\\riscv64\\inst.isle line 3044")
}

// Generated as internal constructor for term gen_trapif_val_i128.
pub fn constructor_gen_trapif_val_i128<C: Context>(
    ctx: &mut C,
    arg0: &ZeroCond,
    arg1: ValueRegs,
    arg2: &TrapCode,
) -> InstOutput {
    let v4 = C::value_regs_get(ctx, arg1, 0x0_usize);
    let v5 = C::xreg_new(ctx, v4);
    let v7 = C::value_regs_get(ctx, arg1, 0x1_usize);
    let v8 = C::xreg_new(ctx, v7);
    let v9 = constructor_rv_or(ctx, v8, v5);
    let v10 = &constructor_zero_cond_to_cc(ctx, arg0);
    let v11 = C::zero_reg(ctx);
    let v12 = constructor_gen_trapif(ctx, v10, v9, v11, arg2);
    // Rule at src\isa\riscv64\inst.isle line 3050.
    return v12;
}

// Generated as internal constructor for term madd.
pub fn constructor_madd<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
    arg2: XReg,
) -> XReg {
    let v3 = constructor_rv_mul(ctx, arg0, arg1);
    let v4 = constructor_rv_add(ctx, v3, arg2);
    // Rule at src\isa\riscv64\inst.isle line 3073.
    return v4;
}

// Generated as internal constructor for term gen_bmask.
pub fn constructor_gen_bmask<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> XReg {
    let v18 = C::maybe_uextend(ctx, arg0);
    if let Some(v19) = v18 {
        let v20 = C::def_inst(ctx, v19);
        if let Some(v21) = v20 {
            let v22 = &C::inst_data_value(ctx, v21);
            match v22 {
                &InstructionData::FloatCompare {
                    opcode: ref v31,
                    args: ref v32,
                    cond: ref v33,
                } => {
                    if let &Opcode::Fcmp = v31 {
                        let v29 = constructor_put_in_xreg(ctx, arg0);
                        let v30 = constructor_rv_neg(ctx, v29);
                        // Rule at src\isa\riscv64\inst.isle line 3097.
                        return v30;
                    }
                }
                &InstructionData::IntCompare {
                    opcode: ref v23,
                    args: ref v24,
                    cond: ref v25,
                } => {
                    if let &Opcode::Icmp = v23 {
                        let v29 = constructor_put_in_xreg(ctx, arg0);
                        let v30 = constructor_rv_neg(ctx, v29);
                        // Rule at src\isa\riscv64\inst.isle line 3096.
                        return v30;
                    }
                }
                _ => {}
            }
        }
    }
    let v1 = C::value_type(ctx, arg0);
    if v1 == I128 {
        let v7 = C::put_in_regs(ctx, arg0);
        let v9 = C::value_regs_get(ctx, v7, 0x0_usize);
        let v10 = C::xreg_new(ctx, v9);
        let v11 = C::put_in_regs(ctx, arg0);
        let v13 = C::value_regs_get(ctx, v11, 0x1_usize);
        let v14 = C::xreg_new(ctx, v13);
        let v15 = constructor_rv_or(ctx, v10, v14);
        let v16 = constructor_rv_snez(ctx, v15);
        let v17 = constructor_rv_neg(ctx, v16);
        // Rule at src\isa\riscv64\inst.isle line 3088.
        return v17;
    }
    let v2 = C::fits_in_64(ctx, v1);
    if let Some(v3) = v2 {
        let v4 = constructor_sext(ctx, arg0);
        let v5 = constructor_rv_snez(ctx, v4);
        let v6 = constructor_rv_neg(ctx, v5);
        // Rule at src\isa\riscv64\inst.isle line 3085.
        return v6;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "gen_bmask", "src\\isa\\riscv64\\inst.isle line 3081")
}

// Generated as internal constructor for term lower_bmask.
pub fn constructor_lower_bmask<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: Type,
) -> ValueRegs {
    if arg1 == I128 {
        let v4 = constructor_gen_bmask(ctx, arg0);
        let v5 = C::xreg_to_reg(ctx, v4);
        let v7 = C::value_regs(ctx, v5, v5);
        // Rule at src\isa\riscv64\inst.isle line 3102.
        return v7;
    }
    let v2 = C::fits_in_64(ctx, arg1);
    if let Some(v3) = v2 {
        let v4 = constructor_gen_bmask(ctx, arg0);
        let v5 = C::xreg_to_reg(ctx, v4);
        let v6 = C::value_reg(ctx, v5);
        // Rule at src\isa\riscv64\inst.isle line 3100.
        return v6;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "lower_bmask", "src\\isa\\riscv64\\inst.isle line 3099")
}

// Generated as internal constructor for term gen_mov_from_preg.
pub fn constructor_gen_mov_from_preg<C: Context>(
    ctx: &mut C,
    arg0: PReg,
) -> Reg {
    let v1 = constructor_temp_writable_xreg(ctx);
    let v2 = C::writable_xreg_to_writable_reg(ctx, v1);
    let v3 = MInst::MovFromPReg {
        rd: v2,
        rm: arg0,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = constructor_writable_xreg_to_reg(ctx, v1);
    // Rule at src\isa\riscv64\inst.isle line 3111.
    return v5;
}

// Generated as internal constructor for term value_regs_zero.
pub fn constructor_value_regs_zero<C: Context>(
    ctx: &mut C,
) -> ValueRegs {
    let v2 = constructor_imm(ctx, I64, 0x0_u64);
    let v3 = constructor_imm(ctx, I64, 0x0_u64);
    let v4 = C::value_regs(ctx, v2, v3);
    // Rule at src\isa\riscv64\inst.isle line 3132.
    return v4;
}

// Generated as internal constructor for term float_compare_invert.
pub fn constructor_float_compare_invert<C: Context>(
    ctx: &mut C,
    arg0: &FloatCompare,
) -> FloatCompare {
    match arg0 {
        &FloatCompare::One {
            r: v1,
        } => {
            let v2 = FloatCompare::Zero {
                r: v1,
            };
            // Rule at src\isa\riscv64\inst.isle line 3149.
            return v2;
        }
        &FloatCompare::Zero {
            r: v3,
        } => {
            let v4 = FloatCompare::One {
                r: v3,
            };
            // Rule at src\isa\riscv64\inst.isle line 3150.
            return v4;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "float_compare_invert", "src\\isa\\riscv64\\inst.isle line 3148")
}

// Generated as internal constructor for term float_to_int_compare.
pub fn constructor_float_to_int_compare<C: Context>(
    ctx: &mut C,
    arg0: &FloatCompare,
) -> IntegerCompare {
    match arg0 {
        &FloatCompare::One {
            r: v1,
        } => {
            let v2 = constructor_cmp_nez(ctx, v1);
            // Rule at src\isa\riscv64\inst.isle line 3153.
            return v2;
        }
        &FloatCompare::Zero {
            r: v3,
        } => {
            let v4 = constructor_cmp_eqz(ctx, v3);
            // Rule at src\isa\riscv64\inst.isle line 3154.
            return v4;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "float_to_int_compare", "src\\isa\\riscv64\\inst.isle line 3152")
}

// Generated as internal constructor for term fcmp_to_float_compare.
pub fn constructor_fcmp_to_float_compare<C: Context>(
    ctx: &mut C,
    arg0: &FloatCC,
    arg1: Type,
    arg2: FReg,
    arg3: FReg,
) -> FloatCompare {
    match arg0 {
        &FloatCC::Equal => {
            let v12 = constructor_rv_feq(ctx, arg1, arg2, arg3);
            let v13 = FloatCompare::One {
                r: v12,
            };
            // Rule at src\isa\riscv64\inst.isle line 3175.
            return v13;
        }
        &FloatCC::GreaterThan => {
            let v22 = constructor_rv_fgt(ctx, arg1, arg2, arg3);
            let v23 = FloatCompare::One {
                r: v22,
            };
            // Rule at src\isa\riscv64\inst.isle line 3196.
            return v23;
        }
        &FloatCC::GreaterThanOrEqual => {
            let v24 = constructor_rv_fge(ctx, arg1, arg2, arg3);
            let v25 = FloatCompare::One {
                r: v24,
            };
            // Rule at src\isa\riscv64\inst.isle line 3200.
            return v25;
        }
        &FloatCC::LessThan => {
            let v15 = constructor_rv_flt(ctx, arg1, arg2, arg3);
            let v19 = FloatCompare::One {
                r: v15,
            };
            // Rule at src\isa\riscv64\inst.isle line 3188.
            return v19;
        }
        &FloatCC::LessThanOrEqual => {
            let v20 = constructor_rv_fle(ctx, arg1, arg2, arg3);
            let v21 = FloatCompare::One {
                r: v20,
            };
            // Rule at src\isa\riscv64\inst.isle line 3192.
            return v21;
        }
        &FloatCC::NotEqual => {
            let v12 = constructor_rv_feq(ctx, arg1, arg2, arg3);
            let v14 = FloatCompare::Zero {
                r: v12,
            };
            // Rule at src\isa\riscv64\inst.isle line 3180.
            return v14;
        }
        &FloatCC::Ordered => {
            let v8 = constructor_is_not_nan(ctx, arg1, arg2);
            let v9 = constructor_is_not_nan(ctx, arg1, arg3);
            let v10 = constructor_rv_and(ctx, v8, v9);
            let v11 = FloatCompare::One {
                r: v10,
            };
            // Rule at src\isa\riscv64\inst.isle line 3168.
            return v11;
        }
        &FloatCC::OrderedNotEqual => {
            let v15 = constructor_rv_flt(ctx, arg1, arg2, arg3);
            let v16 = constructor_rv_fgt(ctx, arg1, arg2, arg3);
            let v17 = constructor_rv_or(ctx, v15, v16);
            let v18 = FloatCompare::One {
                r: v17,
            };
            // Rule at src\isa\riscv64\inst.isle line 3184.
            return v18;
        }
        _ => {}
    }
    let v4 = C::floatcc_unordered(ctx, arg0);
    if v4 == true {
        let v5 = &C::floatcc_complement(ctx, arg0);
        let v6 = &constructor_fcmp_to_float_compare(ctx, v5, arg1, arg2, arg3);
        let v7 = &constructor_float_compare_invert(ctx, v6);
        // Rule at src\isa\riscv64\inst.isle line 3163.
        return v7.clone();
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "fcmp_to_float_compare", "src\\isa\\riscv64\\inst.isle line 3158")
}

// Generated as internal constructor for term is_not_nan.
pub fn constructor_is_not_nan<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: FReg,
) -> XReg {
    let v2 = constructor_rv_feq(ctx, arg0, arg1, arg1);
    // Rule at src\isa\riscv64\inst.isle line 3172.
    return v2;
}

// Generated as internal constructor for term masked.
pub fn constructor_masked<C: Context>(
    ctx: &mut C,
    arg0: VReg,
) -> VecOpMasking {
    let v1 = C::vreg_to_reg(ctx, arg0);
    let v2 = VecOpMasking::Enabled {
        reg: v1,
    };
    // Rule at src\isa\riscv64\inst_vector.isle line 84.
    return v2;
}

// Generated as internal constructor for term unmasked.
pub fn constructor_unmasked<C: Context>(
    ctx: &mut C,
) -> VecOpMasking {
    // Rule at src\isa\riscv64\inst_vector.isle line 87.
    return VecOpMasking::Disabled;
}

// Generated as internal constructor for term element_width_from_type.
pub fn constructor_element_width_from_type<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> VecElementWidth {
    let v1 = C::lane_type(ctx, arg0);
    match v1 {
        I8 => {
            // Rule at src\isa\riscv64\inst_vector.isle line 330.
            return VecElementWidth::E8;
        }
        I16 => {
            // Rule at src\isa\riscv64\inst_vector.isle line 333.
            return VecElementWidth::E16;
        }
        I32 => {
            // Rule at src\isa\riscv64\inst_vector.isle line 336.
            return VecElementWidth::E32;
        }
        I64 => {
            // Rule at src\isa\riscv64\inst_vector.isle line 342.
            return VecElementWidth::E64;
        }
        F32 => {
            // Rule at src\isa\riscv64\inst_vector.isle line 339.
            return VecElementWidth::E32;
        }
        F64 => {
            // Rule at src\isa\riscv64\inst_vector.isle line 345.
            return VecElementWidth::E64;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "element_width_from_type", "src\\isa\\riscv64\\inst_vector.isle line 329")
}

// Generated as internal constructor for term vec_alu_rrrr.
pub fn constructor_vec_alu_rrrr<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRRRR,
    arg1: VReg,
    arg2: VReg,
    arg3: Reg,
    arg4: &VecOpMasking,
    arg5: VState,
) -> VReg {
    let v6 = constructor_temp_writable_vreg(ctx);
    let v7 = C::writable_vreg_to_writable_reg(ctx, v6);
    let v8 = C::vreg_to_reg(ctx, arg1);
    let v9 = C::vreg_to_reg(ctx, arg2);
    let v10 = MInst::VecAluRRRR {
        op: arg0.clone(),
        vd: v7,
        vd_src: v8,
        vs2: v9,
        vs1: arg3,
        mask: arg4.clone(),
        vstate: arg5,
    };
    let v11 = C::emit(ctx, &v10);
    let v12 = C::writable_vreg_to_vreg(ctx, v6);
    // Rule at src\isa\riscv64\inst_vector.isle line 368.
    return v12;
}

// Generated as internal constructor for term vec_alu_rrr_imm5.
pub fn constructor_vec_alu_rrr_imm5<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRRRImm5,
    arg1: VReg,
    arg2: VReg,
    arg3: Imm5,
    arg4: &VecOpMasking,
    arg5: VState,
) -> VReg {
    let v6 = constructor_temp_writable_vreg(ctx);
    let v7 = C::writable_vreg_to_writable_reg(ctx, v6);
    let v8 = C::vreg_to_reg(ctx, arg1);
    let v9 = C::vreg_to_reg(ctx, arg2);
    let v10 = MInst::VecAluRRRImm5 {
        op: arg0.clone(),
        vd: v7,
        vd_src: v8,
        vs2: v9,
        imm: arg3,
        mask: arg4.clone(),
        vstate: arg5,
    };
    let v11 = C::emit(ctx, &v10);
    let v12 = C::writable_vreg_to_vreg(ctx, v6);
    // Rule at src\isa\riscv64\inst_vector.isle line 376.
    return v12;
}

// Generated as internal constructor for term vec_alu_rrr_uimm5.
pub fn constructor_vec_alu_rrr_uimm5<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRRRImm5,
    arg1: VReg,
    arg2: VReg,
    arg3: UImm5,
    arg4: &VecOpMasking,
    arg5: VState,
) -> VReg {
    let v6 = C::uimm5_bitcast_to_imm5(ctx, arg3);
    let v7 = constructor_vec_alu_rrr_imm5(ctx, arg0, arg1, arg2, v6, arg4, arg5);
    // Rule at src\isa\riscv64\inst_vector.isle line 384.
    return v7;
}

// Generated as internal constructor for term vec_alu_rrr.
pub fn constructor_vec_alu_rrr<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRRR,
    arg1: Reg,
    arg2: Reg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> Reg {
    let v5 = constructor_temp_writable_vreg(ctx);
    let v6 = C::writable_vreg_to_writable_reg(ctx, v5);
    let v7 = MInst::VecAluRRR {
        op: arg0.clone(),
        vd: v6,
        vs2: arg1,
        vs1: arg2,
        mask: arg3.clone(),
        vstate: arg4,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = constructor_writable_vreg_to_reg(ctx, v5);
    // Rule at src\isa\riscv64\inst_vector.isle line 389.
    return v9;
}

// Generated as internal constructor for term vec_alu_rr_imm5.
pub fn constructor_vec_alu_rr_imm5<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRRImm5,
    arg1: Reg,
    arg2: Imm5,
    arg3: &VecOpMasking,
    arg4: VState,
) -> Reg {
    let v5 = constructor_temp_writable_vreg(ctx);
    let v6 = C::writable_vreg_to_writable_reg(ctx, v5);
    let v7 = MInst::VecAluRRImm5 {
        op: arg0.clone(),
        vd: v6,
        vs2: arg1,
        imm: arg2,
        mask: arg3.clone(),
        vstate: arg4,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = constructor_writable_vreg_to_reg(ctx, v5);
    // Rule at src\isa\riscv64\inst_vector.isle line 396.
    return v9;
}

// Generated as internal constructor for term vec_alu_rr_uimm5.
pub fn constructor_vec_alu_rr_uimm5<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRRImm5,
    arg1: Reg,
    arg2: UImm5,
    arg3: &VecOpMasking,
    arg4: VState,
) -> Reg {
    let v5 = C::uimm5_bitcast_to_imm5(ctx, arg2);
    let v6 = constructor_vec_alu_rr_imm5(ctx, arg0, arg1, v5, arg3, arg4);
    // Rule at src\isa\riscv64\inst_vector.isle line 404.
    return v6;
}

// Generated as internal constructor for term vec_alu_rr.
pub fn constructor_vec_alu_rr<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRR,
    arg1: Reg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> Reg {
    let v4 = C::vec_alu_rr_dst_type(ctx, arg0);
    let v5 = C::temp_writable_reg(ctx, v4);
    let v6 = MInst::VecAluRR {
        op: arg0.clone(),
        vd: v5,
        vs: arg1,
        mask: arg2.clone(),
        vstate: arg3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src\isa\riscv64\inst_vector.isle line 410.
    return v8;
}

// Generated as internal constructor for term vec_alu_r_imm5.
pub fn constructor_vec_alu_r_imm5<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRImm5,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> Reg {
    let v4 = constructor_temp_writable_vreg(ctx);
    let v5 = C::writable_vreg_to_writable_reg(ctx, v4);
    let v6 = MInst::VecAluRImm5 {
        op: arg0.clone(),
        vd: v5,
        imm: arg1,
        mask: arg2.clone(),
        vstate: arg3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = constructor_writable_vreg_to_reg(ctx, v4);
    // Rule at src\isa\riscv64\inst_vector.isle line 417.
    return v8;
}

// Generated as internal constructor for term vec_load.
pub fn constructor_vec_load<C: Context>(
    ctx: &mut C,
    arg0: &VecElementWidth,
    arg1: &VecAMode,
    arg2: MemFlags,
    arg3: &VecOpMasking,
    arg4: VState,
) -> Reg {
    let v5 = constructor_temp_writable_vreg(ctx);
    let v6 = C::writable_vreg_to_writable_reg(ctx, v5);
    let v7 = MInst::VecLoad {
        eew: arg0.clone(),
        to: v6,
        from: arg1.clone(),
        flags: arg2,
        mask: arg3.clone(),
        vstate: arg4,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = constructor_writable_vreg_to_reg(ctx, v5);
    // Rule at src\isa\riscv64\inst_vector.isle line 424.
    return v9;
}

// Generated as internal constructor for term vec_store.
pub fn constructor_vec_store<C: Context>(
    ctx: &mut C,
    arg0: &VecElementWidth,
    arg1: &VecAMode,
    arg2: VReg,
    arg3: MemFlags,
    arg4: &VecOpMasking,
    arg5: VState,
) -> InstOutput {
    let v6 = C::vreg_to_reg(ctx, arg2);
    let v7 = MInst::VecStore {
        eew: arg0.clone(),
        to: arg1.clone(),
        from: v6,
        flags: arg3,
        mask: arg4.clone(),
        vstate: arg5,
    };
    let v8 = SideEffectNoResult::Inst {
        inst: v7,
    };
    let v9 = constructor_side_effect(ctx, &v8);
    // Rule at src\isa\riscv64\inst_vector.isle line 431.
    return v9;
}

// Generated as internal constructor for term rv_vadd_vv.
pub fn constructor_rv_vadd_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VaddVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 437.
    return v8;
}

// Generated as internal constructor for term rv_vadd_vx.
pub fn constructor_rv_vadd_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VaddVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 442.
    return v8;
}

// Generated as internal constructor for term rv_vadd_vi.
pub fn constructor_rv_vadd_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VaddVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src\isa\riscv64\inst_vector.isle line 447.
    return v7;
}

// Generated as internal constructor for term rv_vsadd_vv.
pub fn constructor_rv_vsadd_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsaddVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 452.
    return v8;
}

// Generated as internal constructor for term rv_vsadd_vx.
pub fn constructor_rv_vsadd_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsaddVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 457.
    return v8;
}

// Generated as internal constructor for term rv_vsadd_vi.
pub fn constructor_rv_vsadd_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VsaddVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src\isa\riscv64\inst_vector.isle line 462.
    return v7;
}

// Generated as internal constructor for term rv_vsaddu_vv.
pub fn constructor_rv_vsaddu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsadduVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 467.
    return v8;
}

// Generated as internal constructor for term rv_vsaddu_vx.
pub fn constructor_rv_vsaddu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsadduVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 472.
    return v8;
}

// Generated as internal constructor for term rv_vsaddu_vi.
pub fn constructor_rv_vsaddu_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VsadduVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src\isa\riscv64\inst_vector.isle line 477.
    return v7;
}

// Generated as internal constructor for term rv_vwadd_vv.
pub fn constructor_rv_vwadd_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwaddVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 484.
    return v8;
}

// Generated as internal constructor for term rv_vwadd_vx.
pub fn constructor_rv_vwadd_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwaddVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 491.
    return v8;
}

// Generated as internal constructor for term rv_vwadd_wv.
pub fn constructor_rv_vwadd_wv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwaddWV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 498.
    return v8;
}

// Generated as internal constructor for term rv_vwadd_wx.
pub fn constructor_rv_vwadd_wx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwaddWX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 505.
    return v8;
}

// Generated as internal constructor for term rv_vwaddu_vv.
pub fn constructor_rv_vwaddu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwadduVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 512.
    return v8;
}

// Generated as internal constructor for term rv_vwaddu_vx.
pub fn constructor_rv_vwaddu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwadduVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 519.
    return v8;
}

// Generated as internal constructor for term rv_vwaddu_wv.
pub fn constructor_rv_vwaddu_wv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwadduWV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 526.
    return v8;
}

// Generated as internal constructor for term rv_vwaddu_wx.
pub fn constructor_rv_vwaddu_wx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwadduWX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 533.
    return v8;
}

// Generated as internal constructor for term rv_vsub_vv.
pub fn constructor_rv_vsub_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsubVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 538.
    return v8;
}

// Generated as internal constructor for term rv_vsub_vx.
pub fn constructor_rv_vsub_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsubVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 543.
    return v8;
}

// Generated as internal constructor for term rv_vrsub_vx.
pub fn constructor_rv_vrsub_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VrsubVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 548.
    return v8;
}

// Generated as internal constructor for term rv_vwsub_vv.
pub fn constructor_rv_vwsub_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwsubVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 555.
    return v8;
}

// Generated as internal constructor for term rv_vwsub_vx.
pub fn constructor_rv_vwsub_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwsubVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 562.
    return v8;
}

// Generated as internal constructor for term rv_vwsub_wv.
pub fn constructor_rv_vwsub_wv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwsubWV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 569.
    return v8;
}

// Generated as internal constructor for term rv_vwsub_wx.
pub fn constructor_rv_vwsub_wx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwsubWX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 576.
    return v8;
}

// Generated as internal constructor for term rv_vwsubu_vv.
pub fn constructor_rv_vwsubu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwsubuVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 583.
    return v8;
}

// Generated as internal constructor for term rv_vwsubu_vx.
pub fn constructor_rv_vwsubu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwsubuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 590.
    return v8;
}

// Generated as internal constructor for term rv_vwsubu_wv.
pub fn constructor_rv_vwsubu_wv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwsubuWV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 597.
    return v8;
}

// Generated as internal constructor for term rv_vwsubu_wx.
pub fn constructor_rv_vwsubu_wx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwsubuWX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 604.
    return v8;
}

// Generated as internal constructor for term rv_vssub_vv.
pub fn constructor_rv_vssub_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VssubVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 609.
    return v8;
}

// Generated as internal constructor for term rv_vssub_vx.
pub fn constructor_rv_vssub_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VssubVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 614.
    return v8;
}

// Generated as internal constructor for term rv_vssubu_vv.
pub fn constructor_rv_vssubu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VssubuVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 619.
    return v8;
}

// Generated as internal constructor for term rv_vssubu_vx.
pub fn constructor_rv_vssubu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VssubuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 624.
    return v8;
}

// Generated as internal constructor for term rv_vneg_v.
pub fn constructor_rv_vneg_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v5 = C::zero_reg(ctx);
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, v5);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VrsubVX, v4, v6, arg1, arg2);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 629.
    return v8;
}

// Generated as internal constructor for term rv_vrsub_vi.
pub fn constructor_rv_vrsub_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VrsubVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src\isa\riscv64\inst_vector.isle line 634.
    return v7;
}

// Generated as internal constructor for term rv_vmul_vv.
pub fn constructor_rv_vmul_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmulVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 639.
    return v8;
}

// Generated as internal constructor for term rv_vmul_vx.
pub fn constructor_rv_vmul_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmulVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 644.
    return v8;
}

// Generated as internal constructor for term rv_vmulh_vv.
pub fn constructor_rv_vmulh_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmulhVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 649.
    return v8;
}

// Generated as internal constructor for term rv_vmulh_vx.
pub fn constructor_rv_vmulh_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmulhVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 654.
    return v8;
}

// Generated as internal constructor for term rv_vmulhu_vv.
pub fn constructor_rv_vmulhu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmulhuVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 659.
    return v8;
}

// Generated as internal constructor for term rv_vmulhu_vx.
pub fn constructor_rv_vmulhu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmulhuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 664.
    return v8;
}

// Generated as internal constructor for term rv_vsmul_vv.
pub fn constructor_rv_vsmul_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsmulVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 672.
    return v8;
}

// Generated as internal constructor for term rv_vsmul_vx.
pub fn constructor_rv_vsmul_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsmulVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 680.
    return v8;
}

// Generated as internal constructor for term rv_vmacc_vv.
pub fn constructor_rv_vmacc_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::vreg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VmaccVV, arg0, arg1, v6, arg3, arg4);
    // Rule at src\isa\riscv64\inst_vector.isle line 688.
    return v7;
}

// Generated as internal constructor for term rv_vmacc_vx.
pub fn constructor_rv_vmacc_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: XReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::xreg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VmaccVX, arg0, arg1, v6, arg3, arg4);
    // Rule at src\isa\riscv64\inst_vector.isle line 696.
    return v7;
}

// Generated as internal constructor for term rv_vnmsac_vv.
pub fn constructor_rv_vnmsac_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::vreg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VnmsacVV, arg0, arg1, v6, arg3, arg4);
    // Rule at src\isa\riscv64\inst_vector.isle line 704.
    return v7;
}

// Generated as internal constructor for term rv_vnmsac_vx.
pub fn constructor_rv_vnmsac_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: XReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::xreg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VnmsacVX, arg0, arg1, v6, arg3, arg4);
    // Rule at src\isa\riscv64\inst_vector.isle line 712.
    return v7;
}

// Generated as internal constructor for term rv_vsll_vv.
pub fn constructor_rv_vsll_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsllVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 717.
    return v8;
}

// Generated as internal constructor for term rv_vsll_vx.
pub fn constructor_rv_vsll_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsllVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 722.
    return v8;
}

// Generated as internal constructor for term rv_vsll_vi.
pub fn constructor_rv_vsll_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VsllVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src\isa\riscv64\inst_vector.isle line 727.
    return v7;
}

// Generated as internal constructor for term rv_vsrl_vv.
pub fn constructor_rv_vsrl_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsrlVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 732.
    return v8;
}

// Generated as internal constructor for term rv_vsrl_vx.
pub fn constructor_rv_vsrl_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsrlVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 737.
    return v8;
}

// Generated as internal constructor for term rv_vsrl_vi.
pub fn constructor_rv_vsrl_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VsrlVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src\isa\riscv64\inst_vector.isle line 742.
    return v7;
}

// Generated as internal constructor for term rv_vsra_vv.
pub fn constructor_rv_vsra_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsraVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 747.
    return v8;
}

// Generated as internal constructor for term rv_vsra_vx.
pub fn constructor_rv_vsra_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsraVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 752.
    return v8;
}

// Generated as internal constructor for term rv_vsra_vi.
pub fn constructor_rv_vsra_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VsraVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src\isa\riscv64\inst_vector.isle line 757.
    return v7;
}

// Generated as internal constructor for term rv_vand_vv.
pub fn constructor_rv_vand_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VandVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 762.
    return v8;
}

// Generated as internal constructor for term rv_vand_vx.
pub fn constructor_rv_vand_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VandVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 767.
    return v8;
}

// Generated as internal constructor for term rv_vand_vi.
pub fn constructor_rv_vand_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VandVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src\isa\riscv64\inst_vector.isle line 772.
    return v7;
}

// Generated as internal constructor for term rv_vor_vv.
pub fn constructor_rv_vor_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VorVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 777.
    return v8;
}

// Generated as internal constructor for term rv_vor_vx.
pub fn constructor_rv_vor_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VorVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 782.
    return v8;
}

// Generated as internal constructor for term rv_vor_vi.
pub fn constructor_rv_vor_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VorVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src\isa\riscv64\inst_vector.isle line 787.
    return v7;
}

// Generated as internal constructor for term rv_vxor_vv.
pub fn constructor_rv_vxor_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VxorVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 792.
    return v8;
}

// Generated as internal constructor for term rv_vxor_vx.
pub fn constructor_rv_vxor_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VxorVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 797.
    return v8;
}

// Generated as internal constructor for term rv_vxor_vi.
pub fn constructor_rv_vxor_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VxorVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src\isa\riscv64\inst_vector.isle line 802.
    return v7;
}

// Generated as internal constructor for term rv_vssrl_vi.
pub fn constructor_rv_vssrl_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VssrlVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src\isa\riscv64\inst_vector.isle line 811.
    return v7;
}

// Generated as internal constructor for term rv_vnot_v.
pub fn constructor_rv_vnot_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::i8_to_imm5(ctx, -1_i8);
    if let Some(v5) = v4 {
        let v6 = constructor_rv_vxor_vi(ctx, arg0, v5, arg1, arg2);
        // Rule at src\isa\riscv64\inst_vector.isle line 817.
        return v6;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "rv_vnot_v", "src\\isa\\riscv64\\inst_vector.isle line 816")
}

// Generated as internal constructor for term rv_vmax_vv.
pub fn constructor_rv_vmax_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmaxVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 823.
    return v8;
}

// Generated as internal constructor for term rv_vmax_vx.
pub fn constructor_rv_vmax_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmaxVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 828.
    return v8;
}

// Generated as internal constructor for term rv_vmin_vv.
pub fn constructor_rv_vmin_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VminVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 833.
    return v8;
}

// Generated as internal constructor for term rv_vmin_vx.
pub fn constructor_rv_vmin_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VminVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 838.
    return v8;
}

// Generated as internal constructor for term rv_vmaxu_vv.
pub fn constructor_rv_vmaxu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmaxuVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 843.
    return v8;
}

// Generated as internal constructor for term rv_vmaxu_vx.
pub fn constructor_rv_vmaxu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmaxuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 848.
    return v8;
}

// Generated as internal constructor for term rv_vminu_vv.
pub fn constructor_rv_vminu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VminuVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 853.
    return v8;
}

// Generated as internal constructor for term rv_vminu_vx.
pub fn constructor_rv_vminu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VminuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 858.
    return v8;
}

// Generated as internal constructor for term rv_vfadd_vv.
pub fn constructor_rv_vfadd_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfaddVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 863.
    return v8;
}

// Generated as internal constructor for term rv_vfadd_vf.
pub fn constructor_rv_vfadd_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfaddVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 868.
    return v8;
}

// Generated as internal constructor for term rv_vfsub_vv.
pub fn constructor_rv_vfsub_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfsubVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 873.
    return v8;
}

// Generated as internal constructor for term rv_vfsub_vf.
pub fn constructor_rv_vfsub_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfsubVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 878.
    return v8;
}

// Generated as internal constructor for term rv_vfrsub_vf.
pub fn constructor_rv_vfrsub_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfrsubVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 883.
    return v8;
}

// Generated as internal constructor for term rv_vfmul_vv.
pub fn constructor_rv_vfmul_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfmulVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 888.
    return v8;
}

// Generated as internal constructor for term rv_vfmul_vf.
pub fn constructor_rv_vfmul_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfmulVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 893.
    return v8;
}

// Generated as internal constructor for term rv_vfmacc_vv.
pub fn constructor_rv_vfmacc_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::vreg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VfmaccVV, arg0, arg1, v6, arg3, arg4);
    // Rule at src\isa\riscv64\inst_vector.isle line 901.
    return v7;
}

// Generated as internal constructor for term rv_vfmacc_vf.
pub fn constructor_rv_vfmacc_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: FReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::freg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VfmaccVF, arg0, arg1, v6, arg3, arg4);
    // Rule at src\isa\riscv64\inst_vector.isle line 909.
    return v7;
}

// Generated as internal constructor for term rv_vfnmacc_vv.
pub fn constructor_rv_vfnmacc_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::vreg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VfnmaccVV, arg0, arg1, v6, arg3, arg4);
    // Rule at src\isa\riscv64\inst_vector.isle line 917.
    return v7;
}

// Generated as internal constructor for term rv_vfnmacc_vf.
pub fn constructor_rv_vfnmacc_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: FReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::freg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VfnmaccVF, arg0, arg1, v6, arg3, arg4);
    // Rule at src\isa\riscv64\inst_vector.isle line 925.
    return v7;
}

// Generated as internal constructor for term rv_vfmsac_vv.
pub fn constructor_rv_vfmsac_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::vreg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VfmsacVV, arg0, arg1, v6, arg3, arg4);
    // Rule at src\isa\riscv64\inst_vector.isle line 933.
    return v7;
}

// Generated as internal constructor for term rv_vfmsac_vf.
pub fn constructor_rv_vfmsac_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: FReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::freg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VfmsacVF, arg0, arg1, v6, arg3, arg4);
    // Rule at src\isa\riscv64\inst_vector.isle line 941.
    return v7;
}

// Generated as internal constructor for term rv_vfnmsac_vv.
pub fn constructor_rv_vfnmsac_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::vreg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VfnmsacVV, arg0, arg1, v6, arg3, arg4);
    // Rule at src\isa\riscv64\inst_vector.isle line 949.
    return v7;
}

// Generated as internal constructor for term rv_vfnmsac_vf.
pub fn constructor_rv_vfnmsac_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: FReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::freg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VfnmsacVF, arg0, arg1, v6, arg3, arg4);
    // Rule at src\isa\riscv64\inst_vector.isle line 957.
    return v7;
}

// Generated as internal constructor for term rv_vfdiv_vv.
pub fn constructor_rv_vfdiv_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfdivVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 962.
    return v8;
}

// Generated as internal constructor for term rv_vfdiv_vf.
pub fn constructor_rv_vfdiv_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfdivVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 967.
    return v8;
}

// Generated as internal constructor for term rv_vfrdiv_vf.
pub fn constructor_rv_vfrdiv_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfrdivVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 972.
    return v8;
}

// Generated as internal constructor for term rv_vfmin_vv.
pub fn constructor_rv_vfmin_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfminVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 977.
    return v8;
}

// Generated as internal constructor for term rv_vfmax_vv.
pub fn constructor_rv_vfmax_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfmaxVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 982.
    return v8;
}

// Generated as internal constructor for term rv_vfsgnj_vv.
pub fn constructor_rv_vfsgnj_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfsgnjVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 988.
    return v8;
}

// Generated as internal constructor for term rv_vfsgnj_vf.
pub fn constructor_rv_vfsgnj_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfsgnjVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 993.
    return v8;
}

// Generated as internal constructor for term rv_vfsgnjn_vv.
pub fn constructor_rv_vfsgnjn_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfsgnjnVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 999.
    return v8;
}

// Generated as internal constructor for term rv_vfneg_v.
pub fn constructor_rv_vfneg_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v3 = constructor_rv_vfsgnjn_vv(ctx, arg0, arg0, arg1, arg2);
    // Rule at src\isa\riscv64\inst_vector.isle line 1005.
    return v3;
}

// Generated as internal constructor for term rv_vfsgnjx_vv.
pub fn constructor_rv_vfsgnjx_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfsgnjxVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1011.
    return v8;
}

// Generated as internal constructor for term rv_vfabs_v.
pub fn constructor_rv_vfabs_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v3 = constructor_rv_vfsgnjx_vv(ctx, arg0, arg0, arg1, arg2);
    // Rule at src\isa\riscv64\inst_vector.isle line 1017.
    return v3;
}

// Generated as internal constructor for term rv_vfsqrt_v.
pub fn constructor_rv_vfsqrt_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfsqrtV, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst_vector.isle line 1022.
    return v6;
}

// Generated as internal constructor for term rv_vfcvt_xu_f_v.
pub fn constructor_rv_vfcvt_xu_f_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfcvtxufV, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst_vector.isle line 1028.
    return v6;
}

// Generated as internal constructor for term rv_vfcvt_x_f_v.
pub fn constructor_rv_vfcvt_x_f_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfcvtxfV, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst_vector.isle line 1034.
    return v6;
}

// Generated as internal constructor for term rv_vfcvt_rtz_xu_f_v.
pub fn constructor_rv_vfcvt_rtz_xu_f_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfcvtrtzxufV, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst_vector.isle line 1042.
    return v6;
}

// Generated as internal constructor for term rv_vfcvt_rtz_x_f_v.
pub fn constructor_rv_vfcvt_rtz_x_f_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfcvtrtzxfV, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst_vector.isle line 1050.
    return v6;
}

// Generated as internal constructor for term rv_vfcvt_f_xu_v.
pub fn constructor_rv_vfcvt_f_xu_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfcvtfxuV, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst_vector.isle line 1056.
    return v6;
}

// Generated as internal constructor for term rv_vfcvt_f_x_v.
pub fn constructor_rv_vfcvt_f_x_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfcvtfxV, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst_vector.isle line 1062.
    return v6;
}

// Generated as internal constructor for term rv_vfwcvt_f_f_v.
pub fn constructor_rv_vfwcvt_f_f_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfwcvtffV, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst_vector.isle line 1068.
    return v6;
}

// Generated as internal constructor for term rv_vfncvt_f_f_w.
pub fn constructor_rv_vfncvt_f_f_w<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfncvtffW, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst_vector.isle line 1074.
    return v6;
}

// Generated as internal constructor for term rv_vslidedown_vx.
pub fn constructor_rv_vslidedown_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VslidedownVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1081.
    return v8;
}

// Generated as internal constructor for term rv_vslidedown_vi.
pub fn constructor_rv_vslidedown_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VslidedownVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src\isa\riscv64\inst_vector.isle line 1087.
    return v7;
}

// Generated as internal constructor for term rv_vslideup_vvi.
pub fn constructor_rv_vslideup_vvi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: UImm5,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = constructor_vec_alu_rrr_uimm5(ctx, &VecAluOpRRRImm5::VslideupVI, arg0, arg1, arg2, arg3, arg4);
    // Rule at src\isa\riscv64\inst_vector.isle line 1095.
    return v6;
}

// Generated as internal constructor for term rv_vslide1up_vx.
pub fn constructor_rv_vslide1up_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: XReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::xreg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::Vslide1upVX, arg0, arg1, v6, arg3, arg4);
    // Rule at src\isa\riscv64\inst_vector.isle line 1102.
    return v7;
}

// Generated as internal constructor for term rv_vmv_xs.
pub fn constructor_rv_vmv_xs<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VState,
) -> XReg {
    let v3 = C::vreg_to_reg(ctx, arg0);
    let v4 = &constructor_unmasked(ctx);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VmvXS, v3, v4, arg1);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst_vector.isle line 1109.
    return v6;
}

// Generated as internal constructor for term rv_vfmv_fs.
pub fn constructor_rv_vfmv_fs<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VState,
) -> FReg {
    let v3 = C::vreg_to_reg(ctx, arg0);
    let v4 = &constructor_unmasked(ctx);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfmvFS, v3, v4, arg1);
    let v6 = C::freg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst_vector.isle line 1116.
    return v6;
}

// Generated as internal constructor for term rv_vmv_sx.
pub fn constructor_rv_vmv_sx<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: VState,
) -> VReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = &constructor_unmasked(ctx);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VmvSX, v3, v4, arg1);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst_vector.isle line 1123.
    return v6;
}

// Generated as internal constructor for term rv_vfmv_sf.
pub fn constructor_rv_vfmv_sf<C: Context>(
    ctx: &mut C,
    arg0: FReg,
    arg1: VState,
) -> VReg {
    let v3 = C::freg_to_reg(ctx, arg0);
    let v4 = &constructor_unmasked(ctx);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfmvSF, v3, v4, arg1);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst_vector.isle line 1130.
    return v6;
}

// Generated as internal constructor for term rv_vmv_vx.
pub fn constructor_rv_vmv_vx<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: VState,
) -> VReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = &constructor_unmasked(ctx);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VmvVX, v3, v4, arg1);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst_vector.isle line 1137.
    return v6;
}

// Generated as internal constructor for term rv_vfmv_vf.
pub fn constructor_rv_vfmv_vf<C: Context>(
    ctx: &mut C,
    arg0: FReg,
    arg1: VState,
) -> VReg {
    let v3 = C::freg_to_reg(ctx, arg0);
    let v4 = &constructor_unmasked(ctx);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfmvVF, v3, v4, arg1);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst_vector.isle line 1144.
    return v6;
}

// Generated as internal constructor for term rv_vmv_vi.
pub fn constructor_rv_vmv_vi<C: Context>(
    ctx: &mut C,
    arg0: Imm5,
    arg1: VState,
) -> VReg {
    let v3 = &constructor_unmasked(ctx);
    let v4 = constructor_vec_alu_r_imm5(ctx, &VecAluOpRImm5::VmvVI, arg0, v3, arg1);
    let v5 = C::vreg_new(ctx, v4);
    // Rule at src\isa\riscv64\inst_vector.isle line 1151.
    return v5;
}

// Generated as internal constructor for term rv_vmerge_vvm.
pub fn constructor_rv_vmerge_vvm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VReg,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = &constructor_masked(ctx, arg2);
    let v8 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmergeVVM, v5, v6, v7, arg3);
    let v9 = C::vreg_new(ctx, v8);
    // Rule at src\isa\riscv64\inst_vector.isle line 1161.
    return v9;
}

// Generated as internal constructor for term rv_vmerge_vxm.
pub fn constructor_rv_vmerge_vxm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: VReg,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = &constructor_masked(ctx, arg2);
    let v8 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmergeVXM, v5, v6, v7, arg3);
    let v9 = C::vreg_new(ctx, v8);
    // Rule at src\isa\riscv64\inst_vector.isle line 1170.
    return v9;
}

// Generated as internal constructor for term rv_vfmerge_vfm.
pub fn constructor_rv_vfmerge_vfm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: VReg,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = &constructor_masked(ctx, arg2);
    let v8 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfmergeVFM, v5, v6, v7, arg3);
    let v9 = C::vreg_new(ctx, v8);
    // Rule at src\isa\riscv64\inst_vector.isle line 1179.
    return v9;
}

// Generated as internal constructor for term rv_vmerge_vim.
pub fn constructor_rv_vmerge_vim<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: VReg,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = &constructor_masked(ctx, arg2);
    let v7 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VmergeVIM, v5, arg1, v6, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1188.
    return v8;
}

// Generated as internal constructor for term rv_vredminu_vs.
pub fn constructor_rv_vredminu_vs<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VredminuVS, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1196.
    return v8;
}

// Generated as internal constructor for term rv_vredmaxu_vs.
pub fn constructor_rv_vredmaxu_vs<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VredmaxuVS, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1203.
    return v8;
}

// Generated as internal constructor for term rv_vrgather_vv.
pub fn constructor_rv_vrgather_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VrgatherVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1210.
    return v8;
}

// Generated as internal constructor for term rv_vrgather_vx.
pub fn constructor_rv_vrgather_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VrgatherVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1217.
    return v8;
}

// Generated as internal constructor for term rv_vrgather_vi.
pub fn constructor_rv_vrgather_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VrgatherVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src\isa\riscv64\inst_vector.isle line 1222.
    return v7;
}

// Generated as internal constructor for term rv_vcompress_vm.
pub fn constructor_rv_vcompress_vm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = C::vreg_to_reg(ctx, arg1);
    let v6 = &constructor_unmasked(ctx);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VcompressVM, v4, v5, v6, arg2);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1233.
    return v8;
}

// Generated as internal constructor for term rv_vmseq_vv.
pub fn constructor_rv_vmseq_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmseqVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1238.
    return v8;
}

// Generated as internal constructor for term rv_vmseq_vx.
pub fn constructor_rv_vmseq_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmseqVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1243.
    return v8;
}

// Generated as internal constructor for term rv_vmseq_vi.
pub fn constructor_rv_vmseq_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VmseqVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src\isa\riscv64\inst_vector.isle line 1248.
    return v7;
}

// Generated as internal constructor for term rv_vmsne_vv.
pub fn constructor_rv_vmsne_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsneVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1253.
    return v8;
}

// Generated as internal constructor for term rv_vmsne_vx.
pub fn constructor_rv_vmsne_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsneVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1258.
    return v8;
}

// Generated as internal constructor for term rv_vmsne_vi.
pub fn constructor_rv_vmsne_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VmsneVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src\isa\riscv64\inst_vector.isle line 1263.
    return v7;
}

// Generated as internal constructor for term rv_vmsltu_vv.
pub fn constructor_rv_vmsltu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsltuVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1268.
    return v8;
}

// Generated as internal constructor for term rv_vmsltu_vx.
pub fn constructor_rv_vmsltu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsltuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1273.
    return v8;
}

// Generated as internal constructor for term rv_vmslt_vv.
pub fn constructor_rv_vmslt_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsltVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1278.
    return v8;
}

// Generated as internal constructor for term rv_vmslt_vx.
pub fn constructor_rv_vmslt_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsltVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1283.
    return v8;
}

// Generated as internal constructor for term rv_vmsleu_vv.
pub fn constructor_rv_vmsleu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsleuVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1288.
    return v8;
}

// Generated as internal constructor for term rv_vmsleu_vx.
pub fn constructor_rv_vmsleu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsleuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1293.
    return v8;
}

// Generated as internal constructor for term rv_vmsleu_vi.
pub fn constructor_rv_vmsleu_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VmsleuVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src\isa\riscv64\inst_vector.isle line 1298.
    return v7;
}

// Generated as internal constructor for term rv_vmsle_vv.
pub fn constructor_rv_vmsle_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsleVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1303.
    return v8;
}

// Generated as internal constructor for term rv_vmsle_vx.
pub fn constructor_rv_vmsle_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsleVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1308.
    return v8;
}

// Generated as internal constructor for term rv_vmsle_vi.
pub fn constructor_rv_vmsle_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VmsleVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src\isa\riscv64\inst_vector.isle line 1313.
    return v7;
}

// Generated as internal constructor for term rv_vmsgtu_vv.
pub fn constructor_rv_vmsgtu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v4 = constructor_rv_vmsltu_vv(ctx, arg1, arg0, arg2, arg3);
    // Rule at src\isa\riscv64\inst_vector.isle line 1319.
    return v4;
}

// Generated as internal constructor for term rv_vmsgtu_vx.
pub fn constructor_rv_vmsgtu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsgtuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1323.
    return v8;
}

// Generated as internal constructor for term rv_vmsgtu_vi.
pub fn constructor_rv_vmsgtu_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VmsgtuVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src\isa\riscv64\inst_vector.isle line 1328.
    return v7;
}

// Generated as internal constructor for term rv_vmsgt_vv.
pub fn constructor_rv_vmsgt_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v4 = constructor_rv_vmslt_vv(ctx, arg1, arg0, arg2, arg3);
    // Rule at src\isa\riscv64\inst_vector.isle line 1334.
    return v4;
}

// Generated as internal constructor for term rv_vmsgt_vx.
pub fn constructor_rv_vmsgt_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsgtVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1338.
    return v8;
}

// Generated as internal constructor for term rv_vmsgt_vi.
pub fn constructor_rv_vmsgt_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VmsgtVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src\isa\riscv64\inst_vector.isle line 1343.
    return v7;
}

// Generated as internal constructor for term rv_vmsgeu_vv.
pub fn constructor_rv_vmsgeu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v4 = constructor_rv_vmsleu_vv(ctx, arg1, arg0, arg2, arg3);
    // Rule at src\isa\riscv64\inst_vector.isle line 1349.
    return v4;
}

// Generated as internal constructor for term rv_vmsge_vv.
pub fn constructor_rv_vmsge_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v4 = constructor_rv_vmsle_vv(ctx, arg1, arg0, arg2, arg3);
    // Rule at src\isa\riscv64\inst_vector.isle line 1354.
    return v4;
}

// Generated as internal constructor for term rv_vmfeq_vv.
pub fn constructor_rv_vmfeq_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfeqVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1358.
    return v8;
}

// Generated as internal constructor for term rv_vmfeq_vf.
pub fn constructor_rv_vmfeq_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfeqVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1363.
    return v8;
}

// Generated as internal constructor for term rv_vmfne_vv.
pub fn constructor_rv_vmfne_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfneVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1368.
    return v8;
}

// Generated as internal constructor for term rv_vmfne_vf.
pub fn constructor_rv_vmfne_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfneVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1373.
    return v8;
}

// Generated as internal constructor for term rv_vmflt_vv.
pub fn constructor_rv_vmflt_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfltVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1378.
    return v8;
}

// Generated as internal constructor for term rv_vmflt_vf.
pub fn constructor_rv_vmflt_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfltVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1383.
    return v8;
}

// Generated as internal constructor for term rv_vmfle_vv.
pub fn constructor_rv_vmfle_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfleVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1388.
    return v8;
}

// Generated as internal constructor for term rv_vmfle_vf.
pub fn constructor_rv_vmfle_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfleVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1393.
    return v8;
}

// Generated as internal constructor for term rv_vmfgt_vv.
pub fn constructor_rv_vmfgt_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v4 = constructor_rv_vmflt_vv(ctx, arg1, arg0, arg2, arg3);
    // Rule at src\isa\riscv64\inst_vector.isle line 1399.
    return v4;
}

// Generated as internal constructor for term rv_vmfgt_vf.
pub fn constructor_rv_vmfgt_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfgtVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1403.
    return v8;
}

// Generated as internal constructor for term rv_vmfge_vv.
pub fn constructor_rv_vmfge_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v4 = constructor_rv_vmfle_vv(ctx, arg1, arg0, arg2, arg3);
    // Rule at src\isa\riscv64\inst_vector.isle line 1409.
    return v4;
}

// Generated as internal constructor for term rv_vmfge_vf.
pub fn constructor_rv_vmfge_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfgeVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1413.
    return v8;
}

// Generated as internal constructor for term rv_vzext_vf2.
pub fn constructor_rv_vzext_vf2<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VzextVF2, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst_vector.isle line 1419.
    return v6;
}

// Generated as internal constructor for term rv_vzext_vf4.
pub fn constructor_rv_vzext_vf4<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VzextVF4, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst_vector.isle line 1425.
    return v6;
}

// Generated as internal constructor for term rv_vzext_vf8.
pub fn constructor_rv_vzext_vf8<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VzextVF8, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst_vector.isle line 1431.
    return v6;
}

// Generated as internal constructor for term rv_vsext_vf2.
pub fn constructor_rv_vsext_vf2<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VsextVF2, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst_vector.isle line 1437.
    return v6;
}

// Generated as internal constructor for term rv_vsext_vf4.
pub fn constructor_rv_vsext_vf4<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VsextVF4, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst_vector.isle line 1443.
    return v6;
}

// Generated as internal constructor for term rv_vsext_vf8.
pub fn constructor_rv_vsext_vf8<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VsextVF8, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst_vector.isle line 1449.
    return v6;
}

// Generated as internal constructor for term rv_vnclip_wi.
pub fn constructor_rv_vnclip_wi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VnclipWI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src\isa\riscv64\inst_vector.isle line 1456.
    return v7;
}

// Generated as internal constructor for term rv_vnclipu_wi.
pub fn constructor_rv_vnclipu_wi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VnclipuWI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src\isa\riscv64\inst_vector.isle line 1463.
    return v7;
}

// Generated as internal constructor for term rv_vmand_mm.
pub fn constructor_rv_vmand_mm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = C::vreg_to_reg(ctx, arg1);
    let v6 = &constructor_unmasked(ctx);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmandMM, v4, v5, v6, arg2);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1470.
    return v8;
}

// Generated as internal constructor for term rv_vmor_mm.
pub fn constructor_rv_vmor_mm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = C::vreg_to_reg(ctx, arg1);
    let v6 = &constructor_unmasked(ctx);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmorMM, v4, v5, v6, arg2);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1477.
    return v8;
}

// Generated as internal constructor for term rv_vmnand_mm.
pub fn constructor_rv_vmnand_mm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = C::vreg_to_reg(ctx, arg1);
    let v6 = &constructor_unmasked(ctx);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmnandMM, v4, v5, v6, arg2);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1484.
    return v8;
}

// Generated as internal constructor for term rv_vmnot_m.
pub fn constructor_rv_vmnot_m<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VState,
) -> VReg {
    let v2 = constructor_rv_vmnand_mm(ctx, arg0, arg0, arg1);
    // Rule at src\isa\riscv64\inst_vector.isle line 1492.
    return v2;
}

// Generated as internal constructor for term rv_vmnor_mm.
pub fn constructor_rv_vmnor_mm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = C::vreg_to_reg(ctx, arg1);
    let v6 = &constructor_unmasked(ctx);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmnorMM, v4, v5, v6, arg2);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1498.
    return v8;
}

// Generated as internal constructor for term gen_extractlane.
pub fn constructor_gen_extractlane<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: VReg,
    arg2: u8,
) -> Reg {
    let v1 = C::ty_vec_fits_in_register(ctx, arg0);
    if let Some(v2) = v1 {
        if arg2 == 0x0_u8 {
            let v5 = C::ty_vector_float(ctx, v2);
            if let Some(v6) = v5 {
                let v7 = C::vstate_from_type(ctx, v2);
                let v8 = constructor_rv_vfmv_fs(ctx, arg1, v7);
                let v9 = C::freg_to_reg(ctx, v8);
                // Rule at src\isa\riscv64\inst_vector.isle line 1506.
                return v9;
            }
            let v10 = C::ty_vector_not_float(ctx, v2);
            if let Some(v11) = v10 {
                let v7 = C::vstate_from_type(ctx, v2);
                let v12 = constructor_rv_vmv_xs(ctx, arg1, v7);
                let v13 = C::xreg_to_reg(ctx, v12);
                // Rule at src\isa\riscv64\inst_vector.isle line 1511.
                return v13;
            }
        }
        let v14 = C::uimm5_from_u8(ctx, arg2);
        if let Some(v15) = v14 {
            let v16 = &constructor_unmasked(ctx);
            let v7 = C::vstate_from_type(ctx, v2);
            let v17 = constructor_rv_vslidedown_vi(ctx, arg1, v15, v16, v7);
            let v19 = constructor_gen_extractlane(ctx, v2, v17, 0x0_u8);
            // Rule at src\isa\riscv64\inst_vector.isle line 1518.
            return v19;
        }
        let v21 = C::u8_as_u64(ctx, arg2);
        let v22 = constructor_imm(ctx, I64, v21);
        let v23 = C::xreg_new(ctx, v22);
        let v16 = &constructor_unmasked(ctx);
        let v7 = C::vstate_from_type(ctx, v2);
        let v24 = constructor_rv_vslidedown_vx(ctx, arg1, v23, v16, v7);
        let v25 = constructor_gen_extractlane(ctx, v2, v24, 0x0_u8);
        // Rule at src\isa\riscv64\inst_vector.isle line 1522.
        return v25;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "gen_extractlane", "src\\isa\\riscv64\\inst_vector.isle line 1503")
}

// Generated as internal constructor for term gen_vec_mask.
pub fn constructor_gen_vec_mask<C: Context>(
    ctx: &mut C,
    arg0: u64,
) -> VReg {
    let v1 = C::imm5_from_u64(ctx, arg0);
    if let Some(v2) = v1 {
        let v4 = C::vstate_from_type(ctx, I64X2);
        let v5 = constructor_rv_vmv_vi(ctx, v2, v4);
        // Rule at src\isa\riscv64\inst_vector.isle line 1532.
        return v5;
    }
    let v7 = constructor_imm(ctx, I64, arg0);
    let v8 = C::xreg_new(ctx, v7);
    let v4 = C::vstate_from_type(ctx, I64X2);
    let v9 = constructor_rv_vmv_sx(ctx, v8, v4);
    // Rule at src\isa\riscv64\inst_vector.isle line 1537.
    return v9;
}

// Generated as internal constructor for term gen_constant.
pub fn constructor_gen_constant<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: VCodeConstant,
) -> VReg {
    let v3 = C::gen_const_amode(ctx, arg1);
    let v2 = &constructor_element_width_from_type(ctx, arg0);
    let v4 = VecAMode::UnitStride {
        base: v3,
    };
    let v5 = C::mem_flags_trusted(ctx);
    let v6 = &constructor_unmasked(ctx);
    let v7 = C::vstate_from_type(ctx, arg0);
    let v8 = constructor_vec_load(ctx, v2, &v4, v5, v6, v7);
    let v9 = C::vreg_new(ctx, v8);
    // Rule at src\isa\riscv64\inst_vector.isle line 1548.
    return v9;
}

// Generated as internal constructor for term gen_slidedown_half.
pub fn constructor_gen_slidedown_half<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: VReg,
) -> VReg {
    let v1 = C::ty_vec_fits_in_register(ctx, arg0);
    if let Some(v2) = v1 {
        let v4 = C::ty_lane_count(ctx, v2);
        let v6 = C::u64_udiv(ctx, v4, 0x2_u64);
        if let Some(v7) = v6 {
            let v8 = C::uimm5_from_u64(ctx, v7);
            if let Some(v9) = v8 {
                let v10 = &constructor_unmasked(ctx);
                let v11 = C::vstate_from_type(ctx, v2);
                let v12 = constructor_rv_vslidedown_vi(ctx, arg1, v9, v10, v11);
                // Rule at src\isa\riscv64\inst_vector.isle line 1561.
                return v12;
            }
            let v14 = constructor_imm(ctx, I64, v7);
            let v15 = C::xreg_new(ctx, v14);
            let v10 = &constructor_unmasked(ctx);
            let v11 = C::vstate_from_type(ctx, v2);
            let v16 = constructor_rv_vslidedown_vx(ctx, arg1, v15, v10, v11);
            // Rule at src\isa\riscv64\inst_vector.isle line 1566.
            return v16;
        }
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "gen_slidedown_half", "src\\isa\\riscv64\\inst_vector.isle line 1558")
}

// Generated as internal constructor for term gen_expand_mask.
pub fn constructor_gen_expand_mask<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: VReg,
) -> VReg {
    let v3 = C::i8_to_imm5(ctx, 0_i8);
    if let Some(v4) = v3 {
        let v6 = C::i8_to_imm5(ctx, -1_i8);
        if let Some(v7) = v6 {
            let v8 = C::vstate_from_type(ctx, arg0);
            let v9 = constructor_rv_vmv_vi(ctx, v4, v8);
            let v10 = constructor_rv_vmerge_vim(ctx, v9, v7, arg1, v8);
            // Rule at src\isa\riscv64\inst_vector.isle line 1574.
            return v10;
        }
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "gen_expand_mask", "src\\isa\\riscv64\\inst_vector.isle line 1573")
}

// Generated as internal constructor for term gen_icmp_mask.
pub fn constructor_gen_icmp_mask<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &IntCC,
    arg2: Value,
    arg3: Value,
) -> VReg {
    let v1 = C::ty_vec_fits_in_register(ctx, arg0);
    if let Some(v2) = v1 {
        match arg1 {
            &IntCC::Equal => {
                let v29 = constructor_replicated_imm5(ctx, arg2);
                if let Some(v30) = v29 {
                    let v23 = constructor_put_in_vreg(ctx, arg3);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v31 = constructor_rv_vmseq_vi(ctx, v23, v30, v8, v9);
                    // Rule at src\isa\riscv64\inst_vector.isle line 1599.
                    return v31;
                }
                let v26 = constructor_replicated_imm5(ctx, arg3);
                if let Some(v27) = v26 {
                    let v6 = constructor_put_in_vreg(ctx, arg2);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v28 = constructor_rv_vmseq_vi(ctx, v6, v27, v8, v9);
                    // Rule at src\isa\riscv64\inst_vector.isle line 1595.
                    return v28;
                }
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data_value(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20 {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_xreg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v25 = constructor_rv_vmseq_vx(ctx, v23, v24, v8, v9);
                            // Rule at src\isa\riscv64\inst_vector.isle line 1592.
                            return v25;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data_value(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13 {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_xreg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v17 = constructor_rv_vmseq_vx(ctx, v6, v16, v8, v9);
                            // Rule at src\isa\riscv64\inst_vector.isle line 1589.
                            return v17;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v10 = constructor_rv_vmseq_vv(ctx, v6, v7, v8, v9);
                // Rule at src\isa\riscv64\inst_vector.isle line 1586.
                return v10;
            }
            &IntCC::NotEqual => {
                let v29 = constructor_replicated_imm5(ctx, arg2);
                if let Some(v30) = v29 {
                    let v23 = constructor_put_in_vreg(ctx, arg3);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v36 = constructor_rv_vmsne_vi(ctx, v23, v30, v8, v9);
                    // Rule at src\isa\riscv64\inst_vector.isle line 1618.
                    return v36;
                }
                let v26 = constructor_replicated_imm5(ctx, arg3);
                if let Some(v27) = v26 {
                    let v6 = constructor_put_in_vreg(ctx, arg2);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v35 = constructor_rv_vmsne_vi(ctx, v6, v27, v8, v9);
                    // Rule at src\isa\riscv64\inst_vector.isle line 1614.
                    return v35;
                }
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data_value(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20 {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_xreg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v34 = constructor_rv_vmsne_vx(ctx, v23, v24, v8, v9);
                            // Rule at src\isa\riscv64\inst_vector.isle line 1611.
                            return v34;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data_value(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13 {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_xreg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v33 = constructor_rv_vmsne_vx(ctx, v6, v16, v8, v9);
                            // Rule at src\isa\riscv64\inst_vector.isle line 1608.
                            return v33;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v32 = constructor_rv_vmsne_vv(ctx, v6, v7, v8, v9);
                // Rule at src\isa\riscv64\inst_vector.isle line 1605.
                return v32;
            }
            &IntCC::SignedGreaterThan => {
                let v26 = constructor_replicated_imm5(ctx, arg3);
                if let Some(v27) = v26 {
                    let v6 = constructor_put_in_vreg(ctx, arg2);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v58 = constructor_rv_vmsgt_vi(ctx, v6, v27, v8, v9);
                    // Rule at src\isa\riscv64\inst_vector.isle line 1702.
                    return v58;
                }
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data_value(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20 {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_xreg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v57 = constructor_rv_vmslt_vx(ctx, v23, v24, v8, v9);
                            // Rule at src\isa\riscv64\inst_vector.isle line 1699.
                            return v57;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data_value(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13 {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_xreg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v56 = constructor_rv_vmsgt_vx(ctx, v6, v16, v8, v9);
                            // Rule at src\isa\riscv64\inst_vector.isle line 1696.
                            return v56;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v55 = constructor_rv_vmsgt_vv(ctx, v6, v7, v8, v9);
                // Rule at src\isa\riscv64\inst_vector.isle line 1693.
                return v55;
            }
            &IntCC::SignedGreaterThanOrEqual => {
                let v29 = constructor_replicated_imm5(ctx, arg2);
                if let Some(v30) = v29 {
                    let v23 = constructor_put_in_vreg(ctx, arg3);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v64 = constructor_rv_vmsle_vi(ctx, v23, v30, v8, v9);
                    // Rule at src\isa\riscv64\inst_vector.isle line 1726.
                    return v64;
                }
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data_value(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20 {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_xreg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v63 = constructor_rv_vmsle_vx(ctx, v23, v24, v8, v9);
                            // Rule at src\isa\riscv64\inst_vector.isle line 1723.
                            return v63;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v62 = constructor_rv_vmsge_vv(ctx, v6, v7, v8, v9);
                // Rule at src\isa\riscv64\inst_vector.isle line 1720.
                return v62;
            }
            &IntCC::SignedLessThan => {
                let v29 = constructor_replicated_imm5(ctx, arg2);
                if let Some(v30) = v29 {
                    let v23 = constructor_put_in_vreg(ctx, arg3);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v44 = constructor_rv_vmsgt_vi(ctx, v23, v30, v8, v9);
                    // Rule at src\isa\riscv64\inst_vector.isle line 1648.
                    return v44;
                }
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data_value(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20 {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_xreg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v43 = constructor_rv_vmsgt_vx(ctx, v23, v24, v8, v9);
                            // Rule at src\isa\riscv64\inst_vector.isle line 1645.
                            return v43;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data_value(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13 {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_xreg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v42 = constructor_rv_vmslt_vx(ctx, v6, v16, v8, v9);
                            // Rule at src\isa\riscv64\inst_vector.isle line 1642.
                            return v42;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v41 = constructor_rv_vmslt_vv(ctx, v6, v7, v8, v9);
                // Rule at src\isa\riscv64\inst_vector.isle line 1639.
                return v41;
            }
            &IntCC::SignedLessThanOrEqual => {
                let v26 = constructor_replicated_imm5(ctx, arg3);
                if let Some(v27) = v26 {
                    let v6 = constructor_put_in_vreg(ctx, arg2);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v50 = constructor_rv_vmsle_vi(ctx, v6, v27, v8, v9);
                    // Rule at src\isa\riscv64\inst_vector.isle line 1672.
                    return v50;
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data_value(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13 {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_xreg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v49 = constructor_rv_vmsle_vx(ctx, v6, v16, v8, v9);
                            // Rule at src\isa\riscv64\inst_vector.isle line 1669.
                            return v49;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v48 = constructor_rv_vmsle_vv(ctx, v6, v7, v8, v9);
                // Rule at src\isa\riscv64\inst_vector.isle line 1666.
                return v48;
            }
            &IntCC::UnsignedGreaterThan => {
                let v26 = constructor_replicated_imm5(ctx, arg3);
                if let Some(v27) = v26 {
                    let v6 = constructor_put_in_vreg(ctx, arg2);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v54 = constructor_rv_vmsgtu_vi(ctx, v6, v27, v8, v9);
                    // Rule at src\isa\riscv64\inst_vector.isle line 1687.
                    return v54;
                }
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data_value(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20 {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_xreg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v53 = constructor_rv_vmsltu_vx(ctx, v23, v24, v8, v9);
                            // Rule at src\isa\riscv64\inst_vector.isle line 1684.
                            return v53;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data_value(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13 {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_xreg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v52 = constructor_rv_vmsgtu_vx(ctx, v6, v16, v8, v9);
                            // Rule at src\isa\riscv64\inst_vector.isle line 1681.
                            return v52;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v51 = constructor_rv_vmsgtu_vv(ctx, v6, v7, v8, v9);
                // Rule at src\isa\riscv64\inst_vector.isle line 1678.
                return v51;
            }
            &IntCC::UnsignedGreaterThanOrEqual => {
                let v29 = constructor_replicated_imm5(ctx, arg2);
                if let Some(v30) = v29 {
                    let v23 = constructor_put_in_vreg(ctx, arg3);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v61 = constructor_rv_vmsleu_vi(ctx, v23, v30, v8, v9);
                    // Rule at src\isa\riscv64\inst_vector.isle line 1714.
                    return v61;
                }
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data_value(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20 {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_xreg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v60 = constructor_rv_vmsleu_vx(ctx, v23, v24, v8, v9);
                            // Rule at src\isa\riscv64\inst_vector.isle line 1711.
                            return v60;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v59 = constructor_rv_vmsgeu_vv(ctx, v6, v7, v8, v9);
                // Rule at src\isa\riscv64\inst_vector.isle line 1708.
                return v59;
            }
            &IntCC::UnsignedLessThan => {
                let v29 = constructor_replicated_imm5(ctx, arg2);
                if let Some(v30) = v29 {
                    let v23 = constructor_put_in_vreg(ctx, arg3);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v40 = constructor_rv_vmsgtu_vi(ctx, v23, v30, v8, v9);
                    // Rule at src\isa\riscv64\inst_vector.isle line 1633.
                    return v40;
                }
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data_value(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20 {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_xreg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v39 = constructor_rv_vmsgtu_vx(ctx, v23, v24, v8, v9);
                            // Rule at src\isa\riscv64\inst_vector.isle line 1630.
                            return v39;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data_value(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13 {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_xreg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v38 = constructor_rv_vmsltu_vx(ctx, v6, v16, v8, v9);
                            // Rule at src\isa\riscv64\inst_vector.isle line 1627.
                            return v38;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v37 = constructor_rv_vmsltu_vv(ctx, v6, v7, v8, v9);
                // Rule at src\isa\riscv64\inst_vector.isle line 1624.
                return v37;
            }
            &IntCC::UnsignedLessThanOrEqual => {
                let v26 = constructor_replicated_imm5(ctx, arg3);
                if let Some(v27) = v26 {
                    let v6 = constructor_put_in_vreg(ctx, arg2);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v47 = constructor_rv_vmsleu_vi(ctx, v6, v27, v8, v9);
                    // Rule at src\isa\riscv64\inst_vector.isle line 1660.
                    return v47;
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data_value(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13 {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_xreg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v46 = constructor_rv_vmsleu_vx(ctx, v6, v16, v8, v9);
                            // Rule at src\isa\riscv64\inst_vector.isle line 1657.
                            return v46;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v45 = constructor_rv_vmsleu_vv(ctx, v6, v7, v8, v9);
                // Rule at src\isa\riscv64\inst_vector.isle line 1654.
                return v45;
            }
            _ => {}
        }
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "gen_icmp_mask", "src\\isa\\riscv64\\inst_vector.isle line 1582")
}

// Generated as internal constructor for term gen_fcmp_mask.
pub fn constructor_gen_fcmp_mask<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FloatCC,
    arg2: Value,
    arg3: Value,
) -> VReg {
    let v1 = C::ty_vec_fits_in_register(ctx, arg0);
    if let Some(v2) = v1 {
        match arg1 {
            &FloatCC::Equal => {
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data_value(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20 {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_freg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v25 = constructor_rv_vmfeq_vf(ctx, v23, v24, v8, v9);
                            // Rule at src\isa\riscv64\inst_vector.isle line 1743.
                            return v25;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data_value(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13 {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_freg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v17 = constructor_rv_vmfeq_vf(ctx, v6, v16, v8, v9);
                            // Rule at src\isa\riscv64\inst_vector.isle line 1740.
                            return v17;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v10 = constructor_rv_vmfeq_vv(ctx, v6, v7, v8, v9);
                // Rule at src\isa\riscv64\inst_vector.isle line 1737.
                return v10;
            }
            &FloatCC::GreaterThan => {
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data_value(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20 {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_freg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v37 = constructor_rv_vmflt_vf(ctx, v23, v24, v8, v9);
                            // Rule at src\isa\riscv64\inst_vector.isle line 1788.
                            return v37;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data_value(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13 {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_freg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v36 = constructor_rv_vmfgt_vf(ctx, v6, v16, v8, v9);
                            // Rule at src\isa\riscv64\inst_vector.isle line 1785.
                            return v36;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v35 = constructor_rv_vmfgt_vv(ctx, v6, v7, v8, v9);
                // Rule at src\isa\riscv64\inst_vector.isle line 1782.
                return v35;
            }
            &FloatCC::GreaterThanOrEqual => {
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data_value(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20 {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_freg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v40 = constructor_rv_vmfle_vf(ctx, v23, v24, v8, v9);
                            // Rule at src\isa\riscv64\inst_vector.isle line 1799.
                            return v40;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data_value(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13 {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_freg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v39 = constructor_rv_vmfge_vf(ctx, v6, v16, v8, v9);
                            // Rule at src\isa\riscv64\inst_vector.isle line 1796.
                            return v39;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v38 = constructor_rv_vmfge_vv(ctx, v6, v7, v8, v9);
                // Rule at src\isa\riscv64\inst_vector.isle line 1793.
                return v38;
            }
            &FloatCC::LessThan => {
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data_value(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20 {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_freg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v31 = constructor_rv_vmfgt_vf(ctx, v23, v24, v8, v9);
                            // Rule at src\isa\riscv64\inst_vector.isle line 1766.
                            return v31;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data_value(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13 {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_freg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v30 = constructor_rv_vmflt_vf(ctx, v6, v16, v8, v9);
                            // Rule at src\isa\riscv64\inst_vector.isle line 1763.
                            return v30;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v29 = constructor_rv_vmflt_vv(ctx, v6, v7, v8, v9);
                // Rule at src\isa\riscv64\inst_vector.isle line 1760.
                return v29;
            }
            &FloatCC::LessThanOrEqual => {
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data_value(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20 {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_freg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v34 = constructor_rv_vmfge_vf(ctx, v23, v24, v8, v9);
                            // Rule at src\isa\riscv64\inst_vector.isle line 1777.
                            return v34;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data_value(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13 {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_freg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v33 = constructor_rv_vmfle_vf(ctx, v6, v16, v8, v9);
                            // Rule at src\isa\riscv64\inst_vector.isle line 1774.
                            return v33;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v32 = constructor_rv_vmfle_vv(ctx, v6, v7, v8, v9);
                // Rule at src\isa\riscv64\inst_vector.isle line 1771.
                return v32;
            }
            &FloatCC::NotEqual => {
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data_value(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20 {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_freg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v28 = constructor_rv_vmfne_vf(ctx, v23, v24, v8, v9);
                            // Rule at src\isa\riscv64\inst_vector.isle line 1755.
                            return v28;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data_value(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13 {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_freg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v27 = constructor_rv_vmfne_vf(ctx, v6, v16, v8, v9);
                            // Rule at src\isa\riscv64\inst_vector.isle line 1752.
                            return v27;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v26 = constructor_rv_vmfne_vv(ctx, v6, v7, v8, v9);
                // Rule at src\isa\riscv64\inst_vector.isle line 1749.
                return v26;
            }
            &FloatCC::Ordered => {
                let v42 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::Equal, arg2, arg2);
                let v43 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::Equal, arg3, arg3);
                let v9 = C::vstate_from_type(ctx, v2);
                let v44 = constructor_rv_vmand_mm(ctx, v42, v43, v9);
                // Rule at src\isa\riscv64\inst_vector.isle line 1804.
                return v44;
            }
            &FloatCC::OrderedNotEqual => {
                let v50 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::LessThan, arg2, arg3);
                let v51 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::LessThan, arg3, arg2);
                let v9 = C::vstate_from_type(ctx, v2);
                let v52 = constructor_rv_vmor_mm(ctx, v50, v51, v9);
                // Rule at src\isa\riscv64\inst_vector.isle line 1820.
                return v52;
            }
            &FloatCC::Unordered => {
                let v46 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::NotEqual, arg2, arg2);
                let v47 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::NotEqual, arg3, arg3);
                let v9 = C::vstate_from_type(ctx, v2);
                let v48 = constructor_rv_vmor_mm(ctx, v46, v47, v9);
                // Rule at src\isa\riscv64\inst_vector.isle line 1812.
                return v48;
            }
            &FloatCC::UnorderedOrEqual => {
                let v50 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::LessThan, arg2, arg3);
                let v51 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::LessThan, arg3, arg2);
                let v9 = C::vstate_from_type(ctx, v2);
                let v53 = constructor_rv_vmnor_mm(ctx, v50, v51, v9);
                // Rule at src\isa\riscv64\inst_vector.isle line 1828.
                return v53;
            }
            &FloatCC::UnorderedOrGreaterThan => {
                let v55 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::LessThanOrEqual, arg2, arg3);
                let v9 = C::vstate_from_type(ctx, v2);
                let v56 = constructor_rv_vmnot_m(ctx, v55, v9);
                // Rule at src\isa\riscv64\inst_vector.isle line 1836.
                return v56;
            }
            &FloatCC::UnorderedOrGreaterThanOrEqual => {
                let v50 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::LessThan, arg2, arg3);
                let v9 = C::vstate_from_type(ctx, v2);
                let v57 = constructor_rv_vmnot_m(ctx, v50, v9);
                // Rule at src\isa\riscv64\inst_vector.isle line 1841.
                return v57;
            }
            &FloatCC::UnorderedOrLessThan => {
                let v59 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::GreaterThanOrEqual, arg2, arg3);
                let v9 = C::vstate_from_type(ctx, v2);
                let v60 = constructor_rv_vmnot_m(ctx, v59, v9);
                // Rule at src\isa\riscv64\inst_vector.isle line 1846.
                return v60;
            }
            &FloatCC::UnorderedOrLessThanOrEqual => {
                let v62 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::GreaterThan, arg2, arg3);
                let v9 = C::vstate_from_type(ctx, v2);
                let v63 = constructor_rv_vmnot_m(ctx, v62, v9);
                // Rule at src\isa\riscv64\inst_vector.isle line 1851.
                return v63;
            }
            _ => {}
        }
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "gen_fcmp_mask", "src\\isa\\riscv64\\inst_vector.isle line 1733")
}

// Generated as internal constructor for term gen_vfcvt_x_f.
pub fn constructor_gen_vfcvt_x_f<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &FRM,
    arg2: VState,
) -> VReg {
    if let &FRM::RTZ = arg1 {
        let v3 = &constructor_unmasked(ctx);
        let v4 = constructor_rv_vfcvt_rtz_x_f_v(ctx, arg0, v3, arg2);
        // Rule at src\isa\riscv64\inst_vector.isle line 1859.
        return v4;
    }
    let v5 = constructor_rv_fsrmi(ctx, arg1);
    let v3 = &constructor_unmasked(ctx);
    let v6 = constructor_rv_vfcvt_x_f_v(ctx, arg0, v3, arg2);
    let v7 = constructor_rv_fsrm(ctx, v5);
    // Rule at src\isa\riscv64\inst_vector.isle line 1863.
    return v6;
}

// Generated as internal constructor for term float_int_max.
pub fn constructor_float_int_max<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> u64 {
    match arg0 {
        F32 => {
            // Rule at src\isa\riscv64\inst_vector.isle line 1875.
            return 0x4b000000_u64;
        }
        F64 => {
            // Rule at src\isa\riscv64\inst_vector.isle line 1876.
            return 0x4330000000000000_u64;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "float_int_max", "src\\isa\\riscv64\\inst_vector.isle line 1874")
}

// Generated as internal constructor for term gen_vec_round.
pub fn constructor_gen_vec_round<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &FRM,
    arg2: Type,
) -> VReg {
    let v3 = C::ty_vec_fits_in_register(ctx, arg2);
    if let Some(v4) = v3 {
        let v6 = &constructor_unmasked(ctx);
        let v7 = C::vstate_from_type(ctx, v4);
        let v8 = constructor_rv_vfabs_v(ctx, arg0, v6, v7);
        let v5 = C::lane_type(ctx, v4);
        let v9 = constructor_float_int_max(ctx, v5);
        let v10 = constructor_imm(ctx, v5, v9);
        let v11 = C::freg_new(ctx, v10);
        let v12 = constructor_rv_vmflt_vf(ctx, v8, v11, v6, v7);
        let v13 = constructor_gen_vfcvt_x_f(ctx, arg0, arg1, v7);
        let v14 = constructor_rv_vfcvt_f_x_v(ctx, v13, v6, v7);
        let v15 = constructor_rv_vfsgnj_vv(ctx, v14, arg0, v6, v7);
        let v16 = C::zero_reg(ctx);
        let v18 = constructor_float_int_of_same_size(ctx, v5);
        let v17 = C::xreg_to_reg(ctx, v16);
        let v19 = constructor_gen_bitcast(ctx, v17, v18, v5);
        let v20 = C::freg_new(ctx, v19);
        let v21 = constructor_rv_vfadd_vf(ctx, arg0, v20, v6, v7);
        let v22 = constructor_rv_vmerge_vvm(ctx, v21, v15, v12, v7);
        // Rule at src\isa\riscv64\inst_vector.isle line 1885.
        return v22;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "gen_vec_round", "src\\isa\\riscv64\\inst_vector.isle line 1879")
}

// Generated as internal constructor for term lower.
pub fn constructor_lower<C: Context>(
    ctx: &mut C,
    arg0: Inst,
) -> Option<InstOutput> {
    let v4 = &C::inst_data_value(ctx, arg0);
    match v4 {
        &InstructionData::AtomicCas {
            opcode: ref v1735,
            args: ref v1736,
            flags: v1737,
        } => {
            if let &Opcode::AtomicCas = v1735 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v1666 = C::valid_atomic_transaction(ctx, v3);
                    if let Some(v1667) = v1666 {
                        let v1701 = C::temp_writable_reg(ctx, v1667);
                        let v1742 = C::temp_writable_reg(ctx, v1667);
                        let v1738 = C::unpack_value_array_3(ctx, v1736);
                        let v1743 = constructor_put_in_xreg(ctx, v1738.0);
                        let v1744 = constructor_gen_atomic_offset(ctx, v1743, v1667);
                        let v1746 = constructor_zext(ctx, v1738.1);
                        let v1748 = constructor_put_in_xreg(ctx, v1738.0);
                        let v1749 = constructor_gen_atomic_p(ctx, v1748, v1667);
                        let v1751 = C::put_in_reg(ctx, v1738.2);
                        let v1745 = C::xreg_to_reg(ctx, v1744);
                        let v1747 = C::xreg_to_reg(ctx, v1746);
                        let v1750 = C::xreg_to_reg(ctx, v1749);
                        let v1752 = MInst::AtomicCas {
                            offset: v1745,
                            t0: v1701,
                            dst: v1742,
                            e: v1747,
                            addr: v1750,
                            v: v1751,
                            ty: v1667,
                        };
                        let v1753 = C::emit(ctx, &v1752);
                        let v1754 = C::writable_reg_to_reg(ctx, v1742);
                        let v1755 = constructor_output_reg(ctx, v1754);
                        let v1756 = Some(v1755);
                        // Rule at src\isa\riscv64\lower.isle line 1720.
                        return v1756;
                    }
                }
            }
        }
        &InstructionData::AtomicRmw {
            opcode: ref v1668,
            args: ref v1669,
            flags: v1670,
            op: ref v1671,
        } => {
            if let &Opcode::AtomicRmw = v1668 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v1666 = C::valid_atomic_transaction(ctx, v3);
                    if let Some(v1667) = v1666 {
                        let v1682 = C::fits_in_16(ctx, v1667);
                        if let Some(v1683) = v1682 {
                            let v1689 = C::is_atomic_rmw_max_etc(ctx, v1671);
                            if let Some(v1690) = v1689 {
                                match v1690.1 {
                                    false => {
                                        let v1672 = C::unpack_value_array_2(ctx, v1669);
                                        let v1684 = constructor_put_in_xreg(ctx, v1672.0);
                                        let v1697 = constructor_zext(ctx, v1672.1);
                                        let v1698 = constructor_gen_atomic_rmw_loop(ctx, &v1690.0, v1683, v1684, v1697);
                                        let v1699 = constructor_output_xreg(ctx, v1698);
                                        let v1700 = Some(v1699);
                                        // Rule at src\isa\riscv64\lower.isle line 1658.
                                        return v1700;
                                    }
                                    true => {
                                        let v1672 = C::unpack_value_array_2(ctx, v1669);
                                        let v1684 = constructor_put_in_xreg(ctx, v1672.0);
                                        let v1693 = constructor_sext(ctx, v1672.1);
                                        let v1694 = constructor_gen_atomic_rmw_loop(ctx, &v1690.0, v1683, v1684, v1693);
                                        let v1695 = constructor_output_xreg(ctx, v1694);
                                        let v1696 = Some(v1695);
                                        // Rule at src\isa\riscv64\lower.isle line 1652.
                                        return v1696;
                                    }
                                    _ => {}
                                }
                            }
                            let v1672 = C::unpack_value_array_2(ctx, v1669);
                            let v1684 = constructor_put_in_xreg(ctx, v1672.0);
                            let v1685 = constructor_put_in_xreg(ctx, v1672.1);
                            let v1686 = constructor_gen_atomic_rmw_loop(ctx, v1671, v1683, v1684, v1685);
                            let v1687 = constructor_output_xreg(ctx, v1686);
                            let v1688 = Some(v1687);
                            // Rule at src\isa\riscv64\lower.isle line 1645.
                            return v1688;
                        }
                        match v1671 {
                            &AtomicRmwOp::Nand => {
                                let v1672 = C::unpack_value_array_2(ctx, v1669);
                                let v1684 = constructor_put_in_xreg(ctx, v1672.0);
                                let v1685 = constructor_put_in_xreg(ctx, v1672.1);
                                let v1712 = constructor_gen_atomic_rmw_loop(ctx, &AtomicRmwOp::Nand, v1667, v1684, v1685);
                                let v1713 = constructor_output_xreg(ctx, v1712);
                                let v1714 = Some(v1713);
                                // Rule at src\isa\riscv64\lower.isle line 1685.
                                return v1714;
                            }
                            &AtomicRmwOp::Sub => {
                                let v1701 = C::temp_writable_reg(ctx, v1667);
                                let v1672 = C::unpack_value_array_2(ctx, v1669);
                                let v1685 = constructor_put_in_xreg(ctx, v1672.1);
                                let v1702 = constructor_rv_neg(ctx, v1685);
                                let v1705 = &constructor_get_atomic_rmw_op(ctx, v1667, &AtomicRmwOp::Add);
                                let v1706 = C::put_in_reg(ctx, v1672.0);
                                let v1707 = C::atomic_amo(ctx);
                                let v1703 = C::xreg_to_reg(ctx, v1702);
                                let v1708 = constructor_gen_atomic(ctx, v1705, v1706, v1703, v1707);
                                let v1709 = constructor_output_reg(ctx, v1708);
                                let v1710 = Some(v1709);
                                // Rule at src\isa\riscv64\lower.isle line 1667.
                                return v1710;
                            }
                            _ => {}
                        }
                        let v1675 = &constructor_get_atomic_rmw_op(ctx, v1667, v1671);
                        let v1672 = C::unpack_value_array_2(ctx, v1669);
                        let v1676 = C::put_in_reg(ctx, v1672.0);
                        let v1677 = C::put_in_reg(ctx, v1672.1);
                        let v1678 = C::atomic_amo(ctx);
                        let v1679 = constructor_gen_atomic(ctx, v1675, v1676, v1677, v1678);
                        let v1680 = constructor_output_reg(ctx, v1679);
                        let v1681 = Some(v1680);
                        // Rule at src\isa\riscv64\lower.isle line 1638.
                        return v1681;
                    }
                }
            }
        }
        &InstructionData::Binary {
            opcode: ref v62,
            args: ref v63,
        } => {
            match v62 {
                &Opcode::Swizzle => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v2721 = constructor_replicated_uimm5(ctx, v64.1);
                            if let Some(v2722) = v2721 {
                                let v202 = constructor_put_in_vreg(ctx, v64.0);
                                let v204 = &constructor_unmasked(ctx);
                                let v205 = C::vstate_from_type(ctx, v12);
                                let v2723 = constructor_rv_vrgather_vi(ctx, v202, v2722, v204, v205);
                                let v2724 = constructor_output_vreg(ctx, v2723);
                                let v2725 = Some(v2724);
                                // Rule at src\isa\riscv64\lower.isle line 2841.
                                return v2725;
                            }
                            let v94 = C::def_inst(ctx, v64.1);
                            if let Some(v95) = v94 {
                                let v96 = &C::inst_data_value(ctx, v95);
                                if let &InstructionData::Unary {
                                    opcode: ref v97,
                                    arg: v98,
                                } = v96 {
                                    if let &Opcode::Splat = v97 {
                                        let v202 = constructor_put_in_vreg(ctx, v64.0);
                                        let v209 = constructor_put_in_xreg(ctx, v98);
                                        let v204 = &constructor_unmasked(ctx);
                                        let v205 = C::vstate_from_type(ctx, v12);
                                        let v2718 = constructor_rv_vrgather_vx(ctx, v202, v209, v204, v205);
                                        let v2719 = constructor_output_vreg(ctx, v2718);
                                        let v2720 = Some(v2719);
                                        // Rule at src\isa\riscv64\lower.isle line 2838.
                                        return v2720;
                                    }
                                }
                            }
                            let v202 = constructor_put_in_vreg(ctx, v64.0);
                            let v203 = constructor_put_in_vreg(ctx, v64.1);
                            let v204 = &constructor_unmasked(ctx);
                            let v205 = C::vstate_from_type(ctx, v12);
                            let v2715 = constructor_rv_vrgather_vv(ctx, v202, v203, v204, v205);
                            let v2716 = constructor_output_vreg(ctx, v2715);
                            let v2717 = Some(v2716);
                            // Rule at src\isa\riscv64\lower.isle line 2835.
                            return v2717;
                        }
                    }
                }
                &Opcode::Smin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v106 = C::def_inst(ctx, v64.0);
                            if let Some(v107) = v106 {
                                let v108 = &C::inst_data_value(ctx, v107);
                                if let &InstructionData::Unary {
                                    opcode: ref v109,
                                    arg: v110,
                                } = v108 {
                                    if let &Opcode::Splat = v109 {
                                        let v237 = constructor_put_in_vreg(ctx, v64.1);
                                        let v238 = constructor_put_in_xreg(ctx, v110);
                                        let v204 = &constructor_unmasked(ctx);
                                        let v205 = C::vstate_from_type(ctx, v12);
                                        let v2063 = constructor_rv_vmin_vx(ctx, v237, v238, v204, v205);
                                        let v2064 = constructor_output_vreg(ctx, v2063);
                                        let v2065 = Some(v2064);
                                        // Rule at src\isa\riscv64\lower.isle line 2023.
                                        return v2065;
                                    }
                                }
                            }
                            let v94 = C::def_inst(ctx, v64.1);
                            if let Some(v95) = v94 {
                                let v96 = &C::inst_data_value(ctx, v95);
                                if let &InstructionData::Unary {
                                    opcode: ref v97,
                                    arg: v98,
                                } = v96 {
                                    if let &Opcode::Splat = v97 {
                                        let v202 = constructor_put_in_vreg(ctx, v64.0);
                                        let v209 = constructor_put_in_xreg(ctx, v98);
                                        let v204 = &constructor_unmasked(ctx);
                                        let v205 = C::vstate_from_type(ctx, v12);
                                        let v2060 = constructor_rv_vmin_vx(ctx, v202, v209, v204, v205);
                                        let v2061 = constructor_output_vreg(ctx, v2060);
                                        let v2062 = Some(v2061);
                                        // Rule at src\isa\riscv64\lower.isle line 2020.
                                        return v2062;
                                    }
                                }
                            }
                            let v202 = constructor_put_in_vreg(ctx, v64.0);
                            let v203 = constructor_put_in_vreg(ctx, v64.1);
                            let v204 = &constructor_unmasked(ctx);
                            let v205 = C::vstate_from_type(ctx, v12);
                            let v2057 = constructor_rv_vmin_vv(ctx, v202, v203, v204, v205);
                            let v2058 = constructor_output_vreg(ctx, v2057);
                            let v2059 = Some(v2058);
                            // Rule at src\isa\riscv64\lower.isle line 2017.
                            return v2059;
                        }
                        if v3 == I128 {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v2053 = constructor_icmp_to_int_compare(ctx, &IntCC::SignedLessThan, v64.0, v64.1);
                            let v2034 = C::put_in_regs(ctx, v64.0);
                            let v2035 = C::put_in_regs(ctx, v64.1);
                            let v2054 = constructor_gen_select_regs(ctx, v2053, v2034, v2035);
                            let v2055 = C::output(ctx, v2054);
                            let v2056 = Some(v2055);
                            // Rule at src\isa\riscv64\lower.isle line 2014.
                            return v2056;
                        }
                        let v749 = C::fits_in_64(ctx, v3);
                        if let Some(v750) = v749 {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v626 = constructor_sext(ctx, v64.0);
                            let v627 = constructor_sext(ctx, v64.1);
                            let v2048 = constructor_cmp_lt(ctx, v626, v627);
                            let v2049 = constructor_gen_select_xreg(ctx, v2048, v626, v627);
                            let v2050 = constructor_output_xreg(ctx, v2049);
                            let v2051 = Some(v2050);
                            // Rule at src\isa\riscv64\lower.isle line 2009.
                            return v2051;
                        }
                    }
                }
                &Opcode::Umin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v106 = C::def_inst(ctx, v64.0);
                            if let Some(v107) = v106 {
                                let v108 = &C::inst_data_value(ctx, v107);
                                if let &InstructionData::Unary {
                                    opcode: ref v109,
                                    arg: v110,
                                } = v108 {
                                    if let &Opcode::Splat = v109 {
                                        let v237 = constructor_put_in_vreg(ctx, v64.1);
                                        let v238 = constructor_put_in_xreg(ctx, v110);
                                        let v204 = &constructor_unmasked(ctx);
                                        let v205 = C::vstate_from_type(ctx, v12);
                                        let v2098 = constructor_rv_vminu_vx(ctx, v237, v238, v204, v205);
                                        let v2099 = constructor_output_vreg(ctx, v2098);
                                        let v2100 = Some(v2099);
                                        // Rule at src\isa\riscv64\lower.isle line 2061.
                                        return v2100;
                                    }
                                }
                            }
                            let v94 = C::def_inst(ctx, v64.1);
                            if let Some(v95) = v94 {
                                let v96 = &C::inst_data_value(ctx, v95);
                                if let &InstructionData::Unary {
                                    opcode: ref v97,
                                    arg: v98,
                                } = v96 {
                                    if let &Opcode::Splat = v97 {
                                        let v202 = constructor_put_in_vreg(ctx, v64.0);
                                        let v209 = constructor_put_in_xreg(ctx, v98);
                                        let v204 = &constructor_unmasked(ctx);
                                        let v205 = C::vstate_from_type(ctx, v12);
                                        let v2095 = constructor_rv_vminu_vx(ctx, v202, v209, v204, v205);
                                        let v2096 = constructor_output_vreg(ctx, v2095);
                                        let v2097 = Some(v2096);
                                        // Rule at src\isa\riscv64\lower.isle line 2058.
                                        return v2097;
                                    }
                                }
                            }
                            let v202 = constructor_put_in_vreg(ctx, v64.0);
                            let v203 = constructor_put_in_vreg(ctx, v64.1);
                            let v204 = &constructor_unmasked(ctx);
                            let v205 = C::vstate_from_type(ctx, v12);
                            let v2092 = constructor_rv_vminu_vv(ctx, v202, v203, v204, v205);
                            let v2093 = constructor_output_vreg(ctx, v2092);
                            let v2094 = Some(v2093);
                            // Rule at src\isa\riscv64\lower.isle line 2055.
                            return v2094;
                        }
                        if v3 == I128 {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v2088 = constructor_icmp_to_int_compare(ctx, &IntCC::UnsignedLessThan, v64.0, v64.1);
                            let v2034 = C::put_in_regs(ctx, v64.0);
                            let v2035 = C::put_in_regs(ctx, v64.1);
                            let v2089 = constructor_gen_select_regs(ctx, v2088, v2034, v2035);
                            let v2090 = C::output(ctx, v2089);
                            let v2091 = Some(v2090);
                            // Rule at src\isa\riscv64\lower.isle line 2052.
                            return v2091;
                        }
                        let v749 = C::fits_in_64(ctx, v3);
                        if let Some(v750) = v749 {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v640 = constructor_zext(ctx, v64.0);
                            let v641 = constructor_zext(ctx, v64.1);
                            let v2084 = constructor_cmp_ltu(ctx, v640, v641);
                            let v2085 = constructor_gen_select_xreg(ctx, v2084, v640, v641);
                            let v2086 = constructor_output_xreg(ctx, v2085);
                            let v2087 = Some(v2086);
                            // Rule at src\isa\riscv64\lower.isle line 2047.
                            return v2087;
                        }
                    }
                }
                &Opcode::Smax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v106 = C::def_inst(ctx, v64.0);
                            if let Some(v107) = v106 {
                                let v108 = &C::inst_data_value(ctx, v107);
                                if let &InstructionData::Unary {
                                    opcode: ref v109,
                                    arg: v110,
                                } = v108 {
                                    if let &Opcode::Splat = v109 {
                                        let v237 = constructor_put_in_vreg(ctx, v64.1);
                                        let v238 = constructor_put_in_xreg(ctx, v110);
                                        let v204 = &constructor_unmasked(ctx);
                                        let v205 = C::vstate_from_type(ctx, v12);
                                        let v2045 = constructor_rv_vmax_vx(ctx, v237, v238, v204, v205);
                                        let v2046 = constructor_output_vreg(ctx, v2045);
                                        let v2047 = Some(v2046);
                                        // Rule at src\isa\riscv64\lower.isle line 2004.
                                        return v2047;
                                    }
                                }
                            }
                            let v94 = C::def_inst(ctx, v64.1);
                            if let Some(v95) = v94 {
                                let v96 = &C::inst_data_value(ctx, v95);
                                if let &InstructionData::Unary {
                                    opcode: ref v97,
                                    arg: v98,
                                } = v96 {
                                    if let &Opcode::Splat = v97 {
                                        let v202 = constructor_put_in_vreg(ctx, v64.0);
                                        let v209 = constructor_put_in_xreg(ctx, v98);
                                        let v204 = &constructor_unmasked(ctx);
                                        let v205 = C::vstate_from_type(ctx, v12);
                                        let v2042 = constructor_rv_vmax_vx(ctx, v202, v209, v204, v205);
                                        let v2043 = constructor_output_vreg(ctx, v2042);
                                        let v2044 = Some(v2043);
                                        // Rule at src\isa\riscv64\lower.isle line 2001.
                                        return v2044;
                                    }
                                }
                            }
                            let v202 = constructor_put_in_vreg(ctx, v64.0);
                            let v203 = constructor_put_in_vreg(ctx, v64.1);
                            let v204 = &constructor_unmasked(ctx);
                            let v205 = C::vstate_from_type(ctx, v12);
                            let v2039 = constructor_rv_vmax_vv(ctx, v202, v203, v204, v205);
                            let v2040 = constructor_output_vreg(ctx, v2039);
                            let v2041 = Some(v2040);
                            // Rule at src\isa\riscv64\lower.isle line 1998.
                            return v2041;
                        }
                        if v3 == I128 {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v2033 = constructor_icmp_to_int_compare(ctx, &IntCC::SignedGreaterThan, v64.0, v64.1);
                            let v2034 = C::put_in_regs(ctx, v64.0);
                            let v2035 = C::put_in_regs(ctx, v64.1);
                            let v2036 = constructor_gen_select_regs(ctx, v2033, v2034, v2035);
                            let v2037 = C::output(ctx, v2036);
                            let v2038 = Some(v2037);
                            // Rule at src\isa\riscv64\lower.isle line 1995.
                            return v2038;
                        }
                        let v749 = C::fits_in_64(ctx, v3);
                        if let Some(v750) = v749 {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v626 = constructor_sext(ctx, v64.0);
                            let v627 = constructor_sext(ctx, v64.1);
                            let v2028 = constructor_cmp_gt(ctx, v626, v627);
                            let v2029 = constructor_gen_select_xreg(ctx, v2028, v626, v627);
                            let v2030 = constructor_output_xreg(ctx, v2029);
                            let v2031 = Some(v2030);
                            // Rule at src\isa\riscv64\lower.isle line 1990.
                            return v2031;
                        }
                    }
                }
                &Opcode::Umax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v106 = C::def_inst(ctx, v64.0);
                            if let Some(v107) = v106 {
                                let v108 = &C::inst_data_value(ctx, v107);
                                if let &InstructionData::Unary {
                                    opcode: ref v109,
                                    arg: v110,
                                } = v108 {
                                    if let &Opcode::Splat = v109 {
                                        let v237 = constructor_put_in_vreg(ctx, v64.1);
                                        let v238 = constructor_put_in_xreg(ctx, v110);
                                        let v204 = &constructor_unmasked(ctx);
                                        let v205 = C::vstate_from_type(ctx, v12);
                                        let v2081 = constructor_rv_vmaxu_vx(ctx, v237, v238, v204, v205);
                                        let v2082 = constructor_output_vreg(ctx, v2081);
                                        let v2083 = Some(v2082);
                                        // Rule at src\isa\riscv64\lower.isle line 2042.
                                        return v2083;
                                    }
                                }
                            }
                            let v94 = C::def_inst(ctx, v64.1);
                            if let Some(v95) = v94 {
                                let v96 = &C::inst_data_value(ctx, v95);
                                if let &InstructionData::Unary {
                                    opcode: ref v97,
                                    arg: v98,
                                } = v96 {
                                    if let &Opcode::Splat = v97 {
                                        let v202 = constructor_put_in_vreg(ctx, v64.0);
                                        let v209 = constructor_put_in_xreg(ctx, v98);
                                        let v204 = &constructor_unmasked(ctx);
                                        let v205 = C::vstate_from_type(ctx, v12);
                                        let v2078 = constructor_rv_vmaxu_vx(ctx, v202, v209, v204, v205);
                                        let v2079 = constructor_output_vreg(ctx, v2078);
                                        let v2080 = Some(v2079);
                                        // Rule at src\isa\riscv64\lower.isle line 2039.
                                        return v2080;
                                    }
                                }
                            }
                            let v202 = constructor_put_in_vreg(ctx, v64.0);
                            let v203 = constructor_put_in_vreg(ctx, v64.1);
                            let v204 = &constructor_unmasked(ctx);
                            let v205 = C::vstate_from_type(ctx, v12);
                            let v2075 = constructor_rv_vmaxu_vv(ctx, v202, v203, v204, v205);
                            let v2076 = constructor_output_vreg(ctx, v2075);
                            let v2077 = Some(v2076);
                            // Rule at src\isa\riscv64\lower.isle line 2036.
                            return v2077;
                        }
                        if v3 == I128 {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v2071 = constructor_icmp_to_int_compare(ctx, &IntCC::UnsignedGreaterThan, v64.0, v64.1);
                            let v2034 = C::put_in_regs(ctx, v64.0);
                            let v2035 = C::put_in_regs(ctx, v64.1);
                            let v2072 = constructor_gen_select_regs(ctx, v2071, v2034, v2035);
                            let v2073 = C::output(ctx, v2072);
                            let v2074 = Some(v2073);
                            // Rule at src\isa\riscv64\lower.isle line 2033.
                            return v2074;
                        }
                        let v749 = C::fits_in_64(ctx, v3);
                        if let Some(v750) = v749 {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v640 = constructor_zext(ctx, v64.0);
                            let v641 = constructor_zext(ctx, v64.1);
                            let v2066 = constructor_cmp_gtu(ctx, v640, v641);
                            let v2067 = constructor_gen_select_xreg(ctx, v2066, v640, v641);
                            let v2068 = constructor_output_xreg(ctx, v2067);
                            let v2069 = Some(v2068);
                            // Rule at src\isa\riscv64\lower.isle line 2028.
                            return v2069;
                        }
                    }
                }
                &Opcode::AvgRound => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v1268 = constructor_u64_to_uimm5(ctx, 0x1_u64);
                            if let Some(v1269) = v1268 {
                                let v64 = C::unpack_value_array_2(ctx, v63);
                                let v202 = constructor_put_in_vreg(ctx, v64.0);
                                let v203 = constructor_put_in_vreg(ctx, v64.1);
                                let v204 = &constructor_unmasked(ctx);
                                let v205 = C::vstate_from_type(ctx, v12);
                                let v828 = constructor_rv_vand_vv(ctx, v202, v203, v204, v205);
                                let v2827 = constructor_put_in_vreg(ctx, v64.0);
                                let v2828 = constructor_put_in_vreg(ctx, v64.1);
                                let v2829 = constructor_rv_vxor_vv(ctx, v2827, v2828, v204, v205);
                                let v2830 = constructor_rv_vssrl_vi(ctx, v2829, v1269, v204, v205);
                                let v2831 = constructor_rv_vadd_vv(ctx, v828, v2830, v204, v205);
                                let v2832 = constructor_output_vreg(ctx, v2831);
                                let v2833 = Some(v2832);
                                // Rule at src\isa\riscv64\lower.isle line 2956.
                                return v2833;
                            }
                        }
                    }
                }
                &Opcode::UaddSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v256 = constructor_replicated_imm5(ctx, v64.0);
                            if let Some(v257) = v256 {
                                let v237 = constructor_put_in_vreg(ctx, v64.1);
                                let v204 = &constructor_unmasked(ctx);
                                let v205 = C::vstate_from_type(ctx, v12);
                                let v2663 = constructor_rv_vsaddu_vi(ctx, v237, v257, v204, v205);
                                let v2664 = constructor_output_vreg(ctx, v2663);
                                let v2665 = Some(v2664);
                                // Rule at src\isa\riscv64\lower.isle line 2746.
                                return v2665;
                            }
                            let v232 = constructor_replicated_imm5(ctx, v64.1);
                            if let Some(v233) = v232 {
                                let v202 = constructor_put_in_vreg(ctx, v64.0);
                                let v204 = &constructor_unmasked(ctx);
                                let v205 = C::vstate_from_type(ctx, v12);
                                let v2660 = constructor_rv_vsaddu_vi(ctx, v202, v233, v204, v205);
                                let v2661 = constructor_output_vreg(ctx, v2660);
                                let v2662 = Some(v2661);
                                // Rule at src\isa\riscv64\lower.isle line 2742.
                                return v2662;
                            }
                            let v106 = C::def_inst(ctx, v64.0);
                            if let Some(v107) = v106 {
                                let v108 = &C::inst_data_value(ctx, v107);
                                if let &InstructionData::Unary {
                                    opcode: ref v109,
                                    arg: v110,
                                } = v108 {
                                    if let &Opcode::Splat = v109 {
                                        let v237 = constructor_put_in_vreg(ctx, v64.1);
                                        let v238 = constructor_put_in_xreg(ctx, v110);
                                        let v204 = &constructor_unmasked(ctx);
                                        let v205 = C::vstate_from_type(ctx, v12);
                                        let v2657 = constructor_rv_vsaddu_vx(ctx, v237, v238, v204, v205);
                                        let v2658 = constructor_output_vreg(ctx, v2657);
                                        let v2659 = Some(v2658);
                                        // Rule at src\isa\riscv64\lower.isle line 2739.
                                        return v2659;
                                    }
                                }
                            }
                            let v94 = C::def_inst(ctx, v64.1);
                            if let Some(v95) = v94 {
                                let v96 = &C::inst_data_value(ctx, v95);
                                if let &InstructionData::Unary {
                                    opcode: ref v97,
                                    arg: v98,
                                } = v96 {
                                    if let &Opcode::Splat = v97 {
                                        let v202 = constructor_put_in_vreg(ctx, v64.0);
                                        let v209 = constructor_put_in_xreg(ctx, v98);
                                        let v204 = &constructor_unmasked(ctx);
                                        let v205 = C::vstate_from_type(ctx, v12);
                                        let v2654 = constructor_rv_vsaddu_vx(ctx, v202, v209, v204, v205);
                                        let v2655 = constructor_output_vreg(ctx, v2654);
                                        let v2656 = Some(v2655);
                                        // Rule at src\isa\riscv64\lower.isle line 2736.
                                        return v2656;
                                    }
                                }
                            }
                            let v202 = constructor_put_in_vreg(ctx, v64.0);
                            let v203 = constructor_put_in_vreg(ctx, v64.1);
                            let v204 = &constructor_unmasked(ctx);
                            let v205 = C::vstate_from_type(ctx, v12);
                            let v2651 = constructor_rv_vsaddu_vv(ctx, v202, v203, v204, v205);
                            let v2652 = constructor_output_vreg(ctx, v2651);
                            let v2653 = Some(v2652);
                            // Rule at src\isa\riscv64\lower.isle line 2733.
                            return v2653;
                        }
                    }
                }
                &Opcode::SaddSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v256 = constructor_replicated_imm5(ctx, v64.0);
                            if let Some(v257) = v256 {
                                let v237 = constructor_put_in_vreg(ctx, v64.1);
                                let v204 = &constructor_unmasked(ctx);
                                let v205 = C::vstate_from_type(ctx, v12);
                                let v2678 = constructor_rv_vsadd_vi(ctx, v237, v257, v204, v205);
                                let v2679 = constructor_output_vreg(ctx, v2678);
                                let v2680 = Some(v2679);
                                // Rule at src\isa\riscv64\lower.isle line 2765.
                                return v2680;
                            }
                            let v232 = constructor_replicated_imm5(ctx, v64.1);
                            if let Some(v233) = v232 {
                                let v202 = constructor_put_in_vreg(ctx, v64.0);
                                let v204 = &constructor_unmasked(ctx);
                                let v205 = C::vstate_from_type(ctx, v12);
                                let v2675 = constructor_rv_vsadd_vi(ctx, v202, v233, v204, v205);
                                let v2676 = constructor_output_vreg(ctx, v2675);
                                let v2677 = Some(v2676);
                                // Rule at src\isa\riscv64\lower.isle line 2761.
                                return v2677;
                            }
                            let v106 = C::def_inst(ctx, v64.0);
                            if let Some(v107) = v106 {
                                let v108 = &C::inst_data_value(ctx, v107);
                                if let &InstructionData::Unary {
                                    opcode: ref v109,
                                    arg: v110,
                                } = v108 {
                                    if let &Opcode::Splat = v109 {
                                        let v237 = constructor_put_in_vreg(ctx, v64.1);
                                        let v238 = constructor_put_in_xreg(ctx, v110);
                                        let v204 = &constructor_unmasked(ctx);
                                        let v205 = C::vstate_from_type(ctx, v12);
                                        let v2672 = constructor_rv_vsadd_vx(ctx, v237, v238, v204, v205);
                                        let v2673 = constructor_output_vreg(ctx, v2672);
                                        let v2674 = Some(v2673);
                                        // Rule at src\isa\riscv64\lower.isle line 2758.
                                        return v2674;
                                    }
                                }
                            }
                            let v94 = C::def_inst(ctx, v64.1);
                            if let Some(v95) = v94 {
                                let v96 = &C::inst_data_value(ctx, v95);
                                if let &InstructionData::Unary {
                                    opcode: ref v97,
                                    arg: v98,
                                } = v96 {
                                    if let &Opcode::Splat = v97 {
                                        let v202 = constructor_put_in_vreg(ctx, v64.0);
                                        let v209 = constructor_put_in_xreg(ctx, v98);
                                        let v204 = &constructor_unmasked(ctx);
                                        let v205 = C::vstate_from_type(ctx, v12);
                                        let v2669 = constructor_rv_vsadd_vx(ctx, v202, v209, v204, v205);
                                        let v2670 = constructor_output_vreg(ctx, v2669);
                                        let v2671 = Some(v2670);
                                        // Rule at src\isa\riscv64\lower.isle line 2755.
                                        return v2671;
                                    }
                                }
                            }
                            let v202 = constructor_put_in_vreg(ctx, v64.0);
                            let v203 = constructor_put_in_vreg(ctx, v64.1);
                            let v204 = &constructor_unmasked(ctx);
                            let v205 = C::vstate_from_type(ctx, v12);
                            let v2666 = constructor_rv_vsadd_vv(ctx, v202, v203, v204, v205);
                            let v2667 = constructor_output_vreg(ctx, v2666);
                            let v2668 = Some(v2667);
                            // Rule at src\isa\riscv64\lower.isle line 2752.
                            return v2668;
                        }
                    }
                }
                &Opcode::UsubSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v94 = C::def_inst(ctx, v64.1);
                            if let Some(v95) = v94 {
                                let v96 = &C::inst_data_value(ctx, v95);
                                if let &InstructionData::Unary {
                                    opcode: ref v97,
                                    arg: v98,
                                } = v96 {
                                    if let &Opcode::Splat = v97 {
                                        let v202 = constructor_put_in_vreg(ctx, v64.0);
                                        let v209 = constructor_put_in_xreg(ctx, v98);
                                        let v204 = &constructor_unmasked(ctx);
                                        let v205 = C::vstate_from_type(ctx, v12);
                                        let v2684 = constructor_rv_vssubu_vx(ctx, v202, v209, v204, v205);
                                        let v2685 = constructor_output_vreg(ctx, v2684);
                                        let v2686 = Some(v2685);
                                        // Rule at src\isa\riscv64\lower.isle line 2774.
                                        return v2686;
                                    }
                                }
                            }
                            let v202 = constructor_put_in_vreg(ctx, v64.0);
                            let v203 = constructor_put_in_vreg(ctx, v64.1);
                            let v204 = &constructor_unmasked(ctx);
                            let v205 = C::vstate_from_type(ctx, v12);
                            let v2681 = constructor_rv_vssubu_vv(ctx, v202, v203, v204, v205);
                            let v2682 = constructor_output_vreg(ctx, v2681);
                            let v2683 = Some(v2682);
                            // Rule at src\isa\riscv64\lower.isle line 2771.
                            return v2683;
                        }
                    }
                }
                &Opcode::SsubSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v94 = C::def_inst(ctx, v64.1);
                            if let Some(v95) = v94 {
                                let v96 = &C::inst_data_value(ctx, v95);
                                if let &InstructionData::Unary {
                                    opcode: ref v97,
                                    arg: v98,
                                } = v96 {
                                    if let &Opcode::Splat = v97 {
                                        let v202 = constructor_put_in_vreg(ctx, v64.0);
                                        let v209 = constructor_put_in_xreg(ctx, v98);
                                        let v204 = &constructor_unmasked(ctx);
                                        let v205 = C::vstate_from_type(ctx, v12);
                                        let v2690 = constructor_rv_vssub_vx(ctx, v202, v209, v204, v205);
                                        let v2691 = constructor_output_vreg(ctx, v2690);
                                        let v2692 = Some(v2691);
                                        // Rule at src\isa\riscv64\lower.isle line 2782.
                                        return v2692;
                                    }
                                }
                            }
                            let v202 = constructor_put_in_vreg(ctx, v64.0);
                            let v203 = constructor_put_in_vreg(ctx, v64.1);
                            let v204 = &constructor_unmasked(ctx);
                            let v205 = C::vstate_from_type(ctx, v12);
                            let v2687 = constructor_rv_vssub_vv(ctx, v202, v203, v204, v205);
                            let v2688 = constructor_output_vreg(ctx, v2687);
                            let v2689 = Some(v2688);
                            // Rule at src\isa\riscv64\lower.isle line 2779.
                            return v2689;
                        }
                    }
                }
                &Opcode::Iadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v256 = constructor_replicated_imm5(ctx, v64.0);
                            if let Some(v257) = v256 {
                                let v237 = constructor_put_in_vreg(ctx, v64.1);
                                let v204 = &constructor_unmasked(ctx);
                                let v205 = C::vstate_from_type(ctx, v12);
                                let v258 = constructor_rv_vadd_vi(ctx, v237, v257, v204, v205);
                                let v259 = constructor_output_vreg(ctx, v258);
                                let v260 = Some(v259);
                                // Rule at src\isa\riscv64\lower.isle line 150.
                                return v260;
                            }
                            let v232 = constructor_replicated_imm5(ctx, v64.1);
                            if let Some(v233) = v232 {
                                let v202 = constructor_put_in_vreg(ctx, v64.0);
                                let v204 = &constructor_unmasked(ctx);
                                let v205 = C::vstate_from_type(ctx, v12);
                                let v234 = constructor_rv_vadd_vi(ctx, v202, v233, v204, v205);
                                let v235 = constructor_output_vreg(ctx, v234);
                                let v236 = Some(v235);
                                // Rule at src\isa\riscv64\lower.isle line 132.
                                return v236;
                            }
                            let v106 = C::def_inst(ctx, v64.0);
                            if let Some(v107) = v106 {
                                let v108 = &C::inst_data_value(ctx, v107);
                                match v108 {
                                    &InstructionData::Binary {
                                        opcode: ref v134,
                                        args: ref v135,
                                    } => {
                                        if let &Opcode::Imul = v134 {
                                            let v136 = C::unpack_value_array_2(ctx, v135);
                                            let v164 = C::def_inst(ctx, v136.0);
                                            if let Some(v165) = v164 {
                                                let v166 = &C::inst_data_value(ctx, v165);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v167,
                                                    arg: v168,
                                                } = v166 {
                                                    if let &Opcode::Splat = v167 {
                                                        let v237 = constructor_put_in_vreg(ctx, v64.1);
                                                        let v391 = constructor_put_in_vreg(ctx, v136.1);
                                                        let v392 = constructor_put_in_xreg(ctx, v168);
                                                        let v204 = &constructor_unmasked(ctx);
                                                        let v205 = C::vstate_from_type(ctx, v12);
                                                        let v393 = constructor_rv_vmacc_vx(ctx, v237, v391, v392, v204, v205);
                                                        let v394 = constructor_output_vreg(ctx, v393);
                                                        let v395 = Some(v394);
                                                        // Rule at src\isa\riscv64\lower.isle line 285.
                                                        return v395;
                                                    }
                                                }
                                            }
                                            let v382 = C::def_inst(ctx, v136.1);
                                            if let Some(v383) = v382 {
                                                let v384 = &C::inst_data_value(ctx, v383);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v385,
                                                    arg: v386,
                                                } = v384 {
                                                    if let &Opcode::Splat = v385 {
                                                        let v237 = constructor_put_in_vreg(ctx, v64.1);
                                                        let v377 = constructor_put_in_vreg(ctx, v136.0);
                                                        let v387 = constructor_put_in_xreg(ctx, v386);
                                                        let v204 = &constructor_unmasked(ctx);
                                                        let v205 = C::vstate_from_type(ctx, v12);
                                                        let v388 = constructor_rv_vmacc_vx(ctx, v237, v377, v387, v204, v205);
                                                        let v389 = constructor_output_vreg(ctx, v388);
                                                        let v390 = Some(v389);
                                                        // Rule at src\isa\riscv64\lower.isle line 282.
                                                        return v390;
                                                    }
                                                }
                                            }
                                            let v237 = constructor_put_in_vreg(ctx, v64.1);
                                            let v377 = constructor_put_in_vreg(ctx, v136.0);
                                            let v378 = constructor_put_in_vreg(ctx, v136.1);
                                            let v204 = &constructor_unmasked(ctx);
                                            let v205 = C::vstate_from_type(ctx, v12);
                                            let v379 = constructor_rv_vmacc_vv(ctx, v237, v377, v378, v204, v205);
                                            let v380 = constructor_output_vreg(ctx, v379);
                                            let v381 = Some(v380);
                                            // Rule at src\isa\riscv64\lower.isle line 279.
                                            return v381;
                                        }
                                    }
                                    &InstructionData::Unary {
                                        opcode: ref v109,
                                        arg: v110,
                                    } => {
                                        match v109 {
                                            &Opcode::Splat => {
                                                let v242 = C::def_inst(ctx, v110);
                                                if let Some(v243) = v242 {
                                                    let v244 = &C::inst_data_value(ctx, v243);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v245,
                                                        arg: v246,
                                                    } = v244 {
                                                        match v245 {
                                                            &Opcode::Uextend => {
                                                                let v94 = C::def_inst(ctx, v64.1);
                                                                if let Some(v95) = v94 {
                                                                    let v96 = &C::inst_data_value(ctx, v95);
                                                                    if let &InstructionData::Unary {
                                                                        opcode: ref v97,
                                                                        arg: v98,
                                                                    } = v96 {
                                                                        match v97 {
                                                                            &Opcode::UwidenLow => {
                                                                                let v99 = C::value_type(ctx, v98);
                                                                                let v286 = C::lane_type(ctx, v99);
                                                                                let v247 = C::value_type(ctx, v246);
                                                                                let v287 = C::ty_equal(ctx, v286, v247);
                                                                                if v287 == true {
                                                                                    let v288 = constructor_put_in_vreg(ctx, v98);
                                                                                    let v249 = constructor_put_in_xreg(ctx, v246);
                                                                                    let v204 = &constructor_unmasked(ctx);
                                                                                    let v262 = C::ty_half_lanes(ctx, v99);
                                                                                    let v263 = v262?;
                                                                                    let v264 = C::vstate_from_type(ctx, v263);
                                                                                    let v265 = C::vstate_mf2(ctx, v264);
                                                                                    let v327 = constructor_rv_vwaddu_vx(ctx, v288, v249, v204, v265);
                                                                                    let v328 = constructor_output_vreg(ctx, v327);
                                                                                    let v329 = Some(v328);
                                                                                    // Rule at src\isa\riscv64\lower.isle line 216.
                                                                                    return v329;
                                                                                }
                                                                            }
                                                                            &Opcode::UwidenHigh => {
                                                                                let v99 = C::value_type(ctx, v98);
                                                                                let v286 = C::lane_type(ctx, v99);
                                                                                let v247 = C::value_type(ctx, v246);
                                                                                let v287 = C::ty_equal(ctx, v286, v247);
                                                                                if v287 == true {
                                                                                    let v288 = constructor_put_in_vreg(ctx, v98);
                                                                                    let v310 = constructor_gen_slidedown_half(ctx, v99, v288);
                                                                                    let v311 = constructor_put_in_xreg(ctx, v246);
                                                                                    let v204 = &constructor_unmasked(ctx);
                                                                                    let v262 = C::ty_half_lanes(ctx, v99);
                                                                                    let v263 = v262?;
                                                                                    let v264 = C::vstate_from_type(ctx, v263);
                                                                                    let v265 = C::vstate_mf2(ctx, v264);
                                                                                    let v342 = constructor_rv_vwaddu_vx(ctx, v310, v311, v204, v265);
                                                                                    let v343 = constructor_output_vreg(ctx, v342);
                                                                                    let v344 = Some(v343);
                                                                                    // Rule at src\isa\riscv64\lower.isle line 239.
                                                                                    return v344;
                                                                                }
                                                                            }
                                                                            _ => {}
                                                                        }
                                                                    }
                                                                }
                                                                let v219 = C::ty_half_width(ctx, v12);
                                                                if let Some(v220) = v219 {
                                                                    let v221 = C::lane_type(ctx, v220);
                                                                    let v247 = C::value_type(ctx, v246);
                                                                    let v248 = C::ty_equal(ctx, v221, v247);
                                                                    if v248 == true {
                                                                        let v237 = constructor_put_in_vreg(ctx, v64.1);
                                                                        let v249 = constructor_put_in_xreg(ctx, v246);
                                                                        let v204 = &constructor_unmasked(ctx);
                                                                        let v224 = C::vstate_from_type(ctx, v220);
                                                                        let v225 = C::vstate_mf2(ctx, v224);
                                                                        let v253 = constructor_rv_vwaddu_wx(ctx, v237, v249, v204, v225);
                                                                        let v254 = constructor_output_vreg(ctx, v253);
                                                                        let v255 = Some(v254);
                                                                        // Rule at src\isa\riscv64\lower.isle line 145.
                                                                        return v255;
                                                                    }
                                                                }
                                                            }
                                                            &Opcode::Sextend => {
                                                                let v94 = C::def_inst(ctx, v64.1);
                                                                if let Some(v95) = v94 {
                                                                    let v96 = &C::inst_data_value(ctx, v95);
                                                                    if let &InstructionData::Unary {
                                                                        opcode: ref v97,
                                                                        arg: v98,
                                                                    } = v96 {
                                                                        match v97 {
                                                                            &Opcode::SwidenLow => {
                                                                                let v99 = C::value_type(ctx, v98);
                                                                                let v286 = C::lane_type(ctx, v99);
                                                                                let v247 = C::value_type(ctx, v246);
                                                                                let v287 = C::ty_equal(ctx, v286, v247);
                                                                                if v287 == true {
                                                                                    let v288 = constructor_put_in_vreg(ctx, v98);
                                                                                    let v249 = constructor_put_in_xreg(ctx, v246);
                                                                                    let v204 = &constructor_unmasked(ctx);
                                                                                    let v262 = C::ty_half_lanes(ctx, v99);
                                                                                    let v263 = v262?;
                                                                                    let v264 = C::vstate_from_type(ctx, v263);
                                                                                    let v265 = C::vstate_mf2(ctx, v264);
                                                                                    let v289 = constructor_rv_vwadd_vx(ctx, v288, v249, v204, v265);
                                                                                    let v290 = constructor_output_vreg(ctx, v289);
                                                                                    let v291 = Some(v290);
                                                                                    // Rule at src\isa\riscv64\lower.isle line 171.
                                                                                    return v291;
                                                                                }
                                                                            }
                                                                            &Opcode::SwidenHigh => {
                                                                                let v99 = C::value_type(ctx, v98);
                                                                                let v286 = C::lane_type(ctx, v99);
                                                                                let v247 = C::value_type(ctx, v246);
                                                                                let v287 = C::ty_equal(ctx, v286, v247);
                                                                                if v287 == true {
                                                                                    let v288 = constructor_put_in_vreg(ctx, v98);
                                                                                    let v310 = constructor_gen_slidedown_half(ctx, v99, v288);
                                                                                    let v311 = constructor_put_in_xreg(ctx, v246);
                                                                                    let v204 = &constructor_unmasked(ctx);
                                                                                    let v262 = C::ty_half_lanes(ctx, v99);
                                                                                    let v263 = v262?;
                                                                                    let v264 = C::vstate_from_type(ctx, v263);
                                                                                    let v265 = C::vstate_mf2(ctx, v264);
                                                                                    let v312 = constructor_rv_vwadd_vx(ctx, v310, v311, v204, v265);
                                                                                    let v313 = constructor_output_vreg(ctx, v312);
                                                                                    let v314 = Some(v313);
                                                                                    // Rule at src\isa\riscv64\lower.isle line 194.
                                                                                    return v314;
                                                                                }
                                                                            }
                                                                            _ => {}
                                                                        }
                                                                    }
                                                                }
                                                                let v219 = C::ty_half_width(ctx, v12);
                                                                if let Some(v220) = v219 {
                                                                    let v221 = C::lane_type(ctx, v220);
                                                                    let v247 = C::value_type(ctx, v246);
                                                                    let v248 = C::ty_equal(ctx, v221, v247);
                                                                    if v248 == true {
                                                                        let v237 = constructor_put_in_vreg(ctx, v64.1);
                                                                        let v249 = constructor_put_in_xreg(ctx, v246);
                                                                        let v204 = &constructor_unmasked(ctx);
                                                                        let v224 = C::vstate_from_type(ctx, v220);
                                                                        let v225 = C::vstate_mf2(ctx, v224);
                                                                        let v250 = constructor_rv_vwadd_wx(ctx, v237, v249, v204, v225);
                                                                        let v251 = constructor_output_vreg(ctx, v250);
                                                                        let v252 = Some(v251);
                                                                        // Rule at src\isa\riscv64\lower.isle line 140.
                                                                        return v252;
                                                                    }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                let v237 = constructor_put_in_vreg(ctx, v64.1);
                                                let v238 = constructor_put_in_xreg(ctx, v110);
                                                let v204 = &constructor_unmasked(ctx);
                                                let v205 = C::vstate_from_type(ctx, v12);
                                                let v239 = constructor_rv_vadd_vx(ctx, v237, v238, v204, v205);
                                                let v240 = constructor_output_vreg(ctx, v239);
                                                let v241 = Some(v240);
                                                // Rule at src\isa\riscv64\lower.isle line 137.
                                                return v241;
                                            }
                                            &Opcode::Ineg => {
                                                let v242 = C::def_inst(ctx, v110);
                                                if let Some(v243) = v242 {
                                                    let v244 = &C::inst_data_value(ctx, v243);
                                                    if let &InstructionData::Binary {
                                                        opcode: ref v425,
                                                        args: ref v426,
                                                    } = v244 {
                                                        if let &Opcode::Imul = v425 {
                                                            let v427 = C::unpack_value_array_2(ctx, v426);
                                                            let v444 = C::def_inst(ctx, v427.0);
                                                            if let Some(v445) = v444 {
                                                                let v446 = &C::inst_data_value(ctx, v445);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v447,
                                                                    arg: v448,
                                                                } = v446 {
                                                                    if let &Opcode::Splat = v447 {
                                                                        let v237 = constructor_put_in_vreg(ctx, v64.1);
                                                                        let v449 = constructor_put_in_vreg(ctx, v427.1);
                                                                        let v450 = constructor_put_in_xreg(ctx, v448);
                                                                        let v204 = &constructor_unmasked(ctx);
                                                                        let v205 = C::vstate_from_type(ctx, v12);
                                                                        let v451 = constructor_rv_vnmsac_vx(ctx, v237, v449, v450, v204, v205);
                                                                        let v452 = constructor_output_vreg(ctx, v451);
                                                                        let v453 = Some(v452);
                                                                        // Rule at src\isa\riscv64\lower.isle line 305.
                                                                        return v453;
                                                                    }
                                                                }
                                                            }
                                                            let v435 = C::def_inst(ctx, v427.1);
                                                            if let Some(v436) = v435 {
                                                                let v437 = &C::inst_data_value(ctx, v436);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v438,
                                                                    arg: v439,
                                                                } = v437 {
                                                                    if let &Opcode::Splat = v438 {
                                                                        let v237 = constructor_put_in_vreg(ctx, v64.1);
                                                                        let v430 = constructor_put_in_vreg(ctx, v427.0);
                                                                        let v440 = constructor_put_in_xreg(ctx, v439);
                                                                        let v204 = &constructor_unmasked(ctx);
                                                                        let v205 = C::vstate_from_type(ctx, v12);
                                                                        let v441 = constructor_rv_vnmsac_vx(ctx, v237, v430, v440, v204, v205);
                                                                        let v442 = constructor_output_vreg(ctx, v441);
                                                                        let v443 = Some(v442);
                                                                        // Rule at src\isa\riscv64\lower.isle line 302.
                                                                        return v443;
                                                                    }
                                                                }
                                                            }
                                                            let v237 = constructor_put_in_vreg(ctx, v64.1);
                                                            let v430 = constructor_put_in_vreg(ctx, v427.0);
                                                            let v431 = constructor_put_in_vreg(ctx, v427.1);
                                                            let v204 = &constructor_unmasked(ctx);
                                                            let v205 = C::vstate_from_type(ctx, v12);
                                                            let v432 = constructor_rv_vnmsac_vv(ctx, v237, v430, v431, v204, v205);
                                                            let v433 = constructor_output_vreg(ctx, v432);
                                                            let v434 = Some(v433);
                                                            // Rule at src\isa\riscv64\lower.isle line 299.
                                                            return v434;
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::SwidenLow => {
                                                let v94 = C::def_inst(ctx, v64.1);
                                                if let Some(v95) = v94 {
                                                    let v96 = &C::inst_data_value(ctx, v95);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v97,
                                                        arg: v98,
                                                    } = v96 {
                                                        match v97 {
                                                            &Opcode::Splat => {
                                                                let v213 = C::def_inst(ctx, v98);
                                                                if let Some(v214) = v213 {
                                                                    let v215 = &C::inst_data_value(ctx, v214);
                                                                    if let &InstructionData::Unary {
                                                                        opcode: ref v216,
                                                                        arg: v217,
                                                                    } = v215 {
                                                                        if let &Opcode::Sextend = v216 {
                                                                            let v111 = C::value_type(ctx, v110);
                                                                            let v281 = C::lane_type(ctx, v111);
                                                                            let v218 = C::value_type(ctx, v217);
                                                                            let v282 = C::ty_equal(ctx, v281, v218);
                                                                            if v282 == true {
                                                                                let v277 = constructor_put_in_vreg(ctx, v110);
                                                                                let v223 = constructor_put_in_xreg(ctx, v217);
                                                                                let v204 = &constructor_unmasked(ctx);
                                                                                let v270 = C::ty_half_lanes(ctx, v111);
                                                                                let v271 = v270?;
                                                                                let v272 = C::vstate_from_type(ctx, v271);
                                                                                let v273 = C::vstate_mf2(ctx, v272);
                                                                                let v283 = constructor_rv_vwadd_vx(ctx, v277, v223, v204, v273);
                                                                                let v284 = constructor_output_vreg(ctx, v283);
                                                                                let v285 = Some(v284);
                                                                                // Rule at src\isa\riscv64\lower.isle line 166.
                                                                                return v285;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            &Opcode::SwidenLow => {
                                                                let v277 = constructor_put_in_vreg(ctx, v110);
                                                                let v261 = constructor_put_in_vreg(ctx, v98);
                                                                let v204 = &constructor_unmasked(ctx);
                                                                let v111 = C::value_type(ctx, v110);
                                                                let v270 = C::ty_half_lanes(ctx, v111);
                                                                let v271 = v270?;
                                                                let v272 = C::vstate_from_type(ctx, v271);
                                                                let v273 = C::vstate_mf2(ctx, v272);
                                                                let v278 = constructor_rv_vwadd_vv(ctx, v277, v261, v204, v273);
                                                                let v279 = constructor_output_vreg(ctx, v278);
                                                                let v280 = Some(v279);
                                                                // Rule at src\isa\riscv64\lower.isle line 162.
                                                                return v280;
                                                            }
                                                            &Opcode::SwidenHigh => {
                                                                let v277 = constructor_put_in_vreg(ctx, v110);
                                                                let v261 = constructor_put_in_vreg(ctx, v98);
                                                                let v111 = C::value_type(ctx, v110);
                                                                let v345 = constructor_gen_slidedown_half(ctx, v111, v261);
                                                                let v204 = &constructor_unmasked(ctx);
                                                                let v270 = C::ty_half_lanes(ctx, v111);
                                                                let v271 = v270?;
                                                                let v272 = C::vstate_from_type(ctx, v271);
                                                                let v273 = C::vstate_mf2(ctx, v272);
                                                                let v346 = constructor_rv_vwadd_vv(ctx, v277, v345, v204, v273);
                                                                let v347 = constructor_output_vreg(ctx, v346);
                                                                let v348 = Some(v347);
                                                                // Rule at src\isa\riscv64\lower.isle line 246.
                                                                return v348;
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                let v237 = constructor_put_in_vreg(ctx, v64.1);
                                                let v269 = constructor_put_in_vreg(ctx, v110);
                                                let v204 = &constructor_unmasked(ctx);
                                                let v111 = C::value_type(ctx, v110);
                                                let v270 = C::ty_half_lanes(ctx, v111);
                                                let v271 = v270?;
                                                let v272 = C::vstate_from_type(ctx, v271);
                                                let v273 = C::vstate_mf2(ctx, v272);
                                                let v274 = constructor_rv_vwadd_wv(ctx, v237, v269, v204, v273);
                                                let v275 = constructor_output_vreg(ctx, v274);
                                                let v276 = Some(v275);
                                                // Rule at src\isa\riscv64\lower.isle line 159.
                                                return v276;
                                            }
                                            &Opcode::SwidenHigh => {
                                                let v94 = C::def_inst(ctx, v64.1);
                                                if let Some(v95) = v94 {
                                                    let v96 = &C::inst_data_value(ctx, v95);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v97,
                                                        arg: v98,
                                                    } = v96 {
                                                        match v97 {
                                                            &Opcode::Splat => {
                                                                let v213 = C::def_inst(ctx, v98);
                                                                if let Some(v214) = v213 {
                                                                    let v215 = &C::inst_data_value(ctx, v214);
                                                                    if let &InstructionData::Unary {
                                                                        opcode: ref v216,
                                                                        arg: v217,
                                                                    } = v215 {
                                                                        if let &Opcode::Sextend = v216 {
                                                                            let v111 = C::value_type(ctx, v110);
                                                                            let v281 = C::lane_type(ctx, v111);
                                                                            let v218 = C::value_type(ctx, v217);
                                                                            let v282 = C::ty_equal(ctx, v281, v218);
                                                                            if v282 == true {
                                                                                let v277 = constructor_put_in_vreg(ctx, v110);
                                                                                let v300 = constructor_gen_slidedown_half(ctx, v111, v277);
                                                                                let v306 = constructor_put_in_xreg(ctx, v217);
                                                                                let v204 = &constructor_unmasked(ctx);
                                                                                let v270 = C::ty_half_lanes(ctx, v111);
                                                                                let v271 = v270?;
                                                                                let v272 = C::vstate_from_type(ctx, v271);
                                                                                let v273 = C::vstate_mf2(ctx, v272);
                                                                                let v307 = constructor_rv_vwadd_vx(ctx, v300, v306, v204, v273);
                                                                                let v308 = constructor_output_vreg(ctx, v307);
                                                                                let v309 = Some(v308);
                                                                                // Rule at src\isa\riscv64\lower.isle line 189.
                                                                                return v309;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            &Opcode::SwidenLow => {
                                                                let v277 = constructor_put_in_vreg(ctx, v110);
                                                                let v111 = C::value_type(ctx, v110);
                                                                let v300 = constructor_gen_slidedown_half(ctx, v111, v277);
                                                                let v301 = constructor_put_in_vreg(ctx, v98);
                                                                let v204 = &constructor_unmasked(ctx);
                                                                let v270 = C::ty_half_lanes(ctx, v111);
                                                                let v271 = v270?;
                                                                let v272 = C::vstate_from_type(ctx, v271);
                                                                let v273 = C::vstate_mf2(ctx, v272);
                                                                let v349 = constructor_rv_vwadd_vv(ctx, v300, v301, v204, v273);
                                                                let v350 = constructor_output_vreg(ctx, v349);
                                                                let v351 = Some(v350);
                                                                // Rule at src\isa\riscv64\lower.isle line 250.
                                                                return v351;
                                                            }
                                                            &Opcode::SwidenHigh => {
                                                                let v277 = constructor_put_in_vreg(ctx, v110);
                                                                let v111 = C::value_type(ctx, v110);
                                                                let v300 = constructor_gen_slidedown_half(ctx, v111, v277);
                                                                let v301 = constructor_put_in_vreg(ctx, v98);
                                                                let v302 = constructor_gen_slidedown_half(ctx, v111, v301);
                                                                let v204 = &constructor_unmasked(ctx);
                                                                let v270 = C::ty_half_lanes(ctx, v111);
                                                                let v271 = v270?;
                                                                let v272 = C::vstate_from_type(ctx, v271);
                                                                let v273 = C::vstate_mf2(ctx, v272);
                                                                let v303 = constructor_rv_vwadd_vv(ctx, v300, v302, v204, v273);
                                                                let v304 = constructor_output_vreg(ctx, v303);
                                                                let v305 = Some(v304);
                                                                // Rule at src\isa\riscv64\lower.isle line 185.
                                                                return v305;
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                let v237 = constructor_put_in_vreg(ctx, v64.1);
                                                let v269 = constructor_put_in_vreg(ctx, v110);
                                                let v111 = C::value_type(ctx, v110);
                                                let v296 = constructor_gen_slidedown_half(ctx, v111, v269);
                                                let v204 = &constructor_unmasked(ctx);
                                                let v270 = C::ty_half_lanes(ctx, v111);
                                                let v271 = v270?;
                                                let v272 = C::vstate_from_type(ctx, v271);
                                                let v273 = C::vstate_mf2(ctx, v272);
                                                let v297 = constructor_rv_vwadd_wv(ctx, v237, v296, v204, v273);
                                                let v298 = constructor_output_vreg(ctx, v297);
                                                let v299 = Some(v298);
                                                // Rule at src\isa\riscv64\lower.isle line 182.
                                                return v299;
                                            }
                                            &Opcode::UwidenLow => {
                                                let v94 = C::def_inst(ctx, v64.1);
                                                if let Some(v95) = v94 {
                                                    let v96 = &C::inst_data_value(ctx, v95);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v97,
                                                        arg: v98,
                                                    } = v96 {
                                                        match v97 {
                                                            &Opcode::Splat => {
                                                                let v213 = C::def_inst(ctx, v98);
                                                                if let Some(v214) = v213 {
                                                                    let v215 = &C::inst_data_value(ctx, v214);
                                                                    if let &InstructionData::Unary {
                                                                        opcode: ref v216,
                                                                        arg: v217,
                                                                    } = v215 {
                                                                        if let &Opcode::Uextend = v216 {
                                                                            let v111 = C::value_type(ctx, v110);
                                                                            let v281 = C::lane_type(ctx, v111);
                                                                            let v218 = C::value_type(ctx, v217);
                                                                            let v282 = C::ty_equal(ctx, v281, v218);
                                                                            if v282 == true {
                                                                                let v277 = constructor_put_in_vreg(ctx, v110);
                                                                                let v223 = constructor_put_in_xreg(ctx, v217);
                                                                                let v204 = &constructor_unmasked(ctx);
                                                                                let v270 = C::ty_half_lanes(ctx, v111);
                                                                                let v271 = v270?;
                                                                                let v272 = C::vstate_from_type(ctx, v271);
                                                                                let v273 = C::vstate_mf2(ctx, v272);
                                                                                let v324 = constructor_rv_vwaddu_vx(ctx, v277, v223, v204, v273);
                                                                                let v325 = constructor_output_vreg(ctx, v324);
                                                                                let v326 = Some(v325);
                                                                                // Rule at src\isa\riscv64\lower.isle line 211.
                                                                                return v326;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            &Opcode::UwidenLow => {
                                                                let v277 = constructor_put_in_vreg(ctx, v110);
                                                                let v261 = constructor_put_in_vreg(ctx, v98);
                                                                let v204 = &constructor_unmasked(ctx);
                                                                let v111 = C::value_type(ctx, v110);
                                                                let v270 = C::ty_half_lanes(ctx, v111);
                                                                let v271 = v270?;
                                                                let v272 = C::vstate_from_type(ctx, v271);
                                                                let v273 = C::vstate_mf2(ctx, v272);
                                                                let v321 = constructor_rv_vwaddu_vv(ctx, v277, v261, v204, v273);
                                                                let v322 = constructor_output_vreg(ctx, v321);
                                                                let v323 = Some(v322);
                                                                // Rule at src\isa\riscv64\lower.isle line 207.
                                                                return v323;
                                                            }
                                                            &Opcode::UwidenHigh => {
                                                                let v277 = constructor_put_in_vreg(ctx, v110);
                                                                let v261 = constructor_put_in_vreg(ctx, v98);
                                                                let v111 = C::value_type(ctx, v110);
                                                                let v345 = constructor_gen_slidedown_half(ctx, v111, v261);
                                                                let v204 = &constructor_unmasked(ctx);
                                                                let v270 = C::ty_half_lanes(ctx, v111);
                                                                let v271 = v270?;
                                                                let v272 = C::vstate_from_type(ctx, v271);
                                                                let v273 = C::vstate_mf2(ctx, v272);
                                                                let v352 = constructor_rv_vwaddu_vv(ctx, v277, v345, v204, v273);
                                                                let v353 = constructor_output_vreg(ctx, v352);
                                                                let v354 = Some(v353);
                                                                // Rule at src\isa\riscv64\lower.isle line 256.
                                                                return v354;
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                let v237 = constructor_put_in_vreg(ctx, v64.1);
                                                let v269 = constructor_put_in_vreg(ctx, v110);
                                                let v204 = &constructor_unmasked(ctx);
                                                let v111 = C::value_type(ctx, v110);
                                                let v270 = C::ty_half_lanes(ctx, v111);
                                                let v271 = v270?;
                                                let v272 = C::vstate_from_type(ctx, v271);
                                                let v273 = C::vstate_mf2(ctx, v272);
                                                let v318 = constructor_rv_vwaddu_wv(ctx, v237, v269, v204, v273);
                                                let v319 = constructor_output_vreg(ctx, v318);
                                                let v320 = Some(v319);
                                                // Rule at src\isa\riscv64\lower.isle line 204.
                                                return v320;
                                            }
                                            &Opcode::UwidenHigh => {
                                                let v94 = C::def_inst(ctx, v64.1);
                                                if let Some(v95) = v94 {
                                                    let v96 = &C::inst_data_value(ctx, v95);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v97,
                                                        arg: v98,
                                                    } = v96 {
                                                        match v97 {
                                                            &Opcode::Splat => {
                                                                let v213 = C::def_inst(ctx, v98);
                                                                if let Some(v214) = v213 {
                                                                    let v215 = &C::inst_data_value(ctx, v214);
                                                                    if let &InstructionData::Unary {
                                                                        opcode: ref v216,
                                                                        arg: v217,
                                                                    } = v215 {
                                                                        if let &Opcode::Uextend = v216 {
                                                                            let v111 = C::value_type(ctx, v110);
                                                                            let v281 = C::lane_type(ctx, v111);
                                                                            let v218 = C::value_type(ctx, v217);
                                                                            let v282 = C::ty_equal(ctx, v281, v218);
                                                                            if v282 == true {
                                                                                let v277 = constructor_put_in_vreg(ctx, v110);
                                                                                let v300 = constructor_gen_slidedown_half(ctx, v111, v277);
                                                                                let v306 = constructor_put_in_xreg(ctx, v217);
                                                                                let v204 = &constructor_unmasked(ctx);
                                                                                let v270 = C::ty_half_lanes(ctx, v111);
                                                                                let v271 = v270?;
                                                                                let v272 = C::vstate_from_type(ctx, v271);
                                                                                let v273 = C::vstate_mf2(ctx, v272);
                                                                                let v339 = constructor_rv_vwaddu_vx(ctx, v300, v306, v204, v273);
                                                                                let v340 = constructor_output_vreg(ctx, v339);
                                                                                let v341 = Some(v340);
                                                                                // Rule at src\isa\riscv64\lower.isle line 234.
                                                                                return v341;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            &Opcode::UwidenLow => {
                                                                let v277 = constructor_put_in_vreg(ctx, v110);
                                                                let v111 = C::value_type(ctx, v110);
                                                                let v300 = constructor_gen_slidedown_half(ctx, v111, v277);
                                                                let v301 = constructor_put_in_vreg(ctx, v98);
                                                                let v204 = &constructor_unmasked(ctx);
                                                                let v270 = C::ty_half_lanes(ctx, v111);
                                                                let v271 = v270?;
                                                                let v272 = C::vstate_from_type(ctx, v271);
                                                                let v273 = C::vstate_mf2(ctx, v272);
                                                                let v355 = constructor_rv_vwaddu_vv(ctx, v300, v301, v204, v273);
                                                                let v356 = constructor_output_vreg(ctx, v355);
                                                                let v357 = Some(v356);
                                                                // Rule at src\isa\riscv64\lower.isle line 260.
                                                                return v357;
                                                            }
                                                            &Opcode::UwidenHigh => {
                                                                let v277 = constructor_put_in_vreg(ctx, v110);
                                                                let v111 = C::value_type(ctx, v110);
                                                                let v300 = constructor_gen_slidedown_half(ctx, v111, v277);
                                                                let v301 = constructor_put_in_vreg(ctx, v98);
                                                                let v302 = constructor_gen_slidedown_half(ctx, v111, v301);
                                                                let v204 = &constructor_unmasked(ctx);
                                                                let v270 = C::ty_half_lanes(ctx, v111);
                                                                let v271 = v270?;
                                                                let v272 = C::vstate_from_type(ctx, v271);
                                                                let v273 = C::vstate_mf2(ctx, v272);
                                                                let v336 = constructor_rv_vwaddu_vv(ctx, v300, v302, v204, v273);
                                                                let v337 = constructor_output_vreg(ctx, v336);
                                                                let v338 = Some(v337);
                                                                // Rule at src\isa\riscv64\lower.isle line 230.
                                                                return v338;
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                let v237 = constructor_put_in_vreg(ctx, v64.1);
                                                let v269 = constructor_put_in_vreg(ctx, v110);
                                                let v111 = C::value_type(ctx, v110);
                                                let v296 = constructor_gen_slidedown_half(ctx, v111, v269);
                                                let v204 = &constructor_unmasked(ctx);
                                                let v270 = C::ty_half_lanes(ctx, v111);
                                                let v271 = v270?;
                                                let v272 = C::vstate_from_type(ctx, v271);
                                                let v273 = C::vstate_mf2(ctx, v272);
                                                let v333 = constructor_rv_vwaddu_wv(ctx, v237, v296, v204, v273);
                                                let v334 = constructor_output_vreg(ctx, v333);
                                                let v335 = Some(v334);
                                                // Rule at src\isa\riscv64\lower.isle line 227.
                                                return v335;
                                            }
                                            _ => {}
                                        }
                                    }
                                    _ => {}
                                }
                            }
                            let v94 = C::def_inst(ctx, v64.1);
                            if let Some(v95) = v94 {
                                let v96 = &C::inst_data_value(ctx, v95);
                                match v96 {
                                    &InstructionData::Binary {
                                        opcode: ref v116,
                                        args: ref v117,
                                    } => {
                                        if let &Opcode::Imul = v116 {
                                            let v118 = C::unpack_value_array_2(ctx, v117);
                                            let v152 = C::def_inst(ctx, v118.0);
                                            if let Some(v153) = v152 {
                                                let v154 = &C::inst_data_value(ctx, v153);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v155,
                                                    arg: v156,
                                                } = v154 {
                                                    if let &Opcode::Splat = v155 {
                                                        let v202 = constructor_put_in_vreg(ctx, v64.0);
                                                        let v372 = constructor_put_in_vreg(ctx, v118.1);
                                                        let v373 = constructor_put_in_xreg(ctx, v156);
                                                        let v204 = &constructor_unmasked(ctx);
                                                        let v205 = C::vstate_from_type(ctx, v12);
                                                        let v374 = constructor_rv_vmacc_vx(ctx, v202, v372, v373, v204, v205);
                                                        let v375 = constructor_output_vreg(ctx, v374);
                                                        let v376 = Some(v375);
                                                        // Rule at src\isa\riscv64\lower.isle line 276.
                                                        return v376;
                                                    }
                                                }
                                            }
                                            let v363 = C::def_inst(ctx, v118.1);
                                            if let Some(v364) = v363 {
                                                let v365 = &C::inst_data_value(ctx, v364);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v366,
                                                    arg: v367,
                                                } = v365 {
                                                    if let &Opcode::Splat = v366 {
                                                        let v202 = constructor_put_in_vreg(ctx, v64.0);
                                                        let v358 = constructor_put_in_vreg(ctx, v118.0);
                                                        let v368 = constructor_put_in_xreg(ctx, v367);
                                                        let v204 = &constructor_unmasked(ctx);
                                                        let v205 = C::vstate_from_type(ctx, v12);
                                                        let v369 = constructor_rv_vmacc_vx(ctx, v202, v358, v368, v204, v205);
                                                        let v370 = constructor_output_vreg(ctx, v369);
                                                        let v371 = Some(v370);
                                                        // Rule at src\isa\riscv64\lower.isle line 273.
                                                        return v371;
                                                    }
                                                }
                                            }
                                            let v202 = constructor_put_in_vreg(ctx, v64.0);
                                            let v358 = constructor_put_in_vreg(ctx, v118.0);
                                            let v359 = constructor_put_in_vreg(ctx, v118.1);
                                            let v204 = &constructor_unmasked(ctx);
                                            let v205 = C::vstate_from_type(ctx, v12);
                                            let v360 = constructor_rv_vmacc_vv(ctx, v202, v358, v359, v204, v205);
                                            let v361 = constructor_output_vreg(ctx, v360);
                                            let v362 = Some(v361);
                                            // Rule at src\isa\riscv64\lower.isle line 270.
                                            return v362;
                                        }
                                    }
                                    &InstructionData::Unary {
                                        opcode: ref v97,
                                        arg: v98,
                                    } => {
                                        match v97 {
                                            &Opcode::Splat => {
                                                let v213 = C::def_inst(ctx, v98);
                                                if let Some(v214) = v213 {
                                                    let v215 = &C::inst_data_value(ctx, v214);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v216,
                                                        arg: v217,
                                                    } = v215 {
                                                        match v216 {
                                                            &Opcode::Uextend => {
                                                                let v219 = C::ty_half_width(ctx, v12);
                                                                if let Some(v220) = v219 {
                                                                    let v221 = C::lane_type(ctx, v220);
                                                                    let v218 = C::value_type(ctx, v217);
                                                                    let v222 = C::ty_equal(ctx, v221, v218);
                                                                    if v222 == true {
                                                                        let v202 = constructor_put_in_vreg(ctx, v64.0);
                                                                        let v223 = constructor_put_in_xreg(ctx, v217);
                                                                        let v204 = &constructor_unmasked(ctx);
                                                                        let v224 = C::vstate_from_type(ctx, v220);
                                                                        let v225 = C::vstate_mf2(ctx, v224);
                                                                        let v229 = constructor_rv_vwaddu_wx(ctx, v202, v223, v204, v225);
                                                                        let v230 = constructor_output_vreg(ctx, v229);
                                                                        let v231 = Some(v230);
                                                                        // Rule at src\isa\riscv64\lower.isle line 127.
                                                                        return v231;
                                                                    }
                                                                }
                                                            }
                                                            &Opcode::Sextend => {
                                                                let v219 = C::ty_half_width(ctx, v12);
                                                                if let Some(v220) = v219 {
                                                                    let v221 = C::lane_type(ctx, v220);
                                                                    let v218 = C::value_type(ctx, v217);
                                                                    let v222 = C::ty_equal(ctx, v221, v218);
                                                                    if v222 == true {
                                                                        let v202 = constructor_put_in_vreg(ctx, v64.0);
                                                                        let v223 = constructor_put_in_xreg(ctx, v217);
                                                                        let v204 = &constructor_unmasked(ctx);
                                                                        let v224 = C::vstate_from_type(ctx, v220);
                                                                        let v225 = C::vstate_mf2(ctx, v224);
                                                                        let v226 = constructor_rv_vwadd_wx(ctx, v202, v223, v204, v225);
                                                                        let v227 = constructor_output_vreg(ctx, v226);
                                                                        let v228 = Some(v227);
                                                                        // Rule at src\isa\riscv64\lower.isle line 122.
                                                                        return v228;
                                                                    }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                let v202 = constructor_put_in_vreg(ctx, v64.0);
                                                let v209 = constructor_put_in_xreg(ctx, v98);
                                                let v204 = &constructor_unmasked(ctx);
                                                let v205 = C::vstate_from_type(ctx, v12);
                                                let v210 = constructor_rv_vadd_vx(ctx, v202, v209, v204, v205);
                                                let v211 = constructor_output_vreg(ctx, v210);
                                                let v212 = Some(v211);
                                                // Rule at src\isa\riscv64\lower.isle line 119.
                                                return v212;
                                            }
                                            &Opcode::Ineg => {
                                                let v213 = C::def_inst(ctx, v98);
                                                if let Some(v214) = v213 {
                                                    let v215 = &C::inst_data_value(ctx, v214);
                                                    if let &InstructionData::Binary {
                                                        opcode: ref v396,
                                                        args: ref v397,
                                                    } = v215 {
                                                        if let &Opcode::Imul = v396 {
                                                            let v398 = C::unpack_value_array_2(ctx, v397);
                                                            let v415 = C::def_inst(ctx, v398.0);
                                                            if let Some(v416) = v415 {
                                                                let v417 = &C::inst_data_value(ctx, v416);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v418,
                                                                    arg: v419,
                                                                } = v417 {
                                                                    if let &Opcode::Splat = v418 {
                                                                        let v202 = constructor_put_in_vreg(ctx, v64.0);
                                                                        let v420 = constructor_put_in_vreg(ctx, v398.1);
                                                                        let v421 = constructor_put_in_xreg(ctx, v419);
                                                                        let v204 = &constructor_unmasked(ctx);
                                                                        let v205 = C::vstate_from_type(ctx, v12);
                                                                        let v422 = constructor_rv_vnmsac_vx(ctx, v202, v420, v421, v204, v205);
                                                                        let v423 = constructor_output_vreg(ctx, v422);
                                                                        let v424 = Some(v423);
                                                                        // Rule at src\isa\riscv64\lower.isle line 296.
                                                                        return v424;
                                                                    }
                                                                }
                                                            }
                                                            let v406 = C::def_inst(ctx, v398.1);
                                                            if let Some(v407) = v406 {
                                                                let v408 = &C::inst_data_value(ctx, v407);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v409,
                                                                    arg: v410,
                                                                } = v408 {
                                                                    if let &Opcode::Splat = v409 {
                                                                        let v202 = constructor_put_in_vreg(ctx, v64.0);
                                                                        let v401 = constructor_put_in_vreg(ctx, v398.0);
                                                                        let v411 = constructor_put_in_xreg(ctx, v410);
                                                                        let v204 = &constructor_unmasked(ctx);
                                                                        let v205 = C::vstate_from_type(ctx, v12);
                                                                        let v412 = constructor_rv_vnmsac_vx(ctx, v202, v401, v411, v204, v205);
                                                                        let v413 = constructor_output_vreg(ctx, v412);
                                                                        let v414 = Some(v413);
                                                                        // Rule at src\isa\riscv64\lower.isle line 293.
                                                                        return v414;
                                                                    }
                                                                }
                                                            }
                                                            let v202 = constructor_put_in_vreg(ctx, v64.0);
                                                            let v401 = constructor_put_in_vreg(ctx, v398.0);
                                                            let v402 = constructor_put_in_vreg(ctx, v398.1);
                                                            let v204 = &constructor_unmasked(ctx);
                                                            let v205 = C::vstate_from_type(ctx, v12);
                                                            let v403 = constructor_rv_vnmsac_vv(ctx, v202, v401, v402, v204, v205);
                                                            let v404 = constructor_output_vreg(ctx, v403);
                                                            let v405 = Some(v404);
                                                            // Rule at src\isa\riscv64\lower.isle line 290.
                                                            return v405;
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::SwidenLow => {
                                                let v202 = constructor_put_in_vreg(ctx, v64.0);
                                                let v261 = constructor_put_in_vreg(ctx, v98);
                                                let v204 = &constructor_unmasked(ctx);
                                                let v99 = C::value_type(ctx, v98);
                                                let v262 = C::ty_half_lanes(ctx, v99);
                                                let v263 = v262?;
                                                let v264 = C::vstate_from_type(ctx, v263);
                                                let v265 = C::vstate_mf2(ctx, v264);
                                                let v266 = constructor_rv_vwadd_wv(ctx, v202, v261, v204, v265);
                                                let v267 = constructor_output_vreg(ctx, v266);
                                                let v268 = Some(v267);
                                                // Rule at src\isa\riscv64\lower.isle line 156.
                                                return v268;
                                            }
                                            &Opcode::SwidenHigh => {
                                                let v202 = constructor_put_in_vreg(ctx, v64.0);
                                                let v261 = constructor_put_in_vreg(ctx, v98);
                                                let v99 = C::value_type(ctx, v98);
                                                let v292 = constructor_gen_slidedown_half(ctx, v99, v261);
                                                let v204 = &constructor_unmasked(ctx);
                                                let v262 = C::ty_half_lanes(ctx, v99);
                                                let v263 = v262?;
                                                let v264 = C::vstate_from_type(ctx, v263);
                                                let v265 = C::vstate_mf2(ctx, v264);
                                                let v293 = constructor_rv_vwadd_wv(ctx, v202, v292, v204, v265);
                                                let v294 = constructor_output_vreg(ctx, v293);
                                                let v295 = Some(v294);
                                                // Rule at src\isa\riscv64\lower.isle line 179.
                                                return v295;
                                            }
                                            &Opcode::UwidenLow => {
                                                let v202 = constructor_put_in_vreg(ctx, v64.0);
                                                let v261 = constructor_put_in_vreg(ctx, v98);
                                                let v204 = &constructor_unmasked(ctx);
                                                let v99 = C::value_type(ctx, v98);
                                                let v262 = C::ty_half_lanes(ctx, v99);
                                                let v263 = v262?;
                                                let v264 = C::vstate_from_type(ctx, v263);
                                                let v265 = C::vstate_mf2(ctx, v264);
                                                let v315 = constructor_rv_vwaddu_wv(ctx, v202, v261, v204, v265);
                                                let v316 = constructor_output_vreg(ctx, v315);
                                                let v317 = Some(v316);
                                                // Rule at src\isa\riscv64\lower.isle line 201.
                                                return v317;
                                            }
                                            &Opcode::UwidenHigh => {
                                                let v202 = constructor_put_in_vreg(ctx, v64.0);
                                                let v261 = constructor_put_in_vreg(ctx, v98);
                                                let v99 = C::value_type(ctx, v98);
                                                let v292 = constructor_gen_slidedown_half(ctx, v99, v261);
                                                let v204 = &constructor_unmasked(ctx);
                                                let v262 = C::ty_half_lanes(ctx, v99);
                                                let v263 = v262?;
                                                let v264 = C::vstate_from_type(ctx, v263);
                                                let v265 = C::vstate_mf2(ctx, v264);
                                                let v330 = constructor_rv_vwaddu_wv(ctx, v202, v292, v204, v265);
                                                let v331 = constructor_output_vreg(ctx, v330);
                                                let v332 = Some(v331);
                                                // Rule at src\isa\riscv64\lower.isle line 224.
                                                return v332;
                                            }
                                            _ => {}
                                        }
                                    }
                                    _ => {}
                                }
                            }
                            let v202 = constructor_put_in_vreg(ctx, v64.0);
                            let v203 = constructor_put_in_vreg(ctx, v64.1);
                            let v204 = &constructor_unmasked(ctx);
                            let v205 = C::vstate_from_type(ctx, v12);
                            let v206 = constructor_rv_vadd_vv(ctx, v202, v203, v204, v205);
                            let v207 = constructor_output_vreg(ctx, v206);
                            let v208 = Some(v207);
                            // Rule at src\isa\riscv64\lower.isle line 116.
                            return v208;
                        }
                        match v3 {
                            I64 => {
                                let v100 = C::has_zba(ctx);
                                if v100 == true {
                                    let v64 = C::unpack_value_array_2(ctx, v63);
                                    let v106 = C::def_inst(ctx, v64.0);
                                    if let Some(v107) = v106 {
                                        let v108 = &C::inst_data_value(ctx, v107);
                                        if let &InstructionData::Binary {
                                            opcode: ref v134,
                                            args: ref v135,
                                        } = v108 {
                                            if let &Opcode::Ishl = v134 {
                                                let v136 = C::unpack_value_array_2(ctx, v135);
                                                let v139 = C::maybe_uextend(ctx, v136.1);
                                                if let Some(v140) = v139 {
                                                    let v141 = C::def_inst(ctx, v140);
                                                    if let Some(v142) = v141 {
                                                        let v143 = &C::inst_data_value(ctx, v142);
                                                        if let &InstructionData::UnaryImm {
                                                            opcode: ref v144,
                                                            imm: v145,
                                                        } = v143 {
                                                            if let &Opcode::Iconst = v144 {
                                                                let v164 = C::def_inst(ctx, v136.0);
                                                                if let Some(v165) = v164 {
                                                                    let v166 = &C::inst_data_value(ctx, v165);
                                                                    if let &InstructionData::Unary {
                                                                        opcode: ref v167,
                                                                        arg: v168,
                                                                    } = v166 {
                                                                        if let &Opcode::Uextend = v167 {
                                                                            let v169 = C::value_type(ctx, v168);
                                                                            if v169 == I32 {
                                                                                let v170 = &constructor_match_shnadd_uw(ctx, v145);
                                                                                if let Some(v171) = v170 {
                                                                                    let v172 = C::put_in_reg(ctx, v168);
                                                                                    let v90 = C::put_in_reg(ctx, v64.1);
                                                                                    let v173 = constructor_alu_rrr(ctx, v171, v172, v90);
                                                                                    let v174 = constructor_output_reg(ctx, v173);
                                                                                    let v175 = Some(v174);
                                                                                    // Rule at src\isa\riscv64\lower.isle line 99.
                                                                                    return v175;
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    let v94 = C::def_inst(ctx, v64.1);
                                    if let Some(v95) = v94 {
                                        let v96 = &C::inst_data_value(ctx, v95);
                                        if let &InstructionData::Binary {
                                            opcode: ref v116,
                                            args: ref v117,
                                        } = v96 {
                                            if let &Opcode::Ishl = v116 {
                                                let v118 = C::unpack_value_array_2(ctx, v117);
                                                let v121 = C::maybe_uextend(ctx, v118.1);
                                                if let Some(v122) = v121 {
                                                    let v123 = C::def_inst(ctx, v122);
                                                    if let Some(v124) = v123 {
                                                        let v125 = &C::inst_data_value(ctx, v124);
                                                        if let &InstructionData::UnaryImm {
                                                            opcode: ref v126,
                                                            imm: v127,
                                                        } = v125 {
                                                            if let &Opcode::Iconst = v126 {
                                                                let v152 = C::def_inst(ctx, v118.0);
                                                                if let Some(v153) = v152 {
                                                                    let v154 = &C::inst_data_value(ctx, v153);
                                                                    if let &InstructionData::Unary {
                                                                        opcode: ref v155,
                                                                        arg: v156,
                                                                    } = v154 {
                                                                        if let &Opcode::Uextend = v155 {
                                                                            let v157 = C::value_type(ctx, v156);
                                                                            if v157 == I32 {
                                                                                let v158 = &constructor_match_shnadd_uw(ctx, v127);
                                                                                if let Some(v159) = v158 {
                                                                                    let v160 = C::put_in_reg(ctx, v156);
                                                                                    let v82 = C::put_in_reg(ctx, v64.0);
                                                                                    let v161 = constructor_alu_rrr(ctx, v159, v160, v82);
                                                                                    let v162 = constructor_output_reg(ctx, v161);
                                                                                    let v163 = Some(v162);
                                                                                    // Rule at src\isa\riscv64\lower.isle line 94.
                                                                                    return v163;
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if let Some(v107) = v106 {
                                        let v108 = &C::inst_data_value(ctx, v107);
                                        match v108 {
                                            &InstructionData::Binary {
                                                opcode: ref v134,
                                                args: ref v135,
                                            } => {
                                                if let &Opcode::Ishl = v134 {
                                                    let v136 = C::unpack_value_array_2(ctx, v135);
                                                    let v139 = C::maybe_uextend(ctx, v136.1);
                                                    if let Some(v140) = v139 {
                                                        let v141 = C::def_inst(ctx, v140);
                                                        if let Some(v142) = v141 {
                                                            let v143 = &C::inst_data_value(ctx, v142);
                                                            if let &InstructionData::UnaryImm {
                                                                opcode: ref v144,
                                                                imm: v145,
                                                            } = v143 {
                                                                if let &Opcode::Iconst = v144 {
                                                                    let v146 = &constructor_match_shnadd(ctx, v145);
                                                                    if let Some(v147) = v146 {
                                                                        let v148 = C::put_in_reg(ctx, v136.0);
                                                                        let v90 = C::put_in_reg(ctx, v64.1);
                                                                        let v149 = constructor_alu_rrr(ctx, v147, v148, v90);
                                                                        let v150 = constructor_output_reg(ctx, v149);
                                                                        let v151 = Some(v150);
                                                                        // Rule at src\isa\riscv64\lower.isle line 77.
                                                                        return v151;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &InstructionData::Unary {
                                                opcode: ref v109,
                                                arg: v110,
                                            } => {
                                                if let &Opcode::Uextend = v109 {
                                                    let v111 = C::value_type(ctx, v110);
                                                    if v111 == I32 {
                                                        let v112 = constructor_put_in_xreg(ctx, v110);
                                                        let v68 = constructor_put_in_xreg(ctx, v64.1);
                                                        let v113 = constructor_rv_adduw(ctx, v112, v68);
                                                        let v114 = constructor_output_xreg(ctx, v113);
                                                        let v115 = Some(v114);
                                                        // Rule at src\isa\riscv64\lower.isle line 62.
                                                        return v115;
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                    if let Some(v95) = v94 {
                                        let v96 = &C::inst_data_value(ctx, v95);
                                        match v96 {
                                            &InstructionData::Binary {
                                                opcode: ref v116,
                                                args: ref v117,
                                            } => {
                                                if let &Opcode::Ishl = v116 {
                                                    let v118 = C::unpack_value_array_2(ctx, v117);
                                                    let v121 = C::maybe_uextend(ctx, v118.1);
                                                    if let Some(v122) = v121 {
                                                        let v123 = C::def_inst(ctx, v122);
                                                        if let Some(v124) = v123 {
                                                            let v125 = &C::inst_data_value(ctx, v124);
                                                            if let &InstructionData::UnaryImm {
                                                                opcode: ref v126,
                                                                imm: v127,
                                                            } = v125 {
                                                                if let &Opcode::Iconst = v126 {
                                                                    let v128 = &constructor_match_shnadd(ctx, v127);
                                                                    if let Some(v129) = v128 {
                                                                        let v130 = C::put_in_reg(ctx, v118.0);
                                                                        let v82 = C::put_in_reg(ctx, v64.0);
                                                                        let v131 = constructor_alu_rrr(ctx, v129, v130, v82);
                                                                        let v132 = constructor_output_reg(ctx, v131);
                                                                        let v133 = Some(v132);
                                                                        // Rule at src\isa\riscv64\lower.isle line 72.
                                                                        return v133;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &InstructionData::Unary {
                                                opcode: ref v97,
                                                arg: v98,
                                            } => {
                                                if let &Opcode::Uextend = v97 {
                                                    let v99 = C::value_type(ctx, v98);
                                                    if v99 == I32 {
                                                        let v101 = constructor_put_in_xreg(ctx, v98);
                                                        let v102 = constructor_put_in_xreg(ctx, v64.0);
                                                        let v103 = constructor_rv_adduw(ctx, v101, v102);
                                                        let v104 = constructor_output_xreg(ctx, v103);
                                                        let v105 = Some(v104);
                                                        // Rule at src\isa\riscv64\lower.isle line 58.
                                                        return v105;
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                            I128 => {
                                let v64 = C::unpack_value_array_2(ctx, v63);
                                let v176 = C::put_in_regs(ctx, v64.0);
                                let v178 = C::value_regs_get(ctx, v176, 0x0_usize);
                                let v179 = C::xreg_new(ctx, v178);
                                let v180 = C::put_in_regs(ctx, v64.1);
                                let v181 = C::value_regs_get(ctx, v180, 0x0_usize);
                                let v182 = C::xreg_new(ctx, v181);
                                let v183 = constructor_rv_add(ctx, v179, v182);
                                let v184 = C::put_in_regs(ctx, v64.1);
                                let v185 = C::value_regs_get(ctx, v184, 0x0_usize);
                                let v186 = C::xreg_new(ctx, v185);
                                let v187 = constructor_rv_sltu(ctx, v183, v186);
                                let v188 = C::put_in_regs(ctx, v64.0);
                                let v190 = C::value_regs_get(ctx, v188, 0x1_usize);
                                let v191 = C::xreg_new(ctx, v190);
                                let v192 = C::put_in_regs(ctx, v64.1);
                                let v193 = C::value_regs_get(ctx, v192, 0x1_usize);
                                let v194 = C::xreg_new(ctx, v193);
                                let v195 = constructor_rv_add(ctx, v191, v194);
                                let v196 = constructor_rv_add(ctx, v195, v187);
                                let v197 = C::xreg_to_reg(ctx, v183);
                                let v198 = C::xreg_to_reg(ctx, v196);
                                let v199 = C::value_regs(ctx, v197, v198);
                                let v200 = C::output(ctx, v199);
                                let v201 = Some(v200);
                                // Rule at src\isa\riscv64\lower.isle line 105.
                                return v201;
                            }
                            _ => {}
                        }
                        let v75 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v76) = v75 {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v86 = C::i64_from_iconst(ctx, v64.0);
                            if let Some(v87) = v86 {
                                let v88 = C::imm12_from_i64(ctx, v87);
                                if let Some(v89) = v88 {
                                    let v81 = &constructor_select_addi(ctx, v76);
                                    let v90 = C::put_in_reg(ctx, v64.1);
                                    let v91 = constructor_alu_rr_imm12(ctx, v81, v90, v89);
                                    let v92 = constructor_output_reg(ctx, v91);
                                    let v93 = Some(v92);
                                    // Rule at src\isa\riscv64\lower.isle line 53.
                                    return v93;
                                }
                            }
                            let v77 = C::i64_from_iconst(ctx, v64.1);
                            if let Some(v78) = v77 {
                                let v79 = C::imm12_from_i64(ctx, v78);
                                if let Some(v80) = v79 {
                                    let v81 = &constructor_select_addi(ctx, v76);
                                    let v82 = C::put_in_reg(ctx, v64.0);
                                    let v83 = constructor_alu_rr_imm12(ctx, v81, v82, v80);
                                    let v84 = constructor_output_reg(ctx, v83);
                                    let v85 = Some(v84);
                                    // Rule at src\isa\riscv64\lower.isle line 50.
                                    return v85;
                                }
                            }
                        }
                        if v3 == I64 {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v67 = constructor_put_in_xreg(ctx, v64.0);
                            let v68 = constructor_put_in_xreg(ctx, v64.1);
                            let v72 = constructor_rv_add(ctx, v67, v68);
                            let v73 = constructor_output_xreg(ctx, v72);
                            let v74 = Some(v73);
                            // Rule at src\isa\riscv64\lower.isle line 46.
                            return v74;
                        }
                        let v58 = C::fits_in_32(ctx, v3);
                        if let Some(v59) = v58 {
                            let v60 = C::ty_int(ctx, v59);
                            if let Some(v61) = v60 {
                                let v64 = C::unpack_value_array_2(ctx, v63);
                                let v67 = constructor_put_in_xreg(ctx, v64.0);
                                let v68 = constructor_put_in_xreg(ctx, v64.1);
                                let v69 = constructor_rv_addw(ctx, v67, v68);
                                let v70 = constructor_output_xreg(ctx, v69);
                                let v71 = Some(v70);
                                // Rule at src\isa\riscv64\lower.isle line 43.
                                return v71;
                            }
                        }
                    }
                }
                &Opcode::Isub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v94 = C::def_inst(ctx, v64.1);
                            if let Some(v95) = v94 {
                                let v96 = &C::inst_data_value(ctx, v95);
                                if let &InstructionData::Unary {
                                    opcode: ref v97,
                                    arg: v98,
                                } = v96 {
                                    match v97 {
                                        &Opcode::Splat => {
                                            let v106 = C::def_inst(ctx, v64.0);
                                            if let Some(v107) = v106 {
                                                let v108 = &C::inst_data_value(ctx, v107);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v109,
                                                    arg: v110,
                                                } = v108 {
                                                    match v109 {
                                                        &Opcode::SwidenLow => {
                                                            let v213 = C::def_inst(ctx, v98);
                                                            if let Some(v214) = v213 {
                                                                let v215 = &C::inst_data_value(ctx, v214);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v216,
                                                                    arg: v217,
                                                                } = v215 {
                                                                    if let &Opcode::Sextend = v216 {
                                                                        let v111 = C::value_type(ctx, v110);
                                                                        let v281 = C::lane_type(ctx, v111);
                                                                        let v218 = C::value_type(ctx, v217);
                                                                        let v282 = C::ty_equal(ctx, v281, v218);
                                                                        if v282 == true {
                                                                            let v277 = constructor_put_in_vreg(ctx, v110);
                                                                            let v223 = constructor_put_in_xreg(ctx, v217);
                                                                            let v204 = &constructor_unmasked(ctx);
                                                                            let v270 = C::ty_half_lanes(ctx, v111);
                                                                            let v271 = v270?;
                                                                            let v272 = C::vstate_from_type(ctx, v271);
                                                                            let v273 = C::vstate_mf2(ctx, v272);
                                                                            let v522 = constructor_rv_vwsub_vx(ctx, v277, v223, v204, v273);
                                                                            let v523 = constructor_output_vreg(ctx, v522);
                                                                            let v524 = Some(v523);
                                                                            // Rule at src\isa\riscv64\lower.isle line 377.
                                                                            return v524;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::SwidenHigh => {
                                                            let v213 = C::def_inst(ctx, v98);
                                                            if let Some(v214) = v213 {
                                                                let v215 = &C::inst_data_value(ctx, v214);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v216,
                                                                    arg: v217,
                                                                } = v215 {
                                                                    if let &Opcode::Sextend = v216 {
                                                                        let v111 = C::value_type(ctx, v110);
                                                                        let v281 = C::lane_type(ctx, v111);
                                                                        let v218 = C::value_type(ctx, v217);
                                                                        let v282 = C::ty_equal(ctx, v281, v218);
                                                                        if v282 == true {
                                                                            let v277 = constructor_put_in_vreg(ctx, v110);
                                                                            let v300 = constructor_gen_slidedown_half(ctx, v111, v277);
                                                                            let v306 = constructor_put_in_xreg(ctx, v217);
                                                                            let v204 = &constructor_unmasked(ctx);
                                                                            let v270 = C::ty_half_lanes(ctx, v111);
                                                                            let v271 = v270?;
                                                                            let v272 = C::vstate_from_type(ctx, v271);
                                                                            let v273 = C::vstate_mf2(ctx, v272);
                                                                            let v531 = constructor_rv_vwsub_vx(ctx, v300, v306, v204, v273);
                                                                            let v532 = constructor_output_vreg(ctx, v531);
                                                                            let v533 = Some(v532);
                                                                            // Rule at src\isa\riscv64\lower.isle line 392.
                                                                            return v533;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::UwidenLow => {
                                                            let v213 = C::def_inst(ctx, v98);
                                                            if let Some(v214) = v213 {
                                                                let v215 = &C::inst_data_value(ctx, v214);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v216,
                                                                    arg: v217,
                                                                } = v215 {
                                                                    if let &Opcode::Uextend = v216 {
                                                                        let v111 = C::value_type(ctx, v110);
                                                                        let v281 = C::lane_type(ctx, v111);
                                                                        let v218 = C::value_type(ctx, v217);
                                                                        let v282 = C::ty_equal(ctx, v281, v218);
                                                                        if v282 == true {
                                                                            let v277 = constructor_put_in_vreg(ctx, v110);
                                                                            let v223 = constructor_put_in_xreg(ctx, v217);
                                                                            let v204 = &constructor_unmasked(ctx);
                                                                            let v270 = C::ty_half_lanes(ctx, v111);
                                                                            let v271 = v270?;
                                                                            let v272 = C::vstate_from_type(ctx, v271);
                                                                            let v273 = C::vstate_mf2(ctx, v272);
                                                                            let v540 = constructor_rv_vwsubu_vx(ctx, v277, v223, v204, v273);
                                                                            let v541 = constructor_output_vreg(ctx, v540);
                                                                            let v542 = Some(v541);
                                                                            // Rule at src\isa\riscv64\lower.isle line 406.
                                                                            return v542;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::UwidenHigh => {
                                                            let v213 = C::def_inst(ctx, v98);
                                                            if let Some(v214) = v213 {
                                                                let v215 = &C::inst_data_value(ctx, v214);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v216,
                                                                    arg: v217,
                                                                } = v215 {
                                                                    if let &Opcode::Uextend = v216 {
                                                                        let v111 = C::value_type(ctx, v110);
                                                                        let v281 = C::lane_type(ctx, v111);
                                                                        let v218 = C::value_type(ctx, v217);
                                                                        let v282 = C::ty_equal(ctx, v281, v218);
                                                                        if v282 == true {
                                                                            let v277 = constructor_put_in_vreg(ctx, v110);
                                                                            let v300 = constructor_gen_slidedown_half(ctx, v111, v277);
                                                                            let v306 = constructor_put_in_xreg(ctx, v217);
                                                                            let v204 = &constructor_unmasked(ctx);
                                                                            let v270 = C::ty_half_lanes(ctx, v111);
                                                                            let v271 = v270?;
                                                                            let v272 = C::vstate_from_type(ctx, v271);
                                                                            let v273 = C::vstate_mf2(ctx, v272);
                                                                            let v549 = constructor_rv_vwsubu_vx(ctx, v300, v306, v204, v273);
                                                                            let v550 = constructor_output_vreg(ctx, v549);
                                                                            let v551 = Some(v550);
                                                                            // Rule at src\isa\riscv64\lower.isle line 421.
                                                                            return v551;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::SwidenLow => {
                                            let v106 = C::def_inst(ctx, v64.0);
                                            if let Some(v107) = v106 {
                                                let v108 = &C::inst_data_value(ctx, v107);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v109,
                                                    arg: v110,
                                                } = v108 {
                                                    match v109 {
                                                        &Opcode::SwidenLow => {
                                                            let v277 = constructor_put_in_vreg(ctx, v110);
                                                            let v261 = constructor_put_in_vreg(ctx, v98);
                                                            let v204 = &constructor_unmasked(ctx);
                                                            let v111 = C::value_type(ctx, v110);
                                                            let v270 = C::ty_half_lanes(ctx, v111);
                                                            let v271 = v270?;
                                                            let v272 = C::vstate_from_type(ctx, v271);
                                                            let v273 = C::vstate_mf2(ctx, v272);
                                                            let v519 = constructor_rv_vwsub_vv(ctx, v277, v261, v204, v273);
                                                            let v520 = constructor_output_vreg(ctx, v519);
                                                            let v521 = Some(v520);
                                                            // Rule at src\isa\riscv64\lower.isle line 373.
                                                            return v521;
                                                        }
                                                        &Opcode::SwidenHigh => {
                                                            let v277 = constructor_put_in_vreg(ctx, v110);
                                                            let v111 = C::value_type(ctx, v110);
                                                            let v300 = constructor_gen_slidedown_half(ctx, v111, v277);
                                                            let v301 = constructor_put_in_vreg(ctx, v98);
                                                            let v204 = &constructor_unmasked(ctx);
                                                            let v270 = C::ty_half_lanes(ctx, v111);
                                                            let v271 = v270?;
                                                            let v272 = C::vstate_from_type(ctx, v271);
                                                            let v273 = C::vstate_mf2(ctx, v272);
                                                            let v555 = constructor_rv_vwsub_vv(ctx, v300, v301, v204, v273);
                                                            let v556 = constructor_output_vreg(ctx, v555);
                                                            let v557 = Some(v556);
                                                            // Rule at src\isa\riscv64\lower.isle line 432.
                                                            return v557;
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::SwidenHigh => {
                                            let v106 = C::def_inst(ctx, v64.0);
                                            if let Some(v107) = v106 {
                                                let v108 = &C::inst_data_value(ctx, v107);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v109,
                                                    arg: v110,
                                                } = v108 {
                                                    match v109 {
                                                        &Opcode::SwidenLow => {
                                                            let v277 = constructor_put_in_vreg(ctx, v110);
                                                            let v261 = constructor_put_in_vreg(ctx, v98);
                                                            let v111 = C::value_type(ctx, v110);
                                                            let v345 = constructor_gen_slidedown_half(ctx, v111, v261);
                                                            let v204 = &constructor_unmasked(ctx);
                                                            let v270 = C::ty_half_lanes(ctx, v111);
                                                            let v271 = v270?;
                                                            let v272 = C::vstate_from_type(ctx, v271);
                                                            let v273 = C::vstate_mf2(ctx, v272);
                                                            let v552 = constructor_rv_vwsub_vv(ctx, v277, v345, v204, v273);
                                                            let v553 = constructor_output_vreg(ctx, v552);
                                                            let v554 = Some(v553);
                                                            // Rule at src\isa\riscv64\lower.isle line 428.
                                                            return v554;
                                                        }
                                                        &Opcode::SwidenHigh => {
                                                            let v277 = constructor_put_in_vreg(ctx, v110);
                                                            let v111 = C::value_type(ctx, v110);
                                                            let v300 = constructor_gen_slidedown_half(ctx, v111, v277);
                                                            let v301 = constructor_put_in_vreg(ctx, v98);
                                                            let v302 = constructor_gen_slidedown_half(ctx, v111, v301);
                                                            let v204 = &constructor_unmasked(ctx);
                                                            let v270 = C::ty_half_lanes(ctx, v111);
                                                            let v271 = v270?;
                                                            let v272 = C::vstate_from_type(ctx, v271);
                                                            let v273 = C::vstate_mf2(ctx, v272);
                                                            let v528 = constructor_rv_vwsub_vv(ctx, v300, v302, v204, v273);
                                                            let v529 = constructor_output_vreg(ctx, v528);
                                                            let v530 = Some(v529);
                                                            // Rule at src\isa\riscv64\lower.isle line 388.
                                                            return v530;
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::UwidenLow => {
                                            let v106 = C::def_inst(ctx, v64.0);
                                            if let Some(v107) = v106 {
                                                let v108 = &C::inst_data_value(ctx, v107);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v109,
                                                    arg: v110,
                                                } = v108 {
                                                    match v109 {
                                                        &Opcode::UwidenLow => {
                                                            let v277 = constructor_put_in_vreg(ctx, v110);
                                                            let v261 = constructor_put_in_vreg(ctx, v98);
                                                            let v204 = &constructor_unmasked(ctx);
                                                            let v111 = C::value_type(ctx, v110);
                                                            let v270 = C::ty_half_lanes(ctx, v111);
                                                            let v271 = v270?;
                                                            let v272 = C::vstate_from_type(ctx, v271);
                                                            let v273 = C::vstate_mf2(ctx, v272);
                                                            let v537 = constructor_rv_vwsubu_vv(ctx, v277, v261, v204, v273);
                                                            let v538 = constructor_output_vreg(ctx, v537);
                                                            let v539 = Some(v538);
                                                            // Rule at src\isa\riscv64\lower.isle line 402.
                                                            return v539;
                                                        }
                                                        &Opcode::UwidenHigh => {
                                                            let v277 = constructor_put_in_vreg(ctx, v110);
                                                            let v111 = C::value_type(ctx, v110);
                                                            let v300 = constructor_gen_slidedown_half(ctx, v111, v277);
                                                            let v301 = constructor_put_in_vreg(ctx, v98);
                                                            let v204 = &constructor_unmasked(ctx);
                                                            let v270 = C::ty_half_lanes(ctx, v111);
                                                            let v271 = v270?;
                                                            let v272 = C::vstate_from_type(ctx, v271);
                                                            let v273 = C::vstate_mf2(ctx, v272);
                                                            let v561 = constructor_rv_vwsubu_vv(ctx, v300, v301, v204, v273);
                                                            let v562 = constructor_output_vreg(ctx, v561);
                                                            let v563 = Some(v562);
                                                            // Rule at src\isa\riscv64\lower.isle line 442.
                                                            return v563;
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::UwidenHigh => {
                                            let v106 = C::def_inst(ctx, v64.0);
                                            if let Some(v107) = v106 {
                                                let v108 = &C::inst_data_value(ctx, v107);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v109,
                                                    arg: v110,
                                                } = v108 {
                                                    match v109 {
                                                        &Opcode::UwidenLow => {
                                                            let v277 = constructor_put_in_vreg(ctx, v110);
                                                            let v261 = constructor_put_in_vreg(ctx, v98);
                                                            let v111 = C::value_type(ctx, v110);
                                                            let v345 = constructor_gen_slidedown_half(ctx, v111, v261);
                                                            let v204 = &constructor_unmasked(ctx);
                                                            let v270 = C::ty_half_lanes(ctx, v111);
                                                            let v271 = v270?;
                                                            let v272 = C::vstate_from_type(ctx, v271);
                                                            let v273 = C::vstate_mf2(ctx, v272);
                                                            let v558 = constructor_rv_vwsubu_vv(ctx, v277, v345, v204, v273);
                                                            let v559 = constructor_output_vreg(ctx, v558);
                                                            let v560 = Some(v559);
                                                            // Rule at src\isa\riscv64\lower.isle line 438.
                                                            return v560;
                                                        }
                                                        &Opcode::UwidenHigh => {
                                                            let v277 = constructor_put_in_vreg(ctx, v110);
                                                            let v111 = C::value_type(ctx, v110);
                                                            let v300 = constructor_gen_slidedown_half(ctx, v111, v277);
                                                            let v301 = constructor_put_in_vreg(ctx, v98);
                                                            let v302 = constructor_gen_slidedown_half(ctx, v111, v301);
                                                            let v204 = &constructor_unmasked(ctx);
                                                            let v270 = C::ty_half_lanes(ctx, v111);
                                                            let v271 = v270?;
                                                            let v272 = C::vstate_from_type(ctx, v271);
                                                            let v273 = C::vstate_mf2(ctx, v272);
                                                            let v546 = constructor_rv_vwsubu_vv(ctx, v300, v302, v204, v273);
                                                            let v547 = constructor_output_vreg(ctx, v546);
                                                            let v548 = Some(v547);
                                                            // Rule at src\isa\riscv64\lower.isle line 417.
                                                            return v548;
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            let v256 = constructor_replicated_imm5(ctx, v64.0);
                            if let Some(v257) = v256 {
                                let v237 = constructor_put_in_vreg(ctx, v64.1);
                                let v204 = &constructor_unmasked(ctx);
                                let v205 = C::vstate_from_type(ctx, v12);
                                let v513 = constructor_rv_vrsub_vi(ctx, v237, v257, v204, v205);
                                let v514 = constructor_output_vreg(ctx, v513);
                                let v515 = Some(v514);
                                // Rule at src\isa\riscv64\lower.isle line 363.
                                return v515;
                            }
                            let v508 = constructor_negated_replicated_imm5(ctx, v64.1);
                            if let Some(v509) = v508 {
                                let v202 = constructor_put_in_vreg(ctx, v64.0);
                                let v204 = &constructor_unmasked(ctx);
                                let v205 = C::vstate_from_type(ctx, v12);
                                let v510 = constructor_rv_vadd_vi(ctx, v202, v509, v204, v205);
                                let v511 = constructor_output_vreg(ctx, v510);
                                let v512 = Some(v511);
                                // Rule at src\isa\riscv64\lower.isle line 359.
                                return v512;
                            }
                            let v106 = C::def_inst(ctx, v64.0);
                            if let Some(v107) = v106 {
                                let v108 = &C::inst_data_value(ctx, v107);
                                if let &InstructionData::Unary {
                                    opcode: ref v109,
                                    arg: v110,
                                } = v108 {
                                    if let &Opcode::Splat = v109 {
                                        let v237 = constructor_put_in_vreg(ctx, v64.1);
                                        let v238 = constructor_put_in_xreg(ctx, v110);
                                        let v204 = &constructor_unmasked(ctx);
                                        let v205 = C::vstate_from_type(ctx, v12);
                                        let v505 = constructor_rv_vrsub_vx(ctx, v237, v238, v204, v205);
                                        let v506 = constructor_output_vreg(ctx, v505);
                                        let v507 = Some(v506);
                                        // Rule at src\isa\riscv64\lower.isle line 356.
                                        return v507;
                                    }
                                }
                            }
                            if let Some(v95) = v94 {
                                let v96 = &C::inst_data_value(ctx, v95);
                                if let &InstructionData::Unary {
                                    opcode: ref v97,
                                    arg: v98,
                                } = v96 {
                                    match v97 {
                                        &Opcode::Splat => {
                                            let v213 = C::def_inst(ctx, v98);
                                            if let Some(v214) = v213 {
                                                let v215 = &C::inst_data_value(ctx, v214);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v216,
                                                    arg: v217,
                                                } = v215 {
                                                    match v216 {
                                                        &Opcode::Uextend => {
                                                            let v219 = C::ty_half_width(ctx, v12);
                                                            if let Some(v220) = v219 {
                                                                let v221 = C::lane_type(ctx, v220);
                                                                let v218 = C::value_type(ctx, v217);
                                                                let v222 = C::ty_equal(ctx, v221, v218);
                                                                if v222 == true {
                                                                    let v202 = constructor_put_in_vreg(ctx, v64.0);
                                                                    let v223 = constructor_put_in_xreg(ctx, v217);
                                                                    let v204 = &constructor_unmasked(ctx);
                                                                    let v224 = C::vstate_from_type(ctx, v220);
                                                                    let v225 = C::vstate_mf2(ctx, v224);
                                                                    let v502 = constructor_rv_vwsubu_wx(ctx, v202, v223, v204, v225);
                                                                    let v503 = constructor_output_vreg(ctx, v502);
                                                                    let v504 = Some(v503);
                                                                    // Rule at src\isa\riscv64\lower.isle line 351.
                                                                    return v504;
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Sextend => {
                                                            let v219 = C::ty_half_width(ctx, v12);
                                                            if let Some(v220) = v219 {
                                                                let v221 = C::lane_type(ctx, v220);
                                                                let v218 = C::value_type(ctx, v217);
                                                                let v222 = C::ty_equal(ctx, v221, v218);
                                                                if v222 == true {
                                                                    let v202 = constructor_put_in_vreg(ctx, v64.0);
                                                                    let v223 = constructor_put_in_xreg(ctx, v217);
                                                                    let v204 = &constructor_unmasked(ctx);
                                                                    let v224 = C::vstate_from_type(ctx, v220);
                                                                    let v225 = C::vstate_mf2(ctx, v224);
                                                                    let v499 = constructor_rv_vwsub_wx(ctx, v202, v223, v204, v225);
                                                                    let v500 = constructor_output_vreg(ctx, v499);
                                                                    let v501 = Some(v500);
                                                                    // Rule at src\isa\riscv64\lower.isle line 346.
                                                                    return v501;
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                            let v202 = constructor_put_in_vreg(ctx, v64.0);
                                            let v209 = constructor_put_in_xreg(ctx, v98);
                                            let v204 = &constructor_unmasked(ctx);
                                            let v205 = C::vstate_from_type(ctx, v12);
                                            let v496 = constructor_rv_vsub_vx(ctx, v202, v209, v204, v205);
                                            let v497 = constructor_output_vreg(ctx, v496);
                                            let v498 = Some(v497);
                                            // Rule at src\isa\riscv64\lower.isle line 343.
                                            return v498;
                                        }
                                        &Opcode::SwidenLow => {
                                            let v202 = constructor_put_in_vreg(ctx, v64.0);
                                            let v261 = constructor_put_in_vreg(ctx, v98);
                                            let v204 = &constructor_unmasked(ctx);
                                            let v99 = C::value_type(ctx, v98);
                                            let v262 = C::ty_half_lanes(ctx, v99);
                                            let v263 = v262?;
                                            let v264 = C::vstate_from_type(ctx, v263);
                                            let v265 = C::vstate_mf2(ctx, v264);
                                            let v516 = constructor_rv_vwsub_wv(ctx, v202, v261, v204, v265);
                                            let v517 = constructor_output_vreg(ctx, v516);
                                            let v518 = Some(v517);
                                            // Rule at src\isa\riscv64\lower.isle line 370.
                                            return v518;
                                        }
                                        &Opcode::SwidenHigh => {
                                            let v202 = constructor_put_in_vreg(ctx, v64.0);
                                            let v261 = constructor_put_in_vreg(ctx, v98);
                                            let v99 = C::value_type(ctx, v98);
                                            let v292 = constructor_gen_slidedown_half(ctx, v99, v261);
                                            let v204 = &constructor_unmasked(ctx);
                                            let v262 = C::ty_half_lanes(ctx, v99);
                                            let v263 = v262?;
                                            let v264 = C::vstate_from_type(ctx, v263);
                                            let v265 = C::vstate_mf2(ctx, v264);
                                            let v525 = constructor_rv_vwsub_wv(ctx, v202, v292, v204, v265);
                                            let v526 = constructor_output_vreg(ctx, v525);
                                            let v527 = Some(v526);
                                            // Rule at src\isa\riscv64\lower.isle line 385.
                                            return v527;
                                        }
                                        &Opcode::UwidenLow => {
                                            let v202 = constructor_put_in_vreg(ctx, v64.0);
                                            let v261 = constructor_put_in_vreg(ctx, v98);
                                            let v204 = &constructor_unmasked(ctx);
                                            let v99 = C::value_type(ctx, v98);
                                            let v262 = C::ty_half_lanes(ctx, v99);
                                            let v263 = v262?;
                                            let v264 = C::vstate_from_type(ctx, v263);
                                            let v265 = C::vstate_mf2(ctx, v264);
                                            let v534 = constructor_rv_vwsubu_wv(ctx, v202, v261, v204, v265);
                                            let v535 = constructor_output_vreg(ctx, v534);
                                            let v536 = Some(v535);
                                            // Rule at src\isa\riscv64\lower.isle line 399.
                                            return v536;
                                        }
                                        &Opcode::UwidenHigh => {
                                            let v202 = constructor_put_in_vreg(ctx, v64.0);
                                            let v261 = constructor_put_in_vreg(ctx, v98);
                                            let v99 = C::value_type(ctx, v98);
                                            let v292 = constructor_gen_slidedown_half(ctx, v99, v261);
                                            let v204 = &constructor_unmasked(ctx);
                                            let v262 = C::ty_half_lanes(ctx, v99);
                                            let v263 = v262?;
                                            let v264 = C::vstate_from_type(ctx, v263);
                                            let v265 = C::vstate_mf2(ctx, v264);
                                            let v543 = constructor_rv_vwsubu_wv(ctx, v202, v292, v204, v265);
                                            let v544 = constructor_output_vreg(ctx, v543);
                                            let v545 = Some(v544);
                                            // Rule at src\isa\riscv64\lower.isle line 414.
                                            return v545;
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            let v202 = constructor_put_in_vreg(ctx, v64.0);
                            let v203 = constructor_put_in_vreg(ctx, v64.1);
                            let v204 = &constructor_unmasked(ctx);
                            let v205 = C::vstate_from_type(ctx, v12);
                            let v493 = constructor_rv_vsub_vv(ctx, v202, v203, v204, v205);
                            let v494 = constructor_output_vreg(ctx, v493);
                            let v495 = Some(v494);
                            // Rule at src\isa\riscv64\lower.isle line 340.
                            return v495;
                        }
                        let v75 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v76) = v75 {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v488 = constructor_imm12_from_negated_value(ctx, v64.1);
                            if let Some(v489) = v488 {
                                let v81 = &constructor_select_addi(ctx, v76);
                                let v82 = C::put_in_reg(ctx, v64.0);
                                let v490 = constructor_alu_rr_imm12(ctx, v81, v82, v489);
                                let v491 = constructor_output_reg(ctx, v490);
                                let v492 = Some(v491);
                                // Rule at src\isa\riscv64\lower.isle line 335.
                                return v492;
                            }
                        }
                        match v3 {
                            I64 => {
                                let v64 = C::unpack_value_array_2(ctx, v63);
                                let v67 = constructor_put_in_xreg(ctx, v64.0);
                                let v68 = constructor_put_in_xreg(ctx, v64.1);
                                let v481 = constructor_rv_sub(ctx, v67, v68);
                                let v482 = constructor_output_xreg(ctx, v481);
                                let v483 = Some(v482);
                                // Rule at src\isa\riscv64\lower.isle line 328.
                                return v483;
                            }
                            I128 => {
                                let v64 = C::unpack_value_array_2(ctx, v63);
                                let v176 = C::put_in_regs(ctx, v64.0);
                                let v484 = C::put_in_regs(ctx, v64.1);
                                let v485 = constructor_i128_sub(ctx, v176, v484);
                                let v486 = C::output(ctx, v485);
                                let v487 = Some(v486);
                                // Rule at src\isa\riscv64\lower.isle line 331.
                                return v487;
                            }
                            _ => {}
                        }
                        let v58 = C::fits_in_32(ctx, v3);
                        if let Some(v59) = v58 {
                            let v60 = C::ty_int(ctx, v59);
                            if let Some(v61) = v60 {
                                let v64 = C::unpack_value_array_2(ctx, v63);
                                let v67 = constructor_put_in_xreg(ctx, v64.0);
                                let v68 = constructor_put_in_xreg(ctx, v64.1);
                                let v478 = constructor_rv_subw(ctx, v67, v68);
                                let v479 = constructor_output_xreg(ctx, v478);
                                let v480 = Some(v479);
                                // Rule at src\isa\riscv64\lower.isle line 325.
                                return v480;
                            }
                        }
                    }
                }
                &Opcode::Imul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v64 = C::unpack_value_array_2(ctx, v63);
                        let v94 = C::def_inst(ctx, v64.1);
                        if let Some(v95) = v94 {
                            let v96 = &C::inst_data_value(ctx, v95);
                            if let &InstructionData::Unary {
                                opcode: ref v97,
                                arg: v98,
                            } = v96 {
                                match v97 {
                                    &Opcode::Splat => {
                                        let v3 = C::value_type(ctx, v2);
                                        let v11 = C::ty_supported_vec(ctx, v3);
                                        if let Some(v12) = v11 {
                                            let v202 = constructor_put_in_vreg(ctx, v64.0);
                                            let v209 = constructor_put_in_xreg(ctx, v98);
                                            let v204 = &constructor_unmasked(ctx);
                                            let v205 = C::vstate_from_type(ctx, v12);
                                            let v623 = constructor_rv_vmul_vx(ctx, v202, v209, v204, v205);
                                            let v624 = constructor_output_vreg(ctx, v623);
                                            let v625 = Some(v624);
                                            // Rule at src\isa\riscv64\lower.isle line 511.
                                            return v625;
                                        }
                                    }
                                    &Opcode::Uextend => {
                                        let v3 = C::value_type(ctx, v2);
                                        if v3 == I128 {
                                            let v106 = C::def_inst(ctx, v64.0);
                                            if let Some(v107) = v106 {
                                                let v108 = &C::inst_data_value(ctx, v107);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v109,
                                                    arg: v110,
                                                } = v108 {
                                                    if let &Opcode::Uextend = v109 {
                                                        let v599 = constructor_zext(ctx, v110);
                                                        let v600 = constructor_zext(ctx, v98);
                                                        let v601 = constructor_rv_mul(ctx, v599, v600);
                                                        let v603 = constructor_rv_mulhu(ctx, v599, v600);
                                                        let v602 = C::xreg_to_reg(ctx, v601);
                                                        let v604 = C::xreg_to_reg(ctx, v603);
                                                        let v605 = C::value_regs(ctx, v602, v604);
                                                        let v606 = C::output(ctx, v605);
                                                        let v607 = Some(v606);
                                                        // Rule at src\isa\riscv64\lower.isle line 493.
                                                        return v607;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    &Opcode::Sextend => {
                                        let v3 = C::value_type(ctx, v2);
                                        if v3 == I128 {
                                            let v106 = C::def_inst(ctx, v64.0);
                                            if let Some(v107) = v106 {
                                                let v108 = &C::inst_data_value(ctx, v107);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v109,
                                                    arg: v110,
                                                } = v108 {
                                                    if let &Opcode::Sextend = v109 {
                                                        let v608 = constructor_sext(ctx, v110);
                                                        let v609 = constructor_sext(ctx, v98);
                                                        let v610 = constructor_rv_mul(ctx, v608, v609);
                                                        let v612 = constructor_rv_mulh(ctx, v608, v609);
                                                        let v611 = C::xreg_to_reg(ctx, v610);
                                                        let v613 = C::xreg_to_reg(ctx, v612);
                                                        let v614 = C::value_regs(ctx, v611, v613);
                                                        let v615 = C::output(ctx, v614);
                                                        let v616 = Some(v615);
                                                        // Rule at src\isa\riscv64\lower.isle line 498.
                                                        return v616;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v106 = C::def_inst(ctx, v64.0);
                            if let Some(v107) = v106 {
                                let v108 = &C::inst_data_value(ctx, v107);
                                if let &InstructionData::Unary {
                                    opcode: ref v109,
                                    arg: v110,
                                } = v108 {
                                    if let &Opcode::Splat = v109 {
                                        let v237 = constructor_put_in_vreg(ctx, v64.1);
                                        let v238 = constructor_put_in_xreg(ctx, v110);
                                        let v204 = &constructor_unmasked(ctx);
                                        let v205 = C::vstate_from_type(ctx, v12);
                                        let v620 = constructor_rv_vmul_vx(ctx, v237, v238, v204, v205);
                                        let v621 = constructor_output_vreg(ctx, v620);
                                        let v622 = Some(v621);
                                        // Rule at src\isa\riscv64\lower.isle line 508.
                                        return v622;
                                    }
                                }
                            }
                            let v202 = constructor_put_in_vreg(ctx, v64.0);
                            let v203 = constructor_put_in_vreg(ctx, v64.1);
                            let v204 = &constructor_unmasked(ctx);
                            let v205 = C::vstate_from_type(ctx, v12);
                            let v617 = constructor_rv_vmul_vv(ctx, v202, v203, v204, v205);
                            let v618 = constructor_output_vreg(ctx, v617);
                            let v619 = Some(v618);
                            // Rule at src\isa\riscv64\lower.isle line 505.
                            return v619;
                        }
                        if v3 == I128 {
                            let v176 = C::put_in_regs(ctx, v64.0);
                            let v178 = C::value_regs_get(ctx, v176, 0x0_usize);
                            let v179 = C::xreg_new(ctx, v178);
                            let v582 = C::value_regs_get(ctx, v176, 0x1_usize);
                            let v583 = C::xreg_new(ctx, v582);
                            let v584 = C::put_in_regs(ctx, v64.1);
                            let v585 = C::value_regs_get(ctx, v584, 0x0_usize);
                            let v586 = C::xreg_new(ctx, v585);
                            let v587 = C::value_regs_get(ctx, v584, 0x1_usize);
                            let v588 = C::xreg_new(ctx, v587);
                            let v589 = constructor_rv_mulhu(ctx, v179, v586);
                            let v590 = constructor_madd(ctx, v179, v588, v589);
                            let v591 = constructor_madd(ctx, v583, v586, v590);
                            let v592 = C::zero_reg(ctx);
                            let v593 = constructor_madd(ctx, v179, v586, v592);
                            let v594 = C::xreg_to_reg(ctx, v593);
                            let v595 = C::xreg_to_reg(ctx, v591);
                            let v596 = C::value_regs(ctx, v594, v595);
                            let v597 = C::output(ctx, v596);
                            let v598 = Some(v597);
                            // Rule at src\isa\riscv64\lower.isle line 465.
                            return v598;
                        }
                        let v58 = C::fits_in_32(ctx, v3);
                        if let Some(v59) = v58 {
                            let v60 = C::ty_int(ctx, v59);
                            if let Some(v61) = v60 {
                                let v67 = constructor_put_in_xreg(ctx, v64.0);
                                let v68 = constructor_put_in_xreg(ctx, v64.1);
                                let v579 = constructor_rv_mulw(ctx, v67, v68);
                                let v580 = constructor_output_xreg(ctx, v579);
                                let v581 = Some(v580);
                                // Rule at src\isa\riscv64\lower.isle line 461.
                                return v581;
                            }
                        }
                        let v75 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v76) = v75 {
                            let v67 = constructor_put_in_xreg(ctx, v64.0);
                            let v68 = constructor_put_in_xreg(ctx, v64.1);
                            let v576 = constructor_rv_mul(ctx, v67, v68);
                            let v577 = constructor_output_xreg(ctx, v576);
                            let v578 = Some(v577);
                            // Rule at src\isa\riscv64\lower.isle line 458.
                            return v578;
                        }
                    }
                }
                &Opcode::Umulhi => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v94 = C::def_inst(ctx, v64.1);
                            if let Some(v95) = v94 {
                                let v96 = &C::inst_data_value(ctx, v95);
                                if let &InstructionData::Unary {
                                    opcode: ref v97,
                                    arg: v98,
                                } = v96 {
                                    if let &Opcode::Splat = v97 {
                                        let v202 = constructor_put_in_vreg(ctx, v64.0);
                                        let v209 = constructor_put_in_xreg(ctx, v98);
                                        let v204 = &constructor_unmasked(ctx);
                                        let v205 = C::vstate_from_type(ctx, v12);
                                        let v655 = constructor_rv_vmulhu_vx(ctx, v202, v209, v204, v205);
                                        let v656 = constructor_output_vreg(ctx, v655);
                                        let v657 = Some(v656);
                                        // Rule at src\isa\riscv64\lower.isle line 541.
                                        return v657;
                                    }
                                }
                            }
                            let v106 = C::def_inst(ctx, v64.0);
                            if let Some(v107) = v106 {
                                let v108 = &C::inst_data_value(ctx, v107);
                                if let &InstructionData::Unary {
                                    opcode: ref v109,
                                    arg: v110,
                                } = v108 {
                                    if let &Opcode::Splat = v109 {
                                        let v237 = constructor_put_in_vreg(ctx, v64.1);
                                        let v238 = constructor_put_in_xreg(ctx, v110);
                                        let v204 = &constructor_unmasked(ctx);
                                        let v205 = C::vstate_from_type(ctx, v12);
                                        let v652 = constructor_rv_vmulhu_vx(ctx, v237, v238, v204, v205);
                                        let v653 = constructor_output_vreg(ctx, v652);
                                        let v654 = Some(v653);
                                        // Rule at src\isa\riscv64\lower.isle line 538.
                                        return v654;
                                    }
                                }
                            }
                            let v202 = constructor_put_in_vreg(ctx, v64.0);
                            let v203 = constructor_put_in_vreg(ctx, v64.1);
                            let v204 = &constructor_unmasked(ctx);
                            let v205 = C::vstate_from_type(ctx, v12);
                            let v649 = constructor_rv_vmulhu_vv(ctx, v202, v203, v204, v205);
                            let v650 = constructor_output_vreg(ctx, v649);
                            let v651 = Some(v650);
                            // Rule at src\isa\riscv64\lower.isle line 535.
                            return v651;
                        }
                        if v3 == I64 {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v67 = constructor_put_in_xreg(ctx, v64.0);
                            let v68 = constructor_put_in_xreg(ctx, v64.1);
                            let v646 = constructor_rv_mulhu(ctx, v67, v68);
                            let v647 = constructor_output_xreg(ctx, v646);
                            let v648 = Some(v647);
                            // Rule at src\isa\riscv64\lower.isle line 532.
                            return v648;
                        }
                        let v58 = C::fits_in_32(ctx, v3);
                        if let Some(v59) = v58 {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v640 = constructor_zext(ctx, v64.0);
                            let v641 = constructor_zext(ctx, v64.1);
                            let v642 = constructor_rv_mul(ctx, v640, v641);
                            let v463 = C::ty_bits(ctx, v59);
                            let v464 = C::u8_as_i32(ctx, v463);
                            let v465 = C::imm12_const(ctx, v464);
                            let v643 = constructor_rv_srli(ctx, v642, v465);
                            let v644 = constructor_output_xreg(ctx, v643);
                            let v645 = Some(v644);
                            // Rule at src\isa\riscv64\lower.isle line 528.
                            return v645;
                        }
                    }
                }
                &Opcode::Smulhi => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v94 = C::def_inst(ctx, v64.1);
                            if let Some(v95) = v94 {
                                let v96 = &C::inst_data_value(ctx, v95);
                                if let &InstructionData::Unary {
                                    opcode: ref v97,
                                    arg: v98,
                                } = v96 {
                                    if let &Opcode::Splat = v97 {
                                        let v202 = constructor_put_in_vreg(ctx, v64.0);
                                        let v209 = constructor_put_in_xreg(ctx, v98);
                                        let v204 = &constructor_unmasked(ctx);
                                        let v205 = C::vstate_from_type(ctx, v12);
                                        let v637 = constructor_rv_vmulh_vx(ctx, v202, v209, v204, v205);
                                        let v638 = constructor_output_vreg(ctx, v637);
                                        let v639 = Some(v638);
                                        // Rule at src\isa\riscv64\lower.isle line 524.
                                        return v639;
                                    }
                                }
                            }
                            let v106 = C::def_inst(ctx, v64.0);
                            if let Some(v107) = v106 {
                                let v108 = &C::inst_data_value(ctx, v107);
                                if let &InstructionData::Unary {
                                    opcode: ref v109,
                                    arg: v110,
                                } = v108 {
                                    if let &Opcode::Splat = v109 {
                                        let v237 = constructor_put_in_vreg(ctx, v64.1);
                                        let v238 = constructor_put_in_xreg(ctx, v110);
                                        let v204 = &constructor_unmasked(ctx);
                                        let v205 = C::vstate_from_type(ctx, v12);
                                        let v634 = constructor_rv_vmulh_vx(ctx, v237, v238, v204, v205);
                                        let v635 = constructor_output_vreg(ctx, v634);
                                        let v636 = Some(v635);
                                        // Rule at src\isa\riscv64\lower.isle line 521.
                                        return v636;
                                    }
                                }
                            }
                            let v202 = constructor_put_in_vreg(ctx, v64.0);
                            let v203 = constructor_put_in_vreg(ctx, v64.1);
                            let v204 = &constructor_unmasked(ctx);
                            let v205 = C::vstate_from_type(ctx, v12);
                            let v631 = constructor_rv_vmulh_vv(ctx, v202, v203, v204, v205);
                            let v632 = constructor_output_vreg(ctx, v631);
                            let v633 = Some(v632);
                            // Rule at src\isa\riscv64\lower.isle line 518.
                            return v633;
                        }
                        let v75 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v76) = v75 {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v626 = constructor_sext(ctx, v64.0);
                            let v627 = constructor_sext(ctx, v64.1);
                            let v628 = constructor_lower_smlhi(ctx, v76, v626, v627);
                            let v629 = constructor_output_xreg(ctx, v628);
                            let v630 = Some(v629);
                            // Rule at src\isa\riscv64\lower.isle line 515.
                            return v630;
                        }
                    }
                }
                &Opcode::SqmulRoundSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v106 = C::def_inst(ctx, v64.0);
                            if let Some(v107) = v106 {
                                let v108 = &C::inst_data_value(ctx, v107);
                                if let &InstructionData::Unary {
                                    opcode: ref v109,
                                    arg: v110,
                                } = v108 {
                                    if let &Opcode::Splat = v109 {
                                        let v237 = constructor_put_in_vreg(ctx, v64.1);
                                        let v238 = constructor_put_in_xreg(ctx, v110);
                                        let v204 = &constructor_unmasked(ctx);
                                        let v205 = C::vstate_from_type(ctx, v12);
                                        let v2862 = constructor_rv_vsmul_vx(ctx, v237, v238, v204, v205);
                                        let v2863 = constructor_output_vreg(ctx, v2862);
                                        let v2864 = Some(v2863);
                                        // Rule at src\isa\riscv64\lower.isle line 2991.
                                        return v2864;
                                    }
                                }
                            }
                            let v94 = C::def_inst(ctx, v64.1);
                            if let Some(v95) = v94 {
                                let v96 = &C::inst_data_value(ctx, v95);
                                if let &InstructionData::Unary {
                                    opcode: ref v97,
                                    arg: v98,
                                } = v96 {
                                    if let &Opcode::Splat = v97 {
                                        let v202 = constructor_put_in_vreg(ctx, v64.0);
                                        let v209 = constructor_put_in_xreg(ctx, v98);
                                        let v204 = &constructor_unmasked(ctx);
                                        let v205 = C::vstate_from_type(ctx, v12);
                                        let v2859 = constructor_rv_vsmul_vx(ctx, v202, v209, v204, v205);
                                        let v2860 = constructor_output_vreg(ctx, v2859);
                                        let v2861 = Some(v2860);
                                        // Rule at src\isa\riscv64\lower.isle line 2988.
                                        return v2861;
                                    }
                                }
                            }
                            let v202 = constructor_put_in_vreg(ctx, v64.0);
                            let v203 = constructor_put_in_vreg(ctx, v64.1);
                            let v204 = &constructor_unmasked(ctx);
                            let v205 = C::vstate_from_type(ctx, v12);
                            let v2856 = constructor_rv_vsmul_vv(ctx, v202, v203, v204, v205);
                            let v2857 = constructor_output_vreg(ctx, v2856);
                            let v2858 = Some(v2857);
                            // Rule at src\isa\riscv64\lower.isle line 2985.
                            return v2858;
                        }
                    }
                }
                &Opcode::Udiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v660 = C::has_m(ctx);
                        if v660 == true {
                            let v3 = C::value_type(ctx, v2);
                            match v3 {
                                I32 => {
                                    let v64 = C::unpack_value_array_2(ctx, v63);
                                    let v94 = C::def_inst(ctx, v64.1);
                                    if let Some(v95) = v94 {
                                        let v96 = &C::inst_data_value(ctx, v95);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v665,
                                            imm: v666,
                                        } = v96 {
                                            if let &Opcode::Iconst = v665 {
                                                let v676 = C::safe_divisor_from_imm64(ctx, I32, v666);
                                                if let Some(v677) = v676 {
                                                    let v67 = constructor_put_in_xreg(ctx, v64.0);
                                                    let v68 = constructor_put_in_xreg(ctx, v64.1);
                                                    let v678 = constructor_rv_divuw(ctx, v67, v68);
                                                    let v679 = constructor_output_xreg(ctx, v678);
                                                    let v680 = Some(v679);
                                                    // Rule at src\isa\riscv64\lower.isle line 559.
                                                    return v680;
                                                }
                                            }
                                        }
                                    }
                                    let v67 = constructor_put_in_xreg(ctx, v64.0);
                                    let v641 = constructor_zext(ctx, v64.1);
                                    let v661 = constructor_nonzero_divisor(ctx, v641);
                                    let v672 = constructor_rv_divuw(ctx, v67, v661);
                                    let v673 = constructor_output_xreg(ctx, v672);
                                    let v674 = Some(v673);
                                    // Rule at src\isa\riscv64\lower.isle line 555.
                                    return v674;
                                }
                                I64 => {
                                    let v64 = C::unpack_value_array_2(ctx, v63);
                                    let v94 = C::def_inst(ctx, v64.1);
                                    if let Some(v95) = v94 {
                                        let v96 = &C::inst_data_value(ctx, v95);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v665,
                                            imm: v666,
                                        } = v96 {
                                            if let &Opcode::Iconst = v665 {
                                                let v685 = C::safe_divisor_from_imm64(ctx, I64, v666);
                                                if let Some(v686) = v685 {
                                                    let v67 = constructor_put_in_xreg(ctx, v64.0);
                                                    let v68 = constructor_put_in_xreg(ctx, v64.1);
                                                    let v687 = constructor_rv_divu(ctx, v67, v68);
                                                    let v688 = constructor_output_xreg(ctx, v687);
                                                    let v689 = Some(v688);
                                                    // Rule at src\isa\riscv64\lower.isle line 568.
                                                    return v689;
                                                }
                                            }
                                        }
                                    }
                                    let v67 = constructor_put_in_xreg(ctx, v64.0);
                                    let v68 = constructor_put_in_xreg(ctx, v64.1);
                                    let v681 = constructor_nonzero_divisor(ctx, v68);
                                    let v682 = constructor_rv_divu(ctx, v67, v681);
                                    let v683 = constructor_output_xreg(ctx, v682);
                                    let v684 = Some(v683);
                                    // Rule at src\isa\riscv64\lower.isle line 564.
                                    return v684;
                                }
                                _ => {}
                            }
                            let v658 = C::fits_in_16(ctx, v3);
                            if let Some(v659) = v658 {
                                let v64 = C::unpack_value_array_2(ctx, v63);
                                let v94 = C::def_inst(ctx, v64.1);
                                if let Some(v95) = v94 {
                                    let v96 = &C::inst_data_value(ctx, v95);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v665,
                                        imm: v666,
                                    } = v96 {
                                        if let &Opcode::Iconst = v665 {
                                            let v667 = C::safe_divisor_from_imm64(ctx, v659, v666);
                                            if let Some(v668) = v667 {
                                                let v640 = constructor_zext(ctx, v64.0);
                                                let v641 = constructor_zext(ctx, v64.1);
                                                let v669 = constructor_rv_divuw(ctx, v640, v641);
                                                let v670 = constructor_output_xreg(ctx, v669);
                                                let v671 = Some(v670);
                                                // Rule at src\isa\riscv64\lower.isle line 550.
                                                return v671;
                                            }
                                        }
                                    }
                                }
                                let v640 = constructor_zext(ctx, v64.0);
                                let v641 = constructor_zext(ctx, v64.1);
                                let v661 = constructor_nonzero_divisor(ctx, v641);
                                let v662 = constructor_rv_divuw(ctx, v640, v661);
                                let v663 = constructor_output_xreg(ctx, v662);
                                let v664 = Some(v663);
                                // Rule at src\isa\riscv64\lower.isle line 546.
                                return v664;
                            }
                        }
                    }
                }
                &Opcode::Sdiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v660 = C::has_m(ctx);
                        if v660 == true {
                            let v3 = C::value_type(ctx, v2);
                            match v3 {
                                I32 => {
                                    let v64 = C::unpack_value_array_2(ctx, v63);
                                    let v94 = C::def_inst(ctx, v64.1);
                                    if let Some(v95) = v94 {
                                        let v96 = &C::inst_data_value(ctx, v95);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v665,
                                            imm: v666,
                                        } = v96 {
                                            if let &Opcode::Iconst = v665 {
                                                let v676 = C::safe_divisor_from_imm64(ctx, I32, v666);
                                                if let Some(v677) = v676 {
                                                    let v67 = constructor_put_in_xreg(ctx, v64.0);
                                                    let v68 = constructor_put_in_xreg(ctx, v64.1);
                                                    let v701 = constructor_rv_divw(ctx, v67, v68);
                                                    let v702 = constructor_output_xreg(ctx, v701);
                                                    let v703 = Some(v702);
                                                    // Rule at src\isa\riscv64\lower.isle line 596.
                                                    return v703;
                                                }
                                            }
                                        }
                                    }
                                    let v626 = constructor_sext(ctx, v64.0);
                                    let v627 = constructor_sext(ctx, v64.1);
                                    let v697 = constructor_safe_sdiv_divisor(ctx, I32, v626, v627);
                                    let v698 = constructor_rv_divw(ctx, v626, v697);
                                    let v699 = constructor_output_xreg(ctx, v698);
                                    let v700 = Some(v699);
                                    // Rule at src\isa\riscv64\lower.isle line 591.
                                    return v700;
                                }
                                I64 => {
                                    let v64 = C::unpack_value_array_2(ctx, v63);
                                    let v94 = C::def_inst(ctx, v64.1);
                                    if let Some(v95) = v94 {
                                        let v96 = &C::inst_data_value(ctx, v95);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v665,
                                            imm: v666,
                                        } = v96 {
                                            if let &Opcode::Iconst = v665 {
                                                let v685 = C::safe_divisor_from_imm64(ctx, I64, v666);
                                                if let Some(v686) = v685 {
                                                    let v67 = constructor_put_in_xreg(ctx, v64.0);
                                                    let v68 = constructor_put_in_xreg(ctx, v64.1);
                                                    let v709 = constructor_rv_div(ctx, v67, v68);
                                                    let v710 = constructor_output_xreg(ctx, v709);
                                                    let v711 = Some(v710);
                                                    // Rule at src\isa\riscv64\lower.isle line 605.
                                                    return v711;
                                                }
                                            }
                                        }
                                    }
                                    let v67 = constructor_put_in_xreg(ctx, v64.0);
                                    let v102 = constructor_put_in_xreg(ctx, v64.0);
                                    let v704 = constructor_put_in_xreg(ctx, v64.1);
                                    let v705 = constructor_safe_sdiv_divisor(ctx, I64, v102, v704);
                                    let v706 = constructor_rv_div(ctx, v67, v705);
                                    let v707 = constructor_output_xreg(ctx, v706);
                                    let v708 = Some(v707);
                                    // Rule at src\isa\riscv64\lower.isle line 601.
                                    return v708;
                                }
                                _ => {}
                            }
                            let v658 = C::fits_in_16(ctx, v3);
                            if let Some(v659) = v658 {
                                let v64 = C::unpack_value_array_2(ctx, v63);
                                let v94 = C::def_inst(ctx, v64.1);
                                if let Some(v95) = v94 {
                                    let v96 = &C::inst_data_value(ctx, v95);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v665,
                                        imm: v666,
                                    } = v96 {
                                        if let &Opcode::Iconst = v665 {
                                            let v667 = C::safe_divisor_from_imm64(ctx, v659, v666);
                                            if let Some(v668) = v667 {
                                                let v626 = constructor_sext(ctx, v64.0);
                                                let v627 = constructor_sext(ctx, v64.1);
                                                let v694 = constructor_rv_divw(ctx, v626, v627);
                                                let v695 = constructor_output_xreg(ctx, v694);
                                                let v696 = Some(v695);
                                                // Rule at src\isa\riscv64\lower.isle line 586.
                                                return v696;
                                            }
                                        }
                                    }
                                }
                                let v626 = constructor_sext(ctx, v64.0);
                                let v627 = constructor_sext(ctx, v64.1);
                                let v690 = constructor_safe_sdiv_divisor(ctx, v659, v626, v627);
                                let v691 = constructor_rv_divw(ctx, v626, v690);
                                let v692 = constructor_output_xreg(ctx, v691);
                                let v693 = Some(v692);
                                // Rule at src\isa\riscv64\lower.isle line 581.
                                return v693;
                            }
                        }
                    }
                }
                &Opcode::Urem => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v660 = C::has_m(ctx);
                        if v660 == true {
                            let v3 = C::value_type(ctx, v2);
                            match v3 {
                                I32 => {
                                    let v64 = C::unpack_value_array_2(ctx, v63);
                                    let v94 = C::def_inst(ctx, v64.1);
                                    if let Some(v95) = v94 {
                                        let v96 = &C::inst_data_value(ctx, v95);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v665,
                                            imm: v666,
                                        } = v96 {
                                            if let &Opcode::Iconst = v665 {
                                                let v676 = C::safe_divisor_from_imm64(ctx, I32, v666);
                                                if let Some(v677) = v676 {
                                                    let v67 = constructor_put_in_xreg(ctx, v64.0);
                                                    let v68 = constructor_put_in_xreg(ctx, v64.1);
                                                    let v721 = constructor_rv_remuw(ctx, v67, v68);
                                                    let v722 = constructor_output_xreg(ctx, v721);
                                                    let v723 = Some(v722);
                                                    // Rule at src\isa\riscv64\lower.isle line 643.
                                                    return v723;
                                                }
                                            }
                                        }
                                    }
                                    let v67 = constructor_put_in_xreg(ctx, v64.0);
                                    let v641 = constructor_zext(ctx, v64.1);
                                    let v661 = constructor_nonzero_divisor(ctx, v641);
                                    let v718 = constructor_rv_remuw(ctx, v67, v661);
                                    let v719 = constructor_output_xreg(ctx, v718);
                                    let v720 = Some(v719);
                                    // Rule at src\isa\riscv64\lower.isle line 639.
                                    return v720;
                                }
                                I64 => {
                                    let v64 = C::unpack_value_array_2(ctx, v63);
                                    let v94 = C::def_inst(ctx, v64.1);
                                    if let Some(v95) = v94 {
                                        let v96 = &C::inst_data_value(ctx, v95);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v665,
                                            imm: v666,
                                        } = v96 {
                                            if let &Opcode::Iconst = v665 {
                                                let v685 = C::safe_divisor_from_imm64(ctx, I64, v666);
                                                if let Some(v686) = v685 {
                                                    let v67 = constructor_put_in_xreg(ctx, v64.0);
                                                    let v68 = constructor_put_in_xreg(ctx, v64.1);
                                                    let v727 = constructor_rv_remu(ctx, v67, v68);
                                                    let v728 = constructor_output_xreg(ctx, v727);
                                                    let v729 = Some(v728);
                                                    // Rule at src\isa\riscv64\lower.isle line 652.
                                                    return v729;
                                                }
                                            }
                                        }
                                    }
                                    let v67 = constructor_put_in_xreg(ctx, v64.0);
                                    let v68 = constructor_put_in_xreg(ctx, v64.1);
                                    let v681 = constructor_nonzero_divisor(ctx, v68);
                                    let v724 = constructor_rv_remu(ctx, v67, v681);
                                    let v725 = constructor_output_xreg(ctx, v724);
                                    let v726 = Some(v725);
                                    // Rule at src\isa\riscv64\lower.isle line 648.
                                    return v726;
                                }
                                _ => {}
                            }
                            let v658 = C::fits_in_16(ctx, v3);
                            if let Some(v659) = v658 {
                                let v64 = C::unpack_value_array_2(ctx, v63);
                                let v94 = C::def_inst(ctx, v64.1);
                                if let Some(v95) = v94 {
                                    let v96 = &C::inst_data_value(ctx, v95);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v665,
                                        imm: v666,
                                    } = v96 {
                                        if let &Opcode::Iconst = v665 {
                                            let v667 = C::safe_divisor_from_imm64(ctx, v659, v666);
                                            if let Some(v668) = v667 {
                                                let v640 = constructor_zext(ctx, v64.0);
                                                let v641 = constructor_zext(ctx, v64.1);
                                                let v715 = constructor_rv_remuw(ctx, v640, v641);
                                                let v716 = constructor_output_xreg(ctx, v715);
                                                let v717 = Some(v716);
                                                // Rule at src\isa\riscv64\lower.isle line 634.
                                                return v717;
                                            }
                                        }
                                    }
                                }
                                let v640 = constructor_zext(ctx, v64.0);
                                let v641 = constructor_zext(ctx, v64.1);
                                let v661 = constructor_nonzero_divisor(ctx, v641);
                                let v712 = constructor_rv_remuw(ctx, v640, v661);
                                let v713 = constructor_output_xreg(ctx, v712);
                                let v714 = Some(v713);
                                // Rule at src\isa\riscv64\lower.isle line 630.
                                return v714;
                            }
                        }
                    }
                }
                &Opcode::Srem => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v660 = C::has_m(ctx);
                        if v660 == true {
                            let v3 = C::value_type(ctx, v2);
                            match v3 {
                                I32 => {
                                    let v64 = C::unpack_value_array_2(ctx, v63);
                                    let v94 = C::def_inst(ctx, v64.1);
                                    if let Some(v95) = v94 {
                                        let v96 = &C::inst_data_value(ctx, v95);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v665,
                                            imm: v666,
                                        } = v96 {
                                            if let &Opcode::Iconst = v665 {
                                                let v676 = C::safe_divisor_from_imm64(ctx, I32, v666);
                                                if let Some(v677) = v676 {
                                                    let v67 = constructor_put_in_xreg(ctx, v64.0);
                                                    let v68 = constructor_put_in_xreg(ctx, v64.1);
                                                    let v740 = constructor_rv_remw(ctx, v67, v68);
                                                    let v741 = constructor_output_xreg(ctx, v740);
                                                    let v742 = Some(v741);
                                                    // Rule at src\isa\riscv64\lower.isle line 672.
                                                    return v742;
                                                }
                                            }
                                        }
                                    }
                                    let v67 = constructor_put_in_xreg(ctx, v64.0);
                                    let v627 = constructor_sext(ctx, v64.1);
                                    let v730 = constructor_nonzero_divisor(ctx, v627);
                                    let v737 = constructor_rv_remw(ctx, v67, v730);
                                    let v738 = constructor_output_xreg(ctx, v737);
                                    let v739 = Some(v738);
                                    // Rule at src\isa\riscv64\lower.isle line 668.
                                    return v739;
                                }
                                I64 => {
                                    let v64 = C::unpack_value_array_2(ctx, v63);
                                    let v94 = C::def_inst(ctx, v64.1);
                                    if let Some(v95) = v94 {
                                        let v96 = &C::inst_data_value(ctx, v95);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v665,
                                            imm: v666,
                                        } = v96 {
                                            if let &Opcode::Iconst = v665 {
                                                let v685 = C::safe_divisor_from_imm64(ctx, I64, v666);
                                                if let Some(v686) = v685 {
                                                    let v67 = constructor_put_in_xreg(ctx, v64.0);
                                                    let v68 = constructor_put_in_xreg(ctx, v64.1);
                                                    let v746 = constructor_rv_rem(ctx, v67, v68);
                                                    let v747 = constructor_output_xreg(ctx, v746);
                                                    let v748 = Some(v747);
                                                    // Rule at src\isa\riscv64\lower.isle line 681.
                                                    return v748;
                                                }
                                            }
                                        }
                                    }
                                    let v67 = constructor_put_in_xreg(ctx, v64.0);
                                    let v68 = constructor_put_in_xreg(ctx, v64.1);
                                    let v681 = constructor_nonzero_divisor(ctx, v68);
                                    let v743 = constructor_rv_rem(ctx, v67, v681);
                                    let v744 = constructor_output_xreg(ctx, v743);
                                    let v745 = Some(v744);
                                    // Rule at src\isa\riscv64\lower.isle line 677.
                                    return v745;
                                }
                                _ => {}
                            }
                            let v658 = C::fits_in_16(ctx, v3);
                            if let Some(v659) = v658 {
                                let v64 = C::unpack_value_array_2(ctx, v63);
                                let v94 = C::def_inst(ctx, v64.1);
                                if let Some(v95) = v94 {
                                    let v96 = &C::inst_data_value(ctx, v95);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v665,
                                        imm: v666,
                                    } = v96 {
                                        if let &Opcode::Iconst = v665 {
                                            let v667 = C::safe_divisor_from_imm64(ctx, v659, v666);
                                            if let Some(v668) = v667 {
                                                let v626 = constructor_sext(ctx, v64.0);
                                                let v627 = constructor_sext(ctx, v64.1);
                                                let v734 = constructor_rv_remw(ctx, v626, v627);
                                                let v735 = constructor_output_xreg(ctx, v734);
                                                let v736 = Some(v735);
                                                // Rule at src\isa\riscv64\lower.isle line 663.
                                                return v736;
                                            }
                                        }
                                    }
                                }
                                let v626 = constructor_sext(ctx, v64.0);
                                let v627 = constructor_sext(ctx, v64.1);
                                let v730 = constructor_nonzero_divisor(ctx, v627);
                                let v731 = constructor_rv_remw(ctx, v626, v730);
                                let v732 = constructor_output_xreg(ctx, v731);
                                let v733 = Some(v732);
                                // Rule at src\isa\riscv64\lower.isle line 659.
                                return v733;
                            }
                        }
                    }
                }
                &Opcode::Band => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v847 = C::has_zbs(ctx);
                        if v847 == true {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v106 = C::def_inst(ctx, v64.0);
                            if let Some(v107) = v106 {
                                let v108 = &C::inst_data_value(ctx, v107);
                                match v108 {
                                    &InstructionData::Binary {
                                        opcode: ref v134,
                                        args: ref v135,
                                    } => {
                                        match v134 {
                                            &Opcode::Ushr => {
                                                let v3 = C::value_type(ctx, v2);
                                                match v3 {
                                                    I32 => {
                                                        let v94 = C::def_inst(ctx, v64.1);
                                                        if let Some(v95) = v94 {
                                                            let v96 = &C::inst_data_value(ctx, v95);
                                                            if let &InstructionData::UnaryImm {
                                                                opcode: ref v665,
                                                                imm: v666,
                                                            } = v96 {
                                                                if let &Opcode::Iconst = v665 {
                                                                    let v870 = C::u64_from_imm64(ctx, v666);
                                                                    if v870 == 0x1_u64 {
                                                                        let v136 = C::unpack_value_array_2(ctx, v135);
                                                                        let v904 = C::i64_from_iconst(ctx, v136.1);
                                                                        if let Some(v905) = v904 {
                                                                            let v906 = C::imm12_from_i64(ctx, v905);
                                                                            if let Some(v907) = v906 {
                                                                                let v884 = constructor_put_in_xreg(ctx, v136.0);
                                                                                let v909 = C::imm12_and(ctx, v907, 0x1f_u64);
                                                                                let v910 = constructor_rv_bexti(ctx, v884, v909);
                                                                                let v911 = constructor_output_xreg(ctx, v910);
                                                                                let v912 = Some(v911);
                                                                                // Rule at src\isa\riscv64\lower.isle line 810.
                                                                                return v912;
                                                                            }
                                                                        }
                                                                        let v884 = constructor_put_in_xreg(ctx, v136.0);
                                                                        let v885 = constructor_put_in_xreg(ctx, v136.1);
                                                                        let v887 = C::imm12_const(ctx, 31_i32);
                                                                        let v888 = constructor_rv_andi(ctx, v885, v887);
                                                                        let v889 = constructor_rv_bext(ctx, v884, v888);
                                                                        let v890 = constructor_output_xreg(ctx, v889);
                                                                        let v891 = Some(v890);
                                                                        // Rule at src\isa\riscv64\lower.isle line 784.
                                                                        return v891;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    I64 => {
                                                        let v94 = C::def_inst(ctx, v64.1);
                                                        if let Some(v95) = v94 {
                                                            let v96 = &C::inst_data_value(ctx, v95);
                                                            if let &InstructionData::UnaryImm {
                                                                opcode: ref v665,
                                                                imm: v666,
                                                            } = v96 {
                                                                if let &Opcode::Iconst = v665 {
                                                                    let v870 = C::u64_from_imm64(ctx, v666);
                                                                    if v870 == 0x1_u64 {
                                                                        let v136 = C::unpack_value_array_2(ctx, v135);
                                                                        let v904 = C::i64_from_iconst(ctx, v136.1);
                                                                        if let Some(v905) = v904 {
                                                                            let v906 = C::imm12_from_i64(ctx, v905);
                                                                            if let Some(v907) = v906 {
                                                                                let v884 = constructor_put_in_xreg(ctx, v136.0);
                                                                                let v914 = C::imm12_and(ctx, v907, 0x3f_u64);
                                                                                let v915 = constructor_rv_bexti(ctx, v884, v914);
                                                                                let v916 = constructor_output_xreg(ctx, v915);
                                                                                let v917 = Some(v916);
                                                                                // Rule at src\isa\riscv64\lower.isle line 816.
                                                                                return v917;
                                                                            }
                                                                        }
                                                                        let v884 = constructor_put_in_xreg(ctx, v136.0);
                                                                        let v885 = constructor_put_in_xreg(ctx, v136.1);
                                                                        let v898 = constructor_rv_bext(ctx, v884, v885);
                                                                        let v899 = constructor_output_xreg(ctx, v898);
                                                                        let v900 = Some(v899);
                                                                        // Rule at src\isa\riscv64\lower.isle line 797.
                                                                        return v900;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                            &Opcode::Sshr => {
                                                let v3 = C::value_type(ctx, v2);
                                                match v3 {
                                                    I32 => {
                                                        let v94 = C::def_inst(ctx, v64.1);
                                                        if let Some(v95) = v94 {
                                                            let v96 = &C::inst_data_value(ctx, v95);
                                                            if let &InstructionData::UnaryImm {
                                                                opcode: ref v665,
                                                                imm: v666,
                                                            } = v96 {
                                                                if let &Opcode::Iconst = v665 {
                                                                    let v870 = C::u64_from_imm64(ctx, v666);
                                                                    if v870 == 0x1_u64 {
                                                                        let v136 = C::unpack_value_array_2(ctx, v135);
                                                                        let v904 = C::i64_from_iconst(ctx, v136.1);
                                                                        if let Some(v905) = v904 {
                                                                            let v906 = C::imm12_from_i64(ctx, v905);
                                                                            if let Some(v907) = v906 {
                                                                                let v884 = constructor_put_in_xreg(ctx, v136.0);
                                                                                let v909 = C::imm12_and(ctx, v907, 0x1f_u64);
                                                                                let v910 = constructor_rv_bexti(ctx, v884, v909);
                                                                                let v911 = constructor_output_xreg(ctx, v910);
                                                                                let v912 = Some(v911);
                                                                                // Rule at src\isa\riscv64\lower.isle line 813.
                                                                                return v912;
                                                                            }
                                                                        }
                                                                        let v884 = constructor_put_in_xreg(ctx, v136.0);
                                                                        let v885 = constructor_put_in_xreg(ctx, v136.1);
                                                                        let v887 = C::imm12_const(ctx, 31_i32);
                                                                        let v888 = constructor_rv_andi(ctx, v885, v887);
                                                                        let v889 = constructor_rv_bext(ctx, v884, v888);
                                                                        let v890 = constructor_output_xreg(ctx, v889);
                                                                        let v891 = Some(v890);
                                                                        // Rule at src\isa\riscv64\lower.isle line 787.
                                                                        return v891;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    I64 => {
                                                        let v94 = C::def_inst(ctx, v64.1);
                                                        if let Some(v95) = v94 {
                                                            let v96 = &C::inst_data_value(ctx, v95);
                                                            if let &InstructionData::UnaryImm {
                                                                opcode: ref v665,
                                                                imm: v666,
                                                            } = v96 {
                                                                if let &Opcode::Iconst = v665 {
                                                                    let v870 = C::u64_from_imm64(ctx, v666);
                                                                    if v870 == 0x1_u64 {
                                                                        let v136 = C::unpack_value_array_2(ctx, v135);
                                                                        let v904 = C::i64_from_iconst(ctx, v136.1);
                                                                        if let Some(v905) = v904 {
                                                                            let v906 = C::imm12_from_i64(ctx, v905);
                                                                            if let Some(v907) = v906 {
                                                                                let v884 = constructor_put_in_xreg(ctx, v136.0);
                                                                                let v914 = C::imm12_and(ctx, v907, 0x3f_u64);
                                                                                let v915 = constructor_rv_bexti(ctx, v884, v914);
                                                                                let v916 = constructor_output_xreg(ctx, v915);
                                                                                let v917 = Some(v916);
                                                                                // Rule at src\isa\riscv64\lower.isle line 819.
                                                                                return v917;
                                                                            }
                                                                        }
                                                                        let v884 = constructor_put_in_xreg(ctx, v136.0);
                                                                        let v885 = constructor_put_in_xreg(ctx, v136.1);
                                                                        let v898 = constructor_rv_bext(ctx, v884, v885);
                                                                        let v899 = constructor_output_xreg(ctx, v898);
                                                                        let v900 = Some(v899);
                                                                        // Rule at src\isa\riscv64\lower.isle line 800.
                                                                        return v900;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                    &InstructionData::UnaryImm {
                                        opcode: ref v876,
                                        imm: v877,
                                    } => {
                                        if let &Opcode::Iconst = v876 {
                                            let v3 = C::value_type(ctx, v2);
                                            match v3 {
                                                I32 => {
                                                    let v94 = C::def_inst(ctx, v64.1);
                                                    if let Some(v95) = v94 {
                                                        let v96 = &C::inst_data_value(ctx, v95);
                                                        if let &InstructionData::Binary {
                                                            opcode: ref v116,
                                                            args: ref v117,
                                                        } = v96 {
                                                            match v116 {
                                                                &Opcode::Ushr => {
                                                                    let v878 = C::u64_from_imm64(ctx, v877);
                                                                    if v878 == 0x1_u64 {
                                                                        let v118 = C::unpack_value_array_2(ctx, v117);
                                                                        let v892 = constructor_put_in_xreg(ctx, v118.0);
                                                                        let v893 = constructor_put_in_xreg(ctx, v118.1);
                                                                        let v887 = C::imm12_const(ctx, 31_i32);
                                                                        let v894 = constructor_rv_andi(ctx, v893, v887);
                                                                        let v895 = constructor_rv_bext(ctx, v892, v894);
                                                                        let v896 = constructor_output_xreg(ctx, v895);
                                                                        let v897 = Some(v896);
                                                                        // Rule at src\isa\riscv64\lower.isle line 790.
                                                                        return v897;
                                                                    }
                                                                }
                                                                &Opcode::Sshr => {
                                                                    let v878 = C::u64_from_imm64(ctx, v877);
                                                                    if v878 == 0x1_u64 {
                                                                        let v118 = C::unpack_value_array_2(ctx, v117);
                                                                        let v892 = constructor_put_in_xreg(ctx, v118.0);
                                                                        let v893 = constructor_put_in_xreg(ctx, v118.1);
                                                                        let v887 = C::imm12_const(ctx, 31_i32);
                                                                        let v894 = constructor_rv_andi(ctx, v893, v887);
                                                                        let v895 = constructor_rv_bext(ctx, v892, v894);
                                                                        let v896 = constructor_output_xreg(ctx, v895);
                                                                        let v897 = Some(v896);
                                                                        // Rule at src\isa\riscv64\lower.isle line 793.
                                                                        return v897;
                                                                    }
                                                                }
                                                                _ => {}
                                                            }
                                                        }
                                                    }
                                                }
                                                I64 => {
                                                    let v94 = C::def_inst(ctx, v64.1);
                                                    if let Some(v95) = v94 {
                                                        let v96 = &C::inst_data_value(ctx, v95);
                                                        if let &InstructionData::Binary {
                                                            opcode: ref v116,
                                                            args: ref v117,
                                                        } = v96 {
                                                            match v116 {
                                                                &Opcode::Ushr => {
                                                                    let v878 = C::u64_from_imm64(ctx, v877);
                                                                    if v878 == 0x1_u64 {
                                                                        let v118 = C::unpack_value_array_2(ctx, v117);
                                                                        let v892 = constructor_put_in_xreg(ctx, v118.0);
                                                                        let v893 = constructor_put_in_xreg(ctx, v118.1);
                                                                        let v901 = constructor_rv_bext(ctx, v892, v893);
                                                                        let v902 = constructor_output_xreg(ctx, v901);
                                                                        let v903 = Some(v902);
                                                                        // Rule at src\isa\riscv64\lower.isle line 803.
                                                                        return v903;
                                                                    }
                                                                }
                                                                &Opcode::Sshr => {
                                                                    let v878 = C::u64_from_imm64(ctx, v877);
                                                                    if v878 == 0x1_u64 {
                                                                        let v118 = C::unpack_value_array_2(ctx, v117);
                                                                        let v892 = constructor_put_in_xreg(ctx, v118.0);
                                                                        let v893 = constructor_put_in_xreg(ctx, v118.1);
                                                                        let v901 = constructor_rv_bext(ctx, v892, v893);
                                                                        let v902 = constructor_output_xreg(ctx, v901);
                                                                        let v903 = Some(v902);
                                                                        // Rule at src\isa\riscv64\lower.isle line 806.
                                                                        return v903;
                                                                    }
                                                                }
                                                                _ => {}
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                            let v749 = C::fits_in_64(ctx, v3);
                                            if let Some(v750) = v749 {
                                                let v878 = C::u64_from_imm64(ctx, v877);
                                                let v879 = C::bclr_imm(ctx, v750, v878);
                                                if let Some(v880) = v879 {
                                                    let v774 = constructor_put_in_xreg(ctx, v64.1);
                                                    let v881 = constructor_rv_bclri(ctx, v774, v880);
                                                    let v882 = constructor_output_xreg(ctx, v881);
                                                    let v883 = Some(v882);
                                                    // Rule at src\isa\riscv64\lower.isle line 774.
                                                    return v883;
                                                }
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                            let v94 = C::def_inst(ctx, v64.1);
                            if let Some(v95) = v94 {
                                let v96 = &C::inst_data_value(ctx, v95);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v665,
                                    imm: v666,
                                } = v96 {
                                    if let &Opcode::Iconst = v665 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v749 = C::fits_in_64(ctx, v3);
                                        if let Some(v750) = v749 {
                                            let v870 = C::u64_from_imm64(ctx, v666);
                                            let v871 = C::bclr_imm(ctx, v750, v870);
                                            if let Some(v872) = v871 {
                                                let v67 = constructor_put_in_xreg(ctx, v64.0);
                                                let v873 = constructor_rv_bclri(ctx, v67, v872);
                                                let v874 = constructor_output_xreg(ctx, v873);
                                                let v875 = Some(v874);
                                                // Rule at src\isa\riscv64\lower.isle line 770.
                                                return v875;
                                            }
                                        }
                                    }
                                }
                            }
                            let v3 = C::value_type(ctx, v2);
                            if v3 == I64 {
                                if let Some(v107) = v106 {
                                    let v108 = &C::inst_data_value(ctx, v107);
                                    if let &InstructionData::Unary {
                                        opcode: ref v109,
                                        arg: v110,
                                    } = v108 {
                                        if let &Opcode::Bnot = v109 {
                                            let v242 = C::def_inst(ctx, v110);
                                            if let Some(v243) = v242 {
                                                let v244 = &C::inst_data_value(ctx, v243);
                                                if let &InstructionData::Binary {
                                                    opcode: ref v425,
                                                    args: ref v426,
                                                } = v244 {
                                                    if let &Opcode::Ishl = v425 {
                                                        let v427 = C::unpack_value_array_2(ctx, v426);
                                                        let v857 = C::i64_from_iconst(ctx, v427.0);
                                                        if let Some(v858) = v857 {
                                                            if v858 == 1_i64 {
                                                                let v774 = constructor_put_in_xreg(ctx, v64.1);
                                                                let v859 = constructor_put_in_xreg(ctx, v427.1);
                                                                let v867 = constructor_rv_bclr(ctx, v774, v859);
                                                                let v868 = constructor_output_xreg(ctx, v867);
                                                                let v869 = Some(v868);
                                                                // Rule at src\isa\riscv64\lower.isle line 766.
                                                                return v869;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                if let Some(v95) = v94 {
                                    let v96 = &C::inst_data_value(ctx, v95);
                                    if let &InstructionData::Unary {
                                        opcode: ref v97,
                                        arg: v98,
                                    } = v96 {
                                        if let &Opcode::Bnot = v97 {
                                            let v213 = C::def_inst(ctx, v98);
                                            if let Some(v214) = v213 {
                                                let v215 = &C::inst_data_value(ctx, v214);
                                                if let &InstructionData::Binary {
                                                    opcode: ref v396,
                                                    args: ref v397,
                                                } = v215 {
                                                    if let &Opcode::Ishl = v396 {
                                                        let v398 = C::unpack_value_array_2(ctx, v397);
                                                        let v845 = C::i64_from_iconst(ctx, v398.0);
                                                        if let Some(v846) = v845 {
                                                            if v846 == 1_i64 {
                                                                let v67 = constructor_put_in_xreg(ctx, v64.0);
                                                                let v848 = constructor_put_in_xreg(ctx, v398.1);
                                                                let v864 = constructor_rv_bclr(ctx, v67, v848);
                                                                let v865 = constructor_output_xreg(ctx, v864);
                                                                let v866 = Some(v865);
                                                                // Rule at src\isa\riscv64\lower.isle line 763.
                                                                return v866;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let v58 = C::fits_in_32(ctx, v3);
                            if let Some(v59) = v58 {
                                if let Some(v107) = v106 {
                                    let v108 = &C::inst_data_value(ctx, v107);
                                    if let &InstructionData::Unary {
                                        opcode: ref v109,
                                        arg: v110,
                                    } = v108 {
                                        if let &Opcode::Bnot = v109 {
                                            let v242 = C::def_inst(ctx, v110);
                                            if let Some(v243) = v242 {
                                                let v244 = &C::inst_data_value(ctx, v243);
                                                if let &InstructionData::Binary {
                                                    opcode: ref v425,
                                                    args: ref v426,
                                                } = v244 {
                                                    if let &Opcode::Ishl = v425 {
                                                        let v427 = C::unpack_value_array_2(ctx, v426);
                                                        let v857 = C::i64_from_iconst(ctx, v427.0);
                                                        if let Some(v858) = v857 {
                                                            if v858 == 1_i64 {
                                                                let v774 = constructor_put_in_xreg(ctx, v64.1);
                                                                let v859 = constructor_put_in_xreg(ctx, v427.1);
                                                                let v463 = C::ty_bits(ctx, v59);
                                                                let v850 = C::u8_sub(ctx, v463, 0x1_u8);
                                                                let v851 = C::u8_as_i32(ctx, v850);
                                                                let v852 = C::imm12_const(ctx, v851);
                                                                let v860 = constructor_rv_andi(ctx, v859, v852);
                                                                let v861 = constructor_rv_bclr(ctx, v774, v860);
                                                                let v862 = constructor_output_xreg(ctx, v861);
                                                                let v863 = Some(v862);
                                                                // Rule at src\isa\riscv64\lower.isle line 759.
                                                                return v863;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                if let Some(v95) = v94 {
                                    let v96 = &C::inst_data_value(ctx, v95);
                                    if let &InstructionData::Unary {
                                        opcode: ref v97,
                                        arg: v98,
                                    } = v96 {
                                        if let &Opcode::Bnot = v97 {
                                            let v213 = C::def_inst(ctx, v98);
                                            if let Some(v214) = v213 {
                                                let v215 = &C::inst_data_value(ctx, v214);
                                                if let &InstructionData::Binary {
                                                    opcode: ref v396,
                                                    args: ref v397,
                                                } = v215 {
                                                    if let &Opcode::Ishl = v396 {
                                                        let v398 = C::unpack_value_array_2(ctx, v397);
                                                        let v845 = C::i64_from_iconst(ctx, v398.0);
                                                        if let Some(v846) = v845 {
                                                            if v846 == 1_i64 {
                                                                let v67 = constructor_put_in_xreg(ctx, v64.0);
                                                                let v848 = constructor_put_in_xreg(ctx, v398.1);
                                                                let v463 = C::ty_bits(ctx, v59);
                                                                let v850 = C::u8_sub(ctx, v463, 0x1_u8);
                                                                let v851 = C::u8_as_i32(ctx, v850);
                                                                let v852 = C::imm12_const(ctx, v851);
                                                                let v853 = constructor_rv_andi(ctx, v848, v852);
                                                                let v854 = constructor_rv_bclr(ctx, v67, v853);
                                                                let v855 = constructor_output_xreg(ctx, v854);
                                                                let v856 = Some(v855);
                                                                // Rule at src\isa\riscv64\lower.isle line 756.
                                                                return v856;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v256 = constructor_replicated_imm5(ctx, v64.0);
                            if let Some(v257) = v256 {
                                let v237 = constructor_put_in_vreg(ctx, v64.1);
                                let v204 = &constructor_unmasked(ctx);
                                let v205 = C::vstate_from_type(ctx, v12);
                                let v842 = constructor_rv_vand_vi(ctx, v237, v257, v204, v205);
                                let v843 = constructor_output_vreg(ctx, v842);
                                let v844 = Some(v843);
                                // Rule at src\isa\riscv64\lower.isle line 750.
                                return v844;
                            }
                            let v232 = constructor_replicated_imm5(ctx, v64.1);
                            if let Some(v233) = v232 {
                                let v202 = constructor_put_in_vreg(ctx, v64.0);
                                let v204 = &constructor_unmasked(ctx);
                                let v205 = C::vstate_from_type(ctx, v12);
                                let v839 = constructor_rv_vand_vi(ctx, v202, v233, v204, v205);
                                let v840 = constructor_output_vreg(ctx, v839);
                                let v841 = Some(v840);
                                // Rule at src\isa\riscv64\lower.isle line 746.
                                return v841;
                            }
                            let v831 = C::ty_vector_not_float(ctx, v12);
                            if let Some(v832) = v831 {
                                let v106 = C::def_inst(ctx, v64.0);
                                if let Some(v107) = v106 {
                                    let v108 = &C::inst_data_value(ctx, v107);
                                    if let &InstructionData::Unary {
                                        opcode: ref v109,
                                        arg: v110,
                                    } = v108 {
                                        if let &Opcode::Splat = v109 {
                                            let v237 = constructor_put_in_vreg(ctx, v64.1);
                                            let v238 = constructor_put_in_xreg(ctx, v110);
                                            let v204 = &constructor_unmasked(ctx);
                                            let v205 = C::vstate_from_type(ctx, v12);
                                            let v836 = constructor_rv_vand_vx(ctx, v237, v238, v204, v205);
                                            let v837 = constructor_output_vreg(ctx, v836);
                                            let v838 = Some(v837);
                                            // Rule at src\isa\riscv64\lower.isle line 742.
                                            return v838;
                                        }
                                    }
                                }
                                let v94 = C::def_inst(ctx, v64.1);
                                if let Some(v95) = v94 {
                                    let v96 = &C::inst_data_value(ctx, v95);
                                    if let &InstructionData::Unary {
                                        opcode: ref v97,
                                        arg: v98,
                                    } = v96 {
                                        if let &Opcode::Splat = v97 {
                                            let v202 = constructor_put_in_vreg(ctx, v64.0);
                                            let v209 = constructor_put_in_xreg(ctx, v98);
                                            let v204 = &constructor_unmasked(ctx);
                                            let v205 = C::vstate_from_type(ctx, v12);
                                            let v833 = constructor_rv_vand_vx(ctx, v202, v209, v204, v205);
                                            let v834 = constructor_output_vreg(ctx, v833);
                                            let v835 = Some(v834);
                                            // Rule at src\isa\riscv64\lower.isle line 738.
                                            return v835;
                                        }
                                    }
                                }
                            }
                            let v202 = constructor_put_in_vreg(ctx, v64.0);
                            let v203 = constructor_put_in_vreg(ctx, v64.1);
                            let v204 = &constructor_unmasked(ctx);
                            let v205 = C::vstate_from_type(ctx, v12);
                            let v828 = constructor_rv_vand_vv(ctx, v202, v203, v204, v205);
                            let v829 = constructor_output_vreg(ctx, v828);
                            let v830 = Some(v829);
                            // Rule at src\isa\riscv64\lower.isle line 735.
                            return v830;
                        }
                        let v790 = C::has_zbb(ctx);
                        if v790 == true {
                            let v754 = C::ty_reg_pair(ctx, v3);
                            if let Some(v755) = v754 {
                                let v64 = C::unpack_value_array_2(ctx, v63);
                                let v106 = C::def_inst(ctx, v64.0);
                                if let Some(v107) = v106 {
                                    let v108 = &C::inst_data_value(ctx, v107);
                                    if let &InstructionData::Unary {
                                        opcode: ref v109,
                                        arg: v110,
                                    } = v108 {
                                        if let &Opcode::Bnot = v109 {
                                            let v810 = C::put_in_regs(ctx, v64.1);
                                            let v811 = C::value_regs_get(ctx, v810, 0x0_usize);
                                            let v812 = C::xreg_new(ctx, v811);
                                            let v813 = C::put_in_regs(ctx, v110);
                                            let v814 = C::value_regs_get(ctx, v813, 0x0_usize);
                                            let v815 = C::xreg_new(ctx, v814);
                                            let v816 = constructor_rv_andn(ctx, v812, v815);
                                            let v184 = C::put_in_regs(ctx, v64.1);
                                            let v817 = C::value_regs_get(ctx, v184, 0x1_usize);
                                            let v818 = C::xreg_new(ctx, v817);
                                            let v819 = C::put_in_regs(ctx, v110);
                                            let v820 = C::value_regs_get(ctx, v819, 0x1_usize);
                                            let v821 = C::xreg_new(ctx, v820);
                                            let v822 = constructor_rv_andn(ctx, v818, v821);
                                            let v823 = C::xreg_to_reg(ctx, v816);
                                            let v824 = C::xreg_to_reg(ctx, v822);
                                            let v825 = C::value_regs(ctx, v823, v824);
                                            let v826 = C::output(ctx, v825);
                                            let v827 = Some(v826);
                                            // Rule at src\isa\riscv64\lower.isle line 729.
                                            return v827;
                                        }
                                    }
                                }
                                let v94 = C::def_inst(ctx, v64.1);
                                if let Some(v95) = v94 {
                                    let v96 = &C::inst_data_value(ctx, v95);
                                    if let &InstructionData::Unary {
                                        opcode: ref v97,
                                        arg: v98,
                                    } = v96 {
                                        if let &Opcode::Bnot = v97 {
                                            let v176 = C::put_in_regs(ctx, v64.0);
                                            let v178 = C::value_regs_get(ctx, v176, 0x0_usize);
                                            let v179 = C::xreg_new(ctx, v178);
                                            let v797 = C::put_in_regs(ctx, v98);
                                            let v798 = C::value_regs_get(ctx, v797, 0x0_usize);
                                            let v799 = C::xreg_new(ctx, v798);
                                            let v800 = constructor_rv_andn(ctx, v179, v799);
                                            let v758 = C::put_in_regs(ctx, v64.0);
                                            let v759 = C::value_regs_get(ctx, v758, 0x1_usize);
                                            let v760 = C::xreg_new(ctx, v759);
                                            let v801 = C::put_in_regs(ctx, v98);
                                            let v802 = C::value_regs_get(ctx, v801, 0x1_usize);
                                            let v803 = C::xreg_new(ctx, v802);
                                            let v804 = constructor_rv_andn(ctx, v760, v803);
                                            let v805 = C::xreg_to_reg(ctx, v800);
                                            let v806 = C::xreg_to_reg(ctx, v804);
                                            let v807 = C::value_regs(ctx, v805, v806);
                                            let v808 = C::output(ctx, v807);
                                            let v809 = Some(v808);
                                            // Rule at src\isa\riscv64\lower.isle line 723.
                                            return v809;
                                        }
                                    }
                                }
                            }
                            let v749 = C::fits_in_64(ctx, v3);
                            if let Some(v750) = v749 {
                                let v769 = C::ty_int(ctx, v750);
                                if let Some(v770) = v769 {
                                    let v64 = C::unpack_value_array_2(ctx, v63);
                                    let v106 = C::def_inst(ctx, v64.0);
                                    if let Some(v107) = v106 {
                                        let v108 = &C::inst_data_value(ctx, v107);
                                        if let &InstructionData::Unary {
                                            opcode: ref v109,
                                            arg: v110,
                                        } = v108 {
                                            if let &Opcode::Bnot = v109 {
                                                let v774 = constructor_put_in_xreg(ctx, v64.1);
                                                let v238 = constructor_put_in_xreg(ctx, v110);
                                                let v794 = constructor_rv_andn(ctx, v774, v238);
                                                let v795 = constructor_output_xreg(ctx, v794);
                                                let v796 = Some(v795);
                                                // Rule at src\isa\riscv64\lower.isle line 719.
                                                return v796;
                                            }
                                        }
                                    }
                                    let v94 = C::def_inst(ctx, v64.1);
                                    if let Some(v95) = v94 {
                                        let v96 = &C::inst_data_value(ctx, v95);
                                        if let &InstructionData::Unary {
                                            opcode: ref v97,
                                            arg: v98,
                                        } = v96 {
                                            if let &Opcode::Bnot = v97 {
                                                let v67 = constructor_put_in_xreg(ctx, v64.0);
                                                let v209 = constructor_put_in_xreg(ctx, v98);
                                                let v791 = constructor_rv_andn(ctx, v67, v209);
                                                let v792 = constructor_output_xreg(ctx, v791);
                                                let v793 = Some(v792);
                                                // Rule at src\isa\riscv64\lower.isle line 715.
                                                return v793;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let v778 = C::ty_supported_float_size(ctx, v3);
                        if let Some(v779) = v778 {
                            if v779 == F16 {
                                let v786 = C::has_zfhmin(ctx);
                                if v786 == false {
                                    let v64 = C::unpack_value_array_2(ctx, v63);
                                    let v781 = constructor_put_in_freg(ctx, v64.0);
                                    let v782 = constructor_put_in_freg(ctx, v64.1);
                                    let v787 = constructor_lower_float_binary(ctx, &AluOPRRR::And, v781, v782, F32);
                                    let v788 = constructor_output_freg(ctx, v787);
                                    let v789 = Some(v788);
                                    // Rule at src\isa\riscv64\lower.isle line 707.
                                    return v789;
                                }
                            }
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v781 = constructor_put_in_freg(ctx, v64.0);
                            let v782 = constructor_put_in_freg(ctx, v64.1);
                            let v783 = constructor_lower_float_binary(ctx, &AluOPRRR::And, v781, v782, v779);
                            let v784 = constructor_output_freg(ctx, v783);
                            let v785 = Some(v784);
                            // Rule at src\isa\riscv64\lower.isle line 702.
                            return v785;
                        }
                        let v749 = C::fits_in_64(ctx, v3);
                        if let Some(v750) = v749 {
                            let v769 = C::ty_int(ctx, v750);
                            if let Some(v770) = v769 {
                                let v64 = C::unpack_value_array_2(ctx, v63);
                                let v86 = C::i64_from_iconst(ctx, v64.0);
                                if let Some(v87) = v86 {
                                    let v88 = C::imm12_from_i64(ctx, v87);
                                    if let Some(v89) = v88 {
                                        let v774 = constructor_put_in_xreg(ctx, v64.1);
                                        let v775 = constructor_rv_andi(ctx, v774, v89);
                                        let v776 = constructor_output_xreg(ctx, v775);
                                        let v777 = Some(v776);
                                        // Rule at src\isa\riscv64\lower.isle line 699.
                                        return v777;
                                    }
                                }
                                let v77 = C::i64_from_iconst(ctx, v64.1);
                                if let Some(v78) = v77 {
                                    let v79 = C::imm12_from_i64(ctx, v78);
                                    if let Some(v80) = v79 {
                                        let v67 = constructor_put_in_xreg(ctx, v64.0);
                                        let v771 = constructor_rv_andi(ctx, v67, v80);
                                        let v772 = constructor_output_xreg(ctx, v771);
                                        let v773 = Some(v772);
                                        // Rule at src\isa\riscv64\lower.isle line 696.
                                        return v773;
                                    }
                                }
                            }
                        }
                        let v754 = C::ty_reg_pair(ctx, v3);
                        if let Some(v755) = v754 {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v176 = C::put_in_regs(ctx, v64.0);
                            let v178 = C::value_regs_get(ctx, v176, 0x0_usize);
                            let v179 = C::xreg_new(ctx, v178);
                            let v180 = C::put_in_regs(ctx, v64.1);
                            let v181 = C::value_regs_get(ctx, v180, 0x0_usize);
                            let v182 = C::xreg_new(ctx, v181);
                            let v756 = constructor_rv_and(ctx, v179, v182);
                            let v758 = C::put_in_regs(ctx, v64.0);
                            let v759 = C::value_regs_get(ctx, v758, 0x1_usize);
                            let v760 = C::xreg_new(ctx, v759);
                            let v761 = C::put_in_regs(ctx, v64.1);
                            let v762 = C::value_regs_get(ctx, v761, 0x1_usize);
                            let v763 = C::xreg_new(ctx, v762);
                            let v764 = constructor_rv_and(ctx, v760, v763);
                            let v757 = C::xreg_to_reg(ctx, v756);
                            let v765 = C::xreg_to_reg(ctx, v764);
                            let v766 = C::value_regs(ctx, v757, v765);
                            let v767 = C::output(ctx, v766);
                            let v768 = Some(v767);
                            // Rule at src\isa\riscv64\lower.isle line 690.
                            return v768;
                        }
                        if let Some(v750) = v749 {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v67 = constructor_put_in_xreg(ctx, v64.0);
                            let v68 = constructor_put_in_xreg(ctx, v64.1);
                            let v751 = constructor_rv_and(ctx, v67, v68);
                            let v752 = constructor_output_xreg(ctx, v751);
                            let v753 = Some(v752);
                            // Rule at src\isa\riscv64\lower.isle line 687.
                            return v753;
                        }
                    }
                }
                &Opcode::Bor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v847 = C::has_zbs(ctx);
                        if v847 == true {
                            let v3 = C::value_type(ctx, v2);
                            let v749 = C::fits_in_64(ctx, v3);
                            if let Some(v750) = v749 {
                                let v64 = C::unpack_value_array_2(ctx, v63);
                                let v106 = C::def_inst(ctx, v64.0);
                                if let Some(v107) = v106 {
                                    let v108 = &C::inst_data_value(ctx, v107);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v876,
                                        imm: v877,
                                    } = v108 {
                                        if let &Opcode::Iconst = v876 {
                                            let v878 = C::u64_from_imm64(ctx, v877);
                                            let v994 = C::bseti_imm(ctx, v878);
                                            if let Some(v995) = v994 {
                                                let v774 = constructor_put_in_xreg(ctx, v64.1);
                                                let v996 = constructor_rv_bseti(ctx, v774, v995);
                                                let v997 = constructor_output_xreg(ctx, v996);
                                                let v998 = Some(v997);
                                                // Rule at src\isa\riscv64\lower.isle line 909.
                                                return v998;
                                            }
                                        }
                                    }
                                }
                                let v94 = C::def_inst(ctx, v64.1);
                                if let Some(v95) = v94 {
                                    let v96 = &C::inst_data_value(ctx, v95);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v665,
                                        imm: v666,
                                    } = v96 {
                                        if let &Opcode::Iconst = v665 {
                                            let v870 = C::u64_from_imm64(ctx, v666);
                                            let v989 = C::bseti_imm(ctx, v870);
                                            if let Some(v990) = v989 {
                                                let v67 = constructor_put_in_xreg(ctx, v64.0);
                                                let v991 = constructor_rv_bseti(ctx, v67, v990);
                                                let v992 = constructor_output_xreg(ctx, v991);
                                                let v993 = Some(v992);
                                                // Rule at src\isa\riscv64\lower.isle line 905.
                                                return v993;
                                            }
                                        }
                                    }
                                }
                            }
                            match v3 {
                                I32 => {
                                    let v64 = C::unpack_value_array_2(ctx, v63);
                                    let v106 = C::def_inst(ctx, v64.0);
                                    if let Some(v107) = v106 {
                                        let v108 = &C::inst_data_value(ctx, v107);
                                        if let &InstructionData::Binary {
                                            opcode: ref v134,
                                            args: ref v135,
                                        } = v108 {
                                            if let &Opcode::Ishl = v134 {
                                                let v136 = C::unpack_value_array_2(ctx, v135);
                                                let v978 = C::i64_from_iconst(ctx, v136.0);
                                                if let Some(v979) = v978 {
                                                    if v979 == 1_i64 {
                                                        let v774 = constructor_put_in_xreg(ctx, v64.1);
                                                        let v885 = constructor_put_in_xreg(ctx, v136.1);
                                                        let v887 = C::imm12_const(ctx, 31_i32);
                                                        let v888 = constructor_rv_andi(ctx, v885, v887);
                                                        let v980 = constructor_rv_bset(ctx, v774, v888);
                                                        let v981 = constructor_output_xreg(ctx, v980);
                                                        let v982 = Some(v981);
                                                        // Rule at src\isa\riscv64\lower.isle line 894.
                                                        return v982;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    let v94 = C::def_inst(ctx, v64.1);
                                    if let Some(v95) = v94 {
                                        let v96 = &C::inst_data_value(ctx, v95);
                                        if let &InstructionData::Binary {
                                            opcode: ref v116,
                                            args: ref v117,
                                        } = v96 {
                                            if let &Opcode::Ishl = v116 {
                                                let v118 = C::unpack_value_array_2(ctx, v117);
                                                let v973 = C::i64_from_iconst(ctx, v118.0);
                                                if let Some(v974) = v973 {
                                                    if v974 == 1_i64 {
                                                        let v67 = constructor_put_in_xreg(ctx, v64.0);
                                                        let v893 = constructor_put_in_xreg(ctx, v118.1);
                                                        let v887 = C::imm12_const(ctx, 31_i32);
                                                        let v894 = constructor_rv_andi(ctx, v893, v887);
                                                        let v975 = constructor_rv_bset(ctx, v67, v894);
                                                        let v976 = constructor_output_xreg(ctx, v975);
                                                        let v977 = Some(v976);
                                                        // Rule at src\isa\riscv64\lower.isle line 891.
                                                        return v977;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                I64 => {
                                    let v64 = C::unpack_value_array_2(ctx, v63);
                                    let v106 = C::def_inst(ctx, v64.0);
                                    if let Some(v107) = v106 {
                                        let v108 = &C::inst_data_value(ctx, v107);
                                        if let &InstructionData::Binary {
                                            opcode: ref v134,
                                            args: ref v135,
                                        } = v108 {
                                            if let &Opcode::Ishl = v134 {
                                                let v136 = C::unpack_value_array_2(ctx, v135);
                                                let v978 = C::i64_from_iconst(ctx, v136.0);
                                                if let Some(v979) = v978 {
                                                    if v979 == 1_i64 {
                                                        let v774 = constructor_put_in_xreg(ctx, v64.1);
                                                        let v885 = constructor_put_in_xreg(ctx, v136.1);
                                                        let v986 = constructor_rv_bset(ctx, v774, v885);
                                                        let v987 = constructor_output_xreg(ctx, v986);
                                                        let v988 = Some(v987);
                                                        // Rule at src\isa\riscv64\lower.isle line 901.
                                                        return v988;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    let v94 = C::def_inst(ctx, v64.1);
                                    if let Some(v95) = v94 {
                                        let v96 = &C::inst_data_value(ctx, v95);
                                        if let &InstructionData::Binary {
                                            opcode: ref v116,
                                            args: ref v117,
                                        } = v96 {
                                            if let &Opcode::Ishl = v116 {
                                                let v118 = C::unpack_value_array_2(ctx, v117);
                                                let v973 = C::i64_from_iconst(ctx, v118.0);
                                                if let Some(v974) = v973 {
                                                    if v974 == 1_i64 {
                                                        let v67 = constructor_put_in_xreg(ctx, v64.0);
                                                        let v893 = constructor_put_in_xreg(ctx, v118.1);
                                                        let v983 = constructor_rv_bset(ctx, v67, v893);
                                                        let v984 = constructor_output_xreg(ctx, v983);
                                                        let v985 = Some(v984);
                                                        // Rule at src\isa\riscv64\lower.isle line 898.
                                                        return v985;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v256 = constructor_replicated_imm5(ctx, v64.0);
                            if let Some(v257) = v256 {
                                let v237 = constructor_put_in_vreg(ctx, v64.1);
                                let v204 = &constructor_unmasked(ctx);
                                let v205 = C::vstate_from_type(ctx, v12);
                                let v970 = constructor_rv_vor_vi(ctx, v237, v257, v204, v205);
                                let v971 = constructor_output_vreg(ctx, v970);
                                let v972 = Some(v971);
                                // Rule at src\isa\riscv64\lower.isle line 885.
                                return v972;
                            }
                            let v232 = constructor_replicated_imm5(ctx, v64.1);
                            if let Some(v233) = v232 {
                                let v202 = constructor_put_in_vreg(ctx, v64.0);
                                let v204 = &constructor_unmasked(ctx);
                                let v205 = C::vstate_from_type(ctx, v12);
                                let v967 = constructor_rv_vor_vi(ctx, v202, v233, v204, v205);
                                let v968 = constructor_output_vreg(ctx, v967);
                                let v969 = Some(v968);
                                // Rule at src\isa\riscv64\lower.isle line 881.
                                return v969;
                            }
                            let v831 = C::ty_vector_not_float(ctx, v12);
                            if let Some(v832) = v831 {
                                let v106 = C::def_inst(ctx, v64.0);
                                if let Some(v107) = v106 {
                                    let v108 = &C::inst_data_value(ctx, v107);
                                    if let &InstructionData::Unary {
                                        opcode: ref v109,
                                        arg: v110,
                                    } = v108 {
                                        if let &Opcode::Splat = v109 {
                                            let v237 = constructor_put_in_vreg(ctx, v64.1);
                                            let v238 = constructor_put_in_xreg(ctx, v110);
                                            let v204 = &constructor_unmasked(ctx);
                                            let v205 = C::vstate_from_type(ctx, v12);
                                            let v964 = constructor_rv_vor_vx(ctx, v237, v238, v204, v205);
                                            let v965 = constructor_output_vreg(ctx, v964);
                                            let v966 = Some(v965);
                                            // Rule at src\isa\riscv64\lower.isle line 877.
                                            return v966;
                                        }
                                    }
                                }
                                let v94 = C::def_inst(ctx, v64.1);
                                if let Some(v95) = v94 {
                                    let v96 = &C::inst_data_value(ctx, v95);
                                    if let &InstructionData::Unary {
                                        opcode: ref v97,
                                        arg: v98,
                                    } = v96 {
                                        if let &Opcode::Splat = v97 {
                                            let v202 = constructor_put_in_vreg(ctx, v64.0);
                                            let v209 = constructor_put_in_xreg(ctx, v98);
                                            let v204 = &constructor_unmasked(ctx);
                                            let v205 = C::vstate_from_type(ctx, v12);
                                            let v961 = constructor_rv_vor_vx(ctx, v202, v209, v204, v205);
                                            let v962 = constructor_output_vreg(ctx, v961);
                                            let v963 = Some(v962);
                                            // Rule at src\isa\riscv64\lower.isle line 873.
                                            return v963;
                                        }
                                    }
                                }
                            }
                            let v202 = constructor_put_in_vreg(ctx, v64.0);
                            let v203 = constructor_put_in_vreg(ctx, v64.1);
                            let v204 = &constructor_unmasked(ctx);
                            let v205 = C::vstate_from_type(ctx, v12);
                            let v958 = constructor_rv_vor_vv(ctx, v202, v203, v204, v205);
                            let v959 = constructor_output_vreg(ctx, v958);
                            let v960 = Some(v959);
                            // Rule at src\isa\riscv64\lower.isle line 870.
                            return v960;
                        }
                        let v790 = C::has_zbb(ctx);
                        if v790 == true {
                            let v754 = C::ty_reg_pair(ctx, v3);
                            if let Some(v755) = v754 {
                                let v64 = C::unpack_value_array_2(ctx, v63);
                                let v106 = C::def_inst(ctx, v64.0);
                                if let Some(v107) = v106 {
                                    let v108 = &C::inst_data_value(ctx, v107);
                                    if let &InstructionData::Unary {
                                        opcode: ref v109,
                                        arg: v110,
                                    } = v108 {
                                        if let &Opcode::Bnot = v109 {
                                            let v810 = C::put_in_regs(ctx, v64.1);
                                            let v811 = C::value_regs_get(ctx, v810, 0x0_usize);
                                            let v812 = C::xreg_new(ctx, v811);
                                            let v813 = C::put_in_regs(ctx, v110);
                                            let v814 = C::value_regs_get(ctx, v813, 0x0_usize);
                                            let v815 = C::xreg_new(ctx, v814);
                                            let v951 = constructor_rv_orn(ctx, v812, v815);
                                            let v184 = C::put_in_regs(ctx, v64.1);
                                            let v817 = C::value_regs_get(ctx, v184, 0x1_usize);
                                            let v818 = C::xreg_new(ctx, v817);
                                            let v819 = C::put_in_regs(ctx, v110);
                                            let v820 = C::value_regs_get(ctx, v819, 0x1_usize);
                                            let v821 = C::xreg_new(ctx, v820);
                                            let v952 = constructor_rv_orn(ctx, v818, v821);
                                            let v953 = C::xreg_to_reg(ctx, v951);
                                            let v954 = C::xreg_to_reg(ctx, v952);
                                            let v955 = C::value_regs(ctx, v953, v954);
                                            let v956 = C::output(ctx, v955);
                                            let v957 = Some(v956);
                                            // Rule at src\isa\riscv64\lower.isle line 864.
                                            return v957;
                                        }
                                    }
                                }
                                let v94 = C::def_inst(ctx, v64.1);
                                if let Some(v95) = v94 {
                                    let v96 = &C::inst_data_value(ctx, v95);
                                    if let &InstructionData::Unary {
                                        opcode: ref v97,
                                        arg: v98,
                                    } = v96 {
                                        if let &Opcode::Bnot = v97 {
                                            let v176 = C::put_in_regs(ctx, v64.0);
                                            let v178 = C::value_regs_get(ctx, v176, 0x0_usize);
                                            let v179 = C::xreg_new(ctx, v178);
                                            let v797 = C::put_in_regs(ctx, v98);
                                            let v798 = C::value_regs_get(ctx, v797, 0x0_usize);
                                            let v799 = C::xreg_new(ctx, v798);
                                            let v944 = constructor_rv_orn(ctx, v179, v799);
                                            let v758 = C::put_in_regs(ctx, v64.0);
                                            let v759 = C::value_regs_get(ctx, v758, 0x1_usize);
                                            let v760 = C::xreg_new(ctx, v759);
                                            let v801 = C::put_in_regs(ctx, v98);
                                            let v802 = C::value_regs_get(ctx, v801, 0x1_usize);
                                            let v803 = C::xreg_new(ctx, v802);
                                            let v945 = constructor_rv_orn(ctx, v760, v803);
                                            let v946 = C::xreg_to_reg(ctx, v944);
                                            let v947 = C::xreg_to_reg(ctx, v945);
                                            let v948 = C::value_regs(ctx, v946, v947);
                                            let v949 = C::output(ctx, v948);
                                            let v950 = Some(v949);
                                            // Rule at src\isa\riscv64\lower.isle line 858.
                                            return v950;
                                        }
                                    }
                                }
                            }
                            let v749 = C::fits_in_64(ctx, v3);
                            if let Some(v750) = v749 {
                                let v769 = C::ty_int(ctx, v750);
                                if let Some(v770) = v769 {
                                    let v64 = C::unpack_value_array_2(ctx, v63);
                                    let v106 = C::def_inst(ctx, v64.0);
                                    if let Some(v107) = v106 {
                                        let v108 = &C::inst_data_value(ctx, v107);
                                        if let &InstructionData::Unary {
                                            opcode: ref v109,
                                            arg: v110,
                                        } = v108 {
                                            if let &Opcode::Bnot = v109 {
                                                let v774 = constructor_put_in_xreg(ctx, v64.1);
                                                let v238 = constructor_put_in_xreg(ctx, v110);
                                                let v941 = constructor_rv_orn(ctx, v774, v238);
                                                let v942 = constructor_output_xreg(ctx, v941);
                                                let v943 = Some(v942);
                                                // Rule at src\isa\riscv64\lower.isle line 854.
                                                return v943;
                                            }
                                        }
                                    }
                                    let v94 = C::def_inst(ctx, v64.1);
                                    if let Some(v95) = v94 {
                                        let v96 = &C::inst_data_value(ctx, v95);
                                        if let &InstructionData::Unary {
                                            opcode: ref v97,
                                            arg: v98,
                                        } = v96 {
                                            if let &Opcode::Bnot = v97 {
                                                let v67 = constructor_put_in_xreg(ctx, v64.0);
                                                let v209 = constructor_put_in_xreg(ctx, v98);
                                                let v938 = constructor_rv_orn(ctx, v67, v209);
                                                let v939 = constructor_output_xreg(ctx, v938);
                                                let v940 = Some(v939);
                                                // Rule at src\isa\riscv64\lower.isle line 850.
                                                return v940;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let v778 = C::ty_supported_float_size(ctx, v3);
                        if let Some(v779) = v778 {
                            if v779 == F16 {
                                let v786 = C::has_zfhmin(ctx);
                                if v786 == false {
                                    let v64 = C::unpack_value_array_2(ctx, v63);
                                    let v781 = constructor_put_in_freg(ctx, v64.0);
                                    let v782 = constructor_put_in_freg(ctx, v64.1);
                                    let v935 = constructor_lower_float_binary(ctx, &AluOPRRR::Or, v781, v782, F32);
                                    let v936 = constructor_output_freg(ctx, v935);
                                    let v937 = Some(v936);
                                    // Rule at src\isa\riscv64\lower.isle line 842.
                                    return v937;
                                }
                            }
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v781 = constructor_put_in_freg(ctx, v64.0);
                            let v782 = constructor_put_in_freg(ctx, v64.1);
                            let v932 = constructor_lower_float_binary(ctx, &AluOPRRR::Or, v781, v782, v779);
                            let v933 = constructor_output_freg(ctx, v932);
                            let v934 = Some(v933);
                            // Rule at src\isa\riscv64\lower.isle line 837.
                            return v934;
                        }
                        let v749 = C::fits_in_64(ctx, v3);
                        if let Some(v750) = v749 {
                            let v769 = C::ty_int(ctx, v750);
                            if let Some(v770) = v769 {
                                let v64 = C::unpack_value_array_2(ctx, v63);
                                let v86 = C::i64_from_iconst(ctx, v64.0);
                                if let Some(v87) = v86 {
                                    let v88 = C::imm12_from_i64(ctx, v87);
                                    if let Some(v89) = v88 {
                                        let v774 = constructor_put_in_xreg(ctx, v64.1);
                                        let v928 = constructor_rv_ori(ctx, v774, v89);
                                        let v929 = constructor_output_xreg(ctx, v928);
                                        let v930 = Some(v929);
                                        // Rule at src\isa\riscv64\lower.isle line 834.
                                        return v930;
                                    }
                                }
                                let v77 = C::i64_from_iconst(ctx, v64.1);
                                if let Some(v78) = v77 {
                                    let v79 = C::imm12_from_i64(ctx, v78);
                                    if let Some(v80) = v79 {
                                        let v67 = constructor_put_in_xreg(ctx, v64.0);
                                        let v925 = constructor_rv_ori(ctx, v67, v80);
                                        let v926 = constructor_output_xreg(ctx, v925);
                                        let v927 = Some(v926);
                                        // Rule at src\isa\riscv64\lower.isle line 831.
                                        return v927;
                                    }
                                }
                            }
                        }
                        if v3 == F128 {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v176 = C::put_in_regs(ctx, v64.0);
                            let v484 = C::put_in_regs(ctx, v64.1);
                            let v922 = constructor_gen_or(ctx, I128, v176, v484);
                            let v923 = C::output(ctx, v922);
                            let v924 = Some(v923);
                            // Rule at src\isa\riscv64\lower.isle line 827.
                            return v924;
                        }
                        let v564 = C::ty_int(ctx, v3);
                        if let Some(v565) = v564 {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v176 = C::put_in_regs(ctx, v64.0);
                            let v484 = C::put_in_regs(ctx, v64.1);
                            let v918 = constructor_gen_or(ctx, v565, v176, v484);
                            let v919 = C::output(ctx, v918);
                            let v920 = Some(v919);
                            // Rule at src\isa\riscv64\lower.isle line 824.
                            return v920;
                        }
                    }
                }
                &Opcode::Bxor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v847 = C::has_zbs(ctx);
                        if v847 == true {
                            let v3 = C::value_type(ctx, v2);
                            let v749 = C::fits_in_64(ctx, v3);
                            if let Some(v750) = v749 {
                                let v64 = C::unpack_value_array_2(ctx, v63);
                                let v106 = C::def_inst(ctx, v64.0);
                                if let Some(v107) = v106 {
                                    let v108 = &C::inst_data_value(ctx, v107);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v876,
                                        imm: v877,
                                    } = v108 {
                                        if let &Opcode::Iconst = v876 {
                                            let v878 = C::u64_from_imm64(ctx, v877);
                                            let v1047 = C::binvi_imm(ctx, v878);
                                            if let Some(v1048) = v1047 {
                                                let v774 = constructor_put_in_xreg(ctx, v64.1);
                                                let v1049 = constructor_rv_binvi(ctx, v774, v1048);
                                                let v1050 = constructor_output_xreg(ctx, v1049);
                                                let v1051 = Some(v1050);
                                                // Rule at src\isa\riscv64\lower.isle line 973.
                                                return v1051;
                                            }
                                        }
                                    }
                                }
                                let v94 = C::def_inst(ctx, v64.1);
                                if let Some(v95) = v94 {
                                    let v96 = &C::inst_data_value(ctx, v95);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v665,
                                        imm: v666,
                                    } = v96 {
                                        if let &Opcode::Iconst = v665 {
                                            let v870 = C::u64_from_imm64(ctx, v666);
                                            let v1042 = C::binvi_imm(ctx, v870);
                                            if let Some(v1043) = v1042 {
                                                let v67 = constructor_put_in_xreg(ctx, v64.0);
                                                let v1044 = constructor_rv_binvi(ctx, v67, v1043);
                                                let v1045 = constructor_output_xreg(ctx, v1044);
                                                let v1046 = Some(v1045);
                                                // Rule at src\isa\riscv64\lower.isle line 969.
                                                return v1046;
                                            }
                                        }
                                    }
                                }
                            }
                            match v3 {
                                I32 => {
                                    let v64 = C::unpack_value_array_2(ctx, v63);
                                    let v106 = C::def_inst(ctx, v64.0);
                                    if let Some(v107) = v106 {
                                        let v108 = &C::inst_data_value(ctx, v107);
                                        if let &InstructionData::Binary {
                                            opcode: ref v134,
                                            args: ref v135,
                                        } = v108 {
                                            if let &Opcode::Ishl = v134 {
                                                let v136 = C::unpack_value_array_2(ctx, v135);
                                                let v978 = C::i64_from_iconst(ctx, v136.0);
                                                if let Some(v979) = v978 {
                                                    if v979 == 1_i64 {
                                                        let v774 = constructor_put_in_xreg(ctx, v64.1);
                                                        let v885 = constructor_put_in_xreg(ctx, v136.1);
                                                        let v887 = C::imm12_const(ctx, 31_i32);
                                                        let v888 = constructor_rv_andi(ctx, v885, v887);
                                                        let v1033 = constructor_rv_binv(ctx, v774, v888);
                                                        let v1034 = constructor_output_xreg(ctx, v1033);
                                                        let v1035 = Some(v1034);
                                                        // Rule at src\isa\riscv64\lower.isle line 958.
                                                        return v1035;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    let v94 = C::def_inst(ctx, v64.1);
                                    if let Some(v95) = v94 {
                                        let v96 = &C::inst_data_value(ctx, v95);
                                        if let &InstructionData::Binary {
                                            opcode: ref v116,
                                            args: ref v117,
                                        } = v96 {
                                            if let &Opcode::Ishl = v116 {
                                                let v118 = C::unpack_value_array_2(ctx, v117);
                                                let v973 = C::i64_from_iconst(ctx, v118.0);
                                                if let Some(v974) = v973 {
                                                    if v974 == 1_i64 {
                                                        let v67 = constructor_put_in_xreg(ctx, v64.0);
                                                        let v893 = constructor_put_in_xreg(ctx, v118.1);
                                                        let v887 = C::imm12_const(ctx, 31_i32);
                                                        let v894 = constructor_rv_andi(ctx, v893, v887);
                                                        let v1030 = constructor_rv_binv(ctx, v67, v894);
                                                        let v1031 = constructor_output_xreg(ctx, v1030);
                                                        let v1032 = Some(v1031);
                                                        // Rule at src\isa\riscv64\lower.isle line 955.
                                                        return v1032;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                I64 => {
                                    let v64 = C::unpack_value_array_2(ctx, v63);
                                    let v106 = C::def_inst(ctx, v64.0);
                                    if let Some(v107) = v106 {
                                        let v108 = &C::inst_data_value(ctx, v107);
                                        if let &InstructionData::Binary {
                                            opcode: ref v134,
                                            args: ref v135,
                                        } = v108 {
                                            if let &Opcode::Ishl = v134 {
                                                let v136 = C::unpack_value_array_2(ctx, v135);
                                                let v978 = C::i64_from_iconst(ctx, v136.0);
                                                if let Some(v979) = v978 {
                                                    if v979 == 1_i64 {
                                                        let v774 = constructor_put_in_xreg(ctx, v64.1);
                                                        let v885 = constructor_put_in_xreg(ctx, v136.1);
                                                        let v1039 = constructor_rv_binv(ctx, v774, v885);
                                                        let v1040 = constructor_output_xreg(ctx, v1039);
                                                        let v1041 = Some(v1040);
                                                        // Rule at src\isa\riscv64\lower.isle line 965.
                                                        return v1041;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    let v94 = C::def_inst(ctx, v64.1);
                                    if let Some(v95) = v94 {
                                        let v96 = &C::inst_data_value(ctx, v95);
                                        if let &InstructionData::Binary {
                                            opcode: ref v116,
                                            args: ref v117,
                                        } = v96 {
                                            if let &Opcode::Ishl = v116 {
                                                let v118 = C::unpack_value_array_2(ctx, v117);
                                                let v973 = C::i64_from_iconst(ctx, v118.0);
                                                if let Some(v974) = v973 {
                                                    if v974 == 1_i64 {
                                                        let v67 = constructor_put_in_xreg(ctx, v64.0);
                                                        let v893 = constructor_put_in_xreg(ctx, v118.1);
                                                        let v1036 = constructor_rv_binv(ctx, v67, v893);
                                                        let v1037 = constructor_output_xreg(ctx, v1036);
                                                        let v1038 = Some(v1037);
                                                        // Rule at src\isa\riscv64\lower.isle line 962.
                                                        return v1038;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v256 = constructor_replicated_imm5(ctx, v64.0);
                            if let Some(v257) = v256 {
                                let v237 = constructor_put_in_vreg(ctx, v64.1);
                                let v204 = &constructor_unmasked(ctx);
                                let v205 = C::vstate_from_type(ctx, v12);
                                let v1027 = constructor_rv_vxor_vi(ctx, v237, v257, v204, v205);
                                let v1028 = constructor_output_vreg(ctx, v1027);
                                let v1029 = Some(v1028);
                                // Rule at src\isa\riscv64\lower.isle line 949.
                                return v1029;
                            }
                            let v232 = constructor_replicated_imm5(ctx, v64.1);
                            if let Some(v233) = v232 {
                                let v202 = constructor_put_in_vreg(ctx, v64.0);
                                let v204 = &constructor_unmasked(ctx);
                                let v205 = C::vstate_from_type(ctx, v12);
                                let v1024 = constructor_rv_vxor_vi(ctx, v202, v233, v204, v205);
                                let v1025 = constructor_output_vreg(ctx, v1024);
                                let v1026 = Some(v1025);
                                // Rule at src\isa\riscv64\lower.isle line 945.
                                return v1026;
                            }
                            let v831 = C::ty_vector_not_float(ctx, v12);
                            if let Some(v832) = v831 {
                                let v106 = C::def_inst(ctx, v64.0);
                                if let Some(v107) = v106 {
                                    let v108 = &C::inst_data_value(ctx, v107);
                                    if let &InstructionData::Unary {
                                        opcode: ref v109,
                                        arg: v110,
                                    } = v108 {
                                        if let &Opcode::Splat = v109 {
                                            let v237 = constructor_put_in_vreg(ctx, v64.1);
                                            let v238 = constructor_put_in_xreg(ctx, v110);
                                            let v204 = &constructor_unmasked(ctx);
                                            let v205 = C::vstate_from_type(ctx, v12);
                                            let v1021 = constructor_rv_vxor_vx(ctx, v237, v238, v204, v205);
                                            let v1022 = constructor_output_vreg(ctx, v1021);
                                            let v1023 = Some(v1022);
                                            // Rule at src\isa\riscv64\lower.isle line 941.
                                            return v1023;
                                        }
                                    }
                                }
                                let v94 = C::def_inst(ctx, v64.1);
                                if let Some(v95) = v94 {
                                    let v96 = &C::inst_data_value(ctx, v95);
                                    if let &InstructionData::Unary {
                                        opcode: ref v97,
                                        arg: v98,
                                    } = v96 {
                                        if let &Opcode::Splat = v97 {
                                            let v202 = constructor_put_in_vreg(ctx, v64.0);
                                            let v209 = constructor_put_in_xreg(ctx, v98);
                                            let v204 = &constructor_unmasked(ctx);
                                            let v205 = C::vstate_from_type(ctx, v12);
                                            let v1018 = constructor_rv_vxor_vx(ctx, v202, v209, v204, v205);
                                            let v1019 = constructor_output_vreg(ctx, v1018);
                                            let v1020 = Some(v1019);
                                            // Rule at src\isa\riscv64\lower.isle line 937.
                                            return v1020;
                                        }
                                    }
                                }
                            }
                            let v202 = constructor_put_in_vreg(ctx, v64.0);
                            let v203 = constructor_put_in_vreg(ctx, v64.1);
                            let v204 = &constructor_unmasked(ctx);
                            let v205 = C::vstate_from_type(ctx, v12);
                            let v1015 = constructor_rv_vxor_vv(ctx, v202, v203, v204, v205);
                            let v1016 = constructor_output_vreg(ctx, v1015);
                            let v1017 = Some(v1016);
                            // Rule at src\isa\riscv64\lower.isle line 934.
                            return v1017;
                        }
                        let v778 = C::ty_supported_float_size(ctx, v3);
                        if let Some(v779) = v778 {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v781 = constructor_put_in_freg(ctx, v64.0);
                            let v782 = constructor_put_in_freg(ctx, v64.1);
                            let v1012 = constructor_lower_float_binary(ctx, &AluOPRRR::Xor, v781, v782, v779);
                            let v1013 = constructor_output_freg(ctx, v1012);
                            let v1014 = Some(v1013);
                            // Rule at src\isa\riscv64\lower.isle line 931.
                            return v1014;
                        }
                        let v754 = C::ty_reg_pair(ctx, v3);
                        if let Some(v755) = v754 {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v176 = C::put_in_regs(ctx, v64.0);
                            let v484 = C::put_in_regs(ctx, v64.1);
                            let v1009 = constructor_lower_b128_binary(ctx, &AluOPRRR::Xor, v176, v484);
                            let v1010 = C::output(ctx, v1009);
                            let v1011 = Some(v1010);
                            // Rule at src\isa\riscv64\lower.isle line 928.
                            return v1011;
                        }
                        let v749 = C::fits_in_64(ctx, v3);
                        if let Some(v750) = v749 {
                            let v769 = C::ty_int(ctx, v750);
                            if let Some(v770) = v769 {
                                let v64 = C::unpack_value_array_2(ctx, v63);
                                let v86 = C::i64_from_iconst(ctx, v64.0);
                                if let Some(v87) = v86 {
                                    let v88 = C::imm12_from_i64(ctx, v87);
                                    if let Some(v89) = v88 {
                                        let v774 = constructor_put_in_xreg(ctx, v64.1);
                                        let v1005 = constructor_rv_xori(ctx, v774, v89);
                                        let v1006 = constructor_output_xreg(ctx, v1005);
                                        let v1007 = Some(v1006);
                                        // Rule at src\isa\riscv64\lower.isle line 925.
                                        return v1007;
                                    }
                                }
                                let v77 = C::i64_from_iconst(ctx, v64.1);
                                if let Some(v78) = v77 {
                                    let v79 = C::imm12_from_i64(ctx, v78);
                                    if let Some(v80) = v79 {
                                        let v67 = constructor_put_in_xreg(ctx, v64.0);
                                        let v1002 = constructor_rv_xori(ctx, v67, v80);
                                        let v1003 = constructor_output_xreg(ctx, v1002);
                                        let v1004 = Some(v1003);
                                        // Rule at src\isa\riscv64\lower.isle line 922.
                                        return v1004;
                                    }
                                }
                                let v67 = constructor_put_in_xreg(ctx, v64.0);
                                let v68 = constructor_put_in_xreg(ctx, v64.1);
                                let v999 = constructor_rv_xor(ctx, v67, v68);
                                let v1000 = constructor_output_xreg(ctx, v999);
                                let v1001 = Some(v1000);
                                // Rule at src\isa\riscv64\lower.isle line 918.
                                return v1001;
                            }
                        }
                    }
                }
                &Opcode::Rotl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32 => {
                                let v790 = C::has_zbb(ctx);
                                if v790 == true {
                                    let v64 = C::unpack_value_array_2(ctx, v63);
                                    let v94 = C::def_inst(ctx, v64.1);
                                    if let Some(v95) = v94 {
                                        let v96 = &C::inst_data_value(ctx, v95);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v665,
                                            imm: v666,
                                        } = v96 {
                                            if let &Opcode::Iconst = v665 {
                                                let v870 = C::u64_from_imm64(ctx, v666);
                                                let v1535 = C::u64_and(ctx, v870, 0x1f_u64);
                                                let v1536 = C::u64_sub(ctx, 0x20_u64, v1535);
                                                let v1537 = C::imm12_from_u64(ctx, v1536);
                                                if let Some(v1538) = v1537 {
                                                    let v67 = constructor_put_in_xreg(ctx, v64.0);
                                                    let v1539 = constructor_rv_roriw(ctx, v67, v1538);
                                                    let v1540 = constructor_output_xreg(ctx, v1539);
                                                    let v1541 = Some(v1540);
                                                    // Rule at src\isa\riscv64\lower.isle line 1452.
                                                    return v1541;
                                                }
                                            }
                                        }
                                    }
                                    let v67 = constructor_put_in_xreg(ctx, v64.0);
                                    let v484 = C::put_in_regs(ctx, v64.1);
                                    let v1321 = C::value_regs_get(ctx, v484, 0x0_usize);
                                    let v1322 = C::xreg_new(ctx, v1321);
                                    let v1531 = constructor_rv_rolw(ctx, v67, v1322);
                                    let v1532 = constructor_output_xreg(ctx, v1531);
                                    let v1533 = Some(v1532);
                                    // Rule at src\isa\riscv64\lower.isle line 1448.
                                    return v1533;
                                }
                            }
                            I64 => {
                                let v790 = C::has_zbb(ctx);
                                if v790 == true {
                                    let v64 = C::unpack_value_array_2(ctx, v63);
                                    let v94 = C::def_inst(ctx, v64.1);
                                    if let Some(v95) = v94 {
                                        let v96 = &C::inst_data_value(ctx, v95);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v665,
                                            imm: v666,
                                        } = v96 {
                                            if let &Opcode::Iconst = v665 {
                                                let v870 = C::u64_from_imm64(ctx, v666);
                                                let v1545 = C::u64_and(ctx, v870, 0x3f_u64);
                                                let v1546 = C::u64_sub(ctx, 0x40_u64, v1545);
                                                let v1547 = C::imm12_from_u64(ctx, v1546);
                                                if let Some(v1548) = v1547 {
                                                    let v67 = constructor_put_in_xreg(ctx, v64.0);
                                                    let v1549 = constructor_rv_rori(ctx, v67, v1548);
                                                    let v1550 = constructor_output_xreg(ctx, v1549);
                                                    let v1551 = Some(v1550);
                                                    // Rule at src\isa\riscv64\lower.isle line 1461.
                                                    return v1551;
                                                }
                                            }
                                        }
                                    }
                                    let v67 = constructor_put_in_xreg(ctx, v64.0);
                                    let v484 = C::put_in_regs(ctx, v64.1);
                                    let v1321 = C::value_regs_get(ctx, v484, 0x0_usize);
                                    let v1322 = C::xreg_new(ctx, v1321);
                                    let v1542 = constructor_rv_rol(ctx, v67, v1322);
                                    let v1543 = constructor_output_xreg(ctx, v1542);
                                    let v1544 = Some(v1543);
                                    // Rule at src\isa\riscv64\lower.isle line 1457.
                                    return v1544;
                                }
                            }
                            I128 => {
                                let v64 = C::unpack_value_array_2(ctx, v63);
                                let v810 = C::put_in_regs(ctx, v64.1);
                                let v811 = C::value_regs_get(ctx, v810, 0x0_usize);
                                let v812 = C::xreg_new(ctx, v811);
                                let v1354 = C::gen_shamt(ctx, I128, v812);
                                let v1355 = C::value_regs_get(ctx, v1354, 0x0_usize);
                                let v1356 = C::xreg_new(ctx, v1355);
                                let v1357 = C::value_regs_get(ctx, v1354, 0x1_usize);
                                let v1358 = C::xreg_new(ctx, v1357);
                                let v1359 = C::put_in_regs(ctx, v64.0);
                                let v1360 = C::value_regs_get(ctx, v1359, 0x0_usize);
                                let v1361 = C::xreg_new(ctx, v1360);
                                let v1362 = constructor_rv_sll(ctx, v1361, v1356);
                                let v1363 = C::put_in_regs(ctx, v64.0);
                                let v1552 = C::value_regs_get(ctx, v1363, 0x1_usize);
                                let v1553 = C::xreg_new(ctx, v1552);
                                let v1554 = constructor_rv_srl(ctx, v1553, v1358);
                                let v1367 = constructor_cmp_eqz(ctx, v1356);
                                let v1368 = C::zero_reg(ctx);
                                let v1555 = constructor_gen_select_xreg(ctx, v1367, v1368, v1554);
                                let v1556 = constructor_rv_or(ctx, v1362, v1555);
                                let v1557 = C::put_in_regs(ctx, v64.0);
                                let v1558 = C::value_regs_get(ctx, v1557, 0x1_usize);
                                let v1559 = C::xreg_new(ctx, v1558);
                                let v1560 = constructor_rv_sll(ctx, v1559, v1356);
                                let v1561 = C::put_in_regs(ctx, v64.0);
                                let v1562 = C::value_regs_get(ctx, v1561, 0x0_usize);
                                let v1563 = C::xreg_new(ctx, v1562);
                                let v1564 = constructor_rv_srl(ctx, v1563, v1358);
                                let v1565 = constructor_cmp_eqz(ctx, v1356);
                                let v1566 = C::zero_reg(ctx);
                                let v1567 = constructor_gen_select_xreg(ctx, v1565, v1566, v1564);
                                let v1568 = constructor_rv_or(ctx, v1560, v1567);
                                let v1569 = constructor_imm(ctx, I64, 0x40_u64);
                                let v1570 = C::xreg_new(ctx, v1569);
                                let v1571 = C::put_in_regs(ctx, v64.1);
                                let v1572 = C::value_regs_get(ctx, v1571, 0x0_usize);
                                let v1573 = C::xreg_new(ctx, v1572);
                                let v1382 = C::imm12_const(ctx, 127_i32);
                                let v1574 = constructor_rv_andi(ctx, v1573, v1382);
                                let v1575 = constructor_cmp_geu(ctx, v1574, v1570);
                                let v1576 = C::xreg_to_reg(ctx, v1568);
                                let v1577 = C::xreg_to_reg(ctx, v1556);
                                let v1578 = C::value_regs(ctx, v1576, v1577);
                                let v1579 = C::value_regs(ctx, v1577, v1576);
                                let v1580 = constructor_gen_select_regs(ctx, v1575, v1578, v1579);
                                let v1581 = C::output(ctx, v1580);
                                let v1582 = Some(v1581);
                                // Rule at src\isa\riscv64\lower.isle line 1466.
                                return v1582;
                            }
                            _ => {}
                        }
                        let v749 = C::fits_in_64(ctx, v3);
                        if let Some(v750) = v749 {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v640 = constructor_zext(ctx, v64.0);
                            let v484 = C::put_in_regs(ctx, v64.1);
                            let v1321 = C::value_regs_get(ctx, v484, 0x0_usize);
                            let v1322 = C::xreg_new(ctx, v1321);
                            let v1512 = C::gen_shamt(ctx, v750, v1322);
                            let v1513 = C::value_regs_get(ctx, v1512, 0x0_usize);
                            let v1514 = C::xreg_new(ctx, v1513);
                            let v1515 = C::value_regs_get(ctx, v1512, 0x1_usize);
                            let v1516 = constructor_rv_sll(ctx, v640, v1514);
                            let v1518 = C::xreg_new(ctx, v1515);
                            let v1519 = constructor_rv_srl(ctx, v640, v1518);
                            let v1521 = constructor_cmp_eqz(ctx, v1514);
                            let v1522 = C::zero_reg(ctx);
                            let v1520 = C::xreg_to_reg(ctx, v1519);
                            let v1523 = C::xreg_new(ctx, v1520);
                            let v1524 = constructor_gen_select_xreg(ctx, v1521, v1522, v1523);
                            let v1517 = C::xreg_to_reg(ctx, v1516);
                            let v1526 = C::xreg_new(ctx, v1517);
                            let v1525 = C::xreg_to_reg(ctx, v1524);
                            let v1527 = C::xreg_new(ctx, v1525);
                            let v1528 = constructor_rv_or(ctx, v1526, v1527);
                            let v1529 = constructor_output_xreg(ctx, v1528);
                            let v1530 = Some(v1529);
                            // Rule at src\isa\riscv64\lower.isle line 1436.
                            return v1530;
                        }
                    }
                }
                &Opcode::Rotr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32 => {
                                let v790 = C::has_zbb(ctx);
                                if v790 == true {
                                    let v64 = C::unpack_value_array_2(ctx, v63);
                                    let v77 = C::i64_from_iconst(ctx, v64.1);
                                    if let Some(v78) = v77 {
                                        let v79 = C::imm12_from_i64(ctx, v78);
                                        if let Some(v80) = v79 {
                                            let v67 = constructor_put_in_xreg(ctx, v64.0);
                                            let v1593 = constructor_rv_roriw(ctx, v67, v80);
                                            let v1594 = constructor_output_xreg(ctx, v1593);
                                            let v1595 = Some(v1594);
                                            // Rule at src\isa\riscv64\lower.isle line 1508.
                                            return v1595;
                                        }
                                    }
                                    let v67 = constructor_put_in_xreg(ctx, v64.0);
                                    let v484 = C::put_in_regs(ctx, v64.1);
                                    let v1321 = C::value_regs_get(ctx, v484, 0x0_usize);
                                    let v1322 = C::xreg_new(ctx, v1321);
                                    let v1590 = constructor_rv_rorw(ctx, v67, v1322);
                                    let v1591 = constructor_output_xreg(ctx, v1590);
                                    let v1592 = Some(v1591);
                                    // Rule at src\isa\riscv64\lower.isle line 1504.
                                    return v1592;
                                }
                            }
                            I64 => {
                                let v790 = C::has_zbb(ctx);
                                if v790 == true {
                                    let v64 = C::unpack_value_array_2(ctx, v63);
                                    let v77 = C::i64_from_iconst(ctx, v64.1);
                                    if let Some(v78) = v77 {
                                        let v79 = C::imm12_from_i64(ctx, v78);
                                        if let Some(v80) = v79 {
                                            let v67 = constructor_put_in_xreg(ctx, v64.0);
                                            let v1599 = constructor_rv_rori(ctx, v67, v80);
                                            let v1600 = constructor_output_xreg(ctx, v1599);
                                            let v1601 = Some(v1600);
                                            // Rule at src\isa\riscv64\lower.isle line 1516.
                                            return v1601;
                                        }
                                    }
                                    let v67 = constructor_put_in_xreg(ctx, v64.0);
                                    let v484 = C::put_in_regs(ctx, v64.1);
                                    let v1321 = C::value_regs_get(ctx, v484, 0x0_usize);
                                    let v1322 = C::xreg_new(ctx, v1321);
                                    let v1596 = constructor_rv_ror(ctx, v67, v1322);
                                    let v1597 = constructor_output_xreg(ctx, v1596);
                                    let v1598 = Some(v1597);
                                    // Rule at src\isa\riscv64\lower.isle line 1512.
                                    return v1598;
                                }
                            }
                            I128 => {
                                let v64 = C::unpack_value_array_2(ctx, v63);
                                let v810 = C::put_in_regs(ctx, v64.1);
                                let v811 = C::value_regs_get(ctx, v810, 0x0_usize);
                                let v812 = C::xreg_new(ctx, v811);
                                let v1354 = C::gen_shamt(ctx, I128, v812);
                                let v1355 = C::value_regs_get(ctx, v1354, 0x0_usize);
                                let v1356 = C::xreg_new(ctx, v1355);
                                let v1357 = C::value_regs_get(ctx, v1354, 0x1_usize);
                                let v1358 = C::xreg_new(ctx, v1357);
                                let v1359 = C::put_in_regs(ctx, v64.0);
                                let v1360 = C::value_regs_get(ctx, v1359, 0x0_usize);
                                let v1361 = C::xreg_new(ctx, v1360);
                                let v1602 = constructor_rv_srl(ctx, v1361, v1356);
                                let v1363 = C::put_in_regs(ctx, v64.0);
                                let v1552 = C::value_regs_get(ctx, v1363, 0x1_usize);
                                let v1553 = C::xreg_new(ctx, v1552);
                                let v1603 = constructor_rv_sll(ctx, v1553, v1358);
                                let v1367 = constructor_cmp_eqz(ctx, v1356);
                                let v1368 = C::zero_reg(ctx);
                                let v1604 = constructor_gen_select_xreg(ctx, v1367, v1368, v1603);
                                let v1605 = constructor_rv_or(ctx, v1602, v1604);
                                let v1557 = C::put_in_regs(ctx, v64.0);
                                let v1558 = C::value_regs_get(ctx, v1557, 0x1_usize);
                                let v1559 = C::xreg_new(ctx, v1558);
                                let v1606 = constructor_rv_srl(ctx, v1559, v1356);
                                let v1561 = C::put_in_regs(ctx, v64.0);
                                let v1562 = C::value_regs_get(ctx, v1561, 0x0_usize);
                                let v1563 = C::xreg_new(ctx, v1562);
                                let v1607 = constructor_rv_sll(ctx, v1563, v1358);
                                let v1565 = constructor_cmp_eqz(ctx, v1356);
                                let v1566 = C::zero_reg(ctx);
                                let v1608 = constructor_gen_select_xreg(ctx, v1565, v1566, v1607);
                                let v1609 = constructor_rv_or(ctx, v1606, v1608);
                                let v1569 = constructor_imm(ctx, I64, 0x40_u64);
                                let v1570 = C::xreg_new(ctx, v1569);
                                let v1571 = C::put_in_regs(ctx, v64.1);
                                let v1572 = C::value_regs_get(ctx, v1571, 0x0_usize);
                                let v1573 = C::xreg_new(ctx, v1572);
                                let v1382 = C::imm12_const(ctx, 127_i32);
                                let v1574 = constructor_rv_andi(ctx, v1573, v1382);
                                let v1575 = constructor_cmp_geu(ctx, v1574, v1570);
                                let v1610 = C::xreg_to_reg(ctx, v1609);
                                let v1611 = C::xreg_to_reg(ctx, v1605);
                                let v1612 = C::value_regs(ctx, v1610, v1611);
                                let v1613 = C::value_regs(ctx, v1611, v1610);
                                let v1614 = constructor_gen_select_regs(ctx, v1575, v1612, v1613);
                                let v1615 = C::output(ctx, v1614);
                                let v1616 = Some(v1615);
                                // Rule at src\isa\riscv64\lower.isle line 1520.
                                return v1616;
                            }
                            _ => {}
                        }
                        let v749 = C::fits_in_64(ctx, v3);
                        if let Some(v750) = v749 {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v640 = constructor_zext(ctx, v64.0);
                            let v484 = C::put_in_regs(ctx, v64.1);
                            let v1321 = C::value_regs_get(ctx, v484, 0x0_usize);
                            let v1322 = C::xreg_new(ctx, v1321);
                            let v1512 = C::gen_shamt(ctx, v750, v1322);
                            let v1513 = C::value_regs_get(ctx, v1512, 0x0_usize);
                            let v1514 = C::xreg_new(ctx, v1513);
                            let v1515 = C::value_regs_get(ctx, v1512, 0x1_usize);
                            let v1583 = C::xreg_new(ctx, v1515);
                            let v1584 = constructor_rv_srl(ctx, v640, v1514);
                            let v1585 = constructor_rv_sll(ctx, v640, v1583);
                            let v1521 = constructor_cmp_eqz(ctx, v1514);
                            let v1522 = C::zero_reg(ctx);
                            let v1586 = constructor_gen_select_xreg(ctx, v1521, v1522, v1585);
                            let v1587 = constructor_rv_or(ctx, v1584, v1586);
                            let v1588 = constructor_output_xreg(ctx, v1587);
                            let v1589 = Some(v1588);
                            // Rule at src\isa\riscv64\lower.isle line 1492.
                            return v1589;
                        }
                    }
                }
                &Opcode::Ishl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v1335 = C::maybe_uextend(ctx, v64.1);
                            if let Some(v1336) = v1335 {
                                let v1397 = C::def_inst(ctx, v1336);
                                if let Some(v1398) = v1397 {
                                    let v1399 = &C::inst_data_value(ctx, v1398);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v1400,
                                        imm: v1401,
                                    } = v1399 {
                                        if let &Opcode::Iconst = v1400 {
                                            let v1402 = C::u64_from_imm64(ctx, v1401);
                                            let v1403 = C::uimm5_from_u64(ctx, v1402);
                                            if let Some(v1404) = v1403 {
                                                let v202 = constructor_put_in_vreg(ctx, v64.0);
                                                let v204 = &constructor_unmasked(ctx);
                                                let v205 = C::vstate_from_type(ctx, v12);
                                                let v1405 = constructor_rv_vsll_vi(ctx, v202, v1404, v204, v205);
                                                let v1406 = constructor_output_vreg(ctx, v1405);
                                                let v1407 = Some(v1406);
                                                // Rule at src\isa\riscv64\lower.isle line 1315.
                                                return v1407;
                                            }
                                        }
                                    }
                                }
                            }
                            let v202 = constructor_put_in_vreg(ctx, v64.0);
                            let v484 = C::put_in_regs(ctx, v64.1);
                            let v1321 = C::value_regs_get(ctx, v484, 0x0_usize);
                            let v1322 = C::xreg_new(ctx, v1321);
                            let v204 = &constructor_unmasked(ctx);
                            let v205 = C::vstate_from_type(ctx, v12);
                            let v1394 = constructor_rv_vsll_vx(ctx, v202, v1322, v204, v205);
                            let v1395 = constructor_output_vreg(ctx, v1394);
                            let v1396 = Some(v1395);
                            // Rule at src\isa\riscv64\lower.isle line 1312.
                            return v1396;
                        }
                        match v3 {
                            I64 => {
                                let v64 = C::unpack_value_array_2(ctx, v63);
                                let v1335 = C::maybe_uextend(ctx, v64.1);
                                if let Some(v1336) = v1335 {
                                    let v1337 = C::i64_from_iconst(ctx, v1336);
                                    if let Some(v1338) = v1337 {
                                        let v1339 = C::imm12_from_i64(ctx, v1338);
                                        if let Some(v1340) = v1339 {
                                            let v100 = C::has_zba(ctx);
                                            if v100 == true {
                                                let v106 = C::def_inst(ctx, v64.0);
                                                if let Some(v107) = v106 {
                                                    let v108 = &C::inst_data_value(ctx, v107);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v109,
                                                        arg: v110,
                                                    } = v108 {
                                                        if let &Opcode::Uextend = v109 {
                                                            let v111 = C::value_type(ctx, v110);
                                                            if v111 == I32 {
                                                                let v112 = constructor_put_in_xreg(ctx, v110);
                                                                let v1351 = constructor_rv_slliuw(ctx, v112, v1340);
                                                                let v1352 = constructor_output_xreg(ctx, v1351);
                                                                let v1353 = Some(v1352);
                                                                // Rule at src\isa\riscv64\lower.isle line 1284.
                                                                return v1353;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            let v67 = constructor_put_in_xreg(ctx, v64.0);
                                            let v1346 = constructor_ty_shift_mask(ctx, v3);
                                            let v1347 = C::imm12_and(ctx, v1340, v1346);
                                            let v1348 = constructor_rv_slli(ctx, v67, v1347);
                                            let v1349 = constructor_output_xreg(ctx, v1348);
                                            let v1350 = Some(v1349);
                                            // Rule at src\isa\riscv64\lower.isle line 1280.
                                            return v1350;
                                        }
                                    }
                                }
                            }
                            I128 => {
                                let v64 = C::unpack_value_array_2(ctx, v63);
                                let v810 = C::put_in_regs(ctx, v64.1);
                                let v811 = C::value_regs_get(ctx, v810, 0x0_usize);
                                let v812 = C::xreg_new(ctx, v811);
                                let v1354 = C::gen_shamt(ctx, I128, v812);
                                let v1355 = C::value_regs_get(ctx, v1354, 0x0_usize);
                                let v1356 = C::xreg_new(ctx, v1355);
                                let v1357 = C::value_regs_get(ctx, v1354, 0x1_usize);
                                let v1358 = C::xreg_new(ctx, v1357);
                                let v1359 = C::put_in_regs(ctx, v64.0);
                                let v1360 = C::value_regs_get(ctx, v1359, 0x0_usize);
                                let v1361 = C::xreg_new(ctx, v1360);
                                let v1362 = constructor_rv_sll(ctx, v1361, v1356);
                                let v1363 = C::put_in_regs(ctx, v64.0);
                                let v1364 = C::value_regs_get(ctx, v1363, 0x0_usize);
                                let v1365 = C::xreg_new(ctx, v1364);
                                let v1366 = constructor_rv_srl(ctx, v1365, v1358);
                                let v1367 = constructor_cmp_eqz(ctx, v1356);
                                let v1368 = C::zero_reg(ctx);
                                let v1369 = constructor_gen_select_xreg(ctx, v1367, v1368, v1366);
                                let v1370 = C::put_in_regs(ctx, v64.0);
                                let v1371 = C::value_regs_get(ctx, v1370, 0x1_usize);
                                let v1372 = C::xreg_new(ctx, v1371);
                                let v1373 = constructor_rv_sll(ctx, v1372, v1356);
                                let v1374 = constructor_rv_or(ctx, v1369, v1373);
                                let v1376 = constructor_imm(ctx, I64, 0x40_u64);
                                let v1377 = C::xreg_new(ctx, v1376);
                                let v1378 = C::put_in_regs(ctx, v64.1);
                                let v1379 = C::value_regs_get(ctx, v1378, 0x0_usize);
                                let v1380 = C::xreg_new(ctx, v1379);
                                let v1382 = C::imm12_const(ctx, 127_i32);
                                let v1383 = constructor_rv_andi(ctx, v1380, v1382);
                                let v1384 = constructor_cmp_geu(ctx, v1383, v1377);
                                let v1385 = C::zero_reg(ctx);
                                let v1386 = C::xreg_to_reg(ctx, v1385);
                                let v1387 = C::xreg_to_reg(ctx, v1362);
                                let v1388 = C::value_regs(ctx, v1386, v1387);
                                let v1389 = C::xreg_to_reg(ctx, v1374);
                                let v1390 = C::value_regs(ctx, v1387, v1389);
                                let v1391 = constructor_gen_select_regs(ctx, v1384, v1388, v1390);
                                let v1392 = C::output(ctx, v1391);
                                let v1393 = Some(v1392);
                                // Rule at src\isa\riscv64\lower.isle line 1289.
                                return v1393;
                            }
                            _ => {}
                        }
                        let v1333 = C::int_fits_in_32(ctx, v3);
                        if let Some(v1334) = v1333 {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v1335 = C::maybe_uextend(ctx, v64.1);
                            if let Some(v1336) = v1335 {
                                let v1337 = C::i64_from_iconst(ctx, v1336);
                                if let Some(v1338) = v1337 {
                                    let v1339 = C::imm12_from_i64(ctx, v1338);
                                    if let Some(v1340) = v1339 {
                                        let v67 = constructor_put_in_xreg(ctx, v64.0);
                                        let v1341 = constructor_ty_shift_mask(ctx, v1334);
                                        let v1342 = C::imm12_and(ctx, v1340, v1341);
                                        let v1343 = constructor_rv_slliw(ctx, v67, v1342);
                                        let v1344 = constructor_output_xreg(ctx, v1343);
                                        let v1345 = Some(v1344);
                                        // Rule at src\isa\riscv64\lower.isle line 1275.
                                        return v1345;
                                    }
                                }
                            }
                        }
                        match v3 {
                            I32 => {
                                let v64 = C::unpack_value_array_2(ctx, v63);
                                let v67 = constructor_put_in_xreg(ctx, v64.0);
                                let v484 = C::put_in_regs(ctx, v64.1);
                                let v1321 = C::value_regs_get(ctx, v484, 0x0_usize);
                                let v1322 = C::xreg_new(ctx, v1321);
                                let v1327 = constructor_rv_sllw(ctx, v67, v1322);
                                let v1328 = constructor_output_xreg(ctx, v1327);
                                let v1329 = Some(v1328);
                                // Rule at src\isa\riscv64\lower.isle line 1267.
                                return v1329;
                            }
                            I64 => {
                                let v64 = C::unpack_value_array_2(ctx, v63);
                                let v67 = constructor_put_in_xreg(ctx, v64.0);
                                let v484 = C::put_in_regs(ctx, v64.1);
                                let v1321 = C::value_regs_get(ctx, v484, 0x0_usize);
                                let v1322 = C::xreg_new(ctx, v1321);
                                let v1330 = constructor_rv_sll(ctx, v67, v1322);
                                let v1331 = constructor_output_xreg(ctx, v1330);
                                let v1332 = Some(v1331);
                                // Rule at src\isa\riscv64\lower.isle line 1271.
                                return v1332;
                            }
                            _ => {}
                        }
                        let v564 = C::ty_int(ctx, v3);
                        if let Some(v565) = v564 {
                            let v1316 = C::ty_8_or_16(ctx, v565);
                            if let Some(v1317) = v1316 {
                                let v1318 = constructor_ty_shift_mask(ctx, v1317);
                                let v1319 = constructor_u64_to_imm12(ctx, v1318);
                                if let Some(v1320) = v1319 {
                                    let v64 = C::unpack_value_array_2(ctx, v63);
                                    let v67 = constructor_put_in_xreg(ctx, v64.0);
                                    let v484 = C::put_in_regs(ctx, v64.1);
                                    let v1321 = C::value_regs_get(ctx, v484, 0x0_usize);
                                    let v1322 = C::xreg_new(ctx, v1321);
                                    let v1323 = constructor_rv_andi(ctx, v1322, v1320);
                                    let v1324 = constructor_rv_sllw(ctx, v67, v1323);
                                    let v1325 = constructor_output_xreg(ctx, v1324);
                                    let v1326 = Some(v1325);
                                    // Rule at src\isa\riscv64\lower.isle line 1262.
                                    return v1326;
                                }
                            }
                        }
                    }
                }
                &Opcode::Ushr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v1335 = C::maybe_uextend(ctx, v64.1);
                            if let Some(v1336) = v1335 {
                                let v1397 = C::def_inst(ctx, v1336);
                                if let Some(v1398) = v1397 {
                                    let v1399 = &C::inst_data_value(ctx, v1398);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v1400,
                                        imm: v1401,
                                    } = v1399 {
                                        if let &Opcode::Iconst = v1400 {
                                            let v1402 = C::u64_from_imm64(ctx, v1401);
                                            let v1403 = C::uimm5_from_u64(ctx, v1402);
                                            if let Some(v1404) = v1403 {
                                                let v202 = constructor_put_in_vreg(ctx, v64.0);
                                                let v204 = &constructor_unmasked(ctx);
                                                let v205 = C::vstate_from_type(ctx, v12);
                                                let v1460 = constructor_rv_vsrl_vi(ctx, v202, v1404, v204, v205);
                                                let v1461 = constructor_output_vreg(ctx, v1460);
                                                let v1462 = Some(v1461);
                                                // Rule at src\isa\riscv64\lower.isle line 1370.
                                                return v1462;
                                            }
                                        }
                                    }
                                }
                            }
                            let v202 = constructor_put_in_vreg(ctx, v64.0);
                            let v484 = C::put_in_regs(ctx, v64.1);
                            let v1321 = C::value_regs_get(ctx, v484, 0x0_usize);
                            let v1322 = C::xreg_new(ctx, v1321);
                            let v204 = &constructor_unmasked(ctx);
                            let v205 = C::vstate_from_type(ctx, v12);
                            let v1457 = constructor_rv_vsrl_vx(ctx, v202, v1322, v204, v205);
                            let v1458 = constructor_output_vreg(ctx, v1457);
                            let v1459 = Some(v1458);
                            // Rule at src\isa\riscv64\lower.isle line 1367.
                            return v1459;
                        }
                        match v3 {
                            I32 => {
                                let v64 = C::unpack_value_array_2(ctx, v63);
                                let v1335 = C::maybe_uextend(ctx, v64.1);
                                if let Some(v1336) = v1335 {
                                    let v1337 = C::i64_from_iconst(ctx, v1336);
                                    if let Some(v1338) = v1337 {
                                        let v1339 = C::imm12_from_i64(ctx, v1338);
                                        if let Some(v1340) = v1339 {
                                            let v67 = constructor_put_in_xreg(ctx, v64.0);
                                            let v1427 = constructor_rv_srliw(ctx, v67, v1340);
                                            let v1428 = constructor_output_xreg(ctx, v1427);
                                            let v1429 = Some(v1428);
                                            // Rule at src\isa\riscv64\lower.isle line 1338.
                                            return v1429;
                                        }
                                    }
                                }
                            }
                            I64 => {
                                let v64 = C::unpack_value_array_2(ctx, v63);
                                let v1335 = C::maybe_uextend(ctx, v64.1);
                                if let Some(v1336) = v1335 {
                                    let v1337 = C::i64_from_iconst(ctx, v1336);
                                    if let Some(v1338) = v1337 {
                                        let v1339 = C::imm12_from_i64(ctx, v1338);
                                        if let Some(v1340) = v1339 {
                                            let v67 = constructor_put_in_xreg(ctx, v64.0);
                                            let v1430 = constructor_rv_srli(ctx, v67, v1340);
                                            let v1431 = constructor_output_xreg(ctx, v1430);
                                            let v1432 = Some(v1431);
                                            // Rule at src\isa\riscv64\lower.isle line 1341.
                                            return v1432;
                                        }
                                    }
                                }
                            }
                            I128 => {
                                let v64 = C::unpack_value_array_2(ctx, v63);
                                let v810 = C::put_in_regs(ctx, v64.1);
                                let v811 = C::value_regs_get(ctx, v810, 0x0_usize);
                                let v812 = C::xreg_new(ctx, v811);
                                let v1354 = C::gen_shamt(ctx, I128, v812);
                                let v1355 = C::value_regs_get(ctx, v1354, 0x0_usize);
                                let v1356 = C::xreg_new(ctx, v1355);
                                let v1357 = C::value_regs_get(ctx, v1354, 0x1_usize);
                                let v1358 = C::xreg_new(ctx, v1357);
                                let v1359 = C::put_in_regs(ctx, v64.0);
                                let v1433 = C::value_regs_get(ctx, v1359, 0x1_usize);
                                let v1434 = C::xreg_new(ctx, v1433);
                                let v1435 = constructor_rv_sll(ctx, v1434, v1358);
                                let v1436 = constructor_cmp_eqz(ctx, v1356);
                                let v592 = C::zero_reg(ctx);
                                let v1437 = constructor_gen_select_xreg(ctx, v1436, v592, v1435);
                                let v1438 = C::put_in_regs(ctx, v64.0);
                                let v1439 = C::value_regs_get(ctx, v1438, 0x0_usize);
                                let v1440 = C::xreg_new(ctx, v1439);
                                let v1441 = constructor_rv_srl(ctx, v1440, v1356);
                                let v1442 = constructor_rv_or(ctx, v1437, v1441);
                                let v1443 = constructor_imm(ctx, I64, 0x40_u64);
                                let v1444 = C::xreg_new(ctx, v1443);
                                let v1445 = C::put_in_regs(ctx, v64.0);
                                let v1446 = C::value_regs_get(ctx, v1445, 0x1_usize);
                                let v1447 = C::xreg_new(ctx, v1446);
                                let v1448 = constructor_rv_srl(ctx, v1447, v1356);
                                let v1378 = C::put_in_regs(ctx, v64.1);
                                let v1379 = C::value_regs_get(ctx, v1378, 0x0_usize);
                                let v1380 = C::xreg_new(ctx, v1379);
                                let v1382 = C::imm12_const(ctx, 127_i32);
                                let v1383 = constructor_rv_andi(ctx, v1380, v1382);
                                let v1449 = constructor_cmp_geu(ctx, v1383, v1444);
                                let v1385 = C::zero_reg(ctx);
                                let v1450 = C::xreg_to_reg(ctx, v1448);
                                let v1386 = C::xreg_to_reg(ctx, v1385);
                                let v1451 = C::value_regs(ctx, v1450, v1386);
                                let v1452 = C::xreg_to_reg(ctx, v1442);
                                let v1453 = C::value_regs(ctx, v1452, v1450);
                                let v1454 = constructor_gen_select_regs(ctx, v1449, v1451, v1453);
                                let v1455 = C::output(ctx, v1454);
                                let v1456 = Some(v1455);
                                // Rule at src\isa\riscv64\lower.isle line 1344.
                                return v1456;
                            }
                            _ => {}
                        }
                        let v564 = C::ty_int(ctx, v3);
                        if let Some(v565) = v564 {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v1335 = C::maybe_uextend(ctx, v64.1);
                            if let Some(v1336) = v1335 {
                                let v1337 = C::i64_from_iconst(ctx, v1336);
                                if let Some(v1338) = v1337 {
                                    let v1339 = C::imm12_from_i64(ctx, v1338);
                                    if let Some(v1340) = v1339 {
                                        let v1408 = C::fits_in_16(ctx, v565);
                                        if let Some(v1409) = v1408 {
                                            let v640 = constructor_zext(ctx, v64.0);
                                            let v1410 = constructor_ty_shift_mask(ctx, v1409);
                                            let v1423 = C::imm12_and(ctx, v1340, v1410);
                                            let v1424 = constructor_rv_srliw(ctx, v640, v1423);
                                            let v1425 = constructor_output_xreg(ctx, v1424);
                                            let v1426 = Some(v1425);
                                            // Rule at src\isa\riscv64\lower.isle line 1335.
                                            return v1426;
                                        }
                                    }
                                }
                            }
                        }
                        match v3 {
                            I32 => {
                                let v64 = C::unpack_value_array_2(ctx, v63);
                                let v67 = constructor_put_in_xreg(ctx, v64.0);
                                let v484 = C::put_in_regs(ctx, v64.1);
                                let v1321 = C::value_regs_get(ctx, v484, 0x0_usize);
                                let v1322 = C::xreg_new(ctx, v1321);
                                let v1417 = constructor_rv_srlw(ctx, v67, v1322);
                                let v1418 = constructor_output_xreg(ctx, v1417);
                                let v1419 = Some(v1418);
                                // Rule at src\isa\riscv64\lower.isle line 1327.
                                return v1419;
                            }
                            I64 => {
                                let v64 = C::unpack_value_array_2(ctx, v63);
                                let v67 = constructor_put_in_xreg(ctx, v64.0);
                                let v484 = C::put_in_regs(ctx, v64.1);
                                let v1321 = C::value_regs_get(ctx, v484, 0x0_usize);
                                let v1322 = C::xreg_new(ctx, v1321);
                                let v1420 = constructor_rv_srl(ctx, v67, v1322);
                                let v1421 = constructor_output_xreg(ctx, v1420);
                                let v1422 = Some(v1421);
                                // Rule at src\isa\riscv64\lower.isle line 1331.
                                return v1422;
                            }
                            _ => {}
                        }
                        if let Some(v565) = v564 {
                            let v1408 = C::fits_in_16(ctx, v565);
                            if let Some(v1409) = v1408 {
                                let v1410 = constructor_ty_shift_mask(ctx, v1409);
                                let v1411 = constructor_u64_to_imm12(ctx, v1410);
                                if let Some(v1412) = v1411 {
                                    let v64 = C::unpack_value_array_2(ctx, v63);
                                    let v640 = constructor_zext(ctx, v64.0);
                                    let v484 = C::put_in_regs(ctx, v64.1);
                                    let v1321 = C::value_regs_get(ctx, v484, 0x0_usize);
                                    let v1322 = C::xreg_new(ctx, v1321);
                                    let v1413 = constructor_rv_andi(ctx, v1322, v1412);
                                    let v1414 = constructor_rv_srlw(ctx, v640, v1413);
                                    let v1415 = constructor_output_xreg(ctx, v1414);
                                    let v1416 = Some(v1415);
                                    // Rule at src\isa\riscv64\lower.isle line 1322.
                                    return v1416;
                                }
                            }
                        }
                    }
                }
                &Opcode::Sshr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v1335 = C::maybe_uextend(ctx, v64.1);
                            if let Some(v1336) = v1335 {
                                let v1397 = C::def_inst(ctx, v1336);
                                if let Some(v1398) = v1397 {
                                    let v1399 = &C::inst_data_value(ctx, v1398);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v1400,
                                        imm: v1401,
                                    } = v1399 {
                                        if let &Opcode::Iconst = v1400 {
                                            let v1402 = C::u64_from_imm64(ctx, v1401);
                                            let v1403 = C::uimm5_from_u64(ctx, v1402);
                                            if let Some(v1404) = v1403 {
                                                let v202 = constructor_put_in_vreg(ctx, v64.0);
                                                let v204 = &constructor_unmasked(ctx);
                                                let v205 = C::vstate_from_type(ctx, v12);
                                                let v1509 = constructor_rv_vsra_vi(ctx, v202, v1404, v204, v205);
                                                let v1510 = constructor_output_vreg(ctx, v1509);
                                                let v1511 = Some(v1510);
                                                // Rule at src\isa\riscv64\lower.isle line 1430.
                                                return v1511;
                                            }
                                        }
                                    }
                                }
                            }
                            let v202 = constructor_put_in_vreg(ctx, v64.0);
                            let v484 = C::put_in_regs(ctx, v64.1);
                            let v1321 = C::value_regs_get(ctx, v484, 0x0_usize);
                            let v1322 = C::xreg_new(ctx, v1321);
                            let v204 = &constructor_unmasked(ctx);
                            let v205 = C::vstate_from_type(ctx, v12);
                            let v1506 = constructor_rv_vsra_vx(ctx, v202, v1322, v204, v205);
                            let v1507 = constructor_output_vreg(ctx, v1506);
                            let v1508 = Some(v1507);
                            // Rule at src\isa\riscv64\lower.isle line 1427.
                            return v1508;
                        }
                        match v3 {
                            I32 => {
                                let v64 = C::unpack_value_array_2(ctx, v63);
                                let v1335 = C::maybe_uextend(ctx, v64.1);
                                if let Some(v1336) = v1335 {
                                    let v1337 = C::i64_from_iconst(ctx, v1336);
                                    if let Some(v1338) = v1337 {
                                        let v1339 = C::imm12_from_i64(ctx, v1338);
                                        if let Some(v1340) = v1339 {
                                            let v67 = constructor_put_in_xreg(ctx, v64.0);
                                            let v1475 = constructor_rv_sraiw(ctx, v67, v1340);
                                            let v1476 = constructor_output_xreg(ctx, v1475);
                                            let v1477 = Some(v1476);
                                            // Rule at src\isa\riscv64\lower.isle line 1393.
                                            return v1477;
                                        }
                                    }
                                }
                            }
                            I64 => {
                                let v64 = C::unpack_value_array_2(ctx, v63);
                                let v1335 = C::maybe_uextend(ctx, v64.1);
                                if let Some(v1336) = v1335 {
                                    let v1337 = C::i64_from_iconst(ctx, v1336);
                                    if let Some(v1338) = v1337 {
                                        let v1339 = C::imm12_from_i64(ctx, v1338);
                                        if let Some(v1340) = v1339 {
                                            let v67 = constructor_put_in_xreg(ctx, v64.0);
                                            let v1478 = constructor_rv_srai(ctx, v67, v1340);
                                            let v1479 = constructor_output_xreg(ctx, v1478);
                                            let v1480 = Some(v1479);
                                            // Rule at src\isa\riscv64\lower.isle line 1396.
                                            return v1480;
                                        }
                                    }
                                }
                            }
                            I128 => {
                                let v64 = C::unpack_value_array_2(ctx, v63);
                                let v810 = C::put_in_regs(ctx, v64.1);
                                let v811 = C::value_regs_get(ctx, v810, 0x0_usize);
                                let v812 = C::xreg_new(ctx, v811);
                                let v1354 = C::gen_shamt(ctx, I128, v812);
                                let v1355 = C::value_regs_get(ctx, v1354, 0x0_usize);
                                let v1356 = C::xreg_new(ctx, v1355);
                                let v1357 = C::value_regs_get(ctx, v1354, 0x1_usize);
                                let v1358 = C::xreg_new(ctx, v1357);
                                let v1359 = C::put_in_regs(ctx, v64.0);
                                let v1433 = C::value_regs_get(ctx, v1359, 0x1_usize);
                                let v1434 = C::xreg_new(ctx, v1433);
                                let v1435 = constructor_rv_sll(ctx, v1434, v1358);
                                let v1436 = constructor_cmp_eqz(ctx, v1356);
                                let v592 = C::zero_reg(ctx);
                                let v1437 = constructor_gen_select_xreg(ctx, v1436, v592, v1435);
                                let v1438 = C::put_in_regs(ctx, v64.0);
                                let v1439 = C::value_regs_get(ctx, v1438, 0x0_usize);
                                let v1440 = C::xreg_new(ctx, v1439);
                                let v1441 = constructor_rv_srl(ctx, v1440, v1356);
                                let v1442 = constructor_rv_or(ctx, v1437, v1441);
                                let v1443 = constructor_imm(ctx, I64, 0x40_u64);
                                let v1444 = C::xreg_new(ctx, v1443);
                                let v1445 = C::put_in_regs(ctx, v64.0);
                                let v1446 = C::value_regs_get(ctx, v1445, 0x1_usize);
                                let v1447 = C::xreg_new(ctx, v1446);
                                let v1481 = constructor_rv_sra(ctx, v1447, v1356);
                                let v1483 = C::i64_as_u64(ctx, -1_i64);
                                let v1484 = constructor_imm(ctx, I64, v1483);
                                let v1485 = C::xreg_new(ctx, v1484);
                                let v1486 = C::put_in_regs(ctx, v64.0);
                                let v1487 = C::value_regs_get(ctx, v1486, 0x1_usize);
                                let v1488 = C::xreg_new(ctx, v1487);
                                let v1489 = constructor_cmp_ltz(ctx, v1488);
                                let v1490 = C::zero_reg(ctx);
                                let v1491 = constructor_gen_select_xreg(ctx, v1489, v1485, v1490);
                                let v1492 = constructor_imm(ctx, I64, 0x40_u64);
                                let v1493 = C::xreg_new(ctx, v1492);
                                let v1494 = C::put_in_regs(ctx, v64.1);
                                let v1495 = C::value_regs_get(ctx, v1494, 0x0_usize);
                                let v1496 = C::xreg_new(ctx, v1495);
                                let v1382 = C::imm12_const(ctx, 127_i32);
                                let v1497 = constructor_rv_andi(ctx, v1496, v1382);
                                let v1498 = constructor_cmp_geu(ctx, v1497, v1493);
                                let v1499 = C::xreg_to_reg(ctx, v1481);
                                let v1500 = C::xreg_to_reg(ctx, v1491);
                                let v1501 = C::value_regs(ctx, v1499, v1500);
                                let v1452 = C::xreg_to_reg(ctx, v1442);
                                let v1502 = C::value_regs(ctx, v1452, v1499);
                                let v1503 = constructor_gen_select_regs(ctx, v1498, v1501, v1502);
                                let v1504 = C::output(ctx, v1503);
                                let v1505 = Some(v1504);
                                // Rule at src\isa\riscv64\lower.isle line 1399.
                                return v1505;
                            }
                            _ => {}
                        }
                        let v564 = C::ty_int(ctx, v3);
                        if let Some(v565) = v564 {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v1335 = C::maybe_uextend(ctx, v64.1);
                            if let Some(v1336) = v1335 {
                                let v1337 = C::i64_from_iconst(ctx, v1336);
                                if let Some(v1338) = v1337 {
                                    let v1339 = C::imm12_from_i64(ctx, v1338);
                                    if let Some(v1340) = v1339 {
                                        let v1408 = C::fits_in_16(ctx, v565);
                                        if let Some(v1409) = v1408 {
                                            let v626 = constructor_sext(ctx, v64.0);
                                            let v1410 = constructor_ty_shift_mask(ctx, v1409);
                                            let v1423 = C::imm12_and(ctx, v1340, v1410);
                                            let v1472 = constructor_rv_sraiw(ctx, v626, v1423);
                                            let v1473 = constructor_output_xreg(ctx, v1472);
                                            let v1474 = Some(v1473);
                                            // Rule at src\isa\riscv64\lower.isle line 1390.
                                            return v1474;
                                        }
                                    }
                                }
                            }
                        }
                        match v3 {
                            I32 => {
                                let v64 = C::unpack_value_array_2(ctx, v63);
                                let v67 = constructor_put_in_xreg(ctx, v64.0);
                                let v484 = C::put_in_regs(ctx, v64.1);
                                let v1321 = C::value_regs_get(ctx, v484, 0x0_usize);
                                let v1322 = C::xreg_new(ctx, v1321);
                                let v1466 = constructor_rv_sraw(ctx, v67, v1322);
                                let v1467 = constructor_output_xreg(ctx, v1466);
                                let v1468 = Some(v1467);
                                // Rule at src\isa\riscv64\lower.isle line 1382.
                                return v1468;
                            }
                            I64 => {
                                let v64 = C::unpack_value_array_2(ctx, v63);
                                let v67 = constructor_put_in_xreg(ctx, v64.0);
                                let v484 = C::put_in_regs(ctx, v64.1);
                                let v1321 = C::value_regs_get(ctx, v484, 0x0_usize);
                                let v1322 = C::xreg_new(ctx, v1321);
                                let v1469 = constructor_rv_sra(ctx, v67, v1322);
                                let v1470 = constructor_output_xreg(ctx, v1469);
                                let v1471 = Some(v1470);
                                // Rule at src\isa\riscv64\lower.isle line 1386.
                                return v1471;
                            }
                            _ => {}
                        }
                        if let Some(v565) = v564 {
                            let v1408 = C::fits_in_16(ctx, v565);
                            if let Some(v1409) = v1408 {
                                let v1410 = constructor_ty_shift_mask(ctx, v1409);
                                let v1411 = constructor_u64_to_imm12(ctx, v1410);
                                if let Some(v1412) = v1411 {
                                    let v64 = C::unpack_value_array_2(ctx, v63);
                                    let v626 = constructor_sext(ctx, v64.0);
                                    let v484 = C::put_in_regs(ctx, v64.1);
                                    let v1321 = C::value_regs_get(ctx, v484, 0x0_usize);
                                    let v1322 = C::xreg_new(ctx, v1321);
                                    let v1413 = constructor_rv_andi(ctx, v1322, v1412);
                                    let v1463 = constructor_rv_sraw(ctx, v626, v1413);
                                    let v1464 = constructor_output_xreg(ctx, v1463);
                                    let v1465 = Some(v1464);
                                    // Rule at src\isa\riscv64\lower.isle line 1377.
                                    return v1465;
                                }
                            }
                        }
                    }
                }
                &Opcode::Fadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v106 = C::def_inst(ctx, v64.0);
                            if let Some(v107) = v106 {
                                let v108 = &C::inst_data_value(ctx, v107);
                                if let &InstructionData::Unary {
                                    opcode: ref v109,
                                    arg: v110,
                                } = v108 {
                                    if let &Opcode::Splat = v109 {
                                        let v237 = constructor_put_in_vreg(ctx, v64.1);
                                        let v1787 = constructor_put_in_freg(ctx, v110);
                                        let v204 = &constructor_unmasked(ctx);
                                        let v205 = C::vstate_from_type(ctx, v12);
                                        let v1788 = constructor_rv_vfadd_vf(ctx, v237, v1787, v204, v205);
                                        let v1789 = constructor_output_vreg(ctx, v1788);
                                        let v1790 = Some(v1789);
                                        // Rule at src\isa\riscv64\lower.isle line 1771.
                                        return v1790;
                                    }
                                }
                            }
                            let v94 = C::def_inst(ctx, v64.1);
                            if let Some(v95) = v94 {
                                let v96 = &C::inst_data_value(ctx, v95);
                                if let &InstructionData::Unary {
                                    opcode: ref v97,
                                    arg: v98,
                                } = v96 {
                                    if let &Opcode::Splat = v97 {
                                        let v202 = constructor_put_in_vreg(ctx, v64.0);
                                        let v1637 = constructor_put_in_freg(ctx, v98);
                                        let v204 = &constructor_unmasked(ctx);
                                        let v205 = C::vstate_from_type(ctx, v12);
                                        let v1784 = constructor_rv_vfadd_vf(ctx, v202, v1637, v204, v205);
                                        let v1785 = constructor_output_vreg(ctx, v1784);
                                        let v1786 = Some(v1785);
                                        // Rule at src\isa\riscv64\lower.isle line 1768.
                                        return v1786;
                                    }
                                }
                            }
                            let v202 = constructor_put_in_vreg(ctx, v64.0);
                            let v203 = constructor_put_in_vreg(ctx, v64.1);
                            let v204 = &constructor_unmasked(ctx);
                            let v205 = C::vstate_from_type(ctx, v12);
                            let v1781 = constructor_rv_vfadd_vv(ctx, v202, v203, v204, v205);
                            let v1782 = constructor_output_vreg(ctx, v1781);
                            let v1783 = Some(v1782);
                            // Rule at src\isa\riscv64\lower.isle line 1765.
                            return v1783;
                        }
                        let v1617 = C::ty_supported_float_full(ctx, v3);
                        if let Some(v1618) = v1617 {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v781 = constructor_put_in_freg(ctx, v64.0);
                            let v782 = constructor_put_in_freg(ctx, v64.1);
                            let v1778 = constructor_rv_fadd(ctx, v1618, &FRM::RNE, v781, v782);
                            let v1779 = constructor_output_freg(ctx, v1778);
                            let v1780 = Some(v1779);
                            // Rule at src\isa\riscv64\lower.isle line 1762.
                            return v1780;
                        }
                    }
                }
                &Opcode::Fsub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v106 = C::def_inst(ctx, v64.0);
                            if let Some(v107) = v106 {
                                let v108 = &C::inst_data_value(ctx, v107);
                                if let &InstructionData::Unary {
                                    opcode: ref v109,
                                    arg: v110,
                                } = v108 {
                                    if let &Opcode::Splat = v109 {
                                        let v237 = constructor_put_in_vreg(ctx, v64.1);
                                        let v1787 = constructor_put_in_freg(ctx, v110);
                                        let v204 = &constructor_unmasked(ctx);
                                        let v205 = C::vstate_from_type(ctx, v12);
                                        let v1800 = constructor_rv_vfrsub_vf(ctx, v237, v1787, v204, v205);
                                        let v1801 = constructor_output_vreg(ctx, v1800);
                                        let v1802 = Some(v1801);
                                        // Rule at src\isa\riscv64\lower.isle line 1785.
                                        return v1802;
                                    }
                                }
                            }
                            let v94 = C::def_inst(ctx, v64.1);
                            if let Some(v95) = v94 {
                                let v96 = &C::inst_data_value(ctx, v95);
                                if let &InstructionData::Unary {
                                    opcode: ref v97,
                                    arg: v98,
                                } = v96 {
                                    if let &Opcode::Splat = v97 {
                                        let v202 = constructor_put_in_vreg(ctx, v64.0);
                                        let v1637 = constructor_put_in_freg(ctx, v98);
                                        let v204 = &constructor_unmasked(ctx);
                                        let v205 = C::vstate_from_type(ctx, v12);
                                        let v1797 = constructor_rv_vfsub_vf(ctx, v202, v1637, v204, v205);
                                        let v1798 = constructor_output_vreg(ctx, v1797);
                                        let v1799 = Some(v1798);
                                        // Rule at src\isa\riscv64\lower.isle line 1782.
                                        return v1799;
                                    }
                                }
                            }
                            let v202 = constructor_put_in_vreg(ctx, v64.0);
                            let v203 = constructor_put_in_vreg(ctx, v64.1);
                            let v204 = &constructor_unmasked(ctx);
                            let v205 = C::vstate_from_type(ctx, v12);
                            let v1794 = constructor_rv_vfsub_vv(ctx, v202, v203, v204, v205);
                            let v1795 = constructor_output_vreg(ctx, v1794);
                            let v1796 = Some(v1795);
                            // Rule at src\isa\riscv64\lower.isle line 1779.
                            return v1796;
                        }
                        let v1617 = C::ty_supported_float_full(ctx, v3);
                        if let Some(v1618) = v1617 {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v781 = constructor_put_in_freg(ctx, v64.0);
                            let v782 = constructor_put_in_freg(ctx, v64.1);
                            let v1791 = constructor_rv_fsub(ctx, v1618, &FRM::RNE, v781, v782);
                            let v1792 = constructor_output_freg(ctx, v1791);
                            let v1793 = Some(v1792);
                            // Rule at src\isa\riscv64\lower.isle line 1776.
                            return v1793;
                        }
                    }
                }
                &Opcode::Fmul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v106 = C::def_inst(ctx, v64.0);
                            if let Some(v107) = v106 {
                                let v108 = &C::inst_data_value(ctx, v107);
                                if let &InstructionData::Unary {
                                    opcode: ref v109,
                                    arg: v110,
                                } = v108 {
                                    if let &Opcode::Splat = v109 {
                                        let v237 = constructor_put_in_vreg(ctx, v64.1);
                                        let v1787 = constructor_put_in_freg(ctx, v110);
                                        let v204 = &constructor_unmasked(ctx);
                                        let v205 = C::vstate_from_type(ctx, v12);
                                        let v1812 = constructor_rv_vfmul_vf(ctx, v237, v1787, v204, v205);
                                        let v1813 = constructor_output_vreg(ctx, v1812);
                                        let v1814 = Some(v1813);
                                        // Rule at src\isa\riscv64\lower.isle line 1798.
                                        return v1814;
                                    }
                                }
                            }
                            let v94 = C::def_inst(ctx, v64.1);
                            if let Some(v95) = v94 {
                                let v96 = &C::inst_data_value(ctx, v95);
                                if let &InstructionData::Unary {
                                    opcode: ref v97,
                                    arg: v98,
                                } = v96 {
                                    if let &Opcode::Splat = v97 {
                                        let v202 = constructor_put_in_vreg(ctx, v64.0);
                                        let v1637 = constructor_put_in_freg(ctx, v98);
                                        let v204 = &constructor_unmasked(ctx);
                                        let v205 = C::vstate_from_type(ctx, v12);
                                        let v1809 = constructor_rv_vfmul_vf(ctx, v202, v1637, v204, v205);
                                        let v1810 = constructor_output_vreg(ctx, v1809);
                                        let v1811 = Some(v1810);
                                        // Rule at src\isa\riscv64\lower.isle line 1795.
                                        return v1811;
                                    }
                                }
                            }
                            let v202 = constructor_put_in_vreg(ctx, v64.0);
                            let v203 = constructor_put_in_vreg(ctx, v64.1);
                            let v204 = &constructor_unmasked(ctx);
                            let v205 = C::vstate_from_type(ctx, v12);
                            let v1806 = constructor_rv_vfmul_vv(ctx, v202, v203, v204, v205);
                            let v1807 = constructor_output_vreg(ctx, v1806);
                            let v1808 = Some(v1807);
                            // Rule at src\isa\riscv64\lower.isle line 1792.
                            return v1808;
                        }
                        let v1617 = C::ty_supported_float_full(ctx, v3);
                        if let Some(v1618) = v1617 {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v781 = constructor_put_in_freg(ctx, v64.0);
                            let v782 = constructor_put_in_freg(ctx, v64.1);
                            let v1803 = constructor_rv_fmul(ctx, v1618, &FRM::RNE, v781, v782);
                            let v1804 = constructor_output_freg(ctx, v1803);
                            let v1805 = Some(v1804);
                            // Rule at src\isa\riscv64\lower.isle line 1789.
                            return v1805;
                        }
                    }
                }
                &Opcode::Fdiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v106 = C::def_inst(ctx, v64.0);
                            if let Some(v107) = v106 {
                                let v108 = &C::inst_data_value(ctx, v107);
                                if let &InstructionData::Unary {
                                    opcode: ref v109,
                                    arg: v110,
                                } = v108 {
                                    if let &Opcode::Splat = v109 {
                                        let v237 = constructor_put_in_vreg(ctx, v64.1);
                                        let v1787 = constructor_put_in_freg(ctx, v110);
                                        let v204 = &constructor_unmasked(ctx);
                                        let v205 = C::vstate_from_type(ctx, v12);
                                        let v1824 = constructor_rv_vfrdiv_vf(ctx, v237, v1787, v204, v205);
                                        let v1825 = constructor_output_vreg(ctx, v1824);
                                        let v1826 = Some(v1825);
                                        // Rule at src\isa\riscv64\lower.isle line 1812.
                                        return v1826;
                                    }
                                }
                            }
                            let v94 = C::def_inst(ctx, v64.1);
                            if let Some(v95) = v94 {
                                let v96 = &C::inst_data_value(ctx, v95);
                                if let &InstructionData::Unary {
                                    opcode: ref v97,
                                    arg: v98,
                                } = v96 {
                                    if let &Opcode::Splat = v97 {
                                        let v202 = constructor_put_in_vreg(ctx, v64.0);
                                        let v1637 = constructor_put_in_freg(ctx, v98);
                                        let v204 = &constructor_unmasked(ctx);
                                        let v205 = C::vstate_from_type(ctx, v12);
                                        let v1821 = constructor_rv_vfdiv_vf(ctx, v202, v1637, v204, v205);
                                        let v1822 = constructor_output_vreg(ctx, v1821);
                                        let v1823 = Some(v1822);
                                        // Rule at src\isa\riscv64\lower.isle line 1809.
                                        return v1823;
                                    }
                                }
                            }
                            let v202 = constructor_put_in_vreg(ctx, v64.0);
                            let v203 = constructor_put_in_vreg(ctx, v64.1);
                            let v204 = &constructor_unmasked(ctx);
                            let v205 = C::vstate_from_type(ctx, v12);
                            let v1818 = constructor_rv_vfdiv_vv(ctx, v202, v203, v204, v205);
                            let v1819 = constructor_output_vreg(ctx, v1818);
                            let v1820 = Some(v1819);
                            // Rule at src\isa\riscv64\lower.isle line 1806.
                            return v1820;
                        }
                        let v1617 = C::ty_supported_float_full(ctx, v3);
                        if let Some(v1618) = v1617 {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v781 = constructor_put_in_freg(ctx, v64.0);
                            let v782 = constructor_put_in_freg(ctx, v64.1);
                            let v1815 = constructor_rv_fdiv(ctx, v1618, &FRM::RNE, v781, v782);
                            let v1816 = constructor_output_freg(ctx, v1815);
                            let v1817 = Some(v1816);
                            // Rule at src\isa\riscv64\lower.isle line 1803.
                            return v1817;
                        }
                    }
                }
                &Opcode::Fcopysign => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v94 = C::def_inst(ctx, v64.1);
                            if let Some(v95) = v94 {
                                let v96 = &C::inst_data_value(ctx, v95);
                                if let &InstructionData::Unary {
                                    opcode: ref v97,
                                    arg: v98,
                                } = v96 {
                                    if let &Opcode::Splat = v97 {
                                        let v202 = constructor_put_in_vreg(ctx, v64.0);
                                        let v1637 = constructor_put_in_freg(ctx, v98);
                                        let v204 = &constructor_unmasked(ctx);
                                        let v205 = C::vstate_from_type(ctx, v12);
                                        let v1638 = constructor_rv_vfsgnj_vf(ctx, v202, v1637, v204, v205);
                                        let v1639 = constructor_output_vreg(ctx, v1638);
                                        let v1640 = Some(v1639);
                                        // Rule at src\isa\riscv64\lower.isle line 1565.
                                        return v1640;
                                    }
                                }
                            }
                            let v202 = constructor_put_in_vreg(ctx, v64.0);
                            let v203 = constructor_put_in_vreg(ctx, v64.1);
                            let v204 = &constructor_unmasked(ctx);
                            let v205 = C::vstate_from_type(ctx, v12);
                            let v1634 = constructor_rv_vfsgnj_vv(ctx, v202, v203, v204, v205);
                            let v1635 = constructor_output_vreg(ctx, v1634);
                            let v1636 = Some(v1635);
                            // Rule at src\isa\riscv64\lower.isle line 1562.
                            return v1636;
                        }
                        let v1617 = C::ty_supported_float_full(ctx, v3);
                        if let Some(v1618) = v1617 {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v781 = constructor_put_in_freg(ctx, v64.0);
                            let v782 = constructor_put_in_freg(ctx, v64.1);
                            let v1631 = constructor_rv_fsgnj(ctx, v1618, v781, v782);
                            let v1632 = constructor_output_freg(ctx, v1631);
                            let v1633 = Some(v1632);
                            // Rule at src\isa\riscv64\lower.isle line 1559.
                            return v1633;
                        }
                    }
                }
                &Opcode::Fmin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v1843 = constructor_gen_fcmp_mask(ctx, v12, &FloatCC::Ordered, v64.0, v64.1);
                            let v1276 = C::lane_type(ctx, v12);
                            let v1844 = constructor_canonical_nan_u64(ctx, v1276);
                            let v1845 = constructor_imm(ctx, I64, v1844);
                            let v1846 = C::xreg_new(ctx, v1845);
                            let v205 = C::vstate_from_type(ctx, v12);
                            let v1847 = constructor_rv_vmv_vx(ctx, v1846, v205);
                            let v1848 = constructor_put_in_vreg(ctx, v64.0);
                            let v1849 = constructor_put_in_vreg(ctx, v64.1);
                            let v204 = &constructor_unmasked(ctx);
                            let v1850 = constructor_rv_vfmin_vv(ctx, v1848, v1849, v204, v205);
                            let v1851 = constructor_rv_vmerge_vvm(ctx, v1847, v1850, v1843, v205);
                            let v1852 = constructor_output_vreg(ctx, v1851);
                            let v1853 = Some(v1852);
                            // Rule at src\isa\riscv64\lower.isle line 1841.
                            return v1853;
                        }
                        let v1617 = C::ty_supported_float_full(ctx, v3);
                        if let Some(v1618) = v1617 {
                            let v1839 = C::has_zfa(ctx);
                            if v1839 == true {
                                let v64 = C::unpack_value_array_2(ctx, v63);
                                let v781 = constructor_put_in_freg(ctx, v64.0);
                                let v782 = constructor_put_in_freg(ctx, v64.1);
                                let v1840 = constructor_rv_fminm(ctx, v1618, v781, v782);
                                let v1841 = constructor_output_freg(ctx, v1840);
                                let v1842 = Some(v1841);
                                // Rule at src\isa\riscv64\lower.isle line 1831.
                                return v1842;
                            }
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v781 = constructor_put_in_freg(ctx, v64.0);
                            let v782 = constructor_put_in_freg(ctx, v64.1);
                            let v1828 = &constructor_fcmp_to_float_compare(ctx, &FloatCC::Ordered, v1618, v781, v782);
                            let v1829 = constructor_put_in_freg(ctx, v64.0);
                            let v1830 = constructor_put_in_freg(ctx, v64.1);
                            let v1831 = constructor_rv_fadd(ctx, v1618, &FRM::RNE, v1829, v1830);
                            let v1832 = constructor_put_in_freg(ctx, v64.0);
                            let v1833 = constructor_put_in_freg(ctx, v64.1);
                            let v1834 = constructor_rv_fmin(ctx, v1618, v1832, v1833);
                            let v1835 = constructor_float_to_int_compare(ctx, v1828);
                            let v1836 = constructor_gen_select_freg(ctx, v1835, v1834, v1831);
                            let v1837 = constructor_output_freg(ctx, v1836);
                            let v1838 = Some(v1837);
                            // Rule at src\isa\riscv64\lower.isle line 1820.
                            return v1838;
                        }
                    }
                }
                &Opcode::Fmax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v1843 = constructor_gen_fcmp_mask(ctx, v12, &FloatCC::Ordered, v64.0, v64.1);
                            let v1276 = C::lane_type(ctx, v12);
                            let v1844 = constructor_canonical_nan_u64(ctx, v1276);
                            let v1845 = constructor_imm(ctx, I64, v1844);
                            let v1846 = C::xreg_new(ctx, v1845);
                            let v205 = C::vstate_from_type(ctx, v12);
                            let v1847 = constructor_rv_vmv_vx(ctx, v1846, v205);
                            let v1848 = constructor_put_in_vreg(ctx, v64.0);
                            let v1849 = constructor_put_in_vreg(ctx, v64.1);
                            let v204 = &constructor_unmasked(ctx);
                            let v1861 = constructor_rv_vfmax_vv(ctx, v1848, v1849, v204, v205);
                            let v1862 = constructor_rv_vmerge_vvm(ctx, v1847, v1861, v1843, v205);
                            let v1863 = constructor_output_vreg(ctx, v1862);
                            let v1864 = Some(v1863);
                            // Rule at src\isa\riscv64\lower.isle line 1874.
                            return v1864;
                        }
                        let v1617 = C::ty_supported_float_full(ctx, v3);
                        if let Some(v1618) = v1617 {
                            let v1839 = C::has_zfa(ctx);
                            if v1839 == true {
                                let v64 = C::unpack_value_array_2(ctx, v63);
                                let v781 = constructor_put_in_freg(ctx, v64.0);
                                let v782 = constructor_put_in_freg(ctx, v64.1);
                                let v1858 = constructor_rv_fmaxm(ctx, v1618, v781, v782);
                                let v1859 = constructor_output_freg(ctx, v1858);
                                let v1860 = Some(v1859);
                                // Rule at src\isa\riscv64\lower.isle line 1864.
                                return v1860;
                            }
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v781 = constructor_put_in_freg(ctx, v64.0);
                            let v782 = constructor_put_in_freg(ctx, v64.1);
                            let v1828 = &constructor_fcmp_to_float_compare(ctx, &FloatCC::Ordered, v1618, v781, v782);
                            let v1829 = constructor_put_in_freg(ctx, v64.0);
                            let v1830 = constructor_put_in_freg(ctx, v64.1);
                            let v1831 = constructor_rv_fadd(ctx, v1618, &FRM::RNE, v1829, v1830);
                            let v1832 = constructor_put_in_freg(ctx, v64.0);
                            let v1833 = constructor_put_in_freg(ctx, v64.1);
                            let v1854 = constructor_rv_fmax(ctx, v1618, v1832, v1833);
                            let v1835 = constructor_float_to_int_compare(ctx, v1828);
                            let v1855 = constructor_gen_select_freg(ctx, v1835, v1854, v1831);
                            let v1856 = constructor_output_freg(ctx, v1855);
                            let v1857 = Some(v1856);
                            // Rule at src\isa\riscv64\lower.isle line 1853.
                            return v1857;
                        }
                    }
                }
                &Opcode::Snarrow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v2754 = C::ty_lane_count(ctx, v12);
                            let v2807 = C::u64_udiv(ctx, v2754, 0x2_u64);
                            if let Some(v2808) = v2807 {
                                let v2809 = constructor_u64_to_uimm5(ctx, v2808);
                                if let Some(v2810) = v2809 {
                                    let v2866 = constructor_u64_to_uimm5(ctx, 0x0_u64);
                                    if let Some(v2867) = v2866 {
                                        let v64 = C::unpack_value_array_2(ctx, v63);
                                        let v202 = constructor_put_in_vreg(ctx, v64.0);
                                        let v204 = &constructor_unmasked(ctx);
                                        let v2868 = C::ty_half_lanes(ctx, v12);
                                        let v2869 = v2868?;
                                        let v2870 = C::vstate_from_type(ctx, v2869);
                                        let v2871 = C::vstate_mf2(ctx, v2870);
                                        let v2872 = constructor_rv_vnclip_wi(ctx, v202, v2867, v204, v2871);
                                        let v2873 = constructor_put_in_vreg(ctx, v64.1);
                                        let v2874 = constructor_rv_vnclip_wi(ctx, v2873, v2867, v204, v2871);
                                        let v205 = C::vstate_from_type(ctx, v12);
                                        let v2875 = constructor_rv_vslideup_vvi(ctx, v2872, v2874, v2810, v204, v205);
                                        let v2876 = constructor_output_vreg(ctx, v2875);
                                        let v2877 = Some(v2876);
                                        // Rule at src\isa\riscv64\lower.isle line 2996.
                                        return v2877;
                                    }
                                }
                            }
                        }
                    }
                }
                &Opcode::Unarrow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v2754 = C::ty_lane_count(ctx, v12);
                            let v2807 = C::u64_udiv(ctx, v2754, 0x2_u64);
                            if let Some(v2808) = v2807 {
                                let v2809 = constructor_u64_to_uimm5(ctx, v2808);
                                if let Some(v2810) = v2809 {
                                    let v2866 = constructor_u64_to_uimm5(ctx, 0x0_u64);
                                    if let Some(v2867) = v2866 {
                                        let v64 = C::unpack_value_array_2(ctx, v63);
                                        let v202 = constructor_put_in_vreg(ctx, v64.0);
                                        let v1874 = C::zero_reg(ctx);
                                        let v204 = &constructor_unmasked(ctx);
                                        let v2865 = C::value_type(ctx, v64.0);
                                        let v2883 = C::vstate_from_type(ctx, v2865);
                                        let v2884 = constructor_rv_vmax_vx(ctx, v202, v1874, v204, v2883);
                                        let v2814 = constructor_put_in_vreg(ctx, v64.1);
                                        let v2885 = C::zero_reg(ctx);
                                        let v2886 = constructor_rv_vmax_vx(ctx, v2814, v2885, v204, v2883);
                                        let v2868 = C::ty_half_lanes(ctx, v12);
                                        let v2869 = v2868?;
                                        let v2870 = C::vstate_from_type(ctx, v2869);
                                        let v2871 = C::vstate_mf2(ctx, v2870);
                                        let v2887 = constructor_rv_vnclipu_wi(ctx, v2884, v2867, v204, v2871);
                                        let v2888 = constructor_rv_vnclipu_wi(ctx, v2886, v2867, v204, v2871);
                                        let v205 = C::vstate_from_type(ctx, v12);
                                        let v2889 = constructor_rv_vslideup_vvi(ctx, v2887, v2888, v2810, v204, v205);
                                        let v2890 = constructor_output_vreg(ctx, v2889);
                                        let v2891 = Some(v2890);
                                        // Rule at src\isa\riscv64\lower.isle line 3018.
                                        return v2891;
                                    }
                                }
                            }
                        }
                    }
                }
                &Opcode::Uunarrow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v2754 = C::ty_lane_count(ctx, v12);
                            let v2807 = C::u64_udiv(ctx, v2754, 0x2_u64);
                            if let Some(v2808) = v2807 {
                                let v2809 = constructor_u64_to_uimm5(ctx, v2808);
                                if let Some(v2810) = v2809 {
                                    let v2866 = constructor_u64_to_uimm5(ctx, 0x0_u64);
                                    if let Some(v2867) = v2866 {
                                        let v64 = C::unpack_value_array_2(ctx, v63);
                                        let v202 = constructor_put_in_vreg(ctx, v64.0);
                                        let v204 = &constructor_unmasked(ctx);
                                        let v2868 = C::ty_half_lanes(ctx, v12);
                                        let v2869 = v2868?;
                                        let v2870 = C::vstate_from_type(ctx, v2869);
                                        let v2871 = C::vstate_mf2(ctx, v2870);
                                        let v2878 = constructor_rv_vnclipu_wi(ctx, v202, v2867, v204, v2871);
                                        let v2873 = constructor_put_in_vreg(ctx, v64.1);
                                        let v2879 = constructor_rv_vnclipu_wi(ctx, v2873, v2867, v204, v2871);
                                        let v205 = C::vstate_from_type(ctx, v12);
                                        let v2880 = constructor_rv_vslideup_vvi(ctx, v2878, v2879, v2810, v204, v205);
                                        let v2881 = constructor_output_vreg(ctx, v2880);
                                        let v2882 = Some(v2881);
                                        // Rule at src\isa\riscv64\lower.isle line 3005.
                                        return v2882;
                                    }
                                }
                            }
                        }
                    }
                }
                &Opcode::IaddPairwise => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v2754 = C::ty_lane_count(ctx, v12);
                            let v2807 = C::u64_udiv(ctx, v2754, 0x2_u64);
                            if let Some(v2808) = v2807 {
                                let v2809 = constructor_u64_to_uimm5(ctx, v2808);
                                if let Some(v2810) = v2809 {
                                    let v2811 = constructor_gen_vec_mask(ctx, 0x5555555555555555_u64);
                                    let v64 = C::unpack_value_array_2(ctx, v63);
                                    let v2812 = constructor_put_in_vreg(ctx, v64.0);
                                    let v205 = C::vstate_from_type(ctx, v12);
                                    let v2813 = constructor_rv_vcompress_vm(ctx, v2812, v2811, v205);
                                    let v2814 = constructor_put_in_vreg(ctx, v64.1);
                                    let v2815 = constructor_rv_vcompress_vm(ctx, v2814, v2811, v205);
                                    let v204 = &constructor_unmasked(ctx);
                                    let v2816 = constructor_rv_vslideup_vvi(ctx, v2813, v2815, v2810, v204, v205);
                                    let v2818 = constructor_gen_vec_mask(ctx, 0xaaaaaaaaaaaaaaaa_u64);
                                    let v2819 = constructor_put_in_vreg(ctx, v64.0);
                                    let v2820 = constructor_rv_vcompress_vm(ctx, v2819, v2818, v205);
                                    let v2821 = constructor_put_in_vreg(ctx, v64.1);
                                    let v2822 = constructor_rv_vcompress_vm(ctx, v2821, v2818, v205);
                                    let v2823 = constructor_rv_vslideup_vvi(ctx, v2820, v2822, v2810, v204, v205);
                                    let v2824 = constructor_rv_vadd_vv(ctx, v2816, v2823, v204, v205);
                                    let v2825 = constructor_output_vreg(ctx, v2824);
                                    let v2826 = Some(v2825);
                                    // Rule at src\isa\riscv64\lower.isle line 2925.
                                    return v2826;
                                }
                            }
                        }
                    }
                }
                &Opcode::Iconcat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v64 = C::unpack_value_array_2(ctx, v63);
                            let v67 = constructor_put_in_xreg(ctx, v64.0);
                            let v68 = constructor_put_in_xreg(ctx, v64.1);
                            let v1993 = C::xreg_to_reg(ctx, v67);
                            let v1994 = C::xreg_to_reg(ctx, v68);
                            let v1995 = C::value_regs(ctx, v1993, v1994);
                            let v1996 = C::output(ctx, v1995);
                            let v1997 = Some(v1996);
                            // Rule at src\isa\riscv64\lower.isle line 1969.
                            return v1997;
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::BinaryImm8 {
            opcode: ref v2590,
            arg: v2591,
            imm: v2592,
        } => {
            if let &Opcode::Extractlane = v2590 {
                let v2595 = constructor_put_in_vreg(ctx, v2591);
                let v2593 = C::value_type(ctx, v2591);
                let v2594 = C::u8_from_uimm8(ctx, v2592);
                let v2596 = constructor_gen_extractlane(ctx, v2593, v2595, v2594);
                let v2597 = constructor_output_reg(ctx, v2596);
                let v2598 = Some(v2597);
                // Rule at src\isa\riscv64\lower.isle line 2685.
                return v2598;
            }
        }
        &InstructionData::Call {
            opcode: ref v2566,
            args: v2567,
            func_ref: v2568,
        } => {
            match v2566 {
                &Opcode::Call => {
                    let v2570 = C::func_ref_data(ctx, v2568);
                    let v2569 = C::value_list_slice(ctx, v2567);
                    let v2574 = C::gen_call(ctx, v2570.0, v2570.1, v2570.2, v2569);
                    let v2575 = Some(v2574);
                    // Rule at src\isa\riscv64\lower.isle line 2668.
                    return v2575;
                }
                &Opcode::ReturnCall => {
                    let v2570 = C::func_ref_data(ctx, v2568);
                    let v2569 = C::value_list_slice(ctx, v2567);
                    let v2586 = C::gen_return_call(ctx, v2570.0, v2570.1, v2570.2, v2569);
                    let v2587 = Some(v2586);
                    // Rule at src\isa\riscv64\lower.isle line 2676.
                    return v2587;
                }
                _ => {}
            }
        }
        &InstructionData::CallIndirect {
            opcode: ref v2576,
            args: v2577,
            sig_ref: v2578,
        } => {
            match v2576 {
                &Opcode::CallIndirect => {
                    let v2579 = C::value_list_slice(ctx, v2577);
                    let v2580 = C::value_slice_unwrap(ctx, v2579);
                    if let Some(v2581) = v2580 {
                        let v2584 = C::gen_call_indirect(ctx, v2578, v2581.0, v2581.1);
                        let v2585 = Some(v2584);
                        // Rule at src\isa\riscv64\lower.isle line 2671.
                        return v2585;
                    }
                }
                &Opcode::ReturnCallIndirect => {
                    let v2579 = C::value_list_slice(ctx, v2577);
                    let v2580 = C::value_slice_unwrap(ctx, v2579);
                    if let Some(v2581) = v2580 {
                        let v2588 = C::gen_return_call_indirect(ctx, v2578, v2581.0, v2581.1);
                        let v2589 = Some(v2588);
                        // Rule at src\isa\riscv64\lower.isle line 2679.
                        return v2589;
                    }
                }
                _ => {}
            }
        }
        &InstructionData::CondTrap {
            opcode: ref v2115,
            arg: v2116,
            code: ref v2117,
        } => {
            match v2115 {
                &Opcode::Trapz => {
                    let v2128 = C::def_inst(ctx, v2116);
                    if let Some(v2129) = v2128 {
                        let v2130 = &C::inst_data_value(ctx, v2129);
                        if let &InstructionData::IntCompare {
                            opcode: ref v2131,
                            args: ref v2132,
                            cond: ref v2133,
                        } = v2130 {
                            if let &Opcode::Icmp = v2131 {
                                let v2134 = C::unpack_value_array_2(ctx, v2132);
                                let v2137 = C::value_type(ctx, v2134.0);
                                let v2138 = C::fits_in_64(ctx, v2137);
                                if let Some(v2139) = v2138 {
                                    let v2140 = &C::intcc_complement(ctx, v2133);
                                    let v2141 = constructor_put_in_xreg(ctx, v2134.0);
                                    let v2142 = constructor_put_in_xreg(ctx, v2134.1);
                                    let v2143 = constructor_gen_trapif(ctx, v2140, v2141, v2142, v2117);
                                    let v2144 = Some(v2143);
                                    // Rule at src\isa\riscv64\lower.isle line 2090.
                                    return v2144;
                                }
                            }
                        }
                    }
                    let v2118 = C::value_type(ctx, v2116);
                    if v2118 == I128 {
                        let v2125 = C::put_in_regs(ctx, v2116);
                        let v2126 = constructor_gen_trapif_val_i128(ctx, &ZeroCond::Zero, v2125, v2117);
                        let v2127 = Some(v2126);
                        // Rule at src\isa\riscv64\lower.isle line 2085.
                        return v2127;
                    }
                    let v2119 = C::fits_in_64(ctx, v2118);
                    if let Some(v2120) = v2119 {
                        let v2121 = constructor_put_in_xreg(ctx, v2116);
                        let v2122 = constructor_gen_trapz(ctx, v2121, v2117);
                        let v2123 = Some(v2122);
                        // Rule at src\isa\riscv64\lower.isle line 2082.
                        return v2123;
                    }
                }
                &Opcode::Trapnz => {
                    let v2128 = C::def_inst(ctx, v2116);
                    if let Some(v2129) = v2128 {
                        let v2130 = &C::inst_data_value(ctx, v2129);
                        if let &InstructionData::IntCompare {
                            opcode: ref v2131,
                            args: ref v2132,
                            cond: ref v2133,
                        } = v2130 {
                            if let &Opcode::Icmp = v2131 {
                                let v2134 = C::unpack_value_array_2(ctx, v2132);
                                let v2137 = C::value_type(ctx, v2134.0);
                                let v2138 = C::fits_in_64(ctx, v2137);
                                if let Some(v2139) = v2138 {
                                    let v2150 = constructor_put_in_xreg(ctx, v2134.0);
                                    let v2151 = constructor_put_in_xreg(ctx, v2134.1);
                                    let v2152 = constructor_gen_trapif(ctx, v2133, v2150, v2151, v2117);
                                    let v2153 = Some(v2152);
                                    // Rule at src\isa\riscv64\lower.isle line 2103.
                                    return v2153;
                                }
                            }
                        }
                    }
                    let v2118 = C::value_type(ctx, v2116);
                    if v2118 == I128 {
                        let v2125 = C::put_in_regs(ctx, v2116);
                        let v2148 = constructor_gen_trapif_val_i128(ctx, &ZeroCond::NonZero, v2125, v2117);
                        let v2149 = Some(v2148);
                        // Rule at src\isa\riscv64\lower.isle line 2098.
                        return v2149;
                    }
                    let v2119 = C::fits_in_64(ctx, v2118);
                    if let Some(v2120) = v2119 {
                        let v2121 = constructor_put_in_xreg(ctx, v2116);
                        let v2145 = constructor_gen_trapnz(ctx, v2121, v2117);
                        let v2146 = Some(v2145);
                        // Rule at src\isa\riscv64\lower.isle line 2095.
                        return v2146;
                    }
                }
                _ => {}
            }
        }
        &InstructionData::FloatCompare {
            opcode: ref v2298,
            args: ref v2299,
            cond: ref v2300,
        } => {
            if let &Opcode::Fcmp = v2298 {
                let v2301 = C::unpack_value_array_2(ctx, v2299);
                let v2304 = C::value_type(ctx, v2301.0);
                let v2313 = C::ty_supported_vec(ctx, v2304);
                if let Some(v2314) = v2313 {
                    let v2315 = constructor_gen_fcmp_mask(ctx, v2314, v2300, v2301.0, v2301.1);
                    let v2316 = constructor_gen_expand_mask(ctx, v2314, v2315);
                    let v2317 = constructor_output_vreg(ctx, v2316);
                    let v2318 = Some(v2317);
                    // Rule at src\isa\riscv64\lower.isle line 2374.
                    return v2318;
                }
                let v2305 = C::ty_supported_float_full(ctx, v2304);
                if let Some(v2306) = v2305 {
                    let v2307 = constructor_put_in_freg(ctx, v2301.0);
                    let v2308 = constructor_put_in_freg(ctx, v2301.1);
                    let v2309 = &constructor_fcmp_to_float_compare(ctx, v2300, v2306, v2307, v2308);
                    let v2310 = constructor_lower_float_compare(ctx, v2309);
                    let v2311 = constructor_output_xreg(ctx, v2310);
                    let v2312 = Some(v2311);
                    // Rule at src\isa\riscv64\lower.isle line 2367.
                    return v2312;
                }
            }
        }
        &InstructionData::FuncAddr {
            opcode: ref v2319,
            func_ref: v2320,
        } => {
            if let &Opcode::FuncAddr = v2319 {
                let v2321 = C::func_ref_data(ctx, v2320);
                let v2326 = C::load_ext_name(ctx, v2321.1, 0_i64);
                let v2327 = constructor_output_reg(ctx, v2326);
                let v2328 = Some(v2327);
                // Rule at src\isa\riscv64\lower.isle line 2379.
                return v2328;
            }
        }
        &InstructionData::IntAddTrap {
            opcode: ref v454,
            args: ref v455,
            code: ref v456,
        } => {
            if let &Opcode::UaddOverflowTrap = v454 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    if v3 == I64 {
                        let v457 = C::unpack_value_array_2(ctx, v455);
                        let v470 = constructor_put_in_xreg(ctx, v457.0);
                        let v471 = constructor_put_in_xreg(ctx, v457.1);
                        let v472 = constructor_rv_add(ctx, v470, v471);
                        let v474 = constructor_put_in_xreg(ctx, v457.0);
                        let v475 = constructor_gen_trapif(ctx, &IntCC::UnsignedLessThan, v472, v474, v456);
                        let v476 = constructor_output_xreg(ctx, v472);
                        let v477 = Some(v476);
                        // Rule at src\isa\riscv64\lower.isle line 317.
                        return v477;
                    }
                    let v58 = C::fits_in_32(ctx, v3);
                    if let Some(v59) = v58 {
                        let v457 = C::unpack_value_array_2(ctx, v455);
                        let v460 = constructor_zext(ctx, v457.0);
                        let v461 = constructor_zext(ctx, v457.1);
                        let v462 = constructor_rv_add(ctx, v460, v461);
                        let v463 = C::ty_bits(ctx, v59);
                        let v464 = C::u8_as_i32(ctx, v463);
                        let v465 = C::imm12_const(ctx, v464);
                        let v466 = constructor_rv_srli(ctx, v462, v465);
                        let v467 = constructor_gen_trapnz(ctx, v466, v456);
                        let v468 = constructor_output_xreg(ctx, v462);
                        let v469 = Some(v468);
                        // Rule at src\isa\riscv64\lower.isle line 309.
                        return v469;
                    }
                }
            }
        }
        &InstructionData::IntCompare {
            opcode: ref v2275,
            args: ref v2276,
            cond: ref v2277,
        } => {
            if let &Opcode::Icmp = v2275 {
                let v2278 = C::unpack_value_array_2(ctx, v2276);
                let v2281 = C::value_type(ctx, v2278.0);
                let v2292 = C::ty_supported_vec(ctx, v2281);
                if let Some(v2293) = v2292 {
                    let v2294 = constructor_gen_icmp_mask(ctx, v2293, v2277, v2278.0, v2278.1);
                    let v2295 = constructor_gen_expand_mask(ctx, v2293, v2294);
                    let v2296 = constructor_output_vreg(ctx, v2295);
                    let v2297 = Some(v2296);
                    // Rule at src\isa\riscv64\lower.isle line 2363.
                    return v2297;
                }
                if v2281 == I128 {
                    let v2287 = C::put_in_regs(ctx, v2278.0);
                    let v2288 = C::put_in_regs(ctx, v2278.1);
                    let v2289 = constructor_lower_icmp_i128(ctx, v2277, v2287, v2288);
                    let v2290 = constructor_output_xreg(ctx, v2289);
                    let v2291 = Some(v2290);
                    // Rule at src\isa\riscv64\lower.isle line 2318.
                    return v2291;
                }
                let v2282 = C::fits_in_64(ctx, v2281);
                if let Some(v2283) = v2282 {
                    let v2284 = constructor_lower_icmp(ctx, v2277, v2278.0, v2278.1);
                    let v2285 = constructor_output_xreg(ctx, v2284);
                    let v2286 = Some(v2285);
                    // Rule at src\isa\riscv64\lower.isle line 2229.
                    return v2286;
                }
            }
        }
        &InstructionData::Load {
            opcode: ref v2154,
            arg: v2155,
            flags: v2156,
            offset: v2157,
        } => {
            match v2154 {
                &Opcode::Load => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v2158 = C::offset32_to_i32(ctx, v2157);
                            let v2159 = constructor_amode(ctx, v2155, v2158);
                            let v2202 = &constructor_element_width_from_type(ctx, v12);
                            let v2203 = VecAMode::UnitStride {
                                base: v2159,
                            };
                            let v204 = &constructor_unmasked(ctx);
                            let v205 = C::vstate_from_type(ctx, v12);
                            let v2204 = constructor_vec_load(ctx, v2202, &v2203, v2156, v204, v205);
                            let v2205 = constructor_output_reg(ctx, v2204);
                            let v2206 = Some(v2205);
                            // Rule at src\isa\riscv64\lower.isle line 2140.
                            return v2206;
                        }
                        let v754 = C::ty_reg_pair(ctx, v3);
                        if let Some(v755) = v754 {
                            let v2158 = C::offset32_to_i32(ctx, v2157);
                            let v2189 = C::s32_add_fallible(ctx, v2158, 8_i32);
                            if let Some(v2190) = v2189 {
                                let v2159 = constructor_amode(ctx, v2155, v2158);
                                let v2192 = constructor_gen_load(ctx, v2159, &LoadOP::Ld, v2156);
                                let v2193 = C::xreg_new(ctx, v2192);
                                let v2194 = constructor_amode(ctx, v2155, v2190);
                                let v2195 = constructor_gen_load(ctx, v2194, &LoadOP::Ld, v2156);
                                let v2196 = C::xreg_new(ctx, v2195);
                                let v2197 = C::xreg_to_reg(ctx, v2193);
                                let v2198 = C::xreg_to_reg(ctx, v2196);
                                let v2199 = C::value_regs(ctx, v2197, v2198);
                                let v2200 = C::output(ctx, v2199);
                                let v2201 = Some(v2200);
                                // Rule at src\isa\riscv64\lower.isle line 2134.
                                return v2201;
                            }
                        }
                        let v2158 = C::offset32_to_i32(ctx, v2157);
                        let v2159 = constructor_amode(ctx, v2155, v2158);
                        let v2184 = &C::load_op(ctx, v3);
                        let v2185 = constructor_gen_load(ctx, v2159, v2184, v2156);
                        let v2186 = constructor_output_reg(ctx, v2185);
                        let v2187 = Some(v2186);
                        // Rule at src\isa\riscv64\lower.isle line 2131.
                        return v2187;
                    }
                }
                &Opcode::Uload8 => {
                    let v2158 = C::offset32_to_i32(ctx, v2157);
                    let v2159 = constructor_amode(ctx, v2155, v2158);
                    let v2161 = constructor_gen_load(ctx, v2159, &LoadOP::Lbu, v2156);
                    let v2162 = constructor_output_reg(ctx, v2161);
                    let v2163 = Some(v2162);
                    // Rule at src\isa\riscv64\lower.isle line 2107.
                    return v2163;
                }
                &Opcode::Sload8 => {
                    let v2158 = C::offset32_to_i32(ctx, v2157);
                    let v2159 = constructor_amode(ctx, v2155, v2158);
                    let v2165 = constructor_gen_load(ctx, v2159, &LoadOP::Lb, v2156);
                    let v2166 = constructor_output_reg(ctx, v2165);
                    let v2167 = Some(v2166);
                    // Rule at src\isa\riscv64\lower.isle line 2111.
                    return v2167;
                }
                &Opcode::Uload16 => {
                    let v2158 = C::offset32_to_i32(ctx, v2157);
                    let v2159 = constructor_amode(ctx, v2155, v2158);
                    let v2169 = constructor_gen_load(ctx, v2159, &LoadOP::Lhu, v2156);
                    let v2170 = constructor_output_reg(ctx, v2169);
                    let v2171 = Some(v2170);
                    // Rule at src\isa\riscv64\lower.isle line 2115.
                    return v2171;
                }
                &Opcode::Sload16 => {
                    let v2158 = C::offset32_to_i32(ctx, v2157);
                    let v2159 = constructor_amode(ctx, v2155, v2158);
                    let v2173 = constructor_gen_load(ctx, v2159, &LoadOP::Lh, v2156);
                    let v2174 = constructor_output_reg(ctx, v2173);
                    let v2175 = Some(v2174);
                    // Rule at src\isa\riscv64\lower.isle line 2119.
                    return v2175;
                }
                &Opcode::Uload32 => {
                    let v2158 = C::offset32_to_i32(ctx, v2157);
                    let v2159 = constructor_amode(ctx, v2155, v2158);
                    let v2177 = constructor_gen_load(ctx, v2159, &LoadOP::Lwu, v2156);
                    let v2178 = constructor_output_reg(ctx, v2177);
                    let v2179 = Some(v2178);
                    // Rule at src\isa\riscv64\lower.isle line 2123.
                    return v2179;
                }
                &Opcode::Sload32 => {
                    let v2158 = C::offset32_to_i32(ctx, v2157);
                    let v2159 = constructor_amode(ctx, v2155, v2158);
                    let v2181 = constructor_gen_load(ctx, v2159, &LoadOP::Lw, v2156);
                    let v2182 = constructor_output_reg(ctx, v2181);
                    let v2183 = Some(v2182);
                    // Rule at src\isa\riscv64\lower.isle line 2127.
                    return v2183;
                }
                &Opcode::Uload8x8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            if v12 == I16X8 {
                                let v2158 = C::offset32_to_i32(ctx, v2157);
                                let v2159 = constructor_amode(ctx, v2155, v2158);
                                let v2208 = constructor_gen_load64_extend(ctx, v12, &ExtendOp::Zero, v2156, v2159);
                                let v2209 = constructor_output_vreg(ctx, v2208);
                                let v2210 = Some(v2209);
                                // Rule at src\isa\riscv64\lower.isle line 2167.
                                return v2210;
                            }
                        }
                    }
                }
                &Opcode::Sload8x8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            if v12 == I16X8 {
                                let v2158 = C::offset32_to_i32(ctx, v2157);
                                let v2159 = constructor_amode(ctx, v2155, v2158);
                                let v2212 = constructor_gen_load64_extend(ctx, v12, &ExtendOp::Signed, v2156, v2159);
                                let v2213 = constructor_output_vreg(ctx, v2212);
                                let v2214 = Some(v2213);
                                // Rule at src\isa\riscv64\lower.isle line 2179.
                                return v2214;
                            }
                        }
                    }
                }
                &Opcode::Uload16x4 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            if v12 == I32X4 {
                                let v2158 = C::offset32_to_i32(ctx, v2157);
                                let v2159 = constructor_amode(ctx, v2155, v2158);
                                let v2208 = constructor_gen_load64_extend(ctx, v12, &ExtendOp::Zero, v2156, v2159);
                                let v2209 = constructor_output_vreg(ctx, v2208);
                                let v2210 = Some(v2209);
                                // Rule at src\isa\riscv64\lower.isle line 2171.
                                return v2210;
                            }
                        }
                    }
                }
                &Opcode::Sload16x4 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            if v12 == I32X4 {
                                let v2158 = C::offset32_to_i32(ctx, v2157);
                                let v2159 = constructor_amode(ctx, v2155, v2158);
                                let v2212 = constructor_gen_load64_extend(ctx, v12, &ExtendOp::Signed, v2156, v2159);
                                let v2213 = constructor_output_vreg(ctx, v2212);
                                let v2214 = Some(v2213);
                                // Rule at src\isa\riscv64\lower.isle line 2183.
                                return v2214;
                            }
                        }
                    }
                }
                &Opcode::Uload32x2 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            if v12 == I64X2 {
                                let v2158 = C::offset32_to_i32(ctx, v2157);
                                let v2159 = constructor_amode(ctx, v2155, v2158);
                                let v2208 = constructor_gen_load64_extend(ctx, v12, &ExtendOp::Zero, v2156, v2159);
                                let v2209 = constructor_output_vreg(ctx, v2208);
                                let v2210 = Some(v2209);
                                // Rule at src\isa\riscv64\lower.isle line 2175.
                                return v2210;
                            }
                        }
                    }
                }
                &Opcode::Sload32x2 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            if v12 == I64X2 {
                                let v2158 = C::offset32_to_i32(ctx, v2157);
                                let v2159 = constructor_amode(ctx, v2155, v2158);
                                let v2212 = constructor_gen_load64_extend(ctx, v12, &ExtendOp::Signed, v2156, v2159);
                                let v2213 = constructor_output_vreg(ctx, v2212);
                                let v2214 = Some(v2213);
                                // Rule at src\isa\riscv64\lower.isle line 2187.
                                return v2214;
                            }
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::LoadNoOffset {
            opcode: ref v1715,
            arg: v1716,
            flags: v1717,
        } => {
            match v1715 {
                &Opcode::Bitcast => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v754 = C::ty_reg_pair(ctx, v3);
                        if let Some(v755) = v754 {
                            let v2444 = C::value_type(ctx, v1716);
                            let v2445 = C::ty_supported_vec(ctx, v2444);
                            if let Some(v2446) = v2445 {
                                let v2448 = constructor_put_in_vreg(ctx, v1716);
                                let v2450 = constructor_gen_extractlane(ctx, I64X2, v2448, 0x0_u8);
                                let v2451 = constructor_put_in_vreg(ctx, v1716);
                                let v2452 = constructor_gen_extractlane(ctx, I64X2, v2451, 0x1_u8);
                                let v2453 = C::value_regs(ctx, v2450, v2452);
                                let v2454 = C::output(ctx, v2453);
                                let v2455 = Some(v2454);
                                // Rule at src\isa\riscv64\lower.isle line 2550.
                                return v2455;
                            }
                        }
                        let v2444 = C::value_type(ctx, v1716);
                        let v2456 = C::ty_reg_pair(ctx, v2444);
                        if let Some(v2457) = v2456 {
                            let v11 = C::ty_supported_vec(ctx, v3);
                            if let Some(v12) = v11 {
                                let v2458 = C::put_in_regs(ctx, v1716);
                                let v2459 = C::value_regs_get(ctx, v2458, 0x0_usize);
                                let v2460 = C::xreg_new(ctx, v2459);
                                let v2461 = C::put_in_regs(ctx, v1716);
                                let v2462 = C::value_regs_get(ctx, v2461, 0x1_usize);
                                let v2463 = C::xreg_new(ctx, v2462);
                                let v2464 = C::vstate_from_type(ctx, I64X2);
                                let v2465 = constructor_rv_vmv_sx(ctx, v2463, v2464);
                                let v204 = &constructor_unmasked(ctx);
                                let v2466 = constructor_rv_vslide1up_vx(ctx, v2465, v2465, v2460, v204, v2464);
                                let v2467 = constructor_output_vreg(ctx, v2466);
                                let v2468 = Some(v2467);
                                // Rule at src\isa\riscv64\lower.isle line 2557.
                                return v2468;
                            }
                            if let Some(v755) = v754 {
                                let v2469 = constructor_output_value(ctx, v1716);
                                let v2470 = Some(v2469);
                                // Rule at src\isa\riscv64\lower.isle line 2566.
                                return v2470;
                            }
                        }
                        let v1718 = C::put_in_reg(ctx, v1716);
                        let v2471 = constructor_gen_bitcast(ctx, v1718, v2444, v3);
                        let v2472 = constructor_output_reg(ctx, v2471);
                        let v2473 = Some(v2472);
                        // Rule at src\isa\riscv64\lower.isle line 2569.
                        return v2473;
                    }
                }
                &Opcode::AtomicLoad => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1666 = C::valid_atomic_transaction(ctx, v3);
                        if let Some(v1667) = v1666 {
                            let v1718 = C::put_in_reg(ctx, v1716);
                            let v1719 = constructor_gen_atomic_load(ctx, v1718, v1667);
                            let v1720 = constructor_output_reg(ctx, v1719);
                            let v1721 = Some(v1720);
                            // Rule at src\isa\riscv64\lower.isle line 1694.
                            return v1721;
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::MultiAry {
            opcode: ref v2542,
            args: v2543,
        } => {
            if let &Opcode::Return = v2542 {
                let v2544 = C::value_list_slice(ctx, v2543);
                let v2545 = constructor_lower_return(ctx, v2544);
                let v2546 = Some(v2545);
                // Rule at src\isa\riscv64\lower.isle line 2633.
                return v2546;
            }
        }
        &InstructionData::NullAry {
            opcode: ref v2101,
        } => {
            match v2101 {
                &Opcode::Debugtrap => {
                    let v2103 = SideEffectNoResult::Inst {
                        inst: MInst::EBreak,
                    };
                    let v2104 = constructor_side_effect(ctx, &v2103);
                    let v2105 = Some(v2104);
                    // Rule at src\isa\riscv64\lower.isle line 2067.
                    return v2105;
                }
                &Opcode::GetFramePointer => {
                    let v2547 = C::fp_reg(ctx);
                    let v2548 = constructor_gen_mov_from_preg(ctx, v2547);
                    let v2549 = constructor_output_reg(ctx, v2548);
                    let v2550 = Some(v2549);
                    // Rule at src\isa\riscv64\lower.isle line 2638.
                    return v2550;
                }
                &Opcode::GetStackPointer => {
                    let v2551 = C::sp_reg(ctx);
                    let v2552 = constructor_gen_mov_from_preg(ctx, v2551);
                    let v2553 = constructor_output_reg(ctx, v2552);
                    let v2554 = Some(v2553);
                    // Rule at src\isa\riscv64\lower.isle line 2641.
                    return v2554;
                }
                &Opcode::GetReturnAddress => {
                    let v2555 = C::load_ra(ctx);
                    let v2556 = constructor_output_reg(ctx, v2555);
                    let v2557 = Some(v2556);
                    // Rule at src\isa\riscv64\lower.isle line 2644.
                    return v2557;
                }
                &Opcode::Fence => {
                    let v2107 = MInst::Fence {
                        pred: 0xf,
                        succ: 0xf,
                    };
                    let v2108 = SideEffectNoResult::Inst {
                        inst: v2107,
                    };
                    let v2109 = constructor_side_effect(ctx, &v2108);
                    let v2110 = Some(v2109);
                    // Rule at src\isa\riscv64\lower.isle line 2072.
                    return v2110;
                }
                _ => {}
            }
        }
        &InstructionData::Shuffle {
            opcode: ref v2726,
            args: ref v2727,
            imm: v2728,
        } => {
            if let &Opcode::Shuffle = v2726 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v11 = C::ty_supported_vec(ctx, v3);
                    if let Some(v12) = v11 {
                        if v12 == I8X16 {
                            let v2732 = C::vconst_from_immediate(ctx, v2728);
                            if let Some(v2733) = v2732 {
                                let v2735 = C::i8_to_imm5(ctx, -16_i8);
                                if let Some(v2736) = v2735 {
                                    let v2737 = constructor_gen_constant(ctx, v12, v2733);
                                    let v2729 = C::unpack_value_array_2(ctx, v2727);
                                    let v2738 = constructor_put_in_vreg(ctx, v2729.0);
                                    let v204 = &constructor_unmasked(ctx);
                                    let v205 = C::vstate_from_type(ctx, v12);
                                    let v2739 = constructor_rv_vrgather_vv(ctx, v2738, v2737, v204, v205);
                                    let v2740 = constructor_rv_vadd_vi(ctx, v2737, v2736, v204, v205);
                                    let v2741 = constructor_put_in_vreg(ctx, v2729.1);
                                    let v2742 = constructor_rv_vrgather_vv(ctx, v2741, v2740, v204, v205);
                                    let v2743 = constructor_rv_vor_vv(ctx, v2739, v2742, v204, v205);
                                    let v2744 = constructor_output_vreg(ctx, v2743);
                                    let v2745 = Some(v2744);
                                    // Rule at src\isa\riscv64\lower.isle line 2852.
                                    return v2745;
                                }
                            }
                        }
                    }
                }
            }
        }
        &InstructionData::StackLoad {
            opcode: ref v1865,
            stack_slot: v1866,
            offset: v1867,
        } => {
            if let &Opcode::StackAddr = v1865 {
                let v1868 = C::gen_stack_addr(ctx, v1866, v1867);
                let v1869 = constructor_output_reg(ctx, v1868);
                let v1870 = Some(v1869);
                // Rule at src\isa\riscv64\lower.isle line 1883.
                return v1870;
            }
        }
        &InstructionData::Store {
            opcode: ref v2215,
            args: ref v2216,
            flags: v2217,
            offset: v2218,
        } => {
            match v2215 {
                &Opcode::Store => {
                    let v786 = C::has_zfhmin(ctx);
                    if v786 == false {
                        let v2219 = C::unpack_value_array_2(ctx, v2216);
                        let v2258 = C::def_inst(ctx, v2219.0);
                        if let Some(v2259) = v2258 {
                            let v2260 = &C::inst_data_value(ctx, v2259);
                            if let &InstructionData::Load {
                                opcode: ref v2261,
                                arg: v2262,
                                flags: v2263,
                                offset: v2264,
                            } = v2260 {
                                if let &Opcode::Load = v2261 {
                                    let v2265 = C::sinkable_inst(ctx, v2219.0);
                                    if let Some(v2266) = v2265 {
                                        let v2267 = C::first_result(ctx, v2266);
                                        if let Some(v2268) = v2267 {
                                            let v2269 = C::value_type(ctx, v2268);
                                            if v2269 == F16 {
                                                let v2222 = C::offset32_to_i32(ctx, v2218);
                                                let v2223 = constructor_amode(ctx, v2219.1, v2222);
                                                let v2270 = C::offset32_to_i32(ctx, v2264);
                                                let v2271 = constructor_amode(ctx, v2262, v2270);
                                                let v2272 = constructor_gen_sunk_load(ctx, v2266, v2271, &LoadOP::Lh, v2263);
                                                let v2273 = constructor_rv_store(ctx, v2223, &StoreOP::Sh, v2217, v2272);
                                                let v2274 = Some(v2273);
                                                // Rule at src\isa\riscv64\lower.isle line 2218.
                                                return v2274;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    let v2219 = C::unpack_value_array_2(ctx, v2216);
                    let v2234 = C::value_type(ctx, v2219.0);
                    let v2250 = C::ty_supported_vec(ctx, v2234);
                    if let Some(v2251) = v2250 {
                        let v2222 = C::offset32_to_i32(ctx, v2218);
                        let v2223 = constructor_amode(ctx, v2219.1, v2222);
                        let v2254 = constructor_put_in_vreg(ctx, v2219.0);
                        let v2252 = &constructor_element_width_from_type(ctx, v2251);
                        let v2253 = VecAMode::UnitStride {
                            base: v2223,
                        };
                        let v204 = &constructor_unmasked(ctx);
                        let v2255 = C::vstate_from_type(ctx, v2251);
                        let v2256 = constructor_vec_store(ctx, v2252, &v2253, v2254, v2217, v204, v2255);
                        let v2257 = Some(v2256);
                        // Rule at src\isa\riscv64\lower.isle line 2211.
                        return v2257;
                    }
                    let v2237 = C::ty_reg_pair(ctx, v2234);
                    if let Some(v2238) = v2237 {
                        let v2222 = C::offset32_to_i32(ctx, v2218);
                        let v2239 = C::s32_add_fallible(ctx, v2222, 8_i32);
                        if let Some(v2240) = v2239 {
                            let v2223 = constructor_amode(ctx, v2219.1, v2222);
                            let v2242 = C::put_in_regs(ctx, v2219.0);
                            let v2243 = C::value_regs_get(ctx, v2242, 0x0_usize);
                            let v2244 = constructor_rv_store(ctx, v2223, &StoreOP::Sd, v2217, v2243);
                            let v2245 = constructor_amode(ctx, v2219.1, v2240);
                            let v2246 = C::put_in_regs(ctx, v2219.0);
                            let v2247 = C::value_regs_get(ctx, v2246, 0x1_usize);
                            let v2248 = constructor_rv_store(ctx, v2245, &StoreOP::Sd, v2217, v2247);
                            let v2249 = Some(v2248);
                            // Rule at src\isa\riscv64\lower.isle line 2206.
                            return v2249;
                        }
                    }
                    let v2222 = C::offset32_to_i32(ctx, v2218);
                    let v2223 = constructor_amode(ctx, v2219.1, v2222);
                    let v2235 = constructor_gen_store(ctx, v2223, v2217, v2219.0);
                    let v2236 = Some(v2235);
                    // Rule at src\isa\riscv64\lower.isle line 2203.
                    return v2236;
                }
                &Opcode::Istore8 => {
                    let v2219 = C::unpack_value_array_2(ctx, v2216);
                    let v2222 = C::offset32_to_i32(ctx, v2218);
                    let v2223 = constructor_amode(ctx, v2219.1, v2222);
                    let v2225 = C::put_in_reg(ctx, v2219.0);
                    let v2226 = constructor_rv_store(ctx, v2223, &StoreOP::Sb, v2217, v2225);
                    let v2227 = Some(v2226);
                    // Rule at src\isa\riscv64\lower.isle line 2191.
                    return v2227;
                }
                &Opcode::Istore16 => {
                    let v2219 = C::unpack_value_array_2(ctx, v2216);
                    let v2222 = C::offset32_to_i32(ctx, v2218);
                    let v2223 = constructor_amode(ctx, v2219.1, v2222);
                    let v2225 = C::put_in_reg(ctx, v2219.0);
                    let v2229 = constructor_rv_store(ctx, v2223, &StoreOP::Sh, v2217, v2225);
                    let v2230 = Some(v2229);
                    // Rule at src\isa\riscv64\lower.isle line 2195.
                    return v2230;
                }
                &Opcode::Istore32 => {
                    let v2219 = C::unpack_value_array_2(ctx, v2216);
                    let v2222 = C::offset32_to_i32(ctx, v2218);
                    let v2223 = constructor_amode(ctx, v2219.1, v2222);
                    let v2225 = C::put_in_reg(ctx, v2219.0);
                    let v2232 = constructor_rv_store(ctx, v2223, &StoreOP::Sw, v2217, v2225);
                    let v2233 = Some(v2232);
                    // Rule at src\isa\riscv64\lower.isle line 2199.
                    return v2233;
                }
                _ => {}
            }
        }
        &InstructionData::StoreNoOffset {
            opcode: ref v1722,
            args: ref v1723,
            flags: v1724,
        } => {
            if let &Opcode::AtomicStore = v1722 {
                let v1725 = C::unpack_value_array_2(ctx, v1723);
                let v1728 = C::value_type(ctx, v1725.0);
                let v1729 = C::valid_atomic_transaction(ctx, v1728);
                if let Some(v1730) = v1729 {
                    let v1731 = C::put_in_reg(ctx, v1725.1);
                    let v1732 = C::put_in_reg(ctx, v1725.0);
                    let v1733 = constructor_gen_atomic_store(ctx, v1731, v1730, v1732);
                    let v1734 = Some(v1733);
                    // Rule at src\isa\riscv64\lower.isle line 1700.
                    return v1734;
                }
            }
        }
        &InstructionData::Ternary {
            opcode: ref v1641,
            args: ref v1642,
        } => {
            match v1641 {
                &Opcode::Select => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v75 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v76) = v75 {
                            let v1643 = C::unpack_value_array_3(ctx, v1642);
                            let v1871 = C::i64_from_iconst(ctx, v1643.1);
                            if let Some(v1872) = v1871 {
                                if v1872 == 0_i64 {
                                    let v1873 = constructor_is_nonzero_cmp(ctx, v1643.0);
                                    let v1874 = C::zero_reg(ctx);
                                    let v1875 = constructor_put_in_xreg(ctx, v1643.2);
                                    let v1876 = constructor_gen_select_xreg(ctx, v1873, v1874, v1875);
                                    let v1877 = constructor_output_xreg(ctx, v1876);
                                    let v1878 = Some(v1877);
                                    // Rule at src\isa\riscv64\lower.isle line 1892.
                                    return v1878;
                                }
                            }
                            let v1879 = C::i64_from_iconst(ctx, v1643.2);
                            if let Some(v1880) = v1879 {
                                if v1880 == 0_i64 {
                                    let v1873 = constructor_is_nonzero_cmp(ctx, v1643.0);
                                    let v1881 = constructor_put_in_xreg(ctx, v1643.1);
                                    let v1882 = C::zero_reg(ctx);
                                    let v1883 = constructor_gen_select_xreg(ctx, v1873, v1881, v1882);
                                    let v1884 = constructor_output_xreg(ctx, v1883);
                                    let v1885 = Some(v1884);
                                    // Rule at src\isa\riscv64\lower.isle line 1895.
                                    return v1885;
                                }
                            }
                            let v1873 = constructor_is_nonzero_cmp(ctx, v1643.0);
                            let v1881 = constructor_put_in_xreg(ctx, v1643.1);
                            let v1875 = constructor_put_in_xreg(ctx, v1643.2);
                            let v1886 = constructor_gen_select_xreg(ctx, v1873, v1881, v1875);
                            let v1887 = constructor_output_xreg(ctx, v1886);
                            let v1888 = Some(v1887);
                            // Rule at src\isa\riscv64\lower.isle line 1898.
                            return v1888;
                        }
                        let v754 = C::ty_reg_pair(ctx, v3);
                        if let Some(v755) = v754 {
                            let v1643 = C::unpack_value_array_3(ctx, v1642);
                            let v1873 = constructor_is_nonzero_cmp(ctx, v1643.0);
                            let v1889 = C::put_in_regs(ctx, v1643.1);
                            let v1890 = C::put_in_regs(ctx, v1643.2);
                            let v1891 = constructor_gen_select_regs(ctx, v1873, v1889, v1890);
                            let v1892 = C::output(ctx, v1891);
                            let v1893 = Some(v1892);
                            // Rule at src\isa\riscv64\lower.isle line 1901.
                            return v1893;
                        }
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v1643 = C::unpack_value_array_3(ctx, v1642);
                            let v1873 = constructor_is_nonzero_cmp(ctx, v1643.0);
                            let v1894 = constructor_put_in_vreg(ctx, v1643.1);
                            let v1895 = constructor_put_in_vreg(ctx, v1643.2);
                            let v1896 = constructor_gen_select_vreg(ctx, v1873, v1894, v1895);
                            let v1897 = constructor_output_vreg(ctx, v1896);
                            let v1898 = Some(v1897);
                            // Rule at src\isa\riscv64\lower.isle line 1904.
                            return v1898;
                        }
                        let v778 = C::ty_supported_float_size(ctx, v3);
                        if let Some(v779) = v778 {
                            let v1643 = C::unpack_value_array_3(ctx, v1642);
                            let v1873 = constructor_is_nonzero_cmp(ctx, v1643.0);
                            let v1899 = constructor_put_in_freg(ctx, v1643.1);
                            let v1900 = constructor_put_in_freg(ctx, v1643.2);
                            let v1901 = constructor_gen_select_freg(ctx, v1873, v1899, v1900);
                            let v1902 = constructor_output_freg(ctx, v1901);
                            let v1903 = Some(v1902);
                            // Rule at src\isa\riscv64\lower.isle line 1907.
                            return v1903;
                        }
                    }
                }
                &Opcode::SelectSpectreGuard => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v749 = C::fits_in_64(ctx, v3);
                        if let Some(v750) = v749 {
                            let v1643 = C::unpack_value_array_3(ctx, v1642);
                            let v1879 = C::i64_from_iconst(ctx, v1643.2);
                            if let Some(v1880) = v1879 {
                                if v1880 == 0_i64 {
                                    let v2535 = constructor_put_in_xreg(ctx, v1643.1);
                                    let v2531 = constructor_gen_bmask(ctx, v1643.0);
                                    let v2536 = constructor_rv_and(ctx, v2535, v2531);
                                    let v2537 = constructor_output_xreg(ctx, v2536);
                                    let v2538 = Some(v2537);
                                    // Rule at src\isa\riscv64\lower.isle line 2624.
                                    return v2538;
                                }
                            }
                            let v1871 = C::i64_from_iconst(ctx, v1643.1);
                            if let Some(v1872) = v1871 {
                                if v1872 == 0_i64 {
                                    let v2530 = constructor_put_in_xreg(ctx, v1643.2);
                                    let v2531 = constructor_gen_bmask(ctx, v1643.0);
                                    let v2532 = constructor_rv_andn(ctx, v2530, v2531);
                                    let v2533 = constructor_output_xreg(ctx, v2532);
                                    let v2534 = Some(v2533);
                                    // Rule at src\isa\riscv64\lower.isle line 2622.
                                    return v2534;
                                }
                            }
                        }
                        if v3 == I128 {
                            let v1643 = C::unpack_value_array_3(ctx, v1642);
                            let v2501 = constructor_gen_bmask(ctx, v1643.0);
                            let v1889 = C::put_in_regs(ctx, v1643.1);
                            let v2508 = C::value_regs_get(ctx, v1889, 0x0_usize);
                            let v2509 = C::xreg_new(ctx, v2508);
                            let v2510 = constructor_rv_and(ctx, v2501, v2509);
                            let v2511 = C::put_in_regs(ctx, v1643.2);
                            let v2512 = C::value_regs_get(ctx, v2511, 0x0_usize);
                            let v2513 = C::xreg_new(ctx, v2512);
                            let v2514 = constructor_rv_andn(ctx, v2513, v2501);
                            let v2515 = constructor_rv_or(ctx, v2510, v2514);
                            let v2517 = C::put_in_regs(ctx, v1643.1);
                            let v2518 = C::value_regs_get(ctx, v2517, 0x1_usize);
                            let v2519 = C::xreg_new(ctx, v2518);
                            let v2520 = constructor_rv_and(ctx, v2501, v2519);
                            let v2521 = C::put_in_regs(ctx, v1643.2);
                            let v2522 = C::value_regs_get(ctx, v2521, 0x1_usize);
                            let v2523 = C::xreg_new(ctx, v2522);
                            let v2524 = constructor_rv_andn(ctx, v2523, v2501);
                            let v2525 = constructor_rv_or(ctx, v2520, v2524);
                            let v2516 = C::xreg_to_reg(ctx, v2515);
                            let v2526 = C::xreg_to_reg(ctx, v2525);
                            let v2527 = C::value_regs(ctx, v2516, v2526);
                            let v2528 = C::output(ctx, v2527);
                            let v2529 = Some(v2528);
                            // Rule at src\isa\riscv64\lower.isle line 2614.
                            return v2529;
                        }
                        if let Some(v750) = v749 {
                            let v1643 = C::unpack_value_array_3(ctx, v1642);
                            let v2501 = constructor_gen_bmask(ctx, v1643.0);
                            let v1881 = constructor_put_in_xreg(ctx, v1643.1);
                            let v2502 = constructor_rv_and(ctx, v2501, v1881);
                            let v2503 = constructor_put_in_xreg(ctx, v1643.2);
                            let v2504 = constructor_rv_andn(ctx, v2503, v2501);
                            let v2505 = constructor_rv_or(ctx, v2502, v2504);
                            let v2506 = constructor_output_xreg(ctx, v2505);
                            let v2507 = Some(v2506);
                            // Rule at src\isa\riscv64\lower.isle line 2611.
                            return v2507;
                        }
                    }
                }
                &Opcode::Bitselect => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v1643 = C::unpack_value_array_3(ctx, v1642);
                            let v1922 = C::def_inst(ctx, v1643.0);
                            if let Some(v1923) = v1922 {
                                let v1924 = &C::inst_data_value(ctx, v1923);
                                match v1924 {
                                    &InstructionData::FloatCompare {
                                        opcode: ref v1941,
                                        args: ref v1942,
                                        cond: ref v1943,
                                    } => {
                                        if let &Opcode::Fcmp = v1941 {
                                            let v1944 = C::unpack_value_array_2(ctx, v1942);
                                            let v1947 = C::value_type(ctx, v1944.0);
                                            let v1948 = C::ty_supported_vec(ctx, v1947);
                                            if let Some(v1949) = v1948 {
                                                let v1950 = constructor_gen_fcmp_mask(ctx, v1949, v1943, v1944.0, v1944.1);
                                                let v1935 = constructor_put_in_vreg(ctx, v1643.2);
                                                let v1936 = constructor_put_in_vreg(ctx, v1643.1);
                                                let v1951 = C::vstate_from_type(ctx, v1949);
                                                let v1952 = constructor_rv_vmerge_vvm(ctx, v1935, v1936, v1950, v1951);
                                                let v1953 = constructor_output_vreg(ctx, v1952);
                                                let v1954 = Some(v1953);
                                                // Rule at src\isa\riscv64\lower.isle line 1946.
                                                return v1954;
                                            }
                                        }
                                    }
                                    &InstructionData::IntCompare {
                                        opcode: ref v1925,
                                        args: ref v1926,
                                        cond: ref v1927,
                                    } => {
                                        if let &Opcode::Icmp = v1925 {
                                            let v1928 = C::unpack_value_array_2(ctx, v1926);
                                            let v1931 = C::value_type(ctx, v1928.0);
                                            let v1932 = C::ty_supported_vec(ctx, v1931);
                                            if let Some(v1933) = v1932 {
                                                let v1934 = constructor_gen_icmp_mask(ctx, v1933, v1927, v1928.0, v1928.1);
                                                let v1935 = constructor_put_in_vreg(ctx, v1643.2);
                                                let v1936 = constructor_put_in_vreg(ctx, v1643.1);
                                                let v1937 = C::vstate_from_type(ctx, v1933);
                                                let v1938 = constructor_rv_vmerge_vvm(ctx, v1935, v1936, v1934, v1937);
                                                let v1939 = constructor_output_vreg(ctx, v1938);
                                                let v1940 = Some(v1939);
                                                // Rule at src\isa\riscv64\lower.isle line 1942.
                                                return v1940;
                                            }
                                        }
                                    }
                                    &InstructionData::LoadNoOffset {
                                        opcode: ref v1955,
                                        arg: v1956,
                                        flags: v1957,
                                    } => {
                                        if let &Opcode::Bitcast = v1955 {
                                            let v1958 = C::def_inst(ctx, v1956);
                                            if let Some(v1959) = v1958 {
                                                let v1960 = &C::inst_data_value(ctx, v1959);
                                                match v1960 {
                                                    &InstructionData::FloatCompare {
                                                        opcode: ref v1961,
                                                        args: ref v1962,
                                                        cond: ref v1963,
                                                    } => {
                                                        if let &Opcode::Fcmp = v1961 {
                                                            let v1964 = C::unpack_value_array_2(ctx, v1962);
                                                            let v1967 = C::value_type(ctx, v1964.0);
                                                            let v1968 = C::ty_supported_vec(ctx, v1967);
                                                            if let Some(v1969) = v1968 {
                                                                let v1970 = constructor_gen_fcmp_mask(ctx, v1969, v1963, v1964.0, v1964.1);
                                                                let v1935 = constructor_put_in_vreg(ctx, v1643.2);
                                                                let v1936 = constructor_put_in_vreg(ctx, v1643.1);
                                                                let v1971 = C::vstate_from_type(ctx, v1969);
                                                                let v1972 = constructor_rv_vmerge_vvm(ctx, v1935, v1936, v1970, v1971);
                                                                let v1973 = constructor_output_vreg(ctx, v1972);
                                                                let v1974 = Some(v1973);
                                                                // Rule at src\isa\riscv64\lower.isle line 1950.
                                                                return v1974;
                                                            }
                                                        }
                                                    }
                                                    &InstructionData::IntCompare {
                                                        opcode: ref v1975,
                                                        args: ref v1976,
                                                        cond: ref v1977,
                                                    } => {
                                                        if let &Opcode::Icmp = v1975 {
                                                            let v1978 = C::unpack_value_array_2(ctx, v1976);
                                                            let v1981 = C::value_type(ctx, v1978.0);
                                                            let v1982 = C::ty_supported_vec(ctx, v1981);
                                                            if let Some(v1983) = v1982 {
                                                                let v1984 = constructor_gen_icmp_mask(ctx, v1983, v1977, v1978.0, v1978.1);
                                                                let v1935 = constructor_put_in_vreg(ctx, v1643.2);
                                                                let v1936 = constructor_put_in_vreg(ctx, v1643.1);
                                                                let v1985 = C::vstate_from_type(ctx, v1983);
                                                                let v1986 = constructor_rv_vmerge_vvm(ctx, v1935, v1936, v1984, v1985);
                                                                let v1987 = constructor_output_vreg(ctx, v1986);
                                                                let v1988 = Some(v1987);
                                                                // Rule at src\isa\riscv64\lower.isle line 1954.
                                                                return v1988;
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                            let v1913 = constructor_put_in_vreg(ctx, v1643.0);
                            let v1894 = constructor_put_in_vreg(ctx, v1643.1);
                            let v204 = &constructor_unmasked(ctx);
                            let v205 = C::vstate_from_type(ctx, v12);
                            let v1914 = constructor_rv_vand_vv(ctx, v1913, v1894, v204, v205);
                            let v1915 = constructor_put_in_vreg(ctx, v1643.0);
                            let v1916 = constructor_rv_vnot_v(ctx, v1915, v204, v205);
                            let v1917 = constructor_put_in_vreg(ctx, v1643.2);
                            let v1918 = constructor_rv_vand_vv(ctx, v1916, v1917, v204, v205);
                            let v1919 = constructor_rv_vor_vv(ctx, v1914, v1918, v204, v205);
                            let v1920 = constructor_output_vreg(ctx, v1919);
                            let v1921 = Some(v1920);
                            // Rule at src\isa\riscv64\lower.isle line 1924.
                            return v1921;
                        }
                        let v75 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v76) = v75 {
                            let v1643 = C::unpack_value_array_3(ctx, v1642);
                            let v1904 = constructor_put_in_xreg(ctx, v1643.0);
                            let v1881 = constructor_put_in_xreg(ctx, v1643.1);
                            let v1905 = constructor_rv_and(ctx, v1904, v1881);
                            let v1906 = constructor_put_in_xreg(ctx, v1643.0);
                            let v1907 = constructor_rv_not(ctx, v1906);
                            let v1908 = constructor_put_in_xreg(ctx, v1643.2);
                            let v1909 = constructor_rv_and(ctx, v1907, v1908);
                            let v1910 = constructor_rv_or(ctx, v1905, v1909);
                            let v1911 = constructor_output_xreg(ctx, v1910);
                            let v1912 = Some(v1911);
                            // Rule at src\isa\riscv64\lower.isle line 1913.
                            return v1912;
                        }
                    }
                }
                &Opcode::Fma => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1643 = C::unpack_value_array_3(ctx, v1642);
                        let v1647 = &constructor_is_fneg(ctx, v1643.0);
                        let v1653 = constructor_is_fneg_neg(ctx, v1647);
                        let v1648 = &constructor_is_fneg(ctx, v1643.1);
                        let v1654 = constructor_is_fneg_neg(ctx, v1648);
                        let v1655 = C::u64_xor(ctx, v1653, v1654);
                        let v1649 = &constructor_is_fneg(ctx, v1643.2);
                        let v1656 = constructor_is_fneg_neg(ctx, v1649);
                        let v1650 = constructor_get_fneg_value(ctx, v1647);
                        let v1651 = constructor_get_fneg_value(ctx, v1648);
                        let v1652 = constructor_get_fneg_value(ctx, v1649);
                        let v1657 = constructor_rv_fma(ctx, v3, v1655, v1656, v1650, v1651, v1652);
                        let v1658 = Some(v1657);
                        // Rule at src\isa\riscv64\lower.isle line 1601.
                        return v1658;
                    }
                }
                _ => {}
            }
        }
        &InstructionData::TernaryImm8 {
            opcode: ref v2599,
            args: ref v2600,
            imm: v2601,
        } => {
            if let &Opcode::Insertlane = v2599 {
                let v2602 = C::unpack_value_array_2(ctx, v2600);
                let v2605 = C::value_type(ctx, v2602.0);
                let v2606 = C::ty_supported_vec(ctx, v2605);
                if let Some(v2607) = v2606 {
                    let v2627 = C::i64_from_iconst(ctx, v2602.1);
                    if let Some(v2628) = v2627 {
                        let v2629 = C::imm5_from_i64(ctx, v2628);
                        if let Some(v2630) = v2629 {
                            let v2611 = C::u8_from_uimm8(ctx, v2601);
                            let v2612 = C::u8_as_u64(ctx, v2611);
                            let v2613 = C::u64_shl(ctx, 0x1_u64, v2612);
                            let v2614 = constructor_gen_vec_mask(ctx, v2613);
                            let v2615 = constructor_put_in_vreg(ctx, v2602.0);
                            let v2617 = C::vstate_from_type(ctx, v2607);
                            let v2631 = constructor_rv_vmerge_vim(ctx, v2615, v2630, v2614, v2617);
                            let v2632 = constructor_output_vreg(ctx, v2631);
                            let v2633 = Some(v2632);
                            // Rule at src\isa\riscv64\lower.isle line 2708.
                            return v2633;
                        }
                    }
                    let v2608 = C::value_type(ctx, v2602.1);
                    let v2621 = C::ty_supported_float_full(ctx, v2608);
                    if let Some(v2622) = v2621 {
                        let v2611 = C::u8_from_uimm8(ctx, v2601);
                        let v2612 = C::u8_as_u64(ctx, v2611);
                        let v2613 = C::u64_shl(ctx, 0x1_u64, v2612);
                        let v2614 = constructor_gen_vec_mask(ctx, v2613);
                        let v2615 = constructor_put_in_vreg(ctx, v2602.0);
                        let v2623 = constructor_put_in_freg(ctx, v2602.1);
                        let v2617 = C::vstate_from_type(ctx, v2607);
                        let v2624 = constructor_rv_vfmerge_vfm(ctx, v2615, v2623, v2614, v2617);
                        let v2625 = constructor_output_vreg(ctx, v2624);
                        let v2626 = Some(v2625);
                        // Rule at src\isa\riscv64\lower.isle line 2700.
                        return v2626;
                    }
                    let v2609 = C::ty_int(ctx, v2608);
                    if let Some(v2610) = v2609 {
                        let v2611 = C::u8_from_uimm8(ctx, v2601);
                        let v2612 = C::u8_as_u64(ctx, v2611);
                        let v2613 = C::u64_shl(ctx, 0x1_u64, v2612);
                        let v2614 = constructor_gen_vec_mask(ctx, v2613);
                        let v2615 = constructor_put_in_vreg(ctx, v2602.0);
                        let v2616 = constructor_put_in_xreg(ctx, v2602.1);
                        let v2617 = C::vstate_from_type(ctx, v2607);
                        let v2618 = constructor_rv_vmerge_vxm(ctx, v2615, v2616, v2614, v2617);
                        let v2619 = constructor_output_vreg(ctx, v2618);
                        let v2620 = Some(v2619);
                        // Rule at src\isa\riscv64\lower.isle line 2693.
                        return v2620;
                    }
                }
            }
        }
        &InstructionData::Trap {
            opcode: ref v2111,
            code: ref v2112,
        } => {
            if let &Opcode::Trap = v2111 {
                let v2113 = constructor_udf(ctx, v2112);
                let v2114 = Some(v2113);
                // Rule at src\isa\riscv64\lower.isle line 2077.
                return v2114;
            }
        }
        &InstructionData::Unary {
            opcode: ref v566,
            arg: v567,
        } => {
            match v566 {
                &Opcode::Splat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1077 = C::def_inst(ctx, v567);
                        if let Some(v1078) = v1077 {
                            let v1079 = &C::inst_data_value(ctx, v1078);
                            if let &InstructionData::UnaryImm {
                                opcode: ref v2643,
                                imm: v2644,
                            } = v1079 {
                                if let &Opcode::Iconst = v2643 {
                                    let v2645 = C::u64_from_imm64(ctx, v2644);
                                    let v2646 = C::imm5_from_u64(ctx, v2645);
                                    if let Some(v2647) = v2646 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v2634 = C::vstate_from_type(ctx, v3);
                                        let v2648 = constructor_rv_vmv_vi(ctx, v2647, v2634);
                                        let v2649 = constructor_output_vreg(ctx, v2648);
                                        let v2650 = Some(v2649);
                                        // Rule at src\isa\riscv64\lower.isle line 2722.
                                        return v2650;
                                    }
                                }
                            }
                        }
                        let v1221 = C::value_type(ctx, v567);
                        let v2638 = C::ty_int_ref_scalar_64_extract(ctx, v1221);
                        if let Some(v2639) = v2638 {
                            let v1052 = constructor_put_in_xreg(ctx, v567);
                            let v3 = C::value_type(ctx, v2);
                            let v2634 = C::vstate_from_type(ctx, v3);
                            let v2640 = constructor_rv_vmv_vx(ctx, v1052, v2634);
                            let v2641 = constructor_output_vreg(ctx, v2640);
                            let v2642 = Some(v2641);
                            // Rule at src\isa\riscv64\lower.isle line 2719.
                            return v2642;
                        }
                        let v2364 = C::ty_supported_float_full(ctx, v1221);
                        if let Some(v2365) = v2364 {
                            let v1056 = constructor_put_in_freg(ctx, v567);
                            let v3 = C::value_type(ctx, v2);
                            let v2634 = C::vstate_from_type(ctx, v3);
                            let v2635 = constructor_rv_vfmv_vf(ctx, v1056, v2634);
                            let v2636 = constructor_output_vreg(ctx, v2635);
                            let v2637 = Some(v2636);
                            // Rule at src\isa\riscv64\lower.isle line 2716.
                            return v2637;
                        }
                    }
                }
                &Opcode::VanyTrue => {
                    let v1221 = C::value_type(ctx, v567);
                    let v2693 = C::ty_supported_vec(ctx, v1221);
                    if let Some(v2694) = v2693 {
                        let v572 = constructor_put_in_vreg(ctx, v567);
                        let v2370 = constructor_put_in_vreg(ctx, v567);
                        let v204 = &constructor_unmasked(ctx);
                        let v2698 = C::vstate_from_type(ctx, v2694);
                        let v2704 = constructor_rv_vredmaxu_vs(ctx, v572, v2370, v204, v2698);
                        let v2705 = constructor_rv_vmv_xs(ctx, v2704, v2698);
                        let v2706 = constructor_rv_snez(ctx, v2705);
                        let v2707 = constructor_output_xreg(ctx, v2706);
                        let v2708 = Some(v2707);
                        // Rule at src\isa\riscv64\lower.isle line 2807.
                        return v2708;
                    }
                }
                &Opcode::VallTrue => {
                    let v1221 = C::value_type(ctx, v567);
                    let v2693 = C::ty_supported_vec(ctx, v1221);
                    if let Some(v2694) = v2693 {
                        let v2696 = C::i8_to_imm5(ctx, 1_i8);
                        if let Some(v2697) = v2696 {
                            let v2698 = C::vstate_from_type(ctx, v2694);
                            let v2699 = constructor_rv_vmv_vi(ctx, v2697, v2698);
                            let v2370 = constructor_put_in_vreg(ctx, v567);
                            let v204 = &constructor_unmasked(ctx);
                            let v2700 = constructor_rv_vredminu_vs(ctx, v2370, v2699, v204, v2698);
                            let v2701 = constructor_rv_vmv_xs(ctx, v2700, v2698);
                            let v2702 = constructor_output_xreg(ctx, v2701);
                            let v2703 = Some(v2702);
                            // Rule at src\isa\riscv64\lower.isle line 2793.
                            return v2703;
                        }
                    }
                }
                &Opcode::VhighBits => {
                    let v1221 = C::value_type(ctx, v567);
                    let v2693 = C::ty_supported_vec(ctx, v1221);
                    if let Some(v2694) = v2693 {
                        let v572 = constructor_put_in_vreg(ctx, v567);
                        let v1874 = C::zero_reg(ctx);
                        let v204 = &constructor_unmasked(ctx);
                        let v2698 = C::vstate_from_type(ctx, v2694);
                        let v2709 = constructor_rv_vmslt_vx(ctx, v572, v1874, v204, v2698);
                        let v2464 = C::vstate_from_type(ctx, I64X2);
                        let v2710 = constructor_rv_vmv_xs(ctx, v2709, v2464);
                        let v2711 = C::ty_lane_mask(ctx, v2694);
                        let v2712 = constructor_gen_andi(ctx, v2710, v2711);
                        let v2713 = constructor_output_xreg(ctx, v2712);
                        let v2714 = Some(v2713);
                        // Rule at src\isa\riscv64\lower.isle line 2823.
                        return v2714;
                    }
                }
                &Opcode::Ineg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v572 = constructor_put_in_vreg(ctx, v567);
                            let v204 = &constructor_unmasked(ctx);
                            let v205 = C::vstate_from_type(ctx, v12);
                            let v573 = constructor_rv_vneg_v(ctx, v572, v204, v205);
                            let v574 = constructor_output_vreg(ctx, v573);
                            let v575 = Some(v574);
                            // Rule at src\isa\riscv64\lower.isle line 452.
                            return v575;
                        }
                        let v564 = C::ty_int(ctx, v3);
                        if let Some(v565) = v564 {
                            let v568 = C::put_in_regs(ctx, v567);
                            let v569 = constructor_neg(ctx, v565, v568);
                            let v570 = C::output(ctx, v569);
                            let v571 = Some(v570);
                            // Rule at src\isa\riscv64\lower.isle line 449.
                            return v571;
                        }
                    }
                }
                &Opcode::Iabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v572 = constructor_put_in_vreg(ctx, v567);
                            let v204 = &constructor_unmasked(ctx);
                            let v205 = C::vstate_from_type(ctx, v12);
                            let v573 = constructor_rv_vneg_v(ctx, v572, v204, v205);
                            let v1282 = constructor_put_in_vreg(ctx, v567);
                            let v2563 = constructor_rv_vmax_vv(ctx, v1282, v573, v204, v205);
                            let v2564 = constructor_output_vreg(ctx, v2563);
                            let v2565 = Some(v2564);
                            // Rule at src\isa\riscv64\lower.isle line 2662.
                            return v2565;
                        }
                        let v75 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v76) = v75 {
                            let v1167 = constructor_sext(ctx, v567);
                            let v2558 = constructor_rv_neg(ctx, v1167);
                            let v2559 = constructor_cmp_gt(ctx, v1167, v2558);
                            let v2560 = constructor_gen_select_xreg(ctx, v2559, v1167, v2558);
                            let v2561 = constructor_output_xreg(ctx, v2560);
                            let v2562 = Some(v2561);
                            // Rule at src\isa\riscv64\lower.isle line 2654.
                            return v2562;
                        }
                    }
                }
                &Opcode::Bnot => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v75 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v76) = v75 {
                            let v790 = C::has_zbb(ctx);
                            if v790 == true {
                                let v1077 = C::def_inst(ctx, v567);
                                if let Some(v1078) = v1077 {
                                    let v1079 = &C::inst_data_value(ctx, v1078);
                                    if let &InstructionData::Binary {
                                        opcode: ref v1080,
                                        args: ref v1081,
                                    } = v1079 {
                                        if let &Opcode::Bxor = v1080 {
                                            let v1082 = C::unpack_value_array_2(ctx, v1081);
                                            let v1085 = constructor_put_in_xreg(ctx, v1082.0);
                                            let v1086 = constructor_put_in_xreg(ctx, v1082.1);
                                            let v1087 = constructor_rv_xnor(ctx, v1085, v1086);
                                            let v1088 = constructor_output_xreg(ctx, v1087);
                                            let v1089 = Some(v1088);
                                            // Rule at src\isa\riscv64\lower.isle line 997.
                                            return v1089;
                                        }
                                    }
                                }
                            }
                        }
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v572 = constructor_put_in_vreg(ctx, v567);
                            let v204 = &constructor_unmasked(ctx);
                            let v205 = C::vstate_from_type(ctx, v12);
                            let v1074 = constructor_rv_vnot_v(ctx, v572, v204, v205);
                            let v1075 = constructor_output_vreg(ctx, v1074);
                            let v1076 = Some(v1075);
                            // Rule at src\isa\riscv64\lower.isle line 994.
                            return v1076;
                        }
                        let v754 = C::ty_reg_pair(ctx, v3);
                        if let Some(v755) = v754 {
                            let v568 = C::put_in_regs(ctx, v567);
                            let v1062 = C::value_regs_get(ctx, v568, 0x0_usize);
                            let v1063 = C::xreg_new(ctx, v1062);
                            let v1064 = constructor_rv_not(ctx, v1063);
                            let v1066 = C::put_in_regs(ctx, v567);
                            let v1067 = C::value_regs_get(ctx, v1066, 0x1_usize);
                            let v1068 = C::xreg_new(ctx, v1067);
                            let v1069 = constructor_rv_not(ctx, v1068);
                            let v1065 = C::xreg_to_reg(ctx, v1064);
                            let v1070 = C::xreg_to_reg(ctx, v1069);
                            let v1071 = C::value_regs(ctx, v1065, v1070);
                            let v1072 = C::output(ctx, v1071);
                            let v1073 = Some(v1072);
                            // Rule at src\isa\riscv64\lower.isle line 989.
                            return v1073;
                        }
                        let v778 = C::ty_supported_float_size(ctx, v3);
                        if let Some(v779) = v778 {
                            let v1056 = constructor_put_in_freg(ctx, v567);
                            let v1057 = constructor_move_f_to_x(ctx, v1056, v779);
                            let v1058 = constructor_rv_not(ctx, v1057);
                            let v1059 = constructor_move_x_to_f(ctx, v1058, v779);
                            let v1060 = constructor_output_freg(ctx, v1059);
                            let v1061 = Some(v1060);
                            // Rule at src\isa\riscv64\lower.isle line 986.
                            return v1061;
                        }
                        if let Some(v76) = v75 {
                            let v1052 = constructor_put_in_xreg(ctx, v567);
                            let v1053 = constructor_rv_not(ctx, v1052);
                            let v1054 = constructor_output_xreg(ctx, v1053);
                            let v1055 = Some(v1054);
                            // Rule at src\isa\riscv64\lower.isle line 983.
                            return v1055;
                        }
                    }
                }
                &Opcode::Bitrev => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v568 = C::put_in_regs(ctx, v567);
                            let v1093 = C::value_regs_get(ctx, v568, 0x1_usize);
                            let v1094 = C::xreg_new(ctx, v1093);
                            let v1095 = constructor_gen_bitrev(ctx, I64, v1094);
                            let v1066 = C::put_in_regs(ctx, v567);
                            let v1097 = C::value_regs_get(ctx, v1066, 0x0_usize);
                            let v1098 = C::xreg_new(ctx, v1097);
                            let v1099 = constructor_gen_bitrev(ctx, I64, v1098);
                            let v1096 = C::xreg_to_reg(ctx, v1095);
                            let v1100 = C::xreg_to_reg(ctx, v1099);
                            let v1101 = C::value_regs(ctx, v1096, v1100);
                            let v1102 = C::output(ctx, v1101);
                            let v1103 = Some(v1102);
                            // Rule at src\isa\riscv64\lower.isle line 1006.
                            return v1103;
                        }
                        let v75 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v76) = v75 {
                            let v1052 = constructor_put_in_xreg(ctx, v567);
                            let v1090 = constructor_gen_bitrev(ctx, v76, v1052);
                            let v1091 = constructor_output_xreg(ctx, v1090);
                            let v1092 = Some(v1091);
                            // Rule at src\isa\riscv64\lower.isle line 1003.
                            return v1092;
                        }
                    }
                }
                &Opcode::Clz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v790 = C::has_zbb(ctx);
                        if v790 == true {
                            let v3 = C::value_type(ctx, v2);
                            match v3 {
                                I32 => {
                                    let v1052 = constructor_put_in_xreg(ctx, v567);
                                    let v1161 = constructor_rv_clzw(ctx, v1052);
                                    let v1162 = constructor_output_xreg(ctx, v1161);
                                    let v1163 = Some(v1162);
                                    // Rule at src\isa\riscv64\lower.isle line 1108.
                                    return v1163;
                                }
                                I64 => {
                                    let v1052 = constructor_put_in_xreg(ctx, v567);
                                    let v1164 = constructor_rv_clz(ctx, v1052);
                                    let v1165 = constructor_output_xreg(ctx, v1164);
                                    let v1166 = Some(v1165);
                                    // Rule at src\isa\riscv64\lower.isle line 1112.
                                    return v1166;
                                }
                                _ => {}
                            }
                            let v658 = C::fits_in_16(ctx, v3);
                            if let Some(v659) = v658 {
                                let v1152 = constructor_zext(ctx, v567);
                                let v1153 = constructor_rv_clz(ctx, v1152);
                                let v1154 = C::ty_bits(ctx, v659);
                                let v1155 = C::u8_as_i32(ctx, v1154);
                                let v1157 = C::imm12_const_add(ctx, v1155, -64_i32);
                                let v1158 = constructor_rv_addi(ctx, v1153, v1157);
                                let v1159 = constructor_output_xreg(ctx, v1158);
                                let v1160 = Some(v1159);
                                // Rule at src\isa\riscv64\lower.isle line 1101.
                                return v1160;
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v568 = C::put_in_regs(ctx, v567);
                            let v1062 = C::value_regs_get(ctx, v568, 0x0_usize);
                            let v1063 = C::xreg_new(ctx, v1062);
                            let v1118 = C::put_in_regs(ctx, v567);
                            let v1119 = C::value_regs_get(ctx, v1118, 0x1_usize);
                            let v1120 = C::xreg_new(ctx, v1119);
                            let v1141 = constructor_gen_clz(ctx, v1120);
                            let v1142 = constructor_gen_clz(ctx, v1063);
                            let v1143 = constructor_cmp_eqz(ctx, v1120);
                            let v1144 = C::zero_reg(ctx);
                            let v1145 = constructor_gen_select_xreg(ctx, v1143, v1142, v1144);
                            let v1146 = constructor_rv_add(ctx, v1141, v1145);
                            let v1148 = constructor_imm(ctx, I64, 0x0_u64);
                            let v1147 = C::xreg_to_reg(ctx, v1146);
                            let v1149 = C::value_regs(ctx, v1147, v1148);
                            let v1150 = C::output(ctx, v1149);
                            let v1151 = Some(v1150);
                            // Rule at src\isa\riscv64\lower.isle line 1091.
                            return v1151;
                        }
                        let v749 = C::fits_in_64(ctx, v3);
                        if let Some(v750) = v749 {
                            let v1052 = constructor_put_in_xreg(ctx, v567);
                            let v1137 = true;
                            let v1138 = constructor_gen_cltz(ctx, v1137, v1052, v750);
                            let v1139 = constructor_output_xreg(ctx, v1138);
                            let v1140 = Some(v1139);
                            // Rule at src\isa\riscv64\lower.isle line 1088.
                            return v1140;
                        }
                    }
                }
                &Opcode::Cls => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v568 = C::put_in_regs(ctx, v567);
                            let v1062 = C::value_regs_get(ctx, v568, 0x0_usize);
                            let v1063 = C::xreg_new(ctx, v1062);
                            let v1118 = C::put_in_regs(ctx, v567);
                            let v1119 = C::value_regs_get(ctx, v1118, 0x1_usize);
                            let v1120 = C::xreg_new(ctx, v1119);
                            let v1179 = constructor_cmp_ltz(ctx, v1120);
                            let v1180 = constructor_rv_not(ctx, v1063);
                            let v1181 = constructor_gen_select_xreg(ctx, v1179, v1180, v1063);
                            let v1182 = constructor_cmp_ltz(ctx, v1120);
                            let v1183 = constructor_rv_not(ctx, v1120);
                            let v1184 = constructor_gen_select_xreg(ctx, v1182, v1183, v1120);
                            let v1185 = constructor_gen_clz(ctx, v1184);
                            let v1186 = constructor_gen_clz(ctx, v1181);
                            let v1187 = constructor_cmp_eqz(ctx, v1184);
                            let v1188 = C::zero_reg(ctx);
                            let v1189 = constructor_gen_select_xreg(ctx, v1187, v1186, v1188);
                            let v1190 = constructor_rv_add(ctx, v1185, v1189);
                            let v1192 = C::imm12_const(ctx, -1_i32);
                            let v1193 = constructor_rv_addi(ctx, v1190, v1192);
                            let v1195 = constructor_imm(ctx, I64, 0x0_u64);
                            let v1194 = C::xreg_to_reg(ctx, v1193);
                            let v1196 = C::value_regs(ctx, v1194, v1195);
                            let v1197 = C::output(ctx, v1196);
                            let v1198 = Some(v1197);
                            // Rule at src\isa\riscv64\lower.isle line 1136.
                            return v1198;
                        }
                        let v749 = C::fits_in_64(ctx, v3);
                        if let Some(v750) = v749 {
                            let v1167 = constructor_sext(ctx, v567);
                            let v1168 = constructor_cmp_ltz(ctx, v1167);
                            let v1169 = constructor_rv_not(ctx, v1167);
                            let v1170 = constructor_gen_select_xreg(ctx, v1168, v1169, v1167);
                            let v1171 = constructor_gen_clz(ctx, v1170);
                            let v1172 = C::ty_bits(ctx, v750);
                            let v1173 = C::u8_as_i32(ctx, v1172);
                            let v1175 = C::imm12_const_add(ctx, v1173, -65_i32);
                            let v1176 = constructor_rv_addi(ctx, v1171, v1175);
                            let v1177 = constructor_output_xreg(ctx, v1176);
                            let v1178 = Some(v1177);
                            // Rule at src\isa\riscv64\lower.isle line 1125.
                            return v1178;
                        }
                    }
                }
                &Opcode::Ctz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v568 = C::put_in_regs(ctx, v567);
                            let v1062 = C::value_regs_get(ctx, v568, 0x0_usize);
                            let v1063 = C::xreg_new(ctx, v1062);
                            let v1118 = C::put_in_regs(ctx, v567);
                            let v1119 = C::value_regs_get(ctx, v1118, 0x1_usize);
                            let v1120 = C::xreg_new(ctx, v1119);
                            let v1121 = C::xreg_to_reg(ctx, v1120);
                            let v1122 = constructor_lower_ctz(ctx, I64, v1121);
                            let v1123 = C::xreg_new(ctx, v1122);
                            let v1124 = C::xreg_to_reg(ctx, v1063);
                            let v1125 = constructor_lower_ctz(ctx, I64, v1124);
                            let v1126 = C::xreg_new(ctx, v1125);
                            let v1127 = constructor_cmp_eqz(ctx, v1063);
                            let v1128 = C::zero_reg(ctx);
                            let v1129 = constructor_gen_select_xreg(ctx, v1127, v1123, v1128);
                            let v1130 = constructor_rv_add(ctx, v1126, v1129);
                            let v1133 = constructor_imm(ctx, I64, 0x0_u64);
                            let v1131 = C::xreg_to_reg(ctx, v1130);
                            let v1134 = C::value_regs(ctx, v1131, v1133);
                            let v1135 = C::output(ctx, v1134);
                            let v1136 = Some(v1135);
                            // Rule at src\isa\riscv64\lower.isle line 1076.
                            return v1136;
                        }
                        let v749 = C::fits_in_64(ctx, v3);
                        if let Some(v750) = v749 {
                            let v1114 = C::put_in_reg(ctx, v567);
                            let v1115 = constructor_lower_ctz(ctx, v750, v1114);
                            let v1116 = constructor_output_reg(ctx, v1115);
                            let v1117 = Some(v1116);
                            // Rule at src\isa\riscv64\lower.isle line 1073.
                            return v1117;
                        }
                    }
                }
                &Opcode::Bswap => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v568 = C::put_in_regs(ctx, v567);
                            let v1093 = C::value_regs_get(ctx, v568, 0x1_usize);
                            let v1094 = C::xreg_new(ctx, v1093);
                            let v1107 = constructor_gen_bswap(ctx, I64, v1094);
                            let v1066 = C::put_in_regs(ctx, v567);
                            let v1097 = C::value_regs_get(ctx, v1066, 0x0_usize);
                            let v1098 = C::xreg_new(ctx, v1097);
                            let v1109 = constructor_gen_bswap(ctx, I64, v1098);
                            let v1108 = C::xreg_to_reg(ctx, v1107);
                            let v1110 = C::xreg_to_reg(ctx, v1109);
                            let v1111 = C::value_regs(ctx, v1108, v1110);
                            let v1112 = C::output(ctx, v1111);
                            let v1113 = Some(v1112);
                            // Rule at src\isa\riscv64\lower.isle line 1032.
                            return v1113;
                        }
                        let v749 = C::fits_in_64(ctx, v3);
                        if let Some(v750) = v749 {
                            let v769 = C::ty_int(ctx, v750);
                            if let Some(v770) = v769 {
                                let v1052 = constructor_put_in_xreg(ctx, v567);
                                let v1104 = constructor_gen_bswap(ctx, v770, v1052);
                                let v1105 = constructor_output_xreg(ctx, v1104);
                                let v1106 = Some(v1105);
                                // Rule at src\isa\riscv64\lower.isle line 1029.
                                return v1106;
                            }
                        }
                    }
                }
                &Opcode::Popcnt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v1268 = constructor_u64_to_uimm5(ctx, 0x1_u64);
                            if let Some(v1269) = v1268 {
                                let v1271 = constructor_u64_to_uimm5(ctx, 0x2_u64);
                                if let Some(v1272) = v1271 {
                                    let v1274 = constructor_u64_to_uimm5(ctx, 0x4_u64);
                                    if let Some(v1275) = v1274 {
                                        let v1276 = C::lane_type(ctx, v12);
                                        let v1278 = C::ty_mask(ctx, v1276);
                                        let v1279 = C::u64_and(ctx, 0x5555555555555555_u64, v1278);
                                        let v1280 = constructor_imm(ctx, v1276, v1279);
                                        let v1281 = C::xreg_new(ctx, v1280);
                                        let v1282 = constructor_put_in_vreg(ctx, v567);
                                        let v204 = &constructor_unmasked(ctx);
                                        let v205 = C::vstate_from_type(ctx, v12);
                                        let v1283 = constructor_rv_vsrl_vi(ctx, v1282, v1269, v204, v205);
                                        let v1284 = constructor_rv_vand_vx(ctx, v1283, v1281, v204, v205);
                                        let v1285 = constructor_put_in_vreg(ctx, v567);
                                        let v1286 = constructor_rv_vsub_vv(ctx, v1285, v1284, v204, v205);
                                        let v1288 = C::u64_and(ctx, 0x3333333333333333_u64, v1278);
                                        let v1289 = constructor_imm(ctx, v1276, v1288);
                                        let v1290 = C::xreg_new(ctx, v1289);
                                        let v1291 = constructor_rv_vsrl_vi(ctx, v1286, v1272, v204, v205);
                                        let v1292 = constructor_rv_vand_vx(ctx, v1291, v1290, v204, v205);
                                        let v1293 = constructor_rv_vand_vx(ctx, v1286, v1290, v204, v205);
                                        let v1294 = constructor_rv_vadd_vv(ctx, v1293, v1292, v204, v205);
                                        let v1296 = C::u64_and(ctx, 0xf0f0f0f0f0f0f0f_u64, v1278);
                                        let v1297 = constructor_imm(ctx, v1276, v1296);
                                        let v1298 = C::xreg_new(ctx, v1297);
                                        let v1299 = constructor_rv_vsrl_vi(ctx, v1294, v1275, v204, v205);
                                        let v1300 = constructor_rv_vadd_vv(ctx, v1294, v1299, v204, v205);
                                        let v1301 = constructor_rv_vand_vx(ctx, v1300, v1298, v204, v205);
                                        let v1303 = C::u64_and(ctx, 0x101010101010101_u64, v1278);
                                        let v1304 = constructor_imm(ctx, v1276, v1303);
                                        let v1305 = C::xreg_new(ctx, v1304);
                                        let v1306 = constructor_rv_vmul_vx(ctx, v1301, v1305, v204, v205);
                                        let v1307 = C::ty_bits(ctx, v1276);
                                        let v1308 = C::u8_as_u64(ctx, v1307);
                                        let v1310 = C::u64_sub(ctx, v1308, 0x8_u64);
                                        let v1311 = constructor_imm(ctx, I64, v1310);
                                        let v1312 = C::xreg_new(ctx, v1311);
                                        let v1313 = constructor_rv_vsrl_vx(ctx, v1306, v1312, v204, v205);
                                        let v1314 = constructor_output_vreg(ctx, v1313);
                                        let v1315 = Some(v1314);
                                        // Rule at src\isa\riscv64\lower.isle line 1227.
                                        return v1315;
                                    }
                                }
                            }
                        }
                        let v790 = C::has_zbb(ctx);
                        if v790 == true {
                            match v3 {
                                I32 => {
                                    let v1052 = constructor_put_in_xreg(ctx, v567);
                                    let v1254 = constructor_rv_cpopw(ctx, v1052);
                                    let v1255 = constructor_output_xreg(ctx, v1254);
                                    let v1256 = Some(v1255);
                                    // Rule at src\isa\riscv64\lower.isle line 1202.
                                    return v1256;
                                }
                                I128 => {
                                    let v568 = C::put_in_regs(ctx, v567);
                                    let v1062 = C::value_regs_get(ctx, v568, 0x0_usize);
                                    let v1063 = C::xreg_new(ctx, v1062);
                                    let v1257 = constructor_rv_cpop(ctx, v1063);
                                    let v1258 = C::value_regs_get(ctx, v568, 0x1_usize);
                                    let v1259 = C::xreg_new(ctx, v1258);
                                    let v1260 = constructor_rv_cpop(ctx, v1259);
                                    let v1261 = constructor_rv_add(ctx, v1257, v1260);
                                    let v1263 = constructor_imm(ctx, I64, 0x0_u64);
                                    let v1262 = C::xreg_to_reg(ctx, v1261);
                                    let v1264 = C::value_regs(ctx, v1262, v1263);
                                    let v1265 = C::output(ctx, v1264);
                                    let v1266 = Some(v1265);
                                    // Rule at src\isa\riscv64\lower.isle line 1206.
                                    return v1266;
                                }
                                _ => {}
                            }
                            let v749 = C::fits_in_64(ctx, v3);
                            if let Some(v750) = v749 {
                                let v1152 = constructor_zext(ctx, v567);
                                let v1251 = constructor_rv_cpop(ctx, v1152);
                                let v1252 = constructor_output_xreg(ctx, v1251);
                                let v1253 = Some(v1252);
                                // Rule at src\isa\riscv64\lower.isle line 1198.
                                return v1253;
                            }
                        }
                        if v3 == I128 {
                            let v568 = C::put_in_regs(ctx, v567);
                            let v1062 = C::value_regs_get(ctx, v568, 0x0_usize);
                            let v1063 = C::xreg_new(ctx, v1062);
                            let v1239 = constructor_gen_popcnt(ctx, v1063);
                            let v1240 = C::xreg_new(ctx, v1239);
                            let v1241 = C::value_regs_get(ctx, v568, 0x1_usize);
                            let v1242 = C::xreg_new(ctx, v1241);
                            let v1243 = constructor_gen_popcnt(ctx, v1242);
                            let v1244 = C::xreg_new(ctx, v1243);
                            let v1245 = constructor_rv_add(ctx, v1240, v1244);
                            let v1247 = constructor_imm(ctx, I64, 0x0_u64);
                            let v1246 = C::xreg_to_reg(ctx, v1245);
                            let v1248 = C::value_regs(ctx, v1246, v1247);
                            let v1249 = C::output(ctx, v1248);
                            let v1250 = Some(v1249);
                            // Rule at src\isa\riscv64\lower.isle line 1190.
                            return v1250;
                        }
                        let v749 = C::fits_in_64(ctx, v3);
                        if let Some(v750) = v749 {
                            let v1152 = constructor_zext(ctx, v567);
                            let v1236 = constructor_gen_popcnt(ctx, v1152);
                            let v1237 = constructor_output_reg(ctx, v1236);
                            let v1238 = Some(v1237);
                            // Rule at src\isa\riscv64\lower.isle line 1187.
                            return v1238;
                        }
                    }
                }
                &Opcode::Sqrt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v572 = constructor_put_in_vreg(ctx, v567);
                            let v204 = &constructor_unmasked(ctx);
                            let v205 = C::vstate_from_type(ctx, v12);
                            let v1663 = constructor_rv_vfsqrt_v(ctx, v572, v204, v205);
                            let v1664 = constructor_output_vreg(ctx, v1663);
                            let v1665 = Some(v1664);
                            // Rule at src\isa\riscv64\lower.isle line 1634.
                            return v1665;
                        }
                        let v1617 = C::ty_supported_float_full(ctx, v3);
                        if let Some(v1618) = v1617 {
                            let v1056 = constructor_put_in_freg(ctx, v567);
                            let v1660 = constructor_rv_fsqrt(ctx, v1618, &FRM::RNE, v1056);
                            let v1661 = constructor_output_freg(ctx, v1660);
                            let v1662 = Some(v1661);
                            // Rule at src\isa\riscv64\lower.isle line 1631.
                            return v1662;
                        }
                    }
                }
                &Opcode::Fneg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v572 = constructor_put_in_vreg(ctx, v567);
                            let v204 = &constructor_unmasked(ctx);
                            let v205 = C::vstate_from_type(ctx, v12);
                            let v1628 = constructor_rv_vfneg_v(ctx, v572, v204, v205);
                            let v1629 = constructor_output_vreg(ctx, v1628);
                            let v1630 = Some(v1629);
                            // Rule at src\isa\riscv64\lower.isle line 1555.
                            return v1630;
                        }
                        let v1617 = C::ty_supported_float_full(ctx, v3);
                        if let Some(v1618) = v1617 {
                            let v1056 = constructor_put_in_freg(ctx, v567);
                            let v1625 = constructor_rv_fneg(ctx, v1618, v1056);
                            let v1626 = constructor_output_freg(ctx, v1625);
                            let v1627 = Some(v1626);
                            // Rule at src\isa\riscv64\lower.isle line 1552.
                            return v1627;
                        }
                    }
                }
                &Opcode::Fabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v572 = constructor_put_in_vreg(ctx, v567);
                            let v204 = &constructor_unmasked(ctx);
                            let v205 = C::vstate_from_type(ctx, v12);
                            let v1622 = constructor_rv_vfabs_v(ctx, v572, v204, v205);
                            let v1623 = constructor_output_vreg(ctx, v1622);
                            let v1624 = Some(v1623);
                            // Rule at src\isa\riscv64\lower.isle line 1548.
                            return v1624;
                        }
                        let v1617 = C::ty_supported_float_full(ctx, v3);
                        if let Some(v1618) = v1617 {
                            let v1056 = constructor_put_in_freg(ctx, v567);
                            let v1619 = constructor_rv_fabs(ctx, v1618, v1056);
                            let v1620 = constructor_output_freg(ctx, v1619);
                            let v1621 = Some(v1620);
                            // Rule at src\isa\riscv64\lower.isle line 1545.
                            return v1621;
                        }
                    }
                }
                &Opcode::Ceil => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v572 = constructor_put_in_vreg(ctx, v567);
                            let v2478 = constructor_gen_vec_round(ctx, v572, &FRM::RUP, v12);
                            let v2479 = constructor_output_vreg(ctx, v2478);
                            let v2480 = Some(v2479);
                            // Rule at src\isa\riscv64\lower.isle line 2576.
                            return v2480;
                        }
                        let v1617 = C::ty_supported_float_full(ctx, v3);
                        if let Some(v1618) = v1617 {
                            let v1056 = constructor_put_in_freg(ctx, v567);
                            let v2475 = constructor_gen_float_round(ctx, &FRM::RUP, v1056, v1618);
                            let v2476 = constructor_output_freg(ctx, v2475);
                            let v2477 = Some(v2476);
                            // Rule at src\isa\riscv64\lower.isle line 2573.
                            return v2477;
                        }
                    }
                }
                &Opcode::Floor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v572 = constructor_put_in_vreg(ctx, v567);
                            let v2485 = constructor_gen_vec_round(ctx, v572, &FRM::RDN, v12);
                            let v2486 = constructor_output_vreg(ctx, v2485);
                            let v2487 = Some(v2486);
                            // Rule at src\isa\riscv64\lower.isle line 2583.
                            return v2487;
                        }
                        let v1617 = C::ty_supported_float_full(ctx, v3);
                        if let Some(v1618) = v1617 {
                            let v1056 = constructor_put_in_freg(ctx, v567);
                            let v2482 = constructor_gen_float_round(ctx, &FRM::RDN, v1056, v1618);
                            let v2483 = constructor_output_freg(ctx, v2482);
                            let v2484 = Some(v2483);
                            // Rule at src\isa\riscv64\lower.isle line 2580.
                            return v2484;
                        }
                    }
                }
                &Opcode::Trunc => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v572 = constructor_put_in_vreg(ctx, v567);
                            let v2492 = constructor_gen_vec_round(ctx, v572, &FRM::RTZ, v12);
                            let v2493 = constructor_output_vreg(ctx, v2492);
                            let v2494 = Some(v2493);
                            // Rule at src\isa\riscv64\lower.isle line 2590.
                            return v2494;
                        }
                        let v1617 = C::ty_supported_float_full(ctx, v3);
                        if let Some(v1618) = v1617 {
                            let v1056 = constructor_put_in_freg(ctx, v567);
                            let v2489 = constructor_gen_float_round(ctx, &FRM::RTZ, v1056, v1618);
                            let v2490 = constructor_output_freg(ctx, v2489);
                            let v2491 = Some(v2490);
                            // Rule at src\isa\riscv64\lower.isle line 2587.
                            return v2491;
                        }
                    }
                }
                &Opcode::Nearest => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v572 = constructor_put_in_vreg(ctx, v567);
                            let v2498 = constructor_gen_vec_round(ctx, v572, &FRM::RNE, v12);
                            let v2499 = constructor_output_vreg(ctx, v2498);
                            let v2500 = Some(v2499);
                            // Rule at src\isa\riscv64\lower.isle line 2597.
                            return v2500;
                        }
                        let v1617 = C::ty_supported_float_full(ctx, v3);
                        if let Some(v1618) = v1617 {
                            let v1056 = constructor_put_in_freg(ctx, v567);
                            let v2495 = constructor_gen_float_round(ctx, &FRM::RNE, v1056, v1618);
                            let v2496 = constructor_output_freg(ctx, v2495);
                            let v2497 = Some(v2496);
                            // Rule at src\isa\riscv64\lower.isle line 2594.
                            return v2497;
                        }
                    }
                }
                &Opcode::ScalarToVector => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v2849 = C::i64_from_iconst(ctx, v567);
                            if let Some(v2850) = v2849 {
                                let v2851 = C::imm5_from_i64(ctx, v2850);
                                if let Some(v2852) = v2851 {
                                    let v2836 = C::zero_reg(ctx);
                                    let v205 = C::vstate_from_type(ctx, v12);
                                    let v2837 = constructor_rv_vmv_vx(ctx, v2836, v205);
                                    let v2844 = constructor_gen_vec_mask(ctx, 0x1_u64);
                                    let v2853 = constructor_rv_vmerge_vim(ctx, v2837, v2852, v2844, v205);
                                    let v2854 = constructor_output_vreg(ctx, v2853);
                                    let v2855 = Some(v2854);
                                    // Rule at src\isa\riscv64\lower.isle line 2978.
                                    return v2855;
                                }
                            }
                            let v831 = C::ty_vector_not_float(ctx, v12);
                            if let Some(v832) = v831 {
                                let v2836 = C::zero_reg(ctx);
                                let v205 = C::vstate_from_type(ctx, v12);
                                let v2837 = constructor_rv_vmv_vx(ctx, v2836, v205);
                                let v2844 = constructor_gen_vec_mask(ctx, 0x1_u64);
                                let v2845 = constructor_put_in_xreg(ctx, v567);
                                let v2846 = constructor_rv_vmerge_vxm(ctx, v2837, v2845, v2844, v205);
                                let v2847 = constructor_output_vreg(ctx, v2846);
                                let v2848 = Some(v2847);
                                // Rule at src\isa\riscv64\lower.isle line 2972.
                                return v2848;
                            }
                            let v2834 = C::ty_vector_float(ctx, v12);
                            if let Some(v2835) = v2834 {
                                let v2836 = C::zero_reg(ctx);
                                let v205 = C::vstate_from_type(ctx, v12);
                                let v2837 = constructor_rv_vmv_vx(ctx, v2836, v205);
                                let v2838 = constructor_put_in_freg(ctx, v567);
                                let v2839 = constructor_rv_vfmv_sf(ctx, v2838, v205);
                                let v2840 = constructor_gen_vec_mask(ctx, 0x1_u64);
                                let v2841 = constructor_rv_vmerge_vvm(ctx, v2837, v2839, v2840, v205);
                                let v2842 = constructor_output_vreg(ctx, v2841);
                                let v2843 = Some(v2842);
                                // Rule at src\isa\riscv64\lower.isle line 2965.
                                return v2843;
                            }
                        }
                    }
                }
                &Opcode::Bmask => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v2539 = constructor_lower_bmask(ctx, v567, v3);
                        let v2540 = C::output(ctx, v2539);
                        let v2541 = Some(v2540);
                        // Rule at src\isa\riscv64\lower.isle line 2629.
                        return v2541;
                    }
                }
                &Opcode::Ireduce => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v568 = C::put_in_regs(ctx, v567);
                        let v1062 = C::value_regs_get(ctx, v568, 0x0_usize);
                        let v1757 = constructor_output_reg(ctx, v1062);
                        let v1758 = Some(v1757);
                        // Rule at src\isa\riscv64\lower.isle line 1729.
                        return v1758;
                    }
                }
                &Opcode::SwidenLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v1077 = C::def_inst(ctx, v567);
                            if let Some(v1078) = v1077 {
                                let v1079 = &C::inst_data_value(ctx, v1078);
                                if let &InstructionData::Unary {
                                    opcode: ref v2750,
                                    arg: v2751,
                                } = v1079 {
                                    if let &Opcode::SwidenLow = v2750 {
                                        let v2764 = C::def_inst(ctx, v2751);
                                        if let Some(v2765) = v2764 {
                                            let v2766 = &C::inst_data_value(ctx, v2765);
                                            if let &InstructionData::Unary {
                                                opcode: ref v2767,
                                                arg: v2768,
                                            } = v2766 {
                                                if let &Opcode::SwidenLow = v2767 {
                                                    let v2774 = constructor_put_in_vreg(ctx, v2768);
                                                    let v204 = &constructor_unmasked(ctx);
                                                    let v205 = C::vstate_from_type(ctx, v12);
                                                    let v2795 = constructor_rv_vsext_vf8(ctx, v2774, v204, v205);
                                                    let v2796 = constructor_output_vreg(ctx, v2795);
                                                    let v2797 = Some(v2796);
                                                    // Rule at src\isa\riscv64\lower.isle line 2896.
                                                    return v2797;
                                                }
                                            }
                                        }
                                        let v2758 = constructor_put_in_vreg(ctx, v2751);
                                        let v204 = &constructor_unmasked(ctx);
                                        let v205 = C::vstate_from_type(ctx, v12);
                                        let v2792 = constructor_rv_vsext_vf4(ctx, v2758, v204, v205);
                                        let v2793 = constructor_output_vreg(ctx, v2792);
                                        let v2794 = Some(v2793);
                                        // Rule at src\isa\riscv64\lower.isle line 2893.
                                        return v2794;
                                    }
                                }
                            }
                            let v572 = constructor_put_in_vreg(ctx, v567);
                            let v204 = &constructor_unmasked(ctx);
                            let v205 = C::vstate_from_type(ctx, v12);
                            let v2789 = constructor_rv_vsext_vf2(ctx, v572, v204, v205);
                            let v2790 = constructor_output_vreg(ctx, v2789);
                            let v2791 = Some(v2790);
                            // Rule at src\isa\riscv64\lower.isle line 2890.
                            return v2791;
                        }
                    }
                }
                &Opcode::SwidenHigh => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v1077 = C::def_inst(ctx, v567);
                            if let Some(v1078) = v1077 {
                                let v1079 = &C::inst_data_value(ctx, v1078);
                                if let &InstructionData::Unary {
                                    opcode: ref v2750,
                                    arg: v2751,
                                } = v1079 {
                                    if let &Opcode::SwidenHigh = v2750 {
                                        let v2764 = C::def_inst(ctx, v2751);
                                        if let Some(v2765) = v2764 {
                                            let v2766 = &C::inst_data_value(ctx, v2765);
                                            if let &InstructionData::Unary {
                                                opcode: ref v2767,
                                                arg: v2768,
                                            } = v2766 {
                                                if let &Opcode::SwidenHigh = v2767 {
                                                    let v2769 = C::value_type(ctx, v2768);
                                                    let v2770 = C::ty_lane_count(ctx, v2769);
                                                    let v2754 = C::ty_lane_count(ctx, v12);
                                                    let v2771 = C::u64_sub(ctx, v2770, v2754);
                                                    let v2772 = C::uimm5_from_u64(ctx, v2771);
                                                    if let Some(v2773) = v2772 {
                                                        let v2774 = constructor_put_in_vreg(ctx, v2768);
                                                        let v204 = &constructor_unmasked(ctx);
                                                        let v2775 = C::vstate_from_type(ctx, v2769);
                                                        let v2776 = constructor_rv_vslidedown_vi(ctx, v2774, v2773, v204, v2775);
                                                        let v205 = C::vstate_from_type(ctx, v12);
                                                        let v2777 = constructor_rv_vsext_vf8(ctx, v2776, v204, v205);
                                                        let v2778 = constructor_output_vreg(ctx, v2777);
                                                        let v2779 = Some(v2778);
                                                        // Rule at src\isa\riscv64\lower.isle line 2870.
                                                        return v2779;
                                                    }
                                                }
                                            }
                                        }
                                        let v2752 = C::value_type(ctx, v2751);
                                        let v2753 = C::ty_lane_count(ctx, v2752);
                                        let v2754 = C::ty_lane_count(ctx, v12);
                                        let v2755 = C::u64_sub(ctx, v2753, v2754);
                                        let v2756 = C::uimm5_from_u64(ctx, v2755);
                                        if let Some(v2757) = v2756 {
                                            let v2758 = constructor_put_in_vreg(ctx, v2751);
                                            let v204 = &constructor_unmasked(ctx);
                                            let v2759 = C::vstate_from_type(ctx, v2752);
                                            let v2760 = constructor_rv_vslidedown_vi(ctx, v2758, v2757, v204, v2759);
                                            let v205 = C::vstate_from_type(ctx, v12);
                                            let v2761 = constructor_rv_vsext_vf4(ctx, v2760, v204, v205);
                                            let v2762 = constructor_output_vreg(ctx, v2761);
                                            let v2763 = Some(v2762);
                                            // Rule at src\isa\riscv64\lower.isle line 2866.
                                            return v2763;
                                        }
                                    }
                                }
                            }
                            let v572 = constructor_put_in_vreg(ctx, v567);
                            let v1221 = C::value_type(ctx, v567);
                            let v2746 = constructor_gen_slidedown_half(ctx, v1221, v572);
                            let v204 = &constructor_unmasked(ctx);
                            let v205 = C::vstate_from_type(ctx, v12);
                            let v2747 = constructor_rv_vsext_vf2(ctx, v2746, v204, v205);
                            let v2748 = constructor_output_vreg(ctx, v2747);
                            let v2749 = Some(v2748);
                            // Rule at src\isa\riscv64\lower.isle line 2863.
                            return v2749;
                        }
                    }
                }
                &Opcode::UwidenLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v1077 = C::def_inst(ctx, v567);
                            if let Some(v1078) = v1077 {
                                let v1079 = &C::inst_data_value(ctx, v1078);
                                if let &InstructionData::Unary {
                                    opcode: ref v2750,
                                    arg: v2751,
                                } = v1079 {
                                    if let &Opcode::UwidenLow = v2750 {
                                        let v2764 = C::def_inst(ctx, v2751);
                                        if let Some(v2765) = v2764 {
                                            let v2766 = &C::inst_data_value(ctx, v2765);
                                            if let &InstructionData::Unary {
                                                opcode: ref v2767,
                                                arg: v2768,
                                            } = v2766 {
                                                if let &Opcode::UwidenLow = v2767 {
                                                    let v2774 = constructor_put_in_vreg(ctx, v2768);
                                                    let v204 = &constructor_unmasked(ctx);
                                                    let v205 = C::vstate_from_type(ctx, v12);
                                                    let v2804 = constructor_rv_vzext_vf8(ctx, v2774, v204, v205);
                                                    let v2805 = constructor_output_vreg(ctx, v2804);
                                                    let v2806 = Some(v2805);
                                                    // Rule at src\isa\riscv64\lower.isle line 2907.
                                                    return v2806;
                                                }
                                            }
                                        }
                                        let v2758 = constructor_put_in_vreg(ctx, v2751);
                                        let v204 = &constructor_unmasked(ctx);
                                        let v205 = C::vstate_from_type(ctx, v12);
                                        let v2801 = constructor_rv_vzext_vf4(ctx, v2758, v204, v205);
                                        let v2802 = constructor_output_vreg(ctx, v2801);
                                        let v2803 = Some(v2802);
                                        // Rule at src\isa\riscv64\lower.isle line 2904.
                                        return v2803;
                                    }
                                }
                            }
                            let v572 = constructor_put_in_vreg(ctx, v567);
                            let v204 = &constructor_unmasked(ctx);
                            let v205 = C::vstate_from_type(ctx, v12);
                            let v2798 = constructor_rv_vzext_vf2(ctx, v572, v204, v205);
                            let v2799 = constructor_output_vreg(ctx, v2798);
                            let v2800 = Some(v2799);
                            // Rule at src\isa\riscv64\lower.isle line 2901.
                            return v2800;
                        }
                    }
                }
                &Opcode::UwidenHigh => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v1077 = C::def_inst(ctx, v567);
                            if let Some(v1078) = v1077 {
                                let v1079 = &C::inst_data_value(ctx, v1078);
                                if let &InstructionData::Unary {
                                    opcode: ref v2750,
                                    arg: v2751,
                                } = v1079 {
                                    if let &Opcode::UwidenHigh = v2750 {
                                        let v2764 = C::def_inst(ctx, v2751);
                                        if let Some(v2765) = v2764 {
                                            let v2766 = &C::inst_data_value(ctx, v2765);
                                            if let &InstructionData::Unary {
                                                opcode: ref v2767,
                                                arg: v2768,
                                            } = v2766 {
                                                if let &Opcode::UwidenHigh = v2767 {
                                                    let v2769 = C::value_type(ctx, v2768);
                                                    let v2770 = C::ty_lane_count(ctx, v2769);
                                                    let v2754 = C::ty_lane_count(ctx, v12);
                                                    let v2771 = C::u64_sub(ctx, v2770, v2754);
                                                    let v2772 = C::uimm5_from_u64(ctx, v2771);
                                                    if let Some(v2773) = v2772 {
                                                        let v2774 = constructor_put_in_vreg(ctx, v2768);
                                                        let v204 = &constructor_unmasked(ctx);
                                                        let v2775 = C::vstate_from_type(ctx, v2769);
                                                        let v2776 = constructor_rv_vslidedown_vi(ctx, v2774, v2773, v204, v2775);
                                                        let v205 = C::vstate_from_type(ctx, v12);
                                                        let v2786 = constructor_rv_vzext_vf8(ctx, v2776, v204, v205);
                                                        let v2787 = constructor_output_vreg(ctx, v2786);
                                                        let v2788 = Some(v2787);
                                                        // Rule at src\isa\riscv64\lower.isle line 2884.
                                                        return v2788;
                                                    }
                                                }
                                            }
                                        }
                                        let v2752 = C::value_type(ctx, v2751);
                                        let v2753 = C::ty_lane_count(ctx, v2752);
                                        let v2754 = C::ty_lane_count(ctx, v12);
                                        let v2755 = C::u64_sub(ctx, v2753, v2754);
                                        let v2756 = C::uimm5_from_u64(ctx, v2755);
                                        if let Some(v2757) = v2756 {
                                            let v2758 = constructor_put_in_vreg(ctx, v2751);
                                            let v204 = &constructor_unmasked(ctx);
                                            let v2759 = C::vstate_from_type(ctx, v2752);
                                            let v2760 = constructor_rv_vslidedown_vi(ctx, v2758, v2757, v204, v2759);
                                            let v205 = C::vstate_from_type(ctx, v12);
                                            let v2783 = constructor_rv_vzext_vf4(ctx, v2760, v204, v205);
                                            let v2784 = constructor_output_vreg(ctx, v2783);
                                            let v2785 = Some(v2784);
                                            // Rule at src\isa\riscv64\lower.isle line 2880.
                                            return v2785;
                                        }
                                    }
                                }
                            }
                            let v572 = constructor_put_in_vreg(ctx, v567);
                            let v1221 = C::value_type(ctx, v567);
                            let v2746 = constructor_gen_slidedown_half(ctx, v1221, v572);
                            let v204 = &constructor_unmasked(ctx);
                            let v205 = C::vstate_from_type(ctx, v12);
                            let v2780 = constructor_rv_vzext_vf2(ctx, v2746, v204, v205);
                            let v2781 = constructor_output_vreg(ctx, v2780);
                            let v2782 = Some(v2781);
                            // Rule at src\isa\riscv64\lower.isle line 2877.
                            return v2782;
                        }
                    }
                }
                &Opcode::Uextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v749 = C::fits_in_64(ctx, v3);
                        if let Some(v750) = v749 {
                            let v1077 = C::def_inst(ctx, v567);
                            if let Some(v1078) = v1077 {
                                let v1079 = &C::inst_data_value(ctx, v1078);
                                if let &InstructionData::Load {
                                    opcode: ref v1206,
                                    arg: v1207,
                                    flags: v1208,
                                    offset: v1209,
                                } = v1079 {
                                    if let &Opcode::Load = v1206 {
                                        let v1210 = C::sinkable_inst(ctx, v567);
                                        if let Some(v1211) = v1210 {
                                            let v1212 = C::first_result(ctx, v1211);
                                            if let Some(v1213) = v1212 {
                                                let v1215 = C::offset32_to_i32(ctx, v1209);
                                                let v1216 = constructor_amode(ctx, v1207, v1215);
                                                let v1214 = C::value_type(ctx, v1213);
                                                let v1217 = &constructor_uextend_load_op(ctx, v1214);
                                                let v1218 = constructor_gen_sunk_load(ctx, v1211, v1216, v1217, v1208);
                                                let v1219 = constructor_output_reg(ctx, v1218);
                                                let v1220 = Some(v1219);
                                                // Rule at src\isa\riscv64\lower.isle line 1160.
                                                return v1220;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if v3 == I128 {
                            let v1152 = constructor_zext(ctx, v567);
                            let v1202 = constructor_imm(ctx, I64, 0x0_u64);
                            let v1201 = C::xreg_to_reg(ctx, v1152);
                            let v1203 = C::value_regs(ctx, v1201, v1202);
                            let v1204 = C::output(ctx, v1203);
                            let v1205 = Some(v1204);
                            // Rule at src\isa\riscv64\lower.isle line 1156.
                            return v1205;
                        }
                        if let Some(v750) = v749 {
                            let v1152 = constructor_zext(ctx, v567);
                            let v1199 = constructor_output_xreg(ctx, v1152);
                            let v1200 = Some(v1199);
                            // Rule at src\isa\riscv64\lower.isle line 1153.
                            return v1200;
                        }
                    }
                }
                &Opcode::Sextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v749 = C::fits_in_64(ctx, v3);
                        if let Some(v750) = v749 {
                            let v1077 = C::def_inst(ctx, v567);
                            if let Some(v1078) = v1077 {
                                let v1079 = &C::inst_data_value(ctx, v1078);
                                if let &InstructionData::Load {
                                    opcode: ref v1206,
                                    arg: v1207,
                                    flags: v1208,
                                    offset: v1209,
                                } = v1079 {
                                    if let &Opcode::Load = v1206 {
                                        let v1210 = C::sinkable_inst(ctx, v567);
                                        if let Some(v1211) = v1210 {
                                            let v1212 = C::first_result(ctx, v1211);
                                            if let Some(v1213) = v1212 {
                                                let v1215 = C::offset32_to_i32(ctx, v1209);
                                                let v1216 = constructor_amode(ctx, v1207, v1215);
                                                let v1214 = C::value_type(ctx, v1213);
                                                let v1232 = &constructor_sextend_load_op(ctx, v1214);
                                                let v1233 = constructor_gen_sunk_load(ctx, v1211, v1216, v1232, v1208);
                                                let v1234 = constructor_output_reg(ctx, v1233);
                                                let v1235 = Some(v1234);
                                                // Rule at src\isa\riscv64\lower.isle line 1177.
                                                return v1235;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if v3 == I128 {
                            let v1167 = constructor_sext(ctx, v567);
                            let v1226 = C::imm12_const(ctx, 63_i32);
                            let v1227 = constructor_rv_srai(ctx, v1167, v1226);
                            let v1224 = C::xreg_to_reg(ctx, v1167);
                            let v1228 = C::xreg_to_reg(ctx, v1227);
                            let v1229 = C::value_regs(ctx, v1224, v1228);
                            let v1230 = C::output(ctx, v1229);
                            let v1231 = Some(v1230);
                            // Rule at src\isa\riscv64\lower.isle line 1172.
                            return v1231;
                        }
                        if let Some(v750) = v749 {
                            let v1167 = constructor_sext(ctx, v567);
                            let v1222 = constructor_output_xreg(ctx, v1167);
                            let v1223 = Some(v1222);
                            // Rule at src\isa\riscv64\lower.isle line 1169.
                            return v1223;
                        }
                    }
                }
                &Opcode::Fpromote => {
                    let v1056 = constructor_put_in_freg(ctx, v567);
                    let v1759 = constructor_rv_fcvtds(ctx, v1056);
                    let v1760 = constructor_output_freg(ctx, v1759);
                    let v1761 = Some(v1760);
                    // Rule at src\isa\riscv64\lower.isle line 1733.
                    return v1761;
                }
                &Opcode::Fdemote => {
                    let v1056 = constructor_put_in_freg(ctx, v567);
                    let v1765 = constructor_rv_fcvtsd(ctx, &FRM::RNE, v1056);
                    let v1766 = constructor_output_freg(ctx, v1765);
                    let v1767 = Some(v1766);
                    // Rule at src\isa\riscv64\lower.isle line 1743.
                    return v1767;
                }
                &Opcode::Fvdemote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            if v12 == F32X4 {
                                let v1769 = C::i8_to_imm5(ctx, 0_i8);
                                if let Some(v1770) = v1769 {
                                    let v572 = constructor_put_in_vreg(ctx, v567);
                                    let v204 = &constructor_unmasked(ctx);
                                    let v205 = C::vstate_from_type(ctx, v12);
                                    let v1771 = C::vstate_mf2(ctx, v205);
                                    let v1772 = constructor_rv_vfncvt_f_f_w(ctx, v572, v204, v1771);
                                    let v1774 = constructor_gen_vec_mask(ctx, 0xc_u64);
                                    let v1775 = constructor_rv_vmerge_vim(ctx, v1772, v1770, v1774, v205);
                                    let v1776 = constructor_output_vreg(ctx, v1775);
                                    let v1777 = Some(v1776);
                                    // Rule at src\isa\riscv64\lower.isle line 1750.
                                    return v1777;
                                }
                            }
                        }
                    }
                }
                &Opcode::FvpromoteLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v219 = C::ty_half_width(ctx, v12);
                            if let Some(v220) = v219 {
                                let v572 = constructor_put_in_vreg(ctx, v567);
                                let v204 = &constructor_unmasked(ctx);
                                let v224 = C::vstate_from_type(ctx, v220);
                                let v225 = C::vstate_mf2(ctx, v224);
                                let v1762 = constructor_rv_vfwcvt_f_f_v(ctx, v572, v204, v225);
                                let v1763 = constructor_output_vreg(ctx, v1762);
                                let v1764 = Some(v1763);
                                // Rule at src\isa\riscv64\lower.isle line 1738.
                                return v1764;
                            }
                        }
                    }
                }
                &Opcode::FcvtToUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1056 = constructor_put_in_freg(ctx, v567);
                        let v2329 = constructor_put_in_freg(ctx, v567);
                        let v1221 = C::value_type(ctx, v567);
                        let v2330 = constructor_rv_feq(ctx, v1221, v1056, v2329);
                        let v2332 = constructor_gen_trapz(ctx, v2330, &TrapCode::BAD_CONVERSION_TO_INTEGER);
                        let v2333 = false;
                        let v2334 = C::fcvt_umin_bound(ctx, v1221, v2333);
                        let v2335 = constructor_imm(ctx, v1221, v2334);
                        let v2336 = C::freg_new(ctx, v2335);
                        let v2337 = constructor_put_in_freg(ctx, v567);
                        let v2338 = constructor_rv_fle(ctx, v1221, v2337, v2336);
                        let v2340 = constructor_gen_trapnz(ctx, v2338, &TrapCode::INTEGER_OVERFLOW);
                        let v3 = C::value_type(ctx, v2);
                        let v2341 = C::fcvt_umax_bound(ctx, v1221, v3, v2333);
                        let v2342 = constructor_imm(ctx, v1221, v2341);
                        let v2343 = C::freg_new(ctx, v2342);
                        let v2344 = constructor_put_in_freg(ctx, v567);
                        let v2345 = constructor_rv_fge(ctx, v1221, v2344, v2343);
                        let v2346 = constructor_gen_trapnz(ctx, v2345, &TrapCode::INTEGER_OVERFLOW);
                        let v2347 = constructor_put_in_freg(ctx, v567);
                        let v2348 = constructor_lower_inbounds_fcvt_to_uint(ctx, v3, v1221, v2347);
                        let v2349 = constructor_output_xreg(ctx, v2348);
                        let v2350 = Some(v2349);
                        // Rule at src\isa\riscv64\lower.isle line 2391.
                        return v2350;
                    }
                }
                &Opcode::FcvtToSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1056 = constructor_put_in_freg(ctx, v567);
                        let v2329 = constructor_put_in_freg(ctx, v567);
                        let v1221 = C::value_type(ctx, v567);
                        let v2330 = constructor_rv_feq(ctx, v1221, v1056, v2329);
                        let v2332 = constructor_gen_trapz(ctx, v2330, &TrapCode::BAD_CONVERSION_TO_INTEGER);
                        let v3 = C::value_type(ctx, v2);
                        let v2333 = false;
                        let v2351 = C::fcvt_smin_bound(ctx, v1221, v3, v2333);
                        let v2352 = constructor_imm(ctx, v1221, v2351);
                        let v2353 = C::freg_new(ctx, v2352);
                        let v2337 = constructor_put_in_freg(ctx, v567);
                        let v2354 = constructor_rv_fle(ctx, v1221, v2337, v2353);
                        let v2355 = constructor_gen_trapnz(ctx, v2354, &TrapCode::INTEGER_OVERFLOW);
                        let v2356 = C::fcvt_smax_bound(ctx, v1221, v3, v2333);
                        let v2357 = constructor_imm(ctx, v1221, v2356);
                        let v2358 = C::freg_new(ctx, v2357);
                        let v2344 = constructor_put_in_freg(ctx, v567);
                        let v2359 = constructor_rv_fge(ctx, v1221, v2344, v2358);
                        let v2360 = constructor_gen_trapnz(ctx, v2359, &TrapCode::INTEGER_OVERFLOW);
                        let v2347 = constructor_put_in_freg(ctx, v567);
                        let v2361 = constructor_lower_inbounds_fcvt_to_sint(ctx, v3, v1221, v2347);
                        let v2362 = constructor_output_xreg(ctx, v2361);
                        let v2363 = Some(v2362);
                        // Rule at src\isa\riscv64\lower.isle line 2408.
                        return v2363;
                    }
                }
                &Opcode::FcvtToUintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v1769 = C::i8_to_imm5(ctx, 0_i8);
                            if let Some(v1770) = v1769 {
                                let v572 = constructor_put_in_vreg(ctx, v567);
                                let v2370 = constructor_put_in_vreg(ctx, v567);
                                let v204 = &constructor_unmasked(ctx);
                                let v1221 = C::value_type(ctx, v567);
                                let v2371 = C::vstate_from_type(ctx, v1221);
                                let v2372 = constructor_rv_vmfne_vv(ctx, v572, v2370, v204, v2371);
                                let v2373 = constructor_put_in_vreg(ctx, v567);
                                let v2382 = constructor_rv_vfcvt_rtz_xu_f_v(ctx, v2373, v204, v2371);
                                let v2383 = constructor_rv_vmerge_vim(ctx, v2382, v1770, v2372, v2371);
                                let v2384 = constructor_output_vreg(ctx, v2383);
                                let v2385 = Some(v2384);
                                // Rule at src\isa\riscv64\lower.isle line 2486.
                                return v2385;
                            }
                        }
                        let v1221 = C::value_type(ctx, v567);
                        let v2364 = C::ty_supported_float_full(ctx, v1221);
                        if let Some(v2365) = v2364 {
                            let v1056 = constructor_put_in_freg(ctx, v567);
                            let v2329 = constructor_put_in_freg(ctx, v567);
                            let v2378 = constructor_lower_fcvt_to_uint_sat(ctx, v2365, v3, v2329);
                            let v2379 = constructor_handle_fcvt_to_int_nan(ctx, v2365, v1056, v2378);
                            let v2380 = constructor_output_xreg(ctx, v2379);
                            let v2381 = Some(v2380);
                            // Rule at src\isa\riscv64\lower.isle line 2467.
                            return v2381;
                        }
                    }
                }
                &Opcode::FcvtToSintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v1769 = C::i8_to_imm5(ctx, 0_i8);
                            if let Some(v1770) = v1769 {
                                let v572 = constructor_put_in_vreg(ctx, v567);
                                let v2370 = constructor_put_in_vreg(ctx, v567);
                                let v204 = &constructor_unmasked(ctx);
                                let v1221 = C::value_type(ctx, v567);
                                let v2371 = C::vstate_from_type(ctx, v1221);
                                let v2372 = constructor_rv_vmfne_vv(ctx, v572, v2370, v204, v2371);
                                let v2373 = constructor_put_in_vreg(ctx, v567);
                                let v2374 = constructor_rv_vfcvt_rtz_x_f_v(ctx, v2373, v204, v2371);
                                let v2375 = constructor_rv_vmerge_vim(ctx, v2374, v1770, v2372, v2371);
                                let v2376 = constructor_output_vreg(ctx, v2375);
                                let v2377 = Some(v2376);
                                // Rule at src\isa\riscv64\lower.isle line 2459.
                                return v2377;
                            }
                        }
                        let v1221 = C::value_type(ctx, v567);
                        let v2364 = C::ty_supported_float_full(ctx, v1221);
                        if let Some(v2365) = v2364 {
                            let v1056 = constructor_put_in_freg(ctx, v567);
                            let v2329 = constructor_put_in_freg(ctx, v567);
                            let v2366 = constructor_lower_fcvt_to_sint_sat(ctx, v2365, v3, v2329);
                            let v2367 = constructor_handle_fcvt_to_int_nan(ctx, v2365, v1056, v2366);
                            let v2368 = constructor_output_xreg(ctx, v2367);
                            let v2369 = Some(v2368);
                            // Rule at src\isa\riscv64\lower.isle line 2424.
                            return v2369;
                        }
                    }
                }
                &Opcode::FcvtFromUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v572 = constructor_put_in_vreg(ctx, v567);
                            let v204 = &constructor_unmasked(ctx);
                            let v1221 = C::value_type(ctx, v567);
                            let v2371 = C::vstate_from_type(ctx, v1221);
                            let v2427 = constructor_rv_vfcvt_f_xu_v(ctx, v572, v204, v2371);
                            let v2428 = constructor_output_vreg(ctx, v2427);
                            let v2429 = Some(v2428);
                            // Rule at src\isa\riscv64\lower.isle line 2533.
                            return v2429;
                        }
                        match v3 {
                            F32 => {
                                let v1221 = C::value_type(ctx, v567);
                                match v1221 {
                                    I32 => {
                                        let v1052 = constructor_put_in_xreg(ctx, v567);
                                        let v2412 = constructor_rv_fcvtswu(ctx, &FRM::RNE, v1052);
                                        let v2413 = constructor_output_freg(ctx, v2412);
                                        let v2414 = Some(v2413);
                                        // Rule at src\isa\riscv64\lower.isle line 2518.
                                        return v2414;
                                    }
                                    I64 => {
                                        let v1052 = constructor_put_in_xreg(ctx, v567);
                                        let v2415 = constructor_rv_fcvtslu(ctx, &FRM::RNE, v1052);
                                        let v2416 = constructor_output_freg(ctx, v2415);
                                        let v2417 = Some(v2416);
                                        // Rule at src\isa\riscv64\lower.isle line 2521.
                                        return v2417;
                                    }
                                    _ => {}
                                }
                                let v2386 = C::fits_in_16(ctx, v1221);
                                if let Some(v2387) = v2386 {
                                    let v1152 = constructor_zext(ctx, v567);
                                    let v2409 = constructor_rv_fcvtslu(ctx, &FRM::RNE, v1152);
                                    let v2410 = constructor_output_freg(ctx, v2409);
                                    let v2411 = Some(v2410);
                                    // Rule at src\isa\riscv64\lower.isle line 2515.
                                    return v2411;
                                }
                            }
                            F64 => {
                                let v1221 = C::value_type(ctx, v567);
                                match v1221 {
                                    I32 => {
                                        let v1052 = constructor_put_in_xreg(ctx, v567);
                                        let v2421 = constructor_rv_fcvtdwu(ctx, v1052);
                                        let v2422 = constructor_output_freg(ctx, v2421);
                                        let v2423 = Some(v2422);
                                        // Rule at src\isa\riscv64\lower.isle line 2527.
                                        return v2423;
                                    }
                                    I64 => {
                                        let v1052 = constructor_put_in_xreg(ctx, v567);
                                        let v2424 = constructor_rv_fcvtdlu(ctx, &FRM::RNE, v1052);
                                        let v2425 = constructor_output_freg(ctx, v2424);
                                        let v2426 = Some(v2425);
                                        // Rule at src\isa\riscv64\lower.isle line 2530.
                                        return v2426;
                                    }
                                    _ => {}
                                }
                                let v2386 = C::fits_in_16(ctx, v1221);
                                if let Some(v2387) = v2386 {
                                    let v1152 = constructor_zext(ctx, v567);
                                    let v2418 = constructor_rv_fcvtdlu(ctx, &FRM::RNE, v1152);
                                    let v2419 = constructor_output_freg(ctx, v2418);
                                    let v2420 = Some(v2419);
                                    // Rule at src\isa\riscv64\lower.isle line 2524.
                                    return v2420;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::FcvtFromSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v572 = constructor_put_in_vreg(ctx, v567);
                            let v204 = &constructor_unmasked(ctx);
                            let v1221 = C::value_type(ctx, v567);
                            let v2371 = C::vstate_from_type(ctx, v1221);
                            let v2406 = constructor_rv_vfcvt_f_x_v(ctx, v572, v204, v2371);
                            let v2407 = constructor_output_vreg(ctx, v2406);
                            let v2408 = Some(v2407);
                            // Rule at src\isa\riscv64\lower.isle line 2511.
                            return v2408;
                        }
                        match v3 {
                            F32 => {
                                let v1221 = C::value_type(ctx, v567);
                                match v1221 {
                                    I32 => {
                                        let v1052 = constructor_put_in_xreg(ctx, v567);
                                        let v2391 = constructor_rv_fcvtsw(ctx, &FRM::RNE, v1052);
                                        let v2392 = constructor_output_freg(ctx, v2391);
                                        let v2393 = Some(v2392);
                                        // Rule at src\isa\riscv64\lower.isle line 2496.
                                        return v2393;
                                    }
                                    I64 => {
                                        let v1052 = constructor_put_in_xreg(ctx, v567);
                                        let v2394 = constructor_rv_fcvtsl(ctx, &FRM::RNE, v1052);
                                        let v2395 = constructor_output_freg(ctx, v2394);
                                        let v2396 = Some(v2395);
                                        // Rule at src\isa\riscv64\lower.isle line 2499.
                                        return v2396;
                                    }
                                    _ => {}
                                }
                                let v2386 = C::fits_in_16(ctx, v1221);
                                if let Some(v2387) = v2386 {
                                    let v1167 = constructor_sext(ctx, v567);
                                    let v2388 = constructor_rv_fcvtsl(ctx, &FRM::RNE, v1167);
                                    let v2389 = constructor_output_freg(ctx, v2388);
                                    let v2390 = Some(v2389);
                                    // Rule at src\isa\riscv64\lower.isle line 2493.
                                    return v2390;
                                }
                            }
                            F64 => {
                                let v1221 = C::value_type(ctx, v567);
                                match v1221 {
                                    I32 => {
                                        let v1052 = constructor_put_in_xreg(ctx, v567);
                                        let v2400 = constructor_rv_fcvtdw(ctx, v1052);
                                        let v2401 = constructor_output_freg(ctx, v2400);
                                        let v2402 = Some(v2401);
                                        // Rule at src\isa\riscv64\lower.isle line 2505.
                                        return v2402;
                                    }
                                    I64 => {
                                        let v1052 = constructor_put_in_xreg(ctx, v567);
                                        let v2403 = constructor_rv_fcvtdl(ctx, &FRM::RNE, v1052);
                                        let v2404 = constructor_output_freg(ctx, v2403);
                                        let v2405 = Some(v2404);
                                        // Rule at src\isa\riscv64\lower.isle line 2508.
                                        return v2405;
                                    }
                                    _ => {}
                                }
                                let v2386 = C::fits_in_16(ctx, v1221);
                                if let Some(v2387) = v2386 {
                                    let v1167 = constructor_sext(ctx, v567);
                                    let v2397 = constructor_rv_fcvtdl(ctx, &FRM::RNE, v1167);
                                    let v2398 = constructor_output_freg(ctx, v2397);
                                    let v2399 = Some(v2398);
                                    // Rule at src\isa\riscv64\lower.isle line 2502.
                                    return v2399;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Isplit => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1077 = C::def_inst(ctx, v567);
                        if let Some(v1078) = v1077 {
                            let v1079 = &C::inst_data_value(ctx, v1078);
                            if let &InstructionData::Binary {
                                opcode: ref v1080,
                                args: ref v1081,
                            } = v1079 {
                                if let &Opcode::Imul = v1080 {
                                    let v1998 = C::first_result(ctx, v1078);
                                    if let Some(v1999) = v1998 {
                                        let v2000 = C::value_type(ctx, v1999);
                                        if v2000 == I128 {
                                            let v1082 = C::unpack_value_array_2(ctx, v1081);
                                            let v2001 = C::def_inst(ctx, v1082.0);
                                            if let Some(v2002) = v2001 {
                                                let v2003 = &C::inst_data_value(ctx, v2002);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v2004,
                                                    arg: v2005,
                                                } = v2003 {
                                                    match v2004 {
                                                        &Opcode::Uextend => {
                                                            let v2006 = C::def_inst(ctx, v1082.1);
                                                            if let Some(v2007) = v2006 {
                                                                let v2008 = &C::inst_data_value(ctx, v2007);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v2009,
                                                                    arg: v2010,
                                                                } = v2008 {
                                                                    if let &Opcode::Uextend = v2009 {
                                                                        let v2011 = C::value_is_unused(ctx, v2);
                                                                        if v2011 == true {
                                                                            let v2012 = C::invalid_reg(ctx);
                                                                            let v2013 = C::value_reg(ctx, v2012);
                                                                            let v2014 = constructor_zext(ctx, v2005);
                                                                            let v2015 = constructor_zext(ctx, v2010);
                                                                            let v2016 = constructor_rv_mulhu(ctx, v2014, v2015);
                                                                            let v2017 = C::xreg_to_reg(ctx, v2016);
                                                                            let v2018 = C::value_reg(ctx, v2017);
                                                                            let v2019 = C::output_pair(ctx, v2013, v2018);
                                                                            let v2020 = Some(v2019);
                                                                            // Rule at src\isa\riscv64\lower.isle line 1978.
                                                                            return v2020;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Sextend => {
                                                            let v2006 = C::def_inst(ctx, v1082.1);
                                                            if let Some(v2007) = v2006 {
                                                                let v2008 = &C::inst_data_value(ctx, v2007);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v2009,
                                                                    arg: v2010,
                                                                } = v2008 {
                                                                    if let &Opcode::Sextend = v2009 {
                                                                        let v2011 = C::value_is_unused(ctx, v2);
                                                                        if v2011 == true {
                                                                            let v2012 = C::invalid_reg(ctx);
                                                                            let v2013 = C::value_reg(ctx, v2012);
                                                                            let v2021 = constructor_sext(ctx, v2005);
                                                                            let v2022 = constructor_sext(ctx, v2010);
                                                                            let v2023 = constructor_rv_mulh(ctx, v2021, v2022);
                                                                            let v2024 = C::xreg_to_reg(ctx, v2023);
                                                                            let v2025 = C::value_reg(ctx, v2024);
                                                                            let v2026 = C::output_pair(ctx, v2013, v2025);
                                                                            let v2027 = Some(v2026);
                                                                            // Rule at src\isa\riscv64\lower.isle line 1983.
                                                                            return v2027;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    let v568 = C::put_in_regs(ctx, v567);
                    let v1062 = C::value_regs_get(ctx, v568, 0x0_usize);
                    let v1063 = C::xreg_new(ctx, v1062);
                    let v1118 = C::put_in_regs(ctx, v567);
                    let v1119 = C::value_regs_get(ctx, v1118, 0x1_usize);
                    let v1120 = C::xreg_new(ctx, v1119);
                    let v1124 = C::xreg_to_reg(ctx, v1063);
                    let v1989 = C::value_reg(ctx, v1124);
                    let v1121 = C::xreg_to_reg(ctx, v1120);
                    let v1990 = C::value_reg(ctx, v1121);
                    let v1991 = C::output_pair(ctx, v1989, v1990);
                    let v1992 = Some(v1991);
                    // Rule at src\isa\riscv64\lower.isle line 1961.
                    return v1992;
                }
                _ => {}
            }
        }
        &InstructionData::UnaryConst {
            opcode: ref v13,
            constant_handle: v14,
        } => {
            match v13 {
                &Opcode::F128const => {
                    let v42 = C::u128_from_constant(ctx, v14);
                    if let Some(v43) = v42 {
                        let v52 = C::u128_replicated_u64(ctx, v43);
                        if let Some(v53) = v52 {
                            let v54 = constructor_imm(ctx, I64, v53);
                            let v55 = C::value_regs(ctx, v54, v54);
                            let v56 = C::output(ctx, v55);
                            let v57 = Some(v56);
                            // Rule at src\isa\riscv64\lower.isle line 36.
                            return v57;
                        }
                        let v45 = C::u128_low_bits(ctx, v43);
                        let v46 = constructor_imm(ctx, I64, v45);
                        let v47 = C::u128_high_bits(ctx, v43);
                        let v48 = constructor_imm(ctx, I64, v47);
                        let v49 = C::value_regs(ctx, v46, v48);
                        let v50 = C::output(ctx, v49);
                        let v51 = Some(v50);
                        // Rule at src\isa\riscv64\lower.isle line 33.
                        return v51;
                    }
                }
                &Opcode::Vconst => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_supported_vec(ctx, v3);
                        if let Some(v12) = v11 {
                            let v15 = C::const_to_vconst(ctx, v14);
                            let v16 = constructor_gen_constant(ctx, v12, v15);
                            let v17 = constructor_output_vreg(ctx, v16);
                            let v18 = Some(v17);
                            // Rule at src\isa\riscv64\lower.isle line 13.
                            return v18;
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::UnaryGlobalValue {
            opcode: ref v2430,
            global_value: v2431,
        } => {
            match v2430 {
                &Opcode::SymbolValue => {
                    let v2432 = C::symbol_value_data(ctx, v2431);
                    if let Some(v2433) = v2432 {
                        let v2437 = C::load_ext_name(ctx, v2433.0, v2433.2);
                        let v2438 = constructor_output_reg(ctx, v2437);
                        let v2439 = Some(v2438);
                        // Rule at src\isa\riscv64\lower.isle line 2538.
                        return v2439;
                    }
                }
                &Opcode::TlsValue => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v2432 = C::symbol_value_data(ctx, v2431);
                        if let Some(v2433) = v2432 {
                            let v3 = C::value_type(ctx, v2);
                            let v2440 = &C::tls_model(ctx, v3);
                            if let &TlsModel::ElfGd = v2440 {
                                let v2441 = constructor_elf_tls_get_addr(ctx, v2433.0);
                                let v2442 = constructor_output_reg(ctx, v2441);
                                let v2443 = Some(v2442);
                                // Rule at src\isa\riscv64\lower.isle line 2543.
                                return v2443;
                            }
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::UnaryIeee16 {
            opcode: ref v19,
            imm: v20,
        } => {
            if let &Opcode::F16const = v19 {
                let v21 = C::u16_from_ieee16(ctx, v20);
                let v23 = C::u16_as_u64(ctx, v21);
                let v24 = constructor_imm(ctx, F16, v23);
                let v25 = constructor_output_reg(ctx, v24);
                let v26 = Some(v25);
                // Rule at src\isa\riscv64\lower.isle line 18.
                return v26;
            }
        }
        &InstructionData::UnaryIeee32 {
            opcode: ref v27,
            imm: v28,
        } => {
            if let &Opcode::F32const = v27 {
                let v29 = C::u32_from_ieee32(ctx, v28);
                let v31 = C::u32_as_u64(ctx, v29);
                let v32 = constructor_imm(ctx, F32, v31);
                let v33 = constructor_output_reg(ctx, v32);
                let v34 = Some(v33);
                // Rule at src\isa\riscv64\lower.isle line 23.
                return v34;
            }
        }
        &InstructionData::UnaryIeee64 {
            opcode: ref v35,
            imm: v36,
        } => {
            if let &Opcode::F64const = v35 {
                let v37 = C::u64_from_ieee64(ctx, v36);
                let v39 = constructor_imm(ctx, F64, v37);
                let v40 = constructor_output_reg(ctx, v39);
                let v41 = Some(v40);
                // Rule at src\isa\riscv64\lower.isle line 28.
                return v41;
            }
        }
        &InstructionData::UnaryImm {
            opcode: ref v5,
            imm: v6,
        } => {
            if let &Opcode::Iconst = v5 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v7 = C::u64_from_imm64(ctx, v6);
                    let v8 = constructor_imm(ctx, v3, v7);
                    let v9 = constructor_output_reg(ctx, v8);
                    let v10 = Some(v9);
                    // Rule at src\isa\riscv64\lower.isle line 8.
                    return v10;
                }
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term match_shnadd.
pub fn constructor_match_shnadd<C: Context>(
    ctx: &mut C,
    arg0: Imm64,
) -> Option<AluOPRRR> {
    let v1 = C::u64_from_imm64(ctx, arg0);
    match v1 {
        0x1_u64 => {
            let v3 = Some(AluOPRRR::Sh1add);
            // Rule at src\isa\riscv64\lower.isle line 68.
            return v3;
        }
        0x2_u64 => {
            let v5 = Some(AluOPRRR::Sh2add);
            // Rule at src\isa\riscv64\lower.isle line 69.
            return v5;
        }
        0x3_u64 => {
            let v7 = Some(AluOPRRR::Sh3add);
            // Rule at src\isa\riscv64\lower.isle line 70.
            return v7;
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term match_shnadd_uw.
pub fn constructor_match_shnadd_uw<C: Context>(
    ctx: &mut C,
    arg0: Imm64,
) -> Option<AluOPRRR> {
    let v1 = C::u64_from_imm64(ctx, arg0);
    match v1 {
        0x1_u64 => {
            let v3 = Some(AluOPRRR::Sh1adduw);
            // Rule at src\isa\riscv64\lower.isle line 90.
            return v3;
        }
        0x2_u64 => {
            let v5 = Some(AluOPRRR::Sh2adduw);
            // Rule at src\isa\riscv64\lower.isle line 91.
            return v5;
        }
        0x3_u64 => {
            let v7 = Some(AluOPRRR::Sh3adduw);
            // Rule at src\isa\riscv64\lower.isle line 92.
            return v7;
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term nonzero_divisor.
pub fn constructor_nonzero_divisor<C: Context>(
    ctx: &mut C,
    arg0: XReg,
) -> XReg {
    let v2 = C::zero_reg(ctx);
    let v4 = constructor_gen_trapif(ctx, &IntCC::Equal, arg0, v2, &TrapCode::INTEGER_DIVISION_BY_ZERO);
    // Rule at src\isa\riscv64\lower.isle line 575.
    return arg0;
}

// Generated as internal constructor for term safe_sdiv_divisor.
pub fn constructor_safe_sdiv_divisor<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: XReg,
    arg2: XReg,
) -> XReg {
    let v3 = constructor_nonzero_divisor(ctx, arg2);
    let v6 = C::ty_bits(ctx, arg0);
    let v7 = C::u8_as_u64(ctx, v6);
    let v9 = C::u64_sub(ctx, v7, 0x1_u64);
    let v10 = C::u64_shl(ctx, 0xffffffffffffffff_u64, v9);
    let v11 = constructor_imm(ctx, I64, v10);
    let v12 = C::xreg_new(ctx, v11);
    let v13 = constructor_rv_xor(ctx, arg1, v12);
    let v14 = constructor_rv_not(ctx, v3);
    let v15 = constructor_rv_or(ctx, v13, v14);
    let v17 = C::zero_reg(ctx);
    let v19 = constructor_gen_trapif(ctx, &IntCC::Equal, v15, v17, &TrapCode::INTEGER_OVERFLOW);
    // Rule at src\isa\riscv64\lower.isle line 615.
    return v3;
}

// Generated as internal constructor for term gen_bitrev.
pub fn constructor_gen_bitrev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: XReg,
) -> XReg {
    match arg0 {
        I8 => {
            let v15 = C::xreg_to_reg(ctx, arg1);
            let v17 = constructor_gen_brev8(ctx, v15, I8);
            let v18 = C::xreg_new(ctx, v17);
            // Rule at src\isa\riscv64\lower.isle line 1020.
            return v18;
        }
        I64 => {
            let v19 = constructor_gen_bswap(ctx, I64, arg1);
            let v20 = C::xreg_to_reg(ctx, v19);
            let v21 = constructor_gen_brev8(ctx, v20, I64);
            let v22 = C::xreg_new(ctx, v21);
            // Rule at src\isa\riscv64\lower.isle line 1023.
            return v22;
        }
        _ => {}
    }
    let v1 = C::ty_16_or_32(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = C::ty_int(ctx, v2);
        if let Some(v4) = v3 {
            let v7 = C::ty_bits(ctx, v4);
            let v8 = C::u8_as_u64(ctx, v7);
            let v9 = C::u64_sub(ctx, 0x40_u64, v8);
            let v10 = constructor_u64_to_imm12(ctx, v9);
            if let Some(v11) = v10 {
                let v13 = constructor_gen_bitrev(ctx, I64, arg1);
                let v14 = constructor_rv_srli(ctx, v13, v11);
                // Rule at src\isa\riscv64\lower.isle line 1016.
                return v14;
            }
        }
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "gen_bitrev", "src\\isa\\riscv64\\lower.isle line 1014")
}

// Generated as internal constructor for term gen_bswap.
pub fn constructor_gen_bswap<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: XReg,
) -> XReg {
    let v24 = C::has_zbb(ctx);
    if v24 == true {
        if arg0 == I64 {
            let v30 = constructor_rv_rev8(ctx, arg1);
            // Rule at src\isa\riscv64\lower.isle line 1068.
            return v30;
        }
        let v20 = C::ty_16_or_32(ctx, arg0);
        if let Some(v21) = v20 {
            let v22 = C::ty_int(ctx, v21);
            if let Some(v23) = v22 {
                let v25 = C::ty_bits(ctx, v23);
                let v26 = C::u8_as_u64(ctx, v25);
                let v27 = C::u64_sub(ctx, 0x40_u64, v26);
                let v28 = constructor_u64_to_imm12(ctx, v27);
                if let Some(v29) = v28 {
                    let v30 = constructor_rv_rev8(ctx, arg1);
                    let v31 = constructor_rv_srli(ctx, v30, v29);
                    // Rule at src\isa\riscv64\lower.isle line 1063.
                    return v31;
                }
            }
        }
    }
    let v2 = C::ty_int_ref_16_to_64(ctx, arg0);
    if let Some(v3) = v2 {
        let v4 = C::ty_half_width(ctx, v3);
        if let Some(v5) = v4 {
            let v6 = C::ty_bits(ctx, v5);
            let v7 = C::u8_as_u64(ctx, v6);
            let v8 = constructor_u64_to_imm12(ctx, v7);
            if let Some(v9) = v8 {
                let v10 = constructor_gen_bswap(ctx, v5, arg1);
                let v11 = constructor_rv_slli(ctx, v10, v9);
                let v12 = constructor_rv_srli(ctx, arg1, v9);
                let v13 = constructor_gen_bswap(ctx, v5, v12);
                let v15 = C::u64_sub(ctx, 0x40_u64, v7);
                let v16 = C::imm_from_bits(ctx, v15);
                let v17 = constructor_rv_slli(ctx, v13, v16);
                let v18 = constructor_rv_srli(ctx, v17, v16);
                let v19 = constructor_rv_or(ctx, v11, v18);
                // Rule at src\isa\riscv64\lower.isle line 1043.
                return v19;
            }
        }
    }
    if arg0 == I8 {
        // Rule at src\isa\riscv64\lower.isle line 1042.
        return arg1;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "gen_bswap", "src\\isa\\riscv64\\lower.isle line 1039")
}

// Generated as internal constructor for term gen_clz.
pub fn constructor_gen_clz<C: Context>(
    ctx: &mut C,
    arg0: XReg,
) -> XReg {
    let v4 = C::has_zbb(ctx);
    if v4 == true {
        let v5 = constructor_rv_clz(ctx, arg0);
        // Rule at src\isa\riscv64\lower.isle line 1119.
        return v5;
    }
    let v1 = true;
    let v3 = constructor_gen_cltz(ctx, v1, arg0, I64);
    // Rule at src\isa\riscv64\lower.isle line 1117.
    return v3;
}

// Generated as internal constructor for term uextend_load_op.
pub fn constructor_uextend_load_op<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> LoadOP {
    match arg0 {
        I8 => {
            // Rule at src\isa\riscv64\lower.isle line 1164.
            return LoadOP::Lbu;
        }
        I16 => {
            // Rule at src\isa\riscv64\lower.isle line 1165.
            return LoadOP::Lhu;
        }
        I32 => {
            // Rule at src\isa\riscv64\lower.isle line 1166.
            return LoadOP::Lwu;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "uextend_load_op", "src\\isa\\riscv64\\lower.isle line 1163")
}

// Generated as internal constructor for term sextend_load_op.
pub fn constructor_sextend_load_op<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> LoadOP {
    match arg0 {
        I8 => {
            // Rule at src\isa\riscv64\lower.isle line 1181.
            return LoadOP::Lb;
        }
        I16 => {
            // Rule at src\isa\riscv64\lower.isle line 1182.
            return LoadOP::Lh;
        }
        I32 => {
            // Rule at src\isa\riscv64\lower.isle line 1183.
            return LoadOP::Lw;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "sextend_load_op", "src\\isa\\riscv64\\lower.isle line 1180")
}

// Generated as internal constructor for term is_fneg.
pub fn constructor_is_fneg<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> IsFneg {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = &C::inst_data_value(ctx, v2);
        if let &InstructionData::Unary {
            opcode: ref v4,
            arg: v5,
        } = v3 {
            if let &Opcode::Fneg = v4 {
                let v7 = IsFneg::Result {
                    negate: 0x1_u64,
                    value: v5,
                };
                // Rule at src\isa\riscv64\lower.isle line 1592.
                return v7;
            }
        }
    }
    let v9 = IsFneg::Result {
        negate: 0x0_u64,
        value: arg0,
    };
    // Rule at src\isa\riscv64\lower.isle line 1593.
    return v9;
}

// Generated as internal constructor for term is_fneg_neg.
pub fn constructor_is_fneg_neg<C: Context>(
    ctx: &mut C,
    arg0: &IsFneg,
) -> u64 {
    if let &IsFneg::Result {
        negate: v1,
        value: v2,
    } = arg0 {
        // Rule at src\isa\riscv64\lower.isle line 1596.
        return v1;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "is_fneg_neg", "src\\isa\\riscv64\\lower.isle line 1595")
}

// Generated as internal constructor for term get_fneg_value.
pub fn constructor_get_fneg_value<C: Context>(
    ctx: &mut C,
    arg0: &IsFneg,
) -> Value {
    if let &IsFneg::Result {
        negate: v1,
        value: v2,
    } = arg0 {
        // Rule at src\isa\riscv64\lower.isle line 1599.
        return v2;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "get_fneg_value", "src\\isa\\riscv64\\lower.isle line 1598")
}

// Generated as internal constructor for term rv_fma.
pub fn constructor_rv_fma<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: u64,
    arg2: u64,
    arg3: Value,
    arg4: Value,
    arg5: Value,
) -> InstOutput {
    match arg1 {
        0x0_u64 => {
            match arg2 {
                0x0_u64 => {
                    let v20 = C::ty_supported_vec(ctx, arg0);
                    if let Some(v21) = v20 {
                        let v49 = C::def_inst(ctx, arg4);
                        if let Some(v50) = v49 {
                            let v51 = &C::inst_data_value(ctx, v50);
                            if let &InstructionData::Unary {
                                opcode: ref v52,
                                arg: v53,
                            } = v51 {
                                if let &Opcode::Splat = v52 {
                                    let v22 = constructor_put_in_vreg(ctx, arg5);
                                    let v54 = constructor_put_in_vreg(ctx, arg3);
                                    let v55 = constructor_put_in_freg(ctx, v53);
                                    let v25 = &constructor_unmasked(ctx);
                                    let v26 = C::vstate_from_type(ctx, v21);
                                    let v56 = constructor_rv_vfmacc_vf(ctx, v22, v54, v55, v25, v26);
                                    let v57 = constructor_output_vreg(ctx, v56);
                                    // Rule at src\isa\riscv64\lower.isle line 1625.
                                    return v57;
                                }
                            }
                        }
                        let v35 = C::def_inst(ctx, arg3);
                        if let Some(v36) = v35 {
                            let v37 = &C::inst_data_value(ctx, v36);
                            if let &InstructionData::Unary {
                                opcode: ref v38,
                                arg: v39,
                            } = v37 {
                                if let &Opcode::Splat = v38 {
                                    let v22 = constructor_put_in_vreg(ctx, arg5);
                                    let v23 = constructor_put_in_vreg(ctx, arg4);
                                    let v40 = constructor_put_in_freg(ctx, v39);
                                    let v25 = &constructor_unmasked(ctx);
                                    let v26 = C::vstate_from_type(ctx, v21);
                                    let v41 = constructor_rv_vfmacc_vf(ctx, v22, v23, v40, v25, v26);
                                    let v42 = constructor_output_vreg(ctx, v41);
                                    // Rule at src\isa\riscv64\lower.isle line 1621.
                                    return v42;
                                }
                            }
                        }
                        let v22 = constructor_put_in_vreg(ctx, arg5);
                        let v23 = constructor_put_in_vreg(ctx, arg4);
                        let v24 = constructor_put_in_vreg(ctx, arg3);
                        let v25 = &constructor_unmasked(ctx);
                        let v26 = C::vstate_from_type(ctx, v21);
                        let v27 = constructor_rv_vfmacc_vv(ctx, v22, v23, v24, v25, v26);
                        let v28 = constructor_output_vreg(ctx, v27);
                        // Rule at src\isa\riscv64\lower.isle line 1617.
                        return v28;
                    }
                    let v1 = C::ty_supported_float_full(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v9 = constructor_put_in_freg(ctx, arg3);
                        let v10 = constructor_put_in_freg(ctx, arg4);
                        let v11 = constructor_put_in_freg(ctx, arg5);
                        let v12 = constructor_rv_fmadd(ctx, v2, &FRM::RNE, v9, v10, v11);
                        let v13 = constructor_output_freg(ctx, v12);
                        // Rule at src\isa\riscv64\lower.isle line 1613.
                        return v13;
                    }
                }
                0x1_u64 => {
                    let v20 = C::ty_supported_vec(ctx, arg0);
                    if let Some(v21) = v20 {
                        let v49 = C::def_inst(ctx, arg4);
                        if let Some(v50) = v49 {
                            let v51 = &C::inst_data_value(ctx, v50);
                            if let &InstructionData::Unary {
                                opcode: ref v52,
                                arg: v53,
                            } = v51 {
                                if let &Opcode::Splat = v52 {
                                    let v22 = constructor_put_in_vreg(ctx, arg5);
                                    let v54 = constructor_put_in_vreg(ctx, arg3);
                                    let v55 = constructor_put_in_freg(ctx, v53);
                                    let v25 = &constructor_unmasked(ctx);
                                    let v26 = C::vstate_from_type(ctx, v21);
                                    let v58 = constructor_rv_vfmsac_vf(ctx, v22, v54, v55, v25, v26);
                                    let v59 = constructor_output_vreg(ctx, v58);
                                    // Rule at src\isa\riscv64\lower.isle line 1626.
                                    return v59;
                                }
                            }
                        }
                        let v35 = C::def_inst(ctx, arg3);
                        if let Some(v36) = v35 {
                            let v37 = &C::inst_data_value(ctx, v36);
                            if let &InstructionData::Unary {
                                opcode: ref v38,
                                arg: v39,
                            } = v37 {
                                if let &Opcode::Splat = v38 {
                                    let v22 = constructor_put_in_vreg(ctx, arg5);
                                    let v23 = constructor_put_in_vreg(ctx, arg4);
                                    let v40 = constructor_put_in_freg(ctx, v39);
                                    let v25 = &constructor_unmasked(ctx);
                                    let v26 = C::vstate_from_type(ctx, v21);
                                    let v43 = constructor_rv_vfmsac_vf(ctx, v22, v23, v40, v25, v26);
                                    let v44 = constructor_output_vreg(ctx, v43);
                                    // Rule at src\isa\riscv64\lower.isle line 1622.
                                    return v44;
                                }
                            }
                        }
                        let v22 = constructor_put_in_vreg(ctx, arg5);
                        let v23 = constructor_put_in_vreg(ctx, arg4);
                        let v24 = constructor_put_in_vreg(ctx, arg3);
                        let v25 = &constructor_unmasked(ctx);
                        let v26 = C::vstate_from_type(ctx, v21);
                        let v29 = constructor_rv_vfmsac_vv(ctx, v22, v23, v24, v25, v26);
                        let v30 = constructor_output_vreg(ctx, v29);
                        // Rule at src\isa\riscv64\lower.isle line 1618.
                        return v30;
                    }
                    let v1 = C::ty_supported_float_full(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v9 = constructor_put_in_freg(ctx, arg3);
                        let v10 = constructor_put_in_freg(ctx, arg4);
                        let v11 = constructor_put_in_freg(ctx, arg5);
                        let v14 = constructor_rv_fmsub(ctx, v2, &FRM::RNE, v9, v10, v11);
                        let v15 = constructor_output_freg(ctx, v14);
                        // Rule at src\isa\riscv64\lower.isle line 1614.
                        return v15;
                    }
                }
                _ => {}
            }
        }
        0x1_u64 => {
            match arg2 {
                0x0_u64 => {
                    let v20 = C::ty_supported_vec(ctx, arg0);
                    if let Some(v21) = v20 {
                        let v49 = C::def_inst(ctx, arg4);
                        if let Some(v50) = v49 {
                            let v51 = &C::inst_data_value(ctx, v50);
                            if let &InstructionData::Unary {
                                opcode: ref v52,
                                arg: v53,
                            } = v51 {
                                if let &Opcode::Splat = v52 {
                                    let v22 = constructor_put_in_vreg(ctx, arg5);
                                    let v54 = constructor_put_in_vreg(ctx, arg3);
                                    let v55 = constructor_put_in_freg(ctx, v53);
                                    let v25 = &constructor_unmasked(ctx);
                                    let v26 = C::vstate_from_type(ctx, v21);
                                    let v60 = constructor_rv_vfnmsac_vf(ctx, v22, v54, v55, v25, v26);
                                    let v61 = constructor_output_vreg(ctx, v60);
                                    // Rule at src\isa\riscv64\lower.isle line 1627.
                                    return v61;
                                }
                            }
                        }
                        let v35 = C::def_inst(ctx, arg3);
                        if let Some(v36) = v35 {
                            let v37 = &C::inst_data_value(ctx, v36);
                            if let &InstructionData::Unary {
                                opcode: ref v38,
                                arg: v39,
                            } = v37 {
                                if let &Opcode::Splat = v38 {
                                    let v22 = constructor_put_in_vreg(ctx, arg5);
                                    let v23 = constructor_put_in_vreg(ctx, arg4);
                                    let v40 = constructor_put_in_freg(ctx, v39);
                                    let v25 = &constructor_unmasked(ctx);
                                    let v26 = C::vstate_from_type(ctx, v21);
                                    let v45 = constructor_rv_vfnmsac_vf(ctx, v22, v23, v40, v25, v26);
                                    let v46 = constructor_output_vreg(ctx, v45);
                                    // Rule at src\isa\riscv64\lower.isle line 1623.
                                    return v46;
                                }
                            }
                        }
                        let v22 = constructor_put_in_vreg(ctx, arg5);
                        let v23 = constructor_put_in_vreg(ctx, arg4);
                        let v24 = constructor_put_in_vreg(ctx, arg3);
                        let v25 = &constructor_unmasked(ctx);
                        let v26 = C::vstate_from_type(ctx, v21);
                        let v31 = constructor_rv_vfnmsac_vv(ctx, v22, v23, v24, v25, v26);
                        let v32 = constructor_output_vreg(ctx, v31);
                        // Rule at src\isa\riscv64\lower.isle line 1619.
                        return v32;
                    }
                    let v1 = C::ty_supported_float_full(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v9 = constructor_put_in_freg(ctx, arg3);
                        let v10 = constructor_put_in_freg(ctx, arg4);
                        let v11 = constructor_put_in_freg(ctx, arg5);
                        let v16 = constructor_rv_fnmsub(ctx, v2, &FRM::RNE, v9, v10, v11);
                        let v17 = constructor_output_freg(ctx, v16);
                        // Rule at src\isa\riscv64\lower.isle line 1615.
                        return v17;
                    }
                }
                0x1_u64 => {
                    let v20 = C::ty_supported_vec(ctx, arg0);
                    if let Some(v21) = v20 {
                        let v49 = C::def_inst(ctx, arg4);
                        if let Some(v50) = v49 {
                            let v51 = &C::inst_data_value(ctx, v50);
                            if let &InstructionData::Unary {
                                opcode: ref v52,
                                arg: v53,
                            } = v51 {
                                if let &Opcode::Splat = v52 {
                                    let v22 = constructor_put_in_vreg(ctx, arg5);
                                    let v54 = constructor_put_in_vreg(ctx, arg3);
                                    let v55 = constructor_put_in_freg(ctx, v53);
                                    let v25 = &constructor_unmasked(ctx);
                                    let v26 = C::vstate_from_type(ctx, v21);
                                    let v62 = constructor_rv_vfnmacc_vf(ctx, v22, v54, v55, v25, v26);
                                    let v63 = constructor_output_vreg(ctx, v62);
                                    // Rule at src\isa\riscv64\lower.isle line 1628.
                                    return v63;
                                }
                            }
                        }
                        let v35 = C::def_inst(ctx, arg3);
                        if let Some(v36) = v35 {
                            let v37 = &C::inst_data_value(ctx, v36);
                            if let &InstructionData::Unary {
                                opcode: ref v38,
                                arg: v39,
                            } = v37 {
                                if let &Opcode::Splat = v38 {
                                    let v22 = constructor_put_in_vreg(ctx, arg5);
                                    let v23 = constructor_put_in_vreg(ctx, arg4);
                                    let v40 = constructor_put_in_freg(ctx, v39);
                                    let v25 = &constructor_unmasked(ctx);
                                    let v26 = C::vstate_from_type(ctx, v21);
                                    let v47 = constructor_rv_vfnmacc_vf(ctx, v22, v23, v40, v25, v26);
                                    let v48 = constructor_output_vreg(ctx, v47);
                                    // Rule at src\isa\riscv64\lower.isle line 1624.
                                    return v48;
                                }
                            }
                        }
                        let v22 = constructor_put_in_vreg(ctx, arg5);
                        let v23 = constructor_put_in_vreg(ctx, arg4);
                        let v24 = constructor_put_in_vreg(ctx, arg3);
                        let v25 = &constructor_unmasked(ctx);
                        let v26 = C::vstate_from_type(ctx, v21);
                        let v33 = constructor_rv_vfnmacc_vv(ctx, v22, v23, v24, v25, v26);
                        let v34 = constructor_output_vreg(ctx, v33);
                        // Rule at src\isa\riscv64\lower.isle line 1620.
                        return v34;
                    }
                    let v1 = C::ty_supported_float_full(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v9 = constructor_put_in_freg(ctx, arg3);
                        let v10 = constructor_put_in_freg(ctx, arg4);
                        let v11 = constructor_put_in_freg(ctx, arg5);
                        let v18 = constructor_rv_fnmadd(ctx, v2, &FRM::RNE, v9, v10, v11);
                        let v19 = constructor_output_freg(ctx, v18);
                        // Rule at src\isa\riscv64\lower.isle line 1616.
                        return v19;
                    }
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "rv_fma", "src\\isa\\riscv64\\lower.isle line 1612")
}

// Generated as internal constructor for term gen_atomic_rmw_loop.
pub fn constructor_gen_atomic_rmw_loop<C: Context>(
    ctx: &mut C,
    arg0: &AtomicRmwOp,
    arg1: Type,
    arg2: XReg,
    arg3: XReg,
) -> XReg {
    let v4 = constructor_temp_writable_xreg(ctx);
    let v5 = constructor_temp_writable_xreg(ctx);
    let v6 = constructor_gen_atomic_offset(ctx, arg2, arg1);
    let v9 = constructor_gen_atomic_p(ctx, arg2, arg1);
    let v7 = C::xreg_to_reg(ctx, v6);
    let v8 = C::writable_xreg_to_writable_reg(ctx, v4);
    let v10 = C::xreg_to_reg(ctx, v9);
    let v11 = C::xreg_to_reg(ctx, arg3);
    let v12 = C::writable_xreg_to_writable_reg(ctx, v5);
    let v13 = MInst::AtomicRmwLoop {
        offset: v7,
        op: arg0.clone(),
        dst: v8,
        ty: arg1,
        p: v10,
        x: v11,
        t0: v12,
    };
    let v14 = C::emit(ctx, &v13);
    let v15 = C::writable_reg_to_reg(ctx, v8);
    let v16 = C::xreg_new(ctx, v15);
    // Rule at src\isa\riscv64\lower.isle line 1676.
    return v16;
}

// Generated as internal constructor for term gen_atomic_offset.
pub fn constructor_gen_atomic_offset<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: Type,
) -> XReg {
    let v2 = C::fits_in_16(ctx, arg1);
    if let Some(v3) = v2 {
        let v5 = C::imm12_const(ctx, 3_i32);
        let v6 = constructor_rv_andi(ctx, arg0, v5);
        let v7 = constructor_rv_slli(ctx, v6, v5);
        // Rule at src\isa\riscv64\lower.isle line 1704.
        return v7;
    }
    let v8 = C::zero_reg(ctx);
    // Rule at src\isa\riscv64\lower.isle line 1707.
    return v8;
}

// Generated as internal constructor for term gen_atomic_p.
pub fn constructor_gen_atomic_p<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: Type,
) -> XReg {
    let v2 = C::fits_in_16(ctx, arg1);
    if let Some(v3) = v2 {
        let v5 = C::imm12_const(ctx, -4_i32);
        let v6 = constructor_rv_andi(ctx, arg0, v5);
        // Rule at src\isa\riscv64\lower.isle line 1711.
        return v6;
    }
    // Rule at src\isa\riscv64\lower.isle line 1714.
    return arg0;
}

// Generated as internal constructor for term gen_load64_extend.
pub fn constructor_gen_load64_extend<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ExtendOp,
    arg2: MemFlags,
    arg3: AMode,
) -> VReg {
    match arg1 {
        &ExtendOp::Zero => {
            let v5 = &constructor_element_width_from_type(ctx, I64);
            let v7 = VecAMode::UnitStride {
                base: arg3,
            };
            let v8 = &constructor_unmasked(ctx);
            let v6 = C::vstate_from_type(ctx, I64);
            let v9 = constructor_vec_load(ctx, v5, &v7, arg2, v8, v6);
            let v10 = C::vreg_new(ctx, v9);
            let v11 = C::vstate_from_type(ctx, arg0);
            let v13 = constructor_rv_vzext_vf2(ctx, v10, v8, v11);
            // Rule at src\isa\riscv64\lower.isle line 2160.
            return v13;
        }
        &ExtendOp::Signed => {
            let v5 = &constructor_element_width_from_type(ctx, I64);
            let v7 = VecAMode::UnitStride {
                base: arg3,
            };
            let v8 = &constructor_unmasked(ctx);
            let v6 = C::vstate_from_type(ctx, I64);
            let v9 = constructor_vec_load(ctx, v5, &v7, arg2, v8, v6);
            let v10 = C::vreg_new(ctx, v9);
            let v11 = C::vstate_from_type(ctx, arg0);
            let v12 = constructor_rv_vsext_vf2(ctx, v10, v8, v11);
            // Rule at src\isa\riscv64\lower.isle line 2154.
            return v12;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "gen_load64_extend", "src\\isa\\riscv64\\lower.isle line 2152")
}

// Generated as internal constructor for term lower_icmp.
pub fn constructor_lower_icmp<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Value,
    arg2: Value,
) -> XReg {
    match arg0 {
        &IntCC::Equal => {
            let v13 = C::i64_from_iconst(ctx, arg1);
            if let Some(v14) = v13 {
                let v15 = C::i64_is_zero(ctx, v14);
                if v15 == false {
                    let v16 = C::imm12_from_i64(ctx, v14);
                    if let Some(v17) = v16 {
                        let v18 = constructor_sext(ctx, arg2);
                        let v19 = constructor_rv_xori(ctx, v18, v17);
                        let v20 = constructor_rv_seqz(ctx, v19);
                        // Rule at src\isa\riscv64\lower.isle line 2240.
                        return v20;
                    }
                }
            }
            let v5 = C::i64_from_iconst(ctx, arg2);
            if let Some(v6) = v5 {
                let v7 = C::i64_is_zero(ctx, v6);
                if v7 == false {
                    let v8 = C::imm12_from_i64(ctx, v6);
                    if let Some(v9) = v8 {
                        let v10 = constructor_sext(ctx, arg1);
                        let v11 = constructor_rv_xori(ctx, v10, v9);
                        let v12 = constructor_rv_seqz(ctx, v11);
                        // Rule at src\isa\riscv64\lower.isle line 2237.
                        return v12;
                    }
                }
            }
        }
        &IntCC::NotEqual => {
            let v13 = C::i64_from_iconst(ctx, arg1);
            if let Some(v14) = v13 {
                let v15 = C::i64_is_zero(ctx, v14);
                if v15 == false {
                    let v16 = C::imm12_from_i64(ctx, v14);
                    if let Some(v17) = v16 {
                        let v18 = constructor_sext(ctx, arg2);
                        let v19 = constructor_rv_xori(ctx, v18, v17);
                        let v22 = constructor_rv_snez(ctx, v19);
                        // Rule at src\isa\riscv64\lower.isle line 2248.
                        return v22;
                    }
                }
            }
            let v5 = C::i64_from_iconst(ctx, arg2);
            if let Some(v6) = v5 {
                let v7 = C::i64_is_zero(ctx, v6);
                if v7 == false {
                    let v8 = C::imm12_from_i64(ctx, v6);
                    if let Some(v9) = v8 {
                        let v10 = constructor_sext(ctx, arg1);
                        let v11 = constructor_rv_xori(ctx, v10, v9);
                        let v21 = constructor_rv_snez(ctx, v11);
                        // Rule at src\isa\riscv64\lower.isle line 2245.
                        return v21;
                    }
                }
            }
        }
        &IntCC::SignedGreaterThan => {
            let v13 = C::i64_from_iconst(ctx, arg1);
            if let Some(v14) = v13 {
                let v15 = C::i64_is_zero(ctx, v14);
                if v15 == false {
                    let v16 = C::imm12_from_i64(ctx, v14);
                    if let Some(v17) = v16 {
                        let v18 = constructor_sext(ctx, arg2);
                        let v24 = constructor_rv_slti(ctx, v18, v17);
                        // Rule at src\isa\riscv64\lower.isle line 2256.
                        return v24;
                    }
                }
            }
        }
        &IntCC::SignedGreaterThanOrEqual => {
            let v5 = C::i64_from_iconst(ctx, arg2);
            if let Some(v6) = v5 {
                let v7 = C::i64_is_zero(ctx, v6);
                if v7 == false {
                    let v8 = C::imm12_from_i64(ctx, v6);
                    if let Some(v9) = v8 {
                        let v47 = &C::intcc_complement(ctx, arg0);
                        let v48 = constructor_lower_icmp(ctx, v47, arg1, arg2);
                        let v50 = C::imm12_const(ctx, 1_i32);
                        let v51 = constructor_rv_xori(ctx, v48, v50);
                        // Rule at src\isa\riscv64\lower.isle line 2267.
                        return v51;
                    }
                }
            }
        }
        &IntCC::SignedLessThan => {
            let v5 = C::i64_from_iconst(ctx, arg2);
            if let Some(v6) = v5 {
                let v7 = C::i64_is_zero(ctx, v6);
                if v7 == false {
                    let v8 = C::imm12_from_i64(ctx, v6);
                    if let Some(v9) = v8 {
                        let v10 = constructor_sext(ctx, arg1);
                        let v23 = constructor_rv_slti(ctx, v10, v9);
                        // Rule at src\isa\riscv64\lower.isle line 2253.
                        return v23;
                    }
                }
            }
        }
        &IntCC::UnsignedGreaterThan => {
            let v36 = C::def_inst(ctx, arg1);
            if let Some(v37) = v36 {
                let v38 = &C::inst_data_value(ctx, v37);
                if let &InstructionData::UnaryImm {
                    opcode: ref v39,
                    imm: v40,
                } = v38 {
                    if let &Opcode::Iconst = v39 {
                        let v41 = C::u64_from_imm64(ctx, v40);
                        let v42 = C::u64_is_zero(ctx, v41);
                        if v42 == false {
                            let v43 = C::imm12_from_u64(ctx, v41);
                            if let Some(v44) = v43 {
                                let v45 = constructor_zext(ctx, arg2);
                                let v46 = constructor_rv_sltiu(ctx, v45, v44);
                                // Rule at src\isa\riscv64\lower.isle line 2262.
                                return v46;
                            }
                        }
                    }
                }
            }
        }
        &IntCC::UnsignedGreaterThanOrEqual => {
            let v25 = C::def_inst(ctx, arg2);
            if let Some(v26) = v25 {
                let v27 = &C::inst_data_value(ctx, v26);
                if let &InstructionData::UnaryImm {
                    opcode: ref v28,
                    imm: v29,
                } = v27 {
                    if let &Opcode::Iconst = v28 {
                        let v30 = C::u64_from_imm64(ctx, v29);
                        let v31 = C::u64_is_zero(ctx, v30);
                        if v31 == false {
                            let v32 = C::imm12_from_u64(ctx, v30);
                            if let Some(v33) = v32 {
                                let v47 = &C::intcc_complement(ctx, arg0);
                                let v48 = constructor_lower_icmp(ctx, v47, arg1, arg2);
                                let v50 = C::imm12_const(ctx, 1_i32);
                                let v51 = constructor_rv_xori(ctx, v48, v50);
                                // Rule at src\isa\riscv64\lower.isle line 2270.
                                return v51;
                            }
                        }
                    }
                }
            }
        }
        &IntCC::UnsignedLessThan => {
            let v25 = C::def_inst(ctx, arg2);
            if let Some(v26) = v25 {
                let v27 = &C::inst_data_value(ctx, v26);
                if let &InstructionData::UnaryImm {
                    opcode: ref v28,
                    imm: v29,
                } = v27 {
                    if let &Opcode::Iconst = v28 {
                        let v30 = C::u64_from_imm64(ctx, v29);
                        let v31 = C::u64_is_zero(ctx, v30);
                        if v31 == false {
                            let v32 = C::imm12_from_u64(ctx, v30);
                            if let Some(v33) = v32 {
                                let v34 = constructor_zext(ctx, arg1);
                                let v35 = constructor_rv_sltiu(ctx, v34, v33);
                                // Rule at src\isa\riscv64\lower.isle line 2259.
                                return v35;
                            }
                        }
                    }
                }
            }
        }
        _ => {}
    }
    let v3 = constructor_icmp_to_int_compare(ctx, arg0, arg1, arg2);
    let v4 = constructor_lower_int_compare(ctx, v3);
    // Rule at src\isa\riscv64\lower.isle line 2233.
    return v4;
}

// Generated as internal constructor for term lower_int_compare.
pub fn constructor_lower_int_compare<C: Context>(
    ctx: &mut C,
    arg0: IntegerCompare,
) -> XReg {
    let v1 = C::int_compare_decompose(ctx, arg0);
    match &v1.0 {
        &IntCC::Equal => {
            let v10 = C::is_zero_reg(ctx, v1.1);
            if let Some(v11) = v10 {
                let v12 = constructor_rv_seqz(ctx, v1.2);
                // Rule at src\isa\riscv64\lower.isle line 2283.
                return v12;
            }
            let v7 = C::is_zero_reg(ctx, v1.2);
            if let Some(v8) = v7 {
                let v9 = constructor_rv_seqz(ctx, v1.1);
                // Rule at src\isa\riscv64\lower.isle line 2281.
                return v9;
            }
            let v5 = constructor_rv_xor(ctx, v1.1, v1.2);
            let v6 = constructor_rv_seqz(ctx, v5);
            // Rule at src\isa\riscv64\lower.isle line 2279.
            return v6;
        }
        &IntCC::NotEqual => {
            let v10 = C::is_zero_reg(ctx, v1.1);
            if let Some(v11) = v10 {
                let v15 = constructor_rv_snez(ctx, v1.2);
                // Rule at src\isa\riscv64\lower.isle line 2290.
                return v15;
            }
            let v7 = C::is_zero_reg(ctx, v1.2);
            if let Some(v8) = v7 {
                let v14 = constructor_rv_snez(ctx, v1.1);
                // Rule at src\isa\riscv64\lower.isle line 2288.
                return v14;
            }
            let v5 = constructor_rv_xor(ctx, v1.1, v1.2);
            let v13 = constructor_rv_snez(ctx, v5);
            // Rule at src\isa\riscv64\lower.isle line 2286.
            return v13;
        }
        &IntCC::SignedGreaterThan => {
            let v18 = constructor_rv_slt(ctx, v1.2, v1.1);
            // Rule at src\isa\riscv64\lower.isle line 2298.
            return v18;
        }
        &IntCC::SignedGreaterThanOrEqual => {
            let v16 = constructor_rv_slt(ctx, v1.1, v1.2);
            let v21 = C::imm12_const(ctx, 1_i32);
            let v24 = constructor_rv_xori(ctx, v16, v21);
            // Rule at src\isa\riscv64\lower.isle line 2308.
            return v24;
        }
        &IntCC::SignedLessThan => {
            let v16 = constructor_rv_slt(ctx, v1.1, v1.2);
            // Rule at src\isa\riscv64\lower.isle line 2293.
            return v16;
        }
        &IntCC::SignedLessThanOrEqual => {
            let v18 = constructor_rv_slt(ctx, v1.2, v1.1);
            let v21 = C::imm12_const(ctx, 1_i32);
            let v22 = constructor_rv_xori(ctx, v18, v21);
            // Rule at src\isa\riscv64\lower.isle line 2303.
            return v22;
        }
        &IntCC::UnsignedGreaterThan => {
            let v19 = constructor_rv_sltu(ctx, v1.2, v1.1);
            // Rule at src\isa\riscv64\lower.isle line 2300.
            return v19;
        }
        &IntCC::UnsignedGreaterThanOrEqual => {
            let v17 = constructor_rv_sltu(ctx, v1.1, v1.2);
            let v21 = C::imm12_const(ctx, 1_i32);
            let v25 = constructor_rv_xori(ctx, v17, v21);
            // Rule at src\isa\riscv64\lower.isle line 2310.
            return v25;
        }
        &IntCC::UnsignedLessThan => {
            let v17 = constructor_rv_sltu(ctx, v1.1, v1.2);
            // Rule at src\isa\riscv64\lower.isle line 2295.
            return v17;
        }
        &IntCC::UnsignedLessThanOrEqual => {
            let v19 = constructor_rv_sltu(ctx, v1.2, v1.1);
            let v21 = C::imm12_const(ctx, 1_i32);
            let v23 = constructor_rv_xori(ctx, v19, v21);
            // Rule at src\isa\riscv64\lower.isle line 2305.
            return v23;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "lower_int_compare", "src\\isa\\riscv64\\lower.isle line 2276")
}

// Generated as internal constructor for term lower_icmp_i128.
pub fn constructor_lower_icmp_i128<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: ValueRegs,
    arg2: ValueRegs,
) -> XReg {
    let v25 = &C::intcc_unsigned(ctx, arg0);
    if let &IntCC::UnsignedLessThan = v25 {
        let v4 = C::value_regs_get(ctx, arg1, 0x0_usize);
        let v26 = C::value_regs_get(ctx, arg1, 0x1_usize);
        let v6 = C::value_regs_get(ctx, arg2, 0x0_usize);
        let v27 = C::value_regs_get(ctx, arg2, 0x1_usize);
        let v28 = C::xreg_new(ctx, v26);
        let v29 = C::xreg_new(ctx, v27);
        let v30 = C::int_compare(ctx, arg0, v28, v29);
        let v31 = constructor_lower_int_compare(ctx, v30);
        let v32 = C::xreg_new(ctx, v4);
        let v33 = C::xreg_new(ctx, v6);
        let v34 = constructor_rv_sltu(ctx, v32, v33);
        let v35 = C::xreg_new(ctx, v26);
        let v36 = C::xreg_new(ctx, v27);
        let v37 = constructor_rv_xor(ctx, v35, v36);
        let v38 = constructor_cmp_eqz(ctx, v37);
        let v39 = constructor_gen_select_xreg(ctx, v38, v34, v31);
        // Rule at src\isa\riscv64\lower.isle line 2351.
        return v39;
    }
    match arg0 {
        &IntCC::Equal => {
            let v4 = C::value_regs_get(ctx, arg1, 0x0_usize);
            let v5 = C::xreg_new(ctx, v4);
            let v6 = C::value_regs_get(ctx, arg2, 0x0_usize);
            let v7 = C::xreg_new(ctx, v6);
            let v8 = constructor_rv_xor(ctx, v5, v7);
            let v10 = C::value_regs_get(ctx, arg1, 0x1_usize);
            let v11 = C::xreg_new(ctx, v10);
            let v12 = C::value_regs_get(ctx, arg2, 0x1_usize);
            let v13 = C::xreg_new(ctx, v12);
            let v14 = constructor_rv_xor(ctx, v11, v13);
            let v15 = constructor_rv_or(ctx, v8, v14);
            let v16 = constructor_rv_seqz(ctx, v15);
            // Rule at src\isa\riscv64\lower.isle line 2322.
            return v16;
        }
        &IntCC::NotEqual => {
            let v4 = C::value_regs_get(ctx, arg1, 0x0_usize);
            let v5 = C::xreg_new(ctx, v4);
            let v6 = C::value_regs_get(ctx, arg2, 0x0_usize);
            let v7 = C::xreg_new(ctx, v6);
            let v8 = constructor_rv_xor(ctx, v5, v7);
            let v10 = C::value_regs_get(ctx, arg1, 0x1_usize);
            let v11 = C::xreg_new(ctx, v10);
            let v12 = C::value_regs_get(ctx, arg2, 0x1_usize);
            let v13 = C::xreg_new(ctx, v12);
            let v14 = constructor_rv_xor(ctx, v11, v13);
            let v15 = constructor_rv_or(ctx, v8, v14);
            let v17 = constructor_rv_snez(ctx, v15);
            // Rule at src\isa\riscv64\lower.isle line 2326.
            return v17;
        }
        &IntCC::SignedGreaterThan => {
            let v18 = &C::intcc_swap_args(ctx, arg0);
            let v19 = constructor_lower_icmp_i128(ctx, v18, arg2, arg1);
            // Rule at src\isa\riscv64\lower.isle line 2332.
            return v19;
        }
        &IntCC::SignedGreaterThanOrEqual => {
            let v20 = &C::intcc_complement(ctx, arg0);
            let v21 = constructor_lower_icmp_i128(ctx, v20, arg1, arg2);
            let v23 = C::imm12_const(ctx, 1_i32);
            let v24 = constructor_rv_xori(ctx, v21, v23);
            // Rule at src\isa\riscv64\lower.isle line 2340.
            return v24;
        }
        &IntCC::SignedLessThanOrEqual => {
            let v20 = &C::intcc_complement(ctx, arg0);
            let v21 = constructor_lower_icmp_i128(ctx, v20, arg1, arg2);
            let v23 = C::imm12_const(ctx, 1_i32);
            let v24 = constructor_rv_xori(ctx, v21, v23);
            // Rule at src\isa\riscv64\lower.isle line 2338.
            return v24;
        }
        &IntCC::UnsignedGreaterThan => {
            let v18 = &C::intcc_swap_args(ctx, arg0);
            let v19 = constructor_lower_icmp_i128(ctx, v18, arg2, arg1);
            // Rule at src\isa\riscv64\lower.isle line 2334.
            return v19;
        }
        &IntCC::UnsignedGreaterThanOrEqual => {
            let v20 = &C::intcc_complement(ctx, arg0);
            let v21 = constructor_lower_icmp_i128(ctx, v20, arg1, arg2);
            let v23 = C::imm12_const(ctx, 1_i32);
            let v24 = constructor_rv_xori(ctx, v21, v23);
            // Rule at src\isa\riscv64\lower.isle line 2344.
            return v24;
        }
        &IntCC::UnsignedLessThanOrEqual => {
            let v20 = &C::intcc_complement(ctx, arg0);
            let v21 = constructor_lower_icmp_i128(ctx, v20, arg1, arg2);
            let v23 = C::imm12_const(ctx, 1_i32);
            let v24 = constructor_rv_xori(ctx, v21, v23);
            // Rule at src\isa\riscv64\lower.isle line 2342.
            return v24;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "lower_icmp_i128", "src\\isa\\riscv64\\lower.isle line 2321")
}

// Generated as internal constructor for term lower_float_compare.
pub fn constructor_lower_float_compare<C: Context>(
    ctx: &mut C,
    arg0: &FloatCompare,
) -> XReg {
    match arg0 {
        &FloatCompare::One {
            r: v1,
        } => {
            // Rule at src\isa\riscv64\lower.isle line 2371.
            return v1;
        }
        &FloatCompare::Zero {
            r: v2,
        } => {
            let v3 = constructor_rv_seqz(ctx, v2);
            // Rule at src\isa\riscv64\lower.isle line 2372.
            return v3;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "lower_float_compare", "src\\isa\\riscv64\\lower.isle line 2370")
}

// Generated as internal constructor for term lower_inbounds_fcvt_to_uint.
pub fn constructor_lower_inbounds_fcvt_to_uint<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Type,
    arg2: FReg,
) -> XReg {
    if arg0 == I64 {
        let v7 = constructor_rv_fcvtlu(ctx, arg1, &FRM::RTZ, arg2);
        // Rule at src\isa\riscv64\lower.isle line 2402.
        return v7;
    }
    let v1 = C::fits_in_32(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_rv_fcvtwu(ctx, arg1, &FRM::RTZ, arg2);
        // Rule at src\isa\riscv64\lower.isle line 2400.
        return v6;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "lower_inbounds_fcvt_to_uint", "src\\isa\\riscv64\\lower.isle line 2399")
}

// Generated as internal constructor for term lower_inbounds_fcvt_to_sint.
pub fn constructor_lower_inbounds_fcvt_to_sint<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Type,
    arg2: FReg,
) -> XReg {
    if arg0 == I64 {
        let v7 = constructor_rv_fcvtl(ctx, arg1, &FRM::RTZ, arg2);
        // Rule at src\isa\riscv64\lower.isle line 2419.
        return v7;
    }
    let v1 = C::fits_in_32(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_rv_fcvtw(ctx, arg1, &FRM::RTZ, arg2);
        // Rule at src\isa\riscv64\lower.isle line 2417.
        return v6;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "lower_inbounds_fcvt_to_sint", "src\\isa\\riscv64\\lower.isle line 2416")
}

// Generated as internal constructor for term lower_fcvt_to_sint_sat.
pub fn constructor_lower_fcvt_to_sint_sat<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Type,
    arg2: FReg,
) -> XReg {
    match arg1 {
        I32 => {
            let v16 = constructor_rv_fcvtw(ctx, arg0, &FRM::RTZ, arg2);
            // Rule at src\isa\riscv64\lower.isle line 2435.
            return v16;
        }
        I64 => {
            let v17 = constructor_rv_fcvtl(ctx, arg0, &FRM::RTZ, arg2);
            // Rule at src\isa\riscv64\lower.isle line 2436.
            return v17;
        }
        _ => {}
    }
    let v2 = C::fits_in_16(ctx, arg1);
    if let Some(v3) = v2 {
        let v5 = true;
        let v6 = C::fcvt_smax_bound(ctx, arg0, v3, v5);
        let v7 = constructor_imm(ctx, arg0, v6);
        let v8 = C::freg_new(ctx, v7);
        let v9 = C::fcvt_smin_bound(ctx, arg0, v3, v5);
        let v10 = constructor_imm(ctx, arg0, v9);
        let v11 = C::freg_new(ctx, v10);
        let v12 = constructor_rv_fmax(ctx, arg0, v11, arg2);
        let v13 = constructor_rv_fmin(ctx, arg0, v8, v12);
        let v15 = constructor_rv_fcvtw(ctx, arg0, &FRM::RTZ, v13);
        // Rule at src\isa\riscv64\lower.isle line 2430.
        return v15;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "lower_fcvt_to_sint_sat", "src\\isa\\riscv64\\lower.isle line 2429")
}

// Generated as internal constructor for term handle_fcvt_to_int_nan.
pub fn constructor_handle_fcvt_to_int_nan<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: FReg,
    arg2: XReg,
) -> XReg {
    let v3 = constructor_rv_feq(ctx, arg0, arg1, arg1);
    let v4 = constructor_rv_neg(ctx, v3);
    let v5 = constructor_rv_and(ctx, arg2, v4);
    // Rule at src\isa\riscv64\lower.isle line 2454.
    return v5;
}

// Generated as internal constructor for term lower_fcvt_to_uint_sat.
pub fn constructor_lower_fcvt_to_uint_sat<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Type,
    arg2: FReg,
) -> XReg {
    match arg1 {
        I32 => {
            let v15 = constructor_rv_fcvtwu(ctx, arg0, &FRM::RTZ, arg2);
            // Rule at src\isa\riscv64\lower.isle line 2478.
            return v15;
        }
        I64 => {
            let v16 = constructor_rv_fcvtlu(ctx, arg0, &FRM::RTZ, arg2);
            // Rule at src\isa\riscv64\lower.isle line 2479.
            return v16;
        }
        _ => {}
    }
    let v2 = C::fits_in_16(ctx, arg1);
    if let Some(v3) = v2 {
        let v5 = true;
        let v6 = C::fcvt_umax_bound(ctx, arg0, v3, v5);
        let v7 = constructor_imm(ctx, arg0, v6);
        let v8 = C::freg_new(ctx, v7);
        let v9 = C::zero_reg(ctx);
        let v10 = constructor_rv_fmvdx(ctx, v9);
        let v11 = constructor_rv_fmax(ctx, arg0, v10, arg2);
        let v12 = constructor_rv_fmin(ctx, arg0, v8, v11);
        let v14 = constructor_rv_fcvtwu(ctx, arg0, &FRM::RTZ, v12);
        // Rule at src\isa\riscv64\lower.isle line 2473.
        return v14;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "lower_fcvt_to_uint_sat", "src\\isa\\riscv64\\lower.isle line 2472")
}
