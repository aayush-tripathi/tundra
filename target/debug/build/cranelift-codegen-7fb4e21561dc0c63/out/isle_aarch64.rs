// GENERATED BY ISLE. DO NOT EDIT!
//
// Generated automatically from the instruction-selection DSL code in:
// - src\prelude.isle
// - src\prelude_lower.isle
// - src\isa\aarch64\inst.isle
// - src\isa\aarch64\inst_neon.isle
// - src\isa\aarch64\lower.isle
// - src\isa\aarch64\lower_dynamic_neon.isle
// - <OUT_DIR>\clif_lower.isle

use super::*;  // Pulls in all external types.
use std::marker::PhantomData;

/// Context during lowering: an implementation of this trait
/// must be provided with all external constructors and extractors.
/// A mutable borrow is passed along through all lowering logic.
pub trait Context {
    fn unit(&mut self, ) -> Unit;
    fn def_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn value_type(&mut self, arg0: Value) -> Type;
    fn u32_nonnegative(&mut self, arg0: u32) -> Option<u32>;
    fn offset32(&mut self, arg0: Offset32) -> i32;
    fn u32_lteq(&mut self, arg0: u32, arg1: u32) -> Option<Unit>;
    fn u8_lteq(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn u8_lt(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn u8_as_i8(&mut self, arg0: u8) -> i8;
    fn u8_as_u32(&mut self, arg0: u8) -> u32;
    fn u8_as_u64(&mut self, arg0: u8) -> u64;
    fn u16_as_i16(&mut self, arg0: u16) -> i16;
    fn u16_as_u32(&mut self, arg0: u16) -> u32;
    fn u16_as_u64(&mut self, arg0: u16) -> u64;
    fn u64_as_u8(&mut self, arg0: u64) -> u8;
    fn u64_as_u16(&mut self, arg0: u64) -> u16;
    fn u64_as_i64(&mut self, arg0: u64) -> i64;
    fn u8_try_from_u64(&mut self, arg0: u64) -> Option<u8>;
    fn u8_try_from_u16(&mut self, arg0: u16) -> Option<u8>;
    fn u8_try_from_i32(&mut self, arg0: i32) -> Option<u8>;
    fn u16_try_from_u64(&mut self, arg0: u64) -> Option<u16>;
    fn u32_try_from_u64(&mut self, arg0: u64) -> Option<u32>;
    fn u64_try_from_i64(&mut self, arg0: i64) -> Option<u64>;
    fn i8_try_from_u64(&mut self, arg0: u64) -> Option<i8>;
    fn i16_try_from_u64(&mut self, arg0: u64) -> Option<i16>;
    fn i32_try_from_u64(&mut self, arg0: u64) -> Option<i32>;
    fn u32_as_u64(&mut self, arg0: u32) -> u64;
    fn i32_as_i64(&mut self, arg0: i32) -> i64;
    fn i64_as_u64(&mut self, arg0: i64) -> u64;
    fn i64_neg(&mut self, arg0: i64) -> i64;
    fn i8_neg(&mut self, arg0: i8) -> i8;
    fn u128_as_u64(&mut self, arg0: u128) -> Option<u64>;
    fn u64_as_u32(&mut self, arg0: u64) -> Option<u32>;
    fn u32_as_u16(&mut self, arg0: u32) -> Option<u16>;
    fn i32_as_i8(&mut self, arg0: i32) -> Option<i8>;
    fn u64_as_i32(&mut self, arg0: u64) -> i32;
    fn u8_and(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_shl(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_shr(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_sub(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u32_add(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_sub(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_and(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_shl(&mut self, arg0: u32, arg1: u32) -> u32;
    fn s32_add_fallible(&mut self, arg0: i32, arg1: i32) -> Option<i32>;
    fn checked_add_with_type(&mut self, arg0: Type, arg1: u64, arg2: u64) -> Option<u64>;
    fn add_overflows_with_type(&mut self, arg0: Type, arg1: u64, arg2: u64) -> bool;
    fn u64_add(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sub(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_mul(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_udiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_and(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_or(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_xor(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_shl(&mut self, arg0: u64, arg1: u64) -> u64;
    fn imm64_sdiv(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Option<Imm64>;
    fn imm64_shl(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_ushr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_sshr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn u64_not(&mut self, arg0: u64) -> u64;
    fn u64_eq(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_le(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_lt(&mut self, arg0: u64, arg1: u64) -> bool;
    fn i64_shr(&mut self, arg0: i64, arg1: i64) -> i64;
    fn i64_ctz(&mut self, arg0: i64) -> i64;
    fn i64_sextend_u64(&mut self, arg0: Type, arg1: u64) -> i64;
    fn i64_sextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> i64;
    fn u64_uextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> u64;
    fn imm64_icmp(&mut self, arg0: Type, arg1: &IntCC, arg2: Imm64, arg3: Imm64) -> Imm64;
    fn u64_is_zero(&mut self, arg0: u64) -> bool;
    fn i64_is_zero(&mut self, arg0: i64) -> bool;
    fn u64_is_odd(&mut self, arg0: u64) -> bool;
    fn u128_replicated_u64(&mut self, arg0: u128) -> Option<u64>;
    fn u64_replicated_u32(&mut self, arg0: u64) -> Option<u64>;
    fn u32_replicated_u16(&mut self, arg0: u64) -> Option<u64>;
    fn u16_replicated_u8(&mut self, arg0: u64) -> Option<u8>;
    fn u128_low_bits(&mut self, arg0: u128) -> u64;
    fn u128_high_bits(&mut self, arg0: u128) -> u64;
    fn f16_min(&mut self, arg0: Ieee16, arg1: Ieee16) -> Option<Ieee16>;
    fn f16_max(&mut self, arg0: Ieee16, arg1: Ieee16) -> Option<Ieee16>;
    fn f16_neg(&mut self, arg0: Ieee16) -> Ieee16;
    fn f16_abs(&mut self, arg0: Ieee16) -> Ieee16;
    fn f16_copysign(&mut self, arg0: Ieee16, arg1: Ieee16) -> Ieee16;
    fn f32_add(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_sub(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_mul(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_div(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_sqrt(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_ceil(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_floor(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_trunc(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_nearest(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_min(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_max(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_neg(&mut self, arg0: Ieee32) -> Ieee32;
    fn f32_abs(&mut self, arg0: Ieee32) -> Ieee32;
    fn f32_copysign(&mut self, arg0: Ieee32, arg1: Ieee32) -> Ieee32;
    fn f64_add(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_sub(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_mul(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_div(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_sqrt(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_ceil(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_floor(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_trunc(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_nearest(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_min(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_max(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_neg(&mut self, arg0: Ieee64) -> Ieee64;
    fn f64_abs(&mut self, arg0: Ieee64) -> Ieee64;
    fn f64_copysign(&mut self, arg0: Ieee64, arg1: Ieee64) -> Ieee64;
    fn f128_min(&mut self, arg0: Ieee128, arg1: Ieee128) -> Option<Ieee128>;
    fn f128_max(&mut self, arg0: Ieee128, arg1: Ieee128) -> Option<Ieee128>;
    fn f128_neg(&mut self, arg0: Ieee128) -> Ieee128;
    fn f128_abs(&mut self, arg0: Ieee128) -> Ieee128;
    fn f128_copysign(&mut self, arg0: Ieee128, arg1: Ieee128) -> Ieee128;
    fn ty_umin(&mut self, arg0: Type) -> u64;
    fn ty_umax(&mut self, arg0: Type) -> u64;
    fn ty_smin(&mut self, arg0: Type) -> u64;
    fn ty_smax(&mut self, arg0: Type) -> u64;
    fn ty_bits(&mut self, arg0: Type) -> u8;
    fn ty_bits_u16(&mut self, arg0: Type) -> u16;
    fn ty_bits_u64(&mut self, arg0: Type) -> u64;
    fn ty_mask(&mut self, arg0: Type) -> u64;
    fn ty_lane_mask(&mut self, arg0: Type) -> u64;
    fn ty_lane_count(&mut self, arg0: Type) -> u64;
    fn ty_bytes(&mut self, arg0: Type) -> u16;
    fn lane_type(&mut self, arg0: Type) -> Type;
    fn ty_half_lanes(&mut self, arg0: Type) -> Option<Type>;
    fn ty_half_width(&mut self, arg0: Type) -> Option<Type>;
    fn ty_equal(&mut self, arg0: Type, arg1: Type) -> bool;
    fn mem_flags_trusted(&mut self, ) -> MemFlags;
    fn intcc_swap_args(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_complement(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_without_eq(&mut self, arg0: &IntCC) -> IntCC;
    fn floatcc_swap_args(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_complement(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_unordered(&mut self, arg0: &FloatCC) -> bool;
    fn fits_in_16(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn lane_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_16(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64_extract(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32_or_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_8_or_16(&mut self, arg0: Type) -> Option<Type>;
    fn ty_16_or_32(&mut self, arg0: Type) -> Option<Type>;
    fn int_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_16_to_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_float_or_vec(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_not_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_ctor(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_addr64(&mut self, arg0: Type) -> Option<Type>;
    fn not_vec32x2(&mut self, arg0: Type) -> Option<Type>;
    fn not_i64x2(&mut self, arg0: Type) -> Option<()>;
    fn u8_from_uimm8(&mut self, arg0: Uimm8) -> u8;
    fn u64_from_bool(&mut self, arg0: bool) -> u64;
    fn u64_from_imm64(&mut self, arg0: Imm64) -> u64;
    fn nonzero_u64_from_imm64(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64_power_of_two(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64(&mut self, arg0: u64) -> Imm64;
    fn imm64_masked(&mut self, arg0: Type, arg1: u64) -> Imm64;
    fn u16_from_ieee16(&mut self, arg0: Ieee16) -> u16;
    fn u32_from_ieee32(&mut self, arg0: Ieee32) -> u32;
    fn u64_from_ieee64(&mut self, arg0: Ieee64) -> u64;
    fn multi_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn ty_dyn64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn128_int(&mut self, arg0: Type) -> Option<Type>;
    fn offset32_to_i32(&mut self, arg0: Offset32) -> i32;
    fn i32_to_offset32(&mut self, arg0: i32) -> Offset32;
    fn intcc_unsigned(&mut self, arg0: &IntCC) -> IntCC;
    fn signed_cond_code(&mut self, arg0: &IntCC) -> Option<IntCC>;
    fn trap_code_division_by_zero(&mut self, ) -> TrapCode;
    fn trap_code_integer_overflow(&mut self, ) -> TrapCode;
    fn trap_code_bad_conversion_to_integer(&mut self, ) -> TrapCode;
    fn range(&mut self, arg0: usize, arg1: usize) -> Range;
    fn range_view(&mut self, arg0: Range) -> RangeView;
    fn value_reg(&mut self, arg0: Reg) -> ValueRegs;
    fn writable_value_reg(&mut self, arg0: WritableReg) -> WritableValueRegs;
    fn value_regs(&mut self, arg0: Reg, arg1: Reg) -> ValueRegs;
    fn writable_value_regs(&mut self, arg0: WritableReg, arg1: WritableReg) -> WritableValueRegs;
    fn value_regs_invalid(&mut self, ) -> ValueRegs;
    fn output_none(&mut self, ) -> InstOutput;
    fn output(&mut self, arg0: ValueRegs) -> InstOutput;
    fn output_pair(&mut self, arg0: ValueRegs, arg1: ValueRegs) -> InstOutput;
    fn output_builder_new(&mut self, ) -> InstOutputBuilder;
    fn output_builder_push(&mut self, arg0: &InstOutputBuilder, arg1: ValueRegs) -> Unit;
    fn output_builder_finish(&mut self, arg0: &InstOutputBuilder) -> InstOutput;
    fn temp_writable_reg(&mut self, arg0: Type) -> WritableReg;
    fn is_valid_reg(&mut self, arg0: Reg) -> bool;
    fn invalid_reg(&mut self, ) -> Reg;
    fn mark_value_used(&mut self, arg0: Value) -> Unit;
    fn put_in_reg(&mut self, arg0: Value) -> Reg;
    fn put_in_regs(&mut self, arg0: Value) -> ValueRegs;
    fn ensure_in_vreg(&mut self, arg0: Reg, arg1: Type) -> Reg;
    fn value_regs_get(&mut self, arg0: ValueRegs, arg1: usize) -> Reg;
    fn value_regs_len(&mut self, arg0: ValueRegs) -> usize;
    fn preg_to_reg(&mut self, arg0: PReg) -> Reg;
    fn add_range_fact(&mut self, arg0: Reg, arg1: u16, arg2: u64, arg3: u64) -> Reg;
    fn single_target(&mut self, arg0: &MachLabelSlice) -> Option<MachLabel>;
    fn two_targets(&mut self, arg0: &MachLabelSlice) -> Option<(MachLabel, MachLabel)>;
    fn jump_table_targets(&mut self, arg0: &MachLabelSlice) -> Option<(MachLabel, BoxVecMachLabel)>;
    fn jump_table_size(&mut self, arg0: &BoxVecMachLabel) -> u32;
    fn value_list_slice(&mut self, arg0: ValueList) -> ValueSlice;
    fn value_slice_empty(&mut self, arg0: ValueSlice) -> Option<()>;
    fn value_slice_unwrap(&mut self, arg0: ValueSlice) -> Option<(Value, ValueSlice)>;
    fn value_slice_len(&mut self, arg0: ValueSlice) -> usize;
    fn value_slice_get(&mut self, arg0: ValueSlice, arg1: usize) -> Value;
    fn writable_reg_to_reg(&mut self, arg0: WritableReg) -> Reg;
    fn inst_results(&mut self, arg0: Inst) -> ValueSlice;
    fn value_is_unused(&mut self, arg0: Value) -> bool;
    fn first_result(&mut self, arg0: Inst) -> Option<Value>;
    fn inst_data_value(&mut self, arg0: Inst) -> InstructionData;
    fn i32_from_iconst(&mut self, arg0: Value) -> Option<i32>;
    fn i64_from_iconst(&mut self, arg0: Value) -> Option<i64>;
    fn zero_value(&mut self, arg0: Value) -> Option<Value>;
    fn is_sinkable_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn maybe_uextend(&mut self, arg0: Value) -> Option<Value>;
    fn uimm8(&mut self, arg0: Imm64) -> Option<u8>;
    fn emit(&mut self, arg0: &MInst) -> Unit;
    fn sink_inst(&mut self, arg0: Inst) -> Unit;
    fn emit_u64_le_const(&mut self, arg0: u64) -> VCodeConstant;
    fn emit_u128_le_const(&mut self, arg0: u128) -> VCodeConstant;
    fn const_to_vconst(&mut self, arg0: Constant) -> VCodeConstant;
    fn tls_model(&mut self, arg0: Type) -> TlsModel;
    fn tls_model_is_elf_gd(&mut self, ) -> Option<Unit>;
    fn tls_model_is_macho(&mut self, ) -> Option<Unit>;
    fn tls_model_is_coff(&mut self, ) -> Option<Unit>;
    fn preserve_frame_pointers(&mut self, ) -> Option<Unit>;
    fn stack_switch_model(&mut self, ) -> Option<StackSwitchModel>;
    fn box_external_name(&mut self, arg0: ExternalName) -> BoxExternalName;
    fn func_ref_data(&mut self, arg0: FuncRef) -> (SigRef, ExternalName, RelocDistance);
    fn exception_sig(&mut self, arg0: ExceptionTable) -> SigRef;
    fn symbol_value_data(&mut self, arg0: GlobalValue) -> Option<(ExternalName, RelocDistance, i64)>;
    fn reloc_distance_near(&mut self, arg0: RelocDistance) -> Option<()>;
    fn vec_mask_from_immediate(&mut self, arg0: Immediate) -> Option<VecMask>;
    fn u128_from_immediate(&mut self, arg0: Immediate) -> Option<u128>;
    fn vconst_from_immediate(&mut self, arg0: Immediate) -> Option<VCodeConstant>;
    fn u128_from_constant(&mut self, arg0: Constant) -> Option<u128>;
    fn u64_from_constant(&mut self, arg0: Constant) -> Option<u64>;
    fn shuffle64_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8)>;
    fn shuffle32_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8, u8, u8)>;
    fn shuffle16_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8, u8, u8, u8, u8, u8, u8)>;
    fn only_writable_reg(&mut self, arg0: WritableValueRegs) -> Option<WritableReg>;
    fn writable_regs_get(&mut self, arg0: WritableValueRegs, arg1: usize) -> WritableReg;
    fn abi_num_args(&mut self, arg0: Sig) -> usize;
    fn abi_get_arg(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_num_rets(&mut self, arg0: Sig) -> usize;
    fn abi_get_ret(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_ret_arg(&mut self, arg0: Sig) -> Option<ABIArg>;
    fn abi_no_ret_arg(&mut self, arg0: Sig) -> Option<()>;
    fn abi_unwrap_ret_area_ptr(&mut self, ) -> Reg;
    fn abi_stackslot_addr(&mut self, arg0: WritableReg, arg1: StackSlot, arg2: Offset32) -> MInst;
    fn abi_dynamic_stackslot_addr(&mut self, arg0: WritableReg, arg1: DynamicStackSlot) -> MInst;
    fn abi_arg_only_slot(&mut self, arg0: &ABIArg) -> Option<ABIArgSlot>;
    fn abi_arg_implicit_pointer(&mut self, arg0: &ABIArg) -> Option<(ABIArgSlot, i64, Type)>;
    fn real_reg_to_reg(&mut self, arg0: RealReg) -> Reg;
    fn real_reg_to_writable_reg(&mut self, arg0: RealReg) -> WritableReg;
    fn gen_move(&mut self, arg0: Type, arg1: WritableReg, arg2: Reg) -> MInst;
    fn gen_return(&mut self, arg0: ValueSlice) -> Unit;
    fn gen_return_call(&mut self, arg0: SigRef, arg1: ExternalName, arg2: RelocDistance, arg3: ValueSlice) -> InstOutput;
    fn gen_return_call_indirect(&mut self, arg0: SigRef, arg1: Value, arg2: ValueSlice) -> InstOutput;
    fn safe_divisor_from_imm64(&mut self, arg0: Type, arg1: Imm64) -> Option<u64>;
    fn sign_return_address_disabled(&mut self, ) -> Option<Unit>;
    fn use_lse(&mut self, arg0: Inst) -> Option<()>;
    fn use_fp16(&mut self, ) -> bool;
    fn move_wide_const_from_u64(&mut self, arg0: Type, arg1: u64) -> Option<MoveWideConst>;
    fn move_wide_const_from_inverted_u64(&mut self, arg0: Type, arg1: u64) -> Option<MoveWideConst>;
    fn imm_logic_from_u64(&mut self, arg0: Type, arg1: u64) -> Option<ImmLogic>;
    fn imm_size_from_type(&mut self, arg0: Type) -> Option<u16>;
    fn imm_logic_from_imm64(&mut self, arg0: Type, arg1: Imm64) -> Option<ImmLogic>;
    fn imm_shift_from_imm64(&mut self, arg0: Type, arg1: Imm64) -> Option<ImmShift>;
    fn imm_shift_from_u8(&mut self, arg0: u8) -> ImmShift;
    fn imm12_from_u64(&mut self, arg0: u64) -> Option<Imm12>;
    fn u8_into_uimm5(&mut self, arg0: u8) -> UImm5;
    fn u8_into_imm12(&mut self, arg0: u8) -> Imm12;
    fn u64_into_imm_logic(&mut self, arg0: Type, arg1: u64) -> ImmLogic;
    fn branch_target(&mut self, arg0: MachLabel) -> BranchTarget;
    fn targets_jt_space(&mut self, arg0: &BoxVecMachLabel) -> CodeOffset;
    fn min_fp_value(&mut self, arg0: bool, arg1: u8, arg2: u8) -> Reg;
    fn max_fp_value(&mut self, arg0: bool, arg1: u8, arg2: u8) -> Reg;
    fn fpu_op_ri_ushr(&mut self, arg0: u8, arg1: u8) -> FPUOpRI;
    fn fpu_op_ri_sli(&mut self, arg0: u8, arg1: u8) -> FPUOpRIMod;
    fn lshr_from_u64(&mut self, arg0: Type, arg1: u64) -> Option<ShiftOpAndAmt>;
    fn lshl_from_imm64(&mut self, arg0: Type, arg1: Imm64) -> Option<ShiftOpAndAmt>;
    fn lshl_from_u64(&mut self, arg0: Type, arg1: u64) -> Option<ShiftOpAndAmt>;
    fn ashr_from_u64(&mut self, arg0: Type, arg1: u64) -> Option<ShiftOpAndAmt>;
    fn integral_ty(&mut self, arg0: Type) -> Option<Type>;
    fn valid_atomic_transaction(&mut self, arg0: Type) -> Option<Type>;
    fn is_zero_simm9(&mut self, arg0: &SImm9) -> Option<Unit>;
    fn is_zero_uimm12(&mut self, arg0: &UImm12Scaled) -> Option<Unit>;
    fn extended_value_from_value(&mut self, arg0: Value) -> Option<ExtendedValue>;
    fn put_extended_in_reg(&mut self, arg0: &ExtendedValue) -> Reg;
    fn get_extended_op(&mut self, arg0: &ExtendedValue) -> ExtendOp;
    fn nzcv(&mut self, arg0: bool, arg1: bool, arg2: bool, arg3: bool) -> NZCV;
    fn cond_br_zero(&mut self, arg0: Reg, arg1: &OperandSize) -> CondBrKind;
    fn cond_br_not_zero(&mut self, arg0: Reg, arg1: &OperandSize) -> CondBrKind;
    fn cond_br_cond(&mut self, arg0: &Cond) -> CondBrKind;
    fn zero_reg(&mut self, ) -> Reg;
    fn fp_reg(&mut self, ) -> Reg;
    fn stack_reg(&mut self, ) -> Reg;
    fn writable_link_reg(&mut self, ) -> WritableReg;
    fn writable_zero_reg(&mut self, ) -> WritableReg;
    fn a64_extr_imm(&mut self, arg0: Type, arg1: ImmShift) -> ShiftOpAndAmt;
    fn load_constant_full(&mut self, arg0: Type, arg1: &ImmExtend, arg2: &OperandSize, arg3: u64) -> Reg;
    fn simm7_scaled_from_i64(&mut self, arg0: i64, arg1: Type) -> Option<SImm7Scaled>;
    fn uimm12_scaled_from_i64(&mut self, arg0: i64, arg1: Type) -> Option<UImm12Scaled>;
    fn simm9_from_i64(&mut self, arg0: i64) -> Option<SImm9>;
    fn u64_low32_bits_unset(&mut self, arg0: u64) -> Option<u64>;
    fn fp_cond_code(&mut self, arg0: &FloatCC) -> Cond;
    fn cond_code(&mut self, arg0: &IntCC) -> Cond;
    fn invert_cond(&mut self, arg0: &Cond) -> Cond;
    fn float_cc_cmp_zero_to_vec_misc_op(&mut self, arg0: &FloatCC) -> VecMisc2;
    fn float_cc_cmp_zero_to_vec_misc_op_swap(&mut self, arg0: &FloatCC) -> VecMisc2;
    fn fcmp_zero_cond(&mut self, arg0: &FloatCC) -> Option<FloatCC>;
    fn fcmp_zero_cond_not_eq(&mut self, arg0: &FloatCC) -> Option<FloatCC>;
    fn int_cc_cmp_zero_to_vec_misc_op(&mut self, arg0: &IntCC) -> VecMisc2;
    fn int_cc_cmp_zero_to_vec_misc_op_swap(&mut self, arg0: &IntCC) -> VecMisc2;
    fn icmp_zero_cond(&mut self, arg0: &IntCC) -> Option<IntCC>;
    fn icmp_zero_cond_not_eq(&mut self, arg0: &IntCC) -> Option<IntCC>;
    fn preg_sp(&mut self, ) -> PReg;
    fn preg_fp(&mut self, ) -> PReg;
    fn preg_link(&mut self, ) -> PReg;
    fn preg_pinned(&mut self, ) -> PReg;
    fn gen_call(&mut self, arg0: SigRef, arg1: ExternalName, arg2: RelocDistance, arg3: ValueSlice) -> InstOutput;
    fn gen_call_indirect(&mut self, arg0: SigRef, arg1: Value, arg2: ValueSlice) -> InstOutput;
    fn gen_try_call(&mut self, arg0: SigRef, arg1: ExternalName, arg2: RelocDistance, arg3: ExceptionTable, arg4: ValueSlice, arg5: &MachLabelSlice) -> Unit;
    fn gen_try_call_indirect(&mut self, arg0: SigRef, arg1: Value, arg2: ExceptionTable, arg3: ValueSlice, arg4: &MachLabelSlice) -> Unit;
    fn asimd_mov_mod_imm_zero(&mut self, arg0: &ScalarSize) -> ASIMDMovModImm;
    fn asimd_mov_mod_imm_from_u64(&mut self, arg0: u64, arg1: &ScalarSize) -> Option<ASIMDMovModImm>;
    fn asimd_fp_mod_imm_from_u64(&mut self, arg0: u64, arg1: &ScalarSize) -> Option<ASIMDFPModImm>;
    fn shuffle_dup8_from_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn shuffle_dup16_from_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn shuffle_dup32_from_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn shuffle_dup64_from_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn vec_extract_imm4_from_immediate(&mut self, arg0: Immediate) -> Option<u8>;
    fn shift_masked_imm(&mut self, arg0: Type, arg1: u64) -> u8;
    fn shift_mask(&mut self, arg0: Type) -> ImmLogic;
    fn negate_imm_shift(&mut self, arg0: Type, arg1: ImmShift) -> ImmShift;
    fn rotr_mask(&mut self, arg0: Type) -> ImmLogic;
    fn rotr_opposite_amount(&mut self, arg0: Type, arg1: ImmShift) -> ImmShift;
    fn test_and_compare_bit_const(&mut self, arg0: Type, arg1: u64) -> Option<u8>;
    fn unpack_value_array_2(&mut self, arg0: &ValueArray2) -> (Value, Value);
    fn pack_value_array_2(&mut self, arg0: Value, arg1: Value) -> ValueArray2;
    fn unpack_value_array_3(&mut self, arg0: &ValueArray3) -> (Value, Value, Value);
    fn pack_value_array_3(&mut self, arg0: Value, arg1: Value, arg2: Value) -> ValueArray3;
    fn unpack_block_array_2(&mut self, arg0: &BlockArray2) -> (BlockCall, BlockCall);
    fn pack_block_array_2(&mut self, arg0: BlockCall, arg1: BlockCall) -> BlockArray2;
}

pub trait ContextIter {
    type Context;
    type Output;
    fn next(&mut self, ctx: &mut Self::Context) -> Option<Self::Output>;
    fn size_hint(&self) -> (usize, Option<usize>) { (0, None) }
}

pub trait IntoContextIter {
    type Context;
    type Output;
    type IntoIter: ContextIter<Context = Self::Context, Output = Self::Output>;
    fn into_context_iter(self) -> Self::IntoIter;
}

pub trait Length {
    fn len(&self) -> usize;
}

impl<T> Length for std::vec::Vec<T> {
    fn len(&self) -> usize {
        std::vec::Vec::len(self)
    }
}

pub struct ContextIterWrapper<I, C> {
    iter: I,
    _ctx: std::marker::PhantomData<C>,
}
impl<I: Default, C> Default for ContextIterWrapper<I, C> {
    fn default() -> Self {
        ContextIterWrapper {
            iter: I::default(),
            _ctx: std::marker::PhantomData
        }
    }
}
impl<I, C> std::ops::Deref for ContextIterWrapper<I, C> {
    type Target = I;
    fn deref(&self) -> &I {
        &self.iter
    }
}
impl<I, C> std::ops::DerefMut for ContextIterWrapper<I, C> {
    fn deref_mut(&mut self) -> &mut I {
        &mut self.iter
    }
}
impl<I: Iterator, C: Context> From<I> for ContextIterWrapper<I, C> {
    fn from(iter: I) -> Self {
        Self { iter, _ctx: std::marker::PhantomData }
    }
}
impl<I: Iterator, C: Context> ContextIter for ContextIterWrapper<I, C> {
    type Context = C;
    type Output = I::Item;
    fn next(&mut self, _ctx: &mut Self::Context) -> Option<Self::Output> {
        self.iter.next()
    }
    fn size_hint(&self) -> (usize, Option<usize>) {
        self.iter.size_hint()
    }
}
impl<I: IntoIterator, C: Context> IntoContextIter for ContextIterWrapper<I, C> {
    type Context = C;
    type Output = I::Item;
    type IntoIter = ContextIterWrapper<I::IntoIter, C>;
    fn into_context_iter(self) -> Self::IntoIter {
        ContextIterWrapper {
            iter: self.iter.into_iter(),
            _ctx: std::marker::PhantomData
        }
    }
}
impl<T, E: Extend<T>, C> Extend<T> for ContextIterWrapper<E, C> {
    fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
        self.iter.extend(iter);
    }
}
impl<L: Length, C> Length for ContextIterWrapper<L, C> {
    fn len(&self) -> usize {
        self.iter.len()
    }
}
           

/// Internal type MultiReg: defined at src\prelude_lower.isle line 17.
#[derive(Clone, Debug)]
pub enum MultiReg {
    Empty,
    One {
        a: Reg,
    },
    Two {
        a: Reg,
        b: Reg,
    },
    Three {
        a: Reg,
        b: Reg,
        c: Reg,
    },
    Four {
        a: Reg,
        b: Reg,
        c: Reg,
        d: Reg,
    },
}

/// Internal type SideEffectNoResult: defined at src\prelude_lower.isle line 422.
#[derive(Clone, Debug)]
pub enum SideEffectNoResult {
    Inst {
        inst: MInst,
    },
    Inst2 {
        inst1: MInst,
        inst2: MInst,
    },
    Inst3 {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
    },
}

/// Internal type ProducesFlags: defined at src\prelude_lower.isle line 475.
#[derive(Clone, Debug)]
pub enum ProducesFlags {
    AlreadyExistingFlags,
    ProducesFlagsSideEffect {
        inst: MInst,
    },
    ProducesFlagsTwiceSideEffect {
        inst1: MInst,
        inst2: MInst,
    },
    ProducesFlagsReturnsReg {
        inst: MInst,
        result: Reg,
    },
    ProducesFlagsReturnsResultWithConsumer {
        inst: MInst,
        result: Reg,
    },
}

/// Internal type ConsumesAndProducesFlags: defined at src\prelude_lower.isle line 494.
#[derive(Clone, Debug)]
pub enum ConsumesAndProducesFlags {
    SideEffect {
        inst: MInst,
    },
    ReturnsReg {
        inst: MInst,
        result: Reg,
    },
}

/// Internal type ConsumesFlags: defined at src\prelude_lower.isle line 502.
#[derive(Clone, Debug)]
pub enum ConsumesFlags {
    ConsumesFlagsSideEffect {
        inst: MInst,
    },
    ConsumesFlagsSideEffect2 {
        inst1: MInst,
        inst2: MInst,
    },
    ConsumesFlagsReturnsResultWithProducer {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsReturnsReg {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsTwiceReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        result: ValueRegs,
    },
    ConsumesFlagsFourTimesReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
        inst4: MInst,
        result: ValueRegs,
    },
}

/// Internal type MInst: defined at src\isa\aarch64\inst.isle line 1.
#[derive(Clone, Debug)]
pub enum MInst {
    Nop0,
    Nop4,
    AluRRR {
        alu_op: ALUOp,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    AluRRRR {
        alu_op: ALUOp3,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        ra: Reg,
    },
    AluRRImm12 {
        alu_op: ALUOp,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
        imm12: Imm12,
    },
    AluRRImmLogic {
        alu_op: ALUOp,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
        imml: ImmLogic,
    },
    AluRRImmShift {
        alu_op: ALUOp,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
        immshift: ImmShift,
    },
    AluRRRShift {
        alu_op: ALUOp,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        shiftop: ShiftOpAndAmt,
    },
    AluRRRExtend {
        alu_op: ALUOp,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        extendop: ExtendOp,
    },
    BitRR {
        op: BitOp,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
    },
    ULoad8 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    SLoad8 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    ULoad16 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    SLoad16 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    ULoad32 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    SLoad32 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    ULoad64 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    Store8 {
        rd: Reg,
        mem: AMode,
        flags: MemFlags,
    },
    Store16 {
        rd: Reg,
        mem: AMode,
        flags: MemFlags,
    },
    Store32 {
        rd: Reg,
        mem: AMode,
        flags: MemFlags,
    },
    Store64 {
        rd: Reg,
        mem: AMode,
        flags: MemFlags,
    },
    StoreP64 {
        rt: Reg,
        rt2: Reg,
        mem: PairAMode,
        flags: MemFlags,
    },
    LoadP64 {
        rt: WritableReg,
        rt2: WritableReg,
        mem: PairAMode,
        flags: MemFlags,
    },
    Mov {
        size: OperandSize,
        rd: WritableReg,
        rm: Reg,
    },
    MovFromPReg {
        rd: WritableReg,
        rm: PReg,
    },
    MovToPReg {
        rd: PReg,
        rm: Reg,
    },
    MovWide {
        op: MoveWideOp,
        rd: WritableReg,
        imm: MoveWideConst,
        size: OperandSize,
    },
    MovK {
        rd: WritableReg,
        rn: Reg,
        imm: MoveWideConst,
        size: OperandSize,
    },
    Extend {
        rd: WritableReg,
        rn: Reg,
        signed: bool,
        from_bits: u8,
        to_bits: u8,
    },
    CSel {
        rd: WritableReg,
        cond: Cond,
        rn: Reg,
        rm: Reg,
    },
    CSNeg {
        rd: WritableReg,
        cond: Cond,
        rn: Reg,
        rm: Reg,
    },
    CSet {
        rd: WritableReg,
        cond: Cond,
    },
    CSetm {
        rd: WritableReg,
        cond: Cond,
    },
    CCmp {
        size: OperandSize,
        rn: Reg,
        rm: Reg,
        nzcv: NZCV,
        cond: Cond,
    },
    CCmpImm {
        size: OperandSize,
        rn: Reg,
        imm: UImm5,
        nzcv: NZCV,
        cond: Cond,
    },
    AtomicRMWLoop {
        ty: Type,
        op: AtomicRMWLoopOp,
        flags: MemFlags,
        addr: Reg,
        operand: Reg,
        oldval: WritableReg,
        scratch1: WritableReg,
        scratch2: WritableReg,
    },
    AtomicCASLoop {
        ty: Type,
        flags: MemFlags,
        addr: Reg,
        expected: Reg,
        replacement: Reg,
        oldval: WritableReg,
        scratch: WritableReg,
    },
    AtomicRMW {
        op: AtomicRMWOp,
        rs: Reg,
        rt: WritableReg,
        rn: Reg,
        ty: Type,
        flags: MemFlags,
    },
    AtomicCAS {
        rd: WritableReg,
        rs: Reg,
        rt: Reg,
        rn: Reg,
        ty: Type,
        flags: MemFlags,
    },
    LoadAcquire {
        access_ty: Type,
        rt: WritableReg,
        rn: Reg,
        flags: MemFlags,
    },
    StoreRelease {
        access_ty: Type,
        rt: Reg,
        rn: Reg,
        flags: MemFlags,
    },
    Fence,
    Csdb,
    FpuMove32 {
        rd: WritableReg,
        rn: Reg,
    },
    FpuMove64 {
        rd: WritableReg,
        rn: Reg,
    },
    FpuMove128 {
        rd: WritableReg,
        rn: Reg,
    },
    FpuMoveFromVec {
        rd: WritableReg,
        rn: Reg,
        idx: u8,
        size: VectorSize,
    },
    FpuExtend {
        rd: WritableReg,
        rn: Reg,
        size: ScalarSize,
    },
    FpuRR {
        fpu_op: FPUOp1,
        size: ScalarSize,
        rd: WritableReg,
        rn: Reg,
    },
    FpuRRR {
        fpu_op: FPUOp2,
        size: ScalarSize,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    FpuRRI {
        fpu_op: FPUOpRI,
        rd: WritableReg,
        rn: Reg,
    },
    FpuRRIMod {
        fpu_op: FPUOpRIMod,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
    },
    FpuRRRR {
        fpu_op: FPUOp3,
        size: ScalarSize,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        ra: Reg,
    },
    FpuCmp {
        size: ScalarSize,
        rn: Reg,
        rm: Reg,
    },
    FpuLoad16 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    FpuStore16 {
        rd: Reg,
        mem: AMode,
        flags: MemFlags,
    },
    FpuLoad32 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    FpuStore32 {
        rd: Reg,
        mem: AMode,
        flags: MemFlags,
    },
    FpuLoad64 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    FpuStore64 {
        rd: Reg,
        mem: AMode,
        flags: MemFlags,
    },
    FpuLoad128 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    FpuStore128 {
        rd: Reg,
        mem: AMode,
        flags: MemFlags,
    },
    FpuLoadP64 {
        rt: WritableReg,
        rt2: WritableReg,
        mem: PairAMode,
        flags: MemFlags,
    },
    FpuStoreP64 {
        rt: Reg,
        rt2: Reg,
        mem: PairAMode,
        flags: MemFlags,
    },
    FpuLoadP128 {
        rt: WritableReg,
        rt2: WritableReg,
        mem: PairAMode,
        flags: MemFlags,
    },
    FpuStoreP128 {
        rt: Reg,
        rt2: Reg,
        mem: PairAMode,
        flags: MemFlags,
    },
    FpuToInt {
        op: FpuToIntOp,
        rd: WritableReg,
        rn: Reg,
    },
    IntToFpu {
        op: IntToFpuOp,
        rd: WritableReg,
        rn: Reg,
    },
    FpuCSel16 {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        cond: Cond,
    },
    FpuCSel32 {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        cond: Cond,
    },
    FpuCSel64 {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        cond: Cond,
    },
    FpuRound {
        op: FpuRoundMode,
        rd: WritableReg,
        rn: Reg,
    },
    MovToFpu {
        rd: WritableReg,
        rn: Reg,
        size: ScalarSize,
    },
    FpuMoveFPImm {
        rd: WritableReg,
        imm: ASIMDFPModImm,
        size: ScalarSize,
    },
    MovToVec {
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        idx: u8,
        size: VectorSize,
    },
    MovFromVec {
        rd: WritableReg,
        rn: Reg,
        idx: u8,
        size: ScalarSize,
    },
    MovFromVecSigned {
        rd: WritableReg,
        rn: Reg,
        idx: u8,
        size: VectorSize,
        scalar_size: OperandSize,
    },
    VecDup {
        rd: WritableReg,
        rn: Reg,
        size: VectorSize,
    },
    VecDupFromFpu {
        rd: WritableReg,
        rn: Reg,
        size: VectorSize,
        lane: u8,
    },
    VecDupFPImm {
        rd: WritableReg,
        imm: ASIMDFPModImm,
        size: VectorSize,
    },
    VecDupImm {
        rd: WritableReg,
        imm: ASIMDMovModImm,
        invert: bool,
        size: VectorSize,
    },
    VecExtend {
        t: VecExtendOp,
        rd: WritableReg,
        rn: Reg,
        high_half: bool,
        lane_size: ScalarSize,
    },
    VecMovElement {
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        dest_idx: u8,
        src_idx: u8,
        size: VectorSize,
    },
    VecRRLong {
        op: VecRRLongOp,
        rd: WritableReg,
        rn: Reg,
        high_half: bool,
    },
    VecRRNarrowLow {
        op: VecRRNarrowOp,
        rd: WritableReg,
        rn: Reg,
        lane_size: ScalarSize,
    },
    VecRRNarrowHigh {
        op: VecRRNarrowOp,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        lane_size: ScalarSize,
    },
    VecRRPair {
        op: VecPairOp,
        rd: WritableReg,
        rn: Reg,
    },
    VecRRRLong {
        alu_op: VecRRRLongOp,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        high_half: bool,
    },
    VecRRRLongMod {
        alu_op: VecRRRLongModOp,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        rm: Reg,
        high_half: bool,
    },
    VecRRPairLong {
        op: VecRRPairLongOp,
        rd: WritableReg,
        rn: Reg,
    },
    VecRRR {
        alu_op: VecALUOp,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        size: VectorSize,
    },
    VecRRRMod {
        alu_op: VecALUModOp,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        rm: Reg,
        size: VectorSize,
    },
    VecFmlaElem {
        alu_op: VecALUModOp,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        rm: Reg,
        size: VectorSize,
        idx: u8,
    },
    VecMisc {
        op: VecMisc2,
        rd: WritableReg,
        rn: Reg,
        size: VectorSize,
    },
    VecLanes {
        op: VecLanesOp,
        rd: WritableReg,
        rn: Reg,
        size: VectorSize,
    },
    VecShiftImm {
        op: VecShiftImmOp,
        rd: WritableReg,
        rn: Reg,
        size: VectorSize,
        imm: u8,
    },
    VecShiftImmMod {
        op: VecShiftImmModOp,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        size: VectorSize,
        imm: u8,
    },
    VecExtract {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        imm4: u8,
    },
    VecTbl {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecTblExt {
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        rm: Reg,
    },
    VecTbl2 {
        rd: WritableReg,
        rn: Reg,
        rn2: Reg,
        rm: Reg,
    },
    VecTbl2Ext {
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        rn2: Reg,
        rm: Reg,
    },
    VecLoadReplicate {
        rd: WritableReg,
        rn: Reg,
        size: VectorSize,
        flags: MemFlags,
    },
    VecCSel {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        cond: Cond,
    },
    MovToNZCV {
        rn: Reg,
    },
    MovFromNZCV {
        rd: WritableReg,
    },
    Call {
        info: BoxCallInfo,
    },
    CallInd {
        info: BoxCallIndInfo,
    },
    ReturnCall {
        info: BoxReturnCallInfo,
    },
    ReturnCallInd {
        info: BoxReturnCallIndInfo,
    },
    Args {
        args: VecArgPair,
    },
    Rets {
        rets: VecRetPair,
    },
    Ret,
    AuthenticatedRet {
        key: APIKey,
        is_hint: bool,
    },
    Jump {
        dest: BranchTarget,
    },
    CondBr {
        taken: BranchTarget,
        not_taken: BranchTarget,
        kind: CondBrKind,
    },
    TestBitAndBranch {
        kind: TestBitAndBranchKind,
        taken: BranchTarget,
        not_taken: BranchTarget,
        rn: Reg,
        bit: u8,
    },
    TrapIf {
        kind: CondBrKind,
        trap_code: TrapCode,
    },
    IndirectBr {
        rn: Reg,
        targets: VecMachLabel,
    },
    Brk,
    Udf {
        trap_code: TrapCode,
    },
    Adr {
        rd: WritableReg,
        off: i32,
    },
    Adrp {
        rd: WritableReg,
        off: i32,
    },
    Word4 {
        data: u32,
    },
    Word8 {
        data: u64,
    },
    JTSequence {
        default: MachLabel,
        targets: BoxVecMachLabel,
        ridx: Reg,
        rtmp1: WritableReg,
        rtmp2: WritableReg,
    },
    LoadExtName {
        rd: WritableReg,
        name: BoxExternalName,
        offset: i64,
    },
    LoadAddr {
        rd: WritableReg,
        mem: AMode,
    },
    Paci {
        key: APIKey,
    },
    Xpaclri,
    Bti {
        targets: BranchTargetType,
    },
    EmitIsland {
        needed_space: CodeOffset,
    },
    ElfTlsGetAddr {
        symbol: BoxExternalName,
        rd: WritableReg,
        tmp: WritableReg,
    },
    MachOTlsGetAddr {
        symbol: ExternalName,
        rd: WritableReg,
    },
    Unwind {
        inst: UnwindInst,
    },
    DummyUse {
        reg: Reg,
    },
    StackProbeLoop {
        start: WritableReg,
        end: Reg,
        step: Imm12,
    },
}

/// Internal type ALUOp: defined at src\isa\aarch64\inst.isle line 1016.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ALUOp {
    Add,
    Sub,
    Orr,
    OrrNot,
    And,
    AndS,
    AndNot,
    Eor,
    EorNot,
    AddS,
    SubS,
    SMulH,
    UMulH,
    SDiv,
    UDiv,
    Extr,
    Lsr,
    Asr,
    Lsl,
    Adc,
    AdcS,
    Sbc,
    SbcS,
}

/// Internal type ALUOp3: defined at src\isa\aarch64\inst.isle line 1054.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ALUOp3 {
    MAdd,
    MSub,
    UMAddL,
    SMAddL,
}

/// Internal type MoveWideOp: defined at src\isa\aarch64\inst.isle line 1066.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum MoveWideOp {
    MovZ,
    MovN,
}

/// Internal type BitOp: defined at src\isa\aarch64\inst.isle line 1123.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum BitOp {
    RBit,
    Clz,
    Cls,
    Rev16,
    Rev32,
    Rev64,
}

/// Internal type AMode: defined at src\isa\aarch64\inst.isle line 1140.
#[derive(Clone, Debug)]
pub enum AMode {
    SPPostIndexed {
        simm9: SImm9,
    },
    SPPreIndexed {
        simm9: SImm9,
    },
    RegReg {
        rn: Reg,
        rm: Reg,
    },
    RegScaled {
        rn: Reg,
        rm: Reg,
    },
    RegScaledExtended {
        rn: Reg,
        rm: Reg,
        extendop: ExtendOp,
    },
    RegExtended {
        rn: Reg,
        rm: Reg,
        extendop: ExtendOp,
    },
    Unscaled {
        rn: Reg,
        simm9: SImm9,
    },
    UnsignedOffset {
        rn: Reg,
        uimm12: UImm12Scaled,
    },
    Label {
        label: MemLabel,
    },
    RegOffset {
        rn: Reg,
        off: i64,
    },
    SPOffset {
        off: i64,
    },
    FPOffset {
        off: i64,
    },
    Const {
        addr: VCodeConstant,
    },
    IncomingArg {
        off: i64,
    },
    SlotOffset {
        off: i64,
    },
}

/// Internal type PairAMode: defined at src\isa\aarch64\inst.isle line 1242.
#[derive(Clone, Debug)]
pub enum PairAMode {
    SignedOffset {
        reg: Reg,
        simm7: SImm7Scaled,
    },
    SPPreIndexed {
        simm7: SImm7Scaled,
    },
    SPPostIndexed {
        simm7: SImm7Scaled,
    },
}

/// Internal type TestBitAndBranchKind: defined at src\isa\aarch64\inst.isle line 1266.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum TestBitAndBranchKind {
    Z,
    NZ,
}

/// Internal type FPUOp1: defined at src\isa\aarch64\inst.isle line 1402.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FPUOp1 {
    Abs,
    Neg,
    Sqrt,
    Cvt32To64,
    Cvt64To32,
}

/// Internal type FPUOp2: defined at src\isa\aarch64\inst.isle line 1412.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FPUOp2 {
    Add,
    Sub,
    Mul,
    Div,
    Max,
    Min,
}

/// Internal type FPUOp3: defined at src\isa\aarch64\inst.isle line 1423.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FPUOp3 {
    MAdd,
    MSub,
    NMAdd,
    NMSub,
}

/// Internal type FpuToIntOp: defined at src\isa\aarch64\inst.isle line 1436.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuToIntOp {
    F32ToU32,
    F32ToI32,
    F32ToU64,
    F32ToI64,
    F64ToU32,
    F64ToI32,
    F64ToU64,
    F64ToI64,
}

/// Internal type IntToFpuOp: defined at src\isa\aarch64\inst.isle line 1449.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum IntToFpuOp {
    U32ToF32,
    I32ToF32,
    U32ToF64,
    I32ToF64,
    U64ToF32,
    I64ToF32,
    U64ToF64,
    I64ToF64,
}

/// Internal type FpuRoundMode: defined at src\isa\aarch64\inst.isle line 1463.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuRoundMode {
    Minus32,
    Minus64,
    Plus32,
    Plus64,
    Zero32,
    Zero64,
    Nearest32,
    Nearest64,
}

/// Internal type VecExtendOp: defined at src\isa\aarch64\inst.isle line 1476.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecExtendOp {
    Sxtl,
    Uxtl,
}

/// Internal type VecALUOp: defined at src\isa\aarch64\inst.isle line 1485.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecALUOp {
    Sqadd,
    Uqadd,
    Sqsub,
    Uqsub,
    Cmeq,
    Cmge,
    Cmgt,
    Cmhs,
    Cmhi,
    Fcmeq,
    Fcmgt,
    Fcmge,
    And,
    Bic,
    Orr,
    Eor,
    Umaxp,
    Add,
    Sub,
    Mul,
    Sshl,
    Ushl,
    Umin,
    Smin,
    Umax,
    Smax,
    Urhadd,
    Fadd,
    Fsub,
    Fdiv,
    Fmax,
    Fmin,
    Fmul,
    Addp,
    Zip1,
    Zip2,
    Sqrdmulh,
    Uzp1,
    Uzp2,
    Trn1,
    Trn2,
}

/// Internal type VecALUModOp: defined at src\isa\aarch64\inst.isle line 1572.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecALUModOp {
    Bsl,
    Fmla,
    Fmls,
}

/// Internal type VecMisc2: defined at src\isa\aarch64\inst.isle line 1583.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecMisc2 {
    Not,
    Neg,
    Abs,
    Fabs,
    Fneg,
    Fsqrt,
    Rev16,
    Rev32,
    Rev64,
    Fcvtzs,
    Fcvtzu,
    Scvtf,
    Ucvtf,
    Frintn,
    Frintz,
    Frintm,
    Frintp,
    Cnt,
    Cmeq0,
    Cmge0,
    Cmgt0,
    Cmle0,
    Cmlt0,
    Fcmeq0,
    Fcmge0,
    Fcmgt0,
    Fcmle0,
    Fcmlt0,
}

/// Internal type VecRRLongOp: defined at src\isa\aarch64\inst.isle line 1644.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecRRLongOp {
    Fcvtl16,
    Fcvtl32,
    Shll8,
    Shll16,
    Shll32,
}

/// Internal type VecRRNarrowOp: defined at src\isa\aarch64\inst.isle line 1659.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecRRNarrowOp {
    Xtn,
    Sqxtn,
    Sqxtun,
    Uqxtn,
    Fcvtn,
}

/// Internal type VecRRRLongOp: defined at src\isa\aarch64\inst.isle line 1673.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecRRRLongOp {
    Smull8,
    Smull16,
    Smull32,
    Umull8,
    Umull16,
    Umull32,
}

/// Internal type VecRRRLongModOp: defined at src\isa\aarch64\inst.isle line 1685.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecRRRLongModOp {
    Umlal8,
    Umlal16,
    Umlal32,
}

/// Internal type VecPairOp: defined at src\isa\aarch64\inst.isle line 1694.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecPairOp {
    Addp,
}

/// Internal type VecRRPairLongOp: defined at src\isa\aarch64\inst.isle line 1702.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecRRPairLongOp {
    Saddlp8,
    Saddlp16,
    Uaddlp8,
    Uaddlp16,
}

/// Internal type VecLanesOp: defined at src\isa\aarch64\inst.isle line 1713.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecLanesOp {
    Addv,
    Uminv,
}

/// Internal type VecShiftImmOp: defined at src\isa\aarch64\inst.isle line 1722.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecShiftImmOp {
    Shl,
    Ushr,
    Sshr,
}

/// Internal type VecShiftImmModOp: defined at src\isa\aarch64\inst.isle line 1733.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecShiftImmModOp {
    Sli,
}

/// Internal type AtomicRMWOp: defined at src\isa\aarch64\inst.isle line 1740.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum AtomicRMWOp {
    Add,
    Clr,
    Eor,
    Set,
    Smax,
    Smin,
    Umax,
    Umin,
    Swp,
}

/// Internal type AtomicRMWLoopOp: defined at src\isa\aarch64\inst.isle line 1755.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum AtomicRMWLoopOp {
    Add,
    Sub,
    And,
    Nand,
    Eor,
    Orr,
    Smax,
    Smin,
    Umax,
    Umin,
    Xchg,
}

/// Internal type APIKey: defined at src\isa\aarch64\inst.isle line 1771.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum APIKey {
    ASP,
    BSP,
    AZ,
    BZ,
}

/// Internal type BranchTargetType: defined at src\isa\aarch64\inst.isle line 1784.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum BranchTargetType {
    None,
    C,
    J,
    JC,
}

/// Internal type ZeroCond: defined at src\isa\aarch64\inst.isle line 3520.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ZeroCond {
    Zero,
    NonZero,
}

/// Internal type ImmExtend: defined at src\isa\aarch64\inst.isle line 3555.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ImmExtend {
    Sign,
    Zero,
}

/// Internal type FlagsAndCC: defined at src\isa\aarch64\inst.isle line 4550.
#[derive(Clone, Debug)]
pub enum FlagsAndCC {
    FlagsAndCC {
        flags: ProducesFlags,
        cc: IntCC,
    },
}

/// Internal type IsFneg: defined at src\isa\aarch64\lower.isle line 537.
#[derive(Clone, Debug)]
pub enum IsFneg {
    Result {
        negate: u64,
        value: Value,
    },
}

/// Internal type ExtType: defined at src\isa\aarch64\lower.isle line 1031.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ExtType {
    Signed,
    Unsigned,
}

// Generated as internal constructor for term ty_shift_mask.
pub fn constructor_ty_shift_mask<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> u64 {
    let v1 = C::lane_type(ctx, arg0);
    let v2 = C::ty_bits(ctx, v1);
    let v3 = C::u8_as_u64(ctx, v2);
    let v5 = C::u64_sub(ctx, v3, 0x1_u64);
    // Rule at src\prelude.isle line 495.
    return v5;
}

// Generated as internal constructor for term output_reg.
pub fn constructor_output_reg<C: Context>(
    ctx: &mut C,
    arg0: Reg,
) -> InstOutput {
    let v1 = C::value_reg(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src\prelude_lower.isle line 82.
    return v2;
}

// Generated as internal constructor for term output_value.
pub fn constructor_output_value<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> InstOutput {
    let v1 = C::put_in_regs(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src\prelude_lower.isle line 86.
    return v2;
}

// Generated as internal constructor for term temp_reg.
pub fn constructor_temp_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> Reg {
    let v1 = C::temp_writable_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src\prelude_lower.isle line 106.
    return v2;
}

// Generated as internal constructor for term value_regs_range.
pub fn constructor_value_regs_range<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
) -> Range {
    let v2 = C::value_regs_len(ctx, arg0);
    let v3 = C::range(ctx, 0x0_usize, v2);
    // Rule at src\prelude_lower.isle line 160.
    return v3;
}

// Generated as internal constructor for term lo_reg.
pub fn constructor_lo_reg<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> Reg {
    let v1 = C::put_in_regs(ctx, arg0);
    let v3 = C::value_regs_get(ctx, v1, 0x0_usize);
    // Rule at src\prelude_lower.isle line 171.
    return v3;
}

// Generated as internal constructor for term multi_reg_to_pair_and_single.
pub fn constructor_multi_reg_to_pair_and_single<C: Context>(
    ctx: &mut C,
    arg0: &MultiReg,
) -> InstOutput {
    if let &MultiReg::Three {
        a: v1,
        b: v2,
        c: v3,
    } = arg0 {
        let v4 = C::value_regs(ctx, v1, v2);
        let v5 = C::value_reg(ctx, v3);
        let v6 = C::output_pair(ctx, v4, v5);
        // Rule at src\prelude_lower.isle line 182.
        return v6;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "multi_reg_to_pair_and_single", "src\\prelude_lower.isle line 181")
}

// Generated as internal constructor for term multi_reg_to_pair.
pub fn constructor_multi_reg_to_pair<C: Context>(
    ctx: &mut C,
    arg0: &MultiReg,
) -> InstOutput {
    if let &MultiReg::Two {
        a: v1,
        b: v2,
    } = arg0 {
        let v3 = C::value_regs(ctx, v1, v2);
        let v4 = C::output(ctx, v3);
        // Rule at src\prelude_lower.isle line 187.
        return v4;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "multi_reg_to_pair", "src\\prelude_lower.isle line 186")
}

// Generated as internal constructor for term multi_reg_to_single.
pub fn constructor_multi_reg_to_single<C: Context>(
    ctx: &mut C,
    arg0: &MultiReg,
) -> InstOutput {
    if let &MultiReg::One {
        a: v1,
    } = arg0 {
        let v2 = C::value_reg(ctx, v1);
        let v3 = C::output(ctx, v2);
        // Rule at src\prelude_lower.isle line 192.
        return v3;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "multi_reg_to_single", "src\\prelude_lower.isle line 191")
}

// Generated as internal constructor for term emit_side_effect.
pub fn constructor_emit_side_effect<C: Context>(
    ctx: &mut C,
    arg0: &SideEffectNoResult,
) -> Unit {
    match arg0 {
        &SideEffectNoResult::Inst {
            inst: ref v1,
        } => {
            let v2 = C::emit(ctx, v1);
            // Rule at src\prelude_lower.isle line 434.
            return v2;
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v3,
            inst2: ref v4,
        } => {
            let v5 = C::emit(ctx, v3);
            let v6 = C::emit(ctx, v4);
            // Rule at src\prelude_lower.isle line 436.
            return v6;
        }
        &SideEffectNoResult::Inst3 {
            inst1: ref v7,
            inst2: ref v8,
            inst3: ref v9,
        } => {
            let v10 = C::emit(ctx, v7);
            let v11 = C::emit(ctx, v8);
            let v12 = C::emit(ctx, v9);
            // Rule at src\prelude_lower.isle line 439.
            return v12;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "emit_side_effect", "src\\prelude_lower.isle line 433")
}

// Generated as internal constructor for term side_effect.
pub fn constructor_side_effect<C: Context>(
    ctx: &mut C,
    arg0: &SideEffectNoResult,
) -> InstOutput {
    let v1 = constructor_emit_side_effect(ctx, arg0);
    let v2 = C::output_none(ctx);
    // Rule at src\prelude_lower.isle line 449.
    return v2;
}

// Generated as internal constructor for term side_effect_concat.
pub fn constructor_side_effect_concat<C: Context>(
    ctx: &mut C,
    arg0: &SideEffectNoResult,
    arg1: &SideEffectNoResult,
) -> SideEffectNoResult {
    match arg0 {
        &SideEffectNoResult::Inst {
            inst: ref v1,
        } => {
            match arg1 {
                &SideEffectNoResult::Inst {
                    inst: ref v3,
                } => {
                    let v4 = SideEffectNoResult::Inst2 {
                        inst1: v1.clone(),
                        inst2: v3.clone(),
                    };
                    // Rule at src\prelude_lower.isle line 454.
                    return v4;
                }
                &SideEffectNoResult::Inst2 {
                    inst1: ref v5,
                    inst2: ref v6,
                } => {
                    let v7 = SideEffectNoResult::Inst3 {
                        inst1: v1.clone(),
                        inst2: v5.clone(),
                        inst3: v6.clone(),
                    };
                    // Rule at src\prelude_lower.isle line 456.
                    return v7;
                }
                _ => {}
            }
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v8,
            inst2: ref v9,
        } => {
            if let &SideEffectNoResult::Inst {
                inst: ref v3,
            } = arg1 {
                let v10 = SideEffectNoResult::Inst3 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                    inst3: v3.clone(),
                };
                // Rule at src\prelude_lower.isle line 458.
                return v10;
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "side_effect_concat", "src\\prelude_lower.isle line 453")
}

// Generated as internal constructor for term side_effect_as_invalid.
pub fn constructor_side_effect_as_invalid<C: Context>(
    ctx: &mut C,
    arg0: &SideEffectNoResult,
) -> InstOutput {
    let v1 = constructor_side_effect(ctx, arg0);
    let v2 = C::invalid_reg(ctx);
    let v3 = constructor_output_reg(ctx, v2);
    // Rule at src\prelude_lower.isle line 464.
    return v3;
}

// Generated as internal constructor for term produces_flags_concat.
pub fn constructor_produces_flags_concat<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ProducesFlags,
) -> ProducesFlags {
    if let &ProducesFlags::ProducesFlagsSideEffect {
        inst: ref v1,
    } = arg0 {
        if let &ProducesFlags::ProducesFlagsSideEffect {
            inst: ref v3,
        } = arg1 {
            let v4 = ProducesFlags::ProducesFlagsTwiceSideEffect {
                inst1: v1.clone(),
                inst2: v3.clone(),
            };
            // Rule at src\prelude_lower.isle line 490.
            return v4;
        }
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "produces_flags_concat", "src\\prelude_lower.isle line 489")
}

// Generated as internal constructor for term produces_flags_get_reg.
pub fn constructor_produces_flags_get_reg<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
) -> Reg {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            // Rule at src\prelude_lower.isle line 520.
            return v2;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v3,
            result: v4,
        } => {
            // Rule at src\prelude_lower.isle line 521.
            return v4;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "produces_flags_get_reg", "src\\prelude_lower.isle line 519")
}

// Generated as internal constructor for term produces_flags_ignore.
pub fn constructor_produces_flags_ignore<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
) -> ProducesFlags {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            let v3 = ProducesFlags::ProducesFlagsSideEffect {
                inst: v1.clone(),
            };
            // Rule at src\prelude_lower.isle line 526.
            return v3;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v4,
            result: v5,
        } => {
            let v6 = ProducesFlags::ProducesFlagsSideEffect {
                inst: v4.clone(),
            };
            // Rule at src\prelude_lower.isle line 528.
            return v6;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "produces_flags_ignore", "src\\prelude_lower.isle line 525")
}

// Generated as internal constructor for term consumes_flags_concat.
pub fn constructor_consumes_flags_concat<C: Context>(
    ctx: &mut C,
    arg0: &ConsumesFlags,
    arg1: &ConsumesFlags,
) -> ConsumesFlags {
    match arg0 {
        &ConsumesFlags::ConsumesFlagsSideEffect {
            inst: ref v8,
        } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect {
                inst: ref v9,
            } = arg1 {
                let v10 = ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                };
                // Rule at src\prelude_lower.isle line 541.
                return v10;
            }
        }
        &ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            if let &ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: ref v4,
                result: v5,
            } = arg1 {
                let v6 = C::value_regs(ctx, v2, v5);
                let v7 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: v1.clone(),
                    inst2: v4.clone(),
                    result: v6,
                };
                // Rule at src\prelude_lower.isle line 535.
                return v7;
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "consumes_flags_concat", "src\\prelude_lower.isle line 534")
}

// Generated as internal constructor for term with_flags.
pub fn constructor_with_flags<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> ValueRegs {
    match arg0 {
        &ProducesFlags::ProducesFlagsSideEffect {
            inst: ref v12,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v16 = C::emit(ctx, v13);
                    let v17 = C::value_reg(ctx, v14);
                    // Rule at src\prelude_lower.isle line 572.
                    return v17;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v21 = C::emit(ctx, v18);
                    let v22 = C::emit(ctx, v19);
                    // Rule at src\prelude_lower.isle line 578.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v28 = C::emit(ctx, v23);
                    let v29 = C::emit(ctx, v24);
                    let v30 = C::emit(ctx, v25);
                    let v31 = C::emit(ctx, v26);
                    // Rule at src\prelude_lower.isle line 590.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v32,
            inst2: ref v33,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v36 = C::emit(ctx, v13);
                    let v37 = C::value_reg(ctx, v14);
                    // Rule at src\prelude_lower.isle line 606.
                    return v37;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v38 = C::emit(ctx, v18);
                    let v39 = C::emit(ctx, v19);
                    // Rule at src\prelude_lower.isle line 613.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v40 = C::emit(ctx, v23);
                    let v41 = C::emit(ctx, v24);
                    let v42 = C::emit(ctx, v25);
                    let v43 = C::emit(ctx, v26);
                    // Rule at src\prelude_lower.isle line 626.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v1,
            result: v2,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect {
                    inst: ref v9,
                } => {
                    let v6 = C::emit(ctx, v1);
                    let v10 = C::emit(ctx, v9);
                    let v11 = C::value_reg(ctx, v2);
                    // Rule at src\prelude_lower.isle line 566.
                    return v11;
                }
                &ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
                    inst: ref v4,
                    result: v5,
                } => {
                    let v6 = C::emit(ctx, v1);
                    let v7 = C::emit(ctx, v4);
                    let v8 = C::value_regs(ctx, v2, v5);
                    // Rule at src\prelude_lower.isle line 558.
                    return v8;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "with_flags", "src\\prelude_lower.isle line 556")
}

// Generated as internal constructor for term with_flags_reg.
pub fn constructor_with_flags_reg<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> Reg {
    let v2 = constructor_with_flags(ctx, arg0, arg1);
    let v4 = C::value_regs_get(ctx, v2, 0x0_usize);
    // Rule at src\prelude_lower.isle line 644.
    return v4;
}

// Generated as internal constructor for term flags_to_producesflags.
pub fn constructor_flags_to_producesflags<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> ProducesFlags {
    let v1 = C::mark_value_used(ctx, arg0);
    // Rule at src\prelude_lower.isle line 651.
    return ProducesFlags::AlreadyExistingFlags;
}

// Generated as internal constructor for term with_flags_side_effect.
pub fn constructor_with_flags_side_effect<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> SideEffectNoResult {
    match arg0 {
        &ProducesFlags::AlreadyExistingFlags => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect {
                    inst: ref v2,
                } => {
                    let v3 = SideEffectNoResult::Inst {
                        inst: v2.clone(),
                    };
                    // Rule at src\prelude_lower.isle line 662.
                    return v3;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v6 = SideEffectNoResult::Inst2 {
                        inst1: v4.clone(),
                        inst2: v5.clone(),
                    };
                    // Rule at src\prelude_lower.isle line 667.
                    return v6;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsSideEffect {
            inst: ref v7,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect {
                    inst: ref v2,
                } => {
                    let v8 = SideEffectNoResult::Inst2 {
                        inst1: v7.clone(),
                        inst2: v2.clone(),
                    };
                    // Rule at src\prelude_lower.isle line 672.
                    return v8;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v9 = SideEffectNoResult::Inst3 {
                        inst1: v7.clone(),
                        inst2: v4.clone(),
                        inst3: v5.clone(),
                    };
                    // Rule at src\prelude_lower.isle line 677.
                    return v9;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v10,
            inst2: ref v11,
        } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect {
                inst: ref v2,
            } = arg1 {
                let v12 = SideEffectNoResult::Inst3 {
                    inst1: v10.clone(),
                    inst2: v11.clone(),
                    inst3: v2.clone(),
                };
                // Rule at src\prelude_lower.isle line 682.
                return v12;
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "with_flags_side_effect", "src\\prelude_lower.isle line 660")
}

// Generated as internal constructor for term with_flags_chained.
pub fn constructor_with_flags_chained<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesAndProducesFlags,
    arg2: &ConsumesFlags,
) -> MultiReg {
    match arg0 {
        &ProducesFlags::ProducesFlagsSideEffect {
            inst: ref v1,
        } => {
            match arg1 {
                &ConsumesAndProducesFlags::SideEffect {
                    inst: ref v3,
                } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect {
                            inst: ref v5,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v8 = C::emit(ctx, v5);
                            // Rule at src\prelude_lower.isle line 691.
                            return MultiReg::Empty;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            // Rule at src\prelude_lower.isle line 699.
                            return MultiReg::Empty;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v16 = C::emit(ctx, v14);
                            let v17 = MultiReg::One {
                                a: v15,
                            };
                            // Rule at src\prelude_lower.isle line 708.
                            return v17;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0_usize);
                            let v26 = C::value_regs_get(ctx, v20, 0x1_usize);
                            let v27 = MultiReg::Two {
                                a: v24,
                                b: v26,
                            };
                            // Rule at src\prelude_lower.isle line 716.
                            return v27;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0_usize);
                            let v38 = C::value_regs_get(ctx, v32, 0x1_usize);
                            let v39 = MultiReg::Two {
                                a: v37,
                                b: v38,
                            };
                            // Rule at src\prelude_lower.isle line 725.
                            return v39;
                        }
                        _ => {}
                    }
                }
                &ConsumesAndProducesFlags::ReturnsReg {
                    inst: ref v47,
                    result: v48,
                } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect {
                            inst: ref v5,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v8 = C::emit(ctx, v5);
                            let v50 = MultiReg::One {
                                a: v48,
                            };
                            // Rule at src\prelude_lower.isle line 785.
                            return v50;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v50 = MultiReg::One {
                                a: v48,
                            };
                            // Rule at src\prelude_lower.isle line 793.
                            return v50;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v16 = C::emit(ctx, v14);
                            let v51 = MultiReg::Two {
                                a: v48,
                                b: v15,
                            };
                            // Rule at src\prelude_lower.isle line 802.
                            return v51;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0_usize);
                            let v26 = C::value_regs_get(ctx, v20, 0x1_usize);
                            let v52 = MultiReg::Three {
                                a: v48,
                                b: v24,
                                c: v26,
                            };
                            // Rule at src\prelude_lower.isle line 810.
                            return v52;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0_usize);
                            let v38 = C::value_regs_get(ctx, v32, 0x1_usize);
                            let v53 = MultiReg::Three {
                                a: v48,
                                b: v37,
                                c: v38,
                            };
                            // Rule at src\prelude_lower.isle line 819.
                            return v53;
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v40,
            result: v41,
        } => {
            match arg1 {
                &ConsumesAndProducesFlags::SideEffect {
                    inst: ref v3,
                } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect {
                            inst: ref v5,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v8 = C::emit(ctx, v5);
                            let v43 = MultiReg::One {
                                a: v41,
                            };
                            // Rule at src\prelude_lower.isle line 738.
                            return v43;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v43 = MultiReg::One {
                                a: v41,
                            };
                            // Rule at src\prelude_lower.isle line 746.
                            return v43;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v16 = C::emit(ctx, v14);
                            let v44 = MultiReg::Two {
                                a: v41,
                                b: v15,
                            };
                            // Rule at src\prelude_lower.isle line 755.
                            return v44;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0_usize);
                            let v26 = C::value_regs_get(ctx, v20, 0x1_usize);
                            let v45 = MultiReg::Three {
                                a: v41,
                                b: v24,
                                c: v26,
                            };
                            // Rule at src\prelude_lower.isle line 763.
                            return v45;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0_usize);
                            let v38 = C::value_regs_get(ctx, v32, 0x1_usize);
                            let v46 = MultiReg::Three {
                                a: v41,
                                b: v37,
                                c: v38,
                            };
                            // Rule at src\prelude_lower.isle line 772.
                            return v46;
                        }
                        _ => {}
                    }
                }
                &ConsumesAndProducesFlags::ReturnsReg {
                    inst: ref v47,
                    result: v48,
                } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect {
                            inst: ref v5,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v8 = C::emit(ctx, v5);
                            let v54 = MultiReg::Two {
                                a: v41,
                                b: v48,
                            };
                            // Rule at src\prelude_lower.isle line 832.
                            return v54;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v54 = MultiReg::Two {
                                a: v41,
                                b: v48,
                            };
                            // Rule at src\prelude_lower.isle line 840.
                            return v54;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v16 = C::emit(ctx, v14);
                            let v55 = MultiReg::Three {
                                a: v41,
                                b: v48,
                                c: v15,
                            };
                            // Rule at src\prelude_lower.isle line 849.
                            return v55;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0_usize);
                            let v26 = C::value_regs_get(ctx, v20, 0x1_usize);
                            let v56 = MultiReg::Four {
                                a: v41,
                                b: v48,
                                c: v24,
                                d: v26,
                            };
                            // Rule at src\prelude_lower.isle line 857.
                            return v56;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0_usize);
                            let v38 = C::value_regs_get(ctx, v32, 0x1_usize);
                            let v57 = MultiReg::Four {
                                a: v41,
                                b: v48,
                                c: v37,
                                d: v38,
                            };
                            // Rule at src\prelude_lower.isle line 866.
                            return v57;
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v58,
            result: v59,
        } => {
            if let &ConsumesAndProducesFlags::ReturnsReg {
                inst: ref v47,
                result: v48,
            } = arg1 {
                match arg2 {
                    &ConsumesFlags::ConsumesFlagsSideEffect {
                        inst: ref v5,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v8 = C::emit(ctx, v5);
                        let v61 = MultiReg::Two {
                            a: v59,
                            b: v48,
                        };
                        // Rule at src\prelude_lower.isle line 878.
                        return v61;
                    }
                    &ConsumesFlags::ConsumesFlagsSideEffect2 {
                        inst1: ref v10,
                        inst2: ref v11,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v12 = C::emit(ctx, v10);
                        let v13 = C::emit(ctx, v11);
                        let v61 = MultiReg::Two {
                            a: v59,
                            b: v48,
                        };
                        // Rule at src\prelude_lower.isle line 886.
                        return v61;
                    }
                    &ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
                        inst: ref v63,
                        result: v64,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v65 = C::emit(ctx, v63);
                        let v66 = MultiReg::Three {
                            a: v59,
                            b: v48,
                            c: v64,
                        };
                        // Rule at src\prelude_lower.isle line 903.
                        return v66;
                    }
                    &ConsumesFlags::ConsumesFlagsReturnsReg {
                        inst: ref v14,
                        result: v15,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v16 = C::emit(ctx, v14);
                        let v62 = MultiReg::Three {
                            a: v59,
                            b: v48,
                            c: v15,
                        };
                        // Rule at src\prelude_lower.isle line 895.
                        return v62;
                    }
                    &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                        inst1: ref v18,
                        inst2: ref v19,
                        result: v20,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v21 = C::emit(ctx, v18);
                        let v22 = C::emit(ctx, v19);
                        let v24 = C::value_regs_get(ctx, v20, 0x0_usize);
                        let v26 = C::value_regs_get(ctx, v20, 0x1_usize);
                        let v67 = MultiReg::Four {
                            a: v59,
                            b: v48,
                            c: v24,
                            d: v26,
                        };
                        // Rule at src\prelude_lower.isle line 911.
                        return v67;
                    }
                    &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                        inst1: ref v28,
                        inst2: ref v29,
                        inst3: ref v30,
                        inst4: ref v31,
                        result: v32,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v33 = C::emit(ctx, v28);
                        let v34 = C::emit(ctx, v29);
                        let v35 = C::emit(ctx, v30);
                        let v36 = C::emit(ctx, v31);
                        let v37 = C::value_regs_get(ctx, v32, 0x0_usize);
                        let v38 = C::value_regs_get(ctx, v32, 0x1_usize);
                        let v68 = MultiReg::Four {
                            a: v59,
                            b: v48,
                            c: v37,
                            d: v38,
                        };
                        // Rule at src\prelude_lower.isle line 920.
                        return v68;
                    }
                    _ => {}
                }
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "with_flags_chained", "src\\prelude_lower.isle line 688")
}

// Generated as internal constructor for term lower_return.
pub fn constructor_lower_return<C: Context>(
    ctx: &mut C,
    arg0: ValueSlice,
) -> InstOutput {
    let v1 = C::gen_return(ctx, arg0);
    let v2 = C::output_none(ctx);
    // Rule at src\prelude_lower.isle line 1127.
    return v2;
}

// Generated as internal constructor for term operand_size.
pub fn constructor_operand_size<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> OperandSize {
    let v1 = C::fits_in_32(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src\isa\aarch64\inst.isle line 1281.
        return OperandSize::Size32;
    }
    let v4 = C::fits_in_64(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src\isa\aarch64\inst.isle line 1282.
        return OperandSize::Size64;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "operand_size", "src\\isa\\aarch64\\inst.isle line 1280")
}

// Generated as internal constructor for term diff_from_32.
pub fn constructor_diff_from_32<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> u8 {
    match arg0 {
        I8 => {
            // Rule at src\isa\aarch64\inst.isle line 1294.
            return 0x18_u8;
        }
        I16 => {
            // Rule at src\isa\aarch64\inst.isle line 1295.
            return 0x10_u8;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "diff_from_32", "src\\isa\\aarch64\\inst.isle line 1293")
}

// Generated as internal constructor for term scalar_size.
pub fn constructor_scalar_size<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> ScalarSize {
    match arg0 {
        I8 => {
            // Rule at src\isa\aarch64\inst.isle line 1307.
            return ScalarSize::Size8;
        }
        I16 => {
            // Rule at src\isa\aarch64\inst.isle line 1308.
            return ScalarSize::Size16;
        }
        I32 => {
            // Rule at src\isa\aarch64\inst.isle line 1309.
            return ScalarSize::Size32;
        }
        I64 => {
            // Rule at src\isa\aarch64\inst.isle line 1310.
            return ScalarSize::Size64;
        }
        I128 => {
            // Rule at src\isa\aarch64\inst.isle line 1311.
            return ScalarSize::Size128;
        }
        F32 => {
            // Rule at src\isa\aarch64\inst.isle line 1313.
            return ScalarSize::Size32;
        }
        F64 => {
            // Rule at src\isa\aarch64\inst.isle line 1314.
            return ScalarSize::Size64;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "scalar_size", "src\\isa\\aarch64\\inst.isle line 1305")
}

// Generated as internal constructor for term lane_size.
pub fn constructor_lane_size<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> ScalarSize {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8_u32 => {
                // Rule at src\isa\aarch64\inst.isle line 1318.
                return ScalarSize::Size8;
            }
            0x10_u32 => {
                // Rule at src\isa\aarch64\inst.isle line 1319.
                return ScalarSize::Size16;
            }
            0x20_u32 => {
                // Rule at src\isa\aarch64\inst.isle line 1320.
                return ScalarSize::Size32;
            }
            0x40_u32 => {
                // Rule at src\isa\aarch64\inst.isle line 1321.
                return ScalarSize::Size64;
            }
            _ => {}
        }
    }
    let v9 = C::dynamic_lane(ctx, arg0);
    if let Some(v10) = v9 {
        match v10.0 {
            0x8_u32 => {
                // Rule at src\isa\aarch64\inst.isle line 1322.
                return ScalarSize::Size8;
            }
            0x10_u32 => {
                // Rule at src\isa\aarch64\inst.isle line 1323.
                return ScalarSize::Size16;
            }
            0x20_u32 => {
                // Rule at src\isa\aarch64\inst.isle line 1324.
                return ScalarSize::Size32;
            }
            0x40_u32 => {
                // Rule at src\isa\aarch64\inst.isle line 1325.
                return ScalarSize::Size64;
            }
            _ => {}
        }
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "lane_size", "src\\isa\\aarch64\\inst.isle line 1317")
}

// Generated as internal constructor for term vector_lane_size.
pub fn constructor_vector_lane_size<C: Context>(
    ctx: &mut C,
    arg0: &VectorSize,
) -> ScalarSize {
    match arg0 {
        &VectorSize::Size8x8 => {
            // Rule at src\isa\aarch64\inst.isle line 1330.
            return ScalarSize::Size8;
        }
        &VectorSize::Size8x16 => {
            // Rule at src\isa\aarch64\inst.isle line 1329.
            return ScalarSize::Size8;
        }
        &VectorSize::Size16x4 => {
            // Rule at src\isa\aarch64\inst.isle line 1332.
            return ScalarSize::Size16;
        }
        &VectorSize::Size16x8 => {
            // Rule at src\isa\aarch64\inst.isle line 1331.
            return ScalarSize::Size16;
        }
        &VectorSize::Size32x2 => {
            // Rule at src\isa\aarch64\inst.isle line 1334.
            return ScalarSize::Size32;
        }
        &VectorSize::Size32x4 => {
            // Rule at src\isa\aarch64\inst.isle line 1333.
            return ScalarSize::Size32;
        }
        &VectorSize::Size64x2 => {
            // Rule at src\isa\aarch64\inst.isle line 1335.
            return ScalarSize::Size64;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vector_lane_size", "src\\isa\\aarch64\\inst.isle line 1328")
}

// Generated as internal constructor for term vector_size.
pub fn constructor_vector_size<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> VectorSize {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8_u32 => {
                match v2.1 {
                    0x8_u32 => {
                        // Rule at src\isa\aarch64\inst.isle line 1386.
                        return VectorSize::Size8x8;
                    }
                    0x10_u32 => {
                        // Rule at src\isa\aarch64\inst.isle line 1387.
                        return VectorSize::Size8x16;
                    }
                    _ => {}
                }
            }
            0x10_u32 => {
                match v2.1 {
                    0x4_u32 => {
                        // Rule at src\isa\aarch64\inst.isle line 1388.
                        return VectorSize::Size16x4;
                    }
                    0x8_u32 => {
                        // Rule at src\isa\aarch64\inst.isle line 1389.
                        return VectorSize::Size16x8;
                    }
                    _ => {}
                }
            }
            0x20_u32 => {
                match v2.1 {
                    0x2_u32 => {
                        // Rule at src\isa\aarch64\inst.isle line 1390.
                        return VectorSize::Size32x2;
                    }
                    0x4_u32 => {
                        // Rule at src\isa\aarch64\inst.isle line 1391.
                        return VectorSize::Size32x4;
                    }
                    _ => {}
                }
            }
            0x40_u32 => {
                if v2.1 == 0x2_u32 {
                    // Rule at src\isa\aarch64\inst.isle line 1392.
                    return VectorSize::Size64x2;
                }
            }
            _ => {}
        }
    }
    let v12 = C::dynamic_lane(ctx, arg0);
    if let Some(v13) = v12 {
        match v13.0 {
            0x8_u32 => {
                match v13.1 {
                    0x8_u32 => {
                        // Rule at src\isa\aarch64\inst.isle line 1393.
                        return VectorSize::Size8x8;
                    }
                    0x10_u32 => {
                        // Rule at src\isa\aarch64\inst.isle line 1394.
                        return VectorSize::Size8x16;
                    }
                    _ => {}
                }
            }
            0x10_u32 => {
                match v13.1 {
                    0x4_u32 => {
                        // Rule at src\isa\aarch64\inst.isle line 1395.
                        return VectorSize::Size16x4;
                    }
                    0x8_u32 => {
                        // Rule at src\isa\aarch64\inst.isle line 1396.
                        return VectorSize::Size16x8;
                    }
                    _ => {}
                }
            }
            0x20_u32 => {
                match v13.1 {
                    0x2_u32 => {
                        // Rule at src\isa\aarch64\inst.isle line 1397.
                        return VectorSize::Size32x2;
                    }
                    0x4_u32 => {
                        // Rule at src\isa\aarch64\inst.isle line 1398.
                        return VectorSize::Size32x4;
                    }
                    _ => {}
                }
            }
            0x40_u32 => {
                if v13.1 == 0x2_u32 {
                    // Rule at src\isa\aarch64\inst.isle line 1399.
                    return VectorSize::Size64x2;
                }
            }
            _ => {}
        }
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vector_size", "src\\isa\\aarch64\\inst.isle line 1385")
}

// Generated as internal constructor for term imm12_from_negated_value.
pub fn constructor_imm12_from_negated_value<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> Option<Imm12> {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = C::first_result(ctx, v2);
        if let Some(v4) = v3 {
            let v6 = &C::inst_data_value(ctx, v2);
            if let &InstructionData::UnaryImm {
                opcode: ref v7,
                imm: v8,
            } = v6 {
                if let &Opcode::Iconst = v7 {
                    let v5 = C::value_type(ctx, v4);
                    let v9 = C::i64_sextend_imm64(ctx, v5, v8);
                    let v10 = C::i64_neg(ctx, v9);
                    let v11 = C::i64_as_u64(ctx, v10);
                    let v12 = C::imm12_from_u64(ctx, v11);
                    if let Some(v13) = v12 {
                        let v14 = Some(v13);
                        // Rule at src\isa\aarch64\inst.isle line 1959.
                        return v14;
                    }
                }
            }
        }
    }
    None
}

// Generated as internal constructor for term value_regs_zero.
pub fn constructor_value_regs_zero<C: Context>(
    ctx: &mut C,
) -> ValueRegs {
    let v3 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x0_u64);
    let v4 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x0_u64);
    let v5 = C::value_regs(ctx, v3, v4);
    // Rule at src\isa\aarch64\inst.isle line 2023.
    return v5;
}

// Generated as internal constructor for term mov.
pub fn constructor_mov<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Type,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = &constructor_operand_size(ctx, arg1);
    let v5 = MInst::Mov {
        size: v4.clone(),
        rd: v3,
        rm: arg0,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 2031.
    return v7;
}

// Generated as internal constructor for term movz.
pub fn constructor_movz<C: Context>(
    ctx: &mut C,
    arg0: MoveWideConst,
    arg1: &OperandSize,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::MovWide {
        op: MoveWideOp::MovZ,
        rd: v3,
        imm: arg0,
        size: arg1.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 2038.
    return v7;
}

// Generated as internal constructor for term movn.
pub fn constructor_movn<C: Context>(
    ctx: &mut C,
    arg0: MoveWideConst,
    arg1: &OperandSize,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::MovWide {
        op: MoveWideOp::MovN,
        rd: v3,
        imm: arg0,
        size: arg1.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 2045.
    return v7;
}

// Generated as internal constructor for term alu_rr_imm_logic.
pub fn constructor_alu_rr_imm_logic<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: ImmLogic,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg1);
    let v7 = MInst::AluRRImmLogic {
        alu_op: arg0.clone(),
        size: v6.clone(),
        rd: v5,
        rn: arg2,
        imml: arg3,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src\isa\aarch64\inst.isle line 2052.
    return v9;
}

// Generated as internal constructor for term alu_rr_imm_shift.
pub fn constructor_alu_rr_imm_shift<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: ImmShift,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg1);
    let v7 = MInst::AluRRImmShift {
        alu_op: arg0.clone(),
        size: v6.clone(),
        rd: v5,
        rn: arg2,
        immshift: arg3,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src\isa\aarch64\inst.isle line 2077.
    return v9;
}

// Generated as internal constructor for term alu_rrr.
pub fn constructor_alu_rrr<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg1);
    let v7 = MInst::AluRRR {
        alu_op: arg0.clone(),
        size: v6.clone(),
        rd: v5,
        rn: arg2,
        rm: arg3,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src\isa\aarch64\inst.isle line 2102.
    return v9;
}

// Generated as internal constructor for term vec_rrr.
pub fn constructor_vec_rrr<C: Context>(
    ctx: &mut C,
    arg0: &VecALUOp,
    arg1: Reg,
    arg2: Reg,
    arg3: &VectorSize,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I8X16);
    let v6 = MInst::VecRRR {
        alu_op: arg0.clone(),
        rd: v5,
        rn: arg1,
        rm: arg2,
        size: arg3.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src\isa\aarch64\inst.isle line 2109.
    return v8;
}

// Generated as internal constructor for term fpu_rr.
pub fn constructor_fpu_rr<C: Context>(
    ctx: &mut C,
    arg0: &FPUOp1,
    arg1: Reg,
    arg2: &ScalarSize,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, F64);
    let v5 = MInst::FpuRR {
        fpu_op: arg0.clone(),
        size: arg2.clone(),
        rd: v4,
        rn: arg1,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\aarch64\inst.isle line 2116.
    return v7;
}

// Generated as internal constructor for term vec_rrr_mod.
pub fn constructor_vec_rrr_mod<C: Context>(
    ctx: &mut C,
    arg0: &VecALUModOp,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
    arg4: &VectorSize,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I8X16);
    let v7 = MInst::VecRRRMod {
        alu_op: arg0.clone(),
        rd: v6,
        ri: arg1,
        rn: arg2,
        rm: arg3,
        size: arg4.clone(),
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src\isa\aarch64\inst.isle line 2124.
    return v9;
}

// Generated as internal constructor for term vec_fmla_elem.
pub fn constructor_vec_fmla_elem<C: Context>(
    ctx: &mut C,
    arg0: &VecALUModOp,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
    arg4: &VectorSize,
    arg5: u8,
) -> Reg {
    let v7 = C::temp_writable_reg(ctx, I8X16);
    let v8 = MInst::VecFmlaElem {
        alu_op: arg0.clone(),
        rd: v7,
        ri: arg1,
        rn: arg2,
        rm: arg3,
        size: arg4.clone(),
        idx: arg5,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_reg_to_reg(ctx, v7);
    // Rule at src\isa\aarch64\inst.isle line 2132.
    return v10;
}

// Generated as internal constructor for term fpu_rri.
pub fn constructor_fpu_rri<C: Context>(
    ctx: &mut C,
    arg0: &FPUOpRI,
    arg1: Reg,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, F64);
    let v4 = MInst::FpuRRI {
        fpu_op: arg0.clone(),
        rd: v3,
        rn: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 2138.
    return v6;
}

// Generated as internal constructor for term fpu_rri_mod.
pub fn constructor_fpu_rri_mod<C: Context>(
    ctx: &mut C,
    arg0: &FPUOpRIMod,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, F64);
    let v5 = MInst::FpuRRIMod {
        fpu_op: arg0.clone(),
        rd: v4,
        ri: arg1,
        rn: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\aarch64\inst.isle line 2144.
    return v7;
}

// Generated as internal constructor for term fpu_rrr.
pub fn constructor_fpu_rrr<C: Context>(
    ctx: &mut C,
    arg0: &FPUOp2,
    arg1: Reg,
    arg2: Reg,
    arg3: &ScalarSize,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, F64);
    let v6 = MInst::FpuRRR {
        fpu_op: arg0.clone(),
        size: arg3.clone(),
        rd: v5,
        rn: arg1,
        rm: arg2,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src\isa\aarch64\inst.isle line 2151.
    return v8;
}

// Generated as internal constructor for term fpu_rrrr.
pub fn constructor_fpu_rrrr<C: Context>(
    ctx: &mut C,
    arg0: &FPUOp3,
    arg1: &ScalarSize,
    arg2: Reg,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, F64);
    let v7 = MInst::FpuRRRR {
        fpu_op: arg0.clone(),
        size: arg1.clone(),
        rd: v6,
        rn: arg2,
        rm: arg3,
        ra: arg4,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src\isa\aarch64\inst.isle line 2158.
    return v9;
}

// Generated as internal constructor for term fpu_cmp.
pub fn constructor_fpu_cmp<C: Context>(
    ctx: &mut C,
    arg0: &ScalarSize,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v3 = MInst::FpuCmp {
        size: arg0.clone(),
        rn: arg1,
        rm: arg2,
    };
    let v4 = ProducesFlags::ProducesFlagsSideEffect {
        inst: v3,
    };
    // Rule at src\isa\aarch64\inst.isle line 2165.
    return v4;
}

// Generated as internal constructor for term vec_lanes.
pub fn constructor_vec_lanes<C: Context>(
    ctx: &mut C,
    arg0: &VecLanesOp,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecLanes {
        op: arg0.clone(),
        rd: v4,
        rn: arg1,
        size: arg2.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\aarch64\inst.isle line 2171.
    return v7;
}

// Generated as internal constructor for term vec_shift_imm.
pub fn constructor_vec_shift_imm<C: Context>(
    ctx: &mut C,
    arg0: &VecShiftImmOp,
    arg1: u8,
    arg2: Reg,
    arg3: &VectorSize,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I8X16);
    let v6 = MInst::VecShiftImm {
        op: arg0.clone(),
        rd: v5,
        rn: arg2,
        size: arg3.clone(),
        imm: arg1,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src\isa\aarch64\inst.isle line 2178.
    return v8;
}

// Generated as internal constructor for term vec_dup.
pub fn constructor_vec_dup<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &VectorSize,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::VecDup {
        rd: v3,
        rn: arg0,
        size: arg1.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 2185.
    return v6;
}

// Generated as internal constructor for term vec_dup_from_fpu.
pub fn constructor_vec_dup_from_fpu<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &VectorSize,
    arg2: u8,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecDupFromFpu {
        rd: v4,
        rn: arg0,
        size: arg1.clone(),
        lane: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\aarch64\inst.isle line 2192.
    return v7;
}

// Generated as internal constructor for term vec_dup_imm.
pub fn constructor_vec_dup_imm<C: Context>(
    ctx: &mut C,
    arg0: ASIMDMovModImm,
    arg1: bool,
    arg2: &VectorSize,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecDupImm {
        rd: v4,
        imm: arg0,
        invert: arg1,
        size: arg2.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\aarch64\inst.isle line 2199.
    return v7;
}

// Generated as internal constructor for term alu_rr_imm12.
pub fn constructor_alu_rr_imm12<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: Imm12,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg1);
    let v7 = MInst::AluRRImm12 {
        alu_op: arg0.clone(),
        size: v6.clone(),
        rd: v5,
        rn: arg2,
        imm12: arg3,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src\isa\aarch64\inst.isle line 2206.
    return v9;
}

// Generated as internal constructor for term alu_rrr_shift.
pub fn constructor_alu_rrr_shift<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: Reg,
    arg4: ShiftOpAndAmt,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I64);
    let v7 = &constructor_operand_size(ctx, arg1);
    let v8 = MInst::AluRRRShift {
        alu_op: arg0.clone(),
        size: v7.clone(),
        rd: v6,
        rn: arg2,
        rm: arg3,
        shiftop: arg4,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src\isa\aarch64\inst.isle line 2213.
    return v10;
}

// Generated as internal constructor for term cmp_rr_shift.
pub fn constructor_cmp_rr_shift<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: Reg,
    arg3: u64,
) -> ProducesFlags {
    let v5 = C::lshr_from_u64(ctx, I64, arg3);
    if let Some(v6) = v5 {
        let v8 = C::writable_zero_reg(ctx);
        let v9 = MInst::AluRRRShift {
            alu_op: ALUOp::SubS,
            size: arg0.clone(),
            rd: v8,
            rn: arg1,
            rm: arg2,
            shiftop: v6,
        };
        let v10 = ProducesFlags::ProducesFlagsSideEffect {
            inst: v9,
        };
        // Rule at src\isa\aarch64\inst.isle line 2221.
        return v10;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "cmp_rr_shift", "src\\isa\\aarch64\\inst.isle line 2220")
}

// Generated as internal constructor for term cmp_rr_shift_asr.
pub fn constructor_cmp_rr_shift_asr<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: Reg,
    arg3: u64,
) -> ProducesFlags {
    let v5 = C::ashr_from_u64(ctx, I64, arg3);
    if let Some(v6) = v5 {
        let v8 = C::writable_zero_reg(ctx);
        let v9 = MInst::AluRRRShift {
            alu_op: ALUOp::SubS,
            size: arg0.clone(),
            rd: v8,
            rn: arg1,
            rm: arg2,
            shiftop: v6,
        };
        let v10 = ProducesFlags::ProducesFlagsSideEffect {
            inst: v9,
        };
        // Rule at src\isa\aarch64\inst.isle line 2230.
        return v10;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "cmp_rr_shift_asr", "src\\isa\\aarch64\\inst.isle line 2229")
}

// Generated as internal constructor for term alu_rrr_extend.
pub fn constructor_alu_rrr_extend<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: Reg,
    arg4: &ExtendOp,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I64);
    let v7 = &constructor_operand_size(ctx, arg1);
    let v8 = MInst::AluRRRExtend {
        alu_op: arg0.clone(),
        size: v7.clone(),
        rd: v6,
        rn: arg2,
        rm: arg3,
        extendop: arg4.clone(),
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src\isa\aarch64\inst.isle line 2238.
    return v10;
}

// Generated as internal constructor for term alu_rr_extend_reg.
pub fn constructor_alu_rr_extend_reg<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: &ExtendedValue,
) -> Reg {
    let v4 = C::put_extended_in_reg(ctx, arg3);
    let v5 = &C::get_extended_op(ctx, arg3);
    let v6 = constructor_alu_rrr_extend(ctx, arg0, arg1, arg2, v4, v5);
    // Rule at src\isa\aarch64\inst.isle line 2246.
    return v6;
}

// Generated as internal constructor for term alu_rrrr.
pub fn constructor_alu_rrrr<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp3,
    arg1: Type,
    arg2: Reg,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I64);
    let v7 = &constructor_operand_size(ctx, arg1);
    let v8 = MInst::AluRRRR {
        alu_op: arg0.clone(),
        size: v7.clone(),
        rd: v6,
        rn: arg2,
        rm: arg3,
        ra: arg4,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src\isa\aarch64\inst.isle line 2253.
    return v10;
}

// Generated as internal constructor for term alu_rrr_with_flags_paired.
pub fn constructor_alu_rrr_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: &ALUOp,
) -> ProducesFlags {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg0);
    let v7 = MInst::AluRRR {
        alu_op: arg3.clone(),
        size: v6.clone(),
        rd: v5,
        rn: arg1,
        rm: arg2,
    };
    let v8 = C::writable_reg_to_reg(ctx, v5);
    let v9 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v7,
        result: v8,
    };
    // Rule at src\isa\aarch64\inst.isle line 2260.
    return v9;
}

// Generated as internal constructor for term alu_rrr_with_flags_chained.
pub fn constructor_alu_rrr_with_flags_chained<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: &ALUOp,
) -> ConsumesAndProducesFlags {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg0);
    let v7 = MInst::AluRRR {
        alu_op: arg3.clone(),
        size: v6.clone(),
        rd: v5,
        rn: arg1,
        rm: arg2,
    };
    let v8 = C::writable_reg_to_reg(ctx, v5);
    let v9 = ConsumesAndProducesFlags::ReturnsReg {
        inst: v7,
        result: v8,
    };
    // Rule at src\isa\aarch64\inst.isle line 2268.
    return v9;
}

// Generated as internal constructor for term bit_rr.
pub fn constructor_bit_rr<C: Context>(
    ctx: &mut C,
    arg0: &BitOp,
    arg1: Type,
    arg2: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = &constructor_operand_size(ctx, arg1);
    let v6 = MInst::BitRR {
        op: arg0.clone(),
        size: v5.clone(),
        rd: v4,
        rn: arg2,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\aarch64\inst.isle line 2276.
    return v8;
}

// Generated as internal constructor for term add_with_flags_paired.
pub fn constructor_add_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg0);
    let v7 = MInst::AluRRR {
        alu_op: ALUOp::AddS,
        size: v6.clone(),
        rd: v4,
        rn: arg1,
        rm: arg2,
    };
    let v8 = C::writable_reg_to_reg(ctx, v4);
    let v9 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v7,
        result: v8,
    };
    // Rule at src\isa\aarch64\inst.isle line 2283.
    return v9;
}

// Generated as internal constructor for term adc_paired.
pub fn constructor_adc_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ConsumesFlags {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg0);
    let v7 = MInst::AluRRR {
        alu_op: ALUOp::Adc,
        size: v6.clone(),
        rd: v4,
        rn: arg1,
        rm: arg2,
    };
    let v8 = C::writable_reg_to_reg(ctx, v4);
    let v9 = ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
        inst: v7,
        result: v8,
    };
    // Rule at src\isa\aarch64\inst.isle line 2291.
    return v9;
}

// Generated as internal constructor for term sub_with_flags_paired.
pub fn constructor_sub_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg0);
    let v7 = MInst::AluRRR {
        alu_op: ALUOp::SubS,
        size: v6.clone(),
        rd: v4,
        rn: arg1,
        rm: arg2,
    };
    let v8 = C::writable_reg_to_reg(ctx, v4);
    let v9 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v7,
        result: v8,
    };
    // Rule at src\isa\aarch64\inst.isle line 2299.
    return v9;
}

// Generated as internal constructor for term materialize_bool_result.
pub fn constructor_materialize_bool_result<C: Context>(
    ctx: &mut C,
    arg0: &Cond,
) -> ConsumesFlags {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::CSet {
        rd: v2,
        cond: arg0.clone(),
    };
    let v4 = C::writable_reg_to_reg(ctx, v2);
    let v5 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v3,
        result: v4,
    };
    // Rule at src\isa\aarch64\inst.isle line 2308.
    return v5;
}

// Generated as internal constructor for term cmn_imm.
pub fn constructor_cmn_imm<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: Imm12,
) -> ProducesFlags {
    let v4 = C::writable_zero_reg(ctx);
    let v5 = MInst::AluRRImm12 {
        alu_op: ALUOp::AddS,
        size: arg0.clone(),
        rd: v4,
        rn: arg1,
        imm12: arg2,
    };
    let v6 = ProducesFlags::ProducesFlagsSideEffect {
        inst: v5,
    };
    // Rule at src\isa\aarch64\inst.isle line 2315.
    return v6;
}

// Generated as internal constructor for term cmp.
pub fn constructor_cmp<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v4 = C::writable_zero_reg(ctx);
    let v5 = MInst::AluRRR {
        alu_op: ALUOp::SubS,
        size: arg0.clone(),
        rd: v4,
        rn: arg1,
        rm: arg2,
    };
    let v6 = ProducesFlags::ProducesFlagsSideEffect {
        inst: v5,
    };
    // Rule at src\isa\aarch64\inst.isle line 2325.
    return v6;
}

// Generated as internal constructor for term cmp_imm.
pub fn constructor_cmp_imm<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: Imm12,
) -> ProducesFlags {
    let v4 = C::writable_zero_reg(ctx);
    let v5 = MInst::AluRRImm12 {
        alu_op: ALUOp::SubS,
        size: arg0.clone(),
        rd: v4,
        rn: arg1,
        imm12: arg2,
    };
    let v6 = ProducesFlags::ProducesFlagsSideEffect {
        inst: v5,
    };
    // Rule at src\isa\aarch64\inst.isle line 2334.
    return v6;
}

// Generated as internal constructor for term cmp64_imm.
pub fn constructor_cmp64_imm<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Imm12,
) -> ProducesFlags {
    let v3 = &constructor_cmp_imm(ctx, &OperandSize::Size64, arg0, arg1);
    // Rule at src\isa\aarch64\inst.isle line 2340.
    return v3.clone();
}

// Generated as internal constructor for term cmp_extend.
pub fn constructor_cmp_extend<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: Reg,
    arg3: &ExtendOp,
) -> ProducesFlags {
    let v5 = C::writable_zero_reg(ctx);
    let v6 = MInst::AluRRRExtend {
        alu_op: ALUOp::SubS,
        size: arg0.clone(),
        rd: v5,
        rn: arg1,
        rm: arg2,
        extendop: arg3.clone(),
    };
    let v7 = ProducesFlags::ProducesFlagsSideEffect {
        inst: v6,
    };
    // Rule at src\isa\aarch64\inst.isle line 2358.
    return v7;
}

// Generated as internal constructor for term sbc_paired.
pub fn constructor_sbc_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ConsumesFlags {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg0);
    let v7 = MInst::AluRRR {
        alu_op: ALUOp::Sbc,
        size: v6.clone(),
        rd: v4,
        rn: arg1,
        rm: arg2,
    };
    let v8 = C::writable_reg_to_reg(ctx, v4);
    let v9 = ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
        inst: v7,
        result: v8,
    };
    // Rule at src\isa\aarch64\inst.isle line 2365.
    return v9;
}

// Generated as internal constructor for term vec_misc.
pub fn constructor_vec_misc<C: Context>(
    ctx: &mut C,
    arg0: &VecMisc2,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecMisc {
        op: arg0.clone(),
        rd: v4,
        rn: arg1,
        size: arg2.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\aarch64\inst.isle line 2373.
    return v7;
}

// Generated as internal constructor for term vec_tbl.
pub fn constructor_vec_tbl<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::VecTbl {
        rd: v3,
        rn: arg0,
        rm: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 2380.
    return v6;
}

// Generated as internal constructor for term vec_tbl_ext.
pub fn constructor_vec_tbl_ext<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecTblExt {
        rd: v4,
        ri: arg0,
        rn: arg1,
        rm: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\aarch64\inst.isle line 2386.
    return v7;
}

// Generated as internal constructor for term vec_tbl2.
pub fn constructor_vec_tbl2<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: Reg,
    arg3: Type,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I8X16);
    let v6 = MInst::VecTbl2 {
        rd: v5,
        rn: arg0,
        rn2: arg1,
        rm: arg2,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src\isa\aarch64\inst.isle line 2393.
    return v8;
}

// Generated as internal constructor for term vec_tbl2_ext.
pub fn constructor_vec_tbl2_ext<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
    arg4: Type,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I8X16);
    let v7 = MInst::VecTbl2Ext {
        rd: v6,
        ri: arg0,
        rn: arg1,
        rn2: arg2,
        rm: arg3,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src\isa\aarch64\inst.isle line 2402.
    return v9;
}

// Generated as internal constructor for term vec_rrr_long.
pub fn constructor_vec_rrr_long<C: Context>(
    ctx: &mut C,
    arg0: &VecRRRLongOp,
    arg1: Reg,
    arg2: Reg,
    arg3: bool,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I8X16);
    let v6 = MInst::VecRRRLong {
        alu_op: arg0.clone(),
        rd: v5,
        rn: arg1,
        rm: arg2,
        high_half: arg3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src\isa\aarch64\inst.isle line 2411.
    return v8;
}

// Generated as internal constructor for term vec_rr_pair_long.
pub fn constructor_vec_rr_pair_long<C: Context>(
    ctx: &mut C,
    arg0: &VecRRPairLongOp,
    arg1: Reg,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::VecRRPairLong {
        op: arg0.clone(),
        rd: v3,
        rn: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 2418.
    return v6;
}

// Generated as internal constructor for term vec_rrrr_long.
pub fn constructor_vec_rrrr_long<C: Context>(
    ctx: &mut C,
    arg0: &VecRRRLongModOp,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
    arg4: bool,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I8X16);
    let v7 = MInst::VecRRRLongMod {
        alu_op: arg0.clone(),
        rd: v6,
        ri: arg1,
        rn: arg2,
        rm: arg3,
        high_half: arg4,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src\isa\aarch64\inst.isle line 2425.
    return v9;
}

// Generated as internal constructor for term vec_rr_narrow_low.
pub fn constructor_vec_rr_narrow_low<C: Context>(
    ctx: &mut C,
    arg0: &VecRRNarrowOp,
    arg1: Reg,
    arg2: &ScalarSize,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecRRNarrowLow {
        op: arg0.clone(),
        rd: v4,
        rn: arg1,
        lane_size: arg2.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\aarch64\inst.isle line 2432.
    return v7;
}

// Generated as internal constructor for term vec_rr_narrow_high.
pub fn constructor_vec_rr_narrow_high<C: Context>(
    ctx: &mut C,
    arg0: &VecRRNarrowOp,
    arg1: Reg,
    arg2: Reg,
    arg3: &ScalarSize,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I8X16);
    let v6 = MInst::VecRRNarrowHigh {
        op: arg0.clone(),
        rd: v5,
        ri: arg1,
        rn: arg2,
        lane_size: arg3.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src\isa\aarch64\inst.isle line 2440.
    return v8;
}

// Generated as internal constructor for term vec_rr_long.
pub fn constructor_vec_rr_long<C: Context>(
    ctx: &mut C,
    arg0: &VecRRLongOp,
    arg1: Reg,
    arg2: bool,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecRRLong {
        op: arg0.clone(),
        rd: v4,
        rn: arg1,
        high_half: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\aarch64\inst.isle line 2447.
    return v7;
}

// Generated as internal constructor for term fpu_csel.
pub fn constructor_fpu_csel<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Cond,
    arg2: Reg,
    arg3: Reg,
) -> ConsumesFlags {
    match arg0 {
        F16 => {
            let v6 = C::use_fp16(ctx);
            if v6 == true {
                let v8 = C::temp_writable_reg(ctx, F16);
                let v9 = MInst::FpuCSel16 {
                    rd: v8,
                    rn: arg2,
                    rm: arg3,
                    cond: arg1.clone(),
                };
                let v10 = C::writable_reg_to_reg(ctx, v8);
                let v11 = ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: v9,
                    result: v10,
                };
                // Rule at src\isa\aarch64\inst.isle line 2458.
                return v11;
            }
            let v5 = &constructor_fpu_csel(ctx, F32, arg1, arg2, arg3);
            // Rule at src\isa\aarch64\inst.isle line 2455.
            return v5.clone();
        }
        F32 => {
            let v12 = C::temp_writable_reg(ctx, F32);
            let v13 = MInst::FpuCSel32 {
                rd: v12,
                rn: arg2,
                rm: arg3,
                cond: arg1.clone(),
            };
            let v14 = C::writable_reg_to_reg(ctx, v12);
            let v15 = ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: v13,
                result: v14,
            };
            // Rule at src\isa\aarch64\inst.isle line 2465.
            return v15;
        }
        F64 => {
            let v17 = C::temp_writable_reg(ctx, F64);
            let v18 = MInst::FpuCSel64 {
                rd: v17,
                rn: arg2,
                rm: arg3,
                cond: arg1.clone(),
            };
            let v19 = C::writable_reg_to_reg(ctx, v17);
            let v20 = ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: v18,
                result: v19,
            };
            // Rule at src\isa\aarch64\inst.isle line 2471.
            return v20;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "fpu_csel", "src\\isa\\aarch64\\inst.isle line 2454")
}

// Generated as internal constructor for term vec_csel.
pub fn constructor_vec_csel<C: Context>(
    ctx: &mut C,
    arg0: &Cond,
    arg1: Reg,
    arg2: Reg,
) -> ConsumesFlags {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecCSel {
        rd: v4,
        rn: arg1,
        rm: arg2,
        cond: arg0.clone(),
    };
    let v6 = C::writable_reg_to_reg(ctx, v4);
    let v7 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v5,
        result: v6,
    };
    // Rule at src\isa\aarch64\inst.isle line 2479.
    return v7;
}

// Generated as internal constructor for term fpu_round.
pub fn constructor_fpu_round<C: Context>(
    ctx: &mut C,
    arg0: &FpuRoundMode,
    arg1: Reg,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, F64);
    let v4 = MInst::FpuRound {
        op: arg0.clone(),
        rd: v3,
        rn: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 2487.
    return v6;
}

// Generated as internal constructor for term fpu_move.
pub fn constructor_fpu_move<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v7 = C::fits_in_64(ctx, arg0);
    if let Some(v8) = v7 {
        let v10 = C::temp_writable_reg(ctx, F64);
        let v11 = MInst::FpuMove64 {
            rd: v10,
            rn: arg1,
        };
        let v12 = C::emit(ctx, &v11);
        let v13 = C::writable_reg_to_reg(ctx, v10);
        // Rule at src\isa\aarch64\inst.isle line 2498.
        return v13;
    }
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::FpuMove128 {
        rd: v3,
        rn: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 2494.
    return v6;
}

// Generated as internal constructor for term mov_to_fpu.
pub fn constructor_mov_to_fpu<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &ScalarSize,
) -> Reg {
    if let &ScalarSize::Size16 = arg1 {
        let v7 = C::use_fp16(ctx);
        if v7 == false {
            let v9 = constructor_mov_to_fpu(ctx, arg0, &ScalarSize::Size32);
            // Rule at src\isa\aarch64\inst.isle line 2511.
            return v9;
        }
    }
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::MovToFpu {
        rd: v3,
        rn: arg0,
        size: arg1.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 2507.
    return v6;
}

// Generated as internal constructor for term fpu_move_fp_imm.
pub fn constructor_fpu_move_fp_imm<C: Context>(
    ctx: &mut C,
    arg0: ASIMDFPModImm,
    arg1: &ScalarSize,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::FpuMoveFPImm {
        rd: v3,
        imm: arg0,
        size: arg1.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 2517.
    return v6;
}

// Generated as internal constructor for term mov_to_vec.
pub fn constructor_mov_to_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: u8,
    arg3: &VectorSize,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I8X16);
    let v6 = MInst::MovToVec {
        rd: v5,
        ri: arg0,
        rn: arg1,
        idx: arg2,
        size: arg3.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src\isa\aarch64\inst.isle line 2524.
    return v8;
}

// Generated as internal constructor for term mov_vec_elem.
pub fn constructor_mov_vec_elem<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: u8,
    arg3: u8,
    arg4: &VectorSize,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I8X16);
    let v7 = MInst::VecMovElement {
        rd: v6,
        ri: arg0,
        rn: arg1,
        dest_idx: arg2,
        src_idx: arg3,
        size: arg4.clone(),
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src\isa\aarch64\inst.isle line 2531.
    return v9;
}

// Generated as internal constructor for term mov_from_vec.
pub fn constructor_mov_from_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: u8,
    arg2: &ScalarSize,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::MovFromVec {
        rd: v4,
        rn: arg0,
        idx: arg1,
        size: arg2.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\aarch64\inst.isle line 2562.
    return v7;
}

// Generated as internal constructor for term mov_from_vec_signed.
pub fn constructor_mov_from_vec_signed<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: u8,
    arg2: &VectorSize,
    arg3: &OperandSize,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = MInst::MovFromVecSigned {
        rd: v5,
        rn: arg0,
        idx: arg1,
        size: arg2.clone(),
        scalar_size: arg3.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src\isa\aarch64\inst.isle line 2569.
    return v8;
}

// Generated as internal constructor for term fpu_move_from_vec.
pub fn constructor_fpu_move_from_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: u8,
    arg2: &VectorSize,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::FpuMoveFromVec {
        rd: v4,
        rn: arg0,
        idx: arg1,
        size: arg2.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\aarch64\inst.isle line 2575.
    return v7;
}

// Generated as internal constructor for term extend.
pub fn constructor_extend<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: bool,
    arg2: u8,
    arg3: u8,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = MInst::Extend {
        rd: v5,
        rn: arg0,
        signed: arg1,
        from_bits: arg2,
        to_bits: arg3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src\isa\aarch64\inst.isle line 2587.
    return v8;
}

// Generated as internal constructor for term fpu_extend.
pub fn constructor_fpu_extend<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &ScalarSize,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, F32X4);
    let v4 = MInst::FpuExtend {
        rd: v3,
        rn: arg0,
        size: arg1.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 2594.
    return v6;
}

// Generated as internal constructor for term vec_extend.
pub fn constructor_vec_extend<C: Context>(
    ctx: &mut C,
    arg0: &VecExtendOp,
    arg1: Reg,
    arg2: bool,
    arg3: &ScalarSize,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I8X16);
    let v6 = MInst::VecExtend {
        t: arg0.clone(),
        rd: v5,
        rn: arg1,
        high_half: arg2,
        lane_size: arg3.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src\isa\aarch64\inst.isle line 2601.
    return v8;
}

// Generated as internal constructor for term vec_extract.
pub fn constructor_vec_extract<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: u8,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecExtract {
        rd: v4,
        rn: arg0,
        rm: arg1,
        imm4: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\aarch64\inst.isle line 2608.
    return v7;
}

// Generated as internal constructor for term load_acquire.
pub fn constructor_load_acquire<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::LoadAcquire {
        access_ty: arg0,
        rt: v4,
        rn: arg2,
        flags: arg1,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\aarch64\inst.isle line 2615.
    return v7;
}

// Generated as internal constructor for term store_release.
pub fn constructor_store_release<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Reg,
    arg3: Reg,
) -> SideEffectNoResult {
    let v4 = MInst::StoreRelease {
        access_ty: arg0,
        rt: arg2,
        rn: arg3,
        flags: arg1,
    };
    let v5 = SideEffectNoResult::Inst {
        inst: v4,
    };
    // Rule at src\isa\aarch64\inst.isle line 2622.
    return v5;
}

// Generated as internal constructor for term tst_imm.
pub fn constructor_tst_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: ImmLogic,
) -> ProducesFlags {
    let v4 = &constructor_operand_size(ctx, arg0);
    let v5 = C::writable_zero_reg(ctx);
    let v6 = MInst::AluRRImmLogic {
        alu_op: ALUOp::AndS,
        size: v4.clone(),
        rd: v5,
        rn: arg1,
        imml: arg2,
    };
    let v7 = ProducesFlags::ProducesFlagsSideEffect {
        inst: v6,
    };
    // Rule at src\isa\aarch64\inst.isle line 2630.
    return v7;
}

// Generated as internal constructor for term csel.
pub fn constructor_csel<C: Context>(
    ctx: &mut C,
    arg0: &Cond,
    arg1: Reg,
    arg2: Reg,
) -> ConsumesFlags {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::CSel {
        rd: v4,
        cond: arg0.clone(),
        rn: arg1,
        rm: arg2,
    };
    let v6 = C::writable_reg_to_reg(ctx, v4);
    let v7 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v5,
        result: v6,
    };
    // Rule at src\isa\aarch64\inst.isle line 2644.
    return v7;
}

// Generated as internal constructor for term cset.
pub fn constructor_cset<C: Context>(
    ctx: &mut C,
    arg0: &Cond,
) -> ConsumesFlags {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::CSet {
        rd: v2,
        cond: arg0.clone(),
    };
    let v4 = C::writable_reg_to_reg(ctx, v2);
    let v5 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v3,
        result: v4,
    };
    // Rule at src\isa\aarch64\inst.isle line 2652.
    return v5;
}

// Generated as internal constructor for term cset_paired.
pub fn constructor_cset_paired<C: Context>(
    ctx: &mut C,
    arg0: &Cond,
) -> ConsumesFlags {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::CSet {
        rd: v2,
        cond: arg0.clone(),
    };
    let v4 = C::writable_reg_to_reg(ctx, v2);
    let v5 = ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
        inst: v3,
        result: v4,
    };
    // Rule at src\isa\aarch64\inst.isle line 2659.
    return v5;
}

// Generated as internal constructor for term csetm.
pub fn constructor_csetm<C: Context>(
    ctx: &mut C,
    arg0: &Cond,
) -> ConsumesFlags {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::CSetm {
        rd: v2,
        cond: arg0.clone(),
    };
    let v4 = C::writable_reg_to_reg(ctx, v2);
    let v5 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v3,
        result: v4,
    };
    // Rule at src\isa\aarch64\inst.isle line 2665.
    return v5;
}

// Generated as internal constructor for term csneg.
pub fn constructor_csneg<C: Context>(
    ctx: &mut C,
    arg0: &Cond,
    arg1: Reg,
    arg2: Reg,
) -> ConsumesFlags {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::CSNeg {
        rd: v4,
        cond: arg0.clone(),
        rn: arg1,
        rm: arg2,
    };
    let v6 = C::writable_reg_to_reg(ctx, v4);
    let v7 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v5,
        result: v6,
    };
    // Rule at src\isa\aarch64\inst.isle line 2675.
    return v7;
}

// Generated as internal constructor for term ccmp.
pub fn constructor_ccmp<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: Reg,
    arg3: NZCV,
    arg4: &Cond,
    arg5: &ProducesFlags,
) -> ProducesFlags {
    let v6 = MInst::CCmp {
        size: arg0.clone(),
        rn: arg1,
        rm: arg2,
        nzcv: arg3,
        cond: arg4.clone(),
    };
    let v7 = ProducesFlags::ProducesFlagsSideEffect {
        inst: v6,
    };
    let v8 = &constructor_produces_flags_concat(ctx, arg5, &v7);
    // Rule at src\isa\aarch64\inst.isle line 2685.
    return v8.clone();
}

// Generated as internal constructor for term ccmp_imm.
pub fn constructor_ccmp_imm<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: UImm5,
    arg3: NZCV,
    arg4: &Cond,
) -> ConsumesFlags {
    let v6 = C::temp_writable_reg(ctx, I64);
    let v9 = C::writable_reg_to_reg(ctx, v6);
    let v10 = C::value_reg(ctx, v9);
    let v7 = MInst::CCmpImm {
        size: arg0.clone(),
        rn: arg1,
        imm: arg2,
        nzcv: arg3,
        cond: arg4.clone(),
    };
    let v8 = MInst::CSet {
        rd: v6,
        cond: arg4.clone(),
    };
    let v11 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
        inst1: v7,
        inst2: v8,
        result: v10,
    };
    // Rule at src\isa\aarch64\inst.isle line 2690.
    return v11;
}

// Generated as internal constructor for term add.
pub fn constructor_add<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::Add, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2705.
    return v4;
}

// Generated as internal constructor for term add_imm.
pub fn constructor_add_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Imm12,
) -> Reg {
    let v4 = constructor_alu_rr_imm12(ctx, &ALUOp::Add, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2718.
    return v4;
}

// Generated as internal constructor for term add_extend.
pub fn constructor_add_extend<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &ExtendedValue,
) -> Reg {
    let v4 = constructor_alu_rr_extend_reg(ctx, &ALUOp::Add, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2745.
    return v4;
}

// Generated as internal constructor for term add_extend_op.
pub fn constructor_add_extend_op<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: &ExtendOp,
) -> Reg {
    let v5 = constructor_alu_rrr_extend(ctx, &ALUOp::Add, arg0, arg1, arg2, arg3);
    // Rule at src\isa\aarch64\inst.isle line 2748.
    return v5;
}

// Generated as internal constructor for term add_shift.
pub fn constructor_add_shift<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: ShiftOpAndAmt,
) -> Reg {
    let v5 = constructor_alu_rrr_shift(ctx, &ALUOp::Add, arg0, arg1, arg2, arg3);
    // Rule at src\isa\aarch64\inst.isle line 2764.
    return v5;
}

// Generated as internal constructor for term add_vec.
pub fn constructor_add_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Add, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2767.
    return v4;
}

// Generated as internal constructor for term sub.
pub fn constructor_sub<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::Sub, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2777.
    return v4;
}

// Generated as internal constructor for term sub_imm.
pub fn constructor_sub_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Imm12,
) -> Reg {
    let v4 = constructor_alu_rr_imm12(ctx, &ALUOp::Sub, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2790.
    return v4;
}

// Generated as internal constructor for term sub_extend.
pub fn constructor_sub_extend<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &ExtendedValue,
) -> Reg {
    let v4 = constructor_alu_rr_extend_reg(ctx, &ALUOp::Sub, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2817.
    return v4;
}

// Generated as internal constructor for term sub_shift.
pub fn constructor_sub_shift<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: ShiftOpAndAmt,
) -> Reg {
    let v5 = constructor_alu_rrr_shift(ctx, &ALUOp::Sub, arg0, arg1, arg2, arg3);
    // Rule at src\isa\aarch64\inst.isle line 2831.
    return v5;
}

// Generated as internal constructor for term sub_vec.
pub fn constructor_sub_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Sub, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2834.
    return v4;
}

// Generated as internal constructor for term sub_i128.
pub fn constructor_sub_i128<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: ValueRegs,
) -> ValueRegs {
    let v3 = C::value_regs_get(ctx, arg0, 0x0_usize);
    let v5 = C::value_regs_get(ctx, arg0, 0x1_usize);
    let v6 = C::value_regs_get(ctx, arg1, 0x0_usize);
    let v7 = C::value_regs_get(ctx, arg1, 0x1_usize);
    let v9 = &constructor_sub_with_flags_paired(ctx, I64, v3, v6);
    let v10 = &constructor_sbc_paired(ctx, I64, v5, v7);
    let v11 = constructor_with_flags(ctx, v9, v10);
    // Rule at src\isa\aarch64\inst.isle line 2837.
    return v11;
}

// Generated as internal constructor for term madd.
pub fn constructor_madd<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v5 = constructor_alu_rrrr(ctx, &ALUOp3::MAdd, arg0, arg1, arg2, arg3);
    // Rule at src\isa\aarch64\inst.isle line 2862.
    return v5;
}

// Generated as internal constructor for term msub.
pub fn constructor_msub<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v5 = constructor_alu_rrrr(ctx, &ALUOp3::MSub, arg0, arg1, arg2, arg3);
    // Rule at src\isa\aarch64\inst.isle line 2872.
    return v5;
}

// Generated as internal constructor for term umaddl.
pub fn constructor_umaddl<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v5 = constructor_alu_rrrr(ctx, &ALUOp3::UMAddL, I32, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2876.
    return v5;
}

// Generated as internal constructor for term smaddl.
pub fn constructor_smaddl<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v5 = constructor_alu_rrrr(ctx, &ALUOp3::SMAddL, I32, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2880.
    return v5;
}

// Generated as internal constructor for term uqadd.
pub fn constructor_uqadd<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Uqadd, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2884.
    return v4;
}

// Generated as internal constructor for term sqadd.
pub fn constructor_sqadd<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Sqadd, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2888.
    return v4;
}

// Generated as internal constructor for term uqsub.
pub fn constructor_uqsub<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Uqsub, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2892.
    return v4;
}

// Generated as internal constructor for term sqsub.
pub fn constructor_sqsub<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Sqsub, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2896.
    return v4;
}

// Generated as internal constructor for term umulh.
pub fn constructor_umulh<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::UMulH, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2900.
    return v4;
}

// Generated as internal constructor for term smulh.
pub fn constructor_smulh<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::SMulH, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2904.
    return v4;
}

// Generated as internal constructor for term mul.
pub fn constructor_mul<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Mul, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2908.
    return v4;
}

// Generated as internal constructor for term neg.
pub fn constructor_neg<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &VectorSize,
) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Neg, arg0, arg1);
    // Rule at src\isa\aarch64\inst.isle line 2912.
    return v3;
}

// Generated as internal constructor for term rev16.
pub fn constructor_rev16<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &VectorSize,
) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Rev16, arg0, arg1);
    // Rule at src\isa\aarch64\inst.isle line 2916.
    return v3;
}

// Generated as internal constructor for term rev32.
pub fn constructor_rev32<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &VectorSize,
) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Rev32, arg0, arg1);
    // Rule at src\isa\aarch64\inst.isle line 2920.
    return v3;
}

// Generated as internal constructor for term rev64.
pub fn constructor_rev64<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &VectorSize,
) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Rev64, arg0, arg1);
    // Rule at src\isa\aarch64\inst.isle line 2924.
    return v3;
}

// Generated as internal constructor for term xtn.
pub fn constructor_xtn<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &ScalarSize,
) -> Reg {
    let v3 = constructor_vec_rr_narrow_low(ctx, &VecRRNarrowOp::Xtn, arg0, arg1);
    // Rule at src\isa\aarch64\inst.isle line 2928.
    return v3;
}

// Generated as internal constructor for term fcvtn.
pub fn constructor_fcvtn<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &ScalarSize,
) -> Reg {
    let v3 = constructor_vec_rr_narrow_low(ctx, &VecRRNarrowOp::Fcvtn, arg0, arg1);
    // Rule at src\isa\aarch64\inst.isle line 2932.
    return v3;
}

// Generated as internal constructor for term sqxtn.
pub fn constructor_sqxtn<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &ScalarSize,
) -> Reg {
    let v3 = constructor_vec_rr_narrow_low(ctx, &VecRRNarrowOp::Sqxtn, arg0, arg1);
    // Rule at src\isa\aarch64\inst.isle line 2936.
    return v3;
}

// Generated as internal constructor for term sqxtn2.
pub fn constructor_sqxtn2<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &ScalarSize,
) -> Reg {
    let v4 = constructor_vec_rr_narrow_high(ctx, &VecRRNarrowOp::Sqxtn, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2940.
    return v4;
}

// Generated as internal constructor for term sqxtun.
pub fn constructor_sqxtun<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &ScalarSize,
) -> Reg {
    let v3 = constructor_vec_rr_narrow_low(ctx, &VecRRNarrowOp::Sqxtun, arg0, arg1);
    // Rule at src\isa\aarch64\inst.isle line 2944.
    return v3;
}

// Generated as internal constructor for term sqxtun2.
pub fn constructor_sqxtun2<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &ScalarSize,
) -> Reg {
    let v4 = constructor_vec_rr_narrow_high(ctx, &VecRRNarrowOp::Sqxtun, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2948.
    return v4;
}

// Generated as internal constructor for term uqxtn.
pub fn constructor_uqxtn<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &ScalarSize,
) -> Reg {
    let v3 = constructor_vec_rr_narrow_low(ctx, &VecRRNarrowOp::Uqxtn, arg0, arg1);
    // Rule at src\isa\aarch64\inst.isle line 2952.
    return v3;
}

// Generated as internal constructor for term uqxtn2.
pub fn constructor_uqxtn2<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &ScalarSize,
) -> Reg {
    let v4 = constructor_vec_rr_narrow_high(ctx, &VecRRNarrowOp::Uqxtn, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2956.
    return v4;
}

// Generated as internal constructor for term aarch64_fence.
pub fn constructor_aarch64_fence<C: Context>(
    ctx: &mut C,
) -> SideEffectNoResult {
    let v1 = SideEffectNoResult::Inst {
        inst: MInst::Fence,
    };
    // Rule at src\isa\aarch64\inst.isle line 2960.
    return v1;
}

// Generated as internal constructor for term csdb.
pub fn constructor_csdb<C: Context>(
    ctx: &mut C,
) -> SideEffectNoResult {
    let v1 = SideEffectNoResult::Inst {
        inst: MInst::Csdb,
    };
    // Rule at src\isa\aarch64\inst.isle line 2965.
    return v1;
}

// Generated as internal constructor for term brk.
pub fn constructor_brk<C: Context>(
    ctx: &mut C,
) -> SideEffectNoResult {
    let v1 = SideEffectNoResult::Inst {
        inst: MInst::Brk,
    };
    // Rule at src\isa\aarch64\inst.isle line 2970.
    return v1;
}

// Generated as internal constructor for term addp.
pub fn constructor_addp<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Addp, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2997.
    return v4;
}

// Generated as internal constructor for term zip1.
pub fn constructor_zip1<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Zip1, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 3001.
    return v4;
}

// Generated as internal constructor for term vec_abs.
pub fn constructor_vec_abs<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &VectorSize,
) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Abs, arg0, arg1);
    // Rule at src\isa\aarch64\inst.isle line 3005.
    return v3;
}

// Generated as internal constructor for term abs.
pub fn constructor_abs<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
) -> Reg {
    let v3 = C::u8_into_imm12(ctx, 0x0_u8);
    let v4 = &constructor_cmp_imm(ctx, arg0, arg1, v3);
    let v6 = &constructor_csneg(ctx, &Cond::Gt, arg1, arg1);
    let v7 = constructor_with_flags(ctx, v4, v6);
    let v9 = C::value_regs_get(ctx, v7, 0x0_usize);
    // Rule at src\isa\aarch64\inst.isle line 3020.
    return v9;
}

// Generated as internal constructor for term addv.
pub fn constructor_addv<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &VectorSize,
) -> Reg {
    let v3 = constructor_vec_lanes(ctx, &VecLanesOp::Addv, arg0, arg1);
    // Rule at src\isa\aarch64\inst.isle line 3048.
    return v3;
}

// Generated as internal constructor for term shll32.
pub fn constructor_shll32<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: bool,
) -> Reg {
    let v3 = constructor_vec_rr_long(ctx, &VecRRLongOp::Shll32, arg0, arg1);
    // Rule at src\isa\aarch64\inst.isle line 3052.
    return v3;
}

// Generated as internal constructor for term saddlp8.
pub fn constructor_saddlp8<C: Context>(
    ctx: &mut C,
    arg0: Reg,
) -> Reg {
    let v2 = constructor_vec_rr_pair_long(ctx, &VecRRPairLongOp::Saddlp8, arg0);
    // Rule at src\isa\aarch64\inst.isle line 3057.
    return v2;
}

// Generated as internal constructor for term saddlp16.
pub fn constructor_saddlp16<C: Context>(
    ctx: &mut C,
    arg0: Reg,
) -> Reg {
    let v2 = constructor_vec_rr_pair_long(ctx, &VecRRPairLongOp::Saddlp16, arg0);
    // Rule at src\isa\aarch64\inst.isle line 3060.
    return v2;
}

// Generated as internal constructor for term uaddlp8.
pub fn constructor_uaddlp8<C: Context>(
    ctx: &mut C,
    arg0: Reg,
) -> Reg {
    let v2 = constructor_vec_rr_pair_long(ctx, &VecRRPairLongOp::Uaddlp8, arg0);
    // Rule at src\isa\aarch64\inst.isle line 3063.
    return v2;
}

// Generated as internal constructor for term uaddlp16.
pub fn constructor_uaddlp16<C: Context>(
    ctx: &mut C,
    arg0: Reg,
) -> Reg {
    let v2 = constructor_vec_rr_pair_long(ctx, &VecRRPairLongOp::Uaddlp16, arg0);
    // Rule at src\isa\aarch64\inst.isle line 3066.
    return v2;
}

// Generated as internal constructor for term umlal32.
pub fn constructor_umlal32<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: Reg,
    arg3: bool,
) -> Reg {
    let v5 = constructor_vec_rrrr_long(ctx, &VecRRRLongModOp::Umlal32, arg0, arg1, arg2, arg3);
    // Rule at src\isa\aarch64\inst.isle line 3070.
    return v5;
}

// Generated as internal constructor for term smull8.
pub fn constructor_smull8<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: bool,
) -> Reg {
    let v4 = constructor_vec_rrr_long(ctx, &VecRRRLongOp::Smull8, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 3074.
    return v4;
}

// Generated as internal constructor for term umull8.
pub fn constructor_umull8<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: bool,
) -> Reg {
    let v4 = constructor_vec_rrr_long(ctx, &VecRRRLongOp::Umull8, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 3078.
    return v4;
}

// Generated as internal constructor for term smull16.
pub fn constructor_smull16<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: bool,
) -> Reg {
    let v4 = constructor_vec_rrr_long(ctx, &VecRRRLongOp::Smull16, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 3082.
    return v4;
}

// Generated as internal constructor for term umull16.
pub fn constructor_umull16<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: bool,
) -> Reg {
    let v4 = constructor_vec_rrr_long(ctx, &VecRRRLongOp::Umull16, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 3086.
    return v4;
}

// Generated as internal constructor for term smull32.
pub fn constructor_smull32<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: bool,
) -> Reg {
    let v4 = constructor_vec_rrr_long(ctx, &VecRRRLongOp::Smull32, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 3090.
    return v4;
}

// Generated as internal constructor for term umull32.
pub fn constructor_umull32<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: bool,
) -> Reg {
    let v4 = constructor_vec_rrr_long(ctx, &VecRRRLongOp::Umull32, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 3094.
    return v4;
}

// Generated as internal constructor for term asr.
pub fn constructor_asr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::Asr, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 3098.
    return v4;
}

// Generated as internal constructor for term asr_imm.
pub fn constructor_asr_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: ImmShift,
) -> Reg {
    let v4 = constructor_alu_rr_imm_shift(ctx, &ALUOp::Asr, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 3101.
    return v4;
}

// Generated as internal constructor for term lsr.
pub fn constructor_lsr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::Lsr, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 3111.
    return v4;
}

// Generated as internal constructor for term lsr_imm.
pub fn constructor_lsr_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: ImmShift,
) -> Reg {
    let v4 = constructor_alu_rr_imm_shift(ctx, &ALUOp::Lsr, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 3120.
    return v4;
}

// Generated as internal constructor for term lsl.
pub fn constructor_lsl<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::Lsl, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 3130.
    return v4;
}

// Generated as internal constructor for term lsl_imm.
pub fn constructor_lsl_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: ImmShift,
) -> Reg {
    let v4 = constructor_alu_rr_imm_shift(ctx, &ALUOp::Lsl, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 3139.
    return v4;
}

// Generated as internal constructor for term a64_udiv.
pub fn constructor_a64_udiv<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::UDiv, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 3149.
    return v4;
}

// Generated as internal constructor for term a64_sdiv.
pub fn constructor_a64_sdiv<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::SDiv, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 3159.
    return v4;
}

// Generated as internal constructor for term not.
pub fn constructor_not<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &VectorSize,
) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Not, arg0, arg1);
    // Rule at src\isa\aarch64\inst.isle line 3163.
    return v3;
}

// Generated as internal constructor for term orr_not.
pub fn constructor_orr_not<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::OrrNot, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 3173.
    return v4;
}

// Generated as internal constructor for term orr_not_shift.
pub fn constructor_orr_not_shift<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: ShiftOpAndAmt,
) -> Reg {
    let v5 = constructor_alu_rrr_shift(ctx, &ALUOp::OrrNot, arg0, arg1, arg2, arg3);
    // Rule at src\isa\aarch64\inst.isle line 3181.
    return v5;
}

// Generated as internal constructor for term orr.
pub fn constructor_orr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::Orr, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 3192.
    return v4;
}

// Generated as internal constructor for term orr_imm.
pub fn constructor_orr_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: ImmLogic,
) -> Reg {
    let v4 = constructor_alu_rr_imm_logic(ctx, &ALUOp::Orr, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 3205.
    return v4;
}

// Generated as internal constructor for term orr_shift.
pub fn constructor_orr_shift<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: ShiftOpAndAmt,
) -> Reg {
    let v5 = constructor_alu_rrr_shift(ctx, &ALUOp::Orr, arg0, arg1, arg2, arg3);
    // Rule at src\isa\aarch64\inst.isle line 3208.
    return v5;
}

// Generated as internal constructor for term orr_vec.
pub fn constructor_orr_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Orr, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 3211.
    return v4;
}

// Generated as internal constructor for term and_reg.
pub fn constructor_and_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::And, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 3222.
    return v4;
}

// Generated as internal constructor for term and_imm.
pub fn constructor_and_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: ImmLogic,
) -> Reg {
    let v4 = constructor_alu_rr_imm_logic(ctx, &ALUOp::And, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 3235.
    return v4;
}

// Generated as internal constructor for term and_vec.
pub fn constructor_and_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::And, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 3238.
    return v4;
}

// Generated as internal constructor for term eor.
pub fn constructor_eor<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::Eor, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 3242.
    return v4;
}

// Generated as internal constructor for term eor_vec.
pub fn constructor_eor_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Eor, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 3245.
    return v4;
}

// Generated as internal constructor for term bic.
pub fn constructor_bic<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::AndNot, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 3258.
    return v4;
}

// Generated as internal constructor for term bic_vec.
pub fn constructor_bic_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Bic, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 3261.
    return v4;
}

// Generated as internal constructor for term sshl.
pub fn constructor_sshl<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Sshl, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 3265.
    return v4;
}

// Generated as internal constructor for term ushl.
pub fn constructor_ushl<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Ushl, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 3269.
    return v4;
}

// Generated as internal constructor for term ushl_vec_imm.
pub fn constructor_ushl_vec_imm<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: u8,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_shift_imm(ctx, &VecShiftImmOp::Shl, arg1, arg0, arg2);
    // Rule at src\isa\aarch64\inst.isle line 3273.
    return v4;
}

// Generated as internal constructor for term ushr_vec_imm.
pub fn constructor_ushr_vec_imm<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: u8,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_shift_imm(ctx, &VecShiftImmOp::Ushr, arg1, arg0, arg2);
    // Rule at src\isa\aarch64\inst.isle line 3277.
    return v4;
}

// Generated as internal constructor for term sshr_vec_imm.
pub fn constructor_sshr_vec_imm<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: u8,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_shift_imm(ctx, &VecShiftImmOp::Sshr, arg1, arg0, arg2);
    // Rule at src\isa\aarch64\inst.isle line 3281.
    return v4;
}

// Generated as internal constructor for term a64_rotr.
pub fn constructor_a64_rotr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::Extr, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 3295.
    return v4;
}

// Generated as internal constructor for term a64_rotr_imm.
pub fn constructor_a64_rotr_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: ImmShift,
) -> Reg {
    let v4 = constructor_alu_rr_imm_shift(ctx, &ALUOp::Extr, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 3305.
    return v4;
}

// Generated as internal constructor for term a64_extr.
pub fn constructor_a64_extr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: ImmShift,
) -> Reg {
    let v5 = C::a64_extr_imm(ctx, arg0, arg3);
    let v6 = constructor_alu_rrr_shift(ctx, &ALUOp::Extr, arg0, arg1, arg2, v5);
    // Rule at src\isa\aarch64\inst.isle line 3309.
    return v6;
}

// Generated as internal constructor for term rbit.
pub fn constructor_rbit<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v3 = constructor_bit_rr(ctx, &BitOp::RBit, arg0, arg1);
    // Rule at src\isa\aarch64\inst.isle line 3322.
    return v3;
}

// Generated as internal constructor for term a64_clz.
pub fn constructor_a64_clz<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v3 = constructor_bit_rr(ctx, &BitOp::Clz, arg0, arg1);
    // Rule at src\isa\aarch64\inst.isle line 3333.
    return v3;
}

// Generated as internal constructor for term a64_cls.
pub fn constructor_a64_cls<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v3 = constructor_bit_rr(ctx, &BitOp::Cls, arg0, arg1);
    // Rule at src\isa\aarch64\inst.isle line 3344.
    return v3;
}

// Generated as internal constructor for term a64_rev16.
pub fn constructor_a64_rev16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v3 = constructor_bit_rr(ctx, &BitOp::Rev16, arg0, arg1);
    // Rule at src\isa\aarch64\inst.isle line 3349.
    return v3;
}

// Generated as internal constructor for term a64_rev32.
pub fn constructor_a64_rev32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v3 = constructor_bit_rr(ctx, &BitOp::Rev32, arg0, arg1);
    // Rule at src\isa\aarch64\inst.isle line 3352.
    return v3;
}

// Generated as internal constructor for term a64_rev64.
pub fn constructor_a64_rev64<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v3 = constructor_bit_rr(ctx, &BitOp::Rev64, arg0, arg1);
    // Rule at src\isa\aarch64\inst.isle line 3355.
    return v3;
}

// Generated as internal constructor for term eon.
pub fn constructor_eon<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::EorNot, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 3360.
    return v4;
}

// Generated as internal constructor for term vec_cnt.
pub fn constructor_vec_cnt<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &VectorSize,
) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Cnt, arg0, arg1);
    // Rule at src\isa\aarch64\inst.isle line 3382.
    return v3;
}

// Generated as internal constructor for term bsl.
pub fn constructor_bsl<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v5 = &constructor_vector_size(ctx, arg0);
    let v6 = constructor_vec_rrr_mod(ctx, &VecALUModOp::Bsl, arg1, arg2, arg3, v5);
    // Rule at src\isa\aarch64\inst.isle line 3387.
    return v6;
}

// Generated as internal constructor for term udf.
pub fn constructor_udf<C: Context>(
    ctx: &mut C,
    arg0: &TrapCode,
) -> SideEffectNoResult {
    let v1 = MInst::Udf {
        trap_code: arg0.clone(),
    };
    let v2 = SideEffectNoResult::Inst {
        inst: v1,
    };
    // Rule at src\isa\aarch64\inst.isle line 3393.
    return v2;
}

// Generated as internal constructor for term aarch64_uload8.
pub fn constructor_aarch64_uload8<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::ULoad8 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 3402.
    return v6;
}

// Generated as internal constructor for term aarch64_sload8.
pub fn constructor_aarch64_sload8<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::SLoad8 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 3407.
    return v6;
}

// Generated as internal constructor for term aarch64_uload16.
pub fn constructor_aarch64_uload16<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::ULoad16 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 3415.
    return v6;
}

// Generated as internal constructor for term aarch64_sload16.
pub fn constructor_aarch64_sload16<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::SLoad16 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 3420.
    return v6;
}

// Generated as internal constructor for term aarch64_uload32.
pub fn constructor_aarch64_uload32<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::ULoad32 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 3428.
    return v6;
}

// Generated as internal constructor for term aarch64_sload32.
pub fn constructor_aarch64_sload32<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::SLoad32 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 3433.
    return v6;
}

// Generated as internal constructor for term aarch64_uload64.
pub fn constructor_aarch64_uload64<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::ULoad64 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 3441.
    return v6;
}

// Generated as internal constructor for term aarch64_fpuload16.
pub fn constructor_aarch64_fpuload16<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, F64);
    let v4 = MInst::FpuLoad16 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 3446.
    return v6;
}

// Generated as internal constructor for term aarch64_fpuload32.
pub fn constructor_aarch64_fpuload32<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, F64);
    let v4 = MInst::FpuLoad32 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 3451.
    return v6;
}

// Generated as internal constructor for term aarch64_fpuload64.
pub fn constructor_aarch64_fpuload64<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, F64);
    let v4 = MInst::FpuLoad64 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 3456.
    return v6;
}

// Generated as internal constructor for term aarch64_fpuload128.
pub fn constructor_aarch64_fpuload128<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, F64X2);
    let v4 = MInst::FpuLoad128 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 3461.
    return v6;
}

// Generated as internal constructor for term aarch64_loadp64.
pub fn constructor_aarch64_loadp64<C: Context>(
    ctx: &mut C,
    arg0: &PairAMode,
    arg1: MemFlags,
) -> ValueRegs {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::LoadP64 {
        rt: v3,
        rt2: v4,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v3);
    let v8 = C::writable_reg_to_reg(ctx, v4);
    let v9 = C::value_regs(ctx, v7, v8);
    // Rule at src\isa\aarch64\inst.isle line 3466.
    return v9;
}

// Generated as internal constructor for term aarch64_store8.
pub fn constructor_aarch64_store8<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
    arg2: Reg,
) -> SideEffectNoResult {
    let v3 = MInst::Store8 {
        rd: arg2,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v4 = SideEffectNoResult::Inst {
        inst: v3,
    };
    // Rule at src\isa\aarch64\inst.isle line 3477.
    return v4;
}

// Generated as internal constructor for term aarch64_store16.
pub fn constructor_aarch64_store16<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
    arg2: Reg,
) -> SideEffectNoResult {
    let v3 = MInst::Store16 {
        rd: arg2,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v4 = SideEffectNoResult::Inst {
        inst: v3,
    };
    // Rule at src\isa\aarch64\inst.isle line 3482.
    return v4;
}

// Generated as internal constructor for term aarch64_store32.
pub fn constructor_aarch64_store32<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
    arg2: Reg,
) -> SideEffectNoResult {
    let v3 = MInst::Store32 {
        rd: arg2,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v4 = SideEffectNoResult::Inst {
        inst: v3,
    };
    // Rule at src\isa\aarch64\inst.isle line 3487.
    return v4;
}

// Generated as internal constructor for term aarch64_store64.
pub fn constructor_aarch64_store64<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
    arg2: Reg,
) -> SideEffectNoResult {
    let v3 = MInst::Store64 {
        rd: arg2,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v4 = SideEffectNoResult::Inst {
        inst: v3,
    };
    // Rule at src\isa\aarch64\inst.isle line 3492.
    return v4;
}

// Generated as internal constructor for term aarch64_fpustore16.
pub fn constructor_aarch64_fpustore16<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
    arg2: Reg,
) -> SideEffectNoResult {
    let v3 = MInst::FpuStore16 {
        rd: arg2,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v4 = SideEffectNoResult::Inst {
        inst: v3,
    };
    // Rule at src\isa\aarch64\inst.isle line 3495.
    return v4;
}

// Generated as internal constructor for term aarch64_fpustore32.
pub fn constructor_aarch64_fpustore32<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
    arg2: Reg,
) -> SideEffectNoResult {
    let v3 = MInst::FpuStore32 {
        rd: arg2,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v4 = SideEffectNoResult::Inst {
        inst: v3,
    };
    // Rule at src\isa\aarch64\inst.isle line 3498.
    return v4;
}

// Generated as internal constructor for term aarch64_fpustore64.
pub fn constructor_aarch64_fpustore64<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
    arg2: Reg,
) -> SideEffectNoResult {
    let v3 = MInst::FpuStore64 {
        rd: arg2,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v4 = SideEffectNoResult::Inst {
        inst: v3,
    };
    // Rule at src\isa\aarch64\inst.isle line 3501.
    return v4;
}

// Generated as internal constructor for term aarch64_fpustore128.
pub fn constructor_aarch64_fpustore128<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
    arg2: Reg,
) -> SideEffectNoResult {
    let v3 = MInst::FpuStore128 {
        rd: arg2,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v4 = SideEffectNoResult::Inst {
        inst: v3,
    };
    // Rule at src\isa\aarch64\inst.isle line 3504.
    return v4;
}

// Generated as internal constructor for term aarch64_storep64.
pub fn constructor_aarch64_storep64<C: Context>(
    ctx: &mut C,
    arg0: &PairAMode,
    arg1: MemFlags,
    arg2: Reg,
    arg3: Reg,
) -> SideEffectNoResult {
    let v4 = MInst::StoreP64 {
        rt: arg2,
        rt2: arg3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = SideEffectNoResult::Inst {
        inst: v4,
    };
    // Rule at src\isa\aarch64\inst.isle line 3507.
    return v5;
}

// Generated as internal constructor for term trap_if.
pub fn constructor_trap_if<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &TrapCode,
    arg2: &Cond,
) -> InstOutput {
    let v3 = C::cond_br_cond(ctx, arg2);
    let v4 = MInst::TrapIf {
        kind: v3,
        trap_code: arg1.clone(),
    };
    let v5 = ConsumesFlags::ConsumesFlagsSideEffect {
        inst: v4,
    };
    let v6 = &constructor_with_flags_side_effect(ctx, arg0, &v5);
    let v7 = constructor_side_effect(ctx, v6);
    // Rule at src\isa\aarch64\inst.isle line 3513.
    return v7;
}

// Generated as internal constructor for term zero_cond_to_cond_br.
pub fn constructor_zero_cond_to_cond_br<C: Context>(
    ctx: &mut C,
    arg0: &ZeroCond,
    arg1: Reg,
    arg2: &OperandSize,
) -> CondBrKind {
    match arg0 {
        &ZeroCond::Zero => {
            let v3 = C::cond_br_zero(ctx, arg1, arg2);
            // Rule at src\isa\aarch64\inst.isle line 3526.
            return v3;
        }
        &ZeroCond::NonZero => {
            let v4 = C::cond_br_not_zero(ctx, arg1, arg2);
            // Rule at src\isa\aarch64\inst.isle line 3529.
            return v4;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "zero_cond_to_cond_br", "src\\isa\\aarch64\\inst.isle line 3525")
}

// Generated as internal constructor for term trap_if_val.
pub fn constructor_trap_if_val<C: Context>(
    ctx: &mut C,
    arg0: &ZeroCond,
    arg1: Value,
    arg2: &TrapCode,
) -> InstOutput {
    let v2 = C::value_type(ctx, arg1);
    let v3 = C::fits_in_64(ctx, v2);
    if let Some(v4) = v3 {
        let v6 = constructor_put_in_reg_zext64(ctx, arg1);
        let v8 = &constructor_operand_size(ctx, I64);
        let v9 = constructor_zero_cond_to_cond_br(ctx, arg0, v6, v8);
        let v10 = MInst::TrapIf {
            kind: v9,
            trap_code: arg2.clone(),
        };
        let v11 = SideEffectNoResult::Inst {
            inst: v10,
        };
        let v12 = constructor_side_effect(ctx, &v11);
        // Rule at src\isa\aarch64\inst.isle line 3533.
        return v12;
    }
    if v2 == I128 {
        let v13 = C::put_in_regs(ctx, arg1);
        let v15 = C::value_regs_get(ctx, v13, 0x0_usize);
        let v17 = C::value_regs_get(ctx, v13, 0x1_usize);
        let v18 = constructor_orr(ctx, I64, v15, v17);
        let v19 = &constructor_operand_size(ctx, I64);
        let v20 = constructor_zero_cond_to_cond_br(ctx, arg0, v18, v19);
        let v21 = MInst::TrapIf {
            kind: v20,
            trap_code: arg2.clone(),
        };
        let v22 = SideEffectNoResult::Inst {
            inst: v21,
        };
        let v23 = constructor_side_effect(ctx, &v22);
        // Rule at src\isa\aarch64\inst.isle line 3539.
        return v23;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "trap_if_val", "src\\isa\\aarch64\\inst.isle line 3532")
}

// Generated as internal constructor for term imm.
pub fn constructor_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ImmExtend,
    arg2: u64,
) -> Reg {
    let v1 = C::integral_ty(ctx, arg0);
    if let Some(v2) = v1 {
        if let &ImmExtend::Zero = arg1 {
            let v5 = C::move_wide_const_from_u64(ctx, v2, arg2);
            if let Some(v6) = v5 {
                let v7 = &constructor_operand_size(ctx, v2);
                let v8 = constructor_movz(ctx, v6, v7);
                let v10 = C::add_range_fact(ctx, v8, 0x40_u16, arg2, arg2);
                // Rule at src\isa\aarch64\inst.isle line 3589.
                return v10;
            }
            let v11 = C::ty_32_or_64(ctx, v2);
            if let Some(v12) = v11 {
                let v13 = C::move_wide_const_from_inverted_u64(ctx, v12, arg2);
                if let Some(v14) = v13 {
                    let v15 = &constructor_operand_size(ctx, v12);
                    let v16 = constructor_movn(ctx, v14, v15);
                    let v17 = C::add_range_fact(ctx, v16, 0x40_u16, arg2, arg2);
                    // Rule at src\isa\aarch64\inst.isle line 3594.
                    return v17;
                }
            }
            let v18 = C::imm_logic_from_u64(ctx, v2, arg2);
            if let Some(v19) = v18 {
                let v20 = C::imm_size_from_type(ctx, v2);
                if let Some(v21) = v20 {
                    let v22 = C::zero_reg(ctx);
                    let v23 = constructor_orr_imm(ctx, v2, v22, v19);
                    let v24 = C::add_range_fact(ctx, v23, v21, arg2, arg2);
                    // Rule at src\isa\aarch64\inst.isle line 3602.
                    return v24;
                }
            }
        }
    }
    let v25 = C::fits_in_32(ctx, arg0);
    if let Some(v26) = v25 {
        let v27 = C::integral_ty(ctx, v26);
        if let Some(v28) = v27 {
            let v30 = &constructor_operand_size(ctx, I32);
            let v31 = C::load_constant_full(ctx, v28, arg1, v30, arg2);
            // Rule at src\isa\aarch64\inst.isle line 3613.
            return v31;
        }
    }
    if let Some(v2) = v1 {
        if v2 == I64 {
            let v33 = &constructor_operand_size(ctx, I64);
            let v34 = C::load_constant_full(ctx, I64, arg1, v33, arg2);
            // Rule at src\isa\aarch64\inst.isle line 3617.
            return v34;
        }
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "imm", "src\\isa\\aarch64\\inst.isle line 3585")
}

// Generated as internal constructor for term put_in_reg_sext32.
pub fn constructor_put_in_reg_sext32<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> Reg {
    let v1 = C::value_type(ctx, arg0);
    match v1 {
        I32 => {
            let v4 = C::put_in_reg(ctx, arg0);
            // Rule at src\isa\aarch64\inst.isle line 3635.
            return v4;
        }
        I64 => {
            let v4 = C::put_in_reg(ctx, arg0);
            // Rule at src\isa\aarch64\inst.isle line 3636.
            return v4;
        }
        _ => {}
    }
    let v2 = C::fits_in_32(ctx, v1);
    if let Some(v3) = v2 {
        let v4 = C::put_in_reg(ctx, arg0);
        let v5 = true;
        let v6 = C::ty_bits(ctx, v3);
        let v8 = constructor_extend(ctx, v4, v5, v6, 0x20_u8);
        // Rule at src\isa\aarch64\inst.isle line 3631.
        return v8;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "put_in_reg_sext32", "src\\isa\\aarch64\\inst.isle line 3630")
}

// Generated as internal constructor for term put_in_reg_zext32.
pub fn constructor_put_in_reg_zext32<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> Reg {
    let v1 = C::value_type(ctx, arg0);
    match v1 {
        I32 => {
            let v4 = C::put_in_reg(ctx, arg0);
            // Rule at src\isa\aarch64\inst.isle line 3650.
            return v4;
        }
        I64 => {
            let v4 = C::put_in_reg(ctx, arg0);
            // Rule at src\isa\aarch64\inst.isle line 3651.
            return v4;
        }
        _ => {}
    }
    let v2 = C::fits_in_32(ctx, v1);
    if let Some(v3) = v2 {
        let v4 = C::put_in_reg(ctx, arg0);
        let v5 = false;
        let v6 = C::ty_bits(ctx, v3);
        let v8 = constructor_extend(ctx, v4, v5, v6, 0x20_u8);
        // Rule at src\isa\aarch64\inst.isle line 3646.
        return v8;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "put_in_reg_zext32", "src\\isa\\aarch64\\inst.isle line 3645")
}

// Generated as internal constructor for term put_in_reg_sext64.
pub fn constructor_put_in_reg_sext64<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> Reg {
    let v1 = C::value_type(ctx, arg0);
    let v2 = C::fits_in_32(ctx, v1);
    if let Some(v3) = v2 {
        let v4 = C::put_in_reg(ctx, arg0);
        let v5 = true;
        let v6 = C::ty_bits(ctx, v3);
        let v8 = constructor_extend(ctx, v4, v5, v6, 0x40_u8);
        // Rule at src\isa\aarch64\inst.isle line 3657.
        return v8;
    }
    if v1 == I64 {
        let v4 = C::put_in_reg(ctx, arg0);
        // Rule at src\isa\aarch64\inst.isle line 3661.
        return v4;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "put_in_reg_sext64", "src\\isa\\aarch64\\inst.isle line 3656")
}

// Generated as internal constructor for term put_in_reg_zext64.
pub fn constructor_put_in_reg_zext64<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> Reg {
    let v1 = C::value_type(ctx, arg0);
    let v2 = C::fits_in_32(ctx, v1);
    if let Some(v3) = v2 {
        let v4 = C::put_in_reg(ctx, arg0);
        let v5 = false;
        let v6 = C::ty_bits(ctx, v3);
        let v8 = constructor_extend(ctx, v4, v5, v6, 0x40_u8);
        // Rule at src\isa\aarch64\inst.isle line 3667.
        return v8;
    }
    if v1 == I64 {
        let v4 = C::put_in_reg(ctx, arg0);
        // Rule at src\isa\aarch64\inst.isle line 3671.
        return v4;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "put_in_reg_zext64", "src\\isa\\aarch64\\inst.isle line 3666")
}

// Generated as internal constructor for term trap_if_zero_divisor.
pub fn constructor_trap_if_zero_divisor<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &OperandSize,
) -> Reg {
    let v2 = C::cond_br_zero(ctx, arg0, arg1);
    let v3 = &C::trap_code_division_by_zero(ctx);
    let v4 = MInst::TrapIf {
        kind: v2,
        trap_code: v3.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    // Rule at src\isa\aarch64\inst.isle line 3676.
    return arg0;
}

// Generated as internal constructor for term size_from_ty.
pub fn constructor_size_from_ty<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> OperandSize {
    let v1 = C::fits_in_32(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src\isa\aarch64\inst.isle line 3681.
        return OperandSize::Size32;
    }
    if arg0 == I64 {
        // Rule at src\isa\aarch64\inst.isle line 3682.
        return OperandSize::Size64;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "size_from_ty", "src\\isa\\aarch64\\inst.isle line 3680")
}

// Generated as internal constructor for term trap_if_div_overflow.
pub fn constructor_trap_if_div_overflow<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v5 = &constructor_operand_size(ctx, arg0);
    let v6 = C::writable_zero_reg(ctx);
    let v8 = C::u8_into_imm12(ctx, 0x1_u8);
    let v9 = MInst::AluRRImm12 {
        alu_op: ALUOp::AddS,
        size: v5.clone(),
        rd: v6,
        rn: arg3,
        imm12: v8,
    };
    let v10 = C::emit(ctx, &v9);
    let v11 = &constructor_size_from_ty(ctx, arg0);
    let v12 = C::u8_into_uimm5(ctx, 0x1_u8);
    let v13 = false;
    let v14 = C::nzcv(ctx, v13, v13, v13, v13);
    let v16 = MInst::CCmpImm {
        size: v11.clone(),
        rn: arg1,
        imm: v12,
        nzcv: v14,
        cond: Cond::Eq,
    };
    let v17 = C::emit(ctx, &v16);
    let v19 = C::cond_br_cond(ctx, &Cond::Vs);
    let v20 = &C::trap_code_integer_overflow(ctx);
    let v21 = MInst::TrapIf {
        kind: v19,
        trap_code: v20.clone(),
    };
    let v22 = C::emit(ctx, &v21);
    // Rule at src\isa\aarch64\inst.isle line 3689.
    return arg2;
}

// Generated as internal constructor for term intmin_check.
pub fn constructor_intmin_check<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v1 = C::fits_in_16(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = constructor_diff_from_32(ctx, v2);
        let v6 = C::imm_shift_from_u8(ctx, v5);
        let v7 = constructor_alu_rr_imm_shift(ctx, &ALUOp::Lsl, v2, arg1, v6);
        // Rule at src\isa\aarch64\inst.isle line 3713.
        return v7;
    }
    // Rule at src\isa\aarch64\inst.isle line 3717.
    return arg1;
}

// Generated as internal constructor for term trap_if_overflow.
pub fn constructor_trap_if_overflow<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &TrapCode,
) -> Reg {
    let v3 = C::cond_br_cond(ctx, &Cond::Hs);
    let v4 = MInst::TrapIf {
        kind: v3,
        trap_code: arg1.clone(),
    };
    let v5 = ConsumesFlags::ConsumesFlagsSideEffect {
        inst: v4,
    };
    let v6 = constructor_with_flags_reg(ctx, arg0, &v5);
    // Rule at src\isa\aarch64\inst.isle line 3721.
    return v6;
}

// Generated as internal constructor for term sink_atomic_load.
pub fn constructor_sink_atomic_load<C: Context>(
    ctx: &mut C,
    arg0: Inst,
) -> Reg {
    let v1 = &C::inst_data_value(ctx, arg0);
    if let &InstructionData::LoadNoOffset {
        opcode: ref v2,
        arg: v3,
        flags: v4,
    } = v1 {
        if let &Opcode::AtomicLoad = v2 {
            let v5 = C::sink_inst(ctx, arg0);
            let v6 = C::put_in_reg(ctx, v3);
            // Rule at src\isa\aarch64\inst.isle line 3728.
            return v6;
        }
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "sink_atomic_load", "src\\isa\\aarch64\\inst.isle line 3727")
}

// Generated as internal constructor for term alu_rs_imm_logic_commutative.
pub fn constructor_alu_rs_imm_logic_commutative<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Value,
    arg3: Value,
) -> Reg {
    let v15 = C::def_inst(ctx, arg2);
    if let Some(v16) = v15 {
        let v17 = &C::inst_data_value(ctx, v16);
        match v17 {
            &InstructionData::Binary {
                opcode: ref v38,
                args: ref v39,
            } => {
                if let &Opcode::Ishl = v38 {
                    let v40 = C::unpack_value_array_2(ctx, v39);
                    let v43 = C::def_inst(ctx, v40.1);
                    if let Some(v44) = v43 {
                        let v45 = &C::inst_data_value(ctx, v44);
                        if let &InstructionData::UnaryImm {
                            opcode: ref v46,
                            imm: v47,
                        } = v45 {
                            if let &Opcode::Iconst = v46 {
                                let v48 = C::lshl_from_imm64(ctx, arg1, v47);
                                if let Some(v49) = v48 {
                                    let v22 = C::put_in_reg(ctx, arg3);
                                    let v50 = C::put_in_reg(ctx, v40.0);
                                    let v51 = constructor_alu_rrr_shift(ctx, arg0, arg1, v22, v50, v49);
                                    // Rule at src\isa\aarch64\inst.isle line 3761.
                                    return v51;
                                }
                            }
                        }
                    }
                }
            }
            &InstructionData::UnaryImm {
                opcode: ref v18,
                imm: v19,
            } => {
                if let &Opcode::Iconst = v18 {
                    let v20 = C::imm_logic_from_imm64(ctx, arg1, v19);
                    if let Some(v21) = v20 {
                        let v22 = C::put_in_reg(ctx, arg3);
                        let v23 = constructor_alu_rr_imm_logic(ctx, arg0, arg1, v22, v21);
                        // Rule at src\isa\aarch64\inst.isle line 3753.
                        return v23;
                    }
                }
            }
            _ => {}
        }
    }
    let v7 = C::def_inst(ctx, arg3);
    if let Some(v8) = v7 {
        let v9 = &C::inst_data_value(ctx, v8);
        match v9 {
            &InstructionData::Binary {
                opcode: ref v24,
                args: ref v25,
            } => {
                if let &Opcode::Ishl = v24 {
                    let v26 = C::unpack_value_array_2(ctx, v25);
                    let v29 = C::def_inst(ctx, v26.1);
                    if let Some(v30) = v29 {
                        let v31 = &C::inst_data_value(ctx, v30);
                        if let &InstructionData::UnaryImm {
                            opcode: ref v32,
                            imm: v33,
                        } = v31 {
                            if let &Opcode::Iconst = v32 {
                                let v34 = C::lshl_from_imm64(ctx, arg1, v33);
                                if let Some(v35) = v34 {
                                    let v4 = C::put_in_reg(ctx, arg2);
                                    let v36 = C::put_in_reg(ctx, v26.0);
                                    let v37 = constructor_alu_rrr_shift(ctx, arg0, arg1, v4, v36, v35);
                                    // Rule at src\isa\aarch64\inst.isle line 3758.
                                    return v37;
                                }
                            }
                        }
                    }
                }
            }
            &InstructionData::UnaryImm {
                opcode: ref v10,
                imm: v11,
            } => {
                if let &Opcode::Iconst = v10 {
                    let v12 = C::imm_logic_from_imm64(ctx, arg1, v11);
                    if let Some(v13) = v12 {
                        let v4 = C::put_in_reg(ctx, arg2);
                        let v14 = constructor_alu_rr_imm_logic(ctx, arg0, arg1, v4, v13);
                        // Rule at src\isa\aarch64\inst.isle line 3750.
                        return v14;
                    }
                }
            }
            _ => {}
        }
    }
    let v4 = C::put_in_reg(ctx, arg2);
    let v5 = C::put_in_reg(ctx, arg3);
    let v6 = constructor_alu_rrr(ctx, arg0, arg1, v4, v5);
    // Rule at src\isa\aarch64\inst.isle line 3746.
    return v6;
}

// Generated as internal constructor for term alu_rs_imm_logic.
pub fn constructor_alu_rs_imm_logic<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Value,
    arg3: Value,
) -> Reg {
    let v7 = C::def_inst(ctx, arg3);
    if let Some(v8) = v7 {
        let v9 = &C::inst_data_value(ctx, v8);
        match v9 {
            &InstructionData::Binary {
                opcode: ref v15,
                args: ref v16,
            } => {
                if let &Opcode::Ishl = v15 {
                    let v17 = C::unpack_value_array_2(ctx, v16);
                    let v20 = C::def_inst(ctx, v17.1);
                    if let Some(v21) = v20 {
                        let v22 = &C::inst_data_value(ctx, v21);
                        if let &InstructionData::UnaryImm {
                            opcode: ref v23,
                            imm: v24,
                        } = v22 {
                            if let &Opcode::Iconst = v23 {
                                let v25 = C::lshl_from_imm64(ctx, arg1, v24);
                                if let Some(v26) = v25 {
                                    let v4 = C::put_in_reg(ctx, arg2);
                                    let v27 = C::put_in_reg(ctx, v17.0);
                                    let v28 = constructor_alu_rrr_shift(ctx, arg0, arg1, v4, v27, v26);
                                    // Rule at src\isa\aarch64\inst.isle line 3781.
                                    return v28;
                                }
                            }
                        }
                    }
                }
            }
            &InstructionData::UnaryImm {
                opcode: ref v10,
                imm: v11,
            } => {
                if let &Opcode::Iconst = v10 {
                    let v12 = C::imm_logic_from_imm64(ctx, arg1, v11);
                    if let Some(v13) = v12 {
                        let v4 = C::put_in_reg(ctx, arg2);
                        let v14 = constructor_alu_rr_imm_logic(ctx, arg0, arg1, v4, v13);
                        // Rule at src\isa\aarch64\inst.isle line 3778.
                        return v14;
                    }
                }
            }
            _ => {}
        }
    }
    let v4 = C::put_in_reg(ctx, arg2);
    let v5 = C::put_in_reg(ctx, arg3);
    let v6 = constructor_alu_rrr(ctx, arg0, arg1, v4, v5);
    // Rule at src\isa\aarch64\inst.isle line 3776.
    return v6;
}

// Generated as internal constructor for term i128_alu_bitop.
pub fn constructor_i128_alu_bitop<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Value,
    arg3: Value,
) -> ValueRegs {
    let v4 = C::put_in_regs(ctx, arg2);
    let v6 = C::value_regs_get(ctx, v4, 0x0_usize);
    let v8 = C::value_regs_get(ctx, v4, 0x1_usize);
    let v9 = C::put_in_regs(ctx, arg3);
    let v10 = C::value_regs_get(ctx, v9, 0x0_usize);
    let v11 = C::value_regs_get(ctx, v9, 0x1_usize);
    let v12 = constructor_alu_rrr(ctx, arg0, arg1, v6, v10);
    let v13 = constructor_alu_rrr(ctx, arg0, arg1, v8, v11);
    let v14 = C::value_regs(ctx, v12, v13);
    // Rule at src\isa\aarch64\inst.isle line 3790.
    return v14;
}

// Generated as internal constructor for term ld1r.
pub fn constructor_ld1r<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &VectorSize,
    arg2: MemFlags,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecLoadReplicate {
        rd: v4,
        rn: arg0,
        size: arg1.clone(),
        flags: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\aarch64\inst.isle line 3805.
    return v7;
}

// Generated as internal constructor for term load_ext_name.
pub fn constructor_load_ext_name<C: Context>(
    ctx: &mut C,
    arg0: BoxExternalName,
    arg1: i64,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::LoadExtName {
        rd: v3,
        name: arg0,
        offset: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 3812.
    return v6;
}

// Generated as internal constructor for term amode.
pub fn constructor_amode<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: i32,
) -> AMode {
    let v4 = C::def_inst(ctx, arg1);
    if let Some(v5) = v4 {
        let v6 = &C::inst_data_value(ctx, v5);
        if let &InstructionData::Binary {
            opcode: ref v7,
            args: ref v8,
        } = v6 {
            if let &Opcode::Iadd = v7 {
                let v9 = C::unpack_value_array_2(ctx, v8);
                let v17 = C::i32_from_iconst(ctx, v9.0);
                if let Some(v18) = v17 {
                    let v19 = C::s32_add_fallible(ctx, v18, arg2);
                    if let Some(v20) = v19 {
                        let v21 = &constructor_amode_no_more_iconst(ctx, arg0, v9.1, v20);
                        // Rule at src\isa\aarch64\inst.isle line 3841.
                        return v21.clone();
                    }
                }
                let v12 = C::i32_from_iconst(ctx, v9.1);
                if let Some(v13) = v12 {
                    let v14 = C::s32_add_fallible(ctx, v13, arg2);
                    if let Some(v15) = v14 {
                        let v16 = &constructor_amode_no_more_iconst(ctx, arg0, v9.0, v15);
                        // Rule at src\isa\aarch64\inst.isle line 3838.
                        return v16.clone();
                    }
                }
            }
        }
    }
    let v3 = &constructor_amode_no_more_iconst(ctx, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 3836.
    return v3.clone();
}

// Generated as internal constructor for term amode_no_more_iconst.
pub fn constructor_amode_no_more_iconst<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: i32,
) -> AMode {
    let v16 = C::def_inst(ctx, arg1);
    if let Some(v17) = v16 {
        let v18 = &C::inst_data_value(ctx, v17);
        if let &InstructionData::Binary {
            opcode: ref v19,
            args: ref v20,
        } = v18 {
            if let &Opcode::Iadd = v19 {
                let v21 = C::unpack_value_array_2(ctx, v20);
                let v39 = C::def_inst(ctx, v21.0);
                if let Some(v40) = v39 {
                    let v41 = &C::inst_data_value(ctx, v40);
                    if let &InstructionData::Binary {
                        opcode: ref v69,
                        args: ref v70,
                    } = v41 {
                        if let &Opcode::Ishl = v69 {
                            let v71 = C::unpack_value_array_2(ctx, v70);
                            let v74 = C::def_inst(ctx, v71.1);
                            if let Some(v75) = v74 {
                                let v76 = &C::inst_data_value(ctx, v75);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v77,
                                    imm: v78,
                                } = v76 {
                                    if let &Opcode::Iconst = v77 {
                                        let v61 = C::ty_bytes(ctx, arg0);
                                        let v62 = C::u16_as_u64(ctx, v61);
                                        let v79 = C::u64_from_imm64(ctx, v78);
                                        let v80 = C::shift_masked_imm(ctx, arg0, v79);
                                        let v81 = C::u8_as_u64(ctx, v80);
                                        let v82 = C::u64_shl(ctx, 0x1_u64, v81);
                                        let v83 = C::u64_eq(ctx, v62, v82);
                                        if v83 == true {
                                            let v45 = C::put_in_reg(ctx, v21.1);
                                            let v46 = constructor_amode_add(ctx, v45, arg2);
                                            let v84 = &constructor_amode_reg_scaled(ctx, v46, v71.0);
                                            // Rule at src\isa\aarch64\inst.isle line 3888.
                                            return v84.clone();
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                let v28 = C::def_inst(ctx, v21.1);
                if let Some(v29) = v28 {
                    let v30 = &C::inst_data_value(ctx, v29);
                    if let &InstructionData::Binary {
                        opcode: ref v50,
                        args: ref v51,
                    } = v30 {
                        if let &Opcode::Ishl = v50 {
                            let v52 = C::unpack_value_array_2(ctx, v51);
                            let v55 = C::def_inst(ctx, v52.1);
                            if let Some(v56) = v55 {
                                let v57 = &C::inst_data_value(ctx, v56);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v58,
                                    imm: v59,
                                } = v57 {
                                    if let &Opcode::Iconst = v58 {
                                        let v61 = C::ty_bytes(ctx, arg0);
                                        let v62 = C::u16_as_u64(ctx, v61);
                                        let v60 = C::u64_from_imm64(ctx, v59);
                                        let v64 = C::shift_masked_imm(ctx, arg0, v60);
                                        let v65 = C::u8_as_u64(ctx, v64);
                                        let v66 = C::u64_shl(ctx, 0x1_u64, v65);
                                        let v67 = C::u64_eq(ctx, v62, v66);
                                        if v67 == true {
                                            let v24 = C::put_in_reg(ctx, v21.0);
                                            let v25 = constructor_amode_add(ctx, v24, arg2);
                                            let v68 = &constructor_amode_reg_scaled(ctx, v25, v52.0);
                                            // Rule at src\isa\aarch64\inst.isle line 3885.
                                            return v68.clone();
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if let Some(v40) = v39 {
                    let v41 = &C::inst_data_value(ctx, v40);
                    if let &InstructionData::Unary {
                        opcode: ref v42,
                        arg: v43,
                    } = v41 {
                        match v42 {
                            &Opcode::Uextend => {
                                let v44 = C::value_type(ctx, v43);
                                if v44 == I32 {
                                    let v45 = C::put_in_reg(ctx, v21.1);
                                    let v46 = constructor_amode_add(ctx, v45, arg2);
                                    let v47 = C::put_in_reg(ctx, v43);
                                    let v48 = AMode::RegExtended {
                                        rn: v46,
                                        rm: v47,
                                        extendop: ExtendOp::UXTW,
                                    };
                                    // Rule at src\isa\aarch64\inst.isle line 3873.
                                    return v48;
                                }
                            }
                            &Opcode::Sextend => {
                                let v44 = C::value_type(ctx, v43);
                                if v44 == I32 {
                                    let v45 = C::put_in_reg(ctx, v21.1);
                                    let v46 = constructor_amode_add(ctx, v45, arg2);
                                    let v47 = C::put_in_reg(ctx, v43);
                                    let v49 = AMode::RegExtended {
                                        rn: v46,
                                        rm: v47,
                                        extendop: ExtendOp::SXTW,
                                    };
                                    // Rule at src\isa\aarch64\inst.isle line 3875.
                                    return v49;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                if let Some(v29) = v28 {
                    let v30 = &C::inst_data_value(ctx, v29);
                    if let &InstructionData::Unary {
                        opcode: ref v31,
                        arg: v32,
                    } = v30 {
                        match v31 {
                            &Opcode::Uextend => {
                                let v33 = C::value_type(ctx, v32);
                                if v33 == I32 {
                                    let v24 = C::put_in_reg(ctx, v21.0);
                                    let v25 = constructor_amode_add(ctx, v24, arg2);
                                    let v34 = C::put_in_reg(ctx, v32);
                                    let v36 = AMode::RegExtended {
                                        rn: v25,
                                        rm: v34,
                                        extendop: ExtendOp::UXTW,
                                    };
                                    // Rule at src\isa\aarch64\inst.isle line 3869.
                                    return v36;
                                }
                            }
                            &Opcode::Sextend => {
                                let v33 = C::value_type(ctx, v32);
                                if v33 == I32 {
                                    let v24 = C::put_in_reg(ctx, v21.0);
                                    let v25 = constructor_amode_add(ctx, v24, arg2);
                                    let v34 = C::put_in_reg(ctx, v32);
                                    let v38 = AMode::RegExtended {
                                        rn: v25,
                                        rm: v34,
                                        extendop: ExtendOp::SXTW,
                                    };
                                    // Rule at src\isa\aarch64\inst.isle line 3871.
                                    return v38;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                let v24 = C::put_in_reg(ctx, v21.0);
                let v25 = constructor_amode_add(ctx, v24, arg2);
                let v26 = C::put_in_reg(ctx, v21.1);
                let v27 = AMode::RegReg {
                    rn: v25,
                    rm: v26,
                };
                // Rule at src\isa\aarch64\inst.isle line 3867.
                return v27;
            }
        }
    }
    let v6 = C::i32_as_i64(ctx, arg2);
    let v13 = &C::uimm12_scaled_from_i64(ctx, v6, arg0);
    if let Some(v14) = v13 {
        let v3 = C::put_in_reg(ctx, arg1);
        let v15 = AMode::UnsignedOffset {
            rn: v3,
            uimm12: v14.clone(),
        };
        // Rule at src\isa\aarch64\inst.isle line 3856.
        return v15;
    }
    let v10 = &C::simm9_from_i64(ctx, v6);
    if let Some(v11) = v10 {
        let v3 = C::put_in_reg(ctx, arg1);
        let v12 = AMode::Unscaled {
            rn: v3,
            simm9: v11.clone(),
        };
        // Rule at src\isa\aarch64\inst.isle line 3853.
        return v12;
    }
    let v3 = C::put_in_reg(ctx, arg1);
    let v7 = C::i64_as_u64(ctx, v6);
    let v8 = constructor_imm(ctx, I64, &ImmExtend::Zero, v7);
    let v9 = AMode::RegReg {
        rn: v3,
        rm: v8,
    };
    // Rule at src\isa\aarch64\inst.isle line 3848.
    return v9;
}

// Generated as internal constructor for term amode_reg_scaled.
pub fn constructor_amode_reg_scaled<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Value,
) -> AMode {
    let v4 = C::def_inst(ctx, arg1);
    if let Some(v5) = v4 {
        let v6 = &C::inst_data_value(ctx, v5);
        if let &InstructionData::Unary {
            opcode: ref v7,
            arg: v8,
        } = v6 {
            match v7 {
                &Opcode::Uextend => {
                    let v9 = C::value_type(ctx, v8);
                    if v9 == I32 {
                        let v10 = C::put_in_reg(ctx, v8);
                        let v12 = AMode::RegScaledExtended {
                            rn: arg0,
                            rm: v10,
                            extendop: ExtendOp::UXTW,
                        };
                        // Rule at src\isa\aarch64\inst.isle line 3895.
                        return v12;
                    }
                }
                &Opcode::Sextend => {
                    let v9 = C::value_type(ctx, v8);
                    if v9 == I32 {
                        let v10 = C::put_in_reg(ctx, v8);
                        let v14 = AMode::RegScaledExtended {
                            rn: arg0,
                            rm: v10,
                            extendop: ExtendOp::SXTW,
                        };
                        // Rule at src\isa\aarch64\inst.isle line 3897.
                        return v14;
                    }
                }
                _ => {}
            }
        }
    }
    let v2 = C::put_in_reg(ctx, arg1);
    let v3 = AMode::RegScaled {
        rn: arg0,
        rm: v2,
    };
    // Rule at src\isa\aarch64\inst.isle line 3893.
    return v3;
}

// Generated as internal constructor for term amode_add.
pub fn constructor_amode_add<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: i32,
) -> Reg {
    if arg1 == 0_i32 {
        // Rule at src\isa\aarch64\inst.isle line 3908.
        return arg0;
    }
    let v4 = C::i32_as_i64(ctx, arg1);
    let v5 = C::i64_as_u64(ctx, v4);
    let v8 = C::imm12_from_u64(ctx, v5);
    if let Some(v9) = v8 {
        let v10 = constructor_add_imm(ctx, I64, arg0, v9);
        // Rule at src\isa\aarch64\inst.isle line 3905.
        return v10;
    }
    let v6 = constructor_imm(ctx, I64, &ImmExtend::Zero, v5);
    let v7 = constructor_add(ctx, I64, arg0, v6);
    // Rule at src\isa\aarch64\inst.isle line 3903.
    return v7;
}

// Generated as internal constructor for term pair_amode.
pub fn constructor_pair_amode<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: i32,
) -> PairAMode {
    let v9 = C::i32_as_i64(ctx, arg1);
    let v10 = C::simm7_scaled_from_i64(ctx, v9, I64);
    if let Some(v11) = v10 {
        let v6 = C::put_in_reg(ctx, arg0);
        let v12 = PairAMode::SignedOffset {
            reg: v6,
            simm7: v11,
        };
        // Rule at src\isa\aarch64\inst.isle line 3920.
        return v12;
    }
    let v4 = C::simm7_scaled_from_i64(ctx, 0_i64, I64);
    if let Some(v5) = v4 {
        let v6 = C::put_in_reg(ctx, arg0);
        let v7 = constructor_amode_add(ctx, v6, arg1);
        let v8 = PairAMode::SignedOffset {
            reg: v7,
            simm7: v5,
        };
        // Rule at src\isa\aarch64\inst.isle line 3915.
        return v8;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "pair_amode", "src\\isa\\aarch64\\inst.isle line 3912")
}

// Generated as internal constructor for term sink_load_into_addr.
pub fn constructor_sink_load_into_addr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Inst,
) -> Reg {
    let v2 = &C::inst_data_value(ctx, arg1);
    if let &InstructionData::Load {
        opcode: ref v3,
        arg: v4,
        flags: v5,
        offset: v6,
    } = v2 {
        if let &Opcode::Load = v3 {
            let v8 = C::sink_inst(ctx, arg1);
            let v9 = C::put_in_reg(ctx, v4);
            let v7 = C::offset32(ctx, v6);
            let v10 = C::i32_as_i64(ctx, v7);
            let v11 = C::i64_as_u64(ctx, v10);
            let v12 = constructor_add_imm_to_addr(ctx, v9, v11);
            // Rule at src\isa\aarch64\inst.isle line 3935.
            return v12;
        }
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "sink_load_into_addr", "src\\isa\\aarch64\\inst.isle line 3934")
}

// Generated as internal constructor for term add_imm_to_addr.
pub fn constructor_add_imm_to_addr<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: u64,
) -> Reg {
    if arg1 == 0x0_u64 {
        // Rule at src\isa\aarch64\inst.isle line 3940.
        return arg0;
    }
    let v2 = C::imm12_from_u64(ctx, arg1);
    if let Some(v3) = v2 {
        let v5 = constructor_add_imm(ctx, I64, arg0, v3);
        // Rule at src\isa\aarch64\inst.isle line 3941.
        return v5;
    }
    let v7 = constructor_imm(ctx, I64, &ImmExtend::Zero, arg1);
    let v8 = constructor_add(ctx, I64, arg0, v7);
    // Rule at src\isa\aarch64\inst.isle line 3942.
    return v8;
}

// Generated as internal constructor for term constant_f16.
pub fn constructor_constant_f16<C: Context>(
    ctx: &mut C,
    arg0: u16,
) -> Reg {
    let v1 = C::use_fp16(ctx);
    if v1 == false {
        let v2 = C::u16_as_u32(ctx, arg0);
        let v3 = constructor_constant_f32(ctx, v2);
        // Rule at src\isa\aarch64\inst.isle line 3950.
        return v3;
    }
    if arg0 == 0x0_u16 {
        let v5 = C::asimd_mov_mod_imm_zero(ctx, &ScalarSize::Size32);
        let v6 = false;
        let v8 = constructor_vec_dup_imm(ctx, v5, v6, &VectorSize::Size32x2);
        // Rule at src\isa\aarch64\inst.isle line 3953.
        return v8;
    }
    let v9 = C::u16_as_u64(ctx, arg0);
    let v11 = C::asimd_fp_mod_imm_from_u64(ctx, v9, &ScalarSize::Size16);
    if let Some(v12) = v11 {
        let v13 = constructor_fpu_move_fp_imm(ctx, v12, &ScalarSize::Size16);
        // Rule at src\isa\aarch64\inst.isle line 3957.
        return v13;
    }
    let v16 = constructor_imm(ctx, I16, &ImmExtend::Zero, v9);
    let v17 = constructor_mov_to_fpu(ctx, v16, &ScalarSize::Size16);
    // Rule at src\isa\aarch64\inst.isle line 3960.
    return v17;
}

// Generated as internal constructor for term constant_f32.
pub fn constructor_constant_f32<C: Context>(
    ctx: &mut C,
    arg0: u32,
) -> Reg {
    if arg0 == 0x0_u32 {
        let v2 = C::asimd_mov_mod_imm_zero(ctx, &ScalarSize::Size32);
        let v3 = false;
        let v5 = constructor_vec_dup_imm(ctx, v2, v3, &VectorSize::Size32x2);
        // Rule at src\isa\aarch64\inst.isle line 3969.
        return v5;
    }
    let v6 = C::u32_as_u64(ctx, arg0);
    let v7 = C::asimd_fp_mod_imm_from_u64(ctx, v6, &ScalarSize::Size32);
    if let Some(v8) = v7 {
        let v9 = constructor_fpu_move_fp_imm(ctx, v8, &ScalarSize::Size32);
        // Rule at src\isa\aarch64\inst.isle line 3973.
        return v9;
    }
    let v10 = C::u32_as_u16(ctx, arg0);
    if let Some(v11) = v10 {
        let v12 = C::use_fp16(ctx);
        if v12 == true {
            let v13 = constructor_constant_f16(ctx, v11);
            // Rule at src\isa\aarch64\inst.isle line 3976.
            return v13;
        }
    }
    let v16 = constructor_imm(ctx, I32, &ImmExtend::Zero, v6);
    let v17 = constructor_mov_to_fpu(ctx, v16, &ScalarSize::Size32);
    // Rule at src\isa\aarch64\inst.isle line 3979.
    return v17;
}

// Generated as internal constructor for term constant_f64.
pub fn constructor_constant_f64<C: Context>(
    ctx: &mut C,
    arg0: u64,
) -> Reg {
    if arg0 == 0x0_u64 {
        let v2 = C::asimd_mov_mod_imm_zero(ctx, &ScalarSize::Size32);
        let v3 = false;
        let v5 = constructor_vec_dup_imm(ctx, v2, v3, &VectorSize::Size32x2);
        // Rule at src\isa\aarch64\inst.isle line 3990.
        return v5;
    }
    let v7 = C::asimd_fp_mod_imm_from_u64(ctx, arg0, &ScalarSize::Size64);
    if let Some(v8) = v7 {
        let v9 = constructor_fpu_move_fp_imm(ctx, v8, &ScalarSize::Size64);
        // Rule at src\isa\aarch64\inst.isle line 3994.
        return v9;
    }
    let v10 = C::u64_as_u32(ctx, arg0);
    if let Some(v11) = v10 {
        let v12 = constructor_constant_f32(ctx, v11);
        // Rule at src\isa\aarch64\inst.isle line 3997.
        return v12;
    }
    let v13 = C::u64_low32_bits_unset(ctx, arg0);
    if let Some(v14) = v13 {
        let v17 = constructor_imm(ctx, I64, &ImmExtend::Zero, v14);
        let v18 = constructor_mov_to_fpu(ctx, v17, &ScalarSize::Size64);
        // Rule at src\isa\aarch64\inst.isle line 3999.
        return v18;
    }
    let v19 = C::emit_u64_le_const(ctx, arg0);
    let v20 = AMode::Const {
        addr: v19,
    };
    let v21 = C::mem_flags_trusted(ctx);
    let v22 = constructor_fpu_load64(ctx, &v20, v21);
    // Rule at src\isa\aarch64\inst.isle line 4001.
    return v22;
}

// Generated as internal constructor for term constant_f128.
pub fn constructor_constant_f128<C: Context>(
    ctx: &mut C,
    arg0: u128,
) -> Reg {
    if arg0 == 0x0_u128 {
        let v2 = C::asimd_mov_mod_imm_zero(ctx, &ScalarSize::Size8);
        let v3 = false;
        let v5 = constructor_vec_dup_imm(ctx, v2, v3, &VectorSize::Size8x16);
        // Rule at src\isa\aarch64\inst.isle line 4010.
        return v5;
    }
    let v6 = C::u128_as_u64(ctx, arg0);
    if let Some(v7) = v6 {
        let v8 = constructor_constant_f64(ctx, v7);
        // Rule at src\isa\aarch64\inst.isle line 4016.
        return v8;
    }
    let v9 = C::u128_replicated_u64(ctx, arg0);
    if let Some(v10) = v9 {
        let v12 = constructor_splat_const(ctx, v10, &VectorSize::Size64x2);
        // Rule at src\isa\aarch64\inst.isle line 4020.
        return v12;
    }
    let v13 = C::emit_u128_le_const(ctx, arg0);
    let v14 = AMode::Const {
        addr: v13,
    };
    let v15 = C::mem_flags_trusted(ctx);
    let v16 = constructor_fpu_load128(ctx, &v14, v15);
    // Rule at src\isa\aarch64\inst.isle line 4024.
    return v16;
}

// Generated as internal constructor for term splat_const.
pub fn constructor_splat_const<C: Context>(
    ctx: &mut C,
    arg0: u64,
    arg1: &VectorSize,
) -> Reg {
    match arg1 {
        &VectorSize::Size16x4 => {
            let v12 = C::u16_replicated_u8(ctx, arg0);
            if let Some(v13) = v12 {
                let v14 = C::u8_as_u64(ctx, v13);
                let v18 = constructor_splat_const(ctx, v14, &VectorSize::Size8x8);
                // Rule at src\isa\aarch64\inst.isle line 4043.
                return v18;
            }
        }
        &VectorSize::Size16x8 => {
            let v12 = C::u16_replicated_u8(ctx, arg0);
            if let Some(v13) = v12 {
                let v14 = C::u8_as_u64(ctx, v13);
                let v16 = constructor_splat_const(ctx, v14, &VectorSize::Size8x16);
                // Rule at src\isa\aarch64\inst.isle line 4041.
                return v16;
            }
        }
        &VectorSize::Size32x2 => {
            let v6 = C::u32_replicated_u16(ctx, arg0);
            if let Some(v7) = v6 {
                let v11 = constructor_splat_const(ctx, v7, &VectorSize::Size16x4);
                // Rule at src\isa\aarch64\inst.isle line 4039.
                return v11;
            }
        }
        &VectorSize::Size32x4 => {
            let v6 = C::u32_replicated_u16(ctx, arg0);
            if let Some(v7) = v6 {
                let v9 = constructor_splat_const(ctx, v7, &VectorSize::Size16x8);
                // Rule at src\isa\aarch64\inst.isle line 4037.
                return v9;
            }
        }
        &VectorSize::Size64x2 => {
            let v1 = C::u64_replicated_u32(ctx, arg0);
            if let Some(v2) = v1 {
                let v5 = constructor_splat_const(ctx, v2, &VectorSize::Size32x4);
                // Rule at src\isa\aarch64\inst.isle line 4035.
                return v5;
            }
        }
        _ => {}
    }
    let v19 = &constructor_vector_lane_size(ctx, arg1);
    let v20 = C::asimd_mov_mod_imm_from_u64(ctx, arg0, v19);
    if let Some(v21) = v20 {
        let v22 = false;
        let v23 = constructor_vec_dup_imm(ctx, v21, v22, arg1);
        // Rule at src\isa\aarch64\inst.isle line 4048.
        return v23;
    }
    let v24 = C::u64_not(ctx, arg0);
    let v25 = C::asimd_mov_mod_imm_from_u64(ctx, v24, v19);
    if let Some(v26) = v25 {
        let v27 = true;
        let v28 = constructor_vec_dup_imm(ctx, v26, v27, arg1);
        // Rule at src\isa\aarch64\inst.isle line 4051.
        return v28;
    }
    match arg1 {
        &VectorSize::Size32x2 => {
            let v30 = C::u64_shl(ctx, arg0, 0x20_u64);
            let v31 = C::u64_or(ctx, arg0, v30);
            let v33 = C::asimd_mov_mod_imm_from_u64(ctx, v31, &ScalarSize::Size64);
            if let Some(v34) = v33 {
                let v22 = false;
                let v36 = constructor_vec_dup_imm(ctx, v34, v22, &VectorSize::Size64x2);
                let v37 = constructor_fpu_extend(ctx, v36, &ScalarSize::Size64);
                // Rule at src\isa\aarch64\inst.isle line 4060.
                return v37;
            }
        }
        &VectorSize::Size32x4 => {
            let v30 = C::u64_shl(ctx, arg0, 0x20_u64);
            let v31 = C::u64_or(ctx, arg0, v30);
            let v33 = C::asimd_mov_mod_imm_from_u64(ctx, v31, &ScalarSize::Size64);
            if let Some(v34) = v33 {
                let v22 = false;
                let v36 = constructor_vec_dup_imm(ctx, v34, v22, &VectorSize::Size64x2);
                // Rule at src\isa\aarch64\inst.isle line 4057.
                return v36;
            }
        }
        _ => {}
    }
    let v38 = constructor_vec_dup_fp_imm_supports_lane_size(ctx, v19);
    if v38 == true {
        let v39 = C::asimd_fp_mod_imm_from_u64(ctx, arg0, v19);
        if let Some(v40) = v39 {
            let v41 = constructor_vec_dup_fp_imm(ctx, v40, arg1);
            // Rule at src\isa\aarch64\inst.isle line 4064.
            return v41;
        }
    }
    let v44 = constructor_imm(ctx, I64, &ImmExtend::Zero, arg0);
    let v45 = constructor_vec_dup(ctx, v44, arg1);
    // Rule at src\isa\aarch64\inst.isle line 4076.
    return v45;
}

// Generated as internal constructor for term vec_dup_fp_imm_supports_lane_size.
pub fn constructor_vec_dup_fp_imm_supports_lane_size<C: Context>(
    ctx: &mut C,
    arg0: &ScalarSize,
) -> bool {
    match arg0 {
        &ScalarSize::Size32 => {
            let v1 = true;
            // Rule at src\isa\aarch64\inst.isle line 4070.
            return v1;
        }
        &ScalarSize::Size64 => {
            let v1 = true;
            // Rule at src\isa\aarch64\inst.isle line 4071.
            return v1;
        }
        _ => {}
    }
    let v2 = false;
    // Rule at src\isa\aarch64\inst.isle line 4072.
    return v2;
}

// Generated as internal constructor for term float_cmp_zero.
pub fn constructor_float_cmp_zero<C: Context>(
    ctx: &mut C,
    arg0: &FloatCC,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v3 = &C::float_cc_cmp_zero_to_vec_misc_op(ctx, arg0);
    let v4 = constructor_vec_misc(ctx, v3, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 4112.
    return v4;
}

// Generated as internal constructor for term float_cmp_zero_swap.
pub fn constructor_float_cmp_zero_swap<C: Context>(
    ctx: &mut C,
    arg0: &FloatCC,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v3 = &C::float_cc_cmp_zero_to_vec_misc_op_swap(ctx, arg0);
    let v4 = constructor_vec_misc(ctx, v3, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 4117.
    return v4;
}

// Generated as internal constructor for term fcmeq0.
pub fn constructor_fcmeq0<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &VectorSize,
) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Fcmeq0, arg0, arg1);
    // Rule at src\isa\aarch64\inst.isle line 4122.
    return v3;
}

// Generated as internal constructor for term int_cmp_zero.
pub fn constructor_int_cmp_zero<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v3 = &C::int_cc_cmp_zero_to_vec_misc_op(ctx, arg0);
    let v4 = constructor_vec_misc(ctx, v3, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 4142.
    return v4;
}

// Generated as internal constructor for term int_cmp_zero_swap.
pub fn constructor_int_cmp_zero_swap<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v3 = &C::int_cc_cmp_zero_to_vec_misc_op_swap(ctx, arg0);
    let v4 = constructor_vec_misc(ctx, v3, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 4147.
    return v4;
}

// Generated as internal constructor for term cmeq0.
pub fn constructor_cmeq0<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &VectorSize,
) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Cmeq0, arg0, arg1);
    // Rule at src\isa\aarch64\inst.isle line 4152.
    return v3;
}

// Generated as internal constructor for term lse_atomic_rmw.
pub fn constructor_lse_atomic_rmw<C: Context>(
    ctx: &mut C,
    arg0: &AtomicRMWOp,
    arg1: Value,
    arg2: Reg,
    arg3: Type,
    arg4: MemFlags,
) -> Reg {
    let v5 = C::put_in_reg(ctx, arg1);
    let v6 = C::temp_writable_reg(ctx, arg3);
    let v7 = MInst::AtomicRMW {
        op: arg0.clone(),
        rs: arg2,
        rt: v6,
        rn: v5,
        ty: arg3,
        flags: arg4,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src\isa\aarch64\inst.isle line 4157.
    return v9;
}

// Generated as internal constructor for term lse_atomic_cas.
pub fn constructor_lse_atomic_cas<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: Reg,
    arg3: Type,
    arg4: MemFlags,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, arg3);
    let v6 = MInst::AtomicCAS {
        rd: v5,
        rs: arg1,
        rt: arg2,
        rn: arg0,
        ty: arg3,
        flags: arg4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src\isa\aarch64\inst.isle line 4167.
    return v8;
}

// Generated as internal constructor for term atomic_rmw_loop.
pub fn constructor_atomic_rmw_loop<C: Context>(
    ctx: &mut C,
    arg0: &AtomicRMWLoopOp,
    arg1: Reg,
    arg2: Reg,
    arg3: Type,
    arg4: MemFlags,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I64);
    let v7 = C::temp_writable_reg(ctx, I64);
    let v8 = C::temp_writable_reg(ctx, I64);
    let v9 = MInst::AtomicRMWLoop {
        ty: arg3,
        op: arg0.clone(),
        flags: arg4,
        addr: arg1,
        operand: arg2,
        oldval: v6,
        scratch1: v7,
        scratch2: v8,
    };
    let v10 = C::emit(ctx, &v9);
    let v11 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src\isa\aarch64\inst.isle line 4181.
    return v11;
}

// Generated as internal constructor for term atomic_cas_loop.
pub fn constructor_atomic_cas_loop<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: Reg,
    arg3: Type,
    arg4: MemFlags,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I64);
    let v7 = C::temp_writable_reg(ctx, I64);
    let v8 = MInst::AtomicCASLoop {
        ty: arg3,
        flags: arg4,
        addr: arg0,
        expected: arg1,
        replacement: arg2,
        oldval: v6,
        scratch: v7,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src\isa\aarch64\inst.isle line 4195.
    return v10;
}

// Generated as internal constructor for term mov_from_preg.
pub fn constructor_mov_from_preg<C: Context>(
    ctx: &mut C,
    arg0: PReg,
) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::MovFromPReg {
        rd: v2,
        rm: arg0,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src\isa\aarch64\inst.isle line 4203.
    return v5;
}

// Generated as internal constructor for term mov_to_preg.
pub fn constructor_mov_to_preg<C: Context>(
    ctx: &mut C,
    arg0: PReg,
    arg1: Reg,
) -> SideEffectNoResult {
    let v2 = MInst::MovToPReg {
        rd: arg0,
        rm: arg1,
    };
    let v3 = SideEffectNoResult::Inst {
        inst: v2,
    };
    // Rule at src\isa\aarch64\inst.isle line 4209.
    return v3;
}

// Generated as internal constructor for term aarch64_sp.
pub fn constructor_aarch64_sp<C: Context>(
    ctx: &mut C,
) -> Reg {
    let v0 = C::preg_sp(ctx);
    let v1 = constructor_mov_from_preg(ctx, v0);
    // Rule at src\isa\aarch64\inst.isle line 4225.
    return v1;
}

// Generated as internal constructor for term aarch64_fp.
pub fn constructor_aarch64_fp<C: Context>(
    ctx: &mut C,
) -> Reg {
    let v0 = C::preg_fp(ctx);
    let v1 = constructor_mov_from_preg(ctx, v0);
    // Rule at src\isa\aarch64\inst.isle line 4229.
    return v1;
}

// Generated as internal constructor for term aarch64_link.
pub fn constructor_aarch64_link<C: Context>(
    ctx: &mut C,
) -> Reg {
    let v0 = C::preserve_frame_pointers(ctx);
    if let Some(v1) = v0 {
        let v2 = C::sign_return_address_disabled(ctx);
        if let Some(v3) = v2 {
            let v5 = C::temp_writable_reg(ctx, I64);
            let v7 = AMode::FPOffset {
                off: 8_i64,
            };
            let v8 = C::mem_flags_trusted(ctx);
            let v9 = MInst::ULoad64 {
                rd: v5,
                mem: v7,
                flags: v8,
            };
            let v10 = C::emit(ctx, &v9);
            let v11 = C::writable_reg_to_reg(ctx, v5);
            // Rule at src\isa\aarch64\inst.isle line 4233.
            return v11;
        }
        let v12 = C::writable_link_reg(ctx);
        let v7 = AMode::FPOffset {
            off: 8_i64,
        };
        let v8 = C::mem_flags_trusted(ctx);
        let v13 = MInst::ULoad64 {
            rd: v12,
            mem: v7,
            flags: v8,
        };
        let v14 = C::emit(ctx, &v13);
        let v16 = C::emit(ctx, &MInst::Xpaclri);
        let v17 = C::preg_link(ctx);
        let v18 = constructor_mov_from_preg(ctx, v17);
        // Rule at src\isa\aarch64\inst.isle line 4249.
        return v18;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "aarch64_link", "src\\isa\\aarch64\\inst.isle line 4232")
}

// Generated as internal constructor for term max_shift.
pub fn constructor_max_shift<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> u8 {
    match arg0 {
        F32 => {
            // Rule at src\isa\aarch64\inst.isle line 4265.
            return 0x1f_u8;
        }
        F64 => {
            // Rule at src\isa\aarch64\inst.isle line 4264.
            return 0x3f_u8;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "max_shift", "src\\isa\\aarch64\\inst.isle line 4263")
}

// Generated as internal constructor for term fcopy_sign.
pub fn constructor_fcopy_sign<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: Type,
) -> Reg {
    let v3 = C::ty_scalar_float(ctx, arg2);
    if let Some(v4) = v3 {
        let v6 = C::temp_writable_reg(ctx, F64);
        let v8 = constructor_max_shift(ctx, v4);
        let v7 = C::ty_bits(ctx, v4);
        let v9 = &C::fpu_op_ri_ushr(ctx, v7, v8);
        let v10 = constructor_fpu_rri(ctx, v9, arg1);
        let v11 = constructor_max_shift(ctx, v4);
        let v12 = &C::fpu_op_ri_sli(ctx, v7, v11);
        let v13 = MInst::FpuRRIMod {
            fpu_op: v12.clone(),
            rd: v6,
            ri: arg0,
            rn: v10,
        };
        let v14 = C::emit(ctx, &v13);
        let v15 = C::writable_reg_to_reg(ctx, v6);
        // Rule at src\isa\aarch64\inst.isle line 4270.
        return v15;
    }
    let v16 = C::multi_lane(ctx, arg2);
    if let Some(v17) = v16 {
        let v21 = C::temp_writable_reg(ctx, I8X16);
        let v22 = C::lane_type(ctx, arg2);
        let v23 = constructor_max_shift(ctx, v22);
        let v24 = &constructor_vector_size(ctx, arg2);
        let v25 = constructor_ushr_vec_imm(ctx, arg1, v23, v24);
        let v27 = &constructor_vector_size(ctx, arg2);
        let v28 = constructor_max_shift(ctx, v22);
        let v29 = MInst::VecShiftImmMod {
            op: VecShiftImmModOp::Sli,
            rd: v21,
            ri: arg0,
            rn: v25,
            size: v27.clone(),
            imm: v28,
        };
        let v30 = C::emit(ctx, &v29);
        let v31 = C::writable_reg_to_reg(ctx, v21);
        // Rule at src\isa\aarch64\inst.isle line 4275.
        return v31;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "fcopy_sign", "src\\isa\\aarch64\\inst.isle line 4269")
}

// Generated as internal constructor for term fpu_to_int_nan_check.
pub fn constructor_fpu_to_int_nan_check<C: Context>(
    ctx: &mut C,
    arg0: &ScalarSize,
    arg1: Reg,
) -> Reg {
    let v2 = &constructor_fpu_cmp(ctx, arg0, arg1, arg1);
    let v4 = C::cond_br_cond(ctx, &Cond::Vs);
    let v5 = &C::trap_code_bad_conversion_to_integer(ctx);
    let v6 = MInst::TrapIf {
        kind: v4,
        trap_code: v5.clone(),
    };
    let v7 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v6,
        result: arg1,
    };
    let v8 = constructor_with_flags(ctx, v2, &v7);
    let v10 = C::value_regs_get(ctx, v8, 0x0_usize);
    // Rule at src\isa\aarch64\inst.isle line 4284.
    return v10;
}

// Generated as internal constructor for term fpu_to_int_underflow_check.
pub fn constructor_fpu_to_int_underflow_check<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: Type,
    arg2: Type,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    match arg0 {
        false => {
            let v23 = &constructor_scalar_size(ctx, arg1);
            let v24 = &constructor_fpu_cmp(ctx, v23, arg3, arg4);
            let v31 = C::cond_br_cond(ctx, &Cond::Le);
            let v11 = &C::trap_code_integer_overflow(ctx);
            let v32 = MInst::TrapIf {
                kind: v31,
                trap_code: v11.clone(),
            };
            let v33 = ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: v32,
                result: arg3,
            };
            let v34 = constructor_with_flags(ctx, v24, &v33);
            let v35 = C::value_regs_get(ctx, v34, 0x0_usize);
            // Rule at src\isa\aarch64\inst.isle line 4321.
            return v35;
        }
        true => {
            match arg1 {
                F32 => {
                    let v3 = C::fits_in_16(ctx, arg2);
                    if let Some(v4) = v3 {
                        let v8 = &constructor_fpu_cmp(ctx, &ScalarSize::Size32, arg3, arg4);
                        let v10 = C::cond_br_cond(ctx, &Cond::Le);
                        let v11 = &C::trap_code_integer_overflow(ctx);
                        let v12 = MInst::TrapIf {
                            kind: v10,
                            trap_code: v11.clone(),
                        };
                        let v13 = ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: v12,
                            result: arg3,
                        };
                        let v14 = constructor_with_flags(ctx, v8, &v13);
                        let v16 = C::value_regs_get(ctx, v14, 0x0_usize);
                        // Rule at src\isa\aarch64\inst.isle line 4297.
                        return v16;
                    }
                }
                F64 => {
                    let v17 = C::fits_in_32(ctx, arg2);
                    if let Some(v18) = v17 {
                        let v20 = &constructor_fpu_cmp(ctx, &ScalarSize::Size64, arg3, arg4);
                        let v10 = C::cond_br_cond(ctx, &Cond::Le);
                        let v11 = &C::trap_code_integer_overflow(ctx);
                        let v12 = MInst::TrapIf {
                            kind: v10,
                            trap_code: v11.clone(),
                        };
                        let v13 = ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: v12,
                            result: arg3,
                        };
                        let v21 = constructor_with_flags(ctx, v20, &v13);
                        let v22 = C::value_regs_get(ctx, v21, 0x0_usize);
                        // Rule at src\isa\aarch64\inst.isle line 4305.
                        return v22;
                    }
                }
                _ => {}
            }
            let v23 = &constructor_scalar_size(ctx, arg1);
            let v24 = &constructor_fpu_cmp(ctx, v23, arg3, arg4);
            let v26 = C::cond_br_cond(ctx, &Cond::Lt);
            let v11 = &C::trap_code_integer_overflow(ctx);
            let v27 = MInst::TrapIf {
                kind: v26,
                trap_code: v11.clone(),
            };
            let v28 = ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: v27,
                result: arg3,
            };
            let v29 = constructor_with_flags(ctx, v24, &v28);
            let v30 = C::value_regs_get(ctx, v29, 0x0_usize);
            // Rule at src\isa\aarch64\inst.isle line 4313.
            return v30;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "fpu_to_int_underflow_check", "src\\isa\\aarch64\\inst.isle line 4296")
}

// Generated as internal constructor for term fpu_to_int_overflow_check.
pub fn constructor_fpu_to_int_overflow_check<C: Context>(
    ctx: &mut C,
    arg0: &ScalarSize,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_fpu_cmp(ctx, arg0, arg1, arg2);
    let v5 = C::cond_br_cond(ctx, &Cond::Ge);
    let v6 = &C::trap_code_integer_overflow(ctx);
    let v7 = MInst::TrapIf {
        kind: v5,
        trap_code: v6.clone(),
    };
    let v8 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v7,
        result: arg1,
    };
    let v9 = constructor_with_flags(ctx, v3, &v8);
    let v11 = C::value_regs_get(ctx, v9, 0x0_usize);
    // Rule at src\isa\aarch64\inst.isle line 4331.
    return v11;
}

// Generated as internal constructor for term fpu_to_int_cvt.
pub fn constructor_fpu_to_int_cvt<C: Context>(
    ctx: &mut C,
    arg0: &FpuToIntOp,
    arg1: Reg,
    arg2: bool,
    arg3: Type,
    arg4: Type,
) -> Reg {
    let v5 = &constructor_scalar_size(ctx, arg3);
    let v8 = constructor_fpu_to_int_nan_check(ctx, v5, arg1);
    let v6 = C::ty_bits(ctx, arg3);
    let v7 = C::ty_bits(ctx, arg4);
    let v9 = C::min_fp_value(ctx, arg2, v6, v7);
    let v10 = constructor_fpu_to_int_underflow_check(ctx, arg2, arg3, arg4, v8, v9);
    let v11 = C::max_fp_value(ctx, arg2, v6, v7);
    let v12 = constructor_fpu_to_int_overflow_check(ctx, v5, v10, v11);
    let v13 = constructor_fpu_to_int(ctx, arg0, v12);
    // Rule at src\isa\aarch64\inst.isle line 4347.
    return v13;
}

// Generated as internal constructor for term fpu_to_int_cvt_sat.
pub fn constructor_fpu_to_int_cvt_sat<C: Context>(
    ctx: &mut C,
    arg0: &FpuToIntOp,
    arg1: Reg,
    arg2: bool,
    arg3: Type,
) -> Reg {
    match arg3 {
        I32 => {
            let v4 = constructor_fpu_to_int(ctx, arg0, arg1);
            // Rule at src\isa\aarch64\inst.isle line 4366.
            return v4;
        }
        I64 => {
            let v4 = constructor_fpu_to_int(ctx, arg0, arg1);
            // Rule at src\isa\aarch64\inst.isle line 4364.
            return v4;
        }
        _ => {}
    }
    match arg2 {
        false => {
            let v5 = C::fits_in_16(ctx, arg3);
            if let Some(v6) = v5 {
                let v4 = constructor_fpu_to_int(ctx, arg0, arg1);
                let v8 = C::ty_mask(ctx, v6);
                let v9 = constructor_imm(ctx, v6, &ImmExtend::Zero, v8);
                let v11 = &constructor_cmp(ctx, &OperandSize::Size32, v4, v9);
                let v13 = &constructor_csel(ctx, &Cond::Hi, v9, v4);
                let v14 = constructor_with_flags_reg(ctx, v11, v13);
                // Rule at src\isa\aarch64\inst.isle line 4368.
                return v14;
            }
        }
        true => {
            let v5 = C::fits_in_16(ctx, arg3);
            if let Some(v6) = v5 {
                let v4 = constructor_fpu_to_int(ctx, arg0, arg1);
                let v15 = constructor_signed_max(ctx, v6);
                let v16 = constructor_signed_min(ctx, v6);
                let v17 = &constructor_operand_size(ctx, v6);
                let v18 = &constructor_cmp(ctx, v17, v4, v15);
                let v20 = &constructor_csel(ctx, &Cond::Gt, v15, v4);
                let v21 = constructor_with_flags_reg(ctx, v18, v20);
                let v22 = &constructor_operand_size(ctx, v6);
                let v23 = &constructor_cmp(ctx, v22, v21, v16);
                let v25 = &constructor_csel(ctx, &Cond::Lt, v16, v21);
                let v26 = constructor_with_flags_reg(ctx, v23, v25);
                // Rule at src\isa\aarch64\inst.isle line 4374.
                return v26;
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "fpu_to_int_cvt_sat", "src\\isa\\aarch64\\inst.isle line 4363")
}

// Generated as internal constructor for term signed_min.
pub fn constructor_signed_min<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> Reg {
    match arg0 {
        I8 => {
            let v4 = constructor_imm(ctx, I8, &ImmExtend::Sign, 0x80_u64);
            // Rule at src\isa\aarch64\inst.isle line 4387.
            return v4;
        }
        I16 => {
            let v7 = constructor_imm(ctx, I16, &ImmExtend::Sign, 0x8000_u64);
            // Rule at src\isa\aarch64\inst.isle line 4388.
            return v7;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "signed_min", "src\\isa\\aarch64\\inst.isle line 4386")
}

// Generated as internal constructor for term signed_max.
pub fn constructor_signed_max<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> Reg {
    match arg0 {
        I8 => {
            let v4 = constructor_imm(ctx, I8, &ImmExtend::Sign, 0x7f_u64);
            // Rule at src\isa\aarch64\inst.isle line 4391.
            return v4;
        }
        I16 => {
            let v7 = constructor_imm(ctx, I16, &ImmExtend::Sign, 0x7fff_u64);
            // Rule at src\isa\aarch64\inst.isle line 4392.
            return v7;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "signed_max", "src\\isa\\aarch64\\inst.isle line 4390")
}

// Generated as internal constructor for term fpu_to_int.
pub fn constructor_fpu_to_int<C: Context>(
    ctx: &mut C,
    arg0: &FpuToIntOp,
    arg1: Reg,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::FpuToInt {
        op: arg0.clone(),
        rd: v3,
        rn: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 4395.
    return v6;
}

// Generated as internal constructor for term int_to_fpu.
pub fn constructor_int_to_fpu<C: Context>(
    ctx: &mut C,
    arg0: &IntToFpuOp,
    arg1: Reg,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::IntToFpu {
        op: arg0.clone(),
        rd: v3,
        rn: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 4403.
    return v6;
}

// Generated as internal constructor for term write_pinned_reg.
pub fn constructor_write_pinned_reg<C: Context>(
    ctx: &mut C,
    arg0: Reg,
) -> SideEffectNoResult {
    let v1 = C::preg_pinned(ctx);
    let v2 = &constructor_mov_to_preg(ctx, v1, arg0);
    // Rule at src\isa\aarch64\inst.isle line 4425.
    return v2.clone();
}

// Generated as internal constructor for term compute_stack_addr.
pub fn constructor_compute_stack_addr<C: Context>(
    ctx: &mut C,
    arg0: StackSlot,
    arg1: Offset32,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = &C::abi_stackslot_addr(ctx, v3, arg0, arg1);
    let v5 = C::emit(ctx, v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 4431.
    return v6;
}

// Generated as internal constructor for term vec_cmp_vc.
pub fn constructor_vec_cmp_vc<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Fcmeq, arg0, arg0, arg2);
    let v5 = constructor_vec_rrr(ctx, &VecALUOp::Fcmeq, arg1, arg1, arg2);
    let v7 = constructor_vec_rrr(ctx, &VecALUOp::And, v4, v5, arg2);
    // Rule at src\isa\aarch64\inst.isle line 4439.
    return v7;
}

// Generated as internal constructor for term vec_cmp.
pub fn constructor_vec_cmp<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: Type,
    arg3: &Cond,
) -> Reg {
    match arg3 {
        &Cond::Eq => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v23 = constructor_vec_rrr(ctx, &VecALUOp::Cmeq, arg0, arg1, v6);
                // Rule at src\isa\aarch64\inst.isle line 4483.
                return v23;
            }
            let v4 = C::ty_vector_float(ctx, arg2);
            if let Some(v5) = v4 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v12 = constructor_vec_rrr(ctx, &VecALUOp::Fcmeq, arg0, arg1, v6);
                // Rule at src\isa\aarch64\inst.isle line 4461.
                return v12;
            }
        }
        &Cond::Ne => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v23 = constructor_vec_rrr(ctx, &VecALUOp::Cmeq, arg0, arg1, v6);
                let v9 = &constructor_vector_size(ctx, arg2);
                let v24 = constructor_vec_misc(ctx, &VecMisc2::Not, v23, v9);
                // Rule at src\isa\aarch64\inst.isle line 4486.
                return v24;
            }
            let v4 = C::ty_vector_float(ctx, arg2);
            if let Some(v5) = v4 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v12 = constructor_vec_rrr(ctx, &VecALUOp::Fcmeq, arg0, arg1, v6);
                let v9 = &constructor_vector_size(ctx, arg2);
                let v13 = constructor_vec_misc(ctx, &VecMisc2::Not, v12, v9);
                // Rule at src\isa\aarch64\inst.isle line 4464.
                return v13;
            }
        }
        &Cond::Hs => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v30 = constructor_vec_rrr(ctx, &VecALUOp::Cmhs, arg0, arg1, v6);
                // Rule at src\isa\aarch64\inst.isle line 4496.
                return v30;
            }
        }
        &Cond::Lo => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v36 = constructor_vec_rrr(ctx, &VecALUOp::Cmhi, arg1, arg0, v6);
                // Rule at src\isa\aarch64\inst.isle line 4512.
                return v36;
            }
        }
        &Cond::Mi => {
            let v4 = C::ty_vector_float(ctx, arg2);
            if let Some(v5) = v4 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v18 = constructor_vec_rrr(ctx, &VecALUOp::Fcmgt, arg1, arg0, v6);
                // Rule at src\isa\aarch64\inst.isle line 4475.
                return v18;
            }
        }
        &Cond::Vs => {
            let v4 = C::ty_vector_float(ctx, arg2);
            if let Some(v5) = v4 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v7 = constructor_vec_cmp_vc(ctx, arg0, arg1, v6);
                let v9 = &constructor_vector_size(ctx, arg2);
                let v10 = constructor_vec_misc(ctx, &VecMisc2::Not, v7, v9);
                // Rule at src\isa\aarch64\inst.isle line 4451.
                return v10;
            }
        }
        &Cond::Vc => {
            let v4 = C::ty_vector_float(ctx, arg2);
            if let Some(v5) = v4 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v7 = constructor_vec_cmp_vc(ctx, arg0, arg1, v6);
                // Rule at src\isa\aarch64\inst.isle line 4448.
                return v7;
            }
        }
        &Cond::Hi => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v32 = constructor_vec_rrr(ctx, &VecALUOp::Cmhi, arg0, arg1, v6);
                // Rule at src\isa\aarch64\inst.isle line 4499.
                return v32;
            }
        }
        &Cond::Ls => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v35 = constructor_vec_rrr(ctx, &VecALUOp::Cmhs, arg1, arg0, v6);
                // Rule at src\isa\aarch64\inst.isle line 4509.
                return v35;
            }
            let v4 = C::ty_vector_float(ctx, arg2);
            if let Some(v5) = v4 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v19 = constructor_vec_rrr(ctx, &VecALUOp::Fcmge, arg1, arg0, v6);
                // Rule at src\isa\aarch64\inst.isle line 4478.
                return v19;
            }
        }
        &Cond::Ge => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v26 = constructor_vec_rrr(ctx, &VecALUOp::Cmge, arg0, arg1, v6);
                // Rule at src\isa\aarch64\inst.isle line 4490.
                return v26;
            }
            let v4 = C::ty_vector_float(ctx, arg2);
            if let Some(v5) = v4 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v15 = constructor_vec_rrr(ctx, &VecALUOp::Fcmge, arg0, arg1, v6);
                // Rule at src\isa\aarch64\inst.isle line 4468.
                return v15;
            }
        }
        &Cond::Lt => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v34 = constructor_vec_rrr(ctx, &VecALUOp::Cmgt, arg1, arg0, v6);
                // Rule at src\isa\aarch64\inst.isle line 4506.
                return v34;
            }
        }
        &Cond::Gt => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v28 = constructor_vec_rrr(ctx, &VecALUOp::Cmgt, arg0, arg1, v6);
                // Rule at src\isa\aarch64\inst.isle line 4493.
                return v28;
            }
            let v4 = C::ty_vector_float(ctx, arg2);
            if let Some(v5) = v4 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v17 = constructor_vec_rrr(ctx, &VecALUOp::Fcmgt, arg0, arg1, v6);
                // Rule at src\isa\aarch64\inst.isle line 4471.
                return v17;
            }
        }
        &Cond::Le => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v33 = constructor_vec_rrr(ctx, &VecALUOp::Cmge, arg1, arg0, v6);
                // Rule at src\isa\aarch64\inst.isle line 4503.
                return v33;
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_cmp", "src\\isa\\aarch64\\inst.isle line 4445")
}

// Generated as internal constructor for term vanytrue.
pub fn constructor_vanytrue<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Type,
) -> ProducesFlags {
    let v2 = C::ty_vec128(ctx, arg1);
    if let Some(v3) = v2 {
        let v6 = constructor_vec_rrr(ctx, &VecALUOp::Umaxp, arg0, arg0, &VectorSize::Size32x4);
        let v9 = constructor_mov_from_vec(ctx, v6, 0x0_u8, &ScalarSize::Size64);
        let v11 = C::u8_into_imm12(ctx, 0x0_u8);
        let v12 = &constructor_cmp_imm(ctx, &OperandSize::Size64, v9, v11);
        // Rule at src\isa\aarch64\inst.isle line 4524.
        return v12.clone();
    }
    let v13 = C::ty_vec64_ctor(ctx, arg1);
    if let Some(v14) = v13 {
        let v15 = constructor_mov_from_vec(ctx, arg0, 0x0_u8, &ScalarSize::Size64);
        let v16 = C::u8_into_imm12(ctx, 0x0_u8);
        let v17 = &constructor_cmp_imm(ctx, &OperandSize::Size64, v15, v16);
        // Rule at src\isa\aarch64\inst.isle line 4528.
        return v17.clone();
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vanytrue", "src\\isa\\aarch64\\inst.isle line 4523")
}

// Generated as internal constructor for term elf_tls_get_addr.
pub fn constructor_elf_tls_get_addr<C: Context>(
    ctx: &mut C,
    arg0: ExternalName,
) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = C::box_external_name(ctx, arg0);
    let v5 = MInst::ElfTlsGetAddr {
        symbol: v4,
        rd: v2,
        tmp: v3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src\isa\aarch64\inst.isle line 4537.
    return v7;
}

// Generated as internal constructor for term macho_tls_get_addr.
pub fn constructor_macho_tls_get_addr<C: Context>(
    ctx: &mut C,
    arg0: ExternalName,
) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::MachOTlsGetAddr {
        symbol: arg0,
        rd: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src\isa\aarch64\inst.isle line 4544.
    return v5;
}

// Generated as internal constructor for term flags_and_cc.
pub fn constructor_flags_and_cc<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &IntCC,
) -> FlagsAndCC {
    let v2 = FlagsAndCC::FlagsAndCC {
        flags: arg0.clone(),
        cc: arg1.clone(),
    };
    // Rule at src\isa\aarch64\inst.isle line 4570.
    return v2;
}

// Generated as internal constructor for term flags_and_cc_to_bool.
pub fn constructor_flags_and_cc_to_bool<C: Context>(
    ctx: &mut C,
    arg0: &FlagsAndCC,
) -> ValueRegs {
    if let &FlagsAndCC::FlagsAndCC {
        flags: ref v1,
        cc: ref v2,
    } = arg0 {
        let v3 = &C::cond_code(ctx, v2);
        let v4 = &constructor_materialize_bool_result(ctx, v3);
        let v5 = constructor_with_flags(ctx, v1, v4);
        // Rule at src\isa\aarch64\inst.isle line 4600.
        return v5;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "flags_and_cc_to_bool", "src\\isa\\aarch64\\inst.isle line 4599")
}

// Generated as internal constructor for term flags_and_cc_flags.
pub fn constructor_flags_and_cc_flags<C: Context>(
    ctx: &mut C,
    arg0: &FlagsAndCC,
) -> ProducesFlags {
    if let &FlagsAndCC::FlagsAndCC {
        flags: ref v1,
        cc: ref v2,
    } = arg0 {
        // Rule at src\isa\aarch64\inst.isle line 4605.
        return v1.clone();
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "flags_and_cc_flags", "src\\isa\\aarch64\\inst.isle line 4604")
}

// Generated as internal constructor for term flags_and_cc_cc.
pub fn constructor_flags_and_cc_cc<C: Context>(
    ctx: &mut C,
    arg0: &FlagsAndCC,
) -> IntCC {
    if let &FlagsAndCC::FlagsAndCC {
        flags: ref v1,
        cc: ref v2,
    } = arg0 {
        // Rule at src\isa\aarch64\inst.isle line 4609.
        return v2.clone();
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "flags_and_cc_cc", "src\\isa\\aarch64\\inst.isle line 4608")
}

// Generated as internal constructor for term lower_icmp.
pub fn constructor_lower_icmp<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Value,
    arg2: Value,
    arg3: Type,
) -> FlagsAndCC {
    let v4 = C::fits_in_16(ctx, arg3);
    if let Some(v5) = v4 {
        let v6 = &C::signed_cond_code(ctx, arg0);
        if let Some(v7) = v6 {
            let v8 = constructor_put_in_reg_sext32(ctx, arg1);
            let v9 = &constructor_operand_size(ctx, v5);
            let v10 = C::put_in_reg(ctx, arg2);
            let v12 = &constructor_lower_extend_op(ctx, v5, &ArgumentExtension::Sext);
            let v13 = &constructor_cmp_extend(ctx, v9, v8, v10, v12);
            let v14 = &constructor_flags_and_cc(ctx, v13, arg0);
            // Rule at src\isa\aarch64\inst.isle line 4768.
            return v14.clone();
        }
    }
    if arg3 == I128 {
        match arg0 {
            &IntCC::Equal => {
                let v37 = &constructor_lower_icmp_i128_eq_ne(ctx, arg1, arg2);
                let v39 = &constructor_flags_and_cc(ctx, v37, &IntCC::Equal);
                // Rule at src\isa\aarch64\inst.isle line 4835.
                return v39.clone();
            }
            &IntCC::NotEqual => {
                let v37 = &constructor_lower_icmp_i128_eq_ne(ctx, arg1, arg2);
                let v41 = &constructor_flags_and_cc(ctx, v37, &IntCC::NotEqual);
                // Rule at src\isa\aarch64\inst.isle line 4837.
                return v41.clone();
            }
            _ => {}
        }
    }
    if let Some(v5) = v4 {
        let v15 = C::def_inst(ctx, arg2);
        if let Some(v16) = v15 {
            let v17 = &C::inst_data_value(ctx, v16);
            if let &InstructionData::UnaryImm {
                opcode: ref v18,
                imm: v19,
            } = v17 {
                if let &Opcode::Iconst = v18 {
                    let v20 = C::u64_from_imm64(ctx, v19);
                    let v21 = C::imm12_from_u64(ctx, v20);
                    if let Some(v22) = v21 {
                        let v23 = constructor_put_in_reg_zext32(ctx, arg1);
                        let v9 = &constructor_operand_size(ctx, v5);
                        let v24 = &constructor_cmp_imm(ctx, v9, v23, v22);
                        let v25 = &constructor_flags_and_cc(ctx, v24, arg0);
                        // Rule at src\isa\aarch64\inst.isle line 4772.
                        return v25.clone();
                    }
                }
            }
        }
        let v23 = constructor_put_in_reg_zext32(ctx, arg1);
        let v9 = &constructor_operand_size(ctx, v5);
        let v10 = C::put_in_reg(ctx, arg2);
        let v27 = &constructor_lower_extend_op(ctx, v5, &ArgumentExtension::Uext);
        let v28 = &constructor_cmp_extend(ctx, v9, v23, v10, v27);
        let v29 = &constructor_flags_and_cc(ctx, v28, arg0);
        // Rule at src\isa\aarch64\inst.isle line 4775.
        return v29.clone();
    }
    let v30 = C::ty_int_ref_scalar_64(ctx, arg3);
    if let Some(v31) = v30 {
        let v15 = C::def_inst(ctx, arg2);
        if let Some(v16) = v15 {
            let v17 = &C::inst_data_value(ctx, v16);
            if let &InstructionData::UnaryImm {
                opcode: ref v18,
                imm: v19,
            } = v17 {
                if let &Opcode::Iconst = v18 {
                    let v20 = C::u64_from_imm64(ctx, v19);
                    let v32 = &constructor_lower_icmp_const(ctx, arg0, arg1, v20, arg3);
                    // Rule at src\isa\aarch64\inst.isle line 4778.
                    return v32.clone();
                }
            }
        }
        let v33 = &constructor_operand_size(ctx, arg3);
        let v34 = C::put_in_reg(ctx, arg1);
        let v10 = C::put_in_reg(ctx, arg2);
        let v35 = &constructor_cmp(ctx, v33, v34, v10);
        let v36 = &constructor_flags_and_cc(ctx, v35, arg0);
        // Rule at src\isa\aarch64\inst.isle line 4781.
        return v36.clone();
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "lower_icmp", "src\\isa\\aarch64\\inst.isle line 4654")
}

// Generated as internal constructor for term lower_icmp_into_reg.
pub fn constructor_lower_icmp_into_reg<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Value,
    arg2: Value,
    arg3: Type,
    arg4: Type,
) -> ValueRegs {
    let v4 = C::multi_lane(ctx, arg3);
    if let Some(v5) = v4 {
        let v9 = &C::cond_code(ctx, arg0);
        let v10 = C::put_in_reg(ctx, arg1);
        let v11 = C::put_in_reg(ctx, arg2);
        let v12 = constructor_vec_cmp(ctx, v10, v11, arg3, v9);
        let v13 = C::value_reg(ctx, v12);
        // Rule at src\isa\aarch64\inst.isle line 4740.
        return v13;
    }
    if arg3 == I128 {
        if arg4 == I8 {
            match arg0 {
                &IntCC::Equal => {
                    let v9 = &C::cond_code(ctx, arg0);
                    let v19 = &constructor_lower_icmp(ctx, arg0, arg1, arg2, I128);
                    let v20 = constructor_flags_and_cc_to_bool(ctx, v19);
                    // Rule at src\isa\aarch64\inst.isle line 4812.
                    return v20;
                }
                &IntCC::NotEqual => {
                    let v9 = &C::cond_code(ctx, arg0);
                    let v19 = &constructor_lower_icmp(ctx, arg0, arg1, arg2, I128);
                    let v20 = constructor_flags_and_cc_to_bool(ctx, v19);
                    // Rule at src\isa\aarch64\inst.isle line 4816.
                    return v20;
                }
                _ => {}
            }
            let v21 = &C::intcc_unsigned(ctx, arg0);
            let v22 = &C::cond_code(ctx, v21);
            let v23 = &C::cond_code(ctx, arg0);
            let v24 = C::put_in_regs(ctx, arg1);
            let v25 = C::put_in_regs(ctx, arg2);
            let v27 = C::value_regs_get(ctx, v24, 0x0_usize);
            let v29 = C::value_regs_get(ctx, v24, 0x1_usize);
            let v30 = C::value_regs_get(ctx, v25, 0x0_usize);
            let v31 = C::value_regs_get(ctx, v25, 0x1_usize);
            let v33 = &constructor_cmp(ctx, &OperandSize::Size64, v27, v30);
            let v34 = &constructor_materialize_bool_result(ctx, v22);
            let v35 = constructor_with_flags_reg(ctx, v33, v34);
            let v36 = &constructor_cmp(ctx, &OperandSize::Size64, v29, v31);
            let v37 = &constructor_lower_icmp_i128_consumer(ctx, v23, v35);
            let v38 = constructor_with_flags(ctx, v36, v37);
            // Rule at src\isa\aarch64\inst.isle line 4845.
            return v38;
        }
    }
    let v14 = C::ty_int_ref_scalar_64(ctx, arg3);
    if let Some(v15) = v14 {
        let v9 = &C::cond_code(ctx, arg0);
        let v16 = &constructor_lower_icmp(ctx, arg0, arg1, arg2, arg3);
        let v17 = constructor_flags_and_cc_to_bool(ctx, v16);
        // Rule at src\isa\aarch64\inst.isle line 4763.
        return v17;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "lower_icmp_into_reg", "src\\isa\\aarch64\\inst.isle line 4695")
}

// Generated as internal constructor for term lower_icmp_into_flags.
pub fn constructor_lower_icmp_into_flags<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Value,
    arg2: Value,
    arg3: Type,
) -> FlagsAndCC {
    match arg0 {
        &IntCC::SignedGreaterThan => {
            if arg3 == I128 {
                let v7 = constructor_lower_icmp_into_reg(ctx, arg0, arg1, arg2, I128, I8);
                let v9 = C::value_regs_get(ctx, v7, 0x0_usize);
                let v25 = C::zero_reg(ctx);
                let v26 = &constructor_cmp(ctx, &OperandSize::Size64, v9, v25);
                let v27 = &constructor_flags_and_cc(ctx, v26, arg0);
                // Rule at src\isa\aarch64\inst.isle line 4940.
                return v27.clone();
            }
        }
        &IntCC::SignedGreaterThanOrEqual => {
            if arg3 == I128 {
                let v7 = constructor_lower_icmp_into_reg(ctx, arg0, arg1, arg2, I128, I8);
                let v9 = C::value_regs_get(ctx, v7, 0x0_usize);
                let v13 = constructor_imm(ctx, I64, &ImmExtend::Sign, 0x1_u64);
                let v15 = &constructor_cmp(ctx, &OperandSize::Size64, v9, v13);
                let v16 = &constructor_flags_and_cc(ctx, v15, arg0);
                // Rule at src\isa\aarch64\inst.isle line 4919.
                return v16.clone();
            }
        }
        &IntCC::SignedLessThan => {
            if arg3 == I128 {
                let v7 = constructor_lower_icmp_into_reg(ctx, arg0, arg1, arg2, I128, I8);
                let v9 = C::value_regs_get(ctx, v7, 0x0_usize);
                let v25 = C::zero_reg(ctx);
                let v28 = &constructor_cmp(ctx, &OperandSize::Size64, v25, v9);
                let v29 = &constructor_flags_and_cc(ctx, v28, arg0);
                // Rule at src\isa\aarch64\inst.isle line 4948.
                return v29.clone();
            }
        }
        &IntCC::SignedLessThanOrEqual => {
            if arg3 == I128 {
                let v7 = constructor_lower_icmp_into_reg(ctx, arg0, arg1, arg2, I128, I8);
                let v9 = C::value_regs_get(ctx, v7, 0x0_usize);
                let v13 = constructor_imm(ctx, I64, &ImmExtend::Sign, 0x1_u64);
                let v21 = &constructor_cmp(ctx, &OperandSize::Size64, v13, v9);
                let v22 = &constructor_flags_and_cc(ctx, v21, arg0);
                // Rule at src\isa\aarch64\inst.isle line 4929.
                return v22.clone();
            }
        }
        &IntCC::UnsignedGreaterThan => {
            if arg3 == I128 {
                let v7 = constructor_lower_icmp_into_reg(ctx, arg0, arg1, arg2, I128, I8);
                let v9 = C::value_regs_get(ctx, v7, 0x0_usize);
                let v25 = C::zero_reg(ctx);
                let v26 = &constructor_cmp(ctx, &OperandSize::Size64, v9, v25);
                let v27 = &constructor_flags_and_cc(ctx, v26, arg0);
                // Rule at src\isa\aarch64\inst.isle line 4944.
                return v27.clone();
            }
        }
        &IntCC::UnsignedGreaterThanOrEqual => {
            if arg3 == I128 {
                let v7 = constructor_lower_icmp_into_reg(ctx, arg0, arg1, arg2, I128, I8);
                let v9 = C::value_regs_get(ctx, v7, 0x0_usize);
                let v18 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x1_u64);
                let v19 = &constructor_cmp(ctx, &OperandSize::Size64, v9, v18);
                let v20 = &constructor_flags_and_cc(ctx, v19, arg0);
                // Rule at src\isa\aarch64\inst.isle line 4924.
                return v20.clone();
            }
        }
        &IntCC::UnsignedLessThan => {
            if arg3 == I128 {
                let v7 = constructor_lower_icmp_into_reg(ctx, arg0, arg1, arg2, I128, I8);
                let v9 = C::value_regs_get(ctx, v7, 0x0_usize);
                let v25 = C::zero_reg(ctx);
                let v28 = &constructor_cmp(ctx, &OperandSize::Size64, v25, v9);
                let v29 = &constructor_flags_and_cc(ctx, v28, arg0);
                // Rule at src\isa\aarch64\inst.isle line 4952.
                return v29.clone();
            }
        }
        &IntCC::UnsignedLessThanOrEqual => {
            if arg3 == I128 {
                let v7 = constructor_lower_icmp_into_reg(ctx, arg0, arg1, arg2, I128, I8);
                let v9 = C::value_regs_get(ctx, v7, 0x0_usize);
                let v18 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x1_u64);
                let v23 = &constructor_cmp(ctx, &OperandSize::Size64, v18, v9);
                let v24 = &constructor_flags_and_cc(ctx, v23, arg0);
                // Rule at src\isa\aarch64\inst.isle line 4934.
                return v24.clone();
            }
        }
        _ => {}
    }
    let v4 = &constructor_lower_icmp(ctx, arg0, arg1, arg2, arg3);
    // Rule at src\isa\aarch64\inst.isle line 4736.
    return v4.clone();
}

// Generated as internal constructor for term lower_icmp_const.
pub fn constructor_lower_icmp_const<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Value,
    arg2: u64,
    arg3: Type,
) -> FlagsAndCC {
    let v4 = C::ty_int_ref_scalar_64(ctx, arg3);
    if let Some(v5) = v4 {
        match arg0 {
            &IntCC::SignedGreaterThanOrEqual => {
                let v6 = C::u64_is_odd(ctx, arg2);
                if v6 == true {
                    let v8 = C::u64_sub(ctx, arg2, 0x1_u64);
                    let v9 = C::imm12_from_u64(ctx, v8);
                    if let Some(v10) = v9 {
                        let v11 = &constructor_operand_size(ctx, arg3);
                        let v12 = C::put_in_reg(ctx, arg1);
                        let v13 = &constructor_cmp_imm(ctx, v11, v12, v10);
                        let v17 = &constructor_flags_and_cc(ctx, v13, &IntCC::SignedGreaterThan);
                        // Rule at src\isa\aarch64\inst.isle line 4797.
                        return v17.clone();
                    }
                }
            }
            &IntCC::UnsignedGreaterThanOrEqual => {
                let v6 = C::u64_is_odd(ctx, arg2);
                if v6 == true {
                    let v8 = C::u64_sub(ctx, arg2, 0x1_u64);
                    let v9 = C::imm12_from_u64(ctx, v8);
                    if let Some(v10) = v9 {
                        let v11 = &constructor_operand_size(ctx, arg3);
                        let v12 = C::put_in_reg(ctx, arg1);
                        let v13 = &constructor_cmp_imm(ctx, v11, v12, v10);
                        let v15 = &constructor_flags_and_cc(ctx, v13, &IntCC::UnsignedGreaterThan);
                        // Rule at src\isa\aarch64\inst.isle line 4791.
                        return v15.clone();
                    }
                }
            }
            _ => {}
        }
        let v18 = C::imm12_from_u64(ctx, arg2);
        if let Some(v19) = v18 {
            let v11 = &constructor_operand_size(ctx, arg3);
            let v12 = C::put_in_reg(ctx, arg1);
            let v20 = &constructor_cmp_imm(ctx, v11, v12, v19);
            let v21 = &constructor_flags_and_cc(ctx, v20, arg0);
            // Rule at src\isa\aarch64\inst.isle line 4803.
            return v21.clone();
        }
        let v11 = &constructor_operand_size(ctx, arg3);
        let v12 = C::put_in_reg(ctx, arg1);
        let v23 = constructor_imm(ctx, arg3, &ImmExtend::Zero, arg2);
        let v24 = &constructor_cmp(ctx, v11, v12, v23);
        let v25 = &constructor_flags_and_cc(ctx, v24, arg0);
        // Rule at src\isa\aarch64\inst.isle line 4806.
        return v25.clone();
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "lower_icmp_const", "src\\isa\\aarch64\\inst.isle line 4733")
}

// Generated as internal constructor for term lower_extend_op.
pub fn constructor_lower_extend_op<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ArgumentExtension,
) -> ExtendOp {
    match arg0 {
        I8 => {
            match arg1 {
                &ArgumentExtension::Uext => {
                    // Rule at src\isa\aarch64\inst.isle line 4759.
                    return ExtendOp::UXTB;
                }
                &ArgumentExtension::Sext => {
                    // Rule at src\isa\aarch64\inst.isle line 4757.
                    return ExtendOp::SXTB;
                }
                _ => {}
            }
        }
        I16 => {
            match arg1 {
                &ArgumentExtension::Uext => {
                    // Rule at src\isa\aarch64\inst.isle line 4760.
                    return ExtendOp::UXTH;
                }
                &ArgumentExtension::Sext => {
                    // Rule at src\isa\aarch64\inst.isle line 4758.
                    return ExtendOp::SXTH;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "lower_extend_op", "src\\isa\\aarch64\\inst.isle line 4756")
}

// Generated as internal constructor for term lower_icmp_i128_eq_ne.
pub fn constructor_lower_icmp_i128_eq_ne<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: Value,
) -> ProducesFlags {
    let v2 = C::put_in_regs(ctx, arg0);
    let v3 = C::put_in_regs(ctx, arg1);
    let v5 = C::value_regs_get(ctx, v2, 0x0_usize);
    let v7 = C::value_regs_get(ctx, v2, 0x1_usize);
    let v8 = C::value_regs_get(ctx, v3, 0x0_usize);
    let v9 = C::value_regs_get(ctx, v3, 0x1_usize);
    let v11 = &constructor_cmp(ctx, &OperandSize::Size64, v5, v8);
    let v12 = false;
    let v13 = C::nzcv(ctx, v12, v12, v12, v12);
    let v15 = &constructor_ccmp(ctx, &OperandSize::Size64, v7, v9, v13, &Cond::Eq, v11);
    // Rule at src\isa\aarch64\inst.isle line 4824.
    return v15.clone();
}

// Generated as internal constructor for term lower_icmp_i128_consumer.
pub fn constructor_lower_icmp_i128_consumer<C: Context>(
    ctx: &mut C,
    arg0: &Cond,
    arg1: Reg,
) -> ConsumesFlags {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = C::temp_writable_reg(ctx, I64);
    let v9 = C::writable_reg_to_reg(ctx, v4);
    let v10 = C::value_reg(ctx, v9);
    let v5 = MInst::CSet {
        rd: v3,
        cond: arg0.clone(),
    };
    let v7 = C::writable_reg_to_reg(ctx, v3);
    let v8 = MInst::CSel {
        rd: v4,
        cond: Cond::Eq,
        rn: arg1,
        rm: v7,
    };
    let v11 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
        inst1: v5,
        inst2: v8,
        result: v10,
    };
    // Rule at src\isa\aarch64\inst.isle line 4860.
    return v11;
}

// Generated as internal constructor for term lower_bmask.
pub fn constructor_lower_bmask<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Type,
    arg2: ValueRegs,
) -> ValueRegs {
    let v27 = C::fits_in_16(ctx, arg1);
    if let Some(v28) = v27 {
        let v30 = C::ty_mask(ctx, v28);
        let v31 = C::imm_logic_from_u64(ctx, I32, v30);
        if let Some(v32) = v31 {
            let v17 = C::value_regs_get(ctx, arg2, 0x0_usize);
            let v33 = constructor_and_imm(ctx, I32, v17, v32);
            let v34 = C::value_reg(ctx, v33);
            let v35 = constructor_lower_bmask(ctx, arg0, I32, v34);
            // Rule at src\isa\aarch64\inst.isle line 4909.
            return v35;
        }
    }
    if arg0 == I128 {
        let v24 = constructor_lower_bmask(ctx, I64, arg1, arg2);
        let v25 = C::value_regs_get(ctx, v24, 0x0_usize);
        let v26 = C::value_regs(ctx, v25, v25);
        // Rule at src\isa\aarch64\inst.isle line 4897.
        return v26;
    }
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        if arg1 == I128 {
            let v17 = C::value_regs_get(ctx, arg2, 0x0_usize);
            let v19 = C::value_regs_get(ctx, arg2, 0x1_usize);
            let v21 = constructor_orr(ctx, I64, v17, v19);
            let v22 = C::value_reg(ctx, v21);
            let v23 = constructor_lower_bmask(ctx, v2, I64, v22);
            // Rule at src\isa\aarch64\inst.isle line 4888.
            return v23;
        }
        let v4 = C::ty_32_or_64(ctx, arg1);
        if let Some(v5) = v4 {
            let v7 = &constructor_operand_size(ctx, v5);
            let v9 = C::value_regs_get(ctx, arg2, 0x0_usize);
            let v11 = C::u8_into_imm12(ctx, 0x0_u8);
            let v12 = &constructor_cmp_imm(ctx, v7, v9, v11);
            let v14 = &constructor_csetm(ctx, &Cond::Ne);
            let v15 = constructor_with_flags_reg(ctx, v12, v14);
            let v16 = C::value_reg(ctx, v15);
            // Rule at src\isa\aarch64\inst.isle line 4875.
            return v16;
        }
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "lower_bmask", "src\\isa\\aarch64\\inst.isle line 4868")
}

// Generated as internal constructor for term lower_select.
pub fn constructor_lower_select<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &Cond,
    arg2: Type,
    arg3: Value,
    arg4: Value,
) -> ValueRegs {
    match arg2 {
        I128 => {
            let v23 = C::temp_writable_reg(ctx, I64);
            let v24 = C::temp_writable_reg(ctx, I64);
            let v25 = C::put_in_regs(ctx, arg3);
            let v26 = C::put_in_regs(ctx, arg4);
            let v28 = C::value_regs_get(ctx, v25, 0x0_usize);
            let v30 = C::value_regs_get(ctx, v25, 0x1_usize);
            let v31 = C::value_regs_get(ctx, v26, 0x0_usize);
            let v32 = C::value_regs_get(ctx, v26, 0x1_usize);
            let v35 = C::writable_reg_to_reg(ctx, v23);
            let v36 = C::writable_reg_to_reg(ctx, v24);
            let v37 = C::value_regs(ctx, v35, v36);
            let v33 = MInst::CSel {
                rd: v23,
                cond: arg1.clone(),
                rn: v28,
                rm: v31,
            };
            let v34 = MInst::CSel {
                rd: v24,
                cond: arg1.clone(),
                rn: v30,
                rm: v32,
            };
            let v38 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                inst1: v33,
                inst2: v34,
                result: v37,
            };
            let v39 = constructor_with_flags(ctx, arg0, &v38);
            // Rule at src\isa\aarch64\inst.isle line 4968.
            return v39;
        }
        F128 => {
            let v9 = C::put_in_reg(ctx, arg3);
            let v10 = C::put_in_reg(ctx, arg4);
            let v13 = &constructor_vec_csel(ctx, arg1, v9, v10);
            let v14 = constructor_with_flags(ctx, arg0, v13);
            // Rule at src\isa\aarch64\inst.isle line 4961.
            return v14;
        }
        _ => {}
    }
    let v15 = C::ty_vec128(ctx, arg2);
    if let Some(v16) = v15 {
        let v9 = C::put_in_reg(ctx, arg3);
        let v10 = C::put_in_reg(ctx, arg4);
        let v13 = &constructor_vec_csel(ctx, arg1, v9, v10);
        let v14 = constructor_with_flags(ctx, arg0, v13);
        // Rule at src\isa\aarch64\inst.isle line 4963.
        return v14;
    }
    let v3 = C::ty_scalar_float(ctx, arg2);
    if let Some(v4) = v3 {
        let v5 = C::fits_in_64(ctx, v4);
        if let Some(v6) = v5 {
            let v9 = C::put_in_reg(ctx, arg3);
            let v10 = C::put_in_reg(ctx, arg4);
            let v11 = &constructor_fpu_csel(ctx, v6, arg1, v9, v10);
            let v12 = constructor_with_flags(ctx, arg0, v11);
            // Rule at src\isa\aarch64\inst.isle line 4959.
            return v12;
        }
    }
    let v40 = C::ty_int_ref_scalar_64(ctx, arg2);
    if let Some(v41) = v40 {
        let v9 = C::put_in_reg(ctx, arg3);
        let v10 = C::put_in_reg(ctx, arg4);
        let v42 = &constructor_csel(ctx, arg1, v9, v10);
        let v43 = constructor_with_flags(ctx, arg0, v42);
        // Rule at src\isa\aarch64\inst.isle line 4982.
        return v43;
    }
    let v17 = C::ty_vec64_ctor(ctx, arg2);
    if let Some(v18) = v17 {
        let v9 = C::put_in_reg(ctx, arg3);
        let v10 = C::put_in_reg(ctx, arg4);
        let v20 = &constructor_fpu_csel(ctx, F64, arg1, v9, v10);
        let v21 = constructor_with_flags(ctx, arg0, v20);
        // Rule at src\isa\aarch64\inst.isle line 4965.
        return v21;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "lower_select", "src\\isa\\aarch64\\inst.isle line 4958")
}

// Generated as internal constructor for term aarch64_jump.
pub fn constructor_aarch64_jump<C: Context>(
    ctx: &mut C,
    arg0: BranchTarget,
) -> SideEffectNoResult {
    let v1 = MInst::Jump {
        dest: arg0,
    };
    let v2 = SideEffectNoResult::Inst {
        inst: v1,
    };
    // Rule at src\isa\aarch64\inst.isle line 4988.
    return v2;
}

// Generated as internal constructor for term jt_sequence.
pub fn constructor_jt_sequence<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: MachLabel,
    arg2: &BoxVecMachLabel,
) -> ConsumesFlags {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = MInst::JTSequence {
        default: arg1,
        targets: arg2.clone(),
        ridx: arg0,
        rtmp1: v4,
        rtmp2: v5,
    };
    let v7 = ConsumesFlags::ConsumesFlagsSideEffect {
        inst: v6,
    };
    // Rule at src\isa\aarch64\inst.isle line 5010.
    return v7;
}

// Generated as internal constructor for term cond_br.
pub fn constructor_cond_br<C: Context>(
    ctx: &mut C,
    arg0: BranchTarget,
    arg1: BranchTarget,
    arg2: CondBrKind,
) -> ConsumesFlags {
    let v3 = MInst::CondBr {
        taken: arg0,
        not_taken: arg1,
        kind: arg2,
    };
    let v4 = ConsumesFlags::ConsumesFlagsSideEffect {
        inst: v3,
    };
    // Rule at src\isa\aarch64\inst.isle line 5018.
    return v4;
}

// Generated as internal constructor for term test_branch.
pub fn constructor_test_branch<C: Context>(
    ctx: &mut C,
    arg0: &TestBitAndBranchKind,
    arg1: BranchTarget,
    arg2: BranchTarget,
    arg3: Reg,
    arg4: u8,
) -> SideEffectNoResult {
    let v5 = MInst::TestBitAndBranch {
        kind: arg0.clone(),
        taken: arg1,
        not_taken: arg2,
        rn: arg3,
        bit: arg4,
    };
    let v6 = SideEffectNoResult::Inst {
        inst: v5,
    };
    // Rule at src\isa\aarch64\inst.isle line 5024.
    return v6;
}

// Generated as internal constructor for term tbnz.
pub fn constructor_tbnz<C: Context>(
    ctx: &mut C,
    arg0: BranchTarget,
    arg1: BranchTarget,
    arg2: Reg,
    arg3: u8,
) -> SideEffectNoResult {
    let v5 = &constructor_test_branch(ctx, &TestBitAndBranchKind::NZ, arg0, arg1, arg2, arg3);
    // Rule at src\isa\aarch64\inst.isle line 5029.
    return v5.clone();
}

// Generated as internal constructor for term tbz.
pub fn constructor_tbz<C: Context>(
    ctx: &mut C,
    arg0: BranchTarget,
    arg1: BranchTarget,
    arg2: Reg,
    arg3: u8,
) -> SideEffectNoResult {
    let v5 = &constructor_test_branch(ctx, &TestBitAndBranchKind::Z, arg0, arg1, arg2, arg3);
    // Rule at src\isa\aarch64\inst.isle line 5034.
    return v5.clone();
}

// Generated as internal constructor for term mov_to_nzcv.
pub fn constructor_mov_to_nzcv<C: Context>(
    ctx: &mut C,
    arg0: Reg,
) -> ProducesFlags {
    let v1 = MInst::MovToNZCV {
        rn: arg0,
    };
    let v2 = ProducesFlags::ProducesFlagsSideEffect {
        inst: v1,
    };
    // Rule at src\isa\aarch64\inst.isle line 5039.
    return v2;
}

// Generated as internal constructor for term emit_island.
pub fn constructor_emit_island<C: Context>(
    ctx: &mut C,
    arg0: CodeOffset,
) -> SideEffectNoResult {
    let v1 = MInst::EmitIsland {
        needed_space: arg0,
    };
    let v2 = SideEffectNoResult::Inst {
        inst: v1,
    };
    // Rule at src\isa\aarch64\inst.isle line 5045.
    return v2;
}

// Generated as internal constructor for term br_table_impl.
pub fn constructor_br_table_impl<C: Context>(
    ctx: &mut C,
    arg0: u64,
    arg1: Reg,
    arg2: MachLabel,
    arg3: &BoxVecMachLabel,
) -> Unit {
    let v1 = C::imm12_from_u64(ctx, arg0);
    if let Some(v2) = v1 {
        let v7 = &constructor_cmp_imm(ctx, &OperandSize::Size32, arg1, v2);
        let v8 = &constructor_jt_sequence(ctx, arg1, arg2, arg3);
        let v9 = &constructor_with_flags_side_effect(ctx, v7, v8);
        let v10 = constructor_emit_side_effect(ctx, v9);
        // Rule at src\isa\aarch64\inst.isle line 5051.
        return v10;
    }
    let v13 = constructor_imm(ctx, I64, &ImmExtend::Zero, arg0);
    let v14 = &constructor_cmp(ctx, &OperandSize::Size32, arg1, v13);
    let v15 = &constructor_jt_sequence(ctx, arg1, arg2, arg3);
    let v16 = &constructor_with_flags_side_effect(ctx, v14, v15);
    let v17 = constructor_emit_side_effect(ctx, v16);
    // Rule at src\isa\aarch64\inst.isle line 5055.
    return v17;
}

// Generated as internal constructor for term vec_uzp1.
pub fn constructor_vec_uzp1<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Uzp1, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 5063.
    return v4;
}

// Generated as internal constructor for term vec_uzp2.
pub fn constructor_vec_uzp2<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Uzp2, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 5067.
    return v4;
}

// Generated as internal constructor for term vec_zip1.
pub fn constructor_vec_zip1<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Zip1, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 5071.
    return v4;
}

// Generated as internal constructor for term vec_zip2.
pub fn constructor_vec_zip2<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Zip2, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 5075.
    return v4;
}

// Generated as internal constructor for term vec_trn1.
pub fn constructor_vec_trn1<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Trn1, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 5079.
    return v4;
}

// Generated as internal constructor for term vec_trn2.
pub fn constructor_vec_trn2<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Trn2, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 5083.
    return v4;
}

// Generated as internal constructor for term vec_dup_fp_imm.
pub fn constructor_vec_dup_fp_imm<C: Context>(
    ctx: &mut C,
    arg0: ASIMDFPModImm,
    arg1: &VectorSize,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::VecDupFPImm {
        rd: v3,
        imm: arg0,
        size: arg1.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 5099.
    return v6;
}

// Generated as internal constructor for term fpu_load64.
pub fn constructor_fpu_load64<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::FpuLoad64 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 5106.
    return v6;
}

// Generated as internal constructor for term fpu_load128.
pub fn constructor_fpu_load128<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::FpuLoad128 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 5113.
    return v6;
}

// Generated as internal constructor for term fpu_move_128.
pub fn constructor_fpu_move_128<C: Context>(
    ctx: &mut C,
    arg0: Reg,
) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I8X16);
    let v3 = MInst::FpuMove128 {
        rd: v2,
        rn: arg0,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src\isa\aarch64\inst_neon.isle line 3.
    return v5;
}

// Generated as internal constructor for term lower.
pub fn constructor_lower<C: Context>(
    ctx: &mut C,
    arg0: Inst,
) -> Option<InstOutput> {
    let v4 = &C::inst_data_value(ctx, arg0);
    match v4 {
        &InstructionData::AtomicCas {
            opcode: ref v1831,
            args: ref v1832,
            flags: v1833,
        } => {
            if let &Opcode::AtomicCas = v1831 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v1715 = C::valid_atomic_transaction(ctx, v3);
                    if let Some(v1716) = v1715 {
                        let v1738 = C::use_lse(ctx, arg0);
                        if let Some(v1739) = v1738 {
                            let v1834 = C::unpack_value_array_3(ctx, v1832);
                            let v1838 = C::put_in_reg(ctx, v1834.0);
                            let v1839 = C::put_in_reg(ctx, v1834.1);
                            let v1840 = C::put_in_reg(ctx, v1834.2);
                            let v1841 = constructor_lse_atomic_cas(ctx, v1838, v1839, v1840, v1716, v1833);
                            let v1842 = constructor_output_reg(ctx, v1841);
                            let v1843 = Some(v1842);
                            // Rule at src\isa\aarch64\lower.isle line 2385.
                            return v1843;
                        }
                        let v1834 = C::unpack_value_array_3(ctx, v1832);
                        let v1838 = C::put_in_reg(ctx, v1834.0);
                        let v1839 = C::put_in_reg(ctx, v1834.1);
                        let v1840 = C::put_in_reg(ctx, v1834.2);
                        let v1844 = constructor_atomic_cas_loop(ctx, v1838, v1839, v1840, v1716, v1833);
                        let v1845 = constructor_output_reg(ctx, v1844);
                        let v1846 = Some(v1845);
                        // Rule at src\isa\aarch64\lower.isle line 2390.
                        return v1846;
                    }
                }
            }
        }
        &InstructionData::AtomicRmw {
            opcode: ref v1740,
            args: ref v1741,
            flags: v1742,
            op: ref v1743,
        } => {
            if let &Opcode::AtomicRmw = v1740 {
                match v1743 {
                    &AtomicRmwOp::Add => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1715 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1716) = v1715 {
                                let v1738 = C::use_lse(ctx, arg0);
                                if let Some(v1739) = v1738 {
                                    let v1744 = C::unpack_value_array_2(ctx, v1741);
                                    let v1748 = C::put_in_reg(ctx, v1744.1);
                                    let v1749 = constructor_lse_atomic_rmw(ctx, &AtomicRMWOp::Add, v1744.0, v1748, v1716, v1742);
                                    let v1750 = constructor_output_reg(ctx, v1749);
                                    let v1751 = Some(v1750);
                                    // Rule at src\isa\aarch64\lower.isle line 2312.
                                    return v1751;
                                }
                                let v1744 = C::unpack_value_array_2(ctx, v1741);
                                let v1787 = C::put_in_reg(ctx, v1744.0);
                                let v1776 = C::put_in_reg(ctx, v1744.1);
                                let v1788 = constructor_atomic_rmw_loop(ctx, &AtomicRMWLoopOp::Add, v1787, v1776, v1716, v1742);
                                let v1789 = constructor_output_reg(ctx, v1788);
                                let v1790 = Some(v1789);
                                // Rule at src\isa\aarch64\lower.isle line 2350.
                                return v1790;
                            }
                        }
                    }
                    &AtomicRmwOp::And => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1715 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1716) = v1715 {
                                let v1738 = C::use_lse(ctx, arg0);
                                if let Some(v1739) = v1738 {
                                    let v1744 = C::unpack_value_array_2(ctx, v1741);
                                    let v1748 = C::put_in_reg(ctx, v1744.1);
                                    let v1639 = C::zero_reg(ctx);
                                    let v1782 = constructor_eon(ctx, v1716, v1748, v1639);
                                    let v1783 = constructor_lse_atomic_rmw(ctx, &AtomicRMWOp::Clr, v1744.0, v1782, v1716, v1742);
                                    let v1784 = constructor_output_reg(ctx, v1783);
                                    let v1785 = Some(v1784);
                                    // Rule at src\isa\aarch64\lower.isle line 2344.
                                    return v1785;
                                }
                                let v1744 = C::unpack_value_array_2(ctx, v1741);
                                let v1787 = C::put_in_reg(ctx, v1744.0);
                                let v1776 = C::put_in_reg(ctx, v1744.1);
                                let v1796 = constructor_atomic_rmw_loop(ctx, &AtomicRMWLoopOp::And, v1787, v1776, v1716, v1742);
                                let v1797 = constructor_output_reg(ctx, v1796);
                                let v1798 = Some(v1797);
                                // Rule at src\isa\aarch64\lower.isle line 2356.
                                return v1798;
                            }
                        }
                    }
                    &AtomicRmwOp::Nand => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1715 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1716) = v1715 {
                                let v1744 = C::unpack_value_array_2(ctx, v1741);
                                let v1787 = C::put_in_reg(ctx, v1744.0);
                                let v1776 = C::put_in_reg(ctx, v1744.1);
                                let v1800 = constructor_atomic_rmw_loop(ctx, &AtomicRMWLoopOp::Nand, v1787, v1776, v1716, v1742);
                                let v1801 = constructor_output_reg(ctx, v1800);
                                let v1802 = Some(v1801);
                                // Rule at src\isa\aarch64\lower.isle line 2359.
                                return v1802;
                            }
                        }
                    }
                    &AtomicRmwOp::Or => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1715 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1716) = v1715 {
                                let v1738 = C::use_lse(ctx, arg0);
                                if let Some(v1739) = v1738 {
                                    let v1744 = C::unpack_value_array_2(ctx, v1741);
                                    let v1748 = C::put_in_reg(ctx, v1744.1);
                                    let v1757 = constructor_lse_atomic_rmw(ctx, &AtomicRMWOp::Set, v1744.0, v1748, v1716, v1742);
                                    let v1758 = constructor_output_reg(ctx, v1757);
                                    let v1759 = Some(v1758);
                                    // Rule at src\isa\aarch64\lower.isle line 2320.
                                    return v1759;
                                }
                                let v1744 = C::unpack_value_array_2(ctx, v1741);
                                let v1787 = C::put_in_reg(ctx, v1744.0);
                                let v1776 = C::put_in_reg(ctx, v1744.1);
                                let v1804 = constructor_atomic_rmw_loop(ctx, &AtomicRMWLoopOp::Orr, v1787, v1776, v1716, v1742);
                                let v1805 = constructor_output_reg(ctx, v1804);
                                let v1806 = Some(v1805);
                                // Rule at src\isa\aarch64\lower.isle line 2362.
                                return v1806;
                            }
                        }
                    }
                    &AtomicRmwOp::Smax => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1715 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1716) = v1715 {
                                let v1738 = C::use_lse(ctx, arg0);
                                if let Some(v1739) = v1738 {
                                    let v1744 = C::unpack_value_array_2(ctx, v1741);
                                    let v1748 = C::put_in_reg(ctx, v1744.1);
                                    let v1761 = constructor_lse_atomic_rmw(ctx, &AtomicRMWOp::Smax, v1744.0, v1748, v1716, v1742);
                                    let v1762 = constructor_output_reg(ctx, v1761);
                                    let v1763 = Some(v1762);
                                    // Rule at src\isa\aarch64\lower.isle line 2324.
                                    return v1763;
                                }
                                let v1744 = C::unpack_value_array_2(ctx, v1741);
                                let v1787 = C::put_in_reg(ctx, v1744.0);
                                let v1776 = C::put_in_reg(ctx, v1744.1);
                                let v1816 = constructor_atomic_rmw_loop(ctx, &AtomicRMWLoopOp::Smax, v1787, v1776, v1716, v1742);
                                let v1817 = constructor_output_reg(ctx, v1816);
                                let v1818 = Some(v1817);
                                // Rule at src\isa\aarch64\lower.isle line 2371.
                                return v1818;
                            }
                        }
                    }
                    &AtomicRmwOp::Smin => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1715 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1716) = v1715 {
                                let v1738 = C::use_lse(ctx, arg0);
                                if let Some(v1739) = v1738 {
                                    let v1744 = C::unpack_value_array_2(ctx, v1741);
                                    let v1748 = C::put_in_reg(ctx, v1744.1);
                                    let v1765 = constructor_lse_atomic_rmw(ctx, &AtomicRMWOp::Smin, v1744.0, v1748, v1716, v1742);
                                    let v1766 = constructor_output_reg(ctx, v1765);
                                    let v1767 = Some(v1766);
                                    // Rule at src\isa\aarch64\lower.isle line 2328.
                                    return v1767;
                                }
                                let v1744 = C::unpack_value_array_2(ctx, v1741);
                                let v1787 = C::put_in_reg(ctx, v1744.0);
                                let v1776 = C::put_in_reg(ctx, v1744.1);
                                let v1812 = constructor_atomic_rmw_loop(ctx, &AtomicRMWLoopOp::Smin, v1787, v1776, v1716, v1742);
                                let v1813 = constructor_output_reg(ctx, v1812);
                                let v1814 = Some(v1813);
                                // Rule at src\isa\aarch64\lower.isle line 2368.
                                return v1814;
                            }
                        }
                    }
                    &AtomicRmwOp::Sub => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1715 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1716) = v1715 {
                                let v1738 = C::use_lse(ctx, arg0);
                                if let Some(v1739) = v1738 {
                                    let v776 = C::zero_reg(ctx);
                                    let v1744 = C::unpack_value_array_2(ctx, v1741);
                                    let v1776 = C::put_in_reg(ctx, v1744.1);
                                    let v1777 = constructor_sub(ctx, v1716, v776, v1776);
                                    let v1778 = constructor_lse_atomic_rmw(ctx, &AtomicRMWOp::Add, v1744.0, v1777, v1716, v1742);
                                    let v1779 = constructor_output_reg(ctx, v1778);
                                    let v1780 = Some(v1779);
                                    // Rule at src\isa\aarch64\lower.isle line 2340.
                                    return v1780;
                                }
                                let v1744 = C::unpack_value_array_2(ctx, v1741);
                                let v1787 = C::put_in_reg(ctx, v1744.0);
                                let v1776 = C::put_in_reg(ctx, v1744.1);
                                let v1792 = constructor_atomic_rmw_loop(ctx, &AtomicRMWLoopOp::Sub, v1787, v1776, v1716, v1742);
                                let v1793 = constructor_output_reg(ctx, v1792);
                                let v1794 = Some(v1793);
                                // Rule at src\isa\aarch64\lower.isle line 2353.
                                return v1794;
                            }
                        }
                    }
                    &AtomicRmwOp::Umax => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1715 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1716) = v1715 {
                                let v1738 = C::use_lse(ctx, arg0);
                                if let Some(v1739) = v1738 {
                                    let v1744 = C::unpack_value_array_2(ctx, v1741);
                                    let v1748 = C::put_in_reg(ctx, v1744.1);
                                    let v1769 = constructor_lse_atomic_rmw(ctx, &AtomicRMWOp::Umax, v1744.0, v1748, v1716, v1742);
                                    let v1770 = constructor_output_reg(ctx, v1769);
                                    let v1771 = Some(v1770);
                                    // Rule at src\isa\aarch64\lower.isle line 2332.
                                    return v1771;
                                }
                                let v1744 = C::unpack_value_array_2(ctx, v1741);
                                let v1787 = C::put_in_reg(ctx, v1744.0);
                                let v1776 = C::put_in_reg(ctx, v1744.1);
                                let v1824 = constructor_atomic_rmw_loop(ctx, &AtomicRMWLoopOp::Umax, v1787, v1776, v1716, v1742);
                                let v1825 = constructor_output_reg(ctx, v1824);
                                let v1826 = Some(v1825);
                                // Rule at src\isa\aarch64\lower.isle line 2377.
                                return v1826;
                            }
                        }
                    }
                    &AtomicRmwOp::Umin => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1715 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1716) = v1715 {
                                let v1738 = C::use_lse(ctx, arg0);
                                if let Some(v1739) = v1738 {
                                    let v1744 = C::unpack_value_array_2(ctx, v1741);
                                    let v1748 = C::put_in_reg(ctx, v1744.1);
                                    let v1773 = constructor_lse_atomic_rmw(ctx, &AtomicRMWOp::Umin, v1744.0, v1748, v1716, v1742);
                                    let v1774 = constructor_output_reg(ctx, v1773);
                                    let v1775 = Some(v1774);
                                    // Rule at src\isa\aarch64\lower.isle line 2336.
                                    return v1775;
                                }
                                let v1744 = C::unpack_value_array_2(ctx, v1741);
                                let v1787 = C::put_in_reg(ctx, v1744.0);
                                let v1776 = C::put_in_reg(ctx, v1744.1);
                                let v1820 = constructor_atomic_rmw_loop(ctx, &AtomicRMWLoopOp::Umin, v1787, v1776, v1716, v1742);
                                let v1821 = constructor_output_reg(ctx, v1820);
                                let v1822 = Some(v1821);
                                // Rule at src\isa\aarch64\lower.isle line 2374.
                                return v1822;
                            }
                        }
                    }
                    &AtomicRmwOp::Xchg => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1715 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1716) = v1715 {
                                let v1744 = C::unpack_value_array_2(ctx, v1741);
                                let v1787 = C::put_in_reg(ctx, v1744.0);
                                let v1776 = C::put_in_reg(ctx, v1744.1);
                                let v1828 = constructor_atomic_rmw_loop(ctx, &AtomicRMWLoopOp::Xchg, v1787, v1776, v1716, v1742);
                                let v1829 = constructor_output_reg(ctx, v1828);
                                let v1830 = Some(v1829);
                                // Rule at src\isa\aarch64\lower.isle line 2380.
                                return v1830;
                            }
                        }
                    }
                    &AtomicRmwOp::Xor => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1715 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1716) = v1715 {
                                let v1738 = C::use_lse(ctx, arg0);
                                if let Some(v1739) = v1738 {
                                    let v1744 = C::unpack_value_array_2(ctx, v1741);
                                    let v1748 = C::put_in_reg(ctx, v1744.1);
                                    let v1753 = constructor_lse_atomic_rmw(ctx, &AtomicRMWOp::Eor, v1744.0, v1748, v1716, v1742);
                                    let v1754 = constructor_output_reg(ctx, v1753);
                                    let v1755 = Some(v1754);
                                    // Rule at src\isa\aarch64\lower.isle line 2316.
                                    return v1755;
                                }
                                let v1744 = C::unpack_value_array_2(ctx, v1741);
                                let v1787 = C::put_in_reg(ctx, v1744.0);
                                let v1776 = C::put_in_reg(ctx, v1744.1);
                                let v1808 = constructor_atomic_rmw_loop(ctx, &AtomicRMWLoopOp::Eor, v1787, v1776, v1716, v1742);
                                let v1809 = constructor_output_reg(ctx, v1808);
                                let v1810 = Some(v1809);
                                // Rule at src\isa\aarch64\lower.isle line 2365.
                                return v1810;
                            }
                        }
                    }
                    _ => {}
                }
            }
        }
        &InstructionData::Binary {
            opcode: ref v43,
            args: ref v44,
        } => {
            match v43 {
                &Opcode::Swizzle => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v45 = C::unpack_value_array_2(ctx, v44);
                        let v48 = C::put_in_reg(ctx, v45.0);
                        let v49 = C::put_in_reg(ctx, v45.1);
                        let v288 = constructor_vec_tbl(ctx, v48, v49);
                        let v289 = constructor_output_reg(ctx, v288);
                        let v290 = Some(v289);
                        // Rule at src\isa\aarch64\lower.isle line 247.
                        return v290;
                    }
                }
                &Opcode::Smin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v41 = C::fits_in_64(ctx, v3);
                        if let Some(v42) = v41 {
                            let v943 = C::ty_int(ctx, v3);
                            if let Some(v944) = v943 {
                                let v378 = true;
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v950 = constructor_cmp_and_choose(ctx, v42, &Cond::Lt, v378, v45.0, v45.1);
                                let v951 = C::output(ctx, v950);
                                let v952 = Some(v951);
                                // Rule at src\isa\aarch64\lower.isle line 1210.
                                return v952;
                            }
                        }
                        if v3 == I64X2 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v72 = C::put_in_reg(ctx, v45.1);
                            let v450 = C::put_in_reg(ctx, v45.0);
                            let v969 = constructor_vec_rrr(ctx, &VecALUOp::Cmgt, v72, v450, &VectorSize::Size64x2);
                            let v970 = C::put_in_reg(ctx, v45.0);
                            let v971 = C::put_in_reg(ctx, v45.1);
                            let v972 = constructor_bsl(ctx, I64X2, v969, v970, v971);
                            let v973 = constructor_output_reg(ctx, v972);
                            let v974 = Some(v973);
                            // Rule at src\isa\aarch64\lower.isle line 1222.
                            return v974;
                        }
                        let v961 = C::not_i64x2(ctx, v3);
                        if let Some(v962) = v961 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v147 = &constructor_vector_size(ctx, v3);
                            let v964 = constructor_vec_rrr(ctx, &VecALUOp::Smin, v48, v49, v147);
                            let v965 = constructor_output_reg(ctx, v964);
                            let v966 = Some(v965);
                            // Rule at src\isa\aarch64\lower.isle line 1219.
                            return v966;
                        }
                    }
                }
                &Opcode::Umin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v41 = C::fits_in_64(ctx, v3);
                        if let Some(v42) = v41 {
                            let v943 = C::ty_int(ctx, v3);
                            if let Some(v944) = v943 {
                                let v377 = false;
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v946 = constructor_cmp_and_choose(ctx, v42, &Cond::Lo, v377, v45.0, v45.1);
                                let v947 = C::output(ctx, v946);
                                let v948 = Some(v947);
                                // Rule at src\isa\aarch64\lower.isle line 1208.
                                return v948;
                            }
                        }
                        if v3 == I64X2 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v72 = C::put_in_reg(ctx, v45.1);
                            let v450 = C::put_in_reg(ctx, v45.0);
                            let v980 = constructor_vec_rrr(ctx, &VecALUOp::Cmhi, v72, v450, &VectorSize::Size64x2);
                            let v970 = C::put_in_reg(ctx, v45.0);
                            let v971 = C::put_in_reg(ctx, v45.1);
                            let v981 = constructor_bsl(ctx, I64X2, v980, v970, v971);
                            let v982 = constructor_output_reg(ctx, v981);
                            let v983 = Some(v982);
                            // Rule at src\isa\aarch64\lower.isle line 1228.
                            return v983;
                        }
                        let v961 = C::not_i64x2(ctx, v3);
                        if let Some(v962) = v961 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v147 = &constructor_vector_size(ctx, v3);
                            let v976 = constructor_vec_rrr(ctx, &VecALUOp::Umin, v48, v49, v147);
                            let v977 = constructor_output_reg(ctx, v976);
                            let v978 = Some(v977);
                            // Rule at src\isa\aarch64\lower.isle line 1225.
                            return v978;
                        }
                    }
                }
                &Opcode::Smax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v41 = C::fits_in_64(ctx, v3);
                        if let Some(v42) = v41 {
                            let v943 = C::ty_int(ctx, v3);
                            if let Some(v944) = v943 {
                                let v378 = true;
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v958 = constructor_cmp_and_choose(ctx, v42, &Cond::Gt, v378, v45.0, v45.1);
                                let v959 = C::output(ctx, v958);
                                let v960 = Some(v959);
                                // Rule at src\isa\aarch64\lower.isle line 1214.
                                return v960;
                            }
                        }
                        if v3 == I64X2 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v988 = constructor_vec_rrr(ctx, &VecALUOp::Cmgt, v48, v49, &VectorSize::Size64x2);
                            let v970 = C::put_in_reg(ctx, v45.0);
                            let v971 = C::put_in_reg(ctx, v45.1);
                            let v989 = constructor_bsl(ctx, I64X2, v988, v970, v971);
                            let v990 = constructor_output_reg(ctx, v989);
                            let v991 = Some(v990);
                            // Rule at src\isa\aarch64\lower.isle line 1234.
                            return v991;
                        }
                        let v961 = C::not_i64x2(ctx, v3);
                        if let Some(v962) = v961 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v147 = &constructor_vector_size(ctx, v3);
                            let v985 = constructor_vec_rrr(ctx, &VecALUOp::Smax, v48, v49, v147);
                            let v986 = constructor_output_reg(ctx, v985);
                            let v987 = Some(v986);
                            // Rule at src\isa\aarch64\lower.isle line 1231.
                            return v987;
                        }
                    }
                }
                &Opcode::Umax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v41 = C::fits_in_64(ctx, v3);
                        if let Some(v42) = v41 {
                            let v943 = C::ty_int(ctx, v3);
                            if let Some(v944) = v943 {
                                let v377 = false;
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v954 = constructor_cmp_and_choose(ctx, v42, &Cond::Hi, v377, v45.0, v45.1);
                                let v955 = C::output(ctx, v954);
                                let v956 = Some(v955);
                                // Rule at src\isa\aarch64\lower.isle line 1212.
                                return v956;
                            }
                        }
                        if v3 == I64X2 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v996 = constructor_vec_rrr(ctx, &VecALUOp::Cmhi, v48, v49, &VectorSize::Size64x2);
                            let v970 = C::put_in_reg(ctx, v45.0);
                            let v971 = C::put_in_reg(ctx, v45.1);
                            let v997 = constructor_bsl(ctx, I64X2, v996, v970, v971);
                            let v998 = constructor_output_reg(ctx, v997);
                            let v999 = Some(v998);
                            // Rule at src\isa\aarch64\lower.isle line 1240.
                            return v999;
                        }
                        let v961 = C::not_i64x2(ctx, v3);
                        if let Some(v962) = v961 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v147 = &constructor_vector_size(ctx, v3);
                            let v993 = constructor_vec_rrr(ctx, &VecALUOp::Umax, v48, v49, v147);
                            let v994 = constructor_output_reg(ctx, v993);
                            let v995 = Some(v994);
                            // Rule at src\isa\aarch64\lower.isle line 1237.
                            return v995;
                        }
                    }
                }
                &Opcode::AvgRound => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64X2 {
                            let v449 = constructor_splat_const(ctx, 0x1_u64, &VectorSize::Size64x2);
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v450 = C::put_in_reg(ctx, v45.0);
                            let v136 = C::put_in_reg(ctx, v45.1);
                            let v451 = constructor_orr_vec(ctx, v450, v136, &VectorSize::Size64x2);
                            let v452 = constructor_and_vec(ctx, v451, v449, &VectorSize::Size64x2);
                            let v453 = C::put_in_reg(ctx, v45.0);
                            let v455 = constructor_ushr_vec_imm(ctx, v453, 0x1_u8, &VectorSize::Size64x2);
                            let v456 = C::put_in_reg(ctx, v45.1);
                            let v457 = constructor_ushr_vec_imm(ctx, v456, 0x1_u8, &VectorSize::Size64x2);
                            let v458 = constructor_add_vec(ctx, v455, v457, &VectorSize::Size64x2);
                            let v459 = constructor_add_vec(ctx, v452, v458, &VectorSize::Size64x2);
                            let v460 = constructor_output_reg(ctx, v459);
                            let v461 = Some(v460);
                            // Rule at src\isa\aarch64\lower.isle line 392.
                            return v461;
                        }
                        let v462 = C::lane_fits_in_32(ctx, v3);
                        if let Some(v463) = v462 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v465 = &constructor_vector_size(ctx, v463);
                            let v466 = constructor_vec_rrr(ctx, &VecALUOp::Urhadd, v48, v49, v465);
                            let v467 = constructor_output_reg(ctx, v466);
                            let v468 = Some(v467);
                            // Rule at src\isa\aarch64\lower.isle line 401.
                            return v468;
                        }
                    }
                }
                &Opcode::UaddSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v761 = C::ty_vec128(ctx, v3);
                        if let Some(v762) = v761 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v763 = &constructor_vector_size(ctx, v762);
                            let v764 = constructor_uqadd(ctx, v48, v49, v763);
                            let v765 = constructor_output_reg(ctx, v764);
                            let v766 = Some(v765);
                            // Rule at src\isa\aarch64\lower.isle line 773.
                            return v766;
                        }
                    }
                }
                &Opcode::SaddSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v761 = C::ty_vec128(ctx, v3);
                        if let Some(v762) = v761 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v763 = &constructor_vector_size(ctx, v762);
                            let v767 = constructor_sqadd(ctx, v48, v49, v763);
                            let v768 = constructor_output_reg(ctx, v767);
                            let v769 = Some(v768);
                            // Rule at src\isa\aarch64\lower.isle line 778.
                            return v769;
                        }
                    }
                }
                &Opcode::UsubSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v761 = C::ty_vec128(ctx, v3);
                        if let Some(v762) = v761 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v763 = &constructor_vector_size(ctx, v762);
                            let v770 = constructor_uqsub(ctx, v48, v49, v763);
                            let v771 = constructor_output_reg(ctx, v770);
                            let v772 = Some(v771);
                            // Rule at src\isa\aarch64\lower.isle line 783.
                            return v772;
                        }
                    }
                }
                &Opcode::SsubSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v761 = C::ty_vec128(ctx, v3);
                        if let Some(v762) = v761 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v763 = &constructor_vector_size(ctx, v762);
                            let v773 = constructor_sqsub(ctx, v48, v49, v763);
                            let v774 = constructor_output_reg(ctx, v773);
                            let v775 = Some(v774);
                            // Rule at src\isa\aarch64\lower.isle line 788.
                            return v775;
                        }
                    }
                }
                &Opcode::Iadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v41 = C::fits_in_64(ctx, v3);
                        if let Some(v42) = v41 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v53 = C::def_inst(ctx, v45.1);
                            if let Some(v54) = v53 {
                                let v55 = &C::inst_data_value(ctx, v54);
                                if let &InstructionData::Binary {
                                    opcode: ref v96,
                                    args: ref v97,
                                } = v55 {
                                    match v96 {
                                        &Opcode::Imul => {
                                            let v98 = C::unpack_value_array_2(ctx, v97);
                                            let v128 = C::put_in_reg(ctx, v98.0);
                                            let v129 = C::put_in_reg(ctx, v98.1);
                                            let v130 = C::put_in_reg(ctx, v45.0);
                                            let v131 = constructor_madd(ctx, v42, v128, v129, v130);
                                            let v132 = constructor_output_reg(ctx, v131);
                                            let v133 = Some(v132);
                                            // Rule at src\isa\aarch64\lower.isle line 94.
                                            return v133;
                                        }
                                        &Opcode::Ishl => {
                                            let v98 = C::unpack_value_array_2(ctx, v97);
                                            let v101 = C::def_inst(ctx, v98.1);
                                            if let Some(v102) = v101 {
                                                let v103 = &C::inst_data_value(ctx, v102);
                                                if let &InstructionData::UnaryImm {
                                                    opcode: ref v104,
                                                    imm: v105,
                                                } = v103 {
                                                    if let &Opcode::Iconst = v104 {
                                                        let v106 = C::lshl_from_imm64(ctx, v42, v105);
                                                        if let Some(v107) = v106 {
                                                            let v48 = C::put_in_reg(ctx, v45.0);
                                                            let v108 = C::put_in_reg(ctx, v98.0);
                                                            let v109 = constructor_add_shift(ctx, v42, v48, v108, v107);
                                                            let v110 = constructor_output_reg(ctx, v109);
                                                            let v111 = Some(v110);
                                                            // Rule at src\isa\aarch64\lower.isle line 83.
                                                            return v111;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            let v64 = C::def_inst(ctx, v45.0);
                            if let Some(v65) = v64 {
                                let v66 = &C::inst_data_value(ctx, v65);
                                match v66 {
                                    &InstructionData::Binary {
                                        opcode: ref v112,
                                        args: ref v113,
                                    } => {
                                        match v112 {
                                            &Opcode::Imul => {
                                                let v114 = C::unpack_value_array_2(ctx, v113);
                                                let v134 = C::put_in_reg(ctx, v114.0);
                                                let v135 = C::put_in_reg(ctx, v114.1);
                                                let v136 = C::put_in_reg(ctx, v45.1);
                                                let v137 = constructor_madd(ctx, v42, v134, v135, v136);
                                                let v138 = constructor_output_reg(ctx, v137);
                                                let v139 = Some(v138);
                                                // Rule at src\isa\aarch64\lower.isle line 97.
                                                return v139;
                                            }
                                            &Opcode::Ishl => {
                                                let v114 = C::unpack_value_array_2(ctx, v113);
                                                let v117 = C::def_inst(ctx, v114.1);
                                                if let Some(v118) = v117 {
                                                    let v119 = &C::inst_data_value(ctx, v118);
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v120,
                                                        imm: v121,
                                                    } = v119 {
                                                        if let &Opcode::Iconst = v120 {
                                                            let v122 = C::lshl_from_imm64(ctx, v42, v121);
                                                            if let Some(v123) = v122 {
                                                                let v72 = C::put_in_reg(ctx, v45.1);
                                                                let v124 = C::put_in_reg(ctx, v114.0);
                                                                let v125 = constructor_add_shift(ctx, v42, v72, v124, v123);
                                                                let v126 = constructor_output_reg(ctx, v125);
                                                                let v127 = Some(v126);
                                                                // Rule at src\isa\aarch64\lower.isle line 88.
                                                                return v127;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                    &InstructionData::UnaryImm {
                                        opcode: ref v67,
                                        imm: v68,
                                    } => {
                                        if let &Opcode::Iconst = v67 {
                                            let v69 = C::u64_from_imm64(ctx, v68);
                                            let v70 = C::imm12_from_u64(ctx, v69);
                                            if let Some(v71) = v70 {
                                                let v72 = C::put_in_reg(ctx, v45.1);
                                                let v73 = constructor_add_imm(ctx, v42, v72, v71);
                                                let v74 = constructor_output_reg(ctx, v73);
                                                let v75 = Some(v74);
                                                // Rule at src\isa\aarch64\lower.isle line 60.
                                                return v75;
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                            if let Some(v54) = v53 {
                                let v55 = &C::inst_data_value(ctx, v54);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v56,
                                    imm: v57,
                                } = v55 {
                                    if let &Opcode::Iconst = v56 {
                                        let v58 = C::u64_from_imm64(ctx, v57);
                                        let v59 = C::imm12_from_u64(ctx, v58);
                                        if let Some(v60) = v59 {
                                            let v48 = C::put_in_reg(ctx, v45.0);
                                            let v61 = constructor_add_imm(ctx, v42, v48, v60);
                                            let v62 = constructor_output_reg(ctx, v61);
                                            let v63 = Some(v62);
                                            // Rule at src\isa\aarch64\lower.isle line 57.
                                            return v63;
                                        }
                                    }
                                }
                            }
                            let v81 = constructor_imm12_from_negated_value(ctx, v45.0);
                            if let Some(v82) = v81 {
                                let v72 = C::put_in_reg(ctx, v45.1);
                                let v83 = constructor_sub_imm(ctx, v42, v72, v82);
                                let v84 = constructor_output_reg(ctx, v83);
                                let v85 = Some(v84);
                                // Rule at src\isa\aarch64\lower.isle line 69.
                                return v85;
                            }
                            let v76 = constructor_imm12_from_negated_value(ctx, v45.1);
                            if let Some(v77) = v76 {
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v78 = constructor_sub_imm(ctx, v42, v48, v77);
                                let v79 = constructor_output_reg(ctx, v78);
                                let v80 = Some(v79);
                                // Rule at src\isa\aarch64\lower.isle line 65.
                                return v80;
                            }
                            let v91 = &C::extended_value_from_value(ctx, v45.0);
                            if let Some(v92) = v91 {
                                let v72 = C::put_in_reg(ctx, v45.1);
                                let v93 = constructor_add_extend(ctx, v42, v72, v92);
                                let v94 = constructor_output_reg(ctx, v93);
                                let v95 = Some(v94);
                                // Rule at src\isa\aarch64\lower.isle line 78.
                                return v95;
                            }
                            let v86 = &C::extended_value_from_value(ctx, v45.1);
                            if let Some(v87) = v86 {
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v88 = constructor_add_extend(ctx, v42, v48, v87);
                                let v89 = constructor_output_reg(ctx, v88);
                                let v90 = Some(v89);
                                // Rule at src\isa\aarch64\lower.isle line 75.
                                return v90;
                            }
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v50 = constructor_add(ctx, v42, v48, v49);
                            let v51 = constructor_output_reg(ctx, v50);
                            let v52 = Some(v51);
                            // Rule at src\isa\aarch64\lower.isle line 53.
                            return v52;
                        }
                        let v143 = C::multi_lane(ctx, v3);
                        if let Some(v144) = v143 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v147 = &constructor_vector_size(ctx, v3);
                            let v148 = constructor_add_vec(ctx, v48, v49, v147);
                            let v149 = constructor_output_reg(ctx, v148);
                            let v150 = Some(v149);
                            // Rule at src\isa\aarch64\lower.isle line 106.
                            return v150;
                        }
                        if v3 == I128 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v151 = C::put_in_regs(ctx, v45.0);
                            let v153 = C::value_regs_get(ctx, v151, 0x0_usize);
                            let v155 = C::value_regs_get(ctx, v151, 0x1_usize);
                            let v156 = C::put_in_regs(ctx, v45.1);
                            let v157 = C::value_regs_get(ctx, v156, 0x0_usize);
                            let v158 = C::value_regs_get(ctx, v156, 0x1_usize);
                            let v160 = &constructor_add_with_flags_paired(ctx, I64, v153, v157);
                            let v161 = &constructor_adc_paired(ctx, I64, v155, v158);
                            let v162 = constructor_with_flags(ctx, v160, v161);
                            let v163 = C::output(ctx, v162);
                            let v164 = Some(v163);
                            // Rule at src\isa\aarch64\lower.isle line 110.
                            return v164;
                        }
                        let v2376 = C::dynamic_lane(ctx, v3);
                        if let Some(v2377) = v2376 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v147 = &constructor_vector_size(ctx, v3);
                            let v148 = constructor_add_vec(ctx, v48, v49, v147);
                            let v2380 = C::value_reg(ctx, v148);
                            let v2381 = C::output(ctx, v2380);
                            let v2382 = Some(v2381);
                            // Rule at src\isa\aarch64\lower_dynamic_neon.isle line 2.
                            return v2382;
                        }
                    }
                }
                &Opcode::Isub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v41 = C::fits_in_64(ctx, v3);
                        if let Some(v42) = v41 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v76 = constructor_imm12_from_negated_value(ctx, v45.1);
                            if let Some(v77) = v76 {
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v745 = constructor_add_imm(ctx, v42, v48, v77);
                                let v746 = constructor_output_reg(ctx, v745);
                                let v747 = Some(v746);
                                // Rule at src\isa\aarch64\lower.isle line 747.
                                return v747;
                            }
                            let v86 = &C::extended_value_from_value(ctx, v45.1);
                            if let Some(v87) = v86 {
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v748 = constructor_sub_extend(ctx, v42, v48, v87);
                                let v749 = constructor_output_reg(ctx, v748);
                                let v750 = Some(v749);
                                // Rule at src\isa\aarch64\lower.isle line 753.
                                return v750;
                            }
                            let v53 = C::def_inst(ctx, v45.1);
                            if let Some(v54) = v53 {
                                let v55 = &C::inst_data_value(ctx, v54);
                                match v55 {
                                    &InstructionData::Binary {
                                        opcode: ref v96,
                                        args: ref v97,
                                    } => {
                                        if let &Opcode::Imul = v96 {
                                            let v98 = C::unpack_value_array_2(ctx, v97);
                                            let v128 = C::put_in_reg(ctx, v98.0);
                                            let v129 = C::put_in_reg(ctx, v98.1);
                                            let v130 = C::put_in_reg(ctx, v45.0);
                                            let v140 = constructor_msub(ctx, v42, v128, v129, v130);
                                            let v141 = constructor_output_reg(ctx, v140);
                                            let v142 = Some(v141);
                                            // Rule at src\isa\aarch64\lower.isle line 101.
                                            return v142;
                                        }
                                    }
                                    &InstructionData::UnaryImm {
                                        opcode: ref v56,
                                        imm: v57,
                                    } => {
                                        if let &Opcode::Iconst = v56 {
                                            let v58 = C::u64_from_imm64(ctx, v57);
                                            let v59 = C::imm12_from_u64(ctx, v58);
                                            if let Some(v60) = v59 {
                                                let v48 = C::put_in_reg(ctx, v45.0);
                                                let v742 = constructor_sub_imm(ctx, v42, v48, v60);
                                                let v743 = constructor_output_reg(ctx, v742);
                                                let v744 = Some(v743);
                                                // Rule at src\isa\aarch64\lower.isle line 742.
                                                return v744;
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        if v3 == I128 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v151 = C::put_in_regs(ctx, v45.0);
                            let v757 = C::put_in_regs(ctx, v45.1);
                            let v758 = constructor_sub_i128(ctx, v151, v757);
                            let v759 = C::output(ctx, v758);
                            let v760 = Some(v759);
                            // Rule at src\isa\aarch64\lower.isle line 768.
                            return v760;
                        }
                        let v143 = C::multi_lane(ctx, v3);
                        if let Some(v144) = v143 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v147 = &constructor_vector_size(ctx, v3);
                            let v754 = constructor_sub_vec(ctx, v48, v49, v147);
                            let v755 = constructor_output_reg(ctx, v754);
                            let v756 = Some(v755);
                            // Rule at src\isa\aarch64\lower.isle line 764.
                            return v756;
                        }
                        if let Some(v42) = v41 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v53 = C::def_inst(ctx, v45.1);
                            if let Some(v54) = v53 {
                                let v55 = &C::inst_data_value(ctx, v54);
                                if let &InstructionData::Binary {
                                    opcode: ref v96,
                                    args: ref v97,
                                } = v55 {
                                    if let &Opcode::Ishl = v96 {
                                        let v98 = C::unpack_value_array_2(ctx, v97);
                                        let v101 = C::def_inst(ctx, v98.1);
                                        if let Some(v102) = v101 {
                                            let v103 = &C::inst_data_value(ctx, v102);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v104,
                                                imm: v105,
                                            } = v103 {
                                                if let &Opcode::Iconst = v104 {
                                                    let v106 = C::lshl_from_imm64(ctx, v42, v105);
                                                    if let Some(v107) = v106 {
                                                        let v48 = C::put_in_reg(ctx, v45.0);
                                                        let v108 = C::put_in_reg(ctx, v98.0);
                                                        let v751 = constructor_sub_shift(ctx, v42, v48, v108, v107);
                                                        let v752 = constructor_output_reg(ctx, v751);
                                                        let v753 = Some(v752);
                                                        // Rule at src\isa\aarch64\lower.isle line 758.
                                                        return v753;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v739 = constructor_sub(ctx, v42, v48, v49);
                            let v740 = constructor_output_reg(ctx, v739);
                            let v741 = Some(v740);
                            // Rule at src\isa\aarch64\lower.isle line 738.
                            return v741;
                        }
                        let v2376 = C::dynamic_lane(ctx, v3);
                        if let Some(v2377) = v2376 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v147 = &constructor_vector_size(ctx, v3);
                            let v754 = constructor_sub_vec(ctx, v48, v49, v147);
                            let v2383 = C::value_reg(ctx, v754);
                            let v2384 = C::output(ctx, v2383);
                            let v2385 = Some(v2384);
                            // Rule at src\isa\aarch64\lower_dynamic_neon.isle line 6.
                            return v2385;
                        }
                    }
                }
                &Opcode::Imul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I128 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v53 = C::def_inst(ctx, v45.1);
                                if let Some(v54) = v53 {
                                    let v55 = &C::inst_data_value(ctx, v54);
                                    if let &InstructionData::Unary {
                                        opcode: ref v406,
                                        arg: v407,
                                    } = v55 {
                                        match v406 {
                                            &Opcode::Uextend => {
                                                let v64 = C::def_inst(ctx, v45.0);
                                                if let Some(v65) = v64 {
                                                    let v66 = &C::inst_data_value(ctx, v65);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v404,
                                                        arg: v405,
                                                    } = v66 {
                                                        if let &Opcode::Uextend = v404 {
                                                            let v801 = constructor_put_in_reg_zext64(ctx, v405);
                                                            let v802 = constructor_put_in_reg_zext64(ctx, v407);
                                                            let v372 = C::zero_reg(ctx);
                                                            let v803 = constructor_madd(ctx, I64, v801, v802, v372);
                                                            let v804 = constructor_umulh(ctx, I64, v801, v802);
                                                            let v805 = C::value_regs(ctx, v803, v804);
                                                            let v806 = C::output(ctx, v805);
                                                            let v807 = Some(v806);
                                                            // Rule at src\isa\aarch64\lower.isle line 842.
                                                            return v807;
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::Sextend => {
                                                let v64 = C::def_inst(ctx, v45.0);
                                                if let Some(v65) = v64 {
                                                    let v66 = &C::inst_data_value(ctx, v65);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v404,
                                                        arg: v405,
                                                    } = v66 {
                                                        if let &Opcode::Sextend = v404 {
                                                            let v808 = constructor_put_in_reg_sext64(ctx, v405);
                                                            let v809 = constructor_put_in_reg_sext64(ctx, v407);
                                                            let v372 = C::zero_reg(ctx);
                                                            let v810 = constructor_madd(ctx, I64, v808, v809, v372);
                                                            let v811 = constructor_smulh(ctx, I64, v808, v809);
                                                            let v812 = C::value_regs(ctx, v810, v811);
                                                            let v813 = C::output(ctx, v812);
                                                            let v814 = Some(v813);
                                                            // Rule at src\isa\aarch64\lower.isle line 850.
                                                            return v814;
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                                let v151 = C::put_in_regs(ctx, v45.0);
                                let v153 = C::value_regs_get(ctx, v151, 0x0_usize);
                                let v155 = C::value_regs_get(ctx, v151, 0x1_usize);
                                let v156 = C::put_in_regs(ctx, v45.1);
                                let v157 = C::value_regs_get(ctx, v156, 0x0_usize);
                                let v158 = C::value_regs_get(ctx, v156, 0x1_usize);
                                let v793 = constructor_umulh(ctx, I64, v153, v157);
                                let v794 = constructor_madd(ctx, I64, v153, v158, v793);
                                let v795 = constructor_madd(ctx, I64, v155, v157, v794);
                                let v796 = C::zero_reg(ctx);
                                let v797 = constructor_madd(ctx, I64, v153, v157, v796);
                                let v798 = C::value_regs(ctx, v797, v795);
                                let v799 = C::output(ctx, v798);
                                let v800 = Some(v799);
                                // Rule at src\isa\aarch64\lower.isle line 812.
                                return v800;
                            }
                            I16X8 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v53 = C::def_inst(ctx, v45.1);
                                if let Some(v54) = v53 {
                                    let v55 = &C::inst_data_value(ctx, v54);
                                    if let &InstructionData::Unary {
                                        opcode: ref v406,
                                        arg: v407,
                                    } = v55 {
                                        match v406 {
                                            &Opcode::SwidenLow => {
                                                let v64 = C::def_inst(ctx, v45.0);
                                                if let Some(v65) = v64 {
                                                    let v66 = &C::inst_data_value(ctx, v65);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v404,
                                                        arg: v405,
                                                    } = v66 {
                                                        if let &Opcode::SwidenLow = v404 {
                                                            let v829 = C::value_type(ctx, v405);
                                                            if v829 == I8X16 {
                                                                let v830 = C::value_type(ctx, v407);
                                                                if v830 == I8X16 {
                                                                    let v408 = C::put_in_reg(ctx, v405);
                                                                    let v831 = C::put_in_reg(ctx, v407);
                                                                    let v377 = false;
                                                                    let v832 = constructor_smull8(ctx, v408, v831, v377);
                                                                    let v833 = constructor_output_reg(ctx, v832);
                                                                    let v834 = Some(v833);
                                                                    // Rule at src\isa\aarch64\lower.isle line 931.
                                                                    return v834;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::SwidenHigh => {
                                                let v64 = C::def_inst(ctx, v45.0);
                                                if let Some(v65) = v64 {
                                                    let v66 = &C::inst_data_value(ctx, v65);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v404,
                                                        arg: v405,
                                                    } = v66 {
                                                        if let &Opcode::SwidenHigh = v404 {
                                                            let v829 = C::value_type(ctx, v405);
                                                            if v829 == I8X16 {
                                                                let v830 = C::value_type(ctx, v407);
                                                                if v830 == I8X16 {
                                                                    let v408 = C::put_in_reg(ctx, v405);
                                                                    let v831 = C::put_in_reg(ctx, v407);
                                                                    let v378 = true;
                                                                    let v835 = constructor_smull8(ctx, v408, v831, v378);
                                                                    let v836 = constructor_output_reg(ctx, v835);
                                                                    let v837 = Some(v836);
                                                                    // Rule at src\isa\aarch64\lower.isle line 937.
                                                                    return v837;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenLow => {
                                                let v64 = C::def_inst(ctx, v45.0);
                                                if let Some(v65) = v64 {
                                                    let v66 = &C::inst_data_value(ctx, v65);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v404,
                                                        arg: v405,
                                                    } = v66 {
                                                        if let &Opcode::UwidenLow = v404 {
                                                            let v829 = C::value_type(ctx, v405);
                                                            if v829 == I8X16 {
                                                                let v830 = C::value_type(ctx, v407);
                                                                if v830 == I8X16 {
                                                                    let v408 = C::put_in_reg(ctx, v405);
                                                                    let v831 = C::put_in_reg(ctx, v407);
                                                                    let v377 = false;
                                                                    let v838 = constructor_umull8(ctx, v408, v831, v377);
                                                                    let v839 = constructor_output_reg(ctx, v838);
                                                                    let v840 = Some(v839);
                                                                    // Rule at src\isa\aarch64\lower.isle line 943.
                                                                    return v840;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenHigh => {
                                                let v64 = C::def_inst(ctx, v45.0);
                                                if let Some(v65) = v64 {
                                                    let v66 = &C::inst_data_value(ctx, v65);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v404,
                                                        arg: v405,
                                                    } = v66 {
                                                        if let &Opcode::UwidenHigh = v404 {
                                                            let v829 = C::value_type(ctx, v405);
                                                            if v829 == I8X16 {
                                                                let v830 = C::value_type(ctx, v407);
                                                                if v830 == I8X16 {
                                                                    let v408 = C::put_in_reg(ctx, v405);
                                                                    let v831 = C::put_in_reg(ctx, v407);
                                                                    let v378 = true;
                                                                    let v841 = constructor_umull8(ctx, v408, v831, v378);
                                                                    let v842 = constructor_output_reg(ctx, v841);
                                                                    let v843 = Some(v842);
                                                                    // Rule at src\isa\aarch64\lower.isle line 949.
                                                                    return v843;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                            I32X4 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v53 = C::def_inst(ctx, v45.1);
                                if let Some(v54) = v53 {
                                    let v55 = &C::inst_data_value(ctx, v54);
                                    if let &InstructionData::Unary {
                                        opcode: ref v406,
                                        arg: v407,
                                    } = v55 {
                                        match v406 {
                                            &Opcode::SwidenLow => {
                                                let v64 = C::def_inst(ctx, v45.0);
                                                if let Some(v65) = v64 {
                                                    let v66 = &C::inst_data_value(ctx, v65);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v404,
                                                        arg: v405,
                                                    } = v66 {
                                                        if let &Opcode::SwidenLow = v404 {
                                                            let v829 = C::value_type(ctx, v405);
                                                            if v829 == I16X8 {
                                                                let v830 = C::value_type(ctx, v407);
                                                                if v830 == I16X8 {
                                                                    let v408 = C::put_in_reg(ctx, v405);
                                                                    let v831 = C::put_in_reg(ctx, v407);
                                                                    let v377 = false;
                                                                    let v844 = constructor_smull16(ctx, v408, v831, v377);
                                                                    let v845 = constructor_output_reg(ctx, v844);
                                                                    let v846 = Some(v845);
                                                                    // Rule at src\isa\aarch64\lower.isle line 955.
                                                                    return v846;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::SwidenHigh => {
                                                let v64 = C::def_inst(ctx, v45.0);
                                                if let Some(v65) = v64 {
                                                    let v66 = &C::inst_data_value(ctx, v65);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v404,
                                                        arg: v405,
                                                    } = v66 {
                                                        if let &Opcode::SwidenHigh = v404 {
                                                            let v829 = C::value_type(ctx, v405);
                                                            if v829 == I16X8 {
                                                                let v830 = C::value_type(ctx, v407);
                                                                if v830 == I16X8 {
                                                                    let v408 = C::put_in_reg(ctx, v405);
                                                                    let v831 = C::put_in_reg(ctx, v407);
                                                                    let v378 = true;
                                                                    let v847 = constructor_smull16(ctx, v408, v831, v378);
                                                                    let v848 = constructor_output_reg(ctx, v847);
                                                                    let v849 = Some(v848);
                                                                    // Rule at src\isa\aarch64\lower.isle line 961.
                                                                    return v849;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenLow => {
                                                let v64 = C::def_inst(ctx, v45.0);
                                                if let Some(v65) = v64 {
                                                    let v66 = &C::inst_data_value(ctx, v65);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v404,
                                                        arg: v405,
                                                    } = v66 {
                                                        if let &Opcode::UwidenLow = v404 {
                                                            let v829 = C::value_type(ctx, v405);
                                                            if v829 == I16X8 {
                                                                let v830 = C::value_type(ctx, v407);
                                                                if v830 == I16X8 {
                                                                    let v408 = C::put_in_reg(ctx, v405);
                                                                    let v831 = C::put_in_reg(ctx, v407);
                                                                    let v377 = false;
                                                                    let v850 = constructor_umull16(ctx, v408, v831, v377);
                                                                    let v851 = constructor_output_reg(ctx, v850);
                                                                    let v852 = Some(v851);
                                                                    // Rule at src\isa\aarch64\lower.isle line 967.
                                                                    return v852;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenHigh => {
                                                let v64 = C::def_inst(ctx, v45.0);
                                                if let Some(v65) = v64 {
                                                    let v66 = &C::inst_data_value(ctx, v65);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v404,
                                                        arg: v405,
                                                    } = v66 {
                                                        if let &Opcode::UwidenHigh = v404 {
                                                            let v829 = C::value_type(ctx, v405);
                                                            if v829 == I16X8 {
                                                                let v830 = C::value_type(ctx, v407);
                                                                if v830 == I16X8 {
                                                                    let v408 = C::put_in_reg(ctx, v405);
                                                                    let v831 = C::put_in_reg(ctx, v407);
                                                                    let v378 = true;
                                                                    let v853 = constructor_umull16(ctx, v408, v831, v378);
                                                                    let v854 = constructor_output_reg(ctx, v853);
                                                                    let v855 = Some(v854);
                                                                    // Rule at src\isa\aarch64\lower.isle line 973.
                                                                    return v855;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                            I64X2 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v53 = C::def_inst(ctx, v45.1);
                                if let Some(v54) = v53 {
                                    let v55 = &C::inst_data_value(ctx, v54);
                                    if let &InstructionData::Unary {
                                        opcode: ref v406,
                                        arg: v407,
                                    } = v55 {
                                        match v406 {
                                            &Opcode::SwidenLow => {
                                                let v64 = C::def_inst(ctx, v45.0);
                                                if let Some(v65) = v64 {
                                                    let v66 = &C::inst_data_value(ctx, v65);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v404,
                                                        arg: v405,
                                                    } = v66 {
                                                        if let &Opcode::SwidenLow = v404 {
                                                            let v829 = C::value_type(ctx, v405);
                                                            if v829 == I32X4 {
                                                                let v830 = C::value_type(ctx, v407);
                                                                if v830 == I32X4 {
                                                                    let v408 = C::put_in_reg(ctx, v405);
                                                                    let v831 = C::put_in_reg(ctx, v407);
                                                                    let v377 = false;
                                                                    let v856 = constructor_smull32(ctx, v408, v831, v377);
                                                                    let v857 = constructor_output_reg(ctx, v856);
                                                                    let v858 = Some(v857);
                                                                    // Rule at src\isa\aarch64\lower.isle line 979.
                                                                    return v858;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::SwidenHigh => {
                                                let v64 = C::def_inst(ctx, v45.0);
                                                if let Some(v65) = v64 {
                                                    let v66 = &C::inst_data_value(ctx, v65);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v404,
                                                        arg: v405,
                                                    } = v66 {
                                                        if let &Opcode::SwidenHigh = v404 {
                                                            let v829 = C::value_type(ctx, v405);
                                                            if v829 == I32X4 {
                                                                let v830 = C::value_type(ctx, v407);
                                                                if v830 == I32X4 {
                                                                    let v408 = C::put_in_reg(ctx, v405);
                                                                    let v831 = C::put_in_reg(ctx, v407);
                                                                    let v378 = true;
                                                                    let v859 = constructor_smull32(ctx, v408, v831, v378);
                                                                    let v860 = constructor_output_reg(ctx, v859);
                                                                    let v861 = Some(v860);
                                                                    // Rule at src\isa\aarch64\lower.isle line 985.
                                                                    return v861;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenLow => {
                                                let v64 = C::def_inst(ctx, v45.0);
                                                if let Some(v65) = v64 {
                                                    let v66 = &C::inst_data_value(ctx, v65);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v404,
                                                        arg: v405,
                                                    } = v66 {
                                                        if let &Opcode::UwidenLow = v404 {
                                                            let v829 = C::value_type(ctx, v405);
                                                            if v829 == I32X4 {
                                                                let v830 = C::value_type(ctx, v407);
                                                                if v830 == I32X4 {
                                                                    let v408 = C::put_in_reg(ctx, v405);
                                                                    let v831 = C::put_in_reg(ctx, v407);
                                                                    let v377 = false;
                                                                    let v862 = constructor_umull32(ctx, v408, v831, v377);
                                                                    let v863 = constructor_output_reg(ctx, v862);
                                                                    let v864 = Some(v863);
                                                                    // Rule at src\isa\aarch64\lower.isle line 991.
                                                                    return v864;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenHigh => {
                                                let v64 = C::def_inst(ctx, v45.0);
                                                if let Some(v65) = v64 {
                                                    let v66 = &C::inst_data_value(ctx, v65);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v404,
                                                        arg: v405,
                                                    } = v66 {
                                                        if let &Opcode::UwidenHigh = v404 {
                                                            let v829 = C::value_type(ctx, v405);
                                                            if v829 == I32X4 {
                                                                let v830 = C::value_type(ctx, v407);
                                                                if v830 == I32X4 {
                                                                    let v408 = C::put_in_reg(ctx, v405);
                                                                    let v831 = C::put_in_reg(ctx, v407);
                                                                    let v378 = true;
                                                                    let v865 = constructor_umull32(ctx, v408, v831, v378);
                                                                    let v866 = constructor_output_reg(ctx, v865);
                                                                    let v867 = Some(v866);
                                                                    // Rule at src\isa\aarch64\lower.isle line 997.
                                                                    return v867;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v820 = constructor_rev64(ctx, v49, &VectorSize::Size32x4);
                                let v821 = constructor_mul(ctx, v820, v48, &VectorSize::Size32x4);
                                let v822 = constructor_xtn(ctx, v48, &ScalarSize::Size32);
                                let v823 = constructor_addp(ctx, v821, v821, &VectorSize::Size32x4);
                                let v824 = constructor_xtn(ctx, v49, &ScalarSize::Size32);
                                let v377 = false;
                                let v825 = constructor_shll32(ctx, v823, v377);
                                let v826 = constructor_umlal32(ctx, v825, v824, v822, v377);
                                let v827 = constructor_output_reg(ctx, v826);
                                let v828 = Some(v827);
                                // Rule at src\isa\aarch64\lower.isle line 892.
                                return v828;
                            }
                            _ => {}
                        }
                        let v761 = C::ty_vec128(ctx, v3);
                        if let Some(v762) = v761 {
                            let v815 = C::not_i64x2(ctx, v762);
                            if let Some(v816) = v815 {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v763 = &constructor_vector_size(ctx, v762);
                                let v817 = constructor_mul(ctx, v48, v49, v763);
                                let v818 = constructor_output_reg(ctx, v817);
                                let v819 = Some(v818);
                                // Rule at src\isa\aarch64\lower.isle line 860.
                                return v819;
                            }
                        }
                        let v41 = C::fits_in_64(ctx, v3);
                        if let Some(v42) = v41 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v372 = C::zero_reg(ctx);
                            let v790 = constructor_madd(ctx, v42, v48, v49, v372);
                            let v791 = constructor_output_reg(ctx, v790);
                            let v792 = Some(v791);
                            // Rule at src\isa\aarch64\lower.isle line 808.
                            return v792;
                        }
                        let v462 = C::lane_fits_in_32(ctx, v3);
                        if let Some(v463) = v462 {
                            let v2386 = C::dynamic_lane(ctx, v463);
                            if let Some(v2387) = v2386 {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v465 = &constructor_vector_size(ctx, v463);
                                let v2391 = constructor_vec_rrr(ctx, &VecALUOp::Mul, v48, v49, v465);
                                let v2392 = C::value_reg(ctx, v2391);
                                let v2393 = C::output(ctx, v2392);
                                let v2394 = Some(v2393);
                                // Rule at src\isa\aarch64\lower_dynamic_neon.isle line 10.
                                return v2394;
                            }
                        }
                    }
                }
                &Opcode::Umulhi => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v879 = constructor_umulh(ctx, I64, v48, v49);
                            let v880 = constructor_output_reg(ctx, v879);
                            let v881 = Some(v880);
                            // Rule at src\isa\aarch64\lower.isle line 1016.
                            return v881;
                        }
                        let v431 = C::fits_in_32(ctx, v3);
                        if let Some(v432) = v431 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v882 = constructor_put_in_reg_zext64(ctx, v45.0);
                            let v883 = constructor_put_in_reg_zext64(ctx, v45.1);
                            let v372 = C::zero_reg(ctx);
                            let v884 = constructor_madd(ctx, I64, v882, v883, v372);
                            let v874 = C::ty_bits(ctx, v432);
                            let v875 = C::imm_shift_from_u8(ctx, v874);
                            let v885 = constructor_lsr_imm(ctx, I64, v884, v875);
                            let v886 = C::value_reg(ctx, v885);
                            let v887 = C::output(ctx, v886);
                            let v888 = Some(v887);
                            // Rule at src\isa\aarch64\lower.isle line 1019.
                            return v888;
                        }
                    }
                }
                &Opcode::Smulhi => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v868 = constructor_smulh(ctx, I64, v48, v49);
                            let v869 = constructor_output_reg(ctx, v868);
                            let v870 = Some(v869);
                            // Rule at src\isa\aarch64\lower.isle line 1004.
                            return v870;
                        }
                        let v431 = C::fits_in_32(ctx, v3);
                        if let Some(v432) = v431 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v871 = constructor_put_in_reg_sext64(ctx, v45.0);
                            let v872 = constructor_put_in_reg_sext64(ctx, v45.1);
                            let v372 = C::zero_reg(ctx);
                            let v873 = constructor_madd(ctx, I64, v871, v872, v372);
                            let v874 = C::ty_bits(ctx, v432);
                            let v875 = C::imm_shift_from_u8(ctx, v874);
                            let v876 = constructor_asr_imm(ctx, I64, v873, v875);
                            let v877 = constructor_output_reg(ctx, v876);
                            let v878 = Some(v877);
                            // Rule at src\isa\aarch64\lower.isle line 1007.
                            return v878;
                        }
                    }
                }
                &Opcode::SqmulRoundSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v143 = C::multi_lane(ctx, v3);
                        if let Some(v144) = v143 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v147 = &constructor_vector_size(ctx, v3);
                            let v470 = constructor_vec_rrr(ctx, &VecALUOp::Sqrdmulh, v48, v49, v147);
                            let v471 = constructor_output_reg(ctx, v470);
                            let v472 = Some(v471);
                            // Rule at src\isa\aarch64\lower.isle line 406.
                            return v472;
                        }
                    }
                }
                &Opcode::Udiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v890 = constructor_put_nonzero_in_reg(ctx, v45.1, &ExtType::Unsigned, I64);
                            let v891 = constructor_a64_udiv(ctx, I64, v48, v890);
                            let v892 = constructor_output_reg(ctx, v891);
                            let v893 = Some(v892);
                            // Rule at src\isa\aarch64\lower.isle line 1067.
                            return v893;
                        }
                        let v431 = C::fits_in_32(ctx, v3);
                        if let Some(v432) = v431 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v895 = constructor_put_in_reg_zext32(ctx, v45.0);
                            let v896 = constructor_put_nonzero_in_reg(ctx, v45.1, &ExtType::Unsigned, v432);
                            let v897 = constructor_a64_udiv(ctx, I32, v895, v896);
                            let v898 = constructor_output_reg(ctx, v897);
                            let v899 = Some(v898);
                            // Rule at src\isa\aarch64\lower.isle line 1070.
                            return v899;
                        }
                    }
                }
                &Opcode::Sdiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v45 = C::unpack_value_array_2(ctx, v44);
                        let v53 = C::def_inst(ctx, v45.1);
                        if let Some(v54) = v53 {
                            let v55 = &C::inst_data_value(ctx, v54);
                            if let &InstructionData::UnaryImm {
                                opcode: ref v56,
                                imm: v57,
                            } = v55 {
                                if let &Opcode::Iconst = v56 {
                                    let v3 = C::value_type(ctx, v2);
                                    if v3 == I64 {
                                        let v914 = C::safe_divisor_from_imm64(ctx, I64, v57);
                                        if let Some(v915) = v914 {
                                            let v871 = constructor_put_in_reg_sext64(ctx, v45.0);
                                            let v917 = constructor_imm(ctx, I64, &ImmExtend::Sign, v915);
                                            let v918 = constructor_a64_sdiv(ctx, I64, v871, v917);
                                            let v919 = constructor_output_reg(ctx, v918);
                                            let v920 = Some(v919);
                                            // Rule at src\isa\aarch64\lower.isle line 1114.
                                            return v920;
                                        }
                                    }
                                    let v431 = C::fits_in_32(ctx, v3);
                                    if let Some(v432) = v431 {
                                        let v921 = C::safe_divisor_from_imm64(ctx, v432, v57);
                                        if let Some(v922) = v921 {
                                            let v907 = constructor_put_in_reg_sext32(ctx, v45.0);
                                            let v923 = constructor_imm(ctx, v432, &ImmExtend::Sign, v922);
                                            let v924 = constructor_a64_sdiv(ctx, v432, v907, v923);
                                            let v925 = constructor_output_reg(ctx, v924);
                                            let v926 = Some(v925);
                                            // Rule at src\isa\aarch64\lower.isle line 1118.
                                            return v926;
                                        }
                                    }
                                }
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64 {
                            let v871 = constructor_put_in_reg_sext64(ctx, v45.0);
                            let v901 = constructor_put_nonzero_in_reg(ctx, v45.1, &ExtType::Signed, I64);
                            let v902 = constructor_intmin_check(ctx, I64, v871);
                            let v903 = constructor_trap_if_div_overflow(ctx, I64, v902, v871, v901);
                            let v904 = constructor_a64_sdiv(ctx, I64, v903, v901);
                            let v905 = constructor_output_reg(ctx, v904);
                            let v906 = Some(v905);
                            // Rule at src\isa\aarch64\lower.isle line 1096.
                            return v906;
                        }
                        let v431 = C::fits_in_32(ctx, v3);
                        if let Some(v432) = v431 {
                            let v907 = constructor_put_in_reg_sext32(ctx, v45.0);
                            let v908 = constructor_put_nonzero_in_reg(ctx, v45.1, &ExtType::Signed, v432);
                            let v909 = constructor_intmin_check(ctx, v432, v907);
                            let v910 = constructor_trap_if_div_overflow(ctx, v432, v909, v907, v908);
                            let v911 = constructor_a64_sdiv(ctx, v432, v910, v908);
                            let v912 = constructor_output_reg(ctx, v911);
                            let v913 = Some(v912);
                            // Rule at src\isa\aarch64\lower.isle line 1104.
                            return v913;
                        }
                    }
                }
                &Opcode::Urem => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v882 = constructor_put_in_reg_zext64(ctx, v45.0);
                            let v890 = constructor_put_nonzero_in_reg(ctx, v45.1, &ExtType::Unsigned, I64);
                            let v927 = constructor_a64_udiv(ctx, I64, v882, v890);
                            let v928 = constructor_msub(ctx, I64, v927, v890, v882);
                            let v929 = constructor_output_reg(ctx, v928);
                            let v930 = Some(v929);
                            // Rule at src\isa\aarch64\lower.isle line 1140.
                            return v930;
                        }
                        let v431 = C::fits_in_32(ctx, v3);
                        if let Some(v432) = v431 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v895 = constructor_put_in_reg_zext32(ctx, v45.0);
                            let v896 = constructor_put_nonzero_in_reg(ctx, v45.1, &ExtType::Unsigned, v432);
                            let v931 = constructor_a64_udiv(ctx, v432, v895, v896);
                            let v932 = constructor_msub(ctx, v432, v931, v896, v895);
                            let v933 = constructor_output_reg(ctx, v932);
                            let v934 = Some(v933);
                            // Rule at src\isa\aarch64\lower.isle line 1147.
                            return v934;
                        }
                    }
                }
                &Opcode::Srem => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v871 = constructor_put_in_reg_sext64(ctx, v45.0);
                            let v901 = constructor_put_nonzero_in_reg(ctx, v45.1, &ExtType::Signed, I64);
                            let v935 = constructor_a64_sdiv(ctx, I64, v871, v901);
                            let v936 = constructor_msub(ctx, I64, v935, v901, v871);
                            let v937 = constructor_output_reg(ctx, v936);
                            let v938 = Some(v937);
                            // Rule at src\isa\aarch64\lower.isle line 1154.
                            return v938;
                        }
                        let v431 = C::fits_in_32(ctx, v3);
                        if let Some(v432) = v431 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v907 = constructor_put_in_reg_sext32(ctx, v45.0);
                            let v908 = constructor_put_nonzero_in_reg(ctx, v45.1, &ExtType::Signed, v432);
                            let v939 = constructor_a64_sdiv(ctx, v432, v907, v908);
                            let v940 = constructor_msub(ctx, v432, v939, v908, v907);
                            let v941 = constructor_output_reg(ctx, v940);
                            let v942 = Some(v941);
                            // Rule at src\isa\aarch64\lower.isle line 1161.
                            return v942;
                        }
                    }
                }
                &Opcode::UaddOverflow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1157 = C::ty_32_or_64(ctx, v3);
                        if let Some(v1158) = v1157 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v2279 = constructor_overflow_op_normal(ctx, v1158, v45.0, v45.1, &ALUOp::AddS, &Cond::Hs);
                            let v2280 = Some(v2279);
                            // Rule at src\isa\aarch64\lower.isle line 2925.
                            return v2280;
                        }
                        let v1261 = C::fits_in_16(ctx, v3);
                        if let Some(v1262) = v1261 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v2275 = constructor_overflow_op_small(ctx, v1262, v45.0, v45.1, &ArgumentExtension::Uext, &ALUOp::Add);
                            let v2276 = Some(v2275);
                            // Rule at src\isa\aarch64\lower.isle line 2921.
                            return v2276;
                        }
                        if v3 == I128 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v2282 = constructor_overflow_op_128(ctx, v45.0, v45.1, &ALUOp::AddS, &ALUOp::AdcS, &Cond::Hs);
                            let v2283 = Some(v2282);
                            // Rule at src\isa\aarch64\lower.isle line 2929.
                            return v2283;
                        }
                    }
                }
                &Opcode::SaddOverflow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1157 = C::ty_32_or_64(ctx, v3);
                        if let Some(v1158) = v1157 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v2288 = constructor_overflow_op_normal(ctx, v1158, v45.0, v45.1, &ALUOp::AddS, &Cond::Vs);
                            let v2289 = Some(v2288);
                            // Rule at src\isa\aarch64\lower.isle line 2943.
                            return v2289;
                        }
                        let v1261 = C::fits_in_16(ctx, v3);
                        if let Some(v1262) = v1261 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v2285 = constructor_overflow_op_small(ctx, v1262, v45.0, v45.1, &ArgumentExtension::Sext, &ALUOp::Add);
                            let v2286 = Some(v2285);
                            // Rule at src\isa\aarch64\lower.isle line 2938.
                            return v2286;
                        }
                        if v3 == I128 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v2290 = constructor_overflow_op_128(ctx, v45.0, v45.1, &ALUOp::AddS, &ALUOp::AdcS, &Cond::Vs);
                            let v2291 = Some(v2290);
                            // Rule at src\isa\aarch64\lower.isle line 2949.
                            return v2291;
                        }
                    }
                }
                &Opcode::UsubOverflow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1157 = C::ty_32_or_64(ctx, v3);
                        if let Some(v1158) = v1157 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v2296 = constructor_overflow_op_normal(ctx, v1158, v45.0, v45.1, &ALUOp::SubS, &Cond::Lo);
                            let v2297 = Some(v2296);
                            // Rule at src\isa\aarch64\lower.isle line 2963.
                            return v2297;
                        }
                        let v1261 = C::fits_in_16(ctx, v3);
                        if let Some(v1262) = v1261 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v2293 = constructor_overflow_op_small(ctx, v1262, v45.0, v45.1, &ArgumentExtension::Uext, &ALUOp::Sub);
                            let v2294 = Some(v2293);
                            // Rule at src\isa\aarch64\lower.isle line 2958.
                            return v2294;
                        }
                        if v3 == I128 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v2299 = constructor_overflow_op_128(ctx, v45.0, v45.1, &ALUOp::SubS, &ALUOp::SbcS, &Cond::Lo);
                            let v2300 = Some(v2299);
                            // Rule at src\isa\aarch64\lower.isle line 2969.
                            return v2300;
                        }
                    }
                }
                &Opcode::SsubOverflow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1157 = C::ty_32_or_64(ctx, v3);
                        if let Some(v1158) = v1157 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v2303 = constructor_overflow_op_normal(ctx, v1158, v45.0, v45.1, &ALUOp::SubS, &Cond::Vs);
                            let v2304 = Some(v2303);
                            // Rule at src\isa\aarch64\lower.isle line 2983.
                            return v2304;
                        }
                        let v1261 = C::fits_in_16(ctx, v3);
                        if let Some(v1262) = v1261 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v2301 = constructor_overflow_op_small(ctx, v1262, v45.0, v45.1, &ArgumentExtension::Sext, &ALUOp::Sub);
                            let v2302 = Some(v2301);
                            // Rule at src\isa\aarch64\lower.isle line 2978.
                            return v2302;
                        }
                        if v3 == I128 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v2305 = constructor_overflow_op_128(ctx, v45.0, v45.1, &ALUOp::SubS, &ALUOp::SbcS, &Cond::Vs);
                            let v2306 = Some(v2305);
                            // Rule at src\isa\aarch64\lower.isle line 2989.
                            return v2306;
                        }
                    }
                }
                &Opcode::UmulOverflow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v372 = C::zero_reg(ctx);
                                let v2318 = constructor_umaddl(ctx, v48, v49, v372);
                                let v2320 = &constructor_cmp_extend(ctx, &OperandSize::Size64, v2318, v2318, &ExtendOp::UXTW);
                                let v2321 = &constructor_cset(ctx, &Cond::Ne);
                                let v2322 = constructor_with_flags_reg(ctx, v2320, v2321);
                                let v2323 = C::value_reg(ctx, v2318);
                                let v2324 = C::value_reg(ctx, v2322);
                                let v2325 = C::output_pair(ctx, v2323, v2324);
                                let v2326 = Some(v2325);
                                // Rule at src\isa\aarch64\lower.isle line 3015.
                                return v2326;
                            }
                            I64 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v372 = C::zero_reg(ctx);
                                let v2327 = constructor_madd(ctx, I64, v48, v49, v372);
                                let v1276 = C::put_in_reg(ctx, v45.0);
                                let v2328 = C::put_in_reg(ctx, v45.1);
                                let v2329 = constructor_umulh(ctx, I64, v1276, v2328);
                                let v2330 = C::u8_into_imm12(ctx, 0x0_u8);
                                let v2331 = &constructor_cmp64_imm(ctx, v2329, v2330);
                                let v2332 = &constructor_cset(ctx, &Cond::Ne);
                                let v2333 = constructor_with_flags_reg(ctx, v2331, v2332);
                                let v2334 = C::value_reg(ctx, v2327);
                                let v2335 = C::value_reg(ctx, v2333);
                                let v2336 = C::output_pair(ctx, v2334, v2335);
                                let v2337 = Some(v2336);
                                // Rule at src\isa\aarch64\lower.isle line 3029.
                                return v2337;
                            }
                            _ => {}
                        }
                        let v1261 = C::fits_in_16(ctx, v3);
                        if let Some(v1262) = v1261 {
                            let v2307 = &constructor_lower_extend_op(ctx, v1262, &ArgumentExtension::Uext);
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v2308 = constructor_put_in_reg_zext32(ctx, v45.0);
                            let v2309 = constructor_put_in_reg_zext32(ctx, v45.1);
                            let v1087 = C::zero_reg(ctx);
                            let v2310 = constructor_madd(ctx, v1262, v2308, v2309, v1087);
                            let v2311 = &constructor_cmp_extend(ctx, &OperandSize::Size32, v2310, v2310, v2307);
                            let v2312 = &constructor_cset(ctx, &Cond::Ne);
                            let v2313 = constructor_with_flags_reg(ctx, v2311, v2312);
                            let v2314 = C::value_reg(ctx, v2310);
                            let v2315 = C::value_reg(ctx, v2313);
                            let v2316 = C::output_pair(ctx, v2314, v2315);
                            let v2317 = Some(v2316);
                            // Rule at src\isa\aarch64\lower.isle line 2999.
                            return v2317;
                        }
                    }
                }
                &Opcode::SmulOverflow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v372 = C::zero_reg(ctx);
                                let v2348 = constructor_smaddl(ctx, v48, v49, v372);
                                let v2350 = &constructor_cmp_extend(ctx, &OperandSize::Size64, v2348, v2348, &ExtendOp::SXTW);
                                let v2321 = &constructor_cset(ctx, &Cond::Ne);
                                let v2351 = constructor_with_flags_reg(ctx, v2350, v2321);
                                let v2352 = C::value_reg(ctx, v2348);
                                let v2353 = C::value_reg(ctx, v2351);
                                let v2354 = C::output_pair(ctx, v2352, v2353);
                                let v2355 = Some(v2354);
                                // Rule at src\isa\aarch64\lower.isle line 3063.
                                return v2355;
                            }
                            I64 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v372 = C::zero_reg(ctx);
                                let v2327 = constructor_madd(ctx, I64, v48, v49, v372);
                                let v1276 = C::put_in_reg(ctx, v45.0);
                                let v2328 = C::put_in_reg(ctx, v45.1);
                                let v2356 = constructor_smulh(ctx, I64, v1276, v2328);
                                let v2358 = &constructor_cmp_rr_shift_asr(ctx, &OperandSize::Size64, v2356, v2327, 0x3f_u64);
                                let v2359 = &constructor_cset(ctx, &Cond::Ne);
                                let v2360 = constructor_with_flags_reg(ctx, v2358, v2359);
                                let v2361 = C::value_reg(ctx, v2327);
                                let v2362 = C::value_reg(ctx, v2360);
                                let v2363 = C::output_pair(ctx, v2361, v2362);
                                let v2364 = Some(v2363);
                                // Rule at src\isa\aarch64\lower.isle line 3077.
                                return v2364;
                            }
                            _ => {}
                        }
                        let v1261 = C::fits_in_16(ctx, v3);
                        if let Some(v1262) = v1261 {
                            let v2338 = &constructor_lower_extend_op(ctx, v1262, &ArgumentExtension::Sext);
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v2339 = constructor_put_in_reg_sext32(ctx, v45.0);
                            let v2340 = constructor_put_in_reg_sext32(ctx, v45.1);
                            let v1087 = C::zero_reg(ctx);
                            let v2341 = constructor_madd(ctx, v1262, v2339, v2340, v1087);
                            let v2342 = &constructor_cmp_extend(ctx, &OperandSize::Size32, v2341, v2341, v2338);
                            let v2312 = &constructor_cset(ctx, &Cond::Ne);
                            let v2343 = constructor_with_flags_reg(ctx, v2342, v2312);
                            let v2344 = C::value_reg(ctx, v2341);
                            let v2345 = C::value_reg(ctx, v2343);
                            let v2346 = C::output_pair(ctx, v2344, v2345);
                            let v2347 = Some(v2346);
                            // Rule at src\isa\aarch64\lower.isle line 3047.
                            return v2347;
                        }
                    }
                }
                &Opcode::Band => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v761 = C::ty_vec128(ctx, v3);
                        if let Some(v762) = v761 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v64 = C::def_inst(ctx, v45.0);
                            if let Some(v65) = v64 {
                                let v66 = &C::inst_data_value(ctx, v65);
                                if let &InstructionData::Unary {
                                    opcode: ref v404,
                                    arg: v405,
                                } = v66 {
                                    if let &Opcode::Bnot = v404 {
                                        let v72 = C::put_in_reg(ctx, v45.1);
                                        let v1130 = C::put_in_reg(ctx, v405);
                                        let v763 = &constructor_vector_size(ctx, v762);
                                        let v1131 = constructor_bic_vec(ctx, v72, v1130, v763);
                                        let v1132 = constructor_output_reg(ctx, v1131);
                                        let v1133 = Some(v1132);
                                        // Rule at src\isa\aarch64\lower.isle line 1404.
                                        return v1133;
                                    }
                                }
                            }
                            let v53 = C::def_inst(ctx, v45.1);
                            if let Some(v54) = v53 {
                                let v55 = &C::inst_data_value(ctx, v54);
                                if let &InstructionData::Unary {
                                    opcode: ref v406,
                                    arg: v407,
                                } = v55 {
                                    if let &Opcode::Bnot = v406 {
                                        let v48 = C::put_in_reg(ctx, v45.0);
                                        let v831 = C::put_in_reg(ctx, v407);
                                        let v763 = &constructor_vector_size(ctx, v762);
                                        let v1127 = constructor_bic_vec(ctx, v48, v831, v763);
                                        let v1128 = constructor_output_reg(ctx, v1127);
                                        let v1129 = Some(v1128);
                                        // Rule at src\isa\aarch64\lower.isle line 1402.
                                        return v1129;
                                    }
                                }
                            }
                        }
                        if v3 == I128 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v64 = C::def_inst(ctx, v45.0);
                            if let Some(v65) = v64 {
                                let v66 = &C::inst_data_value(ctx, v65);
                                if let &InstructionData::Unary {
                                    opcode: ref v404,
                                    arg: v405,
                                } = v66 {
                                    if let &Opcode::Bnot = v404 {
                                        let v1124 = constructor_i128_alu_bitop(ctx, &ALUOp::AndNot, I64, v45.1, v405);
                                        let v1125 = C::output(ctx, v1124);
                                        let v1126 = Some(v1125);
                                        // Rule at src\isa\aarch64\lower.isle line 1400.
                                        return v1126;
                                    }
                                }
                            }
                            let v53 = C::def_inst(ctx, v45.1);
                            if let Some(v54) = v53 {
                                let v55 = &C::inst_data_value(ctx, v54);
                                if let &InstructionData::Unary {
                                    opcode: ref v406,
                                    arg: v407,
                                } = v55 {
                                    if let &Opcode::Bnot = v406 {
                                        let v1121 = constructor_i128_alu_bitop(ctx, &ALUOp::AndNot, I64, v45.0, v407);
                                        let v1122 = C::output(ctx, v1121);
                                        let v1123 = Some(v1122);
                                        // Rule at src\isa\aarch64\lower.isle line 1399.
                                        return v1123;
                                    }
                                }
                            }
                        }
                        let v41 = C::fits_in_64(ctx, v3);
                        if let Some(v42) = v41 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v64 = C::def_inst(ctx, v45.0);
                            if let Some(v65) = v64 {
                                let v66 = &C::inst_data_value(ctx, v65);
                                if let &InstructionData::Unary {
                                    opcode: ref v404,
                                    arg: v405,
                                } = v66 {
                                    if let &Opcode::Bnot = v404 {
                                        let v1118 = constructor_alu_rs_imm_logic(ctx, &ALUOp::AndNot, v42, v45.1, v405);
                                        let v1119 = constructor_output_reg(ctx, v1118);
                                        let v1120 = Some(v1119);
                                        // Rule at src\isa\aarch64\lower.isle line 1396.
                                        return v1120;
                                    }
                                }
                            }
                            let v53 = C::def_inst(ctx, v45.1);
                            if let Some(v54) = v53 {
                                let v55 = &C::inst_data_value(ctx, v54);
                                if let &InstructionData::Unary {
                                    opcode: ref v406,
                                    arg: v407,
                                } = v55 {
                                    if let &Opcode::Bnot = v406 {
                                        let v1115 = constructor_alu_rs_imm_logic(ctx, &ALUOp::AndNot, v42, v45.0, v407);
                                        let v1116 = constructor_output_reg(ctx, v1115);
                                        let v1117 = Some(v1116);
                                        // Rule at src\isa\aarch64\lower.isle line 1394.
                                        return v1117;
                                    }
                                }
                            }
                        }
                        if v3 == I128 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v1108 = constructor_i128_alu_bitop(ctx, &ALUOp::And, I64, v45.0, v45.1);
                            let v1109 = C::output(ctx, v1108);
                            let v1110 = Some(v1109);
                            // Rule at src\isa\aarch64\lower.isle line 1386.
                            return v1110;
                        }
                        if let Some(v42) = v41 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v1105 = constructor_alu_rs_imm_logic_commutative(ctx, &ALUOp::And, v42, v45.0, v45.1);
                            let v1106 = constructor_output_reg(ctx, v1105);
                            let v1107 = Some(v1106);
                            // Rule at src\isa\aarch64\lower.isle line 1383.
                            return v1107;
                        }
                        if let Some(v762) = v761 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v763 = &constructor_vector_size(ctx, v762);
                            let v1111 = constructor_and_vec(ctx, v48, v49, v763);
                            let v1112 = constructor_output_reg(ctx, v1111);
                            let v1113 = Some(v1112);
                            // Rule at src\isa\aarch64\lower.isle line 1388.
                            return v1113;
                        }
                    }
                }
                &Opcode::Bor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v45 = C::unpack_value_array_2(ctx, v44);
                        let v64 = C::def_inst(ctx, v45.0);
                        if let Some(v65) = v64 {
                            let v66 = &C::inst_data_value(ctx, v65);
                            match v66 {
                                &InstructionData::Binary {
                                    opcode: ref v112,
                                    args: ref v113,
                                } => {
                                    match v112 {
                                        &Opcode::Ishl => {
                                            let v53 = C::def_inst(ctx, v45.1);
                                            if let Some(v54) = v53 {
                                                let v55 = &C::inst_data_value(ctx, v54);
                                                if let &InstructionData::Binary {
                                                    opcode: ref v96,
                                                    args: ref v97,
                                                } = v55 {
                                                    if let &Opcode::Ushr = v96 {
                                                        let v98 = C::unpack_value_array_2(ctx, v97);
                                                        let v101 = C::def_inst(ctx, v98.1);
                                                        if let Some(v102) = v101 {
                                                            let v103 = &C::inst_data_value(ctx, v102);
                                                            if let &InstructionData::UnaryImm {
                                                                opcode: ref v104,
                                                                imm: v105,
                                                            } = v103 {
                                                                if let &Opcode::Iconst = v104 {
                                                                    let v114 = C::unpack_value_array_2(ctx, v113);
                                                                    let v117 = C::def_inst(ctx, v114.1);
                                                                    if let Some(v118) = v117 {
                                                                        let v119 = &C::inst_data_value(ctx, v118);
                                                                        if let &InstructionData::UnaryImm {
                                                                            opcode: ref v120,
                                                                            imm: v121,
                                                                        } = v119 {
                                                                            if let &Opcode::Iconst = v120 {
                                                                                let v3 = C::value_type(ctx, v2);
                                                                                let v1157 = C::ty_32_or_64(ctx, v3);
                                                                                if let Some(v1158) = v1157 {
                                                                                    let v1159 = C::uimm8(ctx, v121);
                                                                                    if let Some(v1160) = v1159 {
                                                                                        let v1161 = C::uimm8(ctx, v105);
                                                                                        if let Some(v1162) = v1161 {
                                                                                            let v1163 = C::ty_bits(ctx, v1158);
                                                                                            let v1164 = C::u8_as_u64(ctx, v1163);
                                                                                            let v1165 = C::u8_as_u64(ctx, v1160);
                                                                                            let v1166 = C::u8_as_u64(ctx, v1162);
                                                                                            let v1167 = C::u64_add(ctx, v1165, v1166);
                                                                                            let v1168 = C::u64_eq(ctx, v1164, v1167);
                                                                                            if v1168 == true {
                                                                                                let v134 = C::put_in_reg(ctx, v114.0);
                                                                                                let v108 = C::put_in_reg(ctx, v98.0);
                                                                                                let v1169 = C::imm_shift_from_u8(ctx, v1162);
                                                                                                let v1170 = constructor_a64_extr(ctx, v1158, v134, v108, v1169);
                                                                                                let v1171 = constructor_output_reg(ctx, v1170);
                                                                                                let v1172 = Some(v1171);
                                                                                                // Rule at src\isa\aarch64\lower.isle line 1439.
                                                                                                return v1172;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Ushr => {
                                            let v53 = C::def_inst(ctx, v45.1);
                                            if let Some(v54) = v53 {
                                                let v55 = &C::inst_data_value(ctx, v54);
                                                if let &InstructionData::Binary {
                                                    opcode: ref v96,
                                                    args: ref v97,
                                                } = v55 {
                                                    if let &Opcode::Ishl = v96 {
                                                        let v98 = C::unpack_value_array_2(ctx, v97);
                                                        let v101 = C::def_inst(ctx, v98.1);
                                                        if let Some(v102) = v101 {
                                                            let v103 = &C::inst_data_value(ctx, v102);
                                                            if let &InstructionData::UnaryImm {
                                                                opcode: ref v104,
                                                                imm: v105,
                                                            } = v103 {
                                                                if let &Opcode::Iconst = v104 {
                                                                    let v114 = C::unpack_value_array_2(ctx, v113);
                                                                    let v117 = C::def_inst(ctx, v114.1);
                                                                    if let Some(v118) = v117 {
                                                                        let v119 = &C::inst_data_value(ctx, v118);
                                                                        if let &InstructionData::UnaryImm {
                                                                            opcode: ref v120,
                                                                            imm: v121,
                                                                        } = v119 {
                                                                            if let &Opcode::Iconst = v120 {
                                                                                let v3 = C::value_type(ctx, v2);
                                                                                let v1157 = C::ty_32_or_64(ctx, v3);
                                                                                if let Some(v1158) = v1157 {
                                                                                    let v1159 = C::uimm8(ctx, v121);
                                                                                    if let Some(v1160) = v1159 {
                                                                                        let v1161 = C::uimm8(ctx, v105);
                                                                                        if let Some(v1162) = v1161 {
                                                                                            let v1163 = C::ty_bits(ctx, v1158);
                                                                                            let v1164 = C::u8_as_u64(ctx, v1163);
                                                                                            let v1166 = C::u8_as_u64(ctx, v1162);
                                                                                            let v1165 = C::u8_as_u64(ctx, v1160);
                                                                                            let v1173 = C::u64_add(ctx, v1166, v1165);
                                                                                            let v1174 = C::u64_eq(ctx, v1164, v1173);
                                                                                            if v1174 == true {
                                                                                                let v128 = C::put_in_reg(ctx, v98.0);
                                                                                                let v124 = C::put_in_reg(ctx, v114.0);
                                                                                                let v1175 = C::imm_shift_from_u8(ctx, v1160);
                                                                                                let v1176 = constructor_a64_extr(ctx, v1158, v128, v124, v1175);
                                                                                                let v1177 = constructor_output_reg(ctx, v1176);
                                                                                                let v1178 = Some(v1177);
                                                                                                // Rule at src\isa\aarch64\lower.isle line 1443.
                                                                                                return v1178;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v404,
                                    arg: v405,
                                } => {
                                    if let &Opcode::Bnot = v404 {
                                        let v3 = C::value_type(ctx, v2);
                                        if v3 == I128 {
                                            let v1154 = constructor_i128_alu_bitop(ctx, &ALUOp::OrrNot, I64, v45.1, v405);
                                            let v1155 = C::output(ctx, v1154);
                                            let v1156 = Some(v1155);
                                            // Rule at src\isa\aarch64\lower.isle line 1426.
                                            return v1156;
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v53 = C::def_inst(ctx, v45.1);
                            if let Some(v54) = v53 {
                                let v55 = &C::inst_data_value(ctx, v54);
                                if let &InstructionData::Unary {
                                    opcode: ref v406,
                                    arg: v407,
                                } = v55 {
                                    if let &Opcode::Bnot = v406 {
                                        let v1151 = constructor_i128_alu_bitop(ctx, &ALUOp::OrrNot, I64, v45.0, v407);
                                        let v1152 = C::output(ctx, v1151);
                                        let v1153 = Some(v1152);
                                        // Rule at src\isa\aarch64\lower.isle line 1425.
                                        return v1153;
                                    }
                                }
                            }
                        }
                        let v41 = C::fits_in_64(ctx, v3);
                        if let Some(v42) = v41 {
                            if let Some(v65) = v64 {
                                let v66 = &C::inst_data_value(ctx, v65);
                                if let &InstructionData::Unary {
                                    opcode: ref v404,
                                    arg: v405,
                                } = v66 {
                                    if let &Opcode::Bnot = v404 {
                                        let v1148 = constructor_alu_rs_imm_logic(ctx, &ALUOp::OrrNot, v42, v45.1, v405);
                                        let v1149 = constructor_output_reg(ctx, v1148);
                                        let v1150 = Some(v1149);
                                        // Rule at src\isa\aarch64\lower.isle line 1422.
                                        return v1150;
                                    }
                                }
                            }
                            let v53 = C::def_inst(ctx, v45.1);
                            if let Some(v54) = v53 {
                                let v55 = &C::inst_data_value(ctx, v54);
                                if let &InstructionData::Unary {
                                    opcode: ref v406,
                                    arg: v407,
                                } = v55 {
                                    if let &Opcode::Bnot = v406 {
                                        let v1145 = constructor_alu_rs_imm_logic(ctx, &ALUOp::OrrNot, v42, v45.0, v407);
                                        let v1146 = constructor_output_reg(ctx, v1145);
                                        let v1147 = Some(v1146);
                                        // Rule at src\isa\aarch64\lower.isle line 1420.
                                        return v1147;
                                    }
                                }
                            }
                        }
                        if v3 == I128 {
                            let v1138 = constructor_i128_alu_bitop(ctx, &ALUOp::Orr, I64, v45.0, v45.1);
                            let v1139 = C::output(ctx, v1138);
                            let v1140 = Some(v1139);
                            // Rule at src\isa\aarch64\lower.isle line 1412.
                            return v1140;
                        }
                        if let Some(v42) = v41 {
                            let v1135 = constructor_alu_rs_imm_logic_commutative(ctx, &ALUOp::Orr, v42, v45.0, v45.1);
                            let v1136 = constructor_output_reg(ctx, v1135);
                            let v1137 = Some(v1136);
                            // Rule at src\isa\aarch64\lower.isle line 1409.
                            return v1137;
                        }
                        let v761 = C::ty_vec128(ctx, v3);
                        if let Some(v762) = v761 {
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v763 = &constructor_vector_size(ctx, v762);
                            let v1141 = constructor_orr_vec(ctx, v48, v49, v763);
                            let v1142 = constructor_output_reg(ctx, v1141);
                            let v1143 = Some(v1142);
                            // Rule at src\isa\aarch64\lower.isle line 1414.
                            return v1143;
                        }
                    }
                }
                &Opcode::Bxor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v64 = C::def_inst(ctx, v45.0);
                            if let Some(v65) = v64 {
                                let v66 = &C::inst_data_value(ctx, v65);
                                if let &InstructionData::Unary {
                                    opcode: ref v404,
                                    arg: v405,
                                } = v66 {
                                    if let &Opcode::Bnot = v404 {
                                        let v1198 = constructor_i128_alu_bitop(ctx, &ALUOp::EorNot, I64, v45.1, v405);
                                        let v1199 = C::output(ctx, v1198);
                                        let v1200 = Some(v1199);
                                        // Rule at src\isa\aarch64\lower.isle line 1468.
                                        return v1200;
                                    }
                                }
                            }
                            let v53 = C::def_inst(ctx, v45.1);
                            if let Some(v54) = v53 {
                                let v55 = &C::inst_data_value(ctx, v54);
                                if let &InstructionData::Unary {
                                    opcode: ref v406,
                                    arg: v407,
                                } = v55 {
                                    if let &Opcode::Bnot = v406 {
                                        let v1195 = constructor_i128_alu_bitop(ctx, &ALUOp::EorNot, I64, v45.0, v407);
                                        let v1196 = C::output(ctx, v1195);
                                        let v1197 = Some(v1196);
                                        // Rule at src\isa\aarch64\lower.isle line 1467.
                                        return v1197;
                                    }
                                }
                            }
                        }
                        let v41 = C::fits_in_64(ctx, v3);
                        if let Some(v42) = v41 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v64 = C::def_inst(ctx, v45.0);
                            if let Some(v65) = v64 {
                                let v66 = &C::inst_data_value(ctx, v65);
                                if let &InstructionData::Unary {
                                    opcode: ref v404,
                                    arg: v405,
                                } = v66 {
                                    if let &Opcode::Bnot = v404 {
                                        let v1192 = constructor_alu_rs_imm_logic(ctx, &ALUOp::EorNot, v42, v45.1, v405);
                                        let v1193 = constructor_output_reg(ctx, v1192);
                                        let v1194 = Some(v1193);
                                        // Rule at src\isa\aarch64\lower.isle line 1464.
                                        return v1194;
                                    }
                                }
                            }
                            let v53 = C::def_inst(ctx, v45.1);
                            if let Some(v54) = v53 {
                                let v55 = &C::inst_data_value(ctx, v54);
                                if let &InstructionData::Unary {
                                    opcode: ref v406,
                                    arg: v407,
                                } = v55 {
                                    if let &Opcode::Bnot = v406 {
                                        let v1189 = constructor_alu_rs_imm_logic(ctx, &ALUOp::EorNot, v42, v45.0, v407);
                                        let v1190 = constructor_output_reg(ctx, v1189);
                                        let v1191 = Some(v1190);
                                        // Rule at src\isa\aarch64\lower.isle line 1462.
                                        return v1191;
                                    }
                                }
                            }
                        }
                        if v3 == I128 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v1183 = constructor_i128_alu_bitop(ctx, &ALUOp::Eor, I64, v45.0, v45.1);
                            let v1184 = C::output(ctx, v1183);
                            let v1185 = Some(v1184);
                            // Rule at src\isa\aarch64\lower.isle line 1453.
                            return v1185;
                        }
                        if let Some(v42) = v41 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v1180 = constructor_alu_rs_imm_logic_commutative(ctx, &ALUOp::Eor, v42, v45.0, v45.1);
                            let v1181 = constructor_output_reg(ctx, v1180);
                            let v1182 = Some(v1181);
                            // Rule at src\isa\aarch64\lower.isle line 1450.
                            return v1182;
                        }
                        let v761 = C::ty_vec128(ctx, v3);
                        if let Some(v762) = v761 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v763 = &constructor_vector_size(ctx, v762);
                            let v1186 = constructor_eor_vec(ctx, v48, v49, v763);
                            let v1187 = constructor_output_reg(ctx, v1186);
                            let v1188 = Some(v1187);
                            // Rule at src\isa\aarch64\lower.isle line 1455.
                            return v1188;
                        }
                    }
                }
                &Opcode::Rotl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v53 = C::def_inst(ctx, v45.1);
                                if let Some(v54) = v53 {
                                    let v55 = &C::inst_data_value(ctx, v54);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v56,
                                        imm: v57,
                                    } = v55 {
                                        if let &Opcode::Iconst = v56 {
                                            let v1284 = C::imm_shift_from_imm64(ctx, I32, v57);
                                            if let Some(v1285) = v1284 {
                                                let v48 = C::put_in_reg(ctx, v45.0);
                                                let v1286 = C::negate_imm_shift(ctx, I32, v1285);
                                                let v1287 = constructor_a64_rotr_imm(ctx, I32, v48, v1286);
                                                let v1288 = constructor_output_reg(ctx, v1287);
                                                let v1289 = Some(v1288);
                                                // Rule at src\isa\aarch64\lower.isle line 1752.
                                                return v1289;
                                            }
                                        }
                                    }
                                }
                                let v1263 = C::put_in_regs(ctx, v45.1);
                                let v1264 = C::value_regs_get(ctx, v1263, 0x0_usize);
                                let v372 = C::zero_reg(ctx);
                                let v1265 = constructor_sub(ctx, I32, v372, v1264);
                                let v1276 = C::put_in_reg(ctx, v45.0);
                                let v1277 = constructor_a64_rotr(ctx, I32, v1276, v1265);
                                let v1278 = constructor_output_reg(ctx, v1277);
                                let v1279 = Some(v1278);
                                // Rule at src\isa\aarch64\lower.isle line 1740.
                                return v1279;
                            }
                            I64 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v53 = C::def_inst(ctx, v45.1);
                                if let Some(v54) = v53 {
                                    let v55 = &C::inst_data_value(ctx, v54);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v56,
                                        imm: v57,
                                    } = v55 {
                                        if let &Opcode::Iconst = v56 {
                                            let v1290 = C::imm_shift_from_imm64(ctx, I64, v57);
                                            if let Some(v1291) = v1290 {
                                                let v48 = C::put_in_reg(ctx, v45.0);
                                                let v1292 = C::negate_imm_shift(ctx, I64, v1291);
                                                let v1293 = constructor_a64_rotr_imm(ctx, I64, v48, v1292);
                                                let v1294 = constructor_output_reg(ctx, v1293);
                                                let v1295 = Some(v1294);
                                                // Rule at src\isa\aarch64\lower.isle line 1757.
                                                return v1295;
                                            }
                                        }
                                    }
                                }
                                let v1263 = C::put_in_regs(ctx, v45.1);
                                let v1264 = C::value_regs_get(ctx, v1263, 0x0_usize);
                                let v372 = C::zero_reg(ctx);
                                let v1280 = constructor_sub(ctx, I64, v372, v1264);
                                let v1276 = C::put_in_reg(ctx, v45.0);
                                let v1281 = constructor_a64_rotr(ctx, I64, v1276, v1280);
                                let v1282 = constructor_output_reg(ctx, v1281);
                                let v1283 = Some(v1282);
                                // Rule at src\isa\aarch64\lower.isle line 1746.
                                return v1283;
                            }
                            I128 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v151 = C::put_in_regs(ctx, v45.0);
                                let v757 = C::put_in_regs(ctx, v45.1);
                                let v1208 = C::value_regs_get(ctx, v757, 0x0_usize);
                                let v1297 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x80_u64);
                                let v1298 = constructor_sub(ctx, I64, v1297, v1208);
                                let v1299 = constructor_lower_shl128(ctx, v151, v1208);
                                let v1300 = constructor_lower_ushr128(ctx, v151, v1298);
                                let v1301 = C::value_regs_get(ctx, v1299, 0x0_usize);
                                let v1302 = C::value_regs_get(ctx, v1300, 0x0_usize);
                                let v1303 = constructor_orr(ctx, I64, v1301, v1302);
                                let v1304 = C::value_regs_get(ctx, v1299, 0x1_usize);
                                let v1305 = C::value_regs_get(ctx, v1300, 0x1_usize);
                                let v1306 = constructor_orr(ctx, I64, v1304, v1305);
                                let v1307 = C::value_regs(ctx, v1303, v1306);
                                let v1308 = C::output(ctx, v1307);
                                let v1309 = Some(v1308);
                                // Rule at src\isa\aarch64\lower.isle line 1776.
                                return v1309;
                            }
                            _ => {}
                        }
                        let v1261 = C::fits_in_16(ctx, v3);
                        if let Some(v1262) = v1261 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v53 = C::def_inst(ctx, v45.1);
                            if let Some(v54) = v53 {
                                let v55 = &C::inst_data_value(ctx, v54);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v56,
                                    imm: v57,
                                } = v55 {
                                    if let &Opcode::Iconst = v56 {
                                        let v1270 = C::imm_shift_from_imm64(ctx, v1262, v57);
                                        if let Some(v1271) = v1270 {
                                            let v895 = constructor_put_in_reg_zext32(ctx, v45.0);
                                            let v1272 = C::negate_imm_shift(ctx, v1262, v1271);
                                            let v1273 = constructor_small_rotr_imm(ctx, v1262, v895, v1272);
                                            let v1274 = constructor_output_reg(ctx, v1273);
                                            let v1275 = Some(v1274);
                                            // Rule at src\isa\aarch64\lower.isle line 1727.
                                            return v1275;
                                        }
                                    }
                                }
                            }
                            let v1263 = C::put_in_regs(ctx, v45.1);
                            let v1264 = C::value_regs_get(ctx, v1263, 0x0_usize);
                            let v372 = C::zero_reg(ctx);
                            let v1265 = constructor_sub(ctx, I32, v372, v1264);
                            let v1266 = constructor_put_in_reg_zext32(ctx, v45.0);
                            let v1267 = constructor_small_rotr(ctx, v1262, v1266, v1265);
                            let v1268 = constructor_output_reg(ctx, v1267);
                            let v1269 = Some(v1268);
                            // Rule at src\isa\aarch64\lower.isle line 1721.
                            return v1269;
                        }
                    }
                }
                &Opcode::Rotr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v53 = C::def_inst(ctx, v45.1);
                                if let Some(v54) = v53 {
                                    let v55 = &C::inst_data_value(ctx, v54);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v56,
                                        imm: v57,
                                    } = v55 {
                                        if let &Opcode::Iconst = v56 {
                                            let v1284 = C::imm_shift_from_imm64(ctx, I32, v57);
                                            if let Some(v1285) = v1284 {
                                                let v48 = C::put_in_reg(ctx, v45.0);
                                                let v1322 = constructor_a64_rotr_imm(ctx, I32, v48, v1285);
                                                let v1323 = constructor_output_reg(ctx, v1322);
                                                let v1324 = Some(v1323);
                                                // Rule at src\isa\aarch64\lower.isle line 1806.
                                                return v1324;
                                            }
                                        }
                                    }
                                }
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v757 = C::put_in_regs(ctx, v45.1);
                                let v1208 = C::value_regs_get(ctx, v757, 0x0_usize);
                                let v1313 = constructor_a64_rotr(ctx, I32, v48, v1208);
                                let v1314 = constructor_output_reg(ctx, v1313);
                                let v1315 = Some(v1314);
                                // Rule at src\isa\aarch64\lower.isle line 1793.
                                return v1315;
                            }
                            I64 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v53 = C::def_inst(ctx, v45.1);
                                if let Some(v54) = v53 {
                                    let v55 = &C::inst_data_value(ctx, v54);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v56,
                                        imm: v57,
                                    } = v55 {
                                        if let &Opcode::Iconst = v56 {
                                            let v1290 = C::imm_shift_from_imm64(ctx, I64, v57);
                                            if let Some(v1291) = v1290 {
                                                let v48 = C::put_in_reg(ctx, v45.0);
                                                let v1325 = constructor_a64_rotr_imm(ctx, I64, v48, v1291);
                                                let v1326 = constructor_output_reg(ctx, v1325);
                                                let v1327 = Some(v1326);
                                                // Rule at src\isa\aarch64\lower.isle line 1811.
                                                return v1327;
                                            }
                                        }
                                    }
                                }
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v757 = C::put_in_regs(ctx, v45.1);
                                let v1208 = C::value_regs_get(ctx, v757, 0x0_usize);
                                let v1316 = constructor_a64_rotr(ctx, I64, v48, v1208);
                                let v1317 = constructor_output_reg(ctx, v1316);
                                let v1318 = Some(v1317);
                                // Rule at src\isa\aarch64\lower.isle line 1797.
                                return v1318;
                            }
                            I128 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v151 = C::put_in_regs(ctx, v45.0);
                                let v757 = C::put_in_regs(ctx, v45.1);
                                let v1208 = C::value_regs_get(ctx, v757, 0x0_usize);
                                let v1297 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x80_u64);
                                let v1298 = constructor_sub(ctx, I64, v1297, v1208);
                                let v1328 = constructor_lower_ushr128(ctx, v151, v1208);
                                let v1329 = constructor_lower_shl128(ctx, v151, v1298);
                                let v1330 = C::value_regs_get(ctx, v1328, 0x1_usize);
                                let v1331 = C::value_regs_get(ctx, v1329, 0x1_usize);
                                let v1332 = constructor_orr(ctx, I64, v1330, v1331);
                                let v1333 = C::value_regs_get(ctx, v1328, 0x0_usize);
                                let v1334 = C::value_regs_get(ctx, v1329, 0x0_usize);
                                let v1335 = constructor_orr(ctx, I64, v1333, v1334);
                                let v1336 = C::value_regs(ctx, v1335, v1332);
                                let v1337 = C::output(ctx, v1336);
                                let v1338 = Some(v1337);
                                // Rule at src\isa\aarch64\lower.isle line 1892.
                                return v1338;
                            }
                            _ => {}
                        }
                        let v1261 = C::fits_in_16(ctx, v3);
                        if let Some(v1262) = v1261 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v53 = C::def_inst(ctx, v45.1);
                            if let Some(v54) = v53 {
                                let v55 = &C::inst_data_value(ctx, v54);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v56,
                                    imm: v57,
                                } = v55 {
                                    if let &Opcode::Iconst = v56 {
                                        let v1270 = C::imm_shift_from_imm64(ctx, v1262, v57);
                                        if let Some(v1271) = v1270 {
                                            let v895 = constructor_put_in_reg_zext32(ctx, v45.0);
                                            let v1319 = constructor_small_rotr_imm(ctx, v1262, v895, v1271);
                                            let v1320 = constructor_output_reg(ctx, v1319);
                                            let v1321 = Some(v1320);
                                            // Rule at src\isa\aarch64\lower.isle line 1801.
                                            return v1321;
                                        }
                                    }
                                }
                            }
                            let v895 = constructor_put_in_reg_zext32(ctx, v45.0);
                            let v757 = C::put_in_regs(ctx, v45.1);
                            let v1208 = C::value_regs_get(ctx, v757, 0x0_usize);
                            let v1310 = constructor_small_rotr(ctx, v1262, v895, v1208);
                            let v1311 = constructor_output_reg(ctx, v1310);
                            let v1312 = Some(v1311);
                            // Rule at src\isa\aarch64\lower.isle line 1789.
                            return v1312;
                        }
                    }
                }
                &Opcode::Ishl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I64 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v1205 = constructor_do_shift(ctx, &ALUOp::Lsl, I64, v48, v45.1);
                                let v1206 = constructor_output_reg(ctx, v1205);
                                let v1207 = Some(v1206);
                                // Rule at src\isa\aarch64\lower.isle line 1477.
                                return v1207;
                            }
                            I128 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v151 = C::put_in_regs(ctx, v45.0);
                                let v757 = C::put_in_regs(ctx, v45.1);
                                let v1208 = C::value_regs_get(ctx, v757, 0x0_usize);
                                let v1209 = constructor_lower_shl128(ctx, v151, v1208);
                                let v1210 = C::output(ctx, v1209);
                                let v1211 = Some(v1210);
                                // Rule at src\isa\aarch64\lower.isle line 1481.
                                return v1211;
                            }
                            _ => {}
                        }
                        let v431 = C::fits_in_32(ctx, v3);
                        if let Some(v432) = v431 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v1202 = constructor_do_shift(ctx, &ALUOp::Lsl, v432, v48, v45.1);
                            let v1203 = constructor_output_reg(ctx, v1202);
                            let v1204 = Some(v1203);
                            // Rule at src\isa\aarch64\lower.isle line 1473.
                            return v1204;
                        }
                        let v761 = C::ty_vec128(ctx, v3);
                        if let Some(v762) = v761 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v53 = C::def_inst(ctx, v45.1);
                            if let Some(v54) = v53 {
                                let v55 = &C::inst_data_value(ctx, v54);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v56,
                                    imm: v57,
                                } = v55 {
                                    if let &Opcode::Iconst = v56 {
                                        let v48 = C::put_in_reg(ctx, v45.0);
                                        let v786 = &constructor_vector_size(ctx, v762);
                                        let v58 = C::u64_from_imm64(ctx, v57);
                                        let v1219 = C::shift_masked_imm(ctx, v762, v58);
                                        let v1220 = constructor_ushl_vec_imm(ctx, v48, v1219, v786);
                                        let v1221 = constructor_output_reg(ctx, v1220);
                                        let v1222 = Some(v1221);
                                        // Rule at src\isa\aarch64\lower.isle line 1516.
                                        return v1222;
                                    }
                                }
                            }
                            let v1212 = &constructor_vector_size(ctx, v762);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v1213 = C::shift_mask(ctx, v762);
                            let v1214 = constructor_and_imm(ctx, I32, v49, v1213);
                            let v1215 = constructor_vec_dup(ctx, v1214, v1212);
                            let v453 = C::put_in_reg(ctx, v45.0);
                            let v1216 = constructor_sshl(ctx, v453, v1215, v1212);
                            let v1217 = constructor_output_reg(ctx, v1216);
                            let v1218 = Some(v1217);
                            // Rule at src\isa\aarch64\lower.isle line 1511.
                            return v1218;
                        }
                    }
                }
                &Opcode::Ushr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I64 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v882 = constructor_put_in_reg_zext64(ctx, v45.0);
                                let v1227 = constructor_do_shift(ctx, &ALUOp::Lsr, I64, v882, v45.1);
                                let v1228 = constructor_output_reg(ctx, v1227);
                                let v1229 = Some(v1228);
                                // Rule at src\isa\aarch64\lower.isle line 1608.
                                return v1229;
                            }
                            I128 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v151 = C::put_in_regs(ctx, v45.0);
                                let v757 = C::put_in_regs(ctx, v45.1);
                                let v1208 = C::value_regs_get(ctx, v757, 0x0_usize);
                                let v1230 = constructor_lower_ushr128(ctx, v151, v1208);
                                let v1231 = C::output(ctx, v1230);
                                let v1232 = Some(v1231);
                                // Rule at src\isa\aarch64\lower.isle line 1612.
                                return v1232;
                            }
                            _ => {}
                        }
                        let v431 = C::fits_in_32(ctx, v3);
                        if let Some(v432) = v431 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v895 = constructor_put_in_reg_zext32(ctx, v45.0);
                            let v1224 = constructor_do_shift(ctx, &ALUOp::Lsr, v432, v895, v45.1);
                            let v1225 = constructor_output_reg(ctx, v1224);
                            let v1226 = Some(v1225);
                            // Rule at src\isa\aarch64\lower.isle line 1604.
                            return v1226;
                        }
                        let v761 = C::ty_vec128(ctx, v3);
                        if let Some(v762) = v761 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v53 = C::def_inst(ctx, v45.1);
                            if let Some(v54) = v53 {
                                let v55 = &C::inst_data_value(ctx, v54);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v56,
                                    imm: v57,
                                } = v55 {
                                    if let &Opcode::Iconst = v56 {
                                        let v58 = C::u64_from_imm64(ctx, v57);
                                        let v1219 = C::shift_masked_imm(ctx, v762, v58);
                                        if v1219 == 0x0_u8 {
                                            let v1243 = constructor_output_value(ctx, v45.0);
                                            let v1244 = Some(v1243);
                                            // Rule at src\isa\aarch64\lower.isle line 1627.
                                            return v1244;
                                        }
                                        let v48 = C::put_in_reg(ctx, v45.0);
                                        let v786 = &constructor_vector_size(ctx, v762);
                                        let v1240 = constructor_ushr_vec_imm(ctx, v48, v1219, v786);
                                        let v1241 = constructor_output_reg(ctx, v1240);
                                        let v1242 = Some(v1241);
                                        // Rule at src\isa\aarch64\lower.isle line 1625.
                                        return v1242;
                                    }
                                }
                            }
                            let v1212 = &constructor_vector_size(ctx, v762);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v1213 = C::shift_mask(ctx, v762);
                            let v1214 = constructor_and_imm(ctx, I32, v49, v1213);
                            let v1233 = C::zero_reg(ctx);
                            let v1234 = constructor_sub(ctx, I64, v1233, v1214);
                            let v1235 = constructor_vec_dup(ctx, v1234, v1212);
                            let v1236 = C::put_in_reg(ctx, v45.0);
                            let v1237 = constructor_ushl(ctx, v1236, v1235, v1212);
                            let v1238 = constructor_output_reg(ctx, v1237);
                            let v1239 = Some(v1238);
                            // Rule at src\isa\aarch64\lower.isle line 1620.
                            return v1239;
                        }
                    }
                }
                &Opcode::Sshr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I64 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v871 = constructor_put_in_reg_sext64(ctx, v45.0);
                                let v1249 = constructor_do_shift(ctx, &ALUOp::Asr, I64, v871, v45.1);
                                let v1250 = constructor_output_reg(ctx, v1249);
                                let v1251 = Some(v1250);
                                // Rule at src\isa\aarch64\lower.isle line 1665.
                                return v1251;
                            }
                            I128 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v151 = C::put_in_regs(ctx, v45.0);
                                let v757 = C::put_in_regs(ctx, v45.1);
                                let v1208 = C::value_regs_get(ctx, v757, 0x0_usize);
                                let v1252 = constructor_lower_sshr128(ctx, v151, v1208);
                                let v1253 = C::output(ctx, v1252);
                                let v1254 = Some(v1253);
                                // Rule at src\isa\aarch64\lower.isle line 1669.
                                return v1254;
                            }
                            _ => {}
                        }
                        let v761 = C::ty_vec128(ctx, v3);
                        if let Some(v762) = v761 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v53 = C::def_inst(ctx, v45.1);
                            if let Some(v54) = v53 {
                                let v55 = &C::inst_data_value(ctx, v54);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v56,
                                    imm: v57,
                                } = v55 {
                                    if let &Opcode::Iconst = v56 {
                                        let v58 = C::u64_from_imm64(ctx, v57);
                                        let v1219 = C::shift_masked_imm(ctx, v762, v58);
                                        if v1219 == 0x0_u8 {
                                            let v1243 = constructor_output_value(ctx, v45.0);
                                            let v1244 = Some(v1243);
                                            // Rule at src\isa\aarch64\lower.isle line 1685.
                                            return v1244;
                                        }
                                        let v48 = C::put_in_reg(ctx, v45.0);
                                        let v786 = &constructor_vector_size(ctx, v762);
                                        let v1258 = constructor_sshr_vec_imm(ctx, v48, v1219, v786);
                                        let v1259 = constructor_output_reg(ctx, v1258);
                                        let v1260 = Some(v1259);
                                        // Rule at src\isa\aarch64\lower.isle line 1683.
                                        return v1260;
                                    }
                                }
                            }
                            let v1212 = &constructor_vector_size(ctx, v762);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v1213 = C::shift_mask(ctx, v762);
                            let v1214 = constructor_and_imm(ctx, I32, v49, v1213);
                            let v1233 = C::zero_reg(ctx);
                            let v1234 = constructor_sub(ctx, I64, v1233, v1214);
                            let v1235 = constructor_vec_dup(ctx, v1234, v1212);
                            let v1236 = C::put_in_reg(ctx, v45.0);
                            let v1255 = constructor_sshl(ctx, v1236, v1235, v1212);
                            let v1256 = constructor_output_reg(ctx, v1255);
                            let v1257 = Some(v1256);
                            // Rule at src\isa\aarch64\lower.isle line 1678.
                            return v1257;
                        }
                        let v431 = C::fits_in_32(ctx, v3);
                        if let Some(v432) = v431 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v907 = constructor_put_in_reg_sext32(ctx, v45.0);
                            let v1246 = constructor_do_shift(ctx, &ALUOp::Asr, v432, v907, v45.1);
                            let v1247 = constructor_output_reg(ctx, v1246);
                            let v1248 = Some(v1247);
                            // Rule at src\isa\aarch64\lower.isle line 1661.
                            return v1248;
                        }
                    }
                }
                &Opcode::Fadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v477 = C::ty_scalar_float(ctx, v3);
                        if let Some(v478) = v477 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v480 = &constructor_scalar_size(ctx, v478);
                            let v481 = constructor_fpu_rrr(ctx, &FPUOp2::Add, v48, v49, v480);
                            let v482 = constructor_output_reg(ctx, v481);
                            let v483 = Some(v482);
                            // Rule at src\isa\aarch64\lower.isle line 414.
                            return v483;
                        }
                        let v143 = C::multi_lane(ctx, v3);
                        if let Some(v144) = v143 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v147 = &constructor_vector_size(ctx, v3);
                            let v474 = constructor_vec_rrr(ctx, &VecALUOp::Fadd, v48, v49, v147);
                            let v475 = constructor_output_reg(ctx, v474);
                            let v476 = Some(v475);
                            // Rule at src\isa\aarch64\lower.isle line 411.
                            return v476;
                        }
                        let v2376 = C::dynamic_lane(ctx, v3);
                        if let Some(v2377) = v2376 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v147 = &constructor_vector_size(ctx, v3);
                            let v474 = constructor_vec_rrr(ctx, &VecALUOp::Fadd, v48, v49, v147);
                            let v2395 = C::value_reg(ctx, v474);
                            let v2396 = C::output(ctx, v2395);
                            let v2397 = Some(v2396);
                            // Rule at src\isa\aarch64\lower_dynamic_neon.isle line 14.
                            return v2397;
                        }
                    }
                }
                &Opcode::Fsub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v477 = C::ty_scalar_float(ctx, v3);
                        if let Some(v478) = v477 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v480 = &constructor_scalar_size(ctx, v478);
                            let v489 = constructor_fpu_rrr(ctx, &FPUOp2::Sub, v48, v49, v480);
                            let v490 = constructor_output_reg(ctx, v489);
                            let v491 = Some(v490);
                            // Rule at src\isa\aarch64\lower.isle line 422.
                            return v491;
                        }
                        let v143 = C::multi_lane(ctx, v3);
                        if let Some(v144) = v143 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v147 = &constructor_vector_size(ctx, v3);
                            let v485 = constructor_vec_rrr(ctx, &VecALUOp::Fsub, v48, v49, v147);
                            let v486 = constructor_output_reg(ctx, v485);
                            let v487 = Some(v486);
                            // Rule at src\isa\aarch64\lower.isle line 419.
                            return v487;
                        }
                        let v2376 = C::dynamic_lane(ctx, v3);
                        if let Some(v2377) = v2376 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v147 = &constructor_vector_size(ctx, v3);
                            let v485 = constructor_vec_rrr(ctx, &VecALUOp::Fsub, v48, v49, v147);
                            let v2398 = C::value_reg(ctx, v485);
                            let v2399 = C::output(ctx, v2398);
                            let v2400 = Some(v2399);
                            // Rule at src\isa\aarch64\lower_dynamic_neon.isle line 18.
                            return v2400;
                        }
                    }
                }
                &Opcode::Fmul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v477 = C::ty_scalar_float(ctx, v3);
                        if let Some(v478) = v477 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v480 = &constructor_scalar_size(ctx, v478);
                            let v497 = constructor_fpu_rrr(ctx, &FPUOp2::Mul, v48, v49, v480);
                            let v498 = constructor_output_reg(ctx, v497);
                            let v499 = Some(v498);
                            // Rule at src\isa\aarch64\lower.isle line 430.
                            return v499;
                        }
                        let v143 = C::multi_lane(ctx, v3);
                        if let Some(v144) = v143 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v147 = &constructor_vector_size(ctx, v3);
                            let v493 = constructor_vec_rrr(ctx, &VecALUOp::Fmul, v48, v49, v147);
                            let v494 = constructor_output_reg(ctx, v493);
                            let v495 = Some(v494);
                            // Rule at src\isa\aarch64\lower.isle line 427.
                            return v495;
                        }
                        let v2376 = C::dynamic_lane(ctx, v3);
                        if let Some(v2377) = v2376 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v147 = &constructor_vector_size(ctx, v3);
                            let v493 = constructor_vec_rrr(ctx, &VecALUOp::Fmul, v48, v49, v147);
                            let v2401 = C::value_reg(ctx, v493);
                            let v2402 = C::output(ctx, v2401);
                            let v2403 = Some(v2402);
                            // Rule at src\isa\aarch64\lower_dynamic_neon.isle line 22.
                            return v2403;
                        }
                    }
                }
                &Opcode::Fdiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v477 = C::ty_scalar_float(ctx, v3);
                        if let Some(v478) = v477 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v480 = &constructor_scalar_size(ctx, v478);
                            let v505 = constructor_fpu_rrr(ctx, &FPUOp2::Div, v48, v49, v480);
                            let v506 = constructor_output_reg(ctx, v505);
                            let v507 = Some(v506);
                            // Rule at src\isa\aarch64\lower.isle line 438.
                            return v507;
                        }
                        let v143 = C::multi_lane(ctx, v3);
                        if let Some(v144) = v143 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v147 = &constructor_vector_size(ctx, v3);
                            let v501 = constructor_vec_rrr(ctx, &VecALUOp::Fdiv, v48, v49, v147);
                            let v502 = constructor_output_reg(ctx, v501);
                            let v503 = Some(v502);
                            // Rule at src\isa\aarch64\lower.isle line 435.
                            return v503;
                        }
                        let v2376 = C::dynamic_lane(ctx, v3);
                        if let Some(v2377) = v2376 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v147 = &constructor_vector_size(ctx, v3);
                            let v501 = constructor_vec_rrr(ctx, &VecALUOp::Fdiv, v48, v49, v147);
                            let v2404 = C::value_reg(ctx, v501);
                            let v2405 = C::output(ctx, v2404);
                            let v2406 = Some(v2405);
                            // Rule at src\isa\aarch64\lower_dynamic_neon.isle line 26.
                            return v2406;
                        }
                    }
                }
                &Opcode::Fcopysign => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v45 = C::unpack_value_array_2(ctx, v44);
                        let v48 = C::put_in_reg(ctx, v45.0);
                        let v49 = C::put_in_reg(ctx, v45.1);
                        let v3 = C::value_type(ctx, v2);
                        let v628 = constructor_fcopy_sign(ctx, v48, v49, v3);
                        let v629 = constructor_output_reg(ctx, v628);
                        let v630 = Some(v629);
                        // Rule at src\isa\aarch64\lower.isle line 622.
                        return v630;
                    }
                }
                &Opcode::Fmin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v477 = C::ty_scalar_float(ctx, v3);
                        if let Some(v478) = v477 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v480 = &constructor_scalar_size(ctx, v478);
                            let v513 = constructor_fpu_rrr(ctx, &FPUOp2::Min, v48, v49, v480);
                            let v514 = constructor_output_reg(ctx, v513);
                            let v515 = Some(v514);
                            // Rule at src\isa\aarch64\lower.isle line 446.
                            return v515;
                        }
                        let v143 = C::multi_lane(ctx, v3);
                        if let Some(v144) = v143 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v147 = &constructor_vector_size(ctx, v3);
                            let v509 = constructor_vec_rrr(ctx, &VecALUOp::Fmin, v48, v49, v147);
                            let v510 = constructor_output_reg(ctx, v509);
                            let v511 = Some(v510);
                            // Rule at src\isa\aarch64\lower.isle line 443.
                            return v511;
                        }
                        let v2376 = C::dynamic_lane(ctx, v3);
                        if let Some(v2377) = v2376 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v147 = &constructor_vector_size(ctx, v3);
                            let v509 = constructor_vec_rrr(ctx, &VecALUOp::Fmin, v48, v49, v147);
                            let v2407 = C::value_reg(ctx, v509);
                            let v2408 = C::output(ctx, v2407);
                            let v2409 = Some(v2408);
                            // Rule at src\isa\aarch64\lower_dynamic_neon.isle line 30.
                            return v2409;
                        }
                    }
                }
                &Opcode::Fmax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v477 = C::ty_scalar_float(ctx, v3);
                        if let Some(v478) = v477 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v480 = &constructor_scalar_size(ctx, v478);
                            let v521 = constructor_fpu_rrr(ctx, &FPUOp2::Max, v48, v49, v480);
                            let v522 = constructor_output_reg(ctx, v521);
                            let v523 = Some(v522);
                            // Rule at src\isa\aarch64\lower.isle line 454.
                            return v523;
                        }
                        let v143 = C::multi_lane(ctx, v3);
                        if let Some(v144) = v143 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v147 = &constructor_vector_size(ctx, v3);
                            let v517 = constructor_vec_rrr(ctx, &VecALUOp::Fmax, v48, v49, v147);
                            let v518 = constructor_output_reg(ctx, v517);
                            let v519 = Some(v518);
                            // Rule at src\isa\aarch64\lower.isle line 451.
                            return v519;
                        }
                        let v2376 = C::dynamic_lane(ctx, v3);
                        if let Some(v2377) = v2376 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v147 = &constructor_vector_size(ctx, v3);
                            let v517 = constructor_vec_rrr(ctx, &VecALUOp::Fmax, v48, v49, v147);
                            let v2410 = C::value_reg(ctx, v517);
                            let v2411 = C::output(ctx, v2410);
                            let v2412 = Some(v2411);
                            // Rule at src\isa\aarch64\lower_dynamic_neon.isle line 34.
                            return v2412;
                        }
                    }
                }
                &Opcode::Snarrow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1858 = C::ty_vec64_int(ctx, v3);
                        if let Some(v1859) = v1858 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v1860 = constructor_mov_vec_elem(ctx, v48, v49, 0x1_u8, 0x0_u8, &VectorSize::Size64x2);
                            let v1861 = &constructor_lane_size(ctx, v1859);
                            let v1862 = constructor_sqxtn(ctx, v1860, v1861);
                            let v1863 = constructor_output_reg(ctx, v1862);
                            let v1864 = Some(v1863);
                            // Rule at src\isa\aarch64\lower.isle line 2404.
                            return v1864;
                        }
                        let v1850 = C::ty_vec128_int(ctx, v3);
                        if let Some(v1851) = v1850 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v1852 = C::zero_value(ctx, v45.1);
                            if let Some(v1853) = v1852 {
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v1854 = &constructor_lane_size(ctx, v1851);
                                let v1855 = constructor_sqxtn(ctx, v48, v1854);
                                let v1856 = constructor_output_reg(ctx, v1855);
                                let v1857 = Some(v1856);
                                // Rule at src\isa\aarch64\lower.isle line 2400.
                                return v1857;
                            }
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v1854 = &constructor_lane_size(ctx, v1851);
                            let v1855 = constructor_sqxtn(ctx, v48, v1854);
                            let v1865 = C::put_in_reg(ctx, v45.1);
                            let v1866 = &constructor_lane_size(ctx, v1851);
                            let v1867 = constructor_sqxtn2(ctx, v1855, v1865, v1866);
                            let v1868 = constructor_output_reg(ctx, v1867);
                            let v1869 = Some(v1868);
                            // Rule at src\isa\aarch64\lower.isle line 2408.
                            return v1869;
                        }
                        let v2419 = C::ty_dyn64_int(ctx, v3);
                        if let Some(v2420) = v2419 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v1860 = constructor_mov_vec_elem(ctx, v48, v49, 0x1_u8, 0x0_u8, &VectorSize::Size64x2);
                            let v2421 = &constructor_lane_size(ctx, v2420);
                            let v2422 = constructor_sqxtn(ctx, v1860, v2421);
                            let v2423 = constructor_output_reg(ctx, v2422);
                            let v2424 = Some(v2423);
                            // Rule at src\isa\aarch64\lower_dynamic_neon.isle line 42.
                            return v2424;
                        }
                        let v2413 = C::ty_dyn128_int(ctx, v3);
                        if let Some(v2414) = v2413 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v1852 = C::zero_value(ctx, v45.1);
                            if let Some(v1853) = v1852 {
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v2415 = &constructor_lane_size(ctx, v2414);
                                let v2416 = constructor_sqxtn(ctx, v48, v2415);
                                let v2417 = constructor_output_reg(ctx, v2416);
                                let v2418 = Some(v2417);
                                // Rule at src\isa\aarch64\lower_dynamic_neon.isle line 38.
                                return v2418;
                            }
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v2415 = &constructor_lane_size(ctx, v2414);
                            let v2416 = constructor_sqxtn(ctx, v48, v2415);
                            let v1865 = C::put_in_reg(ctx, v45.1);
                            let v2425 = &constructor_lane_size(ctx, v2414);
                            let v2426 = constructor_sqxtn2(ctx, v2416, v1865, v2425);
                            let v2427 = constructor_output_reg(ctx, v2426);
                            let v2428 = Some(v2427);
                            // Rule at src\isa\aarch64\lower_dynamic_neon.isle line 46.
                            return v2428;
                        }
                    }
                }
                &Opcode::Unarrow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1858 = C::ty_vec64_int(ctx, v3);
                        if let Some(v1859) = v1858 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v1860 = constructor_mov_vec_elem(ctx, v48, v49, 0x1_u8, 0x0_u8, &VectorSize::Size64x2);
                            let v1861 = &constructor_lane_size(ctx, v1859);
                            let v1873 = constructor_sqxtun(ctx, v1860, v1861);
                            let v1874 = constructor_output_reg(ctx, v1873);
                            let v1875 = Some(v1874);
                            // Rule at src\isa\aarch64\lower.isle line 2419.
                            return v1875;
                        }
                        let v1850 = C::ty_vec128_int(ctx, v3);
                        if let Some(v1851) = v1850 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v1852 = C::zero_value(ctx, v45.1);
                            if let Some(v1853) = v1852 {
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v1854 = &constructor_lane_size(ctx, v1851);
                                let v1870 = constructor_sqxtun(ctx, v48, v1854);
                                let v1871 = constructor_output_reg(ctx, v1870);
                                let v1872 = Some(v1871);
                                // Rule at src\isa\aarch64\lower.isle line 2415.
                                return v1872;
                            }
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v1854 = &constructor_lane_size(ctx, v1851);
                            let v1870 = constructor_sqxtun(ctx, v48, v1854);
                            let v1865 = C::put_in_reg(ctx, v45.1);
                            let v1866 = &constructor_lane_size(ctx, v1851);
                            let v1876 = constructor_sqxtun2(ctx, v1870, v1865, v1866);
                            let v1877 = constructor_output_reg(ctx, v1876);
                            let v1878 = Some(v1877);
                            // Rule at src\isa\aarch64\lower.isle line 2423.
                            return v1878;
                        }
                        let v2419 = C::ty_dyn64_int(ctx, v3);
                        if let Some(v2420) = v2419 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v1860 = constructor_mov_vec_elem(ctx, v48, v49, 0x1_u8, 0x0_u8, &VectorSize::Size64x2);
                            let v2421 = &constructor_lane_size(ctx, v2420);
                            let v2432 = constructor_sqxtun(ctx, v1860, v2421);
                            let v2433 = constructor_output_reg(ctx, v2432);
                            let v2434 = Some(v2433);
                            // Rule at src\isa\aarch64\lower_dynamic_neon.isle line 56.
                            return v2434;
                        }
                        let v2413 = C::ty_dyn128_int(ctx, v3);
                        if let Some(v2414) = v2413 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v1852 = C::zero_value(ctx, v45.1);
                            if let Some(v1853) = v1852 {
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v2415 = &constructor_lane_size(ctx, v2414);
                                let v2429 = constructor_sqxtun(ctx, v48, v2415);
                                let v2430 = constructor_output_reg(ctx, v2429);
                                let v2431 = Some(v2430);
                                // Rule at src\isa\aarch64\lower_dynamic_neon.isle line 52.
                                return v2431;
                            }
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v2415 = &constructor_lane_size(ctx, v2414);
                            let v2429 = constructor_sqxtun(ctx, v48, v2415);
                            let v1865 = C::put_in_reg(ctx, v45.1);
                            let v2425 = &constructor_lane_size(ctx, v2414);
                            let v2435 = constructor_sqxtun2(ctx, v2429, v1865, v2425);
                            let v2436 = constructor_output_reg(ctx, v2435);
                            let v2437 = Some(v2436);
                            // Rule at src\isa\aarch64\lower_dynamic_neon.isle line 60.
                            return v2437;
                        }
                    }
                }
                &Opcode::Uunarrow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1858 = C::ty_vec64_int(ctx, v3);
                        if let Some(v1859) = v1858 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v1860 = constructor_mov_vec_elem(ctx, v48, v49, 0x1_u8, 0x0_u8, &VectorSize::Size64x2);
                            let v1861 = &constructor_lane_size(ctx, v1859);
                            let v1882 = constructor_uqxtn(ctx, v1860, v1861);
                            let v1883 = constructor_output_reg(ctx, v1882);
                            let v1884 = Some(v1883);
                            // Rule at src\isa\aarch64\lower.isle line 2435.
                            return v1884;
                        }
                        let v1850 = C::ty_vec128_int(ctx, v3);
                        if let Some(v1851) = v1850 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v1852 = C::zero_value(ctx, v45.1);
                            if let Some(v1853) = v1852 {
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v1854 = &constructor_lane_size(ctx, v1851);
                                let v1879 = constructor_uqxtn(ctx, v48, v1854);
                                let v1880 = constructor_output_reg(ctx, v1879);
                                let v1881 = Some(v1880);
                                // Rule at src\isa\aarch64\lower.isle line 2431.
                                return v1881;
                            }
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v1854 = &constructor_lane_size(ctx, v1851);
                            let v1879 = constructor_uqxtn(ctx, v48, v1854);
                            let v1865 = C::put_in_reg(ctx, v45.1);
                            let v1866 = &constructor_lane_size(ctx, v1851);
                            let v1885 = constructor_uqxtn2(ctx, v1879, v1865, v1866);
                            let v1886 = constructor_output_reg(ctx, v1885);
                            let v1887 = Some(v1886);
                            // Rule at src\isa\aarch64\lower.isle line 2439.
                            return v1887;
                        }
                        let v2419 = C::ty_dyn64_int(ctx, v3);
                        if let Some(v2420) = v2419 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v1860 = constructor_mov_vec_elem(ctx, v48, v49, 0x1_u8, 0x0_u8, &VectorSize::Size64x2);
                            let v2421 = &constructor_lane_size(ctx, v2420);
                            let v2441 = constructor_uqxtn(ctx, v1860, v2421);
                            let v2442 = constructor_output_reg(ctx, v2441);
                            let v2443 = Some(v2442);
                            // Rule at src\isa\aarch64\lower_dynamic_neon.isle line 70.
                            return v2443;
                        }
                        let v2413 = C::ty_dyn128_int(ctx, v3);
                        if let Some(v2414) = v2413 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v1852 = C::zero_value(ctx, v45.1);
                            if let Some(v1853) = v1852 {
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v2415 = &constructor_lane_size(ctx, v2414);
                                let v2438 = constructor_uqxtn(ctx, v48, v2415);
                                let v2439 = constructor_output_reg(ctx, v2438);
                                let v2440 = Some(v2439);
                                // Rule at src\isa\aarch64\lower_dynamic_neon.isle line 66.
                                return v2440;
                            }
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v2415 = &constructor_lane_size(ctx, v2414);
                            let v2438 = constructor_uqxtn(ctx, v48, v2415);
                            let v1865 = C::put_in_reg(ctx, v45.1);
                            let v2425 = &constructor_lane_size(ctx, v2414);
                            let v2444 = constructor_uqxtn2(ctx, v2438, v1865, v2425);
                            let v2445 = constructor_output_reg(ctx, v2444);
                            let v2446 = Some(v2445);
                            // Rule at src\isa\aarch64\lower_dynamic_neon.isle line 74.
                            return v2446;
                        }
                    }
                }
                &Opcode::IaddPairwise => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I16X8 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v53 = C::def_inst(ctx, v45.1);
                                if let Some(v54) = v53 {
                                    let v55 = &C::inst_data_value(ctx, v54);
                                    if let &InstructionData::Unary {
                                        opcode: ref v406,
                                        arg: v407,
                                    } = v55 {
                                        match v406 {
                                            &Opcode::SwidenHigh => {
                                                let v64 = C::def_inst(ctx, v45.0);
                                                if let Some(v65) = v64 {
                                                    let v66 = &C::inst_data_value(ctx, v65);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v404,
                                                        arg: v405,
                                                    } = v66 {
                                                        if let &Opcode::SwidenLow = v404 {
                                                            if v405 == v407 {
                                                                let v408 = C::put_in_reg(ctx, v405);
                                                                let v409 = constructor_saddlp8(ctx, v408);
                                                                let v410 = constructor_output_reg(ctx, v409);
                                                                let v411 = Some(v410);
                                                                // Rule at src\isa\aarch64\lower.isle line 343.
                                                                return v411;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenHigh => {
                                                let v64 = C::def_inst(ctx, v45.0);
                                                if let Some(v65) = v64 {
                                                    let v66 = &C::inst_data_value(ctx, v65);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v404,
                                                        arg: v405,
                                                    } = v66 {
                                                        if let &Opcode::UwidenLow = v404 {
                                                            if v405 == v407 {
                                                                let v408 = C::put_in_reg(ctx, v405);
                                                                let v415 = constructor_uaddlp8(ctx, v408);
                                                                let v416 = constructor_output_reg(ctx, v415);
                                                                let v417 = Some(v416);
                                                                // Rule at src\isa\aarch64\lower.isle line 351.
                                                                return v417;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                            I32X4 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v53 = C::def_inst(ctx, v45.1);
                                if let Some(v54) = v53 {
                                    let v55 = &C::inst_data_value(ctx, v54);
                                    if let &InstructionData::Unary {
                                        opcode: ref v406,
                                        arg: v407,
                                    } = v55 {
                                        match v406 {
                                            &Opcode::SwidenHigh => {
                                                let v64 = C::def_inst(ctx, v45.0);
                                                if let Some(v65) = v64 {
                                                    let v66 = &C::inst_data_value(ctx, v65);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v404,
                                                        arg: v405,
                                                    } = v66 {
                                                        if let &Opcode::SwidenLow = v404 {
                                                            if v405 == v407 {
                                                                let v408 = C::put_in_reg(ctx, v405);
                                                                let v412 = constructor_saddlp16(ctx, v408);
                                                                let v413 = constructor_output_reg(ctx, v412);
                                                                let v414 = Some(v413);
                                                                // Rule at src\isa\aarch64\lower.isle line 347.
                                                                return v414;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenHigh => {
                                                let v64 = C::def_inst(ctx, v45.0);
                                                if let Some(v65) = v64 {
                                                    let v66 = &C::inst_data_value(ctx, v65);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v404,
                                                        arg: v405,
                                                    } = v66 {
                                                        if let &Opcode::UwidenLow = v404 {
                                                            if v405 == v407 {
                                                                let v408 = C::put_in_reg(ctx, v405);
                                                                let v418 = constructor_uaddlp16(ctx, v408);
                                                                let v419 = constructor_output_reg(ctx, v418);
                                                                let v420 = Some(v419);
                                                                // Rule at src\isa\aarch64\lower.isle line 355.
                                                                return v420;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                        let v45 = C::unpack_value_array_2(ctx, v44);
                        let v48 = C::put_in_reg(ctx, v45.0);
                        let v49 = C::put_in_reg(ctx, v45.1);
                        let v147 = &constructor_vector_size(ctx, v3);
                        let v421 = constructor_addp(ctx, v48, v49, v147);
                        let v422 = constructor_output_reg(ctx, v421);
                        let v423 = Some(v422);
                        // Rule at src\isa\aarch64\lower.isle line 358.
                        return v423;
                    }
                }
                &Opcode::Iconcat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = C::put_in_reg(ctx, v45.0);
                            let v49 = C::put_in_reg(ctx, v45.1);
                            let v336 = C::value_regs(ctx, v48, v49);
                            let v337 = C::output(ctx, v336);
                            let v338 = Some(v337);
                            // Rule at src\isa\aarch64\lower.isle line 276.
                            return v338;
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::BinaryImm8 {
            opcode: ref v2177,
            arg: v2178,
            imm: v2179,
        } => {
            match v2177 {
                &Opcode::Extractlane => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v477 = C::ty_scalar_float(ctx, v3);
                        if let Some(v478) = v477 {
                            let v2180 = C::u8_from_uimm8(ctx, v2179);
                            if v2180 == 0x0_u8 {
                                let v2181 = constructor_output_value(ctx, v2178);
                                let v2182 = Some(v2181);
                                // Rule at src\isa\aarch64\lower.isle line 2736.
                                return v2182;
                            }
                            let v2183 = C::put_in_reg(ctx, v2178);
                            let v2188 = C::value_type(ctx, v2178);
                            let v2189 = &constructor_vector_size(ctx, v2188);
                            let v2190 = constructor_fpu_move_from_vec(ctx, v2183, v2180, v2189);
                            let v2191 = constructor_output_reg(ctx, v2190);
                            let v2192 = Some(v2191);
                            // Rule at src\isa\aarch64\lower.isle line 2744.
                            return v2192;
                        }
                        let v943 = C::ty_int(ctx, v3);
                        if let Some(v944) = v943 {
                            let v2183 = C::put_in_reg(ctx, v2178);
                            let v2184 = &constructor_scalar_size(ctx, v944);
                            let v2180 = C::u8_from_uimm8(ctx, v2179);
                            let v2185 = constructor_mov_from_vec(ctx, v2183, v2180, v2184);
                            let v2186 = constructor_output_reg(ctx, v2185);
                            let v2187 = Some(v2186);
                            // Rule at src\isa\aarch64\lower.isle line 2739.
                            return v2187;
                        }
                    }
                }
                &Opcode::ExtractVector => {
                    if v2179 == 0x0 {
                        let v2183 = C::put_in_reg(ctx, v2178);
                        let v2456 = C::value_reg(ctx, v2183);
                        let v2457 = C::output(ctx, v2456);
                        let v2458 = Some(v2457);
                        // Rule at src\isa\aarch64\lower_dynamic_neon.isle line 86.
                        return v2458;
                    }
                }
                _ => {}
            }
        }
        &InstructionData::Call {
            opcode: ref v1950,
            args: v1951,
            func_ref: v1952,
        } => {
            match v1950 {
                &Opcode::Call => {
                    let v1954 = C::func_ref_data(ctx, v1952);
                    let v1953 = C::value_list_slice(ctx, v1951);
                    let v1958 = C::gen_call(ctx, v1954.0, v1954.1, v1954.2, v1953);
                    let v1959 = Some(v1958);
                    // Rule at src\isa\aarch64\lower.isle line 2507.
                    return v1959;
                }
                &Opcode::ReturnCall => {
                    let v1954 = C::func_ref_data(ctx, v1952);
                    let v1953 = C::value_list_slice(ctx, v1951);
                    let v1975 = C::gen_return_call(ctx, v1954.0, v1954.1, v1954.2, v1953);
                    let v1976 = Some(v1975);
                    // Rule at src\isa\aarch64\lower.isle line 2528.
                    return v1976;
                }
                _ => {}
            }
        }
        &InstructionData::CallIndirect {
            opcode: ref v1960,
            args: v1961,
            sig_ref: v1962,
        } => {
            match v1960 {
                &Opcode::CallIndirect => {
                    let v1963 = C::value_list_slice(ctx, v1961);
                    let v1964 = C::value_slice_unwrap(ctx, v1963);
                    if let Some(v1965) = v1964 {
                        let v1968 = C::gen_call_indirect(ctx, v1962, v1965.0, v1965.1);
                        let v1969 = Some(v1968);
                        // Rule at src\isa\aarch64\lower.isle line 2510.
                        return v1969;
                    }
                }
                &Opcode::ReturnCallIndirect => {
                    let v1963 = C::value_list_slice(ctx, v1961);
                    let v1964 = C::value_slice_unwrap(ctx, v1963);
                    if let Some(v1965) = v1964 {
                        let v1977 = C::gen_return_call_indirect(ctx, v1962, v1965.0, v1965.1);
                        let v1978 = Some(v1977);
                        // Rule at src\isa\aarch64\lower.isle line 2531.
                        return v1978;
                    }
                }
                _ => {}
            }
        }
        &InstructionData::CondTrap {
            opcode: ref v1586,
            arg: v1587,
            code: ref v1588,
        } => {
            match v1586 {
                &Opcode::Trapz => {
                    let v1590 = constructor_trap_if_val(ctx, &ZeroCond::Zero, v1587, v1588);
                    let v1591 = Some(v1590);
                    // Rule at src\isa\aarch64\lower.isle line 2174.
                    return v1591;
                }
                &Opcode::Trapnz => {
                    let v1593 = constructor_trap_if_val(ctx, &ZeroCond::NonZero, v1587, v1588);
                    let v1594 = Some(v1593);
                    // Rule at src\isa\aarch64\lower.isle line 2179.
                    return v1594;
                }
                _ => {}
            }
        }
        &InstructionData::DynamicStackLoad {
            opcode: ref v2447,
            dynamic_stack_slot: v2448,
        } => {
            if let &Opcode::DynamicStackAddr = v2447 {
                let v2449 = C::temp_writable_reg(ctx, I64);
                let v2450 = &C::abi_dynamic_stackslot_addr(ctx, v2449, v2448);
                let v2451 = C::emit(ctx, v2450);
                let v2452 = C::writable_reg_to_reg(ctx, v2449);
                let v2453 = C::value_reg(ctx, v2452);
                let v2454 = C::output(ctx, v2453);
                let v2455 = Some(v2454);
                // Rule at src\isa\aarch64\lower_dynamic_neon.isle line 80.
                return v2455;
            }
        }
        &InstructionData::FloatCompare {
            opcode: ref v1489,
            args: ref v1490,
            cond: ref v1491,
        } => {
            if let &Opcode::Fcmp = v1489 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v143 = C::multi_lane(ctx, v3);
                    if let Some(v144) = v143 {
                        let v1492 = C::unpack_value_array_2(ctx, v1490);
                        let v1497 = C::zero_value(ctx, v1492.1);
                        if let Some(v1498) = v1497 {
                            let v1495 = &C::fcmp_zero_cond_not_eq(ctx, v1491);
                            if let Some(v1496) = v1495 {
                                let v1499 = C::put_in_reg(ctx, v1492.0);
                                let v424 = &constructor_vector_size(ctx, v3);
                                let v1500 = constructor_fcmeq0(ctx, v1499, v424);
                                let v1501 = constructor_not(ctx, v1500, v424);
                                let v1502 = C::value_reg(ctx, v1501);
                                let v1503 = C::output(ctx, v1502);
                                let v1504 = Some(v1503);
                                // Rule at src\isa\aarch64\lower.isle line 2105.
                                return v1504;
                            }
                            let v1505 = &C::fcmp_zero_cond(ctx, v1491);
                            if let Some(v1506) = v1505 {
                                let v1499 = C::put_in_reg(ctx, v1492.0);
                                let v424 = &constructor_vector_size(ctx, v3);
                                let v1507 = constructor_float_cmp_zero(ctx, v1506, v1499, v424);
                                let v1508 = C::value_reg(ctx, v1507);
                                let v1509 = C::output(ctx, v1508);
                                let v1510 = Some(v1509);
                                // Rule at src\isa\aarch64\lower.isle line 2111.
                                return v1510;
                            }
                        }
                        let v1511 = C::zero_value(ctx, v1492.0);
                        if let Some(v1512) = v1511 {
                            let v1495 = &C::fcmp_zero_cond_not_eq(ctx, v1491);
                            if let Some(v1496) = v1495 {
                                let v1513 = C::put_in_reg(ctx, v1492.1);
                                let v424 = &constructor_vector_size(ctx, v3);
                                let v1514 = constructor_fcmeq0(ctx, v1513, v424);
                                let v1515 = constructor_not(ctx, v1514, v424);
                                let v1516 = C::value_reg(ctx, v1515);
                                let v1517 = C::output(ctx, v1516);
                                let v1518 = Some(v1517);
                                // Rule at src\isa\aarch64\lower.isle line 2117.
                                return v1518;
                            }
                            let v1505 = &C::fcmp_zero_cond(ctx, v1491);
                            if let Some(v1506) = v1505 {
                                let v1513 = C::put_in_reg(ctx, v1492.1);
                                let v424 = &constructor_vector_size(ctx, v3);
                                let v1519 = constructor_float_cmp_zero_swap(ctx, v1506, v1513, v424);
                                let v1520 = C::value_reg(ctx, v1519);
                                let v1521 = C::output(ctx, v1520);
                                let v1522 = Some(v1521);
                                // Rule at src\isa\aarch64\lower.isle line 2123.
                                return v1522;
                            }
                        }
                    }
                    let v1492 = C::unpack_value_array_2(ctx, v1490);
                    let v1523 = C::value_type(ctx, v1492.0);
                    let v1524 = C::ty_scalar_float(ctx, v1523);
                    if let Some(v1525) = v1524 {
                        let v1526 = &constructor_scalar_size(ctx, v1525);
                        let v1527 = C::put_in_reg(ctx, v1492.0);
                        let v1528 = C::put_in_reg(ctx, v1492.1);
                        let v1529 = &constructor_fpu_cmp(ctx, v1526, v1527, v1528);
                        let v1530 = &C::fp_cond_code(ctx, v1491);
                        let v1531 = &constructor_materialize_bool_result(ctx, v1530);
                        let v1532 = constructor_with_flags(ctx, v1529, v1531);
                        let v1533 = C::output(ctx, v1532);
                        let v1534 = Some(v1533);
                        // Rule at src\isa\aarch64\lower.isle line 2129.
                        return v1534;
                    }
                    let v1535 = C::ty_vector_float(ctx, v1523);
                    if let Some(v1536) = v1535 {
                        let v1499 = C::put_in_reg(ctx, v1492.0);
                        let v1537 = C::put_in_reg(ctx, v1492.1);
                        let v1538 = &C::fp_cond_code(ctx, v1491);
                        let v1539 = constructor_vec_cmp(ctx, v1499, v1537, v1523, v1538);
                        let v1540 = constructor_output_reg(ctx, v1539);
                        let v1541 = Some(v1540);
                        // Rule at src\isa\aarch64\lower.isle line 2134.
                        return v1541;
                    }
                }
            }
        }
        &InstructionData::FuncAddr {
            opcode: ref v1919,
            func_ref: v1920,
        } => {
            if let &Opcode::FuncAddr = v1919 {
                let v1921 = C::func_ref_data(ctx, v1920);
                let v1925 = C::box_external_name(ctx, v1921.1);
                let v1927 = constructor_load_ext_name(ctx, v1925, 0_i64);
                let v1928 = constructor_output_reg(ctx, v1927);
                let v1929 = Some(v1928);
                // Rule at src\isa\aarch64\lower.isle line 2486.
                return v1929;
            }
        }
        &InstructionData::IntAddTrap {
            opcode: ref v2261,
            args: ref v2262,
            code: ref v2263,
        } => {
            if let &Opcode::UaddOverflowTrap = v2261 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v41 = C::fits_in_64(ctx, v3);
                    if let Some(v42) = v41 {
                        let v2264 = C::unpack_value_array_2(ctx, v2262);
                        let v2267 = C::put_in_reg(ctx, v2264.0);
                        let v2268 = C::put_in_reg(ctx, v2264.1);
                        let v2269 = &constructor_add_with_flags_paired(ctx, v42, v2267, v2268);
                        let v2270 = constructor_trap_if_overflow(ctx, v2269, v2263);
                        let v2271 = constructor_output_reg(ctx, v2270);
                        let v2272 = Some(v2271);
                        // Rule at src\isa\aarch64\lower.isle line 2841.
                        return v2272;
                    }
                }
            }
        }
        &InstructionData::IntCompare {
            opcode: ref v1542,
            args: ref v1543,
            cond: ref v1544,
        } => {
            if let &Opcode::Icmp = v1542 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v143 = C::multi_lane(ctx, v3);
                    if let Some(v144) = v143 {
                        let v1545 = C::unpack_value_array_2(ctx, v1543);
                        let v1550 = C::zero_value(ctx, v1545.1);
                        if let Some(v1551) = v1550 {
                            let v1548 = &C::icmp_zero_cond_not_eq(ctx, v1544);
                            if let Some(v1549) = v1548 {
                                let v1552 = C::put_in_reg(ctx, v1545.0);
                                let v424 = &constructor_vector_size(ctx, v3);
                                let v1553 = constructor_cmeq0(ctx, v1552, v424);
                                let v1554 = constructor_not(ctx, v1553, v424);
                                let v1555 = C::value_reg(ctx, v1554);
                                let v1556 = C::output(ctx, v1555);
                                let v1557 = Some(v1556);
                                // Rule at src\isa\aarch64\lower.isle line 2140.
                                return v1557;
                            }
                            let v1558 = &C::icmp_zero_cond(ctx, v1544);
                            if let Some(v1559) = v1558 {
                                let v1552 = C::put_in_reg(ctx, v1545.0);
                                let v424 = &constructor_vector_size(ctx, v3);
                                let v1560 = constructor_int_cmp_zero(ctx, v1559, v1552, v424);
                                let v1561 = C::value_reg(ctx, v1560);
                                let v1562 = C::output(ctx, v1561);
                                let v1563 = Some(v1562);
                                // Rule at src\isa\aarch64\lower.isle line 2146.
                                return v1563;
                            }
                        }
                        let v1564 = C::zero_value(ctx, v1545.0);
                        if let Some(v1565) = v1564 {
                            let v1548 = &C::icmp_zero_cond_not_eq(ctx, v1544);
                            if let Some(v1549) = v1548 {
                                let v1566 = C::put_in_reg(ctx, v1545.1);
                                let v424 = &constructor_vector_size(ctx, v3);
                                let v1567 = constructor_cmeq0(ctx, v1566, v424);
                                let v1568 = constructor_not(ctx, v1567, v424);
                                let v1569 = C::value_reg(ctx, v1568);
                                let v1570 = C::output(ctx, v1569);
                                let v1571 = Some(v1570);
                                // Rule at src\isa\aarch64\lower.isle line 2152.
                                return v1571;
                            }
                            let v1558 = &C::icmp_zero_cond(ctx, v1544);
                            if let Some(v1559) = v1558 {
                                let v1566 = C::put_in_reg(ctx, v1545.1);
                                let v424 = &constructor_vector_size(ctx, v3);
                                let v1572 = constructor_int_cmp_zero_swap(ctx, v1559, v1566, v424);
                                let v1573 = C::value_reg(ctx, v1572);
                                let v1574 = C::output(ctx, v1573);
                                let v1575 = Some(v1574);
                                // Rule at src\isa\aarch64\lower.isle line 2158.
                                return v1575;
                            }
                        }
                    }
                }
                let v1545 = C::unpack_value_array_2(ctx, v1543);
                let v1576 = C::value_type(ctx, v1545.0);
                let v1578 = constructor_lower_icmp_into_reg(ctx, v1544, v1545.0, v1545.1, v1576, I8);
                let v1579 = C::output(ctx, v1578);
                let v1580 = Some(v1579);
                // Rule at src\isa\aarch64\lower.isle line 2164.
                return v1580;
            }
        }
        &InstructionData::Load {
            opcode: ref v1979,
            arg: v1980,
            flags: v1981,
            offset: v1982,
        } => {
            match v1979 {
                &Opcode::Load => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v1983 = C::offset32_to_i32(ctx, v1982);
                                let v1984 = &constructor_amode(ctx, I8, v1980, v1983);
                                let v1985 = constructor_aarch64_uload8(ctx, v1984, v1981);
                                let v1986 = constructor_output_reg(ctx, v1985);
                                let v1987 = Some(v1986);
                                // Rule at src\isa\aarch64\lower.isle line 2536.
                                return v1987;
                            }
                            I16 => {
                                let v1983 = C::offset32_to_i32(ctx, v1982);
                                let v1988 = &constructor_amode(ctx, I16, v1980, v1983);
                                let v1989 = constructor_aarch64_uload16(ctx, v1988, v1981);
                                let v1990 = constructor_output_reg(ctx, v1989);
                                let v1991 = Some(v1990);
                                // Rule at src\isa\aarch64\lower.isle line 2539.
                                return v1991;
                            }
                            I32 => {
                                let v1983 = C::offset32_to_i32(ctx, v1982);
                                let v1992 = &constructor_amode(ctx, I32, v1980, v1983);
                                let v1993 = constructor_aarch64_uload32(ctx, v1992, v1981);
                                let v1994 = constructor_output_reg(ctx, v1993);
                                let v1995 = Some(v1994);
                                // Rule at src\isa\aarch64\lower.isle line 2542.
                                return v1995;
                            }
                            I64 => {
                                let v1983 = C::offset32_to_i32(ctx, v1982);
                                let v1996 = &constructor_amode(ctx, I64, v1980, v1983);
                                let v1997 = constructor_aarch64_uload64(ctx, v1996, v1981);
                                let v1998 = constructor_output_reg(ctx, v1997);
                                let v1999 = Some(v1998);
                                // Rule at src\isa\aarch64\lower.isle line 2545.
                                return v1999;
                            }
                            I128 => {
                                let v1983 = C::offset32_to_i32(ctx, v1982);
                                let v2000 = &constructor_pair_amode(ctx, v1980, v1983);
                                let v2001 = constructor_aarch64_loadp64(ctx, v2000, v1981);
                                let v2002 = C::output(ctx, v2001);
                                let v2003 = Some(v2002);
                                // Rule at src\isa\aarch64\lower.isle line 2548.
                                return v2003;
                            }
                            _ => {}
                        }
                        let v2004 = C::ty_float_or_vec(ctx, v3);
                        if let Some(v2005) = v2004 {
                            let v2006 = C::ty_16(ctx, v2005);
                            if let Some(v2007) = v2006 {
                                let v1983 = C::offset32_to_i32(ctx, v1982);
                                let v2009 = &constructor_amode(ctx, F16, v1980, v1983);
                                let v2010 = constructor_aarch64_fpuload16(ctx, v2009, v1981);
                                let v2011 = constructor_output_reg(ctx, v2010);
                                let v2012 = Some(v2011);
                                // Rule at src\isa\aarch64\lower.isle line 2551.
                                return v2012;
                            }
                            let v2013 = C::ty_32(ctx, v2005);
                            if let Some(v2014) = v2013 {
                                let v1983 = C::offset32_to_i32(ctx, v1982);
                                let v2015 = &constructor_amode(ctx, F32, v1980, v1983);
                                let v2016 = constructor_aarch64_fpuload32(ctx, v2015, v1981);
                                let v2017 = constructor_output_reg(ctx, v2016);
                                let v2018 = Some(v2017);
                                // Rule at src\isa\aarch64\lower.isle line 2554.
                                return v2018;
                            }
                            let v2019 = C::ty_64(ctx, v2005);
                            if let Some(v2020) = v2019 {
                                let v1983 = C::offset32_to_i32(ctx, v1982);
                                let v2021 = &constructor_amode(ctx, F64, v1980, v1983);
                                let v2022 = constructor_aarch64_fpuload64(ctx, v2021, v1981);
                                let v2023 = constructor_output_reg(ctx, v2022);
                                let v2024 = Some(v2023);
                                // Rule at src\isa\aarch64\lower.isle line 2557.
                                return v2024;
                            }
                            let v2025 = C::ty_128(ctx, v2005);
                            if let Some(v2026) = v2025 {
                                let v1983 = C::offset32_to_i32(ctx, v1982);
                                let v2028 = &constructor_amode(ctx, F128, v1980, v1983);
                                let v2029 = constructor_aarch64_fpuload128(ctx, v2028, v1981);
                                let v2030 = constructor_output_reg(ctx, v2029);
                                let v2031 = Some(v2030);
                                // Rule at src\isa\aarch64\lower.isle line 2560.
                                return v2031;
                            }
                        }
                        let v2032 = C::ty_dyn_vec64(ctx, v3);
                        if let Some(v2033) = v2032 {
                            let v1983 = C::offset32_to_i32(ctx, v1982);
                            let v2021 = &constructor_amode(ctx, F64, v1980, v1983);
                            let v2022 = constructor_aarch64_fpuload64(ctx, v2021, v1981);
                            let v2023 = constructor_output_reg(ctx, v2022);
                            let v2024 = Some(v2023);
                            // Rule at src\isa\aarch64\lower.isle line 2563.
                            return v2024;
                        }
                        let v2034 = C::ty_dyn_vec128(ctx, v3);
                        if let Some(v2035) = v2034 {
                            let v1983 = C::offset32_to_i32(ctx, v1982);
                            let v2037 = &constructor_amode(ctx, I8X16, v1980, v1983);
                            let v2038 = constructor_aarch64_fpuload128(ctx, v2037, v1981);
                            let v2039 = constructor_output_reg(ctx, v2038);
                            let v2040 = Some(v2039);
                            // Rule at src\isa\aarch64\lower.isle line 2567.
                            return v2040;
                        }
                    }
                }
                &Opcode::Uload8 => {
                    let v1983 = C::offset32_to_i32(ctx, v1982);
                    let v1984 = &constructor_amode(ctx, I8, v1980, v1983);
                    let v1985 = constructor_aarch64_uload8(ctx, v1984, v1981);
                    let v1986 = constructor_output_reg(ctx, v1985);
                    let v1987 = Some(v1986);
                    // Rule at src\isa\aarch64\lower.isle line 2572.
                    return v1987;
                }
                &Opcode::Sload8 => {
                    let v1983 = C::offset32_to_i32(ctx, v1982);
                    let v1984 = &constructor_amode(ctx, I8, v1980, v1983);
                    let v2041 = constructor_aarch64_sload8(ctx, v1984, v1981);
                    let v2042 = constructor_output_reg(ctx, v2041);
                    let v2043 = Some(v2042);
                    // Rule at src\isa\aarch64\lower.isle line 2575.
                    return v2043;
                }
                &Opcode::Uload16 => {
                    let v1983 = C::offset32_to_i32(ctx, v1982);
                    let v1988 = &constructor_amode(ctx, I16, v1980, v1983);
                    let v1989 = constructor_aarch64_uload16(ctx, v1988, v1981);
                    let v1990 = constructor_output_reg(ctx, v1989);
                    let v1991 = Some(v1990);
                    // Rule at src\isa\aarch64\lower.isle line 2578.
                    return v1991;
                }
                &Opcode::Sload16 => {
                    let v1983 = C::offset32_to_i32(ctx, v1982);
                    let v1988 = &constructor_amode(ctx, I16, v1980, v1983);
                    let v2044 = constructor_aarch64_sload16(ctx, v1988, v1981);
                    let v2045 = constructor_output_reg(ctx, v2044);
                    let v2046 = Some(v2045);
                    // Rule at src\isa\aarch64\lower.isle line 2581.
                    return v2046;
                }
                &Opcode::Uload32 => {
                    let v1983 = C::offset32_to_i32(ctx, v1982);
                    let v1992 = &constructor_amode(ctx, I32, v1980, v1983);
                    let v1993 = constructor_aarch64_uload32(ctx, v1992, v1981);
                    let v1994 = constructor_output_reg(ctx, v1993);
                    let v1995 = Some(v1994);
                    // Rule at src\isa\aarch64\lower.isle line 2584.
                    return v1995;
                }
                &Opcode::Sload32 => {
                    let v1983 = C::offset32_to_i32(ctx, v1982);
                    let v1992 = &constructor_amode(ctx, I32, v1980, v1983);
                    let v2047 = constructor_aarch64_sload32(ctx, v1992, v1981);
                    let v2048 = constructor_output_reg(ctx, v2047);
                    let v2049 = Some(v2048);
                    // Rule at src\isa\aarch64\lower.isle line 2587.
                    return v2049;
                }
                &Opcode::Uload8x8 => {
                    let v1983 = C::offset32_to_i32(ctx, v1982);
                    let v2021 = &constructor_amode(ctx, F64, v1980, v1983);
                    let v2022 = constructor_aarch64_fpuload64(ctx, v2021, v1981);
                    let v377 = false;
                    let v2054 = constructor_vec_extend(ctx, &VecExtendOp::Uxtl, v2022, v377, &ScalarSize::Size16);
                    let v2055 = constructor_output_reg(ctx, v2054);
                    let v2056 = Some(v2055);
                    // Rule at src\isa\aarch64\lower.isle line 2597.
                    return v2056;
                }
                &Opcode::Sload8x8 => {
                    let v1983 = C::offset32_to_i32(ctx, v1982);
                    let v2021 = &constructor_amode(ctx, F64, v1980, v1983);
                    let v2022 = constructor_aarch64_fpuload64(ctx, v2021, v1981);
                    let v377 = false;
                    let v2051 = constructor_vec_extend(ctx, &VecExtendOp::Sxtl, v2022, v377, &ScalarSize::Size16);
                    let v2052 = constructor_output_reg(ctx, v2051);
                    let v2053 = Some(v2052);
                    // Rule at src\isa\aarch64\lower.isle line 2591.
                    return v2053;
                }
                &Opcode::Uload16x4 => {
                    let v1983 = C::offset32_to_i32(ctx, v1982);
                    let v2021 = &constructor_amode(ctx, F64, v1980, v1983);
                    let v2022 = constructor_aarch64_fpuload64(ctx, v2021, v1981);
                    let v377 = false;
                    let v2060 = constructor_vec_extend(ctx, &VecExtendOp::Uxtl, v2022, v377, &ScalarSize::Size32);
                    let v2061 = constructor_output_reg(ctx, v2060);
                    let v2062 = Some(v2061);
                    // Rule at src\isa\aarch64\lower.isle line 2609.
                    return v2062;
                }
                &Opcode::Sload16x4 => {
                    let v1983 = C::offset32_to_i32(ctx, v1982);
                    let v2021 = &constructor_amode(ctx, F64, v1980, v1983);
                    let v2022 = constructor_aarch64_fpuload64(ctx, v2021, v1981);
                    let v377 = false;
                    let v2057 = constructor_vec_extend(ctx, &VecExtendOp::Sxtl, v2022, v377, &ScalarSize::Size32);
                    let v2058 = constructor_output_reg(ctx, v2057);
                    let v2059 = Some(v2058);
                    // Rule at src\isa\aarch64\lower.isle line 2603.
                    return v2059;
                }
                &Opcode::Uload32x2 => {
                    let v1983 = C::offset32_to_i32(ctx, v1982);
                    let v2021 = &constructor_amode(ctx, F64, v1980, v1983);
                    let v2022 = constructor_aarch64_fpuload64(ctx, v2021, v1981);
                    let v377 = false;
                    let v2066 = constructor_vec_extend(ctx, &VecExtendOp::Uxtl, v2022, v377, &ScalarSize::Size64);
                    let v2067 = constructor_output_reg(ctx, v2066);
                    let v2068 = Some(v2067);
                    // Rule at src\isa\aarch64\lower.isle line 2621.
                    return v2068;
                }
                &Opcode::Sload32x2 => {
                    let v1983 = C::offset32_to_i32(ctx, v1982);
                    let v2021 = &constructor_amode(ctx, F64, v1980, v1983);
                    let v2022 = constructor_aarch64_fpuload64(ctx, v2021, v1981);
                    let v377 = false;
                    let v2063 = constructor_vec_extend(ctx, &VecExtendOp::Sxtl, v2022, v377, &ScalarSize::Size64);
                    let v2064 = constructor_output_reg(ctx, v2063);
                    let v2065 = Some(v2064);
                    // Rule at src\isa\aarch64\lower.isle line 2615.
                    return v2065;
                }
                _ => {}
            }
        }
        &InstructionData::LoadNoOffset {
            opcode: ref v1717,
            arg: v1718,
            flags: v1719,
        } => {
            match v1717 {
                &Opcode::Bitcast => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v2004 = C::ty_float_or_vec(ctx, v3);
                        if let Some(v2005) = v2004 {
                            let v2144 = C::value_type(ctx, v1718);
                            let v2145 = C::ty_float_or_vec(ctx, v2144);
                            if let Some(v2146) = v2145 {
                                let v2147 = constructor_output_value(ctx, v1718);
                                let v2148 = Some(v2147);
                                // Rule at src\isa\aarch64\lower.isle line 2704.
                                return v2148;
                            }
                            if v2144 == I128 {
                                let v2149 = C::put_in_regs(ctx, v1718);
                                let v2150 = C::value_regs_get(ctx, v2149, 0x0_usize);
                                let v2151 = constructor_mov_to_fpu(ctx, v2150, &ScalarSize::Size64);
                                let v2152 = C::put_in_regs(ctx, v1718);
                                let v2153 = C::value_regs_get(ctx, v2152, 0x1_usize);
                                let v2154 = constructor_mov_to_vec(ctx, v2151, v2153, 0x1_u8, &VectorSize::Size64x2);
                                let v2155 = constructor_output_reg(ctx, v2154);
                                let v2156 = Some(v2155);
                                // Rule at src\isa\aarch64\lower.isle line 2708.
                                return v2156;
                            }
                        }
                        if v3 == I128 {
                            let v2144 = C::value_type(ctx, v1718);
                            let v2145 = C::ty_float_or_vec(ctx, v2144);
                            if let Some(v2146) = v2145 {
                                let v1720 = C::put_in_reg(ctx, v1718);
                                let v2157 = constructor_mov_from_vec(ctx, v1720, 0x0_u8, &ScalarSize::Size64);
                                let v2158 = C::put_in_reg(ctx, v1718);
                                let v2159 = constructor_mov_from_vec(ctx, v2158, 0x1_u8, &ScalarSize::Size64);
                                let v2160 = C::value_regs(ctx, v2157, v2159);
                                let v2161 = C::output(ctx, v2160);
                                let v2162 = Some(v2161);
                                // Rule at src\isa\aarch64\lower.isle line 2712.
                                return v2162;
                            }
                        }
                        if let Some(v2005) = v2004 {
                            let v2144 = C::value_type(ctx, v1718);
                            let v2163 = C::ty_int_ref_scalar_64(ctx, v2144);
                            if let Some(v2164) = v2163 {
                                let v1720 = C::put_in_reg(ctx, v1718);
                                let v2165 = &constructor_scalar_size(ctx, v2144);
                                let v2166 = constructor_mov_to_fpu(ctx, v1720, v2165);
                                let v2167 = constructor_output_reg(ctx, v2166);
                                let v2168 = Some(v2167);
                                // Rule at src\isa\aarch64\lower.isle line 2716.
                                return v2168;
                            }
                        }
                        let v1470 = C::ty_int_ref_scalar_64(ctx, v3);
                        if let Some(v1471) = v1470 {
                            let v2144 = C::value_type(ctx, v1718);
                            let v2169 = C::fits_in_64(ctx, v2144);
                            if let Some(v2170) = v2169 {
                                let v2171 = C::ty_float_or_vec(ctx, v2170);
                                if let Some(v2172) = v2171 {
                                    let v1720 = C::put_in_reg(ctx, v1718);
                                    let v2173 = &constructor_scalar_size(ctx, v3);
                                    let v2174 = constructor_mov_from_vec(ctx, v1720, 0x0_u8, v2173);
                                    let v2175 = constructor_output_reg(ctx, v2174);
                                    let v2176 = Some(v2175);
                                    // Rule at src\isa\aarch64\lower.isle line 2721.
                                    return v2176;
                                }
                            }
                            let v2163 = C::ty_int_ref_scalar_64(ctx, v2144);
                            if let Some(v2164) = v2163 {
                                let v2147 = constructor_output_value(ctx, v1718);
                                let v2148 = Some(v2147);
                                // Rule at src\isa\aarch64\lower.isle line 2726.
                                return v2148;
                            }
                        }
                        if v3 == I128 {
                            let v2144 = C::value_type(ctx, v1718);
                            if v2144 == I128 {
                                let v2147 = constructor_output_value(ctx, v1718);
                                let v2148 = Some(v2147);
                                // Rule at src\isa\aarch64\lower.isle line 2730.
                                return v2148;
                            }
                        }
                    }
                }
                &Opcode::AtomicLoad => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1715 = C::valid_atomic_transaction(ctx, v3);
                        if let Some(v1716) = v1715 {
                            let v1720 = C::put_in_reg(ctx, v1718);
                            let v1721 = constructor_load_acquire(ctx, v1716, v1719, v1720);
                            let v1722 = constructor_output_reg(ctx, v1721);
                            let v1723 = Some(v1722);
                            // Rule at src\isa\aarch64\lower.isle line 2300.
                            return v1723;
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::MultiAry {
            opcode: ref v1970,
            args: v1971,
        } => {
            if let &Opcode::Return = v1970 {
                let v1972 = C::value_list_slice(ctx, v1971);
                let v1973 = constructor_lower_return(ctx, v1972);
                let v1974 = Some(v1973);
                // Rule at src\isa\aarch64\lower.isle line 2523.
                return v1974;
            }
        }
        &InstructionData::NullAry {
            opcode: ref v37,
        } => {
            match v37 {
                &Opcode::Debugtrap => {
                    let v1916 = &constructor_brk(ctx);
                    let v1917 = constructor_side_effect(ctx, v1916);
                    let v1918 = Some(v1917);
                    // Rule at src\isa\aarch64\lower.isle line 2481.
                    return v1918;
                }
                &Opcode::GetPinnedReg => {
                    let v2137 = C::preg_pinned(ctx);
                    let v2138 = constructor_mov_from_preg(ctx, v2137);
                    let v2139 = constructor_output_reg(ctx, v2138);
                    let v2140 = Some(v2139);
                    // Rule at src\isa\aarch64\lower.isle line 2695.
                    return v2140;
                }
                &Opcode::GetFramePointer => {
                    let v1941 = constructor_aarch64_fp(ctx);
                    let v1942 = constructor_output_reg(ctx, v1941);
                    let v1943 = Some(v1942);
                    // Rule at src\isa\aarch64\lower.isle line 2496.
                    return v1943;
                }
                &Opcode::GetStackPointer => {
                    let v1944 = constructor_aarch64_sp(ctx);
                    let v1945 = constructor_output_reg(ctx, v1944);
                    let v1946 = Some(v1945);
                    // Rule at src\isa\aarch64\lower.isle line 2499.
                    return v1946;
                }
                &Opcode::GetReturnAddress => {
                    let v1947 = constructor_aarch64_link(ctx);
                    let v1948 = constructor_output_reg(ctx, v1947);
                    let v1949 = Some(v1948);
                    // Rule at src\isa\aarch64\lower.isle line 2502.
                    return v1949;
                }
                &Opcode::Nop => {
                    let v38 = C::invalid_reg(ctx);
                    let v39 = constructor_output_reg(ctx, v38);
                    let v40 = Some(v39);
                    // Rule at src\isa\aarch64\lower.isle line 45.
                    return v40;
                }
                &Opcode::Fence => {
                    let v1913 = &constructor_aarch64_fence(ctx);
                    let v1914 = constructor_side_effect(ctx, v1913);
                    let v1915 = Some(v1914);
                    // Rule at src\isa\aarch64\lower.isle line 2476.
                    return v1915;
                }
                _ => {}
            }
        }
        &InstructionData::Shuffle {
            opcode: ref v165,
            args: ref v166,
            imm: v167,
        } => {
            if let &Opcode::Shuffle = v165 {
                let v171 = C::shuffle_dup8_from_imm(ctx, v167);
                if let Some(v172) = v171 {
                    let v168 = C::unpack_value_array_2(ctx, v166);
                    let v173 = C::put_in_reg(ctx, v168.0);
                    let v175 = constructor_vec_dup_from_fpu(ctx, v173, &VectorSize::Size8x16, v172);
                    let v176 = constructor_output_reg(ctx, v175);
                    let v177 = Some(v176);
                    // Rule at src\isa\aarch64\lower.isle line 133.
                    return v177;
                }
                let v178 = C::shuffle_dup16_from_imm(ctx, v167);
                if let Some(v179) = v178 {
                    let v168 = C::unpack_value_array_2(ctx, v166);
                    let v173 = C::put_in_reg(ctx, v168.0);
                    let v181 = constructor_vec_dup_from_fpu(ctx, v173, &VectorSize::Size16x8, v179);
                    let v182 = constructor_output_reg(ctx, v181);
                    let v183 = Some(v182);
                    // Rule at src\isa\aarch64\lower.isle line 135.
                    return v183;
                }
                let v184 = C::shuffle_dup32_from_imm(ctx, v167);
                if let Some(v185) = v184 {
                    let v168 = C::unpack_value_array_2(ctx, v166);
                    let v173 = C::put_in_reg(ctx, v168.0);
                    let v187 = constructor_vec_dup_from_fpu(ctx, v173, &VectorSize::Size32x4, v185);
                    let v188 = constructor_output_reg(ctx, v187);
                    let v189 = Some(v188);
                    // Rule at src\isa\aarch64\lower.isle line 137.
                    return v189;
                }
                let v190 = C::shuffle_dup64_from_imm(ctx, v167);
                if let Some(v191) = v190 {
                    let v168 = C::unpack_value_array_2(ctx, v166);
                    let v173 = C::put_in_reg(ctx, v168.0);
                    let v193 = constructor_vec_dup_from_fpu(ctx, v173, &VectorSize::Size64x2, v191);
                    let v194 = constructor_output_reg(ctx, v193);
                    let v195 = Some(v194);
                    // Rule at src\isa\aarch64\lower.isle line 139.
                    return v195;
                }
                let v196 = C::vec_extract_imm4_from_immediate(ctx, v167);
                if let Some(v197) = v196 {
                    let v168 = C::unpack_value_array_2(ctx, v166);
                    let v173 = C::put_in_reg(ctx, v168.0);
                    let v198 = C::put_in_reg(ctx, v168.1);
                    let v199 = constructor_vec_extract(ctx, v173, v198, v197);
                    let v200 = constructor_output_reg(ctx, v199);
                    let v201 = Some(v200);
                    // Rule at src\isa\aarch64\lower.isle line 158.
                    return v201;
                }
                let v202 = C::u128_from_immediate(ctx, v167);
                if let Some(v203) = v202 {
                    match v203 {
                        0x8090a0b0c0d0e0f0001020304050607_u128 => {
                            let v168 = C::unpack_value_array_2(ctx, v166);
                            let v173 = C::put_in_reg(ctx, v168.0);
                            let v273 = constructor_rev64(ctx, v173, &VectorSize::Size8x16);
                            let v274 = constructor_output_reg(ctx, v273);
                            let v275 = Some(v274);
                            // Rule at src\isa\aarch64\lower.isle line 234.
                            return v275;
                        }
                        0x9080b0a0d0c0f0e0100030205040706_u128 => {
                            let v168 = C::unpack_value_array_2(ctx, v166);
                            let v173 = C::put_in_reg(ctx, v168.0);
                            let v276 = constructor_rev64(ctx, v173, &VectorSize::Size16x8);
                            let v277 = constructor_output_reg(ctx, v276);
                            let v278 = Some(v277);
                            // Rule at src\isa\aarch64\lower.isle line 236.
                            return v278;
                        }
                        0xb0a09080f0e0d0c0302010007060504_u128 => {
                            let v168 = C::unpack_value_array_2(ctx, v166);
                            let v173 = C::put_in_reg(ctx, v168.0);
                            let v279 = constructor_rev64(ctx, v173, &VectorSize::Size32x4);
                            let v280 = constructor_output_reg(ctx, v279);
                            let v281 = Some(v280);
                            // Rule at src\isa\aarch64\lower.isle line 238.
                            return v281;
                        }
                        0xc0d0e0f08090a0b0405060700010203_u128 => {
                            let v168 = C::unpack_value_array_2(ctx, v166);
                            let v173 = C::put_in_reg(ctx, v168.0);
                            let v267 = constructor_rev32(ctx, v173, &VectorSize::Size8x16);
                            let v268 = constructor_output_reg(ctx, v267);
                            let v269 = Some(v268);
                            // Rule at src\isa\aarch64\lower.isle line 230.
                            return v269;
                        }
                        0xd0c0f0e09080b0a0504070601000302_u128 => {
                            let v168 = C::unpack_value_array_2(ctx, v166);
                            let v173 = C::put_in_reg(ctx, v168.0);
                            let v270 = constructor_rev32(ctx, v173, &VectorSize::Size16x8);
                            let v271 = constructor_output_reg(ctx, v270);
                            let v272 = Some(v271);
                            // Rule at src\isa\aarch64\lower.isle line 232.
                            return v272;
                        }
                        0xe0f0c0d0a0b08090607040502030001_u128 => {
                            let v168 = C::unpack_value_array_2(ctx, v166);
                            let v173 = C::put_in_reg(ctx, v168.0);
                            let v264 = constructor_rev16(ctx, v173, &VectorSize::Size8x16);
                            let v265 = constructor_output_reg(ctx, v264);
                            let v266 = Some(v265);
                            // Rule at src\isa\aarch64\lower.isle line 228.
                            return v266;
                        }
                        0x17071606150514041303120211011000_u128 => {
                            let v168 = C::unpack_value_array_2(ctx, v166);
                            let v173 = C::put_in_reg(ctx, v168.0);
                            let v198 = C::put_in_reg(ctx, v168.1);
                            let v228 = constructor_vec_zip1(ctx, v173, v198, &VectorSize::Size8x16);
                            let v229 = constructor_output_reg(ctx, v228);
                            let v230 = Some(v229);
                            // Rule at src\isa\aarch64\lower.isle line 190.
                            return v230;
                        }
                        0x17160706151405041312030211100100_u128 => {
                            let v168 = C::unpack_value_array_2(ctx, v166);
                            let v173 = C::put_in_reg(ctx, v168.0);
                            let v198 = C::put_in_reg(ctx, v168.1);
                            let v234 = constructor_vec_zip1(ctx, v173, v198, &VectorSize::Size16x8);
                            let v235 = constructor_output_reg(ctx, v234);
                            let v236 = Some(v235);
                            // Rule at src\isa\aarch64\lower.isle line 194.
                            return v236;
                        }
                        0x17161514070605041312111003020100_u128 => {
                            let v168 = C::unpack_value_array_2(ctx, v166);
                            let v173 = C::put_in_reg(ctx, v168.0);
                            let v198 = C::put_in_reg(ctx, v168.1);
                            let v240 = constructor_vec_zip1(ctx, v173, v198, &VectorSize::Size32x4);
                            let v241 = constructor_output_reg(ctx, v240);
                            let v242 = Some(v241);
                            // Rule at src\isa\aarch64\lower.isle line 198.
                            return v242;
                        }
                        0x17161514131211100706050403020100_u128 => {
                            let v168 = C::unpack_value_array_2(ctx, v166);
                            let v173 = C::put_in_reg(ctx, v168.0);
                            let v198 = C::put_in_reg(ctx, v168.1);
                            let v222 = constructor_vec_uzp1(ctx, v173, v198, &VectorSize::Size64x2);
                            let v223 = constructor_output_reg(ctx, v222);
                            let v224 = Some(v223);
                            // Rule at src\isa\aarch64\lower.isle line 183.
                            return v224;
                        }
                        0x1b1a19180b0a09081312111003020100_u128 => {
                            let v168 = C::unpack_value_array_2(ctx, v166);
                            let v173 = C::put_in_reg(ctx, v168.0);
                            let v198 = C::put_in_reg(ctx, v168.1);
                            let v258 = constructor_vec_trn1(ctx, v173, v198, &VectorSize::Size32x4);
                            let v259 = constructor_output_reg(ctx, v258);
                            let v260 = Some(v259);
                            // Rule at src\isa\aarch64\lower.isle line 216.
                            return v260;
                        }
                        0x1b1a1918131211100b0a090803020100_u128 => {
                            let v168 = C::unpack_value_array_2(ctx, v166);
                            let v173 = C::put_in_reg(ctx, v168.0);
                            let v198 = C::put_in_reg(ctx, v168.1);
                            let v216 = constructor_vec_uzp1(ctx, v173, v198, &VectorSize::Size32x4);
                            let v217 = constructor_output_reg(ctx, v216);
                            let v218 = Some(v217);
                            // Rule at src\isa\aarch64\lower.isle line 179.
                            return v218;
                        }
                        0x1d1c0d0c191809081514050411100100_u128 => {
                            let v168 = C::unpack_value_array_2(ctx, v166);
                            let v173 = C::put_in_reg(ctx, v168.0);
                            let v198 = C::put_in_reg(ctx, v168.1);
                            let v252 = constructor_vec_trn1(ctx, v173, v198, &VectorSize::Size16x8);
                            let v253 = constructor_output_reg(ctx, v252);
                            let v254 = Some(v253);
                            // Rule at src\isa\aarch64\lower.isle line 212.
                            return v254;
                        }
                        0x1d1c1918151411100d0c090805040100_u128 => {
                            let v168 = C::unpack_value_array_2(ctx, v166);
                            let v173 = C::put_in_reg(ctx, v168.0);
                            let v198 = C::put_in_reg(ctx, v168.1);
                            let v210 = constructor_vec_uzp1(ctx, v173, v198, &VectorSize::Size16x8);
                            let v211 = constructor_output_reg(ctx, v210);
                            let v212 = Some(v211);
                            // Rule at src\isa\aarch64\lower.isle line 175.
                            return v212;
                        }
                        0x1e0e1c0c1a0a18081606140412021000_u128 => {
                            let v168 = C::unpack_value_array_2(ctx, v166);
                            let v173 = C::put_in_reg(ctx, v168.0);
                            let v198 = C::put_in_reg(ctx, v168.1);
                            let v246 = constructor_vec_trn1(ctx, v173, v198, &VectorSize::Size8x16);
                            let v247 = constructor_output_reg(ctx, v246);
                            let v248 = Some(v247);
                            // Rule at src\isa\aarch64\lower.isle line 208.
                            return v248;
                        }
                        0x1e1c1a18161412100e0c0a0806040200_u128 => {
                            let v168 = C::unpack_value_array_2(ctx, v166);
                            let v173 = C::put_in_reg(ctx, v168.0);
                            let v198 = C::put_in_reg(ctx, v168.1);
                            let v204 = constructor_vec_uzp1(ctx, v173, v198, &VectorSize::Size8x16);
                            let v205 = constructor_output_reg(ctx, v204);
                            let v206 = Some(v205);
                            // Rule at src\isa\aarch64\lower.isle line 171.
                            return v206;
                        }
                        0x1f0f1d0d1b0b19091707150513031101_u128 => {
                            let v168 = C::unpack_value_array_2(ctx, v166);
                            let v173 = C::put_in_reg(ctx, v168.0);
                            let v198 = C::put_in_reg(ctx, v168.1);
                            let v249 = constructor_vec_trn2(ctx, v173, v198, &VectorSize::Size8x16);
                            let v250 = constructor_output_reg(ctx, v249);
                            let v251 = Some(v250);
                            // Rule at src\isa\aarch64\lower.isle line 210.
                            return v251;
                        }
                        0x1f0f1e0e1d0d1c0c1b0b1a0a19091808_u128 => {
                            let v168 = C::unpack_value_array_2(ctx, v166);
                            let v173 = C::put_in_reg(ctx, v168.0);
                            let v198 = C::put_in_reg(ctx, v168.1);
                            let v231 = constructor_vec_zip2(ctx, v173, v198, &VectorSize::Size8x16);
                            let v232 = constructor_output_reg(ctx, v231);
                            let v233 = Some(v232);
                            // Rule at src\isa\aarch64\lower.isle line 192.
                            return v233;
                        }
                        0x1f1d1b19171513110f0d0b0907050301_u128 => {
                            let v168 = C::unpack_value_array_2(ctx, v166);
                            let v173 = C::put_in_reg(ctx, v168.0);
                            let v198 = C::put_in_reg(ctx, v168.1);
                            let v207 = constructor_vec_uzp2(ctx, v173, v198, &VectorSize::Size8x16);
                            let v208 = constructor_output_reg(ctx, v207);
                            let v209 = Some(v208);
                            // Rule at src\isa\aarch64\lower.isle line 173.
                            return v209;
                        }
                        0x1f1e0f0e1b1a0b0a1716070613120302_u128 => {
                            let v168 = C::unpack_value_array_2(ctx, v166);
                            let v173 = C::put_in_reg(ctx, v168.0);
                            let v198 = C::put_in_reg(ctx, v168.1);
                            let v255 = constructor_vec_trn2(ctx, v173, v198, &VectorSize::Size16x8);
                            let v256 = constructor_output_reg(ctx, v255);
                            let v257 = Some(v256);
                            // Rule at src\isa\aarch64\lower.isle line 214.
                            return v257;
                        }
                        0x1f1e0f0e1d1c0d0c1b1a0b0a19180908_u128 => {
                            let v168 = C::unpack_value_array_2(ctx, v166);
                            let v173 = C::put_in_reg(ctx, v168.0);
                            let v198 = C::put_in_reg(ctx, v168.1);
                            let v237 = constructor_vec_zip2(ctx, v173, v198, &VectorSize::Size16x8);
                            let v238 = constructor_output_reg(ctx, v237);
                            let v239 = Some(v238);
                            // Rule at src\isa\aarch64\lower.isle line 196.
                            return v239;
                        }
                        0x1f1e1b1a171613120f0e0b0a07060302_u128 => {
                            let v168 = C::unpack_value_array_2(ctx, v166);
                            let v173 = C::put_in_reg(ctx, v168.0);
                            let v198 = C::put_in_reg(ctx, v168.1);
                            let v213 = constructor_vec_uzp2(ctx, v173, v198, &VectorSize::Size16x8);
                            let v214 = constructor_output_reg(ctx, v213);
                            let v215 = Some(v214);
                            // Rule at src\isa\aarch64\lower.isle line 177.
                            return v215;
                        }
                        0x1f1e1d1c0f0e0d0c1716151407060504_u128 => {
                            let v168 = C::unpack_value_array_2(ctx, v166);
                            let v173 = C::put_in_reg(ctx, v168.0);
                            let v198 = C::put_in_reg(ctx, v168.1);
                            let v261 = constructor_vec_trn2(ctx, v173, v198, &VectorSize::Size32x4);
                            let v262 = constructor_output_reg(ctx, v261);
                            let v263 = Some(v262);
                            // Rule at src\isa\aarch64\lower.isle line 218.
                            return v263;
                        }
                        0x1f1e1d1c0f0e0d0c1b1a19180b0a0908_u128 => {
                            let v168 = C::unpack_value_array_2(ctx, v166);
                            let v173 = C::put_in_reg(ctx, v168.0);
                            let v198 = C::put_in_reg(ctx, v168.1);
                            let v243 = constructor_vec_zip2(ctx, v173, v198, &VectorSize::Size32x4);
                            let v244 = constructor_output_reg(ctx, v243);
                            let v245 = Some(v244);
                            // Rule at src\isa\aarch64\lower.isle line 200.
                            return v245;
                        }
                        0x1f1e1d1c171615140f0e0d0c07060504_u128 => {
                            let v168 = C::unpack_value_array_2(ctx, v166);
                            let v173 = C::put_in_reg(ctx, v168.0);
                            let v198 = C::put_in_reg(ctx, v168.1);
                            let v219 = constructor_vec_uzp2(ctx, v173, v198, &VectorSize::Size32x4);
                            let v220 = constructor_output_reg(ctx, v219);
                            let v221 = Some(v220);
                            // Rule at src\isa\aarch64\lower.isle line 181.
                            return v221;
                        }
                        0x1f1e1d1c1b1a19180f0e0d0c0b0a0908_u128 => {
                            let v168 = C::unpack_value_array_2(ctx, v166);
                            let v173 = C::put_in_reg(ctx, v168.0);
                            let v198 = C::put_in_reg(ctx, v168.1);
                            let v225 = constructor_vec_uzp2(ctx, v173, v198, &VectorSize::Size64x2);
                            let v226 = constructor_output_reg(ctx, v225);
                            let v227 = Some(v226);
                            // Rule at src\isa\aarch64\lower.isle line 185.
                            return v227;
                        }
                        _ => {}
                    }
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v282 = constructor_constant_f128(ctx, v203);
                        let v168 = C::unpack_value_array_2(ctx, v166);
                        let v283 = C::put_in_reg(ctx, v168.0);
                        let v284 = C::put_in_reg(ctx, v168.1);
                        let v3 = C::value_type(ctx, v2);
                        let v285 = constructor_vec_tbl2(ctx, v283, v284, v282, v3);
                        let v286 = constructor_output_reg(ctx, v285);
                        let v287 = Some(v286);
                        // Rule at src\isa\aarch64\lower.isle line 241.
                        return v287;
                    }
                }
            }
        }
        &InstructionData::StackLoad {
            opcode: ref v2215,
            stack_slot: v2216,
            offset: v2217,
        } => {
            if let &Opcode::StackAddr = v2215 {
                let v2218 = constructor_compute_stack_addr(ctx, v2216, v2217);
                let v2219 = constructor_output_reg(ctx, v2218);
                let v2220 = Some(v2219);
                // Rule at src\isa\aarch64\lower.isle line 2763.
                return v2220;
            }
        }
        &InstructionData::Store {
            opcode: ref v2069,
            args: ref v2070,
            flags: v2071,
            offset: v2072,
        } => {
            match v2069 {
                &Opcode::Store => {
                    let v2073 = C::unpack_value_array_2(ctx, v2070);
                    let v2076 = C::value_type(ctx, v2073.0);
                    match v2076 {
                        I8 => {
                            let v2077 = C::offset32_to_i32(ctx, v2072);
                            let v2078 = &constructor_amode(ctx, I8, v2073.1, v2077);
                            let v2079 = C::put_in_reg(ctx, v2073.0);
                            let v2080 = &constructor_aarch64_store8(ctx, v2078, v2071, v2079);
                            let v2081 = constructor_side_effect(ctx, v2080);
                            let v2082 = Some(v2081);
                            // Rule at src\isa\aarch64\lower.isle line 2630.
                            return v2082;
                        }
                        I16 => {
                            let v2077 = C::offset32_to_i32(ctx, v2072);
                            let v2083 = &constructor_amode(ctx, I16, v2073.1, v2077);
                            let v2079 = C::put_in_reg(ctx, v2073.0);
                            let v2084 = &constructor_aarch64_store16(ctx, v2083, v2071, v2079);
                            let v2085 = constructor_side_effect(ctx, v2084);
                            let v2086 = Some(v2085);
                            // Rule at src\isa\aarch64\lower.isle line 2634.
                            return v2086;
                        }
                        I32 => {
                            let v2077 = C::offset32_to_i32(ctx, v2072);
                            let v2087 = &constructor_amode(ctx, I32, v2073.1, v2077);
                            let v2079 = C::put_in_reg(ctx, v2073.0);
                            let v2088 = &constructor_aarch64_store32(ctx, v2087, v2071, v2079);
                            let v2089 = constructor_side_effect(ctx, v2088);
                            let v2090 = Some(v2089);
                            // Rule at src\isa\aarch64\lower.isle line 2638.
                            return v2090;
                        }
                        I64 => {
                            let v2077 = C::offset32_to_i32(ctx, v2072);
                            let v2091 = &constructor_amode(ctx, I64, v2073.1, v2077);
                            let v2079 = C::put_in_reg(ctx, v2073.0);
                            let v2092 = &constructor_aarch64_store64(ctx, v2091, v2071, v2079);
                            let v2093 = constructor_side_effect(ctx, v2092);
                            let v2094 = Some(v2093);
                            // Rule at src\isa\aarch64\lower.isle line 2642.
                            return v2094;
                        }
                        I128 => {
                            let v2077 = C::offset32_to_i32(ctx, v2072);
                            let v2095 = &constructor_pair_amode(ctx, v2073.1, v2077);
                            let v2096 = C::put_in_regs(ctx, v2073.0);
                            let v2097 = C::value_regs_get(ctx, v2096, 0x0_usize);
                            let v2098 = C::put_in_regs(ctx, v2073.0);
                            let v2099 = C::value_regs_get(ctx, v2098, 0x1_usize);
                            let v2100 = &constructor_aarch64_storep64(ctx, v2095, v2071, v2097, v2099);
                            let v2101 = constructor_side_effect(ctx, v2100);
                            let v2102 = Some(v2101);
                            // Rule at src\isa\aarch64\lower.isle line 2660.
                            return v2102;
                        }
                        _ => {}
                    }
                    let v2103 = C::ty_float_or_vec(ctx, v2076);
                    if let Some(v2104) = v2103 {
                        let v2105 = C::ty_16(ctx, v2104);
                        if let Some(v2106) = v2105 {
                            let v2077 = C::offset32_to_i32(ctx, v2072);
                            let v2107 = &constructor_amode(ctx, F16, v2073.1, v2077);
                            let v2079 = C::put_in_reg(ctx, v2073.0);
                            let v2108 = &constructor_aarch64_fpustore16(ctx, v2107, v2071, v2079);
                            let v2109 = constructor_side_effect(ctx, v2108);
                            let v2110 = Some(v2109);
                            // Rule at src\isa\aarch64\lower.isle line 2667.
                            return v2110;
                        }
                        let v2111 = C::ty_32(ctx, v2104);
                        if let Some(v2112) = v2111 {
                            let v2077 = C::offset32_to_i32(ctx, v2072);
                            let v2113 = &constructor_amode(ctx, F32, v2073.1, v2077);
                            let v2079 = C::put_in_reg(ctx, v2073.0);
                            let v2114 = &constructor_aarch64_fpustore32(ctx, v2113, v2071, v2079);
                            let v2115 = constructor_side_effect(ctx, v2114);
                            let v2116 = Some(v2115);
                            // Rule at src\isa\aarch64\lower.isle line 2671.
                            return v2116;
                        }
                        let v2117 = C::ty_64(ctx, v2104);
                        if let Some(v2118) = v2117 {
                            let v2077 = C::offset32_to_i32(ctx, v2072);
                            let v2119 = &constructor_amode(ctx, F64, v2073.1, v2077);
                            let v2079 = C::put_in_reg(ctx, v2073.0);
                            let v2120 = &constructor_aarch64_fpustore64(ctx, v2119, v2071, v2079);
                            let v2121 = constructor_side_effect(ctx, v2120);
                            let v2122 = Some(v2121);
                            // Rule at src\isa\aarch64\lower.isle line 2675.
                            return v2122;
                        }
                        let v2123 = C::ty_128(ctx, v2104);
                        if let Some(v2124) = v2123 {
                            let v2077 = C::offset32_to_i32(ctx, v2072);
                            let v2125 = &constructor_amode(ctx, F128, v2073.1, v2077);
                            let v2079 = C::put_in_reg(ctx, v2073.0);
                            let v2126 = &constructor_aarch64_fpustore128(ctx, v2125, v2071, v2079);
                            let v2127 = constructor_side_effect(ctx, v2126);
                            let v2128 = Some(v2127);
                            // Rule at src\isa\aarch64\lower.isle line 2679.
                            return v2128;
                        }
                    }
                    let v2129 = C::ty_dyn_vec64(ctx, v2076);
                    if let Some(v2130) = v2129 {
                        let v2077 = C::offset32_to_i32(ctx, v2072);
                        let v2119 = &constructor_amode(ctx, F64, v2073.1, v2077);
                        let v2079 = C::put_in_reg(ctx, v2073.0);
                        let v2120 = &constructor_aarch64_fpustore64(ctx, v2119, v2071, v2079);
                        let v2121 = constructor_side_effect(ctx, v2120);
                        let v2122 = Some(v2121);
                        // Rule at src\isa\aarch64\lower.isle line 2684.
                        return v2122;
                    }
                    let v2131 = C::ty_dyn_vec128(ctx, v2076);
                    if let Some(v2132) = v2131 {
                        let v2077 = C::offset32_to_i32(ctx, v2072);
                        let v2133 = &constructor_amode(ctx, I8X16, v2073.1, v2077);
                        let v2079 = C::put_in_reg(ctx, v2073.0);
                        let v2134 = &constructor_aarch64_fpustore128(ctx, v2133, v2071, v2079);
                        let v2135 = constructor_side_effect(ctx, v2134);
                        let v2136 = Some(v2135);
                        // Rule at src\isa\aarch64\lower.isle line 2688.
                        return v2136;
                    }
                }
                &Opcode::Istore8 => {
                    let v2073 = C::unpack_value_array_2(ctx, v2070);
                    let v2077 = C::offset32_to_i32(ctx, v2072);
                    let v2078 = &constructor_amode(ctx, I8, v2073.1, v2077);
                    let v2079 = C::put_in_reg(ctx, v2073.0);
                    let v2080 = &constructor_aarch64_store8(ctx, v2078, v2071, v2079);
                    let v2081 = constructor_side_effect(ctx, v2080);
                    let v2082 = Some(v2081);
                    // Rule at src\isa\aarch64\lower.isle line 2647.
                    return v2082;
                }
                &Opcode::Istore16 => {
                    let v2073 = C::unpack_value_array_2(ctx, v2070);
                    let v2077 = C::offset32_to_i32(ctx, v2072);
                    let v2083 = &constructor_amode(ctx, I16, v2073.1, v2077);
                    let v2079 = C::put_in_reg(ctx, v2073.0);
                    let v2084 = &constructor_aarch64_store16(ctx, v2083, v2071, v2079);
                    let v2085 = constructor_side_effect(ctx, v2084);
                    let v2086 = Some(v2085);
                    // Rule at src\isa\aarch64\lower.isle line 2651.
                    return v2086;
                }
                &Opcode::Istore32 => {
                    let v2073 = C::unpack_value_array_2(ctx, v2070);
                    let v2077 = C::offset32_to_i32(ctx, v2072);
                    let v2087 = &constructor_amode(ctx, I32, v2073.1, v2077);
                    let v2079 = C::put_in_reg(ctx, v2073.0);
                    let v2088 = &constructor_aarch64_store32(ctx, v2087, v2071, v2079);
                    let v2089 = constructor_side_effect(ctx, v2088);
                    let v2090 = Some(v2089);
                    // Rule at src\isa\aarch64\lower.isle line 2655.
                    return v2090;
                }
                _ => {}
            }
        }
        &InstructionData::StoreNoOffset {
            opcode: ref v1724,
            args: ref v1725,
            flags: v1726,
        } => {
            if let &Opcode::AtomicStore = v1724 {
                let v1727 = C::unpack_value_array_2(ctx, v1725);
                let v1730 = C::value_type(ctx, v1727.0);
                let v1731 = C::valid_atomic_transaction(ctx, v1730);
                if let Some(v1732) = v1731 {
                    let v1733 = C::put_in_reg(ctx, v1727.0);
                    let v1734 = C::put_in_reg(ctx, v1727.1);
                    let v1735 = &constructor_store_release(ctx, v1732, v1726, v1733, v1734);
                    let v1736 = constructor_side_effect(ctx, v1735);
                    let v1737 = Some(v1736);
                    // Rule at src\isa\aarch64\lower.isle line 2305.
                    return v1737;
                }
            }
        }
        &InstructionData::Ternary {
            opcode: ref v605,
            args: ref v606,
        } => {
            match v605 {
                &Opcode::Select => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v607 = C::unpack_value_array_3(ctx, v606);
                        let v1595 = C::maybe_uextend(ctx, v607.0);
                        if let Some(v1596) = v1595 {
                            let v1597 = C::def_inst(ctx, v1596);
                            if let Some(v1598) = v1597 {
                                let v1599 = &C::inst_data_value(ctx, v1598);
                                match v1599 {
                                    &InstructionData::FloatCompare {
                                        opcode: ref v1614,
                                        args: ref v1615,
                                        cond: ref v1616,
                                    } => {
                                        if let &Opcode::Fcmp = v1614 {
                                            let v1621 = &C::fp_cond_code(ctx, v1616);
                                            let v1617 = C::unpack_value_array_2(ctx, v1615);
                                            let v1620 = C::value_type(ctx, v1617.0);
                                            let v1622 = &constructor_scalar_size(ctx, v1620);
                                            let v1623 = C::put_in_reg(ctx, v1617.0);
                                            let v1624 = C::put_in_reg(ctx, v1617.1);
                                            let v1625 = &constructor_fpu_cmp(ctx, v1622, v1623, v1624);
                                            let v3 = C::value_type(ctx, v2);
                                            let v1626 = constructor_lower_select(ctx, v1625, v1621, v3, v607.1, v607.2);
                                            let v1627 = C::output(ctx, v1626);
                                            let v1628 = Some(v1627);
                                            // Rule at src\isa\aarch64\lower.isle line 2197.
                                            return v1628;
                                        }
                                    }
                                    &InstructionData::IntCompare {
                                        opcode: ref v1600,
                                        args: ref v1601,
                                        cond: ref v1602,
                                    } => {
                                        if let &Opcode::Icmp = v1600 {
                                            let v1603 = C::unpack_value_array_2(ctx, v1601);
                                            let v1606 = C::value_type(ctx, v1603.0);
                                            let v1607 = &constructor_lower_icmp_into_flags(ctx, v1602, v1603.0, v1603.1, v1606);
                                            let v1608 = &constructor_flags_and_cc_flags(ctx, v1607);
                                            let v1609 = &constructor_flags_and_cc_cc(ctx, v1607);
                                            let v1610 = &C::cond_code(ctx, v1609);
                                            let v3 = C::value_type(ctx, v2);
                                            let v1611 = constructor_lower_select(ctx, v1608, v1610, v3, v607.1, v607.2);
                                            let v1612 = C::output(ctx, v1611);
                                            let v1613 = Some(v1612);
                                            // Rule at src\isa\aarch64\lower.isle line 2184.
                                            return v1613;
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        let v1629 = C::value_type(ctx, v607.0);
                        if v1629 == I8 {
                            let v1481 = C::put_in_reg(ctx, v607.0);
                            let v1631 = C::u64_into_imm_logic(ctx, I32, 0xff_u64);
                            let v1632 = &constructor_tst_imm(ctx, I32, v1481, v1631);
                            let v3 = C::value_type(ctx, v2);
                            let v1633 = constructor_lower_select(ctx, v1632, &Cond::Ne, v3, v607.1, v607.2);
                            let v1634 = C::output(ctx, v1633);
                            let v1635 = Some(v1634);
                            // Rule at src\isa\aarch64\lower.isle line 2206.
                            return v1635;
                        }
                        let v1636 = C::fits_in_32(ctx, v1629);
                        if let Some(v1637) = v1636 {
                            let v1638 = constructor_put_in_reg_zext32(ctx, v607.0);
                            let v1639 = C::zero_reg(ctx);
                            let v1640 = &constructor_cmp(ctx, &OperandSize::Size32, v1638, v1639);
                            let v3 = C::value_type(ctx, v2);
                            let v1641 = constructor_lower_select(ctx, v1640, &Cond::Ne, v3, v607.1, v607.2);
                            let v1642 = C::output(ctx, v1641);
                            let v1643 = Some(v1642);
                            // Rule at src\isa\aarch64\lower.isle line 2212.
                            return v1643;
                        }
                        let v1644 = C::fits_in_64(ctx, v1629);
                        if let Some(v1645) = v1644 {
                            let v1646 = constructor_put_in_reg_zext64(ctx, v607.0);
                            let v1639 = C::zero_reg(ctx);
                            let v1647 = &constructor_cmp(ctx, &OperandSize::Size64, v1646, v1639);
                            let v3 = C::value_type(ctx, v2);
                            let v1648 = constructor_lower_select(ctx, v1647, &Cond::Ne, v3, v607.1, v607.2);
                            let v1649 = C::output(ctx, v1648);
                            let v1650 = Some(v1649);
                            // Rule at src\isa\aarch64\lower.isle line 2218.
                            return v1650;
                        }
                        if v1629 == I128 {
                            let v1651 = C::put_in_regs(ctx, v607.0);
                            let v1652 = C::value_regs_get(ctx, v1651, 0x0_usize);
                            let v1653 = C::value_regs_get(ctx, v1651, 0x1_usize);
                            let v1654 = constructor_orr(ctx, I64, v1652, v1653);
                            let v1233 = C::zero_reg(ctx);
                            let v1655 = &constructor_cmp(ctx, &OperandSize::Size64, v1654, v1233);
                            let v3 = C::value_type(ctx, v2);
                            let v1656 = constructor_lower_select(ctx, v1655, &Cond::Ne, v3, v607.1, v607.2);
                            let v1657 = C::output(ctx, v1656);
                            let v1658 = Some(v1657);
                            // Rule at src\isa\aarch64\lower.isle line 2224.
                            return v1658;
                        }
                    }
                }
                &Opcode::SelectSpectreGuard => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v607 = C::unpack_value_array_3(ctx, v606);
                        let v1595 = C::maybe_uextend(ctx, v607.0);
                        if let Some(v1596) = v1595 {
                            let v1597 = C::def_inst(ctx, v1596);
                            if let Some(v1598) = v1597 {
                                let v1599 = &C::inst_data_value(ctx, v1598);
                                if let &InstructionData::IntCompare {
                                    opcode: ref v1600,
                                    args: ref v1601,
                                    cond: ref v1602,
                                } = v1599 {
                                    if let &Opcode::Icmp = v1600 {
                                        let v1603 = C::unpack_value_array_2(ctx, v1601);
                                        let v1606 = C::value_type(ctx, v1603.0);
                                        let v1607 = &constructor_lower_icmp_into_flags(ctx, v1602, v1603.0, v1603.1, v1606);
                                        let v1608 = &constructor_flags_and_cc_flags(ctx, v1607);
                                        let v1609 = &constructor_flags_and_cc_cc(ctx, v1607);
                                        let v1610 = &C::cond_code(ctx, v1609);
                                        let v3 = C::value_type(ctx, v2);
                                        let v1611 = constructor_lower_select(ctx, v1608, v1610, v3, v607.1, v607.2);
                                        let v1659 = &constructor_csdb(ctx);
                                        let v1660 = constructor_side_effect(ctx, v1659);
                                        let v1661 = C::output(ctx, v1611);
                                        let v1662 = Some(v1661);
                                        // Rule at src\isa\aarch64\lower.isle line 2235.
                                        return v1662;
                                    }
                                }
                            }
                        }
                        let v1629 = C::value_type(ctx, v607.0);
                        let v1644 = C::fits_in_64(ctx, v1629);
                        if let Some(v1645) = v1644 {
                            let v1646 = constructor_put_in_reg_zext64(ctx, v607.0);
                            let v1639 = C::zero_reg(ctx);
                            let v1647 = &constructor_cmp(ctx, &OperandSize::Size64, v1646, v1639);
                            let v3 = C::value_type(ctx, v2);
                            let v1648 = constructor_lower_select(ctx, v1647, &Cond::Ne, v3, v607.1, v607.2);
                            let v1649 = C::output(ctx, v1648);
                            let v1650 = Some(v1649);
                            // Rule at src\isa\aarch64\lower.isle line 2249.
                            return v1650;
                        }
                        if v1629 == I128 {
                            let v1651 = C::put_in_regs(ctx, v607.0);
                            let v1652 = C::value_regs_get(ctx, v1651, 0x0_usize);
                            let v1653 = C::value_regs_get(ctx, v1651, 0x1_usize);
                            let v1654 = constructor_orr(ctx, I64, v1652, v1653);
                            let v1233 = C::zero_reg(ctx);
                            let v1655 = &constructor_cmp(ctx, &OperandSize::Size64, v1654, v1233);
                            let v3 = C::value_type(ctx, v2);
                            let v1656 = constructor_lower_select(ctx, v1655, &Cond::Ne, v3, v607.1, v607.2);
                            let v1657 = C::output(ctx, v1656);
                            let v1658 = Some(v1657);
                            // Rule at src\isa\aarch64\lower.isle line 2255.
                            return v1658;
                        }
                    }
                }
                &Opcode::Bitselect => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v761 = C::ty_vec128(ctx, v3);
                        if let Some(v762) = v761 {
                            let v607 = C::unpack_value_array_3(ctx, v606);
                            let v1481 = C::put_in_reg(ctx, v607.0);
                            let v1482 = C::put_in_reg(ctx, v607.1);
                            let v1483 = C::put_in_reg(ctx, v607.2);
                            let v1484 = constructor_bsl(ctx, v762, v1481, v1482, v1483);
                            let v1485 = constructor_output_reg(ctx, v1484);
                            let v1486 = Some(v1485);
                            // Rule at src\isa\aarch64\lower.isle line 2091.
                            return v1486;
                        }
                        let v1470 = C::ty_int_ref_scalar_64(ctx, v3);
                        if let Some(v1471) = v1470 {
                            let v607 = C::unpack_value_array_3(ctx, v606);
                            let v1472 = C::put_in_reg(ctx, v607.1);
                            let v1473 = C::put_in_reg(ctx, v607.0);
                            let v1474 = constructor_and_reg(ctx, v3, v1472, v1473);
                            let v1475 = C::put_in_reg(ctx, v607.2);
                            let v1476 = C::put_in_reg(ctx, v607.0);
                            let v1477 = constructor_bic(ctx, v3, v1475, v1476);
                            let v1478 = constructor_orr(ctx, v3, v1474, v1477);
                            let v1479 = constructor_output_reg(ctx, v1478);
                            let v1480 = Some(v1479);
                            // Rule at src\isa\aarch64\lower.isle line 2085.
                            return v1480;
                        }
                    }
                }
                &Opcode::Fma => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v143 = C::multi_lane(ctx, v3);
                        if let Some(v144) = v143 {
                            let v624 = &constructor_vector_size(ctx, v3);
                            let v607 = C::unpack_value_array_3(ctx, v606);
                            let v625 = constructor_lower_fmla(ctx, &VecALUModOp::Fmla, v607.0, v607.1, v607.2, v624);
                            let v626 = constructor_output_reg(ctx, v625);
                            let v627 = Some(v626);
                            // Rule at src\isa\aarch64\lower.isle line 567.
                            return v627;
                        }
                        let v477 = C::ty_scalar_float(ctx, v3);
                        if let Some(v478) = v477 {
                            let v607 = C::unpack_value_array_3(ctx, v606);
                            let v611 = &constructor_is_fneg(ctx, v607.0);
                            let v614 = constructor_is_fneg_neg(ctx, v611);
                            let v612 = &constructor_is_fneg(ctx, v607.1);
                            let v615 = constructor_is_fneg_neg(ctx, v612);
                            let v616 = C::u64_xor(ctx, v614, v615);
                            let v613 = &constructor_is_fneg(ctx, v607.2);
                            let v617 = constructor_is_fneg_neg(ctx, v613);
                            let v618 = constructor_get_fneg_value(ctx, v611);
                            let v619 = constructor_get_fneg_value(ctx, v612);
                            let v620 = constructor_get_fneg_value(ctx, v613);
                            let v621 = constructor_fmadd_series(ctx, v478, v616, v617, v618, v619, v620);
                            let v622 = Some(v621);
                            // Rule at src\isa\aarch64\lower.isle line 559.
                            return v622;
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::TernaryImm8 {
            opcode: ref v2193,
            args: ref v2194,
            imm: v2195,
        } => {
            if let &Opcode::Insertlane = v2193 {
                let v2196 = C::unpack_value_array_2(ctx, v2194);
                let v2200 = C::value_type(ctx, v2196.1);
                let v2201 = C::ty_int(ctx, v2200);
                if let Some(v2202) = v2201 {
                    let v2204 = C::put_in_reg(ctx, v2196.0);
                    let v2205 = C::put_in_reg(ctx, v2196.1);
                    let v2199 = C::value_type(ctx, v2196.0);
                    let v2206 = &constructor_vector_size(ctx, v2199);
                    let v2203 = C::u8_from_uimm8(ctx, v2195);
                    let v2207 = constructor_mov_to_vec(ctx, v2204, v2205, v2203, v2206);
                    let v2208 = constructor_output_reg(ctx, v2207);
                    let v2209 = Some(v2208);
                    // Rule at src\isa\aarch64\lower.isle line 2751.
                    return v2209;
                }
                let v2210 = C::ty_scalar_float(ctx, v2200);
                if let Some(v2211) = v2210 {
                    let v2204 = C::put_in_reg(ctx, v2196.0);
                    let v2205 = C::put_in_reg(ctx, v2196.1);
                    let v2199 = C::value_type(ctx, v2196.0);
                    let v2206 = &constructor_vector_size(ctx, v2199);
                    let v2203 = C::u8_from_uimm8(ctx, v2195);
                    let v2212 = constructor_mov_vec_elem(ctx, v2204, v2205, v2203, 0x0_u8, v2206);
                    let v2213 = constructor_output_reg(ctx, v2212);
                    let v2214 = Some(v2213);
                    // Rule at src\isa\aarch64\lower.isle line 2756.
                    return v2214;
                }
            }
        }
        &InstructionData::Trap {
            opcode: ref v1581,
            code: ref v1582,
        } => {
            if let &Opcode::Trap = v1581 {
                let v1583 = &constructor_udf(ctx, v1582);
                let v1584 = constructor_side_effect(ctx, v1583);
                let v1585 = Some(v1584);
                // Rule at src\isa\aarch64\lower.isle line 2169.
                return v1585;
            }
        }
        &InstructionData::Unary {
            opcode: ref v291,
            arg: v292,
        } => {
            match v291 {
                &Opcode::Splat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v301 = C::def_inst(ctx, v292);
                        if let Some(v302) = v301 {
                            let v306 = &C::inst_data_value(ctx, v302);
                            match v306 {
                                &InstructionData::Load {
                                    opcode: ref v1034,
                                    arg: v1035,
                                    flags: v1036,
                                    offset: v1037,
                                } => {
                                    if let &Opcode::Load = v1034 {
                                        let v1018 = C::is_sinkable_inst(ctx, v292);
                                        if let Some(v1019) = v1018 {
                                            let v3 = C::value_type(ctx, v2);
                                            let v1710 = C::lane_type(ctx, v3);
                                            let v1711 = constructor_sink_load_into_addr(ctx, v1710, v1019);
                                            let v424 = &constructor_vector_size(ctx, v3);
                                            let v1712 = constructor_ld1r(ctx, v1711, v424, v1036);
                                            let v1713 = constructor_output_reg(ctx, v1712);
                                            let v1714 = Some(v1713);
                                            // Rule at src\isa\aarch64\lower.isle line 2294.
                                            return v1714;
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v1699,
                                    arg: v1700,
                                } => {
                                    if let &Opcode::Ireduce = v1699 {
                                        let v1701 = C::def_inst(ctx, v1700);
                                        if let Some(v1702) = v1701 {
                                            let v1703 = &C::inst_data_value(ctx, v1702);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v1704,
                                                imm: v1705,
                                            } = v1703 {
                                                if let &Opcode::Iconst = v1704 {
                                                    let v3 = C::value_type(ctx, v2);
                                                    let v624 = &constructor_vector_size(ctx, v3);
                                                    let v1706 = C::u64_from_imm64(ctx, v1705);
                                                    let v1707 = constructor_splat_const(ctx, v1706, v624);
                                                    let v1708 = constructor_output_reg(ctx, v1707);
                                                    let v1709 = Some(v1708);
                                                    // Rule at src\isa\aarch64\lower.isle line 2291.
                                                    return v1709;
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::UnaryIeee32 {
                                    opcode: ref v1680,
                                    imm: v1681,
                                } => {
                                    if let &Opcode::F32const = v1680 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v624 = &constructor_vector_size(ctx, v3);
                                        let v1682 = C::u32_from_ieee32(ctx, v1681);
                                        let v1683 = C::u32_as_u64(ctx, v1682);
                                        let v1684 = constructor_splat_const(ctx, v1683, v624);
                                        let v1685 = constructor_output_reg(ctx, v1684);
                                        let v1686 = Some(v1685);
                                        // Rule at src\isa\aarch64\lower.isle line 2282.
                                        return v1686;
                                    }
                                }
                                &InstructionData::UnaryIeee64 {
                                    opcode: ref v1687,
                                    imm: v1688,
                                } => {
                                    if let &Opcode::F64const = v1687 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v624 = &constructor_vector_size(ctx, v3);
                                        let v1689 = C::u64_from_ieee64(ctx, v1688);
                                        let v1690 = constructor_splat_const(ctx, v1689, v624);
                                        let v1691 = constructor_output_reg(ctx, v1690);
                                        let v1692 = Some(v1691);
                                        // Rule at src\isa\aarch64\lower.isle line 2285.
                                        return v1692;
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v1693,
                                    imm: v1694,
                                } => {
                                    if let &Opcode::Iconst = v1693 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v624 = &constructor_vector_size(ctx, v3);
                                        let v1695 = C::u64_from_imm64(ctx, v1694);
                                        let v1696 = constructor_splat_const(ctx, v1695, v624);
                                        let v1697 = constructor_output_reg(ctx, v1696);
                                        let v1698 = Some(v1697);
                                        // Rule at src\isa\aarch64\lower.isle line 2288.
                                        return v1698;
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v293 = C::value_type(ctx, v292);
                        let v1670 = C::ty_int_ref_scalar_64(ctx, v293);
                        if let Some(v1671) = v1670 {
                            let v339 = C::put_in_reg(ctx, v292);
                            let v3 = C::value_type(ctx, v2);
                            let v424 = &constructor_vector_size(ctx, v3);
                            let v1672 = constructor_vec_dup(ctx, v339, v424);
                            let v1673 = constructor_output_reg(ctx, v1672);
                            let v1674 = Some(v1673);
                            // Rule at src\isa\aarch64\lower.isle line 2275.
                            return v1674;
                        }
                        let v1675 = C::ty_scalar_float(ctx, v293);
                        if let Some(v1676) = v1675 {
                            let v339 = C::put_in_reg(ctx, v292);
                            let v3 = C::value_type(ctx, v2);
                            let v424 = &constructor_vector_size(ctx, v3);
                            let v1677 = constructor_vec_dup_from_fpu(ctx, v339, v424, 0x0_u8);
                            let v1678 = constructor_output_reg(ctx, v1677);
                            let v1679 = Some(v1678);
                            // Rule at src\isa\aarch64\lower.isle line 2279.
                            return v1679;
                        }
                    }
                }
                &Opcode::SetPinnedReg => {
                    let v339 = C::put_in_reg(ctx, v292);
                    let v2141 = &constructor_write_pinned_reg(ctx, v339);
                    let v2142 = constructor_side_effect(ctx, v2141);
                    let v2143 = Some(v2142);
                    // Rule at src\isa\aarch64\lower.isle line 2698.
                    return v2143;
                }
                &Opcode::VanyTrue => {
                    let v339 = C::put_in_reg(ctx, v292);
                    let v293 = C::value_type(ctx, v292);
                    let v399 = &constructor_vanytrue(ctx, v339, v293);
                    let v400 = &constructor_materialize_bool_result(ctx, &Cond::Ne);
                    let v401 = constructor_with_flags(ctx, v399, v400);
                    let v402 = C::output(ctx, v401);
                    let v403 = Some(v402);
                    // Rule at src\isa\aarch64\lower.isle line 336.
                    return v403;
                }
                &Opcode::VallTrue => {
                    let v293 = C::value_type(ctx, v292);
                    let v357 = C::multi_lane(ctx, v293);
                    if let Some(v358) = v357 {
                        match v358.0 {
                            0x20_u32 => {
                                if v358.1 == 0x2_u32 {
                                    let v339 = C::put_in_reg(ctx, v292);
                                    let v370 = constructor_mov_from_vec(ctx, v339, 0x0_u8, &ScalarSize::Size64);
                                    let v372 = C::zero_reg(ctx);
                                    let v374 = &constructor_cmp_rr_shift(ctx, &OperandSize::Size64, v372, v370, 0x20_u64);
                                    let v376 = C::u8_into_uimm5(ctx, 0x0_u8);
                                    let v377 = false;
                                    let v378 = true;
                                    let v379 = C::nzcv(ctx, v377, v378, v377, v377);
                                    let v381 = &constructor_ccmp_imm(ctx, &OperandSize::Size32, v370, v376, v379, &Cond::Ne);
                                    let v382 = constructor_with_flags(ctx, v374, v381);
                                    let v383 = C::output(ctx, v382);
                                    let v384 = Some(v383);
                                    // Rule at src\isa\aarch64\lower.isle line 310.
                                    return v384;
                                }
                            }
                            0x40_u32 => {
                                if v358.1 == 0x2_u32 {
                                    let v339 = C::put_in_reg(ctx, v292);
                                    let v361 = constructor_cmeq0(ctx, v339, &VectorSize::Size64x2);
                                    let v362 = constructor_addp(ctx, v361, v361, &VectorSize::Size64x2);
                                    let v363 = &constructor_fpu_cmp(ctx, &ScalarSize::Size64, v362, v362);
                                    let v365 = &constructor_materialize_bool_result(ctx, &Cond::Eq);
                                    let v366 = constructor_with_flags(ctx, v363, v365);
                                    let v367 = C::output(ctx, v366);
                                    let v368 = Some(v367);
                                    // Rule at src\isa\aarch64\lower.isle line 304.
                                    return v368;
                                }
                            }
                            _ => {}
                        }
                    }
                    let v385 = C::lane_fits_in_32(ctx, v293);
                    if let Some(v386) = v385 {
                        let v387 = C::not_vec32x2(ctx, v386);
                        if let Some(v388) = v387 {
                            let v339 = C::put_in_reg(ctx, v292);
                            let v390 = &constructor_vector_size(ctx, v386);
                            let v391 = constructor_vec_lanes(ctx, &VecLanesOp::Uminv, v339, v390);
                            let v392 = constructor_mov_from_vec(ctx, v391, 0x0_u8, &ScalarSize::Size64);
                            let v393 = C::u8_into_imm12(ctx, 0x0_u8);
                            let v394 = &constructor_cmp_imm(ctx, &OperandSize::Size64, v392, v393);
                            let v395 = &constructor_materialize_bool_result(ctx, &Cond::Ne);
                            let v396 = constructor_with_flags(ctx, v394, v395);
                            let v397 = C::output(ctx, v396);
                            let v398 = Some(v397);
                            // Rule at src\isa\aarch64\lower.isle line 327.
                            return v398;
                        }
                    }
                }
                &Opcode::VhighBits => {
                    let v293 = C::value_type(ctx, v292);
                    match v293 {
                        I8X16 => {
                            let v339 = C::put_in_reg(ctx, v292);
                            let v2222 = constructor_sshr_vec_imm(ctx, v339, 0x7_u8, &VectorSize::Size8x16);
                            let v2224 = constructor_constant_f128(ctx, 0x80402010080402018040201008040201_u128);
                            let v2225 = constructor_and_vec(ctx, v2222, v2224, &VectorSize::Size8x16);
                            let v2227 = constructor_vec_extract(ctx, v2225, v2225, 0x8_u8);
                            let v2228 = constructor_zip1(ctx, v2225, v2227, &VectorSize::Size8x16);
                            let v2229 = constructor_addv(ctx, v2228, &VectorSize::Size16x8);
                            let v2230 = constructor_mov_from_vec(ctx, v2229, 0x0_u8, &ScalarSize::Size16);
                            let v2231 = constructor_output_reg(ctx, v2230);
                            let v2232 = Some(v2231);
                            // Rule at src\isa\aarch64\lower.isle line 2777.
                            return v2232;
                        }
                        I16X8 => {
                            let v339 = C::put_in_reg(ctx, v292);
                            let v2234 = constructor_sshr_vec_imm(ctx, v339, 0xf_u8, &VectorSize::Size16x8);
                            let v2236 = constructor_constant_f128(ctx, 0x800040002000100008000400020001_u128);
                            let v2237 = constructor_and_vec(ctx, v2234, v2236, &VectorSize::Size16x8);
                            let v2238 = constructor_addv(ctx, v2237, &VectorSize::Size16x8);
                            let v2239 = constructor_mov_from_vec(ctx, v2238, 0x0_u8, &ScalarSize::Size16);
                            let v2240 = constructor_output_reg(ctx, v2239);
                            let v2241 = Some(v2240);
                            // Rule at src\isa\aarch64\lower.isle line 2801.
                            return v2241;
                        }
                        I32X4 => {
                            let v339 = C::put_in_reg(ctx, v292);
                            let v2243 = constructor_sshr_vec_imm(ctx, v339, 0x1f_u8, &VectorSize::Size32x4);
                            let v2245 = constructor_constant_f128(ctx, 0x8000000040000000200000001_u128);
                            let v2246 = constructor_and_vec(ctx, v2243, v2245, &VectorSize::Size32x4);
                            let v2247 = constructor_addv(ctx, v2246, &VectorSize::Size32x4);
                            let v2248 = constructor_mov_from_vec(ctx, v2247, 0x0_u8, &ScalarSize::Size32);
                            let v2249 = constructor_output_reg(ctx, v2248);
                            let v2250 = Some(v2249);
                            // Rule at src\isa\aarch64\lower.isle line 2814.
                            return v2250;
                        }
                        I64X2 => {
                            let v339 = C::put_in_reg(ctx, v292);
                            let v2251 = constructor_mov_from_vec(ctx, v339, 0x1_u8, &ScalarSize::Size64);
                            let v2252 = C::put_in_reg(ctx, v292);
                            let v2253 = constructor_mov_from_vec(ctx, v2252, 0x0_u8, &ScalarSize::Size64);
                            let v1062 = C::imm_shift_from_u8(ctx, 0x3f_u8);
                            let v2254 = constructor_lsr_imm(ctx, I64, v2251, v1062);
                            let v1401 = C::imm_shift_from_u8(ctx, 0x3f_u8);
                            let v2255 = constructor_lsr_imm(ctx, I64, v2253, v1401);
                            let v2256 = C::lshl_from_u64(ctx, I64, 0x1_u64);
                            let v2257 = v2256?;
                            let v2258 = constructor_add_shift(ctx, I64, v2255, v2254, v2257);
                            let v2259 = constructor_output_reg(ctx, v2258);
                            let v2260 = Some(v2259);
                            // Rule at src\isa\aarch64\lower.isle line 2827.
                            return v2260;
                        }
                        _ => {}
                    }
                }
                &Opcode::Ineg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v781 = constructor_value_regs_zero(ctx);
                            let v782 = C::put_in_regs(ctx, v292);
                            let v783 = constructor_sub_i128(ctx, v781, v782);
                            let v784 = C::output(ctx, v783);
                            let v785 = Some(v784);
                            // Rule at src\isa\aarch64\lower.isle line 798.
                            return v785;
                        }
                        let v41 = C::fits_in_64(ctx, v3);
                        if let Some(v42) = v41 {
                            let v776 = C::zero_reg(ctx);
                            let v777 = C::put_in_reg(ctx, v292);
                            let v778 = constructor_sub(ctx, v42, v776, v777);
                            let v779 = constructor_output_reg(ctx, v778);
                            let v780 = Some(v779);
                            // Rule at src\isa\aarch64\lower.isle line 794.
                            return v780;
                        }
                        let v761 = C::ty_vec128(ctx, v3);
                        if let Some(v762) = v761 {
                            let v339 = C::put_in_reg(ctx, v292);
                            let v786 = &constructor_vector_size(ctx, v762);
                            let v787 = constructor_neg(ctx, v339, v786);
                            let v788 = constructor_output_reg(ctx, v787);
                            let v789 = Some(v788);
                            // Rule at src\isa\aarch64\lower.isle line 802.
                            return v789;
                        }
                    }
                }
                &Opcode::Iabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64 {
                            let v339 = C::put_in_reg(ctx, v292);
                            let v428 = constructor_abs(ctx, &OperandSize::Size64, v339);
                            let v429 = constructor_output_reg(ctx, v428);
                            let v430 = Some(v429);
                            // Rule at src\isa\aarch64\lower.isle line 366.
                            return v430;
                        }
                        let v431 = C::fits_in_32(ctx, v3);
                        if let Some(v432) = v431 {
                            let v433 = constructor_put_in_reg_sext32(ctx, v292);
                            let v434 = constructor_abs(ctx, &OperandSize::Size32, v433);
                            let v435 = constructor_output_reg(ctx, v434);
                            let v436 = Some(v435);
                            // Rule at src\isa\aarch64\lower.isle line 369.
                            return v436;
                        }
                        if v3 == I128 {
                            let v294 = C::put_in_regs(ctx, v292);
                            let v295 = C::value_regs_get(ctx, v294, 0x0_usize);
                            let v437 = C::value_regs_get(ctx, v294, 0x1_usize);
                            let v439 = C::imm_shift_from_u8(ctx, 0x3f_u8);
                            let v440 = constructor_asr_imm(ctx, I64, v437, v439);
                            let v441 = constructor_eor(ctx, I64, v437, v440);
                            let v442 = constructor_eor(ctx, I64, v295, v440);
                            let v443 = &constructor_sub_with_flags_paired(ctx, I64, v442, v440);
                            let v444 = &constructor_sbc_paired(ctx, I64, v441, v440);
                            let v445 = constructor_with_flags(ctx, v443, v444);
                            let v446 = C::output(ctx, v445);
                            let v447 = Some(v446);
                            // Rule at src\isa\aarch64\lower.isle line 379.
                            return v447;
                        }
                        let v143 = C::multi_lane(ctx, v3);
                        if let Some(v144) = v143 {
                            let v339 = C::put_in_reg(ctx, v292);
                            let v424 = &constructor_vector_size(ctx, v3);
                            let v425 = constructor_vec_abs(ctx, v339, v424);
                            let v426 = constructor_output_reg(ctx, v425);
                            let v427 = Some(v426);
                            // Rule at src\isa\aarch64\lower.isle line 363.
                            return v427;
                        }
                    }
                }
                &Opcode::Bnot => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v301 = C::def_inst(ctx, v292);
                        if let Some(v302) = v301 {
                            let v306 = &C::inst_data_value(ctx, v302);
                            if let &InstructionData::Binary {
                                opcode: ref v307,
                                args: ref v308,
                            } = v306 {
                                match v307 {
                                    &Opcode::Bxor => {
                                        let v3 = C::value_type(ctx, v2);
                                        if v3 == I128 {
                                            let v309 = C::unpack_value_array_2(ctx, v308);
                                            let v1101 = constructor_i128_alu_bitop(ctx, &ALUOp::EorNot, I64, v309.0, v309.1);
                                            let v1102 = C::output(ctx, v1101);
                                            let v1103 = Some(v1102);
                                            // Rule at src\isa\aarch64\lower.isle line 1379.
                                            return v1103;
                                        }
                                        let v41 = C::fits_in_64(ctx, v3);
                                        if let Some(v42) = v41 {
                                            let v309 = C::unpack_value_array_2(ctx, v308);
                                            let v1098 = constructor_alu_rs_imm_logic(ctx, &ALUOp::EorNot, v42, v309.0, v309.1);
                                            let v1099 = constructor_output_reg(ctx, v1098);
                                            let v1100 = Some(v1099);
                                            // Rule at src\isa\aarch64\lower.isle line 1377.
                                            return v1100;
                                        }
                                    }
                                    &Opcode::Ishl => {
                                        let v3 = C::value_type(ctx, v2);
                                        let v41 = C::fits_in_64(ctx, v3);
                                        if let Some(v42) = v41 {
                                            let v309 = C::unpack_value_array_2(ctx, v308);
                                            let v317 = C::def_inst(ctx, v309.1);
                                            if let Some(v318) = v317 {
                                                let v319 = &C::inst_data_value(ctx, v318);
                                                if let &InstructionData::UnaryImm {
                                                    opcode: ref v1079,
                                                    imm: v1080,
                                                } = v319 {
                                                    if let &Opcode::Iconst = v1079 {
                                                        let v1081 = C::lshl_from_imm64(ctx, v42, v1080);
                                                        if let Some(v1082) = v1081 {
                                                            let v776 = C::zero_reg(ctx);
                                                            let v1083 = C::put_in_reg(ctx, v309.0);
                                                            let v1084 = constructor_orr_not_shift(ctx, v42, v776, v1083, v1082);
                                                            let v1085 = constructor_output_reg(ctx, v1084);
                                                            let v1086 = Some(v1085);
                                                            // Rule at src\isa\aarch64\lower.isle line 1358.
                                                            return v1086;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v294 = C::put_in_regs(ctx, v292);
                            let v295 = C::value_regs_get(ctx, v294, 0x0_usize);
                            let v437 = C::value_regs_get(ctx, v294, 0x1_usize);
                            let v1087 = C::zero_reg(ctx);
                            let v1088 = constructor_orr_not(ctx, I64, v1087, v295);
                            let v1089 = C::zero_reg(ctx);
                            let v1090 = constructor_orr_not(ctx, I64, v1089, v437);
                            let v1091 = C::value_regs(ctx, v1088, v1090);
                            let v1092 = C::output(ctx, v1091);
                            let v1093 = Some(v1092);
                            // Rule at src\isa\aarch64\lower.isle line 1364.
                            return v1093;
                        }
                        let v41 = C::fits_in_64(ctx, v3);
                        if let Some(v42) = v41 {
                            let v776 = C::zero_reg(ctx);
                            let v777 = C::put_in_reg(ctx, v292);
                            let v1076 = constructor_orr_not(ctx, v42, v776, v777);
                            let v1077 = constructor_output_reg(ctx, v1076);
                            let v1078 = Some(v1077);
                            // Rule at src\isa\aarch64\lower.isle line 1353.
                            return v1078;
                        }
                        let v761 = C::ty_vec128(ctx, v3);
                        if let Some(v762) = v761 {
                            let v339 = C::put_in_reg(ctx, v292);
                            let v786 = &constructor_vector_size(ctx, v762);
                            let v1094 = constructor_not(ctx, v339, v786);
                            let v1095 = constructor_output_reg(ctx, v1094);
                            let v1096 = Some(v1095);
                            // Rule at src\isa\aarch64\lower.isle line 1373.
                            return v1096;
                        }
                    }
                }
                &Opcode::Bitrev => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v339 = C::put_in_reg(ctx, v292);
                                let v1339 = constructor_rbit(ctx, I32, v339);
                                let v1341 = C::imm_shift_from_u8(ctx, 0x18_u8);
                                let v1342 = constructor_lsr_imm(ctx, I32, v1339, v1341);
                                let v1343 = constructor_output_reg(ctx, v1342);
                                let v1344 = Some(v1343);
                                // Rule at src\isa\aarch64\lower.isle line 1907.
                                return v1344;
                            }
                            I16 => {
                                let v339 = C::put_in_reg(ctx, v292);
                                let v1339 = constructor_rbit(ctx, I32, v339);
                                let v1346 = C::imm_shift_from_u8(ctx, 0x10_u8);
                                let v1347 = constructor_lsr_imm(ctx, I32, v1339, v1346);
                                let v1348 = constructor_output_reg(ctx, v1347);
                                let v1349 = Some(v1348);
                                // Rule at src\isa\aarch64\lower.isle line 1913.
                                return v1349;
                            }
                            I128 => {
                                let v294 = C::put_in_regs(ctx, v292);
                                let v295 = C::value_regs_get(ctx, v294, 0x0_usize);
                                let v1350 = constructor_rbit(ctx, I64, v295);
                                let v297 = C::value_regs_get(ctx, v294, 0x1_usize);
                                let v1351 = constructor_rbit(ctx, I64, v297);
                                let v1352 = C::value_regs(ctx, v1351, v1350);
                                let v1353 = C::output(ctx, v1352);
                                let v1354 = Some(v1353);
                                // Rule at src\isa\aarch64\lower.isle line 1916.
                                return v1354;
                            }
                            _ => {}
                        }
                        let v339 = C::put_in_reg(ctx, v292);
                        let v1355 = constructor_rbit(ctx, v3, v339);
                        let v1356 = constructor_output_reg(ctx, v1355);
                        let v1357 = Some(v1356);
                        // Rule at src\isa\aarch64\lower.isle line 1922.
                        return v1357;
                    }
                }
                &Opcode::Clz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v353 = constructor_put_in_reg_zext32(ctx, v292);
                                let v1358 = constructor_a64_clz(ctx, I32, v353);
                                let v1359 = C::u8_into_imm12(ctx, 0x18_u8);
                                let v1360 = constructor_sub_imm(ctx, I32, v1358, v1359);
                                let v1361 = constructor_output_reg(ctx, v1360);
                                let v1362 = Some(v1361);
                                // Rule at src\isa\aarch64\lower.isle line 1928.
                                return v1362;
                            }
                            I16 => {
                                let v353 = constructor_put_in_reg_zext32(ctx, v292);
                                let v1358 = constructor_a64_clz(ctx, I32, v353);
                                let v1363 = C::u8_into_imm12(ctx, 0x10_u8);
                                let v1364 = constructor_sub_imm(ctx, I32, v1358, v1363);
                                let v1365 = constructor_output_reg(ctx, v1364);
                                let v1366 = Some(v1365);
                                // Rule at src\isa\aarch64\lower.isle line 1931.
                                return v1366;
                            }
                            I128 => {
                                let v294 = C::put_in_regs(ctx, v292);
                                let v1367 = constructor_lower_clz128(ctx, v294);
                                let v1368 = C::output(ctx, v1367);
                                let v1369 = Some(v1368);
                                // Rule at src\isa\aarch64\lower.isle line 1934.
                                return v1369;
                            }
                            _ => {}
                        }
                        let v339 = C::put_in_reg(ctx, v292);
                        let v1370 = constructor_a64_clz(ctx, v3, v339);
                        let v1371 = constructor_output_reg(ctx, v1370);
                        let v1372 = Some(v1371);
                        // Rule at src\isa\aarch64\lower.isle line 1937.
                        return v1372;
                    }
                }
                &Opcode::Cls => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v433 = constructor_put_in_reg_sext32(ctx, v292);
                                let v1391 = constructor_a64_cls(ctx, I32, v433);
                                let v1359 = C::u8_into_imm12(ctx, 0x18_u8);
                                let v1392 = constructor_sub_imm(ctx, I32, v1391, v1359);
                                let v1393 = constructor_output_reg(ctx, v1392);
                                let v1394 = Some(v1393);
                                // Rule at src\isa\aarch64\lower.isle line 1975.
                                return v1394;
                            }
                            I16 => {
                                let v433 = constructor_put_in_reg_sext32(ctx, v292);
                                let v1391 = constructor_a64_cls(ctx, I32, v433);
                                let v1363 = C::u8_into_imm12(ctx, 0x10_u8);
                                let v1395 = constructor_sub_imm(ctx, I32, v1391, v1363);
                                let v1396 = constructor_output_reg(ctx, v1395);
                                let v1397 = Some(v1396);
                                // Rule at src\isa\aarch64\lower.isle line 1978.
                                return v1397;
                            }
                            I128 => {
                                let v294 = C::put_in_regs(ctx, v292);
                                let v295 = C::value_regs_get(ctx, v294, 0x0_usize);
                                let v437 = C::value_regs_get(ctx, v294, 0x1_usize);
                                let v1398 = constructor_a64_cls(ctx, I64, v295);
                                let v1399 = constructor_a64_cls(ctx, I64, v437);
                                let v1400 = constructor_eon(ctx, I64, v437, v295);
                                let v1401 = C::imm_shift_from_u8(ctx, 0x3f_u8);
                                let v1402 = constructor_lsr_imm(ctx, I64, v1400, v1401);
                                let v1403 = constructor_madd(ctx, I64, v1398, v1402, v1402);
                                let v1404 = C::u8_into_imm12(ctx, 0x3f_u8);
                                let v1405 = &constructor_cmp64_imm(ctx, v1399, v1404);
                                let v1406 = C::zero_reg(ctx);
                                let v1407 = &constructor_csel(ctx, &Cond::Eq, v1403, v1406);
                                let v1408 = constructor_with_flags_reg(ctx, v1405, v1407);
                                let v1409 = constructor_add(ctx, I64, v1408, v1399);
                                let v1410 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x0_u64);
                                let v1411 = C::value_regs(ctx, v1409, v1410);
                                let v1412 = C::output(ctx, v1411);
                                let v1413 = Some(v1412);
                                // Rule at src\isa\aarch64\lower.isle line 1990.
                                return v1413;
                            }
                            _ => {}
                        }
                        let v339 = C::put_in_reg(ctx, v292);
                        let v1414 = constructor_a64_cls(ctx, v3, v339);
                        let v1415 = constructor_output_reg(ctx, v1414);
                        let v1416 = Some(v1415);
                        // Rule at src\isa\aarch64\lower.isle line 2004.
                        return v1416;
                    }
                }
                &Opcode::Ctz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v339 = C::put_in_reg(ctx, v292);
                                let v1339 = constructor_rbit(ctx, I32, v339);
                                let v1374 = C::u64_into_imm_logic(ctx, I32, 0x800000_u64);
                                let v1375 = constructor_orr_imm(ctx, I32, v1339, v1374);
                                let v1376 = constructor_a64_clz(ctx, I32, v1375);
                                let v1377 = constructor_output_reg(ctx, v1376);
                                let v1378 = Some(v1377);
                                // Rule at src\isa\aarch64\lower.isle line 1958.
                                return v1378;
                            }
                            I16 => {
                                let v339 = C::put_in_reg(ctx, v292);
                                let v1339 = constructor_rbit(ctx, I32, v339);
                                let v1380 = C::u64_into_imm_logic(ctx, I32, 0x8000_u64);
                                let v1381 = constructor_orr_imm(ctx, I32, v1339, v1380);
                                let v1382 = constructor_a64_clz(ctx, I32, v1381);
                                let v1383 = constructor_output_reg(ctx, v1382);
                                let v1384 = Some(v1383);
                                // Rule at src\isa\aarch64\lower.isle line 1961.
                                return v1384;
                            }
                            I128 => {
                                let v294 = C::put_in_regs(ctx, v292);
                                let v295 = C::value_regs_get(ctx, v294, 0x0_usize);
                                let v1350 = constructor_rbit(ctx, I64, v295);
                                let v297 = C::value_regs_get(ctx, v294, 0x1_usize);
                                let v1351 = constructor_rbit(ctx, I64, v297);
                                let v1352 = C::value_regs(ctx, v1351, v1350);
                                let v1385 = constructor_lower_clz128(ctx, v1352);
                                let v1386 = C::output(ctx, v1385);
                                let v1387 = Some(v1386);
                                // Rule at src\isa\aarch64\lower.isle line 1964.
                                return v1387;
                            }
                            _ => {}
                        }
                        let v339 = C::put_in_reg(ctx, v292);
                        let v1355 = constructor_rbit(ctx, v3, v339);
                        let v1388 = constructor_a64_clz(ctx, v3, v1355);
                        let v1389 = constructor_output_reg(ctx, v1388);
                        let v1390 = Some(v1389);
                        // Rule at src\isa\aarch64\lower.isle line 1970.
                        return v1390;
                    }
                }
                &Opcode::Bswap => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I16 => {
                                let v339 = C::put_in_reg(ctx, v292);
                                let v1418 = constructor_a64_rev16(ctx, I16, v339);
                                let v1419 = constructor_output_reg(ctx, v1418);
                                let v1420 = Some(v1419);
                                // Rule at src\isa\aarch64\lower.isle line 2009.
                                return v1420;
                            }
                            I32 => {
                                let v339 = C::put_in_reg(ctx, v292);
                                let v1421 = constructor_a64_rev32(ctx, I32, v339);
                                let v1422 = constructor_output_reg(ctx, v1421);
                                let v1423 = Some(v1422);
                                // Rule at src\isa\aarch64\lower.isle line 2012.
                                return v1423;
                            }
                            I64 => {
                                let v339 = C::put_in_reg(ctx, v292);
                                let v1424 = constructor_a64_rev64(ctx, I64, v339);
                                let v1425 = constructor_output_reg(ctx, v1424);
                                let v1426 = Some(v1425);
                                // Rule at src\isa\aarch64\lower.isle line 2015.
                                return v1426;
                            }
                            I128 => {
                                let v294 = C::put_in_regs(ctx, v292);
                                let v1427 = C::value_regs_get(ctx, v294, 0x1_usize);
                                let v1428 = constructor_a64_rev64(ctx, I64, v1427);
                                let v1429 = C::put_in_regs(ctx, v292);
                                let v1430 = C::value_regs_get(ctx, v1429, 0x0_usize);
                                let v1431 = constructor_a64_rev64(ctx, I64, v1430);
                                let v1432 = C::value_regs(ctx, v1428, v1431);
                                let v1433 = C::output(ctx, v1432);
                                let v1434 = Some(v1433);
                                // Rule at src\isa\aarch64\lower.isle line 2018.
                                return v1434;
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Popcnt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v339 = C::put_in_reg(ctx, v292);
                                let v1438 = constructor_mov_to_fpu(ctx, v339, &ScalarSize::Size32);
                                let v1440 = constructor_vec_cnt(ctx, v1438, &VectorSize::Size8x8);
                                let v1442 = constructor_mov_from_vec(ctx, v1440, 0x0_u8, &ScalarSize::Size8);
                                let v1443 = constructor_output_reg(ctx, v1442);
                                let v1444 = Some(v1443);
                                // Rule at src\isa\aarch64\lower.isle line 2048.
                                return v1444;
                            }
                            I16 => {
                                let v339 = C::put_in_reg(ctx, v292);
                                let v1438 = constructor_mov_to_fpu(ctx, v339, &ScalarSize::Size32);
                                let v1440 = constructor_vec_cnt(ctx, v1438, &VectorSize::Size8x8);
                                let v1445 = constructor_addp(ctx, v1440, v1440, &VectorSize::Size8x8);
                                let v1446 = constructor_mov_from_vec(ctx, v1445, 0x0_u8, &ScalarSize::Size8);
                                let v1447 = constructor_output_reg(ctx, v1446);
                                let v1448 = Some(v1447);
                                // Rule at src\isa\aarch64\lower.isle line 2054.
                                return v1448;
                            }
                            I32 => {
                                let v339 = C::put_in_reg(ctx, v292);
                                let v1438 = constructor_mov_to_fpu(ctx, v339, &ScalarSize::Size32);
                                let v1440 = constructor_vec_cnt(ctx, v1438, &VectorSize::Size8x8);
                                let v1449 = constructor_addv(ctx, v1440, &VectorSize::Size8x8);
                                let v1450 = constructor_mov_from_vec(ctx, v1449, 0x0_u8, &ScalarSize::Size8);
                                let v1451 = constructor_output_reg(ctx, v1450);
                                let v1452 = Some(v1451);
                                // Rule at src\isa\aarch64\lower.isle line 2060.
                                return v1452;
                            }
                            I64 => {
                                let v339 = C::put_in_reg(ctx, v292);
                                let v348 = constructor_mov_to_fpu(ctx, v339, &ScalarSize::Size64);
                                let v1453 = constructor_vec_cnt(ctx, v348, &VectorSize::Size8x8);
                                let v1454 = constructor_addv(ctx, v1453, &VectorSize::Size8x8);
                                let v1455 = constructor_mov_from_vec(ctx, v1454, 0x0_u8, &ScalarSize::Size8);
                                let v1456 = constructor_output_reg(ctx, v1455);
                                let v1457 = Some(v1456);
                                // Rule at src\isa\aarch64\lower.isle line 2066.
                                return v1457;
                            }
                            I128 => {
                                let v294 = C::put_in_regs(ctx, v292);
                                let v295 = C::value_regs_get(ctx, v294, 0x0_usize);
                                let v1458 = constructor_mov_to_fpu(ctx, v295, &ScalarSize::Size64);
                                let v297 = C::value_regs_get(ctx, v294, 0x1_usize);
                                let v1459 = constructor_mov_to_vec(ctx, v1458, v297, 0x1_u8, &VectorSize::Size64x2);
                                let v1460 = constructor_vec_cnt(ctx, v1459, &VectorSize::Size8x16);
                                let v1461 = constructor_addv(ctx, v1460, &VectorSize::Size8x16);
                                let v1462 = constructor_mov_from_vec(ctx, v1461, 0x0_u8, &ScalarSize::Size8);
                                let v1463 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x0_u64);
                                let v1464 = C::value_regs(ctx, v1462, v1463);
                                let v1465 = C::output(ctx, v1464);
                                let v1466 = Some(v1465);
                                // Rule at src\isa\aarch64\lower.isle line 2072.
                                return v1466;
                            }
                            I8X16 => {
                                let v339 = C::put_in_reg(ctx, v292);
                                let v1467 = constructor_vec_cnt(ctx, v339, &VectorSize::Size8x16);
                                let v1468 = constructor_output_reg(ctx, v1467);
                                let v1469 = Some(v1468);
                                // Rule at src\isa\aarch64\lower.isle line 2080.
                                return v1469;
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Sqrt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v477 = C::ty_scalar_float(ctx, v3);
                        if let Some(v478) = v477 {
                            let v339 = C::put_in_reg(ctx, v292);
                            let v529 = &constructor_scalar_size(ctx, v478);
                            let v530 = constructor_fpu_rr(ctx, &FPUOp1::Sqrt, v339, v529);
                            let v531 = constructor_output_reg(ctx, v530);
                            let v532 = Some(v531);
                            // Rule at src\isa\aarch64\lower.isle line 462.
                            return v532;
                        }
                        let v143 = C::multi_lane(ctx, v3);
                        if let Some(v144) = v143 {
                            let v339 = C::put_in_reg(ctx, v292);
                            let v424 = &constructor_vector_size(ctx, v3);
                            let v525 = constructor_vec_misc(ctx, &VecMisc2::Fsqrt, v339, v424);
                            let v526 = constructor_output_reg(ctx, v525);
                            let v527 = Some(v526);
                            // Rule at src\isa\aarch64\lower.isle line 459.
                            return v527;
                        }
                    }
                }
                &Opcode::Fneg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v477 = C::ty_scalar_float(ctx, v3);
                        if let Some(v478) = v477 {
                            let v339 = C::put_in_reg(ctx, v292);
                            let v529 = &constructor_scalar_size(ctx, v478);
                            let v538 = constructor_fpu_rr(ctx, &FPUOp1::Neg, v339, v529);
                            let v539 = constructor_output_reg(ctx, v538);
                            let v540 = Some(v539);
                            // Rule at src\isa\aarch64\lower.isle line 470.
                            return v540;
                        }
                        let v143 = C::multi_lane(ctx, v3);
                        if let Some(v144) = v143 {
                            let v339 = C::put_in_reg(ctx, v292);
                            let v424 = &constructor_vector_size(ctx, v3);
                            let v534 = constructor_vec_misc(ctx, &VecMisc2::Fneg, v339, v424);
                            let v535 = constructor_output_reg(ctx, v534);
                            let v536 = Some(v535);
                            // Rule at src\isa\aarch64\lower.isle line 467.
                            return v536;
                        }
                    }
                }
                &Opcode::Fabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v477 = C::ty_scalar_float(ctx, v3);
                        if let Some(v478) = v477 {
                            let v339 = C::put_in_reg(ctx, v292);
                            let v529 = &constructor_scalar_size(ctx, v478);
                            let v546 = constructor_fpu_rr(ctx, &FPUOp1::Abs, v339, v529);
                            let v547 = constructor_output_reg(ctx, v546);
                            let v548 = Some(v547);
                            // Rule at src\isa\aarch64\lower.isle line 478.
                            return v548;
                        }
                        let v143 = C::multi_lane(ctx, v3);
                        if let Some(v144) = v143 {
                            let v339 = C::put_in_reg(ctx, v292);
                            let v424 = &constructor_vector_size(ctx, v3);
                            let v542 = constructor_vec_misc(ctx, &VecMisc2::Fabs, v339, v424);
                            let v543 = constructor_output_reg(ctx, v542);
                            let v544 = Some(v543);
                            // Rule at src\isa\aarch64\lower.isle line 475.
                            return v544;
                        }
                    }
                }
                &Opcode::Ceil => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v339 = C::put_in_reg(ctx, v292);
                                let v562 = constructor_fpu_round(ctx, &FpuRoundMode::Plus32, v339);
                                let v563 = constructor_output_reg(ctx, v562);
                                let v564 = Some(v563);
                                // Rule at src\isa\aarch64\lower.isle line 496.
                                return v564;
                            }
                            F64 => {
                                let v339 = C::put_in_reg(ctx, v292);
                                let v566 = constructor_fpu_round(ctx, &FpuRoundMode::Plus64, v339);
                                let v567 = constructor_output_reg(ctx, v566);
                                let v568 = Some(v567);
                                // Rule at src\isa\aarch64\lower.isle line 499.
                                return v568;
                            }
                            _ => {}
                        }
                        let v143 = C::multi_lane(ctx, v3);
                        if let Some(v144) = v143 {
                            let v339 = C::put_in_reg(ctx, v292);
                            let v424 = &constructor_vector_size(ctx, v3);
                            let v558 = constructor_vec_misc(ctx, &VecMisc2::Frintp, v339, v424);
                            let v559 = constructor_output_reg(ctx, v558);
                            let v560 = Some(v559);
                            // Rule at src\isa\aarch64\lower.isle line 493.
                            return v560;
                        }
                    }
                }
                &Opcode::Floor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v339 = C::put_in_reg(ctx, v292);
                                let v574 = constructor_fpu_round(ctx, &FpuRoundMode::Minus32, v339);
                                let v575 = constructor_output_reg(ctx, v574);
                                let v576 = Some(v575);
                                // Rule at src\isa\aarch64\lower.isle line 507.
                                return v576;
                            }
                            F64 => {
                                let v339 = C::put_in_reg(ctx, v292);
                                let v578 = constructor_fpu_round(ctx, &FpuRoundMode::Minus64, v339);
                                let v579 = constructor_output_reg(ctx, v578);
                                let v580 = Some(v579);
                                // Rule at src\isa\aarch64\lower.isle line 510.
                                return v580;
                            }
                            _ => {}
                        }
                        let v143 = C::multi_lane(ctx, v3);
                        if let Some(v144) = v143 {
                            let v339 = C::put_in_reg(ctx, v292);
                            let v424 = &constructor_vector_size(ctx, v3);
                            let v570 = constructor_vec_misc(ctx, &VecMisc2::Frintm, v339, v424);
                            let v571 = constructor_output_reg(ctx, v570);
                            let v572 = Some(v571);
                            // Rule at src\isa\aarch64\lower.isle line 504.
                            return v572;
                        }
                    }
                }
                &Opcode::Trunc => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v339 = C::put_in_reg(ctx, v292);
                                let v586 = constructor_fpu_round(ctx, &FpuRoundMode::Zero32, v339);
                                let v587 = constructor_output_reg(ctx, v586);
                                let v588 = Some(v587);
                                // Rule at src\isa\aarch64\lower.isle line 518.
                                return v588;
                            }
                            F64 => {
                                let v339 = C::put_in_reg(ctx, v292);
                                let v590 = constructor_fpu_round(ctx, &FpuRoundMode::Zero64, v339);
                                let v591 = constructor_output_reg(ctx, v590);
                                let v592 = Some(v591);
                                // Rule at src\isa\aarch64\lower.isle line 521.
                                return v592;
                            }
                            _ => {}
                        }
                        let v143 = C::multi_lane(ctx, v3);
                        if let Some(v144) = v143 {
                            let v339 = C::put_in_reg(ctx, v292);
                            let v424 = &constructor_vector_size(ctx, v3);
                            let v582 = constructor_vec_misc(ctx, &VecMisc2::Frintz, v339, v424);
                            let v583 = constructor_output_reg(ctx, v582);
                            let v584 = Some(v583);
                            // Rule at src\isa\aarch64\lower.isle line 515.
                            return v584;
                        }
                    }
                }
                &Opcode::Nearest => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v339 = C::put_in_reg(ctx, v292);
                                let v598 = constructor_fpu_round(ctx, &FpuRoundMode::Nearest32, v339);
                                let v599 = constructor_output_reg(ctx, v598);
                                let v600 = Some(v599);
                                // Rule at src\isa\aarch64\lower.isle line 529.
                                return v600;
                            }
                            F64 => {
                                let v339 = C::put_in_reg(ctx, v292);
                                let v602 = constructor_fpu_round(ctx, &FpuRoundMode::Nearest64, v339);
                                let v603 = constructor_output_reg(ctx, v602);
                                let v604 = Some(v603);
                                // Rule at src\isa\aarch64\lower.isle line 532.
                                return v604;
                            }
                            _ => {}
                        }
                        let v143 = C::multi_lane(ctx, v3);
                        if let Some(v144) = v143 {
                            let v339 = C::put_in_reg(ctx, v292);
                            let v424 = &constructor_vector_size(ctx, v3);
                            let v594 = constructor_vec_misc(ctx, &VecMisc2::Frintn, v339, v424);
                            let v595 = constructor_output_reg(ctx, v594);
                            let v596 = Some(v595);
                            // Rule at src\isa\aarch64\lower.isle line 526.
                            return v596;
                        }
                    }
                }
                &Opcode::ScalarToVector => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32X4 => {
                                let v339 = C::put_in_reg(ctx, v292);
                                let v341 = constructor_fpu_extend(ctx, v339, &ScalarSize::Size32);
                                let v342 = constructor_output_reg(ctx, v341);
                                let v343 = Some(v342);
                                // Rule at src\isa\aarch64\lower.isle line 281.
                                return v343;
                            }
                            F64X2 => {
                                let v339 = C::put_in_reg(ctx, v292);
                                let v345 = constructor_fpu_extend(ctx, v339, &ScalarSize::Size64);
                                let v346 = constructor_output_reg(ctx, v345);
                                let v347 = Some(v346);
                                // Rule at src\isa\aarch64\lower.isle line 284.
                                return v347;
                            }
                            _ => {}
                        }
                    }
                    let v293 = C::value_type(ctx, v292);
                    if v293 == I64 {
                        let v339 = C::put_in_reg(ctx, v292);
                        let v348 = constructor_mov_to_fpu(ctx, v339, &ScalarSize::Size64);
                        let v349 = constructor_output_reg(ctx, v348);
                        let v350 = Some(v349);
                        // Rule at src\isa\aarch64\lower.isle line 287.
                        return v350;
                    }
                    let v351 = C::int_fits_in_32(ctx, v293);
                    if let Some(v352) = v351 {
                        let v353 = constructor_put_in_reg_zext32(ctx, v292);
                        let v354 = constructor_mov_to_fpu(ctx, v353, &ScalarSize::Size32);
                        let v355 = constructor_output_reg(ctx, v354);
                        let v356 = Some(v355);
                        // Rule at src\isa\aarch64\lower.isle line 290.
                        return v356;
                    }
                }
                &Opcode::Bmask => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v294 = C::put_in_regs(ctx, v292);
                        let v3 = C::value_type(ctx, v2);
                        let v293 = C::value_type(ctx, v292);
                        let v1435 = constructor_lower_bmask(ctx, v3, v293, v294);
                        let v1436 = C::output(ctx, v1435);
                        let v1437 = Some(v1436);
                        // Rule at src\isa\aarch64\lower.isle line 2026.
                        return v1437;
                    }
                }
                &Opcode::Ireduce => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1470 = C::ty_int_ref_scalar_64(ctx, v3);
                        if let Some(v1471) = v1470 {
                            let v294 = C::put_in_regs(ctx, v292);
                            let v295 = C::value_regs_get(ctx, v294, 0x0_usize);
                            let v1487 = constructor_output_reg(ctx, v295);
                            let v1488 = Some(v1487);
                            // Rule at src\isa\aarch64\lower.isle line 2099.
                            return v1488;
                        }
                    }
                }
                &Opcode::SwidenLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v339 = C::put_in_reg(ctx, v292);
                        let v3 = C::value_type(ctx, v2);
                        let v1889 = &constructor_lane_size(ctx, v3);
                        let v377 = false;
                        let v1890 = constructor_vec_extend(ctx, &VecExtendOp::Sxtl, v339, v377, v1889);
                        let v1891 = constructor_output_reg(ctx, v1890);
                        let v1892 = Some(v1891);
                        // Rule at src\isa\aarch64\lower.isle line 2446.
                        return v1892;
                    }
                }
                &Opcode::SwidenHigh => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v761 = C::ty_vec128(ctx, v3);
                        if let Some(v762) = v761 {
                            let v339 = C::put_in_reg(ctx, v292);
                            let v1893 = &constructor_lane_size(ctx, v762);
                            let v378 = true;
                            let v1894 = constructor_vec_extend(ctx, &VecExtendOp::Sxtl, v339, v378, v1893);
                            let v1895 = constructor_output_reg(ctx, v1894);
                            let v1896 = Some(v1895);
                            // Rule at src\isa\aarch64\lower.isle line 2451.
                            return v1896;
                        }
                        let v1665 = C::ty_vec64_ctor(ctx, v3);
                        if let Some(v1666) = v1665 {
                            let v339 = C::put_in_reg(ctx, v292);
                            let v1898 = constructor_fpu_move_from_vec(ctx, v339, 0x1_u8, &VectorSize::Size32x2);
                            let v1899 = &constructor_lane_size(ctx, v3);
                            let v377 = false;
                            let v1900 = constructor_vec_extend(ctx, &VecExtendOp::Sxtl, v1898, v377, v1899);
                            let v1901 = constructor_output_reg(ctx, v1900);
                            let v1902 = Some(v1901);
                            // Rule at src\isa\aarch64\lower.isle line 2454.
                            return v1902;
                        }
                        let v339 = C::put_in_reg(ctx, v292);
                        let v1889 = &constructor_lane_size(ctx, v3);
                        let v378 = true;
                        let v2459 = constructor_vec_extend(ctx, &VecExtendOp::Sxtl, v339, v378, v1889);
                        let v2460 = constructor_output_reg(ctx, v2459);
                        let v2461 = Some(v2460);
                        // Rule at src\isa\aarch64\lower_dynamic_neon.isle line 91.
                        return v2461;
                    }
                }
                &Opcode::UwidenLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v339 = C::put_in_reg(ctx, v292);
                        let v3 = C::value_type(ctx, v2);
                        let v1889 = &constructor_lane_size(ctx, v3);
                        let v377 = false;
                        let v1904 = constructor_vec_extend(ctx, &VecExtendOp::Uxtl, v339, v377, v1889);
                        let v1905 = constructor_output_reg(ctx, v1904);
                        let v1906 = Some(v1905);
                        // Rule at src\isa\aarch64\lower.isle line 2461.
                        return v1906;
                    }
                }
                &Opcode::UwidenHigh => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v761 = C::ty_vec128(ctx, v3);
                        if let Some(v762) = v761 {
                            let v339 = C::put_in_reg(ctx, v292);
                            let v1893 = &constructor_lane_size(ctx, v762);
                            let v378 = true;
                            let v1907 = constructor_vec_extend(ctx, &VecExtendOp::Uxtl, v339, v378, v1893);
                            let v1908 = constructor_output_reg(ctx, v1907);
                            let v1909 = Some(v1908);
                            // Rule at src\isa\aarch64\lower.isle line 2466.
                            return v1909;
                        }
                        let v1665 = C::ty_vec64_ctor(ctx, v3);
                        if let Some(v1666) = v1665 {
                            let v339 = C::put_in_reg(ctx, v292);
                            let v1898 = constructor_fpu_move_from_vec(ctx, v339, 0x1_u8, &VectorSize::Size32x2);
                            let v1899 = &constructor_lane_size(ctx, v3);
                            let v377 = false;
                            let v1910 = constructor_vec_extend(ctx, &VecExtendOp::Uxtl, v1898, v377, v1899);
                            let v1911 = constructor_output_reg(ctx, v1910);
                            let v1912 = Some(v1911);
                            // Rule at src\isa\aarch64\lower.isle line 2469.
                            return v1912;
                        }
                        let v339 = C::put_in_reg(ctx, v292);
                        let v1889 = &constructor_lane_size(ctx, v3);
                        let v378 = true;
                        let v2462 = constructor_vec_extend(ctx, &VecExtendOp::Uxtl, v339, v378, v1889);
                        let v2463 = constructor_output_reg(ctx, v2462);
                        let v2464 = Some(v2463);
                        // Rule at src\isa\aarch64\lower_dynamic_neon.isle line 96.
                        return v2464;
                    }
                }
                &Opcode::Uextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v301 = C::def_inst(ctx, v292);
                        if let Some(v302) = v301 {
                            let v306 = &C::inst_data_value(ctx, v302);
                            match v306 {
                                &InstructionData::BinaryImm8 {
                                    opcode: ref v1005,
                                    arg: v1006,
                                    imm: v1007,
                                } => {
                                    if let &Opcode::Extractlane = v1005 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v41 = C::fits_in_64(ctx, v3);
                                        if let Some(v42) = v41 {
                                            let v1010 = C::put_in_reg(ctx, v1006);
                                            let v1008 = C::value_type(ctx, v1006);
                                            let v1011 = &constructor_lane_size(ctx, v1008);
                                            let v1009 = C::u8_from_uimm8(ctx, v1007);
                                            let v1012 = constructor_mov_from_vec(ctx, v1010, v1009, v1011);
                                            let v1013 = constructor_output_reg(ctx, v1012);
                                            let v1014 = Some(v1013);
                                            // Rule at src\isa\aarch64\lower.isle line 1252.
                                            return v1014;
                                        }
                                        if v3 == I128 {
                                            let v1010 = C::put_in_reg(ctx, v1006);
                                            let v1008 = C::value_type(ctx, v1006);
                                            let v1011 = &constructor_lane_size(ctx, v1008);
                                            let v1009 = C::u8_from_uimm8(ctx, v1007);
                                            let v1012 = constructor_mov_from_vec(ctx, v1010, v1009, v1011);
                                            let v1030 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x0_u64);
                                            let v1031 = C::value_regs(ctx, v1012, v1030);
                                            let v1032 = C::output(ctx, v1031);
                                            let v1033 = Some(v1032);
                                            // Rule at src\isa\aarch64\lower.isle line 1271.
                                            return v1033;
                                        }
                                    }
                                }
                                &InstructionData::Load {
                                    opcode: ref v1034,
                                    arg: v1035,
                                    flags: v1036,
                                    offset: v1037,
                                } => {
                                    if let &Opcode::Load = v1034 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v41 = C::fits_in_64(ctx, v3);
                                        if let Some(v42) = v41 {
                                            let v303 = C::first_result(ctx, v302);
                                            if let Some(v304) = v303 {
                                                let v1018 = C::is_sinkable_inst(ctx, v292);
                                                if let Some(v1019) = v1018 {
                                                    let v1038 = C::sink_inst(ctx, v1019);
                                                    let v305 = C::value_type(ctx, v304);
                                                    let v1039 = C::offset32_to_i32(ctx, v1037);
                                                    let v1040 = &constructor_amode(ctx, v305, v1035, v1039);
                                                    let v1041 = constructor_aarch64_uload(ctx, v305, v1040, v1036);
                                                    let v1042 = constructor_output_reg(ctx, v1041);
                                                    let v1043 = Some(v1042);
                                                    // Rule at src\isa\aarch64\lower.isle line 1277.
                                                    return v1043;
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::LoadNoOffset {
                                    opcode: ref v1015,
                                    arg: v1016,
                                    flags: v1017,
                                } => {
                                    if let &Opcode::AtomicLoad = v1015 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v41 = C::fits_in_64(ctx, v3);
                                        if let Some(v42) = v41 {
                                            let v1018 = C::is_sinkable_inst(ctx, v292);
                                            if let Some(v1019) = v1018 {
                                                let v1020 = constructor_sink_atomic_load(ctx, v1019);
                                                let v293 = C::value_type(ctx, v292);
                                                let v1021 = constructor_load_acquire(ctx, v293, v1017, v1020);
                                                let v1022 = constructor_output_reg(ctx, v1021);
                                                let v1023 = Some(v1022);
                                                // Rule at src\isa\aarch64\lower.isle line 1259.
                                                return v1023;
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v1024 = constructor_put_in_reg_zext64(ctx, v292);
                            let v1026 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x0_u64);
                            let v1027 = C::value_regs(ctx, v1024, v1026);
                            let v1028 = C::output(ctx, v1027);
                            let v1029 = Some(v1028);
                            // Rule at src\isa\aarch64\lower.isle line 1266.
                            return v1029;
                        }
                        let v41 = C::fits_in_64(ctx, v3);
                        if let Some(v42) = v41 {
                            let v339 = C::put_in_reg(ctx, v292);
                            let v377 = false;
                            let v293 = C::value_type(ctx, v292);
                            let v1000 = C::ty_bits(ctx, v293);
                            let v1001 = C::ty_bits(ctx, v42);
                            let v1002 = constructor_extend(ctx, v339, v377, v1000, v1001);
                            let v1003 = constructor_output_reg(ctx, v1002);
                            let v1004 = Some(v1003);
                            // Rule at src\isa\aarch64\lower.isle line 1247.
                            return v1004;
                        }
                    }
                }
                &Opcode::Sextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v301 = C::def_inst(ctx, v292);
                        if let Some(v302) = v301 {
                            let v306 = &C::inst_data_value(ctx, v302);
                            match v306 {
                                &InstructionData::BinaryImm8 {
                                    opcode: ref v1005,
                                    arg: v1006,
                                    imm: v1007,
                                } => {
                                    if let &Opcode::Extractlane = v1005 {
                                        let v3 = C::value_type(ctx, v2);
                                        if v3 == I128 {
                                            let v1008 = C::value_type(ctx, v1006);
                                            let v1058 = C::not_i64x2(ctx, v1008);
                                            if let Some(v1059) = v1058 {
                                                let v1010 = C::put_in_reg(ctx, v1006);
                                                let v1047 = &constructor_vector_size(ctx, v1008);
                                                let v1060 = &constructor_size_from_ty(ctx, I64);
                                                let v1009 = C::u8_from_uimm8(ctx, v1007);
                                                let v1061 = constructor_mov_from_vec_signed(ctx, v1010, v1009, v1047, v1060);
                                                let v1062 = C::imm_shift_from_u8(ctx, 0x3f_u8);
                                                let v1063 = constructor_asr_imm(ctx, I64, v1061, v1062);
                                                let v1064 = C::value_regs(ctx, v1061, v1063);
                                                let v1065 = C::output(ctx, v1064);
                                                let v1066 = Some(v1065);
                                                // Rule at src\isa\aarch64\lower.isle line 1315.
                                                return v1066;
                                            }
                                            if v1008 == I64X2 {
                                                let v1010 = C::put_in_reg(ctx, v1006);
                                                let v1009 = C::u8_from_uimm8(ctx, v1007);
                                                let v1067 = constructor_mov_from_vec(ctx, v1010, v1009, &ScalarSize::Size64);
                                                let v1068 = C::imm_shift_from_u8(ctx, 0x3f_u8);
                                                let v1069 = constructor_asr_imm(ctx, I64, v1067, v1068);
                                                let v1070 = C::value_regs(ctx, v1067, v1069);
                                                let v1071 = C::output(ctx, v1070);
                                                let v1072 = Some(v1071);
                                                // Rule at src\isa\aarch64\lower.isle line 1326.
                                                return v1072;
                                            }
                                        }
                                    }
                                }
                                &InstructionData::Load {
                                    opcode: ref v1034,
                                    arg: v1035,
                                    flags: v1036,
                                    offset: v1037,
                                } => {
                                    if let &Opcode::Load = v1034 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v41 = C::fits_in_64(ctx, v3);
                                        if let Some(v42) = v41 {
                                            let v303 = C::first_result(ctx, v302);
                                            if let Some(v304) = v303 {
                                                let v1018 = C::is_sinkable_inst(ctx, v292);
                                                if let Some(v1019) = v1018 {
                                                    let v1038 = C::sink_inst(ctx, v1019);
                                                    let v305 = C::value_type(ctx, v304);
                                                    let v1039 = C::offset32_to_i32(ctx, v1037);
                                                    let v1040 = &constructor_amode(ctx, v305, v1035, v1039);
                                                    let v1073 = constructor_aarch64_sload(ctx, v305, v1040, v1036);
                                                    let v1074 = constructor_output_reg(ctx, v1073);
                                                    let v1075 = Some(v1074);
                                                    // Rule at src\isa\aarch64\lower.isle line 1336.
                                                    return v1075;
                                                }
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v1052 = constructor_put_in_reg_sext64(ctx, v292);
                            let v1053 = C::imm_shift_from_u8(ctx, 0x3f_u8);
                            let v1054 = constructor_asr_imm(ctx, I64, v1052, v1053);
                            let v1055 = C::value_regs(ctx, v1052, v1054);
                            let v1056 = C::output(ctx, v1055);
                            let v1057 = Some(v1056);
                            // Rule at src\isa\aarch64\lower.isle line 1305.
                            return v1057;
                        }
                        let v41 = C::fits_in_64(ctx, v3);
                        if let Some(v42) = v41 {
                            if let Some(v302) = v301 {
                                let v306 = &C::inst_data_value(ctx, v302);
                                if let &InstructionData::BinaryImm8 {
                                    opcode: ref v1005,
                                    arg: v1006,
                                    imm: v1007,
                                } = v306 {
                                    if let &Opcode::Extractlane = v1005 {
                                        let v1010 = C::put_in_reg(ctx, v1006);
                                        let v1008 = C::value_type(ctx, v1006);
                                        let v1047 = &constructor_vector_size(ctx, v1008);
                                        let v1048 = &constructor_size_from_ty(ctx, v42);
                                        let v1009 = C::u8_from_uimm8(ctx, v1007);
                                        let v1049 = constructor_mov_from_vec_signed(ctx, v1010, v1009, v1047, v1048);
                                        let v1050 = constructor_output_reg(ctx, v1049);
                                        let v1051 = Some(v1050);
                                        // Rule at src\isa\aarch64\lower.isle line 1296.
                                        return v1051;
                                    }
                                }
                            }
                            let v339 = C::put_in_reg(ctx, v292);
                            let v378 = true;
                            let v293 = C::value_type(ctx, v292);
                            let v1000 = C::ty_bits(ctx, v293);
                            let v1001 = C::ty_bits(ctx, v42);
                            let v1044 = constructor_extend(ctx, v339, v378, v1000, v1001);
                            let v1045 = constructor_output_reg(ctx, v1044);
                            let v1046 = Some(v1045);
                            // Rule at src\isa\aarch64\lower.isle line 1291.
                            return v1046;
                        }
                    }
                }
                &Opcode::Fpromote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F64 {
                            let v339 = C::put_in_reg(ctx, v292);
                            let v550 = constructor_fpu_rr(ctx, &FPUOp1::Cvt32To64, v339, &ScalarSize::Size32);
                            let v551 = constructor_output_reg(ctx, v550);
                            let v552 = Some(v551);
                            // Rule at src\isa\aarch64\lower.isle line 483.
                            return v552;
                        }
                    }
                }
                &Opcode::Fdemote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F32 {
                            let v339 = C::put_in_reg(ctx, v292);
                            let v554 = constructor_fpu_rr(ctx, &FPUOp1::Cvt64To32, v339, &ScalarSize::Size64);
                            let v555 = constructor_output_reg(ctx, v554);
                            let v556 = Some(v555);
                            // Rule at src\isa\aarch64\lower.isle line 488.
                            return v556;
                        }
                    }
                }
                &Opcode::Fvdemote => {
                    let v339 = C::put_in_reg(ctx, v292);
                    let v1847 = constructor_fcvtn(ctx, v339, &ScalarSize::Size32);
                    let v1848 = constructor_output_reg(ctx, v1847);
                    let v1849 = Some(v1848);
                    // Rule at src\isa\aarch64\lower.isle line 2395.
                    return v1849;
                }
                &Opcode::FvpromoteLow => {
                    let v339 = C::put_in_reg(ctx, v292);
                    let v377 = false;
                    let v2373 = constructor_vec_rr_long(ctx, &VecRRLongOp::Fcvtl32, v339, v377);
                    let v2374 = constructor_output_reg(ctx, v2373);
                    let v2375 = Some(v2374);
                    // Rule at src\isa\aarch64\lower.isle line 3098.
                    return v2375;
                }
                &Opcode::FcvtToUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v293 = C::value_type(ctx, v292);
                        match v293 {
                            F32 => {
                                let v3 = C::value_type(ctx, v2);
                                if v3 == I64 {
                                    let v339 = C::put_in_reg(ctx, v292);
                                    let v377 = false;
                                    let v637 = constructor_fpu_to_int_cvt(ctx, &FpuToIntOp::F32ToU64, v339, v377, F32, I64);
                                    let v638 = constructor_output_reg(ctx, v637);
                                    let v639 = Some(v638);
                                    // Rule at src\isa\aarch64\lower.isle line 630.
                                    return v639;
                                }
                                let v431 = C::fits_in_32(ctx, v3);
                                if let Some(v432) = v431 {
                                    let v339 = C::put_in_reg(ctx, v292);
                                    let v377 = false;
                                    let v633 = constructor_fpu_to_int_cvt(ctx, &FpuToIntOp::F32ToU32, v339, v377, F32, v432);
                                    let v634 = constructor_output_reg(ctx, v633);
                                    let v635 = Some(v634);
                                    // Rule at src\isa\aarch64\lower.isle line 627.
                                    return v635;
                                }
                            }
                            F64 => {
                                let v3 = C::value_type(ctx, v2);
                                if v3 == I64 {
                                    let v339 = C::put_in_reg(ctx, v292);
                                    let v377 = false;
                                    let v646 = constructor_fpu_to_int_cvt(ctx, &FpuToIntOp::F64ToU64, v339, v377, F64, I64);
                                    let v647 = constructor_output_reg(ctx, v646);
                                    let v648 = Some(v647);
                                    // Rule at src\isa\aarch64\lower.isle line 636.
                                    return v648;
                                }
                                let v431 = C::fits_in_32(ctx, v3);
                                if let Some(v432) = v431 {
                                    let v339 = C::put_in_reg(ctx, v292);
                                    let v377 = false;
                                    let v642 = constructor_fpu_to_int_cvt(ctx, &FpuToIntOp::F64ToU32, v339, v377, F64, v432);
                                    let v643 = constructor_output_reg(ctx, v642);
                                    let v644 = Some(v643);
                                    // Rule at src\isa\aarch64\lower.isle line 633.
                                    return v644;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::FcvtToSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v293 = C::value_type(ctx, v292);
                        match v293 {
                            F32 => {
                                let v3 = C::value_type(ctx, v2);
                                if v3 == I64 {
                                    let v339 = C::put_in_reg(ctx, v292);
                                    let v378 = true;
                                    let v654 = constructor_fpu_to_int_cvt(ctx, &FpuToIntOp::F32ToI64, v339, v378, F32, I64);
                                    let v655 = constructor_output_reg(ctx, v654);
                                    let v656 = Some(v655);
                                    // Rule at src\isa\aarch64\lower.isle line 644.
                                    return v656;
                                }
                                let v431 = C::fits_in_32(ctx, v3);
                                if let Some(v432) = v431 {
                                    let v339 = C::put_in_reg(ctx, v292);
                                    let v378 = true;
                                    let v650 = constructor_fpu_to_int_cvt(ctx, &FpuToIntOp::F32ToI32, v339, v378, F32, v432);
                                    let v651 = constructor_output_reg(ctx, v650);
                                    let v652 = Some(v651);
                                    // Rule at src\isa\aarch64\lower.isle line 641.
                                    return v652;
                                }
                            }
                            F64 => {
                                let v3 = C::value_type(ctx, v2);
                                if v3 == I64 {
                                    let v339 = C::put_in_reg(ctx, v292);
                                    let v378 = true;
                                    let v662 = constructor_fpu_to_int_cvt(ctx, &FpuToIntOp::F64ToI64, v339, v378, F64, I64);
                                    let v663 = constructor_output_reg(ctx, v662);
                                    let v664 = Some(v663);
                                    // Rule at src\isa\aarch64\lower.isle line 650.
                                    return v664;
                                }
                                let v431 = C::fits_in_32(ctx, v3);
                                if let Some(v432) = v431 {
                                    let v339 = C::put_in_reg(ctx, v292);
                                    let v378 = true;
                                    let v658 = constructor_fpu_to_int_cvt(ctx, &FpuToIntOp::F64ToI32, v339, v378, F64, v432);
                                    let v659 = constructor_output_reg(ctx, v658);
                                    let v660 = Some(v659);
                                    // Rule at src\isa\aarch64\lower.isle line 647.
                                    return v660;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::FcvtToUintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v293 = C::value_type(ctx, v292);
                        match v293 {
                            F32 => {
                                let v3 = C::value_type(ctx, v2);
                                if v3 == I64 {
                                    let v339 = C::put_in_reg(ctx, v292);
                                    let v377 = false;
                                    let v714 = constructor_fpu_to_int_cvt_sat(ctx, &FpuToIntOp::F32ToU64, v339, v377, I64);
                                    let v715 = constructor_output_reg(ctx, v714);
                                    let v716 = Some(v715);
                                    // Rule at src\isa\aarch64\lower.isle line 704.
                                    return v716;
                                }
                                let v431 = C::fits_in_32(ctx, v3);
                                if let Some(v432) = v431 {
                                    let v339 = C::put_in_reg(ctx, v292);
                                    let v377 = false;
                                    let v711 = constructor_fpu_to_int_cvt_sat(ctx, &FpuToIntOp::F32ToU32, v339, v377, v432);
                                    let v712 = constructor_output_reg(ctx, v711);
                                    let v713 = Some(v712);
                                    // Rule at src\isa\aarch64\lower.isle line 701.
                                    return v713;
                                }
                            }
                            F64 => {
                                let v3 = C::value_type(ctx, v2);
                                if v3 == I64 {
                                    let v339 = C::put_in_reg(ctx, v292);
                                    let v377 = false;
                                    let v720 = constructor_fpu_to_int_cvt_sat(ctx, &FpuToIntOp::F64ToU64, v339, v377, I64);
                                    let v721 = constructor_output_reg(ctx, v720);
                                    let v722 = Some(v721);
                                    // Rule at src\isa\aarch64\lower.isle line 710.
                                    return v722;
                                }
                                let v431 = C::fits_in_32(ctx, v3);
                                if let Some(v432) = v431 {
                                    let v339 = C::put_in_reg(ctx, v292);
                                    let v377 = false;
                                    let v717 = constructor_fpu_to_int_cvt_sat(ctx, &FpuToIntOp::F64ToU32, v339, v377, v432);
                                    let v718 = constructor_output_reg(ctx, v717);
                                    let v719 = Some(v718);
                                    // Rule at src\isa\aarch64\lower.isle line 707.
                                    return v719;
                                }
                            }
                            _ => {}
                        }
                        let v3 = C::value_type(ctx, v2);
                        let v143 = C::multi_lane(ctx, v3);
                        if let Some(v144) = v143 {
                            match v144.0 {
                                0x20_u32 => {
                                    let v357 = C::multi_lane(ctx, v293);
                                    if let Some(v358) = v357 {
                                        if v358.0 == 0x20_u32 {
                                            let v339 = C::put_in_reg(ctx, v292);
                                            let v424 = &constructor_vector_size(ctx, v3);
                                            let v708 = constructor_vec_misc(ctx, &VecMisc2::Fcvtzu, v339, v424);
                                            let v709 = constructor_output_reg(ctx, v708);
                                            let v710 = Some(v709);
                                            // Rule at src\isa\aarch64\lower.isle line 695.
                                            return v710;
                                        }
                                    }
                                }
                                0x40_u32 => {
                                    let v357 = C::multi_lane(ctx, v293);
                                    if let Some(v358) = v357 {
                                        if v358.0 == 0x40_u32 {
                                            let v339 = C::put_in_reg(ctx, v292);
                                            let v424 = &constructor_vector_size(ctx, v3);
                                            let v708 = constructor_vec_misc(ctx, &VecMisc2::Fcvtzu, v339, v424);
                                            let v709 = constructor_output_reg(ctx, v708);
                                            let v710 = Some(v709);
                                            // Rule at src\isa\aarch64\lower.isle line 698.
                                            return v710;
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::FcvtToSintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v293 = C::value_type(ctx, v292);
                        match v293 {
                            F32 => {
                                let v3 = C::value_type(ctx, v2);
                                if v3 == I64 {
                                    let v339 = C::put_in_reg(ctx, v292);
                                    let v378 = true;
                                    let v730 = constructor_fpu_to_int_cvt_sat(ctx, &FpuToIntOp::F32ToI64, v339, v378, I64);
                                    let v731 = constructor_output_reg(ctx, v730);
                                    let v732 = Some(v731);
                                    // Rule at src\isa\aarch64\lower.isle line 724.
                                    return v732;
                                }
                                let v431 = C::fits_in_32(ctx, v3);
                                if let Some(v432) = v431 {
                                    let v339 = C::put_in_reg(ctx, v292);
                                    let v378 = true;
                                    let v727 = constructor_fpu_to_int_cvt_sat(ctx, &FpuToIntOp::F32ToI32, v339, v378, v432);
                                    let v728 = constructor_output_reg(ctx, v727);
                                    let v729 = Some(v728);
                                    // Rule at src\isa\aarch64\lower.isle line 721.
                                    return v729;
                                }
                            }
                            F64 => {
                                let v3 = C::value_type(ctx, v2);
                                if v3 == I64 {
                                    let v339 = C::put_in_reg(ctx, v292);
                                    let v378 = true;
                                    let v736 = constructor_fpu_to_int_cvt_sat(ctx, &FpuToIntOp::F64ToI64, v339, v378, I64);
                                    let v737 = constructor_output_reg(ctx, v736);
                                    let v738 = Some(v737);
                                    // Rule at src\isa\aarch64\lower.isle line 730.
                                    return v738;
                                }
                                let v431 = C::fits_in_32(ctx, v3);
                                if let Some(v432) = v431 {
                                    let v339 = C::put_in_reg(ctx, v292);
                                    let v378 = true;
                                    let v733 = constructor_fpu_to_int_cvt_sat(ctx, &FpuToIntOp::F64ToI32, v339, v378, v432);
                                    let v734 = constructor_output_reg(ctx, v733);
                                    let v735 = Some(v734);
                                    // Rule at src\isa\aarch64\lower.isle line 727.
                                    return v735;
                                }
                            }
                            _ => {}
                        }
                        let v3 = C::value_type(ctx, v2);
                        let v143 = C::multi_lane(ctx, v3);
                        if let Some(v144) = v143 {
                            match v144.0 {
                                0x20_u32 => {
                                    let v357 = C::multi_lane(ctx, v293);
                                    if let Some(v358) = v357 {
                                        if v358.0 == 0x20_u32 {
                                            let v339 = C::put_in_reg(ctx, v292);
                                            let v424 = &constructor_vector_size(ctx, v3);
                                            let v724 = constructor_vec_misc(ctx, &VecMisc2::Fcvtzs, v339, v424);
                                            let v725 = constructor_output_reg(ctx, v724);
                                            let v726 = Some(v725);
                                            // Rule at src\isa\aarch64\lower.isle line 715.
                                            return v726;
                                        }
                                    }
                                }
                                0x40_u32 => {
                                    let v357 = C::multi_lane(ctx, v293);
                                    if let Some(v358) = v357 {
                                        if v358.0 == 0x40_u32 {
                                            let v339 = C::put_in_reg(ctx, v292);
                                            let v424 = &constructor_vector_size(ctx, v3);
                                            let v724 = constructor_vec_misc(ctx, &VecMisc2::Fcvtzs, v339, v424);
                                            let v725 = constructor_output_reg(ctx, v724);
                                            let v726 = Some(v725);
                                            // Rule at src\isa\aarch64\lower.isle line 718.
                                            return v726;
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::FcvtFromUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v293 = C::value_type(ctx, v292);
                                if v293 == I64 {
                                    let v339 = C::put_in_reg(ctx, v292);
                                    let v680 = constructor_int_to_fpu(ctx, &IntToFpuOp::U64ToF32, v339);
                                    let v681 = constructor_output_reg(ctx, v680);
                                    let v682 = Some(v681);
                                    // Rule at src\isa\aarch64\lower.isle line 667.
                                    return v682;
                                }
                                let v669 = C::fits_in_32(ctx, v293);
                                if let Some(v670) = v669 {
                                    let v353 = constructor_put_in_reg_zext32(ctx, v292);
                                    let v672 = constructor_int_to_fpu(ctx, &IntToFpuOp::U32ToF32, v353);
                                    let v673 = constructor_output_reg(ctx, v672);
                                    let v674 = Some(v673);
                                    // Rule at src\isa\aarch64\lower.isle line 661.
                                    return v674;
                                }
                            }
                            F64 => {
                                let v293 = C::value_type(ctx, v292);
                                if v293 == I64 {
                                    let v339 = C::put_in_reg(ctx, v292);
                                    let v684 = constructor_int_to_fpu(ctx, &IntToFpuOp::U64ToF64, v339);
                                    let v685 = constructor_output_reg(ctx, v684);
                                    let v686 = Some(v685);
                                    // Rule at src\isa\aarch64\lower.isle line 670.
                                    return v686;
                                }
                                let v669 = C::fits_in_32(ctx, v293);
                                if let Some(v670) = v669 {
                                    let v353 = constructor_put_in_reg_zext32(ctx, v292);
                                    let v676 = constructor_int_to_fpu(ctx, &IntToFpuOp::U32ToF64, v353);
                                    let v677 = constructor_output_reg(ctx, v676);
                                    let v678 = Some(v677);
                                    // Rule at src\isa\aarch64\lower.isle line 664.
                                    return v678;
                                }
                            }
                            _ => {}
                        }
                        let v143 = C::multi_lane(ctx, v3);
                        if let Some(v144) = v143 {
                            match v144.0 {
                                0x20_u32 => {
                                    let v293 = C::value_type(ctx, v292);
                                    let v357 = C::multi_lane(ctx, v293);
                                    if let Some(v358) = v357 {
                                        if v358.0 == 0x20_u32 {
                                            let v339 = C::put_in_reg(ctx, v292);
                                            let v424 = &constructor_vector_size(ctx, v3);
                                            let v666 = constructor_vec_misc(ctx, &VecMisc2::Ucvtf, v339, v424);
                                            let v667 = constructor_output_reg(ctx, v666);
                                            let v668 = Some(v667);
                                            // Rule at src\isa\aarch64\lower.isle line 655.
                                            return v668;
                                        }
                                    }
                                }
                                0x40_u32 => {
                                    let v293 = C::value_type(ctx, v292);
                                    let v357 = C::multi_lane(ctx, v293);
                                    if let Some(v358) = v357 {
                                        if v358.0 == 0x40_u32 {
                                            let v339 = C::put_in_reg(ctx, v292);
                                            let v424 = &constructor_vector_size(ctx, v3);
                                            let v666 = constructor_vec_misc(ctx, &VecMisc2::Ucvtf, v339, v424);
                                            let v667 = constructor_output_reg(ctx, v666);
                                            let v668 = Some(v667);
                                            // Rule at src\isa\aarch64\lower.isle line 658.
                                            return v668;
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::FcvtFromSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v293 = C::value_type(ctx, v292);
                                if v293 == I64 {
                                    let v339 = C::put_in_reg(ctx, v292);
                                    let v700 = constructor_int_to_fpu(ctx, &IntToFpuOp::I64ToF32, v339);
                                    let v701 = constructor_output_reg(ctx, v700);
                                    let v702 = Some(v701);
                                    // Rule at src\isa\aarch64\lower.isle line 687.
                                    return v702;
                                }
                                let v669 = C::fits_in_32(ctx, v293);
                                if let Some(v670) = v669 {
                                    let v433 = constructor_put_in_reg_sext32(ctx, v292);
                                    let v692 = constructor_int_to_fpu(ctx, &IntToFpuOp::I32ToF32, v433);
                                    let v693 = constructor_output_reg(ctx, v692);
                                    let v694 = Some(v693);
                                    // Rule at src\isa\aarch64\lower.isle line 681.
                                    return v694;
                                }
                            }
                            F64 => {
                                let v293 = C::value_type(ctx, v292);
                                if v293 == I64 {
                                    let v339 = C::put_in_reg(ctx, v292);
                                    let v704 = constructor_int_to_fpu(ctx, &IntToFpuOp::I64ToF64, v339);
                                    let v705 = constructor_output_reg(ctx, v704);
                                    let v706 = Some(v705);
                                    // Rule at src\isa\aarch64\lower.isle line 690.
                                    return v706;
                                }
                                let v669 = C::fits_in_32(ctx, v293);
                                if let Some(v670) = v669 {
                                    let v433 = constructor_put_in_reg_sext32(ctx, v292);
                                    let v696 = constructor_int_to_fpu(ctx, &IntToFpuOp::I32ToF64, v433);
                                    let v697 = constructor_output_reg(ctx, v696);
                                    let v698 = Some(v697);
                                    // Rule at src\isa\aarch64\lower.isle line 684.
                                    return v698;
                                }
                            }
                            _ => {}
                        }
                        let v143 = C::multi_lane(ctx, v3);
                        if let Some(v144) = v143 {
                            match v144.0 {
                                0x20_u32 => {
                                    let v293 = C::value_type(ctx, v292);
                                    let v357 = C::multi_lane(ctx, v293);
                                    if let Some(v358) = v357 {
                                        if v358.0 == 0x20_u32 {
                                            let v339 = C::put_in_reg(ctx, v292);
                                            let v424 = &constructor_vector_size(ctx, v3);
                                            let v688 = constructor_vec_misc(ctx, &VecMisc2::Scvtf, v339, v424);
                                            let v689 = constructor_output_reg(ctx, v688);
                                            let v690 = Some(v689);
                                            // Rule at src\isa\aarch64\lower.isle line 675.
                                            return v690;
                                        }
                                    }
                                }
                                0x40_u32 => {
                                    let v293 = C::value_type(ctx, v292);
                                    let v357 = C::multi_lane(ctx, v293);
                                    if let Some(v358) = v357 {
                                        if v358.0 == 0x40_u32 {
                                            let v339 = C::put_in_reg(ctx, v292);
                                            let v424 = &constructor_vector_size(ctx, v3);
                                            let v688 = constructor_vec_misc(ctx, &VecMisc2::Scvtf, v339, v424);
                                            let v689 = constructor_output_reg(ctx, v688);
                                            let v690 = Some(v689);
                                            // Rule at src\isa\aarch64\lower.isle line 678.
                                            return v690;
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::Isplit => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v301 = C::def_inst(ctx, v292);
                        if let Some(v302) = v301 {
                            let v303 = C::first_result(ctx, v302);
                            if let Some(v304) = v303 {
                                let v305 = C::value_type(ctx, v304);
                                if v305 == I128 {
                                    let v306 = &C::inst_data_value(ctx, v302);
                                    if let &InstructionData::Binary {
                                        opcode: ref v307,
                                        args: ref v308,
                                    } = v306 {
                                        if let &Opcode::Imul = v307 {
                                            let v309 = C::unpack_value_array_2(ctx, v308);
                                            let v312 = C::def_inst(ctx, v309.0);
                                            if let Some(v313) = v312 {
                                                let v314 = &C::inst_data_value(ctx, v313);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v315,
                                                    arg: v316,
                                                } = v314 {
                                                    match v315 {
                                                        &Opcode::Uextend => {
                                                            let v317 = C::def_inst(ctx, v309.1);
                                                            if let Some(v318) = v317 {
                                                                let v319 = &C::inst_data_value(ctx, v318);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v320,
                                                                    arg: v321,
                                                                } = v319 {
                                                                    if let &Opcode::Uextend = v320 {
                                                                        let v322 = C::value_is_unused(ctx, v2);
                                                                        if v322 == true {
                                                                            let v38 = C::invalid_reg(ctx);
                                                                            let v323 = C::value_reg(ctx, v38);
                                                                            let v324 = constructor_put_in_reg_zext64(ctx, v316);
                                                                            let v325 = constructor_put_in_reg_zext64(ctx, v321);
                                                                            let v326 = constructor_umulh(ctx, I64, v324, v325);
                                                                            let v327 = C::value_reg(ctx, v326);
                                                                            let v328 = C::output_pair(ctx, v323, v327);
                                                                            let v329 = Some(v328);
                                                                            // Rule at src\isa\aarch64\lower.isle line 262.
                                                                            return v329;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Sextend => {
                                                            let v317 = C::def_inst(ctx, v309.1);
                                                            if let Some(v318) = v317 {
                                                                let v319 = &C::inst_data_value(ctx, v318);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v320,
                                                                    arg: v321,
                                                                } = v319 {
                                                                    if let &Opcode::Sextend = v320 {
                                                                        let v322 = C::value_is_unused(ctx, v2);
                                                                        if v322 == true {
                                                                            let v38 = C::invalid_reg(ctx);
                                                                            let v323 = C::value_reg(ctx, v38);
                                                                            let v330 = constructor_put_in_reg_sext64(ctx, v316);
                                                                            let v331 = constructor_put_in_reg_sext64(ctx, v321);
                                                                            let v332 = constructor_smulh(ctx, I64, v330, v331);
                                                                            let v333 = C::value_reg(ctx, v332);
                                                                            let v334 = C::output_pair(ctx, v323, v333);
                                                                            let v335 = Some(v334);
                                                                            // Rule at src\isa\aarch64\lower.isle line 268.
                                                                            return v335;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    let v293 = C::value_type(ctx, v292);
                    if v293 == I128 {
                        let v294 = C::put_in_regs(ctx, v292);
                        let v295 = C::value_regs_get(ctx, v294, 0x0_usize);
                        let v296 = C::value_reg(ctx, v295);
                        let v297 = C::value_regs_get(ctx, v294, 0x1_usize);
                        let v298 = C::value_reg(ctx, v297);
                        let v299 = C::output_pair(ctx, v296, v298);
                        let v300 = Some(v299);
                        // Rule at src\isa\aarch64\lower.isle line 252.
                        return v300;
                    }
                }
                _ => {}
            }
        }
        &InstructionData::UnaryConst {
            opcode: ref v30,
            constant_handle: v31,
        } => {
            match v30 {
                &Opcode::F128const => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F128 {
                            let v32 = C::u128_from_constant(ctx, v31);
                            if let Some(v33) = v32 {
                                let v34 = constructor_constant_f128(ctx, v33);
                                let v35 = constructor_output_reg(ctx, v34);
                                let v36 = Some(v35);
                                // Rule at src\isa\aarch64\lower.isle line 40.
                                return v36;
                            }
                        }
                    }
                }
                &Opcode::Vconst => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1663 = C::u64_from_constant(ctx, v31);
                        if let Some(v1664) = v1663 {
                            let v3 = C::value_type(ctx, v2);
                            let v1665 = C::ty_vec64_ctor(ctx, v3);
                            if let Some(v1666) = v1665 {
                                let v1667 = constructor_constant_f64(ctx, v1664);
                                let v1668 = constructor_output_reg(ctx, v1667);
                                let v1669 = Some(v1668);
                                // Rule at src\isa\aarch64\lower.isle line 2269.
                                return v1669;
                            }
                        }
                        let v32 = C::u128_from_constant(ctx, v31);
                        if let Some(v33) = v32 {
                            let v3 = C::value_type(ctx, v2);
                            let v761 = C::ty_vec128(ctx, v3);
                            if let Some(v762) = v761 {
                                let v34 = constructor_constant_f128(ctx, v33);
                                let v35 = constructor_output_reg(ctx, v34);
                                let v36 = Some(v35);
                                // Rule at src\isa\aarch64\lower.isle line 2266.
                                return v36;
                            }
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::UnaryGlobalValue {
            opcode: ref v1930,
            global_value: v1931,
        } => {
            match v1930 {
                &Opcode::SymbolValue => {
                    let v1932 = C::symbol_value_data(ctx, v1931);
                    if let Some(v1933) = v1932 {
                        let v1937 = C::box_external_name(ctx, v1933.0);
                        let v1938 = constructor_load_ext_name(ctx, v1937, v1933.2);
                        let v1939 = constructor_output_reg(ctx, v1938);
                        let v1940 = Some(v1939);
                        // Rule at src\isa\aarch64\lower.isle line 2491.
                        return v1940;
                    }
                }
                &Opcode::TlsValue => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1932 = C::symbol_value_data(ctx, v1931);
                        if let Some(v1933) = v1932 {
                            let v3 = C::value_type(ctx, v2);
                            let v2365 = &C::tls_model(ctx, v3);
                            match v2365 {
                                &TlsModel::ElfGd => {
                                    let v2366 = constructor_elf_tls_get_addr(ctx, v1933.0);
                                    let v2367 = constructor_output_reg(ctx, v2366);
                                    let v2368 = Some(v2367);
                                    // Rule at src\isa\aarch64\lower.isle line 3090.
                                    return v2368;
                                }
                                &TlsModel::Macho => {
                                    let v2369 = constructor_macho_tls_get_addr(ctx, v1933.0);
                                    let v2370 = constructor_output_reg(ctx, v2369);
                                    let v2371 = Some(v2370);
                                    // Rule at src\isa\aarch64\lower.isle line 3093.
                                    return v2371;
                                }
                                _ => {}
                            }
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::UnaryIeee16 {
            opcode: ref v12,
            imm: v13,
        } => {
            if let &Opcode::F16const = v12 {
                let v14 = C::u16_from_ieee16(ctx, v13);
                let v15 = constructor_constant_f16(ctx, v14);
                let v16 = constructor_output_reg(ctx, v15);
                let v17 = Some(v16);
                // Rule at src\isa\aarch64\lower.isle line 25.
                return v17;
            }
        }
        &InstructionData::UnaryIeee32 {
            opcode: ref v18,
            imm: v19,
        } => {
            if let &Opcode::F32const = v18 {
                let v20 = C::u32_from_ieee32(ctx, v19);
                let v21 = constructor_constant_f32(ctx, v20);
                let v22 = constructor_output_reg(ctx, v21);
                let v23 = Some(v22);
                // Rule at src\isa\aarch64\lower.isle line 30.
                return v23;
            }
        }
        &InstructionData::UnaryIeee64 {
            opcode: ref v24,
            imm: v25,
        } => {
            if let &Opcode::F64const = v24 {
                let v26 = C::u64_from_ieee64(ctx, v25);
                let v27 = constructor_constant_f64(ctx, v26);
                let v28 = constructor_output_reg(ctx, v27);
                let v29 = Some(v28);
                // Rule at src\isa\aarch64\lower.isle line 35.
                return v29;
            }
        }
        &InstructionData::UnaryImm {
            opcode: ref v5,
            imm: v6,
        } => {
            if let &Opcode::Iconst = v5 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v7 = C::u64_from_imm64(ctx, v6);
                    let v9 = constructor_imm(ctx, v3, &ImmExtend::Zero, v7);
                    let v10 = constructor_output_reg(ctx, v9);
                    let v11 = Some(v10);
                    // Rule at src\isa\aarch64\lower.isle line 20.
                    return v11;
                }
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term lower_branch.
pub fn constructor_lower_branch<C: Context>(
    ctx: &mut C,
    arg0: Inst,
    arg1: &MachLabelSlice,
) -> Option<Unit> {
    let v1 = &C::inst_data_value(ctx, arg0);
    match v1 {
        &InstructionData::BranchTable {
            opcode: ref v171,
            arg: v172,
            table: v173,
        } => {
            if let &Opcode::BrTable = v171 {
                let v174 = C::jump_table_targets(ctx, arg1);
                if let Some(v175) = v174 {
                    let v178 = C::jump_table_size(ctx, &v175.1);
                    let v179 = C::targets_jt_space(ctx, &v175.1);
                    let v180 = &constructor_emit_island(ctx, v179);
                    let v181 = constructor_side_effect(ctx, v180);
                    let v182 = constructor_put_in_reg_zext32(ctx, v172);
                    let v183 = C::u32_as_u64(ctx, v178);
                    let v184 = constructor_br_table_impl(ctx, v183, v182, v175.0, &v175.1);
                    let v185 = Some(v184);
                    // Rule at src\isa\aarch64\lower.isle line 3166.
                    return v185;
                }
            }
        }
        &InstructionData::Brif {
            opcode: ref v25,
            arg: v26,
            blocks: ref v27,
        } => {
            if let &Opcode::Brif = v25 {
                let v43 = C::two_targets(ctx, arg1);
                if let Some(v44) = v43 {
                    let v105 = C::def_inst(ctx, v26);
                    if let Some(v106) = v105 {
                        let v107 = &C::inst_data_value(ctx, v106);
                        match v107 {
                            &InstructionData::Binary {
                                opcode: ref v108,
                                args: ref v109,
                            } => {
                                if let &Opcode::Band = v108 {
                                    let v110 = C::unpack_value_array_2(ctx, v109);
                                    let v114 = C::def_inst(ctx, v110.1);
                                    if let Some(v115) = v114 {
                                        let v116 = &C::inst_data_value(ctx, v115);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v117,
                                            imm: v118,
                                        } = v116 {
                                            if let &Opcode::Iconst = v117 {
                                                let v113 = C::value_type(ctx, v110.0);
                                                let v119 = C::u64_from_imm64(ctx, v118);
                                                let v120 = C::test_and_compare_bit_const(ctx, v113, v119);
                                                if let Some(v121) = v120 {
                                                    let v122 = C::branch_target(ctx, v44.0);
                                                    let v123 = C::branch_target(ctx, v44.1);
                                                    let v124 = C::put_in_reg(ctx, v110.0);
                                                    let v125 = &constructor_tbnz(ctx, v122, v123, v124, v121);
                                                    let v126 = constructor_emit_side_effect(ctx, v125);
                                                    let v127 = Some(v126);
                                                    // Rule at src\isa\aarch64\lower.isle line 3140.
                                                    return v127;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            &InstructionData::IntCompare {
                                opcode: ref v128,
                                args: ref v129,
                                cond: ref v130,
                            } => {
                                if let &Opcode::Icmp = v128 {
                                    if let &IntCC::Equal = v130 {
                                        let v131 = C::unpack_value_array_2(ctx, v129);
                                        let v134 = C::def_inst(ctx, v131.0);
                                        if let Some(v135) = v134 {
                                            let v136 = &C::inst_data_value(ctx, v135);
                                            if let &InstructionData::Binary {
                                                opcode: ref v137,
                                                args: ref v138,
                                            } = v136 {
                                                if let &Opcode::Band = v137 {
                                                    let v139 = C::unpack_value_array_2(ctx, v138);
                                                    let v142 = C::value_type(ctx, v139.0);
                                                    let v143 = C::fits_in_64(ctx, v142);
                                                    if let Some(v144) = v143 {
                                                        let v145 = C::def_inst(ctx, v139.1);
                                                        if let Some(v146) = v145 {
                                                            let v147 = &C::inst_data_value(ctx, v146);
                                                            if let &InstructionData::UnaryImm {
                                                                opcode: ref v148,
                                                                imm: v149,
                                                            } = v147 {
                                                                if let &Opcode::Iconst = v148 {
                                                                    let v151 = C::def_inst(ctx, v131.1);
                                                                    if let Some(v152) = v151 {
                                                                        let v153 = &C::inst_data_value(ctx, v152);
                                                                        if let &InstructionData::UnaryImm {
                                                                            opcode: ref v154,
                                                                            imm: v155,
                                                                        } = v153 {
                                                                            if let &Opcode::Iconst = v154 {
                                                                                let v156 = C::u64_from_imm64(ctx, v155);
                                                                                if v156 == 0x0_u64 {
                                                                                    let v150 = C::u64_from_imm64(ctx, v149);
                                                                                    let v157 = C::test_and_compare_bit_const(ctx, v144, v150);
                                                                                    if let Some(v158) = v157 {
                                                                                        let v122 = C::branch_target(ctx, v44.0);
                                                                                        let v123 = C::branch_target(ctx, v44.1);
                                                                                        let v159 = C::put_in_reg(ctx, v139.0);
                                                                                        let v160 = &constructor_tbz(ctx, v122, v123, v159, v158);
                                                                                        let v161 = constructor_emit_side_effect(ctx, v160);
                                                                                        let v162 = Some(v161);
                                                                                        // Rule at src\isa\aarch64\lower.isle line 3146.
                                                                                        return v162;
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                    }
                    let v28 = C::maybe_uextend(ctx, v26);
                    if let Some(v29) = v28 {
                        let v30 = C::def_inst(ctx, v29);
                        if let Some(v31) = v30 {
                            let v32 = &C::inst_data_value(ctx, v31);
                            match v32 {
                                &InstructionData::FloatCompare {
                                    opcode: ref v58,
                                    args: ref v59,
                                    cond: ref v60,
                                } => {
                                    if let &Opcode::Fcmp = v58 {
                                        let v61 = C::unpack_value_array_2(ctx, v59);
                                        let v64 = C::value_type(ctx, v61.0);
                                        let v65 = C::ty_scalar_float(ctx, v64);
                                        if let Some(v66) = v65 {
                                            let v67 = &C::fp_cond_code(ctx, v60);
                                            let v68 = &constructor_scalar_size(ctx, v66);
                                            let v69 = C::put_in_reg(ctx, v61.0);
                                            let v70 = C::put_in_reg(ctx, v61.1);
                                            let v71 = &constructor_fpu_cmp(ctx, v68, v69, v70);
                                            let v72 = C::branch_target(ctx, v44.0);
                                            let v73 = C::branch_target(ctx, v44.1);
                                            let v74 = C::cond_br_cond(ctx, v67);
                                            let v75 = &constructor_cond_br(ctx, v72, v73, v74);
                                            let v76 = &constructor_with_flags_side_effect(ctx, v71, v75);
                                            let v77 = constructor_emit_side_effect(ctx, v76);
                                            let v78 = Some(v77);
                                            // Rule at src\isa\aarch64\lower.isle line 3114.
                                            return v78;
                                        }
                                    }
                                }
                                &InstructionData::IntCompare {
                                    opcode: ref v33,
                                    args: ref v34,
                                    cond: ref v35,
                                } => {
                                    if let &Opcode::Icmp = v33 {
                                        let v36 = C::unpack_value_array_2(ctx, v34);
                                        let v39 = C::value_type(ctx, v36.0);
                                        let v47 = &constructor_lower_icmp_into_flags(ctx, v35, v36.0, v36.1, v39);
                                        let v48 = &constructor_flags_and_cc_cc(ctx, v47);
                                        let v49 = &C::cond_code(ctx, v48);
                                        let v50 = &constructor_flags_and_cc_flags(ctx, v47);
                                        let v51 = C::branch_target(ctx, v44.0);
                                        let v52 = C::branch_target(ctx, v44.1);
                                        let v53 = C::cond_br_cond(ctx, v49);
                                        let v54 = &constructor_cond_br(ctx, v51, v52, v53);
                                        let v55 = &constructor_with_flags_side_effect(ctx, v50, v54);
                                        let v56 = constructor_emit_side_effect(ctx, v55);
                                        let v57 = Some(v56);
                                        // Rule at src\isa\aarch64\lower.isle line 3104.
                                        return v57;
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    let v79 = C::value_type(ctx, v26);
                    if v79 == I128 {
                        let v80 = &constructor_flags_to_producesflags(ctx, v26);
                        let v81 = C::put_in_regs(ctx, v26);
                        let v83 = C::value_regs_get(ctx, v81, 0x0_usize);
                        let v85 = C::value_regs_get(ctx, v81, 0x1_usize);
                        let v87 = constructor_orr(ctx, I64, v83, v85);
                        let v72 = C::branch_target(ctx, v44.0);
                        let v73 = C::branch_target(ctx, v44.1);
                        let v88 = &constructor_operand_size(ctx, I64);
                        let v89 = C::cond_br_not_zero(ctx, v87, v88);
                        let v90 = &constructor_cond_br(ctx, v72, v73, v89);
                        let v91 = &constructor_with_flags_side_effect(ctx, v80, v90);
                        let v92 = constructor_emit_side_effect(ctx, v91);
                        let v93 = Some(v92);
                        // Rule at src\isa\aarch64\lower.isle line 3122.
                        return v93;
                    }
                    let v94 = C::ty_int_ref_scalar_64(ctx, v79);
                    if let Some(v95) = v94 {
                        let v80 = &constructor_flags_to_producesflags(ctx, v26);
                        let v96 = constructor_put_in_reg_zext64(ctx, v26);
                        let v97 = C::branch_target(ctx, v44.0);
                        let v98 = C::branch_target(ctx, v44.1);
                        let v99 = &constructor_operand_size(ctx, I64);
                        let v100 = C::cond_br_not_zero(ctx, v96, v99);
                        let v101 = &constructor_cond_br(ctx, v97, v98, v100);
                        let v102 = &constructor_with_flags_side_effect(ctx, v80, v101);
                        let v103 = constructor_emit_side_effect(ctx, v102);
                        let v104 = Some(v103);
                        // Rule at src\isa\aarch64\lower.isle line 3131.
                        return v104;
                    }
                }
            }
        }
        &InstructionData::Jump {
            opcode: ref v163,
            destination: v164,
        } => {
            if let &Opcode::Jump = v163 {
                let v165 = C::single_target(ctx, arg1);
                if let Some(v166) = v165 {
                    let v167 = C::branch_target(ctx, v166);
                    let v168 = &constructor_aarch64_jump(ctx, v167);
                    let v169 = constructor_emit_side_effect(ctx, v168);
                    let v170 = Some(v169);
                    // Rule at src\isa\aarch64\lower.isle line 3159.
                    return v170;
                }
            }
        }
        &InstructionData::TryCall {
            opcode: ref v2,
            args: v3,
            func_ref: v4,
            exception: v5,
        } => {
            if let &Opcode::TryCall = v2 {
                let v7 = C::func_ref_data(ctx, v4);
                let v6 = C::value_list_slice(ctx, v3);
                let v12 = C::gen_try_call(ctx, v7.0, v7.1, v7.2, v5, v6, arg1);
                let v13 = Some(v12);
                // Rule at src\isa\aarch64\lower.isle line 2513.
                return v13;
            }
        }
        &InstructionData::TryCallIndirect {
            opcode: ref v14,
            args: v15,
            exception: v16,
        } => {
            if let &Opcode::TryCallIndirect = v14 {
                let v17 = C::value_list_slice(ctx, v15);
                let v18 = C::value_slice_unwrap(ctx, v17);
                if let Some(v19) = v18 {
                    let v22 = C::exception_sig(ctx, v16);
                    let v23 = C::gen_try_call_indirect(ctx, v22, v19.0, v16, v19.1, arg1);
                    let v24 = Some(v23);
                    // Rule at src\isa\aarch64\lower.isle line 2516.
                    return v24;
                }
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term is_fneg.
pub fn constructor_is_fneg<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> IsFneg {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = &C::inst_data_value(ctx, v2);
        if let &InstructionData::Unary {
            opcode: ref v4,
            arg: v5,
        } = v3 {
            if let &Opcode::Fneg = v4 {
                let v7 = IsFneg::Result {
                    negate: 0x1_u64,
                    value: v5,
                };
                // Rule at src\isa\aarch64\lower.isle line 540.
                return v7;
            }
        }
    }
    let v9 = IsFneg::Result {
        negate: 0x0_u64,
        value: arg0,
    };
    // Rule at src\isa\aarch64\lower.isle line 541.
    return v9;
}

// Generated as internal constructor for term is_fneg_neg.
pub fn constructor_is_fneg_neg<C: Context>(
    ctx: &mut C,
    arg0: &IsFneg,
) -> u64 {
    if let &IsFneg::Result {
        negate: v1,
        value: v2,
    } = arg0 {
        // Rule at src\isa\aarch64\lower.isle line 544.
        return v1;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "is_fneg_neg", "src\\isa\\aarch64\\lower.isle line 543")
}

// Generated as internal constructor for term get_fneg_value.
pub fn constructor_get_fneg_value<C: Context>(
    ctx: &mut C,
    arg0: &IsFneg,
) -> Value {
    if let &IsFneg::Result {
        negate: v1,
        value: v2,
    } = arg0 {
        // Rule at src\isa\aarch64\lower.isle line 547.
        return v2;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "get_fneg_value", "src\\isa\\aarch64\\lower.isle line 546")
}

// Generated as internal constructor for term fmadd_series.
pub fn constructor_fmadd_series<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: u64,
    arg2: u64,
    arg3: Value,
    arg4: Value,
    arg5: Value,
) -> InstOutput {
    let v1 = C::ty_scalar_float(ctx, arg0);
    if let Some(v2) = v1 {
        match arg1 {
            0x0_u64 => {
                match arg2 {
                    0x0_u64 => {
                        let v9 = &constructor_scalar_size(ctx, v2);
                        let v10 = C::put_in_reg(ctx, arg3);
                        let v11 = C::put_in_reg(ctx, arg4);
                        let v12 = C::put_in_reg(ctx, arg5);
                        let v13 = constructor_fpu_rrrr(ctx, &FPUOp3::MAdd, v9, v10, v11, v12);
                        let v14 = constructor_output_reg(ctx, v13);
                        // Rule at src\isa\aarch64\lower.isle line 551.
                        return v14;
                    }
                    0x1_u64 => {
                        let v9 = &constructor_scalar_size(ctx, v2);
                        let v10 = C::put_in_reg(ctx, arg3);
                        let v11 = C::put_in_reg(ctx, arg4);
                        let v12 = C::put_in_reg(ctx, arg5);
                        let v22 = constructor_fpu_rrrr(ctx, &FPUOp3::NMSub, v9, v10, v11, v12);
                        let v23 = constructor_output_reg(ctx, v22);
                        // Rule at src\isa\aarch64\lower.isle line 557.
                        return v23;
                    }
                    _ => {}
                }
            }
            0x1_u64 => {
                match arg2 {
                    0x0_u64 => {
                        let v9 = &constructor_scalar_size(ctx, v2);
                        let v10 = C::put_in_reg(ctx, arg3);
                        let v11 = C::put_in_reg(ctx, arg4);
                        let v12 = C::put_in_reg(ctx, arg5);
                        let v16 = constructor_fpu_rrrr(ctx, &FPUOp3::MSub, v9, v10, v11, v12);
                        let v17 = constructor_output_reg(ctx, v16);
                        // Rule at src\isa\aarch64\lower.isle line 553.
                        return v17;
                    }
                    0x1_u64 => {
                        let v9 = &constructor_scalar_size(ctx, v2);
                        let v10 = C::put_in_reg(ctx, arg3);
                        let v11 = C::put_in_reg(ctx, arg4);
                        let v12 = C::put_in_reg(ctx, arg5);
                        let v19 = constructor_fpu_rrrr(ctx, &FPUOp3::NMAdd, v9, v10, v11, v12);
                        let v20 = constructor_output_reg(ctx, v19);
                        // Rule at src\isa\aarch64\lower.isle line 555.
                        return v20;
                    }
                    _ => {}
                }
            }
            _ => {}
        }
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "fmadd_series", "src\\isa\\aarch64\\lower.isle line 549")
}

// Generated as internal constructor for term lower_fmla.
pub fn constructor_lower_fmla<C: Context>(
    ctx: &mut C,
    arg0: &VecALUModOp,
    arg1: Value,
    arg2: Value,
    arg3: Value,
    arg4: &VectorSize,
) -> Reg {
    let v18 = C::def_inst(ctx, arg2);
    if let Some(v19) = v18 {
        let v20 = &C::inst_data_value(ctx, v19);
        if let &InstructionData::Unary {
            opcode: ref v21,
            arg: v22,
        } = v20 {
            if let &Opcode::Fneg = v21 {
                let v85 = &constructor_neg_fmla(ctx, arg0);
                let v87 = constructor_lower_fmla(ctx, v85, arg1, v22, arg3, arg4);
                // Rule at src\isa\aarch64\lower.isle line 613.
                return v87;
            }
        }
    }
    let v9 = C::def_inst(ctx, arg1);
    if let Some(v10) = v9 {
        let v11 = &C::inst_data_value(ctx, v10);
        if let &InstructionData::Unary {
            opcode: ref v12,
            arg: v13,
        } = v11 {
            if let &Opcode::Fneg = v12 {
                let v85 = &constructor_neg_fmla(ctx, arg0);
                let v86 = constructor_lower_fmla(ctx, v85, v13, arg2, arg3, arg4);
                // Rule at src\isa\aarch64\lower.isle line 611.
                return v86;
            }
        }
    }
    match arg4 {
        &VectorSize::Size32x4 => {
            if let Some(v19) = v18 {
                let v20 = &C::inst_data_value(ctx, v19);
                if let &InstructionData::LoadNoOffset {
                    opcode: ref v48,
                    arg: v49,
                    flags: v50,
                } = v20 {
                    if let &Opcode::Bitcast = v48 {
                        let v51 = C::def_inst(ctx, v49);
                        if let Some(v52) = v51 {
                            let v53 = &C::inst_data_value(ctx, v52);
                            if let &InstructionData::Shuffle {
                                opcode: ref v54,
                                args: ref v55,
                                imm: v56,
                            } = v53 {
                                if let &Opcode::Shuffle = v54 {
                                    let v60 = C::shuffle32_from_imm(ctx, v56);
                                    if let Some(v61) = v60 {
                                        let v66 = C::u8_as_u64(ctx, v61.0);
                                        let v67 = C::u64_lt(ctx, v66, 0x4_u64);
                                        if v67 == true {
                                            let v57 = C::unpack_value_array_2(ctx, v55);
                                            if v57.0 == v57.1 {
                                                if v61.0 == v61.1 {
                                                    if v61.0 == v61.2 {
                                                        if v61.0 == v61.3 {
                                                            let v5 = C::put_in_reg(ctx, arg3);
                                                            let v6 = C::put_in_reg(ctx, arg1);
                                                            let v68 = C::put_in_reg(ctx, v57.0);
                                                            let v69 = constructor_vec_fmla_elem(ctx, arg0, v5, v6, v68, arg4, v61.0);
                                                            // Rule at src\isa\aarch64\lower.isle line 595.
                                                            return v69;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if let Some(v10) = v9 {
                let v11 = &C::inst_data_value(ctx, v10);
                if let &InstructionData::LoadNoOffset {
                    opcode: ref v25,
                    arg: v26,
                    flags: v27,
                } = v11 {
                    if let &Opcode::Bitcast = v25 {
                        let v28 = C::def_inst(ctx, v26);
                        if let Some(v29) = v28 {
                            let v30 = &C::inst_data_value(ctx, v29);
                            if let &InstructionData::Shuffle {
                                opcode: ref v31,
                                args: ref v32,
                                imm: v33,
                            } = v30 {
                                if let &Opcode::Shuffle = v31 {
                                    let v37 = C::shuffle32_from_imm(ctx, v33);
                                    if let Some(v38) = v37 {
                                        let v43 = C::u8_as_u64(ctx, v38.0);
                                        let v45 = C::u64_lt(ctx, v43, 0x4_u64);
                                        if v45 == true {
                                            let v34 = C::unpack_value_array_2(ctx, v32);
                                            if v34.0 == v34.1 {
                                                if v38.0 == v38.1 {
                                                    if v38.0 == v38.2 {
                                                        if v38.0 == v38.3 {
                                                            let v5 = C::put_in_reg(ctx, arg3);
                                                            let v14 = C::put_in_reg(ctx, arg2);
                                                            let v46 = C::put_in_reg(ctx, v34.0);
                                                            let v47 = constructor_vec_fmla_elem(ctx, arg0, v5, v14, v46, arg4, v38.0);
                                                            // Rule at src\isa\aarch64\lower.isle line 592.
                                                            return v47;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        &VectorSize::Size64x2 => {
            if let Some(v19) = v18 {
                let v20 = &C::inst_data_value(ctx, v19);
                if let &InstructionData::LoadNoOffset {
                    opcode: ref v48,
                    arg: v49,
                    flags: v50,
                } = v20 {
                    if let &Opcode::Bitcast = v48 {
                        let v51 = C::def_inst(ctx, v49);
                        if let Some(v52) = v51 {
                            let v53 = &C::inst_data_value(ctx, v52);
                            if let &InstructionData::Shuffle {
                                opcode: ref v54,
                                args: ref v55,
                                imm: v56,
                            } = v53 {
                                if let &Opcode::Shuffle = v54 {
                                    let v78 = C::shuffle64_from_imm(ctx, v56);
                                    if let Some(v79) = v78 {
                                        let v82 = C::u8_as_u64(ctx, v79.0);
                                        let v83 = C::u64_lt(ctx, v82, 0x2_u64);
                                        if v83 == true {
                                            let v57 = C::unpack_value_array_2(ctx, v55);
                                            if v57.0 == v57.1 {
                                                if v79.0 == v79.1 {
                                                    let v5 = C::put_in_reg(ctx, arg3);
                                                    let v6 = C::put_in_reg(ctx, arg1);
                                                    let v68 = C::put_in_reg(ctx, v57.0);
                                                    let v84 = constructor_vec_fmla_elem(ctx, arg0, v5, v6, v68, arg4, v79.0);
                                                    // Rule at src\isa\aarch64\lower.isle line 601.
                                                    return v84;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if let Some(v10) = v9 {
                let v11 = &C::inst_data_value(ctx, v10);
                if let &InstructionData::LoadNoOffset {
                    opcode: ref v25,
                    arg: v26,
                    flags: v27,
                } = v11 {
                    if let &Opcode::Bitcast = v25 {
                        let v28 = C::def_inst(ctx, v26);
                        if let Some(v29) = v28 {
                            let v30 = &C::inst_data_value(ctx, v29);
                            if let &InstructionData::Shuffle {
                                opcode: ref v31,
                                args: ref v32,
                                imm: v33,
                            } = v30 {
                                if let &Opcode::Shuffle = v31 {
                                    let v70 = C::shuffle64_from_imm(ctx, v33);
                                    if let Some(v71) = v70 {
                                        let v74 = C::u8_as_u64(ctx, v71.0);
                                        let v76 = C::u64_lt(ctx, v74, 0x2_u64);
                                        if v76 == true {
                                            let v34 = C::unpack_value_array_2(ctx, v32);
                                            if v34.0 == v34.1 {
                                                if v71.0 == v71.1 {
                                                    let v5 = C::put_in_reg(ctx, arg3);
                                                    let v14 = C::put_in_reg(ctx, arg2);
                                                    let v46 = C::put_in_reg(ctx, v34.0);
                                                    let v77 = constructor_vec_fmla_elem(ctx, arg0, v5, v14, v46, arg4, v71.0);
                                                    // Rule at src\isa\aarch64\lower.isle line 598.
                                                    return v77;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        _ => {}
    }
    if let Some(v19) = v18 {
        let v20 = &C::inst_data_value(ctx, v19);
        if let &InstructionData::Unary {
            opcode: ref v21,
            arg: v22,
        } = v20 {
            if let &Opcode::Splat = v21 {
                let v5 = C::put_in_reg(ctx, arg3);
                let v6 = C::put_in_reg(ctx, arg1);
                let v23 = C::put_in_reg(ctx, v22);
                let v24 = constructor_vec_fmla_elem(ctx, arg0, v5, v6, v23, arg4, 0x0_u8);
                // Rule at src\isa\aarch64\lower.isle line 582.
                return v24;
            }
        }
    }
    if let Some(v10) = v9 {
        let v11 = &C::inst_data_value(ctx, v10);
        if let &InstructionData::Unary {
            opcode: ref v12,
            arg: v13,
        } = v11 {
            if let &Opcode::Splat = v12 {
                let v5 = C::put_in_reg(ctx, arg3);
                let v14 = C::put_in_reg(ctx, arg2);
                let v15 = C::put_in_reg(ctx, v13);
                let v17 = constructor_vec_fmla_elem(ctx, arg0, v5, v14, v15, arg4, 0x0_u8);
                // Rule at src\isa\aarch64\lower.isle line 580.
                return v17;
            }
        }
    }
    let v5 = C::put_in_reg(ctx, arg3);
    let v6 = C::put_in_reg(ctx, arg1);
    let v7 = C::put_in_reg(ctx, arg2);
    let v8 = constructor_vec_rrr_mod(ctx, arg0, v5, v6, v7, arg4);
    // Rule at src\isa\aarch64\lower.isle line 575.
    return v8;
}

// Generated as internal constructor for term neg_fmla.
pub fn constructor_neg_fmla<C: Context>(
    ctx: &mut C,
    arg0: &VecALUModOp,
) -> VecALUModOp {
    match arg0 {
        &VecALUModOp::Fmla => {
            // Rule at src\isa\aarch64\lower.isle line 617.
            return VecALUModOp::Fmls;
        }
        &VecALUModOp::Fmls => {
            // Rule at src\isa\aarch64\lower.isle line 618.
            return VecALUModOp::Fmla;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "neg_fmla", "src\\isa\\aarch64\\lower.isle line 616")
}

// Generated as internal constructor for term put_nonzero_in_reg.
pub fn constructor_put_nonzero_in_reg<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: &ExtType,
    arg2: Type,
) -> Reg {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = &C::inst_data_value(ctx, v2);
        if let &InstructionData::UnaryImm {
            opcode: ref v4,
            imm: v5,
        } = v3 {
            if let &Opcode::Iconst = v4 {
                let v6 = C::nonzero_u64_from_imm64(ctx, v5);
                if let Some(v7) = v6 {
                    match arg1 {
                        &ExtType::Signed => {
                            let v13 = constructor_imm(ctx, arg2, &ImmExtend::Sign, v7);
                            // Rule at src\isa\aarch64\lower.isle line 1052.
                            return v13;
                        }
                        &ExtType::Unsigned => {
                            let v11 = constructor_imm(ctx, arg2, &ImmExtend::Zero, v7);
                            // Rule at src\isa\aarch64\lower.isle line 1048.
                            return v11;
                        }
                        _ => {}
                    }
                }
            }
        }
    }
    if arg2 == I64 {
        let v14 = C::put_in_reg(ctx, arg0);
        let v16 = &constructor_operand_size(ctx, I64);
        let v17 = constructor_trap_if_zero_divisor(ctx, v14, v16);
        // Rule at src\isa\aarch64\lower.isle line 1055.
        return v17;
    }
    match arg1 {
        &ExtType::Signed => {
            let v18 = C::fits_in_32(ctx, arg2);
            if let Some(v19) = v18 {
                let v20 = constructor_put_in_reg_sext32(ctx, arg0);
                let v22 = &constructor_operand_size(ctx, I32);
                let v23 = constructor_trap_if_zero_divisor(ctx, v20, v22);
                // Rule at src\isa\aarch64\lower.isle line 1058.
                return v23;
            }
        }
        &ExtType::Unsigned => {
            let v18 = C::fits_in_32(ctx, arg2);
            if let Some(v19) = v18 {
                let v24 = constructor_put_in_reg_zext32(ctx, arg0);
                let v22 = &constructor_operand_size(ctx, I32);
                let v25 = constructor_trap_if_zero_divisor(ctx, v24, v22);
                // Rule at src\isa\aarch64\lower.isle line 1061.
                return v25;
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "put_nonzero_in_reg", "src\\isa\\aarch64\\lower.isle line 1042")
}

// Generated as internal constructor for term cmp_and_choose.
pub fn constructor_cmp_and_choose<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Cond,
    arg2: bool,
    arg3: Value,
    arg4: Value,
) -> ValueRegs {
    let v14 = C::fits_in_16(ctx, arg0);
    if let Some(v15) = v14 {
        let v7 = C::put_in_reg(ctx, arg3);
        let v16 = C::ty_bits(ctx, v15);
        let v18 = constructor_extend(ctx, v7, arg2, v16, 0x20_u8);
        let v19 = C::put_in_reg(ctx, arg4);
        let v20 = constructor_extend(ctx, v19, arg2, v16, 0x20_u8);
        let v21 = &constructor_operand_size(ctx, v15);
        let v22 = &constructor_cmp(ctx, v21, v18, v20);
        let v23 = &constructor_csel(ctx, arg1, v18, v20);
        let v24 = constructor_with_flags_reg(ctx, v22, v23);
        let v25 = C::value_reg(ctx, v24);
        // Rule at src\isa\aarch64\lower.isle line 1202.
        return v25;
    }
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        let v7 = C::put_in_reg(ctx, arg3);
        let v8 = C::put_in_reg(ctx, arg4);
        let v9 = &constructor_operand_size(ctx, v2);
        let v10 = &constructor_cmp(ctx, v9, v7, v8);
        let v11 = &constructor_csel(ctx, arg1, v7, v8);
        let v12 = constructor_with_flags_reg(ctx, v10, v11);
        let v13 = C::value_reg(ctx, v12);
        // Rule at src\isa\aarch64\lower.isle line 1194.
        return v13;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "cmp_and_choose", "src\\isa\\aarch64\\lower.isle line 1193")
}

// Generated as internal constructor for term aarch64_uload.
pub fn constructor_aarch64_uload<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &AMode,
    arg2: MemFlags,
) -> Reg {
    match arg0 {
        I8 => {
            let v3 = constructor_aarch64_uload8(ctx, arg1, arg2);
            // Rule at src\isa\aarch64\lower.isle line 1283.
            return v3;
        }
        I16 => {
            let v4 = constructor_aarch64_uload16(ctx, arg1, arg2);
            // Rule at src\isa\aarch64\lower.isle line 1284.
            return v4;
        }
        I32 => {
            let v5 = constructor_aarch64_uload32(ctx, arg1, arg2);
            // Rule at src\isa\aarch64\lower.isle line 1285.
            return v5;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "aarch64_uload", "src\\isa\\aarch64\\lower.isle line 1282")
}

// Generated as internal constructor for term aarch64_sload.
pub fn constructor_aarch64_sload<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &AMode,
    arg2: MemFlags,
) -> Reg {
    match arg0 {
        I8 => {
            let v3 = constructor_aarch64_sload8(ctx, arg1, arg2);
            // Rule at src\isa\aarch64\lower.isle line 1342.
            return v3;
        }
        I16 => {
            let v4 = constructor_aarch64_sload16(ctx, arg1, arg2);
            // Rule at src\isa\aarch64\lower.isle line 1343.
            return v4;
        }
        I32 => {
            let v5 = constructor_aarch64_sload32(ctx, arg1, arg2);
            // Rule at src\isa\aarch64\lower.isle line 1344.
            return v5;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "aarch64_sload", "src\\isa\\aarch64\\lower.isle line 1341")
}

// Generated as internal constructor for term lower_shl128.
pub fn constructor_lower_shl128<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: Reg,
) -> ValueRegs {
    let v3 = C::value_regs_get(ctx, arg0, 0x0_usize);
    let v5 = C::value_regs_get(ctx, arg0, 0x1_usize);
    let v7 = constructor_lsl(ctx, I64, v3, arg1);
    let v8 = constructor_lsl(ctx, I64, v5, arg1);
    let v10 = C::zero_reg(ctx);
    let v11 = constructor_orr_not(ctx, I32, v10, arg1);
    let v13 = C::imm_shift_from_u8(ctx, 0x1_u8);
    let v14 = constructor_lsr_imm(ctx, I64, v3, v13);
    let v15 = constructor_lsr(ctx, I64, v14, v11);
    let v16 = constructor_orr(ctx, I64, v8, v15);
    let v18 = C::u64_into_imm_logic(ctx, I64, 0x40_u64);
    let v19 = &constructor_tst_imm(ctx, I64, arg1, v18);
    let v21 = C::zero_reg(ctx);
    let v22 = &constructor_csel(ctx, &Cond::Ne, v21, v7);
    let v23 = &constructor_csel(ctx, &Cond::Ne, v7, v16);
    let v24 = &constructor_consumes_flags_concat(ctx, v22, v23);
    let v25 = constructor_with_flags(ctx, v19, v24);
    // Rule at src\isa\aarch64\lower.isle line 1494.
    return v25;
}

// Generated as internal constructor for term do_shift.
pub fn constructor_do_shift<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: Value,
) -> Reg {
    let v16 = C::def_inst(ctx, arg3);
    if let Some(v17) = v16 {
        let v18 = &C::inst_data_value(ctx, v17);
        if let &InstructionData::UnaryImm {
            opcode: ref v19,
            imm: v20,
        } = v18 {
            if let &Opcode::Iconst = v19 {
                let v21 = C::imm_shift_from_imm64(ctx, arg1, v20);
                if let Some(v22) = v21 {
                    let v23 = constructor_alu_rr_imm_shift(ctx, arg0, arg1, arg2, v22);
                    // Rule at src\isa\aarch64\lower.isle line 1597.
                    return v23;
                }
            }
        }
    }
    match arg1 {
        I32 => {
            let v6 = C::put_in_regs(ctx, arg3);
            let v8 = C::value_regs_get(ctx, v6, 0x0_usize);
            let v13 = constructor_alu_rrr(ctx, arg0, I32, arg2, v8);
            // Rule at src\isa\aarch64\lower.isle line 1588.
            return v13;
        }
        I64 => {
            let v6 = C::put_in_regs(ctx, arg3);
            let v8 = C::value_regs_get(ctx, v6, 0x0_usize);
            let v15 = constructor_alu_rrr(ctx, arg0, I64, arg2, v8);
            // Rule at src\isa\aarch64\lower.isle line 1589.
            return v15;
        }
        _ => {}
    }
    let v2 = C::fits_in_16(ctx, arg1);
    if let Some(v3) = v2 {
        let v6 = C::put_in_regs(ctx, arg3);
        let v8 = C::value_regs_get(ctx, v6, 0x0_usize);
        let v10 = C::shift_mask(ctx, v3);
        let v11 = constructor_and_imm(ctx, I32, v8, v10);
        let v12 = constructor_alu_rrr(ctx, arg0, I32, arg2, v11);
        // Rule at src\isa\aarch64\lower.isle line 1577.
        return v12;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "do_shift", "src\\isa\\aarch64\\lower.isle line 1566")
}

// Generated as internal constructor for term lower_ushr128.
pub fn constructor_lower_ushr128<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: Reg,
) -> ValueRegs {
    let v3 = C::value_regs_get(ctx, arg0, 0x0_usize);
    let v5 = C::value_regs_get(ctx, arg0, 0x1_usize);
    let v7 = constructor_lsr(ctx, I64, v3, arg1);
    let v8 = constructor_lsr(ctx, I64, v5, arg1);
    let v10 = C::zero_reg(ctx);
    let v11 = constructor_orr_not(ctx, I32, v10, arg1);
    let v13 = C::imm_shift_from_u8(ctx, 0x1_u8);
    let v14 = constructor_lsl_imm(ctx, I64, v5, v13);
    let v15 = constructor_lsl(ctx, I64, v14, v11);
    let v16 = constructor_orr(ctx, I64, v7, v15);
    let v18 = C::u64_into_imm_logic(ctx, I64, 0x40_u64);
    let v19 = &constructor_tst_imm(ctx, I64, arg1, v18);
    let v21 = &constructor_csel(ctx, &Cond::Ne, v8, v16);
    let v22 = C::zero_reg(ctx);
    let v23 = &constructor_csel(ctx, &Cond::Ne, v22, v8);
    let v24 = &constructor_consumes_flags_concat(ctx, v21, v23);
    let v25 = constructor_with_flags(ctx, v19, v24);
    // Rule at src\isa\aarch64\lower.isle line 1641.
    return v25;
}

// Generated as internal constructor for term lower_sshr128.
pub fn constructor_lower_sshr128<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: Reg,
) -> ValueRegs {
    let v3 = C::value_regs_get(ctx, arg0, 0x0_usize);
    let v5 = C::value_regs_get(ctx, arg0, 0x1_usize);
    let v7 = constructor_lsr(ctx, I64, v3, arg1);
    let v8 = constructor_asr(ctx, I64, v5, arg1);
    let v10 = C::zero_reg(ctx);
    let v11 = constructor_orr_not(ctx, I32, v10, arg1);
    let v13 = C::imm_shift_from_u8(ctx, 0x1_u8);
    let v14 = constructor_lsl_imm(ctx, I64, v5, v13);
    let v15 = constructor_lsl(ctx, I64, v14, v11);
    let v17 = C::imm_shift_from_u8(ctx, 0x3f_u8);
    let v18 = constructor_asr_imm(ctx, I64, v5, v17);
    let v19 = constructor_orr(ctx, I64, v7, v15);
    let v21 = C::u64_into_imm_logic(ctx, I64, 0x40_u64);
    let v22 = &constructor_tst_imm(ctx, I64, arg1, v21);
    let v24 = &constructor_csel(ctx, &Cond::Ne, v8, v19);
    let v25 = &constructor_csel(ctx, &Cond::Ne, v18, v8);
    let v26 = &constructor_consumes_flags_concat(ctx, v24, v25);
    let v27 = constructor_with_flags(ctx, v22, v26);
    // Rule at src\isa\aarch64\lower.isle line 1700.
    return v27;
}

// Generated as internal constructor for term small_rotr.
pub fn constructor_small_rotr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v4 = C::rotr_mask(ctx, arg0);
    let v5 = constructor_and_imm(ctx, I32, arg2, v4);
    let v6 = C::ty_bits(ctx, arg0);
    let v7 = C::u8_into_imm12(ctx, v6);
    let v8 = constructor_sub_imm(ctx, I32, v5, v7);
    let v9 = C::zero_reg(ctx);
    let v10 = constructor_sub(ctx, I32, v9, v8);
    let v11 = constructor_lsr(ctx, I32, arg1, v5);
    let v12 = constructor_lsl(ctx, I32, arg1, v10);
    let v13 = constructor_orr(ctx, I32, v12, v11);
    // Rule at src\isa\aarch64\lower.isle line 1841.
    return v13;
}

// Generated as internal constructor for term small_rotr_imm.
pub fn constructor_small_rotr_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: ImmShift,
) -> Reg {
    let v4 = constructor_lsr_imm(ctx, I32, arg1, arg2);
    let v5 = C::rotr_opposite_amount(ctx, arg0, arg2);
    let v6 = constructor_lsl_imm(ctx, I32, arg1, v5);
    let v7 = constructor_orr(ctx, I32, v6, v4);
    // Rule at src\isa\aarch64\lower.isle line 1878.
    return v7;
}

// Generated as internal constructor for term lower_clz128.
pub fn constructor_lower_clz128<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
) -> ValueRegs {
    let v3 = C::value_regs_get(ctx, arg0, 0x1_usize);
    let v4 = constructor_a64_clz(ctx, I64, v3);
    let v6 = C::value_regs_get(ctx, arg0, 0x0_usize);
    let v7 = constructor_a64_clz(ctx, I64, v6);
    let v9 = C::imm_shift_from_u8(ctx, 0x6_u8);
    let v10 = constructor_lsr_imm(ctx, I64, v4, v9);
    let v11 = constructor_madd(ctx, I64, v7, v10, v4);
    let v14 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x0_u64);
    let v15 = C::value_regs(ctx, v11, v14);
    // Rule at src\isa\aarch64\lower.isle line 1946.
    return v15;
}

// Generated as internal constructor for term put_in_reg_ext32.
pub fn constructor_put_in_reg_ext32<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: &ArgumentExtension,
) -> Reg {
    match arg1 {
        &ArgumentExtension::Uext => {
            let v3 = constructor_put_in_reg_zext32(ctx, arg0);
            // Rule at src\isa\aarch64\lower.isle line 2850.
            return v3;
        }
        &ArgumentExtension::Sext => {
            let v2 = constructor_put_in_reg_sext32(ctx, arg0);
            // Rule at src\isa\aarch64\lower.isle line 2848.
            return v2;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "put_in_reg_ext32", "src\\isa\\aarch64\\lower.isle line 2847")
}

// Generated as internal constructor for term overflow_op_small.
pub fn constructor_overflow_op_small<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: &ArgumentExtension,
    arg4: &ALUOp,
) -> InstOutput {
    let v5 = &constructor_lower_extend_op(ctx, arg0, arg3);
    let v6 = constructor_put_in_reg_ext32(ctx, arg1, arg3);
    let v7 = C::put_in_reg(ctx, arg2);
    let v8 = constructor_alu_rrr_extend(ctx, arg4, arg0, v6, v7, v5);
    let v10 = &constructor_cmp_extend(ctx, &OperandSize::Size32, v8, v8, v5);
    let v12 = &constructor_cset(ctx, &Cond::Ne);
    let v13 = constructor_with_flags_reg(ctx, v10, v12);
    let v14 = C::value_reg(ctx, v8);
    let v15 = C::value_reg(ctx, v13);
    let v16 = C::output_pair(ctx, v14, v15);
    // Rule at src\isa\aarch64\lower.isle line 2856.
    return v16;
}

// Generated as internal constructor for term overflow_op_normal.
pub fn constructor_overflow_op_normal<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: &ALUOp,
    arg4: &Cond,
) -> InstOutput {
    let v5 = C::put_in_reg(ctx, arg1);
    let v6 = C::put_in_reg(ctx, arg2);
    let v7 = &constructor_alu_rrr_with_flags_paired(ctx, arg0, v5, v6, arg3);
    let v8 = &constructor_cset_paired(ctx, arg4);
    let v9 = constructor_with_flags(ctx, v7, v8);
    let v11 = C::value_regs_get(ctx, v9, 0x0_usize);
    let v12 = C::value_reg(ctx, v11);
    let v14 = C::value_regs_get(ctx, v9, 0x1_usize);
    let v15 = C::value_reg(ctx, v14);
    let v16 = C::output_pair(ctx, v12, v15);
    // Rule at src\isa\aarch64\lower.isle line 2885.
    return v16;
}

// Generated as internal constructor for term overflow_op_128.
pub fn constructor_overflow_op_128<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: Value,
    arg2: &ALUOp,
    arg3: &ALUOp,
    arg4: &Cond,
) -> InstOutput {
    let v5 = C::put_in_regs(ctx, arg0);
    let v7 = C::value_regs_get(ctx, v5, 0x0_usize);
    let v9 = C::value_regs_get(ctx, v5, 0x1_usize);
    let v10 = C::put_in_regs(ctx, arg1);
    let v11 = C::value_regs_get(ctx, v10, 0x0_usize);
    let v12 = C::value_regs_get(ctx, v10, 0x1_usize);
    let v14 = &constructor_alu_rrr_with_flags_paired(ctx, I64, v7, v11, arg2);
    let v15 = &constructor_alu_rrr_with_flags_chained(ctx, I64, v9, v12, arg3);
    let v16 = &constructor_cset_paired(ctx, arg4);
    let v17 = &constructor_with_flags_chained(ctx, v14, v15, v16);
    let v18 = constructor_multi_reg_to_pair_and_single(ctx, v17);
    // Rule at src\isa\aarch64\lower.isle line 2896.
    return v18;
}
