// GENERATED BY ISLE. DO NOT EDIT!
//
// Generated automatically from the instruction-selection DSL code in:
// - src\prelude.isle
// - src\prelude_opt.isle
// - src\opts\arithmetic.isle
// - src\opts\bitops.isle
// - src\opts\cprop.isle
// - src\opts\extends.isle
// - src\opts\icmp.isle
// - src\opts\remat.isle
// - src\opts\selects.isle
// - src\opts\shifts.isle
// - src\opts\skeleton.isle
// - src\opts\spaceship.isle
// - src\opts\spectre.isle
// - src\opts\vector.isle
// - <OUT_DIR>\clif_opt.isle

use super::*;  // Pulls in all external types.
use std::marker::PhantomData;

/// Context during lowering: an implementation of this trait
/// must be provided with all external constructors and extractors.
/// A mutable borrow is passed along through all lowering logic.
pub trait Context {
    fn unit(&mut self, ) -> Unit;
    fn def_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn value_type(&mut self, arg0: Value) -> Type;
    fn u32_nonnegative(&mut self, arg0: u32) -> Option<u32>;
    fn offset32(&mut self, arg0: Offset32) -> i32;
    fn u32_lteq(&mut self, arg0: u32, arg1: u32) -> Option<Unit>;
    fn u8_lteq(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn u8_lt(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn u8_as_i8(&mut self, arg0: u8) -> i8;
    fn u8_as_u32(&mut self, arg0: u8) -> u32;
    fn u8_as_u64(&mut self, arg0: u8) -> u64;
    fn u16_as_i16(&mut self, arg0: u16) -> i16;
    fn u16_as_u32(&mut self, arg0: u16) -> u32;
    fn u16_as_u64(&mut self, arg0: u16) -> u64;
    fn u64_as_u8(&mut self, arg0: u64) -> u8;
    fn u64_as_u16(&mut self, arg0: u64) -> u16;
    fn u64_as_i64(&mut self, arg0: u64) -> i64;
    fn u8_try_from_u64(&mut self, arg0: u64) -> Option<u8>;
    fn u8_try_from_u16(&mut self, arg0: u16) -> Option<u8>;
    fn u8_try_from_i32(&mut self, arg0: i32) -> Option<u8>;
    fn u16_try_from_u64(&mut self, arg0: u64) -> Option<u16>;
    fn u32_try_from_u64(&mut self, arg0: u64) -> Option<u32>;
    fn u64_try_from_i64(&mut self, arg0: i64) -> Option<u64>;
    fn i8_try_from_u64(&mut self, arg0: u64) -> Option<i8>;
    fn i16_try_from_u64(&mut self, arg0: u64) -> Option<i16>;
    fn i32_try_from_u64(&mut self, arg0: u64) -> Option<i32>;
    fn u32_as_u64(&mut self, arg0: u32) -> u64;
    fn i32_as_i64(&mut self, arg0: i32) -> i64;
    fn i64_as_u64(&mut self, arg0: i64) -> u64;
    fn i64_neg(&mut self, arg0: i64) -> i64;
    fn i8_neg(&mut self, arg0: i8) -> i8;
    fn u128_as_u64(&mut self, arg0: u128) -> Option<u64>;
    fn u64_as_u32(&mut self, arg0: u64) -> Option<u32>;
    fn u32_as_u16(&mut self, arg0: u32) -> Option<u16>;
    fn i32_as_i8(&mut self, arg0: i32) -> Option<i8>;
    fn u64_as_i32(&mut self, arg0: u64) -> i32;
    fn u8_and(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_shl(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_shr(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_sub(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u32_add(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_sub(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_and(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_shl(&mut self, arg0: u32, arg1: u32) -> u32;
    fn s32_add_fallible(&mut self, arg0: i32, arg1: i32) -> Option<i32>;
    fn checked_add_with_type(&mut self, arg0: Type, arg1: u64, arg2: u64) -> Option<u64>;
    fn add_overflows_with_type(&mut self, arg0: Type, arg1: u64, arg2: u64) -> bool;
    fn u64_add(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sub(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_mul(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_udiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_and(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_or(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_xor(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_shl(&mut self, arg0: u64, arg1: u64) -> u64;
    fn imm64_sdiv(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Option<Imm64>;
    fn imm64_shl(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_ushr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_sshr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn u64_not(&mut self, arg0: u64) -> u64;
    fn u64_eq(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_le(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_lt(&mut self, arg0: u64, arg1: u64) -> bool;
    fn i64_shr(&mut self, arg0: i64, arg1: i64) -> i64;
    fn i64_ctz(&mut self, arg0: i64) -> i64;
    fn i64_sextend_u64(&mut self, arg0: Type, arg1: u64) -> i64;
    fn i64_sextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> i64;
    fn u64_uextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> u64;
    fn imm64_icmp(&mut self, arg0: Type, arg1: &IntCC, arg2: Imm64, arg3: Imm64) -> Imm64;
    fn u64_is_zero(&mut self, arg0: u64) -> bool;
    fn i64_is_zero(&mut self, arg0: i64) -> bool;
    fn u64_is_odd(&mut self, arg0: u64) -> bool;
    fn u128_replicated_u64(&mut self, arg0: u128) -> Option<u64>;
    fn u64_replicated_u32(&mut self, arg0: u64) -> Option<u64>;
    fn u32_replicated_u16(&mut self, arg0: u64) -> Option<u64>;
    fn u16_replicated_u8(&mut self, arg0: u64) -> Option<u8>;
    fn u128_low_bits(&mut self, arg0: u128) -> u64;
    fn u128_high_bits(&mut self, arg0: u128) -> u64;
    fn f16_min(&mut self, arg0: Ieee16, arg1: Ieee16) -> Option<Ieee16>;
    fn f16_max(&mut self, arg0: Ieee16, arg1: Ieee16) -> Option<Ieee16>;
    fn f16_neg(&mut self, arg0: Ieee16) -> Ieee16;
    fn f16_abs(&mut self, arg0: Ieee16) -> Ieee16;
    fn f16_copysign(&mut self, arg0: Ieee16, arg1: Ieee16) -> Ieee16;
    fn f32_add(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_sub(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_mul(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_div(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_sqrt(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_ceil(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_floor(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_trunc(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_nearest(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_min(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_max(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_neg(&mut self, arg0: Ieee32) -> Ieee32;
    fn f32_abs(&mut self, arg0: Ieee32) -> Ieee32;
    fn f32_copysign(&mut self, arg0: Ieee32, arg1: Ieee32) -> Ieee32;
    fn f64_add(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_sub(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_mul(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_div(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_sqrt(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_ceil(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_floor(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_trunc(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_nearest(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_min(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_max(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_neg(&mut self, arg0: Ieee64) -> Ieee64;
    fn f64_abs(&mut self, arg0: Ieee64) -> Ieee64;
    fn f64_copysign(&mut self, arg0: Ieee64, arg1: Ieee64) -> Ieee64;
    fn f128_min(&mut self, arg0: Ieee128, arg1: Ieee128) -> Option<Ieee128>;
    fn f128_max(&mut self, arg0: Ieee128, arg1: Ieee128) -> Option<Ieee128>;
    fn f128_neg(&mut self, arg0: Ieee128) -> Ieee128;
    fn f128_abs(&mut self, arg0: Ieee128) -> Ieee128;
    fn f128_copysign(&mut self, arg0: Ieee128, arg1: Ieee128) -> Ieee128;
    fn ty_umin(&mut self, arg0: Type) -> u64;
    fn ty_umax(&mut self, arg0: Type) -> u64;
    fn ty_smin(&mut self, arg0: Type) -> u64;
    fn ty_smax(&mut self, arg0: Type) -> u64;
    fn ty_bits(&mut self, arg0: Type) -> u8;
    fn ty_bits_u16(&mut self, arg0: Type) -> u16;
    fn ty_bits_u64(&mut self, arg0: Type) -> u64;
    fn ty_mask(&mut self, arg0: Type) -> u64;
    fn ty_lane_mask(&mut self, arg0: Type) -> u64;
    fn ty_lane_count(&mut self, arg0: Type) -> u64;
    fn ty_bytes(&mut self, arg0: Type) -> u16;
    fn lane_type(&mut self, arg0: Type) -> Type;
    fn ty_half_lanes(&mut self, arg0: Type) -> Option<Type>;
    fn ty_half_width(&mut self, arg0: Type) -> Option<Type>;
    fn ty_equal(&mut self, arg0: Type, arg1: Type) -> bool;
    fn mem_flags_trusted(&mut self, ) -> MemFlags;
    fn intcc_swap_args(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_complement(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_without_eq(&mut self, arg0: &IntCC) -> IntCC;
    fn floatcc_swap_args(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_complement(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_unordered(&mut self, arg0: &FloatCC) -> bool;
    fn fits_in_16(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn lane_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_16(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64_extract(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32_or_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_8_or_16(&mut self, arg0: Type) -> Option<Type>;
    fn ty_16_or_32(&mut self, arg0: Type) -> Option<Type>;
    fn int_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_16_to_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_float_or_vec(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_not_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_ctor(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_addr64(&mut self, arg0: Type) -> Option<Type>;
    fn not_vec32x2(&mut self, arg0: Type) -> Option<Type>;
    fn not_i64x2(&mut self, arg0: Type) -> Option<()>;
    fn u8_from_uimm8(&mut self, arg0: Uimm8) -> u8;
    fn u64_from_bool(&mut self, arg0: bool) -> u64;
    fn u64_from_imm64(&mut self, arg0: Imm64) -> u64;
    fn nonzero_u64_from_imm64(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64_power_of_two(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64(&mut self, arg0: u64) -> Imm64;
    fn imm64_masked(&mut self, arg0: Type, arg1: u64) -> Imm64;
    fn u16_from_ieee16(&mut self, arg0: Ieee16) -> u16;
    fn u32_from_ieee32(&mut self, arg0: Ieee32) -> u32;
    fn u64_from_ieee64(&mut self, arg0: Ieee64) -> u64;
    fn multi_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn ty_dyn64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn128_int(&mut self, arg0: Type) -> Option<Type>;
    fn offset32_to_i32(&mut self, arg0: Offset32) -> i32;
    fn i32_to_offset32(&mut self, arg0: i32) -> Offset32;
    fn intcc_unsigned(&mut self, arg0: &IntCC) -> IntCC;
    fn signed_cond_code(&mut self, arg0: &IntCC) -> Option<IntCC>;
    fn trap_code_division_by_zero(&mut self, ) -> TrapCode;
    fn trap_code_integer_overflow(&mut self, ) -> TrapCode;
    fn trap_code_bad_conversion_to_integer(&mut self, ) -> TrapCode;
    fn range(&mut self, arg0: usize, arg1: usize) -> Range;
    fn range_view(&mut self, arg0: Range) -> RangeView;
    type inst_data_value_etor_returns: Default + IntoContextIter<Context = Self, Output = (Type, InstructionData)>;
    fn inst_data_value_etor(&mut self, arg0: Value, returns: &mut Self::inst_data_value_etor_returns) -> ();
    fn inst_data_etor(&mut self, arg0: Inst) -> Option<InstructionData>;
    type inst_data_value_tupled_etor_returns: Default + IntoContextIter<Context = Self, Output = TypeAndInstructionData>;
    fn inst_data_value_tupled_etor(&mut self, arg0: Value, returns: &mut Self::inst_data_value_tupled_etor_returns) -> ();
    fn make_inst_ctor(&mut self, arg0: Type, arg1: &InstructionData) -> Value;
    fn make_skeleton_inst_ctor(&mut self, arg0: &InstructionData) -> Inst;
    fn value_array_2_ctor(&mut self, arg0: Value, arg1: Value) -> ValueArray2;
    fn value_array_3_ctor(&mut self, arg0: Value, arg1: Value, arg2: Value) -> ValueArray3;
    fn remat(&mut self, arg0: Value) -> Value;
    fn subsume(&mut self, arg0: Value) -> Value;
    fn iconst_sextend_etor(&mut self, arg0: TypeAndInstructionData) -> Option<(Type, i64)>;
    type sextend_maybe_etor_returns: Default + IntoContextIter<Context = Self, Output = (Type, Value)>;
    fn sextend_maybe_etor(&mut self, arg0: Value, returns: &mut Self::sextend_maybe_etor_returns) -> ();
    type uextend_maybe_etor_returns: Default + IntoContextIter<Context = Self, Output = (Type, Value)>;
    fn uextend_maybe_etor(&mut self, arg0: Value, returns: &mut Self::uextend_maybe_etor_returns) -> ();
    fn splat64(&mut self, arg0: u64) -> Constant;
    fn f32_from_uint(&mut self, arg0: u64) -> Ieee32;
    fn f64_from_uint(&mut self, arg0: u64) -> Ieee64;
    fn f32_from_sint(&mut self, arg0: i64) -> Ieee32;
    fn f64_from_sint(&mut self, arg0: i64) -> Ieee64;
    fn u64_bswap16(&mut self, arg0: u64) -> u64;
    fn u64_bswap32(&mut self, arg0: u64) -> u64;
    fn u64_bswap64(&mut self, arg0: u64) -> u64;
    fn ieee128_constant_extractor(&mut self, arg0: Constant) -> Option<Ieee128>;
    fn ieee128_constant(&mut self, arg0: Ieee128) -> Constant;
    fn unpack_value_array_2(&mut self, arg0: &ValueArray2) -> (Value, Value);
    fn pack_value_array_2(&mut self, arg0: Value, arg1: Value) -> ValueArray2;
    fn unpack_value_array_3(&mut self, arg0: &ValueArray3) -> (Value, Value, Value);
    fn pack_value_array_3(&mut self, arg0: Value, arg1: Value, arg2: Value) -> ValueArray3;
    fn unpack_block_array_2(&mut self, arg0: &BlockArray2) -> (BlockCall, BlockCall);
    fn pack_block_array_2(&mut self, arg0: BlockCall, arg1: BlockCall) -> BlockArray2;
}

pub trait ContextIter {
    type Context;
    type Output;
    fn next(&mut self, ctx: &mut Self::Context) -> Option<Self::Output>;
    fn size_hint(&self) -> (usize, Option<usize>) { (0, None) }
}

pub trait IntoContextIter {
    type Context;
    type Output;
    type IntoIter: ContextIter<Context = Self::Context, Output = Self::Output>;
    fn into_context_iter(self) -> Self::IntoIter;
}

pub trait Length {
    fn len(&self) -> usize;
}

impl<T> Length for std::vec::Vec<T> {
    fn len(&self) -> usize {
        std::vec::Vec::len(self)
    }
}

pub struct ContextIterWrapper<I, C> {
    iter: I,
    _ctx: std::marker::PhantomData<C>,
}
impl<I: Default, C> Default for ContextIterWrapper<I, C> {
    fn default() -> Self {
        ContextIterWrapper {
            iter: I::default(),
            _ctx: std::marker::PhantomData
        }
    }
}
impl<I, C> std::ops::Deref for ContextIterWrapper<I, C> {
    type Target = I;
    fn deref(&self) -> &I {
        &self.iter
    }
}
impl<I, C> std::ops::DerefMut for ContextIterWrapper<I, C> {
    fn deref_mut(&mut self) -> &mut I {
        &mut self.iter
    }
}
impl<I: Iterator, C: Context> From<I> for ContextIterWrapper<I, C> {
    fn from(iter: I) -> Self {
        Self { iter, _ctx: std::marker::PhantomData }
    }
}
impl<I: Iterator, C: Context> ContextIter for ContextIterWrapper<I, C> {
    type Context = C;
    type Output = I::Item;
    fn next(&mut self, _ctx: &mut Self::Context) -> Option<Self::Output> {
        self.iter.next()
    }
    fn size_hint(&self) -> (usize, Option<usize>) {
        self.iter.size_hint()
    }
}
impl<I: IntoIterator, C: Context> IntoContextIter for ContextIterWrapper<I, C> {
    type Context = C;
    type Output = I::Item;
    type IntoIter = ContextIterWrapper<I::IntoIter, C>;
    fn into_context_iter(self) -> Self::IntoIter {
        ContextIterWrapper {
            iter: self.iter.into_iter(),
            _ctx: std::marker::PhantomData
        }
    }
}
impl<T, E: Extend<T>, C> Extend<T> for ContextIterWrapper<E, C> {
    fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
        self.iter.extend(iter);
    }
}
impl<L: Length, C> Length for ContextIterWrapper<L, C> {
    fn len(&self) -> usize {
        self.iter.len()
    }
}
           

/// Internal type SkeletonInstSimplification: defined at src\prelude_opt.isle line 63.
#[derive(Clone, Debug)]
pub enum SkeletonInstSimplification {
    Remove,
    RemoveWithVal {
        val: Value,
    },
    Replace {
        inst: Inst,
    },
    ReplaceWithVal {
        inst: Inst,
        val: Value,
    },
}

// Generated as internal constructor for term ty_shift_mask.
pub fn constructor_ty_shift_mask<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> u64 {
    let v1 = C::lane_type(ctx, arg0);
    let v2 = C::ty_bits(ctx, v1);
    let v3 = C::u8_as_u64(ctx, v2);
    let v5 = C::u64_sub(ctx, v3, 0x1_u64);
    // Rule at src\prelude.isle line 495.
    return v5;
}

// Generated as internal constructor for term spaceship_s.
pub fn constructor_spaceship_s<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = constructor_sgt(ctx, arg0, arg1, arg2);
    let v5 = constructor_slt(ctx, arg0, arg1, arg2);
    let v6 = constructor_isub(ctx, I8, v4, v5);
    // Rule at src\prelude_opt.isle line 51.
    return v6;
}

// Generated as internal constructor for term spaceship_u.
pub fn constructor_spaceship_u<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = constructor_ugt(ctx, arg0, arg1, arg2);
    let v5 = constructor_ult(ctx, arg0, arg1, arg2);
    let v6 = constructor_isub(ctx, I8, v4, v5);
    // Rule at src\prelude_opt.isle line 54.
    return v6;
}

// Generated as internal constructor for term simplify.
pub fn constructor_simplify<C: Context>(
    ctx: &mut C,
    arg0: Value,
    returns: &mut (impl Extend<Value> + Length),
) -> () {
    let mut v1 = C::inst_data_value_etor_returns::default();
    C::inst_data_value_etor(ctx, arg0, &mut v1);
    let mut v1 = v1.into_context_iter();
    while let Some(v2) = v1.next(ctx) {
        match &v2.1 {
            &InstructionData::Binary {
                opcode: ref v5,
                args: ref v6,
            } => {
                match v5 {
                    &Opcode::Smin => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_value_etor_returns::default();
                        C::inst_data_value_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v26,
                                arg: v27,
                            } = &v11.1 {
                                if let &Opcode::Splat = v26 {
                                    if v2.0 == v11.0 {
                                        let mut v18 = C::inst_data_value_etor_returns::default();
                                        C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            if let &InstructionData::Unary {
                                                opcode: ref v29,
                                                arg: v30,
                                            } = &v19.1 {
                                                if let &Opcode::Splat = v29 {
                                                    if v2.0 == v19.0 {
                                                        let v1228 = C::lane_type(ctx, v2.0);
                                                        let v1372 = constructor_smin(ctx, v1228, v30, v27);
                                                        let v1373 = constructor_splat(ctx, v2.0, v1372);
                                                        // Rule at src\opts\vector.isle line 54.
                                                        returns.extend(Some(v1373));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Umin => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_value_etor_returns::default();
                        C::inst_data_value_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v26,
                                arg: v27,
                            } = &v11.1 {
                                if let &Opcode::Splat = v26 {
                                    if v2.0 == v11.0 {
                                        let mut v18 = C::inst_data_value_etor_returns::default();
                                        C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            if let &InstructionData::Unary {
                                                opcode: ref v29,
                                                arg: v30,
                                            } = &v19.1 {
                                                if let &Opcode::Splat = v29 {
                                                    if v2.0 == v19.0 {
                                                        let v1228 = C::lane_type(ctx, v2.0);
                                                        let v1374 = constructor_umin(ctx, v1228, v30, v27);
                                                        let v1375 = constructor_splat(ctx, v2.0, v1374);
                                                        // Rule at src\opts\vector.isle line 57.
                                                        returns.extend(Some(v1375));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Smax => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_value_etor_returns::default();
                        C::inst_data_value_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v26,
                                arg: v27,
                            } = &v11.1 {
                                if let &Opcode::Splat = v26 {
                                    if v2.0 == v11.0 {
                                        let mut v18 = C::inst_data_value_etor_returns::default();
                                        C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            if let &InstructionData::Unary {
                                                opcode: ref v29,
                                                arg: v30,
                                            } = &v19.1 {
                                                if let &Opcode::Splat = v29 {
                                                    if v2.0 == v19.0 {
                                                        let v1228 = C::lane_type(ctx, v2.0);
                                                        let v1376 = constructor_smax(ctx, v1228, v30, v27);
                                                        let v1377 = constructor_splat(ctx, v2.0, v1376);
                                                        // Rule at src\opts\vector.isle line 60.
                                                        returns.extend(Some(v1377));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Umax => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_value_etor_returns::default();
                        C::inst_data_value_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v26,
                                arg: v27,
                            } = &v11.1 {
                                if let &Opcode::Splat = v26 {
                                    if v2.0 == v11.0 {
                                        let mut v18 = C::inst_data_value_etor_returns::default();
                                        C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            if let &InstructionData::Unary {
                                                opcode: ref v29,
                                                arg: v30,
                                            } = &v19.1 {
                                                if let &Opcode::Splat = v29 {
                                                    if v2.0 == v19.0 {
                                                        let v1228 = C::lane_type(ctx, v2.0);
                                                        let v1378 = constructor_umax(ctx, v1228, v30, v27);
                                                        let v1379 = constructor_splat(ctx, v2.0, v1378);
                                                        // Rule at src\opts\vector.isle line 63.
                                                        returns.extend(Some(v1379));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Iadd => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_value_etor_returns::default();
                        C::inst_data_value_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Binary {
                                    opcode: ref v104,
                                    args: ref v105,
                                } => {
                                    match v104 {
                                        &Opcode::Iadd => {
                                            if v2.0 == v11.0 {
                                                let v106 = C::unpack_value_array_2(ctx, v105);
                                                let mut v109 = C::inst_data_value_etor_returns::default();
                                                C::inst_data_value_etor(ctx, v106.1, &mut v109);
                                                let mut v109 = v109.into_context_iter();
                                                while let Some(v110) = v109.next(ctx) {
                                                    match &v110.1 {
                                                        &InstructionData::Binary {
                                                            opcode: ref v113,
                                                            args: ref v114,
                                                        } => {
                                                            match v113 {
                                                                &Opcode::Iadd => {
                                                                    if v2.0 == v110.0 {
                                                                        let v118 = constructor_iadd(ctx, v2.0, v7.0, v106.0);
                                                                        let v115 = C::unpack_value_array_2(ctx, v114);
                                                                        let v119 = constructor_iadd(ctx, v2.0, v115.0, v115.1);
                                                                        let v120 = constructor_iadd(ctx, v2.0, v118, v119);
                                                                        let v121 = C::subsume(ctx, v120);
                                                                        // Rule at src\opts\arithmetic.isle line 128.
                                                                        returns.extend(Some(v121));
                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                    }
                                                                }
                                                                &Opcode::Isub => {
                                                                    if v2.0 == v110.0 {
                                                                        let v118 = constructor_iadd(ctx, v2.0, v7.0, v106.0);
                                                                        let v115 = C::unpack_value_array_2(ctx, v114);
                                                                        let v165 = constructor_isub(ctx, v2.0, v115.0, v115.1);
                                                                        let v178 = constructor_iadd(ctx, v2.0, v118, v165);
                                                                        let v179 = C::subsume(ctx, v178);
                                                                        // Rule at src\opts\arithmetic.isle line 176.
                                                                        returns.extend(Some(v179));
                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                    }
                                                                }
                                                                _ => {}
                                                            }
                                                        }
                                                        &InstructionData::UnaryImm {
                                                            opcode: ref v708,
                                                            imm: v709,
                                                        } => {
                                                            if let &Opcode::Iconst = v708 {
                                                                let mut v18 = C::inst_data_value_etor_returns::default();
                                                                C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                                                let mut v18 = v18.into_context_iter();
                                                                while let Some(v19) = v18.next(ctx) {
                                                                    if let &InstructionData::Binary {
                                                                        opcode: ref v122,
                                                                        args: ref v123,
                                                                    } = &v19.1 {
                                                                        if let &Opcode::Iadd = v122 {
                                                                            if v2.0 == v19.0 {
                                                                                let v124 = C::unpack_value_array_2(ctx, v123);
                                                                                let mut v199 = C::inst_data_value_etor_returns::default();
                                                                                C::inst_data_value_etor(ctx, v124.1, &mut v199);
                                                                                let mut v199 = v199.into_context_iter();
                                                                                while let Some(v200) = v199.next(ctx) {
                                                                                    if let &InstructionData::UnaryImm {
                                                                                        opcode: ref v226,
                                                                                        imm: v227,
                                                                                    } = &v200.1 {
                                                                                        if let &Opcode::Iconst = v226 {
                                                                                            let v710 = constructor_iadd(ctx, v2.0, v124.0, v106.0);
                                                                                            let v711 = constructor_iadd(ctx, v2.0, v124.1, v106.1);
                                                                                            let v712 = constructor_iadd(ctx, v2.0, v710, v711);
                                                                                            // Rule at src\opts\cprop.isle line 240.
                                                                                            returns.extend(Some(v712));
                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Isub => {
                                            if v2.0 == v11.0 {
                                                let v106 = C::unpack_value_array_2(ctx, v105);
                                                let mut v109 = C::inst_data_value_etor_returns::default();
                                                C::inst_data_value_etor(ctx, v106.1, &mut v109);
                                                let mut v109 = v109.into_context_iter();
                                                while let Some(v110) = v109.next(ctx) {
                                                    if let &InstructionData::Binary {
                                                        opcode: ref v113,
                                                        args: ref v114,
                                                    } = &v110.1 {
                                                        match v113 {
                                                            &Opcode::Iadd => {
                                                                if v2.0 == v110.0 {
                                                                    let v118 = constructor_iadd(ctx, v2.0, v7.0, v106.0);
                                                                    let v115 = C::unpack_value_array_2(ctx, v114);
                                                                    let v119 = constructor_iadd(ctx, v2.0, v115.0, v115.1);
                                                                    let v176 = constructor_isub(ctx, v2.0, v118, v119);
                                                                    let v177 = C::subsume(ctx, v176);
                                                                    // Rule at src\opts\arithmetic.isle line 172.
                                                                    returns.extend(Some(v177));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                            &Opcode::Isub => {
                                                                if v2.0 == v110.0 {
                                                                    let v118 = constructor_iadd(ctx, v2.0, v7.0, v106.0);
                                                                    let v115 = C::unpack_value_array_2(ctx, v114);
                                                                    let v165 = constructor_isub(ctx, v2.0, v115.0, v115.1);
                                                                    let v174 = constructor_isub(ctx, v2.0, v118, v165);
                                                                    let v175 = C::subsume(ctx, v174);
                                                                    // Rule at src\opts\arithmetic.isle line 168.
                                                                    returns.extend(Some(v175));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v26,
                                    arg: v27,
                                } => {
                                    match v26 {
                                        &Opcode::Splat => {
                                            if v2.0 == v11.0 {
                                                let mut v18 = C::inst_data_value_etor_returns::default();
                                                C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v29,
                                                        arg: v30,
                                                    } = &v19.1 {
                                                        if let &Opcode::Splat = v29 {
                                                            if v2.0 == v19.0 {
                                                                let v1228 = C::lane_type(ctx, v2.0);
                                                                let v1356 = constructor_iadd(ctx, v1228, v30, v27);
                                                                let v1357 = constructor_splat(ctx, v2.0, v1356);
                                                                // Rule at src\opts\vector.isle line 30.
                                                                returns.extend(Some(v1357));
                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Ineg => {
                                            if v2.0 == v11.0 {
                                                let v28 = constructor_isub(ctx, v2.0, v7.0, v27);
                                                // Rule at src\opts\arithmetic.isle line 23.
                                                returns.extend(Some(v28));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        if v2.0 == v11.0 {
                                            let mut v18 = C::inst_data_value_etor_returns::default();
                                            C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                            let mut v18 = v18.into_context_iter();
                                            while let Some(v19) = v18.next(ctx) {
                                                match &v19.1 {
                                                    &InstructionData::Binary {
                                                        opcode: ref v122,
                                                        args: ref v123,
                                                    } => {
                                                        match v122 {
                                                            &Opcode::Iadd => {
                                                                if v2.0 == v19.0 {
                                                                    let v124 = C::unpack_value_array_2(ctx, v123);
                                                                    let mut v199 = C::inst_data_value_etor_returns::default();
                                                                    C::inst_data_value_etor(ctx, v124.1, &mut v199);
                                                                    let mut v199 = v199.into_context_iter();
                                                                    while let Some(v200) = v199.next(ctx) {
                                                                        if let &InstructionData::UnaryImm {
                                                                            opcode: ref v226,
                                                                            imm: v227,
                                                                        } = &v200.1 {
                                                                            if let &Opcode::Iconst = v226 {
                                                                                if v2.0 == v200.0 {
                                                                                    let v601 = constructor_iadd(ctx, v2.0, v124.1, v7.1);
                                                                                    let v602 = constructor_iadd(ctx, v2.0, v124.0, v601);
                                                                                    // Rule at src\opts\cprop.isle line 123.
                                                                                    returns.extend(Some(v602));
                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            &Opcode::Isub => {
                                                                if v2.0 == v19.0 {
                                                                    let v124 = C::unpack_value_array_2(ctx, v123);
                                                                    let mut v127 = C::inst_data_value_etor_returns::default();
                                                                    C::inst_data_value_etor(ctx, v124.0, &mut v127);
                                                                    let mut v127 = v127.into_context_iter();
                                                                    while let Some(v128) = v127.next(ctx) {
                                                                        if let &InstructionData::UnaryImm {
                                                                            opcode: ref v607,
                                                                            imm: v608,
                                                                        } = &v128.1 {
                                                                            if let &Opcode::Iconst = v607 {
                                                                                if v2.0 == v128.0 {
                                                                                    let v609 = C::u64_from_imm64(ctx, v608);
                                                                                    let v16 = C::u64_from_imm64(ctx, v15);
                                                                                    let v619 = C::u64_add(ctx, v609, v16);
                                                                                    let v620 = C::imm64_masked(ctx, v2.0, v619);
                                                                                    let v621 = constructor_iconst(ctx, v2.0, v620);
                                                                                    let v622 = constructor_isub(ctx, v2.0, v621, v124.1);
                                                                                    // Rule at src\opts\cprop.isle line 149.
                                                                                    returns.extend(Some(v622));
                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    let mut v199 = C::inst_data_value_etor_returns::default();
                                                                    C::inst_data_value_etor(ctx, v124.1, &mut v199);
                                                                    let mut v199 = v199.into_context_iter();
                                                                    while let Some(v200) = v199.next(ctx) {
                                                                        if let &InstructionData::UnaryImm {
                                                                            opcode: ref v226,
                                                                            imm: v227,
                                                                        } = &v200.1 {
                                                                            if let &Opcode::Iconst = v226 {
                                                                                if v2.0 == v200.0 {
                                                                                    let v16 = C::u64_from_imm64(ctx, v15);
                                                                                    let v228 = C::u64_from_imm64(ctx, v227);
                                                                                    let v614 = C::u64_sub(ctx, v16, v228);
                                                                                    let v615 = C::imm64_masked(ctx, v2.0, v614);
                                                                                    let v616 = constructor_iconst(ctx, v2.0, v615);
                                                                                    let v618 = constructor_iadd(ctx, v2.0, v124.0, v616);
                                                                                    // Rule at src\opts\cprop.isle line 145.
                                                                                    returns.extend(Some(v618));
                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                    &InstructionData::Unary {
                                                        opcode: ref v29,
                                                        arg: v30,
                                                    } => {
                                                        if let &Opcode::Bnot = v29 {
                                                            let v16 = C::u64_from_imm64(ctx, v15);
                                                            if v16 == 0x1_u64 {
                                                                if v2.0 == v19.0 {
                                                                    let v65 = constructor_ineg(ctx, v2.0, v30);
                                                                    // Rule at src\opts\arithmetic.isle line 68.
                                                                    returns.extend(Some(v65));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                            let v16 = C::u64_from_imm64(ctx, v15);
                                            if v16 == 0x0_u64 {
                                                let v17 = C::subsume(ctx, v7.0);
                                                // Rule at src\opts\arithmetic.isle line 7.
                                                returns.extend(Some(v17));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                        let v526 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v527) = v526 {
                                            if v11.0 == v527 {
                                                let mut v18 = C::inst_data_value_etor_returns::default();
                                                C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v22,
                                                        imm: v23,
                                                    } = &v19.1 {
                                                        if let &Opcode::Iconst = v22 {
                                                            if v11.0 == v19.0 {
                                                                let v24 = C::u64_from_imm64(ctx, v23);
                                                                let v16 = C::u64_from_imm64(ctx, v15);
                                                                let v528 = C::u64_add(ctx, v24, v16);
                                                                let v529 = C::imm64_masked(ctx, v527, v528);
                                                                let v530 = constructor_iconst(ctx, v527, v529);
                                                                let v531 = C::subsume(ctx, v530);
                                                                // Rule at src\opts\cprop.isle line 2.
                                                                returns.extend(Some(v531));
                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        let v1119 = C::remat(ctx, arg0);
                                        // Rule at src\opts\remat.isle line 5.
                                        returns.extend(Some(v1119));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v18 = C::inst_data_value_etor_returns::default();
                        C::inst_data_value_etor(ctx, v7.0, &mut v18);
                        let mut v18 = v18.into_context_iter();
                        while let Some(v19) = v18.next(ctx) {
                            match &v19.1 {
                                &InstructionData::Binary {
                                    opcode: ref v122,
                                    args: ref v123,
                                } => {
                                    match v122 {
                                        &Opcode::Iadd => {
                                            if v2.0 == v19.0 {
                                                let v124 = C::unpack_value_array_2(ctx, v123);
                                                let mut v127 = C::inst_data_value_etor_returns::default();
                                                C::inst_data_value_etor(ctx, v124.0, &mut v127);
                                                let mut v127 = v127.into_context_iter();
                                                while let Some(v128) = v127.next(ctx) {
                                                    if let &InstructionData::Binary {
                                                        opcode: ref v131,
                                                        args: ref v132,
                                                    } = &v128.1 {
                                                        match v131 {
                                                            &Opcode::Iadd => {
                                                                if v2.0 == v128.0 {
                                                                    let v133 = C::unpack_value_array_2(ctx, v132);
                                                                    let v136 = constructor_iadd(ctx, v2.0, v133.0, v133.1);
                                                                    let v137 = constructor_iadd(ctx, v2.0, v124.1, v7.1);
                                                                    let v138 = constructor_iadd(ctx, v2.0, v136, v137);
                                                                    let v139 = C::subsume(ctx, v138);
                                                                    // Rule at src\opts\arithmetic.isle line 130.
                                                                    returns.extend(Some(v139));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                            &Opcode::Isub => {
                                                                if v2.0 == v128.0 {
                                                                    let v133 = C::unpack_value_array_2(ctx, v132);
                                                                    let v180 = constructor_isub(ctx, v2.0, v133.0, v133.1);
                                                                    let v137 = constructor_iadd(ctx, v2.0, v124.1, v7.1);
                                                                    let v188 = constructor_iadd(ctx, v2.0, v180, v137);
                                                                    let v189 = C::subsume(ctx, v188);
                                                                    // Rule at src\opts\arithmetic.isle line 194.
                                                                    returns.extend(Some(v189));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Isub => {
                                            if v2.0 == v19.0 {
                                                let v124 = C::unpack_value_array_2(ctx, v123);
                                                let mut v127 = C::inst_data_value_etor_returns::default();
                                                C::inst_data_value_etor(ctx, v124.0, &mut v127);
                                                let mut v127 = v127.into_context_iter();
                                                while let Some(v128) = v127.next(ctx) {
                                                    if let &InstructionData::Binary {
                                                        opcode: ref v131,
                                                        args: ref v132,
                                                    } = &v128.1 {
                                                        match v131 {
                                                            &Opcode::Iadd => {
                                                                if v2.0 == v128.0 {
                                                                    let v133 = C::unpack_value_array_2(ctx, v132);
                                                                    let v136 = constructor_iadd(ctx, v2.0, v133.0, v133.1);
                                                                    let v183 = constructor_isub(ctx, v2.0, v124.1, v7.1);
                                                                    let v192 = constructor_isub(ctx, v2.0, v136, v183);
                                                                    let v193 = C::subsume(ctx, v192);
                                                                    // Rule at src\opts\arithmetic.isle line 202.
                                                                    returns.extend(Some(v193));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                            &Opcode::Isub => {
                                                                if v2.0 == v128.0 {
                                                                    let v133 = C::unpack_value_array_2(ctx, v132);
                                                                    let v180 = constructor_isub(ctx, v2.0, v133.0, v133.1);
                                                                    let v183 = constructor_isub(ctx, v2.0, v124.1, v7.1);
                                                                    let v184 = constructor_isub(ctx, v2.0, v180, v183);
                                                                    let v185 = C::subsume(ctx, v184);
                                                                    // Rule at src\opts\arithmetic.isle line 186.
                                                                    returns.extend(Some(v185));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v29,
                                    arg: v30,
                                } => {
                                    if let &Opcode::Ineg = v29 {
                                        if v2.0 == v19.0 {
                                            let v31 = constructor_isub(ctx, v2.0, v7.1, v30);
                                            // Rule at src\opts\arithmetic.isle line 25.
                                            returns.extend(Some(v31));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v22,
                                    imm: v23,
                                } => {
                                    if let &Opcode::Iconst = v22 {
                                        if v2.0 == v19.0 {
                                            let v592 = constructor_iadd(ctx, v2.0, v7.1, v7.0);
                                            // Rule at src\opts\cprop.isle line 92.
                                            returns.extend(Some(v592));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        let v1119 = C::remat(ctx, arg0);
                                        // Rule at src\opts\remat.isle line 3.
                                        returns.extend(Some(v1119));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    &Opcode::Isub => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_value_etor_returns::default();
                        C::inst_data_value_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Binary {
                                    opcode: ref v104,
                                    args: ref v105,
                                } => {
                                    match v104 {
                                        &Opcode::Iadd => {
                                            if v2.0 == v11.0 {
                                                let v106 = C::unpack_value_array_2(ctx, v105);
                                                let mut v109 = C::inst_data_value_etor_returns::default();
                                                C::inst_data_value_etor(ctx, v106.1, &mut v109);
                                                let mut v109 = v109.into_context_iter();
                                                while let Some(v110) = v109.next(ctx) {
                                                    if let &InstructionData::Binary {
                                                        opcode: ref v113,
                                                        args: ref v114,
                                                    } = &v110.1 {
                                                        match v113 {
                                                            &Opcode::Iadd => {
                                                                if v2.0 == v110.0 {
                                                                    let v164 = constructor_isub(ctx, v2.0, v7.0, v106.0);
                                                                    let v115 = C::unpack_value_array_2(ctx, v114);
                                                                    let v119 = constructor_iadd(ctx, v2.0, v115.0, v115.1);
                                                                    let v172 = constructor_isub(ctx, v2.0, v164, v119);
                                                                    let v173 = C::subsume(ctx, v172);
                                                                    // Rule at src\opts\arithmetic.isle line 164.
                                                                    returns.extend(Some(v173));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                            &Opcode::Isub => {
                                                                if v2.0 == v110.0 {
                                                                    let v164 = constructor_isub(ctx, v2.0, v7.0, v106.0);
                                                                    let v115 = C::unpack_value_array_2(ctx, v114);
                                                                    let v165 = constructor_isub(ctx, v2.0, v115.0, v115.1);
                                                                    let v170 = constructor_isub(ctx, v2.0, v164, v165);
                                                                    let v171 = C::subsume(ctx, v170);
                                                                    // Rule at src\opts\arithmetic.isle line 160.
                                                                    returns.extend(Some(v171));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Isub => {
                                            if v2.0 == v11.0 {
                                                let v106 = C::unpack_value_array_2(ctx, v105);
                                                let mut v109 = C::inst_data_value_etor_returns::default();
                                                C::inst_data_value_etor(ctx, v106.1, &mut v109);
                                                let mut v109 = v109.into_context_iter();
                                                while let Some(v110) = v109.next(ctx) {
                                                    if let &InstructionData::Binary {
                                                        opcode: ref v113,
                                                        args: ref v114,
                                                    } = &v110.1 {
                                                        match v113 {
                                                            &Opcode::Iadd => {
                                                                if v2.0 == v110.0 {
                                                                    let v164 = constructor_isub(ctx, v2.0, v7.0, v106.0);
                                                                    let v115 = C::unpack_value_array_2(ctx, v114);
                                                                    let v119 = constructor_iadd(ctx, v2.0, v115.0, v115.1);
                                                                    let v168 = constructor_iadd(ctx, v2.0, v164, v119);
                                                                    let v169 = C::subsume(ctx, v168);
                                                                    // Rule at src\opts\arithmetic.isle line 156.
                                                                    returns.extend(Some(v169));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                            &Opcode::Isub => {
                                                                if v2.0 == v110.0 {
                                                                    let v164 = constructor_isub(ctx, v2.0, v7.0, v106.0);
                                                                    let v115 = C::unpack_value_array_2(ctx, v114);
                                                                    let v165 = constructor_isub(ctx, v2.0, v115.0, v115.1);
                                                                    let v166 = constructor_iadd(ctx, v2.0, v164, v165);
                                                                    let v167 = C::subsume(ctx, v166);
                                                                    // Rule at src\opts\arithmetic.isle line 152.
                                                                    returns.extend(Some(v167));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v26,
                                    arg: v27,
                                } => {
                                    match v26 {
                                        &Opcode::Splat => {
                                            if v2.0 == v11.0 {
                                                let mut v18 = C::inst_data_value_etor_returns::default();
                                                C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v29,
                                                        arg: v30,
                                                    } = &v19.1 {
                                                        if let &Opcode::Splat = v29 {
                                                            if v2.0 == v19.0 {
                                                                let v1228 = C::lane_type(ctx, v2.0);
                                                                let v1358 = constructor_isub(ctx, v1228, v30, v27);
                                                                let v1359 = constructor_splat(ctx, v2.0, v1358);
                                                                // Rule at src\opts\vector.isle line 33.
                                                                returns.extend(Some(v1359));
                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Ineg => {
                                            if v2.0 == v11.0 {
                                                let v44 = constructor_iadd(ctx, v2.0, v7.0, v27);
                                                // Rule at src\opts\arithmetic.isle line 30.
                                                returns.extend(Some(v44));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        if v2.0 == v11.0 {
                                            let mut v18 = C::inst_data_value_etor_returns::default();
                                            C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                            let mut v18 = v18.into_context_iter();
                                            while let Some(v19) = v18.next(ctx) {
                                                if let &InstructionData::Binary {
                                                    opcode: ref v122,
                                                    args: ref v123,
                                                } = &v19.1 {
                                                    match v122 {
                                                        &Opcode::Iadd => {
                                                            if v2.0 == v19.0 {
                                                                let v124 = C::unpack_value_array_2(ctx, v123);
                                                                let mut v199 = C::inst_data_value_etor_returns::default();
                                                                C::inst_data_value_etor(ctx, v124.1, &mut v199);
                                                                let mut v199 = v199.into_context_iter();
                                                                while let Some(v200) = v199.next(ctx) {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v226,
                                                                        imm: v227,
                                                                    } = &v200.1 {
                                                                        if let &Opcode::Iconst = v226 {
                                                                            if v2.0 == v200.0 {
                                                                                let v16 = C::u64_from_imm64(ctx, v15);
                                                                                let v228 = C::u64_from_imm64(ctx, v227);
                                                                                let v614 = C::u64_sub(ctx, v16, v228);
                                                                                let v615 = C::imm64_masked(ctx, v2.0, v614);
                                                                                let v616 = constructor_iconst(ctx, v2.0, v615);
                                                                                let v617 = constructor_isub(ctx, v2.0, v124.0, v616);
                                                                                // Rule at src\opts\cprop.isle line 141.
                                                                                returns.extend(Some(v617));
                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Isub => {
                                                            if v2.0 == v19.0 {
                                                                let v124 = C::unpack_value_array_2(ctx, v123);
                                                                let mut v127 = C::inst_data_value_etor_returns::default();
                                                                C::inst_data_value_etor(ctx, v124.0, &mut v127);
                                                                let mut v127 = v127.into_context_iter();
                                                                while let Some(v128) = v127.next(ctx) {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v607,
                                                                        imm: v608,
                                                                    } = &v128.1 {
                                                                        if let &Opcode::Iconst = v607 {
                                                                            if v2.0 == v128.0 {
                                                                                let v609 = C::u64_from_imm64(ctx, v608);
                                                                                let v16 = C::u64_from_imm64(ctx, v15);
                                                                                let v610 = C::u64_sub(ctx, v609, v16);
                                                                                let v611 = C::imm64_masked(ctx, v2.0, v610);
                                                                                let v612 = constructor_iconst(ctx, v2.0, v611);
                                                                                let v613 = constructor_isub(ctx, v2.0, v612, v124.1);
                                                                                // Rule at src\opts\cprop.isle line 137.
                                                                                returns.extend(Some(v613));
                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                let mut v199 = C::inst_data_value_etor_returns::default();
                                                                C::inst_data_value_etor(ctx, v124.1, &mut v199);
                                                                let mut v199 = v199.into_context_iter();
                                                                while let Some(v200) = v199.next(ctx) {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v226,
                                                                        imm: v227,
                                                                    } = &v200.1 {
                                                                        if let &Opcode::Iconst = v226 {
                                                                            if v2.0 == v200.0 {
                                                                                let v228 = C::u64_from_imm64(ctx, v227);
                                                                                let v16 = C::u64_from_imm64(ctx, v15);
                                                                                let v603 = C::u64_add(ctx, v228, v16);
                                                                                let v604 = C::imm64_masked(ctx, v2.0, v603);
                                                                                let v605 = constructor_iconst(ctx, v2.0, v604);
                                                                                let v606 = constructor_isub(ctx, v2.0, v124.0, v605);
                                                                                // Rule at src\opts\cprop.isle line 133.
                                                                                returns.extend(Some(v606));
                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                            let v16 = C::u64_from_imm64(ctx, v15);
                                            if v16 == 0x0_u64 {
                                                let v17 = C::subsume(ctx, v7.0);
                                                // Rule at src\opts\arithmetic.isle line 12.
                                                returns.extend(Some(v17));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                        let v526 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v527) = v526 {
                                            if v11.0 == v527 {
                                                let mut v18 = C::inst_data_value_etor_returns::default();
                                                C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v22,
                                                        imm: v23,
                                                    } = &v19.1 {
                                                        if let &Opcode::Iconst = v22 {
                                                            if v11.0 == v19.0 {
                                                                let v24 = C::u64_from_imm64(ctx, v23);
                                                                let v16 = C::u64_from_imm64(ctx, v15);
                                                                let v532 = C::u64_sub(ctx, v24, v16);
                                                                let v533 = C::imm64_masked(ctx, v527, v532);
                                                                let v534 = constructor_iconst(ctx, v527, v533);
                                                                let v535 = C::subsume(ctx, v534);
                                                                // Rule at src\opts\cprop.isle line 8.
                                                                returns.extend(Some(v535));
                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        let v1119 = C::remat(ctx, arg0);
                                        // Rule at src\opts\remat.isle line 9.
                                        returns.extend(Some(v1119));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v18 = C::inst_data_value_etor_returns::default();
                        C::inst_data_value_etor(ctx, v7.0, &mut v18);
                        let mut v18 = v18.into_context_iter();
                        while let Some(v19) = v18.next(ctx) {
                            match &v19.1 {
                                &InstructionData::Binary {
                                    opcode: ref v122,
                                    args: ref v123,
                                } => {
                                    match v122 {
                                        &Opcode::Iadd => {
                                            if v2.0 == v19.0 {
                                                let v124 = C::unpack_value_array_2(ctx, v123);
                                                let mut v127 = C::inst_data_value_etor_returns::default();
                                                C::inst_data_value_etor(ctx, v124.0, &mut v127);
                                                let mut v127 = v127.into_context_iter();
                                                while let Some(v128) = v127.next(ctx) {
                                                    if let &InstructionData::Binary {
                                                        opcode: ref v131,
                                                        args: ref v132,
                                                    } = &v128.1 {
                                                        match v131 {
                                                            &Opcode::Iadd => {
                                                                if v2.0 == v128.0 {
                                                                    let v133 = C::unpack_value_array_2(ctx, v132);
                                                                    let v136 = constructor_iadd(ctx, v2.0, v133.0, v133.1);
                                                                    let v183 = constructor_isub(ctx, v2.0, v124.1, v7.1);
                                                                    let v194 = constructor_iadd(ctx, v2.0, v136, v183);
                                                                    let v195 = C::subsume(ctx, v194);
                                                                    // Rule at src\opts\arithmetic.isle line 206.
                                                                    returns.extend(Some(v195));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                            &Opcode::Isub => {
                                                                if v2.0 == v128.0 {
                                                                    let v133 = C::unpack_value_array_2(ctx, v132);
                                                                    let v180 = constructor_isub(ctx, v2.0, v133.0, v133.1);
                                                                    let v183 = constructor_isub(ctx, v2.0, v124.1, v7.1);
                                                                    let v186 = constructor_iadd(ctx, v2.0, v180, v183);
                                                                    let v187 = C::subsume(ctx, v186);
                                                                    // Rule at src\opts\arithmetic.isle line 190.
                                                                    returns.extend(Some(v187));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Isub => {
                                            if v2.0 == v19.0 {
                                                let v124 = C::unpack_value_array_2(ctx, v123);
                                                let mut v127 = C::inst_data_value_etor_returns::default();
                                                C::inst_data_value_etor(ctx, v124.0, &mut v127);
                                                let mut v127 = v127.into_context_iter();
                                                while let Some(v128) = v127.next(ctx) {
                                                    if let &InstructionData::Binary {
                                                        opcode: ref v131,
                                                        args: ref v132,
                                                    } = &v128.1 {
                                                        match v131 {
                                                            &Opcode::Iadd => {
                                                                if v2.0 == v128.0 {
                                                                    let v133 = C::unpack_value_array_2(ctx, v132);
                                                                    let v136 = constructor_iadd(ctx, v2.0, v133.0, v133.1);
                                                                    let v137 = constructor_iadd(ctx, v2.0, v124.1, v7.1);
                                                                    let v190 = constructor_isub(ctx, v2.0, v136, v137);
                                                                    let v191 = C::subsume(ctx, v190);
                                                                    // Rule at src\opts\arithmetic.isle line 198.
                                                                    returns.extend(Some(v191));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                            &Opcode::Isub => {
                                                                if v2.0 == v128.0 {
                                                                    let v133 = C::unpack_value_array_2(ctx, v132);
                                                                    let v180 = constructor_isub(ctx, v2.0, v133.0, v133.1);
                                                                    let v137 = constructor_iadd(ctx, v2.0, v124.1, v7.1);
                                                                    let v181 = constructor_isub(ctx, v2.0, v180, v137);
                                                                    let v182 = C::subsume(ctx, v181);
                                                                    // Rule at src\opts\arithmetic.isle line 182.
                                                                    returns.extend(Some(v182));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v22,
                                    imm: v23,
                                } => {
                                    if let &Opcode::Iconst = v22 {
                                        if v2.0 == v19.0 {
                                            let v24 = C::u64_from_imm64(ctx, v23);
                                            if v24 == 0x0_u64 {
                                                let v25 = constructor_ineg(ctx, v2.0, v7.1);
                                                // Rule at src\opts\arithmetic.isle line 17.
                                                returns.extend(Some(v25));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                            let v593 = constructor_isub(ctx, v2.0, v7.1, v7.0);
                                            let v594 = constructor_ineg(ctx, v2.0, v593);
                                            // Rule at src\opts\cprop.isle line 97.
                                            returns.extend(Some(v594));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        let v1119 = C::remat(ctx, arg0);
                                        // Rule at src\opts\remat.isle line 7.
                                        returns.extend(Some(v1119));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                                _ => {}
                            }
                        }
                        if v7.0 == v7.1 {
                            let v52 = C::ty_int(ctx, v2.0);
                            if let Some(v53) = v52 {
                                let v55 = constructor_iconst_u(ctx, v53, 0x0_u64);
                                let v56 = C::subsume(ctx, v55);
                                // Rule at src\opts\arithmetic.isle line 49.
                                returns.extend(Some(v56));
                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                            }
                        }
                        let mut v58 = C::inst_data_value_tupled_etor_returns::default();
                        C::inst_data_value_tupled_etor(ctx, v7.1, &mut v58);
                        let mut v58 = v58.into_context_iter();
                        while let Some(v59) = v58.next(ctx) {
                            let v60 = C::iconst_sextend_etor(ctx, v59);
                            if let Some(v61) = v60 {
                                let v669 = C::i64_neg(ctx, v61.1);
                                let v670 = C::i64_as_u64(ctx, v669);
                                let v671 = C::i64_as_u64(ctx, v61.1);
                                let v672 = C::u64_lt(ctx, v670, v671);
                                if v672 == true {
                                    if v2.0 == v61.0 {
                                        let v673 = C::imm64_masked(ctx, v2.0, v670);
                                        let v674 = constructor_iconst(ctx, v2.0, v673);
                                        let v675 = constructor_iadd(ctx, v2.0, v7.0, v674);
                                        // Rule at src\opts\cprop.isle line 196.
                                        returns.extend(Some(v675));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Imul => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_value_etor_returns::default();
                        C::inst_data_value_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Binary {
                                    opcode: ref v104,
                                    args: ref v105,
                                } => {
                                    if let &Opcode::Imul = v104 {
                                        if v2.0 == v11.0 {
                                            let v106 = C::unpack_value_array_2(ctx, v105);
                                            let mut v109 = C::inst_data_value_etor_returns::default();
                                            C::inst_data_value_etor(ctx, v106.1, &mut v109);
                                            let mut v109 = v109.into_context_iter();
                                            while let Some(v110) = v109.next(ctx) {
                                                match &v110.1 {
                                                    &InstructionData::Binary {
                                                        opcode: ref v113,
                                                        args: ref v114,
                                                    } => {
                                                        if let &Opcode::Imul = v113 {
                                                            if v2.0 == v110.0 {
                                                                let v140 = constructor_imul(ctx, v2.0, v7.0, v106.0);
                                                                let v115 = C::unpack_value_array_2(ctx, v114);
                                                                let v141 = constructor_imul(ctx, v2.0, v115.0, v115.1);
                                                                let v142 = constructor_imul(ctx, v2.0, v140, v141);
                                                                let v143 = C::subsume(ctx, v142);
                                                                // Rule at src\opts\arithmetic.isle line 133.
                                                                returns.extend(Some(v143));
                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                            }
                                                        }
                                                    }
                                                    &InstructionData::UnaryImm {
                                                        opcode: ref v708,
                                                        imm: v709,
                                                    } => {
                                                        if let &Opcode::Iconst = v708 {
                                                            let mut v18 = C::inst_data_value_etor_returns::default();
                                                            C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                                            let mut v18 = v18.into_context_iter();
                                                            while let Some(v19) = v18.next(ctx) {
                                                                if let &InstructionData::Binary {
                                                                    opcode: ref v122,
                                                                    args: ref v123,
                                                                } = &v19.1 {
                                                                    if let &Opcode::Imul = v122 {
                                                                        if v2.0 == v19.0 {
                                                                            let v124 = C::unpack_value_array_2(ctx, v123);
                                                                            let mut v199 = C::inst_data_value_etor_returns::default();
                                                                            C::inst_data_value_etor(ctx, v124.1, &mut v199);
                                                                            let mut v199 = v199.into_context_iter();
                                                                            while let Some(v200) = v199.next(ctx) {
                                                                                if let &InstructionData::UnaryImm {
                                                                                    opcode: ref v226,
                                                                                    imm: v227,
                                                                                } = &v200.1 {
                                                                                    if let &Opcode::Iconst = v226 {
                                                                                        let v713 = constructor_imul(ctx, v2.0, v124.0, v106.0);
                                                                                        let v714 = constructor_imul(ctx, v2.0, v124.1, v106.1);
                                                                                        let v715 = constructor_imul(ctx, v2.0, v713, v714);
                                                                                        // Rule at src\opts\cprop.isle line 244.
                                                                                        returns.extend(Some(v715));
                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v26,
                                    arg: v27,
                                } => {
                                    match v26 {
                                        &Opcode::Splat => {
                                            if v2.0 == v11.0 {
                                                let mut v18 = C::inst_data_value_etor_returns::default();
                                                C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v29,
                                                        arg: v30,
                                                    } = &v19.1 {
                                                        if let &Opcode::Splat = v29 {
                                                            if v2.0 == v19.0 {
                                                                let v1228 = C::lane_type(ctx, v2.0);
                                                                let v1360 = constructor_imul(ctx, v1228, v30, v27);
                                                                let v1361 = constructor_splat(ctx, v2.0, v1360);
                                                                // Rule at src\opts\vector.isle line 36.
                                                                returns.extend(Some(v1361));
                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Ineg => {
                                            if v2.0 == v11.0 {
                                                let mut v18 = C::inst_data_value_etor_returns::default();
                                                C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v29,
                                                        arg: v30,
                                                    } = &v19.1 {
                                                        if let &Opcode::Ineg = v29 {
                                                            if v2.0 == v19.0 {
                                                                let v48 = constructor_imul(ctx, v2.0, v30, v27);
                                                                let v49 = C::subsume(ctx, v48);
                                                                // Rule at src\opts\arithmetic.isle line 37.
                                                                returns.extend(Some(v49));
                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        let v16 = C::u64_from_imm64(ctx, v15);
                                        match v16 {
                                            0x0_u64 => {
                                                if v2.0 == v11.0 {
                                                    let v57 = C::subsume(ctx, v7.1);
                                                    // Rule at src\opts\arithmetic.isle line 58.
                                                    returns.extend(Some(v57));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                            0x1_u64 => {
                                                if v2.0 == v11.0 {
                                                    let v17 = C::subsume(ctx, v7.0);
                                                    // Rule at src\opts\arithmetic.isle line 52.
                                                    returns.extend(Some(v17));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                            0x2_u64 => {
                                                let v73 = constructor_iadd(ctx, v2.0, v7.0, v7.0);
                                                // Rule at src\opts\arithmetic.isle line 85.
                                                returns.extend(Some(v73));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                            _ => {}
                                        }
                                        let mut v18 = C::inst_data_value_etor_returns::default();
                                        C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            match &v19.1 {
                                                &InstructionData::Binary {
                                                    opcode: ref v122,
                                                    args: ref v123,
                                                } => {
                                                    if let &Opcode::Imul = v122 {
                                                        if v2.0 == v11.0 {
                                                            if v2.0 == v19.0 {
                                                                let v124 = C::unpack_value_array_2(ctx, v123);
                                                                let mut v199 = C::inst_data_value_etor_returns::default();
                                                                C::inst_data_value_etor(ctx, v124.1, &mut v199);
                                                                let mut v199 = v199.into_context_iter();
                                                                while let Some(v200) = v199.next(ctx) {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v226,
                                                                        imm: v227,
                                                                    } = &v200.1 {
                                                                        if let &Opcode::Iconst = v226 {
                                                                            if v2.0 == v200.0 {
                                                                                let v623 = constructor_imul(ctx, v2.0, v124.1, v7.1);
                                                                                let v624 = constructor_imul(ctx, v2.0, v124.0, v623);
                                                                                // Rule at src\opts\cprop.isle line 154.
                                                                                returns.extend(Some(v624));
                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                &InstructionData::UnaryImm {
                                                    opcode: ref v22,
                                                    imm: v23,
                                                } => {
                                                    if let &Opcode::Iconst = v22 {
                                                        let v526 = C::fits_in_64(ctx, v2.0);
                                                        if let Some(v527) = v526 {
                                                            if v11.0 == v19.0 {
                                                                if v11.0 == v527 {
                                                                    let v24 = C::u64_from_imm64(ctx, v23);
                                                                    let v536 = C::u64_mul(ctx, v24, v16);
                                                                    let v537 = C::imm64_masked(ctx, v527, v536);
                                                                    let v538 = constructor_iconst(ctx, v527, v537);
                                                                    let v539 = C::subsume(ctx, v538);
                                                                    // Rule at src\opts\cprop.isle line 14.
                                                                    returns.extend(Some(v539));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                        let v74 = C::imm64_power_of_two(ctx, v15);
                                        if let Some(v75) = v74 {
                                            let v76 = C::imm64(ctx, v75);
                                            let v77 = constructor_iconst(ctx, v2.0, v76);
                                            let v78 = constructor_ishl(ctx, v2.0, v7.0, v77);
                                            // Rule at src\opts\arithmetic.isle line 92.
                                            returns.extend(Some(v78));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v18 = C::inst_data_value_etor_returns::default();
                        C::inst_data_value_etor(ctx, v7.0, &mut v18);
                        let mut v18 = v18.into_context_iter();
                        while let Some(v19) = v18.next(ctx) {
                            match &v19.1 {
                                &InstructionData::Binary {
                                    opcode: ref v122,
                                    args: ref v123,
                                } => {
                                    if let &Opcode::Imul = v122 {
                                        if v2.0 == v19.0 {
                                            let v124 = C::unpack_value_array_2(ctx, v123);
                                            let mut v127 = C::inst_data_value_etor_returns::default();
                                            C::inst_data_value_etor(ctx, v124.0, &mut v127);
                                            let mut v127 = v127.into_context_iter();
                                            while let Some(v128) = v127.next(ctx) {
                                                if let &InstructionData::Binary {
                                                    opcode: ref v131,
                                                    args: ref v132,
                                                } = &v128.1 {
                                                    if let &Opcode::Imul = v131 {
                                                        if v2.0 == v128.0 {
                                                            let v133 = C::unpack_value_array_2(ctx, v132);
                                                            let v144 = constructor_imul(ctx, v2.0, v133.0, v133.1);
                                                            let v145 = constructor_imul(ctx, v2.0, v124.1, v7.1);
                                                            let v146 = constructor_imul(ctx, v2.0, v144, v145);
                                                            let v147 = C::subsume(ctx, v146);
                                                            // Rule at src\opts\arithmetic.isle line 135.
                                                            returns.extend(Some(v147));
                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v22,
                                    imm: v23,
                                } => {
                                    if let &Opcode::Iconst = v22 {
                                        let v79 = C::imm64_power_of_two(ctx, v23);
                                        if let Some(v80) = v79 {
                                            let v81 = C::imm64(ctx, v80);
                                            let v82 = constructor_iconst(ctx, v2.0, v81);
                                            let v83 = constructor_ishl(ctx, v2.0, v7.1, v82);
                                            // Rule at src\opts\arithmetic.isle line 94.
                                            returns.extend(Some(v83));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        if v2.0 == v19.0 {
                                            let v595 = constructor_imul(ctx, v2.0, v7.1, v7.0);
                                            // Rule at src\opts\cprop.isle line 100.
                                            returns.extend(Some(v595));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v58 = C::inst_data_value_tupled_etor_returns::default();
                        C::inst_data_value_tupled_etor(ctx, v7.1, &mut v58);
                        let mut v58 = v58.into_context_iter();
                        while let Some(v59) = v58.next(ctx) {
                            let v60 = C::iconst_sextend_etor(ctx, v59);
                            if let Some(v61) = v60 {
                                if v61.1 == -1_i64 {
                                    if v2.0 == v61.0 {
                                        let v64 = constructor_ineg(ctx, v2.0, v7.0);
                                        // Rule at src\opts\arithmetic.isle line 64.
                                        returns.extend(Some(v64));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Umulhi => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_value_etor_returns::default();
                        C::inst_data_value_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v26,
                                arg: v27,
                            } = &v11.1 {
                                if let &Opcode::Splat = v26 {
                                    if v2.0 == v11.0 {
                                        let mut v18 = C::inst_data_value_etor_returns::default();
                                        C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            if let &InstructionData::Unary {
                                                opcode: ref v29,
                                                arg: v30,
                                            } = &v19.1 {
                                                if let &Opcode::Splat = v29 {
                                                    if v2.0 == v19.0 {
                                                        let v1228 = C::lane_type(ctx, v2.0);
                                                        let v1364 = constructor_umulhi(ctx, v1228, v30, v27);
                                                        let v1365 = constructor_splat(ctx, v2.0, v1364);
                                                        // Rule at src\opts\vector.isle line 42.
                                                        returns.extend(Some(v1365));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Smulhi => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_value_etor_returns::default();
                        C::inst_data_value_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v26,
                                arg: v27,
                            } = &v11.1 {
                                if let &Opcode::Splat = v26 {
                                    if v2.0 == v11.0 {
                                        let mut v18 = C::inst_data_value_etor_returns::default();
                                        C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            if let &InstructionData::Unary {
                                                opcode: ref v29,
                                                arg: v30,
                                            } = &v19.1 {
                                                if let &Opcode::Splat = v29 {
                                                    if v2.0 == v19.0 {
                                                        let v1228 = C::lane_type(ctx, v2.0);
                                                        let v1362 = constructor_smulhi(ctx, v1228, v30, v27);
                                                        let v1363 = constructor_splat(ctx, v2.0, v1362);
                                                        // Rule at src\opts\vector.isle line 39.
                                                        returns.extend(Some(v1363));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Band => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_value_etor_returns::default();
                        C::inst_data_value_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Binary {
                                    opcode: ref v104,
                                    args: ref v105,
                                } => {
                                    if let &Opcode::Band = v104 {
                                        if v2.0 == v11.0 {
                                            let v106 = C::unpack_value_array_2(ctx, v105);
                                            let mut v109 = C::inst_data_value_etor_returns::default();
                                            C::inst_data_value_etor(ctx, v106.1, &mut v109);
                                            let mut v109 = v109.into_context_iter();
                                            while let Some(v110) = v109.next(ctx) {
                                                match &v110.1 {
                                                    &InstructionData::Binary {
                                                        opcode: ref v113,
                                                        args: ref v114,
                                                    } => {
                                                        if let &Opcode::Band = v113 {
                                                            if v2.0 == v110.0 {
                                                                let v148 = constructor_band(ctx, v2.0, v7.0, v106.0);
                                                                let v115 = C::unpack_value_array_2(ctx, v114);
                                                                let v149 = constructor_band(ctx, v2.0, v115.0, v115.1);
                                                                let v150 = constructor_band(ctx, v2.0, v148, v149);
                                                                let v151 = C::subsume(ctx, v150);
                                                                // Rule at src\opts\arithmetic.isle line 138.
                                                                returns.extend(Some(v151));
                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                            }
                                                        }
                                                    }
                                                    &InstructionData::UnaryImm {
                                                        opcode: ref v708,
                                                        imm: v709,
                                                    } => {
                                                        if let &Opcode::Iconst = v708 {
                                                            let mut v18 = C::inst_data_value_etor_returns::default();
                                                            C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                                            let mut v18 = v18.into_context_iter();
                                                            while let Some(v19) = v18.next(ctx) {
                                                                if let &InstructionData::Binary {
                                                                    opcode: ref v122,
                                                                    args: ref v123,
                                                                } = &v19.1 {
                                                                    if let &Opcode::Band = v122 {
                                                                        if v2.0 == v19.0 {
                                                                            let v124 = C::unpack_value_array_2(ctx, v123);
                                                                            let mut v199 = C::inst_data_value_etor_returns::default();
                                                                            C::inst_data_value_etor(ctx, v124.1, &mut v199);
                                                                            let mut v199 = v199.into_context_iter();
                                                                            while let Some(v200) = v199.next(ctx) {
                                                                                if let &InstructionData::UnaryImm {
                                                                                    opcode: ref v226,
                                                                                    imm: v227,
                                                                                } = &v200.1 {
                                                                                    if let &Opcode::Iconst = v226 {
                                                                                        let v716 = constructor_band(ctx, v2.0, v124.0, v106.0);
                                                                                        let v717 = constructor_band(ctx, v2.0, v124.1, v106.1);
                                                                                        let v718 = constructor_band(ctx, v2.0, v716, v717);
                                                                                        // Rule at src\opts\cprop.isle line 248.
                                                                                        returns.extend(Some(v718));
                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::IntCompare {
                                    opcode: ref v1061,
                                    args: ref v1062,
                                    cond: ref v1063,
                                } => {
                                    if let &Opcode::Icmp = v1061 {
                                        let v526 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v527) = v526 {
                                            if v11.0 == v527 {
                                                let mut v18 = C::inst_data_value_etor_returns::default();
                                                C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if let &InstructionData::IntCompare {
                                                        opcode: ref v1031,
                                                        args: ref v1032,
                                                        cond: ref v1033,
                                                    } = &v19.1 {
                                                        if let &Opcode::Icmp = v1031 {
                                                            let v1067 = constructor_intcc_comparable(ctx, v1033, v1063);
                                                            if let Some(v1068) = v1067 {
                                                                if v11.0 == v19.0 {
                                                                    let v1034 = C::unpack_value_array_2(ctx, v1032);
                                                                    let v1064 = C::unpack_value_array_2(ctx, v1062);
                                                                    if v1034.0 == v1064.0 {
                                                                        if v1034.1 == v1064.1 {
                                                                            let v1069 = constructor_decompose_intcc(ctx, v1033);
                                                                            let v1070 = constructor_decompose_intcc(ctx, v1063);
                                                                            let v1071 = C::u64_and(ctx, v1069, v1070);
                                                                            let v1072 = constructor_compose_icmp(ctx, v527, v1071, v1068, v1034.0, v1034.1);
                                                                            // Rule at src\opts\icmp.isle line 175.
                                                                            returns.extend(Some(v1072));
                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v26,
                                    arg: v27,
                                } => {
                                    match v26 {
                                        &Opcode::Splat => {
                                            let v1346 = C::ty_vector_not_float(ctx, v2.0);
                                            if let Some(v1347) = v1346 {
                                                if v2.0 == v11.0 {
                                                    let mut v18 = C::inst_data_value_etor_returns::default();
                                                    C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                                    let mut v18 = v18.into_context_iter();
                                                    while let Some(v19) = v18.next(ctx) {
                                                        if let &InstructionData::Unary {
                                                            opcode: ref v29,
                                                            arg: v30,
                                                        } = &v19.1 {
                                                            if let &Opcode::Splat = v29 {
                                                                if v2.0 == v19.0 {
                                                                    let v1228 = C::lane_type(ctx, v2.0);
                                                                    let v1348 = constructor_band(ctx, v1228, v30, v27);
                                                                    let v1349 = constructor_splat(ctx, v2.0, v1348);
                                                                    // Rule at src\opts\vector.isle line 14.
                                                                    returns.extend(Some(v1349));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Bnot => {
                                            let v52 = C::ty_int(ctx, v2.0);
                                            if let Some(v53) = v52 {
                                                if v7.0 == v27 {
                                                    if v11.0 == v53 {
                                                        let v55 = constructor_iconst_u(ctx, v53, 0x0_u64);
                                                        let v56 = C::subsume(ctx, v55);
                                                        // Rule at src\opts\bitops.isle line 34.
                                                        returns.extend(Some(v56));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Uextend => {
                                            let mut v18 = C::inst_data_value_etor_returns::default();
                                            C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                            let mut v18 = v18.into_context_iter();
                                            while let Some(v19) = v18.next(ctx) {
                                                if let &InstructionData::Unary {
                                                    opcode: ref v29,
                                                    arg: v30,
                                                } = &v19.1 {
                                                    if let &Opcode::Uextend = v29 {
                                                        let v923 = C::value_type(ctx, v30);
                                                        let v958 = C::value_type(ctx, v27);
                                                        if v923 == v958 {
                                                            let v959 = constructor_band(ctx, v923, v30, v27);
                                                            let v960 = constructor_uextend(ctx, v2.0, v959);
                                                            // Rule at src\opts\extends.isle line 70.
                                                            returns.extend(Some(v960));
                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        let mut v18 = C::inst_data_value_etor_returns::default();
                                        C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            match &v19.1 {
                                                &InstructionData::Binary {
                                                    opcode: ref v122,
                                                    args: ref v123,
                                                } => {
                                                    if let &Opcode::Band = v122 {
                                                        if v2.0 == v11.0 {
                                                            if v2.0 == v19.0 {
                                                                let v124 = C::unpack_value_array_2(ctx, v123);
                                                                let mut v199 = C::inst_data_value_etor_returns::default();
                                                                C::inst_data_value_etor(ctx, v124.1, &mut v199);
                                                                let mut v199 = v199.into_context_iter();
                                                                while let Some(v200) = v199.next(ctx) {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v226,
                                                                        imm: v227,
                                                                    } = &v200.1 {
                                                                        if let &Opcode::Iconst = v226 {
                                                                            if v2.0 == v200.0 {
                                                                                let v627 = constructor_band(ctx, v2.0, v124.1, v7.1);
                                                                                let v628 = constructor_band(ctx, v2.0, v124.0, v627);
                                                                                // Rule at src\opts\cprop.isle line 160.
                                                                                returns.extend(Some(v628));
                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                &InstructionData::IntCompare {
                                                    opcode: ref v1031,
                                                    args: ref v1032,
                                                    cond: ref v1033,
                                                } => {
                                                    if let &Opcode::Icmp = v1031 {
                                                        let v16 = C::u64_from_imm64(ctx, v15);
                                                        if v16 == 0x1_u64 {
                                                            let v52 = C::ty_int(ctx, v2.0);
                                                            if let Some(v53) = v52 {
                                                                // Rule at src\opts\icmp.isle line 86.
                                                                returns.extend(Some(v7.0));
                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                            }
                                                        }
                                                    }
                                                }
                                                &InstructionData::Unary {
                                                    opcode: ref v29,
                                                    arg: v30,
                                                } => {
                                                    match v29 {
                                                        &Opcode::Uextend => {
                                                            let v16 = C::u64_from_imm64(ctx, v15);
                                                            if v16 == 0x1_u64 {
                                                                let v52 = C::ty_int(ctx, v2.0);
                                                                if let Some(v53) = v52 {
                                                                    let mut v1037 = C::inst_data_value_etor_returns::default();
                                                                    C::inst_data_value_etor(ctx, v30, &mut v1037);
                                                                    let mut v1037 = v1037.into_context_iter();
                                                                    while let Some(v1038) = v1037.next(ctx) {
                                                                        if let &InstructionData::IntCompare {
                                                                            opcode: ref v1041,
                                                                            args: ref v1042,
                                                                            cond: ref v1043,
                                                                        } = &v1038.1 {
                                                                            if let &Opcode::Icmp = v1041 {
                                                                                // Rule at src\opts\icmp.isle line 91.
                                                                                returns.extend(Some(v7.0));
                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            let v923 = C::value_type(ctx, v30);
                                                            let v924 = C::ty_mask(ctx, v923);
                                                            let v925 = C::u64_and(ctx, v16, v924);
                                                            let v926 = C::u64_eq(ctx, v924, v925);
                                                            if v926 == true {
                                                                // Rule at src\opts\extends.isle line 16.
                                                                returns.extend(Some(v7.0));
                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                            }
                                                        }
                                                        &Opcode::Sextend => {
                                                            let v16 = C::u64_from_imm64(ctx, v15);
                                                            let v923 = C::value_type(ctx, v30);
                                                            let v924 = C::ty_mask(ctx, v923);
                                                            let v927 = C::u64_eq(ctx, v16, v924);
                                                            if v927 == true {
                                                                let v928 = constructor_uextend(ctx, v2.0, v30);
                                                                // Rule at src\opts\extends.isle line 22.
                                                                returns.extend(Some(v928));
                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                                &InstructionData::UnaryImm {
                                                    opcode: ref v22,
                                                    imm: v23,
                                                } => {
                                                    if let &Opcode::Iconst = v22 {
                                                        let v526 = C::fits_in_64(ctx, v2.0);
                                                        if let Some(v527) = v526 {
                                                            if v11.0 == v19.0 {
                                                                if v11.0 == v527 {
                                                                    let v24 = C::u64_from_imm64(ctx, v23);
                                                                    let v16 = C::u64_from_imm64(ctx, v15);
                                                                    let v544 = C::u64_and(ctx, v24, v16);
                                                                    let v545 = C::imm64_masked(ctx, v527, v544);
                                                                    let v546 = constructor_iconst(ctx, v527, v545);
                                                                    let v547 = C::subsume(ctx, v546);
                                                                    // Rule at src\opts\cprop.isle line 38.
                                                                    returns.extend(Some(v547));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                        let v16 = C::u64_from_imm64(ctx, v15);
                                        if v16 == 0x0_u64 {
                                            if v2.0 == v11.0 {
                                                let v57 = C::subsume(ctx, v7.1);
                                                // Rule at src\opts\bitops.isle line 33.
                                                returns.extend(Some(v57));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                        let v1119 = C::remat(ctx, arg0);
                                        // Rule at src\opts\remat.isle line 13.
                                        returns.extend(Some(v1119));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v18 = C::inst_data_value_etor_returns::default();
                        C::inst_data_value_etor(ctx, v7.0, &mut v18);
                        let mut v18 = v18.into_context_iter();
                        while let Some(v19) = v18.next(ctx) {
                            match &v19.1 {
                                &InstructionData::Binary {
                                    opcode: ref v122,
                                    args: ref v123,
                                } => {
                                    if let &Opcode::Band = v122 {
                                        if v2.0 == v19.0 {
                                            let v124 = C::unpack_value_array_2(ctx, v123);
                                            let mut v127 = C::inst_data_value_etor_returns::default();
                                            C::inst_data_value_etor(ctx, v124.0, &mut v127);
                                            let mut v127 = v127.into_context_iter();
                                            while let Some(v128) = v127.next(ctx) {
                                                if let &InstructionData::Binary {
                                                    opcode: ref v131,
                                                    args: ref v132,
                                                } = &v128.1 {
                                                    if let &Opcode::Band = v131 {
                                                        if v2.0 == v128.0 {
                                                            let v133 = C::unpack_value_array_2(ctx, v132);
                                                            let v152 = constructor_band(ctx, v2.0, v133.0, v133.1);
                                                            let v153 = constructor_band(ctx, v2.0, v124.1, v7.1);
                                                            let v154 = constructor_band(ctx, v2.0, v152, v153);
                                                            let v155 = C::subsume(ctx, v154);
                                                            // Rule at src\opts\arithmetic.isle line 140.
                                                            returns.extend(Some(v155));
                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v29,
                                    arg: v30,
                                } => {
                                    if let &Opcode::Bnot = v29 {
                                        if v7.1 == v30 {
                                            let v52 = C::ty_int(ctx, v2.0);
                                            if let Some(v53) = v52 {
                                                if v19.0 == v53 {
                                                    let v55 = constructor_iconst_u(ctx, v53, 0x0_u64);
                                                    let v56 = C::subsume(ctx, v55);
                                                    // Rule at src\opts\bitops.isle line 35.
                                                    returns.extend(Some(v56));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v22,
                                    imm: v23,
                                } => {
                                    if let &Opcode::Iconst = v22 {
                                        if v2.0 == v19.0 {
                                            let v597 = constructor_band(ctx, v2.0, v7.1, v7.0);
                                            // Rule at src\opts\cprop.isle line 107.
                                            returns.extend(Some(v597));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        let v1119 = C::remat(ctx, arg0);
                                        // Rule at src\opts\remat.isle line 11.
                                        returns.extend(Some(v1119));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                                _ => {}
                            }
                        }
                        if v7.0 == v7.1 {
                            let v17 = C::subsume(ctx, v7.0);
                            // Rule at src\opts\bitops.isle line 28.
                            returns.extend(Some(v17));
                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                        }
                        let mut v58 = C::inst_data_value_tupled_etor_returns::default();
                        C::inst_data_value_tupled_etor(ctx, v7.1, &mut v58);
                        let mut v58 = v58.into_context_iter();
                        while let Some(v59) = v58.next(ctx) {
                            let v60 = C::iconst_sextend_etor(ctx, v59);
                            if let Some(v61) = v60 {
                                if v61.1 == -1_i64 {
                                    if v2.0 == v61.0 {
                                        let v17 = C::subsume(ctx, v7.0);
                                        // Rule at src\opts\bitops.isle line 29.
                                        returns.extend(Some(v17));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Bor => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_value_etor_returns::default();
                        C::inst_data_value_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Binary {
                                    opcode: ref v104,
                                    args: ref v105,
                                } => {
                                    match v104 {
                                        &Opcode::Band => {
                                            let mut v18 = C::inst_data_value_etor_returns::default();
                                            C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                            let mut v18 = v18.into_context_iter();
                                            while let Some(v19) = v18.next(ctx) {
                                                match &v19.1 {
                                                    &InstructionData::Binary {
                                                        opcode: ref v122,
                                                        args: ref v123,
                                                    } => {
                                                        if let &Opcode::Band = v122 {
                                                            let v1158 = C::ty_vec128(ctx, v2.0);
                                                            if let Some(v1159) = v1158 {
                                                                if v11.0 == v19.0 {
                                                                    if v11.0 == v1159 {
                                                                        let v106 = C::unpack_value_array_2(ctx, v105);
                                                                        let mut v109 = C::inst_data_value_etor_returns::default();
                                                                        C::inst_data_value_etor(ctx, v106.1, &mut v109);
                                                                        let mut v109 = v109.into_context_iter();
                                                                        while let Some(v110) = v109.next(ctx) {
                                                                            if let &InstructionData::Unary {
                                                                                opcode: ref v1163,
                                                                                arg: v1164,
                                                                            } = &v110.1 {
                                                                                if let &Opcode::Bnot = v1163 {
                                                                                    if v11.0 == v110.0 {
                                                                                        let v124 = C::unpack_value_array_2(ctx, v123);
                                                                                        if v124.0 == v1164 {
                                                                                            let v1165 = constructor_bitselect(ctx, v1159, v124.0, v124.1, v106.0);
                                                                                            // Rule at src\opts\selects.isle line 70.
                                                                                            returns.extend(Some(v1165));
                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                        }
                                                                                        if v124.1 == v1164 {
                                                                                            let v1167 = constructor_bitselect(ctx, v1159, v124.1, v124.0, v106.0);
                                                                                            // Rule at src\opts\selects.isle line 72.
                                                                                            returns.extend(Some(v1167));
                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        let v124 = C::unpack_value_array_2(ctx, v123);
                                                                        let mut v127 = C::inst_data_value_etor_returns::default();
                                                                        C::inst_data_value_etor(ctx, v124.0, &mut v127);
                                                                        let mut v127 = v127.into_context_iter();
                                                                        while let Some(v128) = v127.next(ctx) {
                                                                            if let &InstructionData::Unary {
                                                                                opcode: ref v196,
                                                                                arg: v197,
                                                                            } = &v128.1 {
                                                                                if let &Opcode::Bnot = v196 {
                                                                                    if v11.0 == v128.0 {
                                                                                        if v106.1 == v197 {
                                                                                            let v1169 = constructor_bitselect(ctx, v1159, v197, v106.0, v124.1);
                                                                                            // Rule at src\opts\selects.isle line 74.
                                                                                            returns.extend(Some(v1169));
                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                        }
                                                                                        if v106.0 == v197 {
                                                                                            let v1168 = constructor_bitselect(ctx, v1159, v197, v106.1, v124.1);
                                                                                            // Rule at src\opts\selects.isle line 73.
                                                                                            returns.extend(Some(v1168));
                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        let mut v199 = C::inst_data_value_etor_returns::default();
                                                                        C::inst_data_value_etor(ctx, v124.1, &mut v199);
                                                                        let mut v199 = v199.into_context_iter();
                                                                        while let Some(v200) = v199.next(ctx) {
                                                                            if let &InstructionData::Unary {
                                                                                opcode: ref v203,
                                                                                arg: v204,
                                                                            } = &v200.1 {
                                                                                if let &Opcode::Bnot = v203 {
                                                                                    if v11.0 == v200.0 {
                                                                                        if v106.1 == v204 {
                                                                                            let v1171 = constructor_bitselect(ctx, v1159, v204, v106.0, v124.0);
                                                                                            // Rule at src\opts\selects.isle line 76.
                                                                                            returns.extend(Some(v1171));
                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                        }
                                                                                        if v106.0 == v204 {
                                                                                            let v1170 = constructor_bitselect(ctx, v1159, v204, v106.1, v124.0);
                                                                                            // Rule at src\opts\selects.isle line 75.
                                                                                            returns.extend(Some(v1170));
                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        let mut v309 = C::inst_data_value_etor_returns::default();
                                                                        C::inst_data_value_etor(ctx, v106.0, &mut v309);
                                                                        let mut v309 = v309.into_context_iter();
                                                                        while let Some(v310) = v309.next(ctx) {
                                                                            if let &InstructionData::Unary {
                                                                                opcode: ref v1160,
                                                                                arg: v1161,
                                                                            } = &v310.1 {
                                                                                if let &Opcode::Bnot = v1160 {
                                                                                    if v11.0 == v310.0 {
                                                                                        if v124.0 == v1161 {
                                                                                            let v1162 = constructor_bitselect(ctx, v1159, v124.0, v124.1, v106.1);
                                                                                            // Rule at src\opts\selects.isle line 69.
                                                                                            returns.extend(Some(v1162));
                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                        }
                                                                                        if v124.1 == v1161 {
                                                                                            let v1166 = constructor_bitselect(ctx, v1159, v124.1, v124.0, v106.1);
                                                                                            // Rule at src\opts\selects.isle line 71.
                                                                                            returns.extend(Some(v1166));
                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &InstructionData::Unary {
                                                        opcode: ref v29,
                                                        arg: v30,
                                                    } => {
                                                        if let &Opcode::Bnot = v29 {
                                                            if v2.0 == v11.0 {
                                                                if v2.0 == v19.0 {
                                                                    let v106 = C::unpack_value_array_2(ctx, v105);
                                                                    if v30 == v106.1 {
                                                                        let v225 = constructor_bor(ctx, v2.0, v106.0, v7.0);
                                                                        // Rule at src\opts\bitops.isle line 58.
                                                                        returns.extend(Some(v225));
                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                        &Opcode::Bor => {
                                            let mut v18 = C::inst_data_value_etor_returns::default();
                                            C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                            let mut v18 = v18.into_context_iter();
                                            while let Some(v19) = v18.next(ctx) {
                                                if let &InstructionData::Binary {
                                                    opcode: ref v122,
                                                    args: ref v123,
                                                } = &v19.1 {
                                                    if let &Opcode::Bor = v122 {
                                                        let v106 = C::unpack_value_array_2(ctx, v105);
                                                        let mut v109 = C::inst_data_value_etor_returns::default();
                                                        C::inst_data_value_etor(ctx, v106.1, &mut v109);
                                                        let mut v109 = v109.into_context_iter();
                                                        while let Some(v110) = v109.next(ctx) {
                                                            match &v110.1 {
                                                                &InstructionData::Binary {
                                                                    opcode: ref v113,
                                                                    args: ref v114,
                                                                } => {
                                                                    match v113 {
                                                                        &Opcode::Bor => {
                                                                            if v2.0 == I64 {
                                                                                if v11.0 == I64 {
                                                                                    if v19.0 == I64 {
                                                                                        if v110.0 == I64 {
                                                                                            let v124 = C::unpack_value_array_2(ctx, v123);
                                                                                            let mut v127 = C::inst_data_value_etor_returns::default();
                                                                                            C::inst_data_value_etor(ctx, v124.0, &mut v127);
                                                                                            let mut v127 = v127.into_context_iter();
                                                                                            while let Some(v128) = v127.next(ctx) {
                                                                                                if v128.0 == I64 {
                                                                                                    if let &InstructionData::Binary {
                                                                                                        opcode: ref v131,
                                                                                                        args: ref v132,
                                                                                                    } = &v128.1 {
                                                                                                        if let &Opcode::Bor = v131 {
                                                                                                            let mut v199 = C::inst_data_value_etor_returns::default();
                                                                                                            C::inst_data_value_etor(ctx, v124.1, &mut v199);
                                                                                                            let mut v199 = v199.into_context_iter();
                                                                                                            while let Some(v200) = v199.next(ctx) {
                                                                                                                if v200.0 == I64 {
                                                                                                                    if let &InstructionData::Binary {
                                                                                                                        opcode: ref v281,
                                                                                                                        args: ref v282,
                                                                                                                    } = &v200.1 {
                                                                                                                        if let &Opcode::Bor = v281 {
                                                                                                                            let v133 = C::unpack_value_array_2(ctx, v132);
                                                                                                                            let mut v274 = C::inst_data_value_etor_returns::default();
                                                                                                                            C::inst_data_value_etor(ctx, v133.1, &mut v274);
                                                                                                                            let mut v274 = v274.into_context_iter();
                                                                                                                            while let Some(v275) = v274.next(ctx) {
                                                                                                                                if v275.0 == I64 {
                                                                                                                                    if let &InstructionData::Binary {
                                                                                                                                        opcode: ref v365,
                                                                                                                                        args: ref v366,
                                                                                                                                    } = &v275.1 {
                                                                                                                                        if let &Opcode::Ishl = v365 {
                                                                                                                                            let v283 = C::unpack_value_array_2(ctx, v282);
                                                                                                                                            let mut v286 = C::inst_data_value_etor_returns::default();
                                                                                                                                            C::inst_data_value_etor(ctx, v283.0, &mut v286);
                                                                                                                                            let mut v286 = v286.into_context_iter();
                                                                                                                                            while let Some(v287) = v286.next(ctx) {
                                                                                                                                                if v287.0 == I64 {
                                                                                                                                                    if let &InstructionData::Binary {
                                                                                                                                                        opcode: ref v290,
                                                                                                                                                        args: ref v291,
                                                                                                                                                    } = &v287.1 {
                                                                                                                                                        if let &Opcode::Ishl = v290 {
                                                                                                                                                            let v292 = C::unpack_value_array_2(ctx, v291);
                                                                                                                                                            let mut v295 = C::inst_data_value_etor_returns::default();
                                                                                                                                                            C::inst_data_value_etor(ctx, v292.1, &mut v295);
                                                                                                                                                            let mut v295 = v295.into_context_iter();
                                                                                                                                                            while let Some(v296) = v295.next(ctx) {
                                                                                                                                                                if v296.0 == I64 {
                                                                                                                                                                    if let &InstructionData::UnaryImm {
                                                                                                                                                                        opcode: ref v299,
                                                                                                                                                                        imm: v300,
                                                                                                                                                                    } = &v296.1 {
                                                                                                                                                                        if let &Opcode::Iconst = v299 {
                                                                                                                                                                            let v301 = C::u64_from_imm64(ctx, v300);
                                                                                                                                                                            if v301 == 0x18_u64 {
                                                                                                                                                                                let mut v302 = C::inst_data_value_etor_returns::default();
                                                                                                                                                                                C::inst_data_value_etor(ctx, v283.1, &mut v302);
                                                                                                                                                                                let mut v302 = v302.into_context_iter();
                                                                                                                                                                                while let Some(v303) = v302.next(ctx) {
                                                                                                                                                                                    if v303.0 == I64 {
                                                                                                                                                                                        if let &InstructionData::Binary {
                                                                                                                                                                                            opcode: ref v409,
                                                                                                                                                                                            args: ref v410,
                                                                                                                                                                                        } = &v303.1 {
                                                                                                                                                                                            if let &Opcode::Ishl = v409 {
                                                                                                                                                                                                let mut v309 = C::inst_data_value_etor_returns::default();
                                                                                                                                                                                                C::inst_data_value_etor(ctx, v106.0, &mut v309);
                                                                                                                                                                                                let mut v309 = v309.into_context_iter();
                                                                                                                                                                                                while let Some(v310) = v309.next(ctx) {
                                                                                                                                                                                                    if v310.0 == I64 {
                                                                                                                                                                                                        if let &InstructionData::Binary {
                                                                                                                                                                                                            opcode: ref v313,
                                                                                                                                                                                                            args: ref v314,
                                                                                                                                                                                                        } = &v310.1 {
                                                                                                                                                                                                            if let &Opcode::Bor = v313 {
                                                                                                                                                                                                                let v315 = C::unpack_value_array_2(ctx, v314);
                                                                                                                                                                                                                let mut v318 = C::inst_data_value_etor_returns::default();
                                                                                                                                                                                                                C::inst_data_value_etor(ctx, v315.0, &mut v318);
                                                                                                                                                                                                                let mut v318 = v318.into_context_iter();
                                                                                                                                                                                                                while let Some(v319) = v318.next(ctx) {
                                                                                                                                                                                                                    if v319.0 == I64 {
                                                                                                                                                                                                                        if let &InstructionData::Binary {
                                                                                                                                                                                                                            opcode: ref v322,
                                                                                                                                                                                                                            args: ref v323,
                                                                                                                                                                                                                        } = &v319.1 {
                                                                                                                                                                                                                            if let &Opcode::Band = v322 {
                                                                                                                                                                                                                                let v324 = C::unpack_value_array_2(ctx, v323);
                                                                                                                                                                                                                                let mut v327 = C::inst_data_value_etor_returns::default();
                                                                                                                                                                                                                                C::inst_data_value_etor(ctx, v324.1, &mut v327);
                                                                                                                                                                                                                                let mut v327 = v327.into_context_iter();
                                                                                                                                                                                                                                while let Some(v328) = v327.next(ctx) {
                                                                                                                                                                                                                                    if v328.0 == I64 {
                                                                                                                                                                                                                                        if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                            opcode: ref v331,
                                                                                                                                                                                                                                            imm: v332,
                                                                                                                                                                                                                                        } = &v328.1 {
                                                                                                                                                                                                                                            if let &Opcode::Iconst = v331 {
                                                                                                                                                                                                                                                let v333 = C::u64_from_imm64(ctx, v332);
                                                                                                                                                                                                                                                if v333 == 0xff000000_u64 {
                                                                                                                                                                                                                                                    let mut v334 = C::inst_data_value_etor_returns::default();
                                                                                                                                                                                                                                                    C::inst_data_value_etor(ctx, v315.1, &mut v334);
                                                                                                                                                                                                                                                    let mut v334 = v334.into_context_iter();
                                                                                                                                                                                                                                                    while let Some(v335) = v334.next(ctx) {
                                                                                                                                                                                                                                                        if v335.0 == I64 {
                                                                                                                                                                                                                                                            if let &InstructionData::Binary {
                                                                                                                                                                                                                                                                opcode: ref v453,
                                                                                                                                                                                                                                                                args: ref v454,
                                                                                                                                                                                                                                                            } = &v335.1 {
                                                                                                                                                                                                                                                                if let &Opcode::Band = v453 {
                                                                                                                                                                                                                                                                    let v115 = C::unpack_value_array_2(ctx, v114);
                                                                                                                                                                                                                                                                    let mut v341 = C::inst_data_value_etor_returns::default();
                                                                                                                                                                                                                                                                    C::inst_data_value_etor(ctx, v115.1, &mut v341);
                                                                                                                                                                                                                                                                    let mut v341 = v341.into_context_iter();
                                                                                                                                                                                                                                                                    while let Some(v342) = v341.next(ctx) {
                                                                                                                                                                                                                                                                        if v342.0 == I64 {
                                                                                                                                                                                                                                                                            if let &InstructionData::Binary {
                                                                                                                                                                                                                                                                                opcode: ref v513,
                                                                                                                                                                                                                                                                                args: ref v514,
                                                                                                                                                                                                                                                                            } = &v342.1 {
                                                                                                                                                                                                                                                                                if let &Opcode::Ushr = v513 {
                                                                                                                                                                                                                                                                                    let mut v349 = C::inst_data_value_etor_returns::default();
                                                                                                                                                                                                                                                                                    C::inst_data_value_etor(ctx, v133.0, &mut v349);
                                                                                                                                                                                                                                                                                    let mut v349 = v349.into_context_iter();
                                                                                                                                                                                                                                                                                    while let Some(v350) = v349.next(ctx) {
                                                                                                                                                                                                                                                                                        if v350.0 == I64 {
                                                                                                                                                                                                                                                                                            if let &InstructionData::Binary {
                                                                                                                                                                                                                                                                                                opcode: ref v353,
                                                                                                                                                                                                                                                                                                args: ref v354,
                                                                                                                                                                                                                                                                                            } = &v350.1 {
                                                                                                                                                                                                                                                                                                if let &Opcode::Ishl = v353 {
                                                                                                                                                                                                                                                                                                    let v355 = C::unpack_value_array_2(ctx, v354);
                                                                                                                                                                                                                                                                                                    let v515 = C::unpack_value_array_2(ctx, v514);
                                                                                                                                                                                                                                                                                                    if v355.0 == v515.0 {
                                                                                                                                                                                                                                                                                                        let mut v358 = C::inst_data_value_etor_returns::default();
                                                                                                                                                                                                                                                                                                        C::inst_data_value_etor(ctx, v355.1, &mut v358);
                                                                                                                                                                                                                                                                                                        let mut v358 = v358.into_context_iter();
                                                                                                                                                                                                                                                                                                        while let Some(v359) = v358.next(ctx) {
                                                                                                                                                                                                                                                                                                            if v359.0 == I64 {
                                                                                                                                                                                                                                                                                                                if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                                                                                    opcode: ref v362,
                                                                                                                                                                                                                                                                                                                    imm: v363,
                                                                                                                                                                                                                                                                                                                } = &v359.1 {
                                                                                                                                                                                                                                                                                                                    if let &Opcode::Iconst = v362 {
                                                                                                                                                                                                                                                                                                                        let v364 = C::u64_from_imm64(ctx, v363);
                                                                                                                                                                                                                                                                                                                        if v364 == 0x38_u64 {
                                                                                                                                                                                                                                                                                                                            let v367 = C::unpack_value_array_2(ctx, v366);
                                                                                                                                                                                                                                                                                                                            let mut v370 = C::inst_data_value_etor_returns::default();
                                                                                                                                                                                                                                                                                                                            C::inst_data_value_etor(ctx, v367.0, &mut v370);
                                                                                                                                                                                                                                                                                                                            let mut v370 = v370.into_context_iter();
                                                                                                                                                                                                                                                                                                                            while let Some(v371) = v370.next(ctx) {
                                                                                                                                                                                                                                                                                                                                if v371.0 == I64 {
                                                                                                                                                                                                                                                                                                                                    if let &InstructionData::Binary {
                                                                                                                                                                                                                                                                                                                                        opcode: ref v374,
                                                                                                                                                                                                                                                                                                                                        args: ref v375,
                                                                                                                                                                                                                                                                                                                                    } = &v371.1 {
                                                                                                                                                                                                                                                                                                                                        if let &Opcode::Band = v374 {
                                                                                                                                                                                                                                                                                                                                            let v376 = C::unpack_value_array_2(ctx, v375);
                                                                                                                                                                                                                                                                                                                                            if v355.0 == v376.0 {
                                                                                                                                                                                                                                                                                                                                                let mut v379 = C::inst_data_value_etor_returns::default();
                                                                                                                                                                                                                                                                                                                                                C::inst_data_value_etor(ctx, v376.1, &mut v379);
                                                                                                                                                                                                                                                                                                                                                let mut v379 = v379.into_context_iter();
                                                                                                                                                                                                                                                                                                                                                while let Some(v380) = v379.next(ctx) {
                                                                                                                                                                                                                                                                                                                                                    if v380.0 == I64 {
                                                                                                                                                                                                                                                                                                                                                        if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                                                                                                                            opcode: ref v383,
                                                                                                                                                                                                                                                                                                                                                            imm: v384,
                                                                                                                                                                                                                                                                                                                                                        } = &v380.1 {
                                                                                                                                                                                                                                                                                                                                                            if let &Opcode::Iconst = v383 {
                                                                                                                                                                                                                                                                                                                                                                let v385 = C::u64_from_imm64(ctx, v384);
                                                                                                                                                                                                                                                                                                                                                                if v385 == 0xff00_u64 {
                                                                                                                                                                                                                                                                                                                                                                    let mut v386 = C::inst_data_value_etor_returns::default();
                                                                                                                                                                                                                                                                                                                                                                    C::inst_data_value_etor(ctx, v367.1, &mut v386);
                                                                                                                                                                                                                                                                                                                                                                    let mut v386 = v386.into_context_iter();
                                                                                                                                                                                                                                                                                                                                                                    while let Some(v387) = v386.next(ctx) {
                                                                                                                                                                                                                                                                                                                                                                        if v387.0 == I64 {
                                                                                                                                                                                                                                                                                                                                                                            if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                                                                                                                                                opcode: ref v390,
                                                                                                                                                                                                                                                                                                                                                                                imm: v391,
                                                                                                                                                                                                                                                                                                                                                                            } = &v387.1 {
                                                                                                                                                                                                                                                                                                                                                                                if let &Opcode::Iconst = v390 {
                                                                                                                                                                                                                                                                                                                                                                                    let v392 = C::u64_from_imm64(ctx, v391);
                                                                                                                                                                                                                                                                                                                                                                                    if v392 == 0x28_u64 {
                                                                                                                                                                                                                                                                                                                                                                                        let mut v393 = C::inst_data_value_etor_returns::default();
                                                                                                                                                                                                                                                                                                                                                                                        C::inst_data_value_etor(ctx, v292.0, &mut v393);
                                                                                                                                                                                                                                                                                                                                                                                        let mut v393 = v393.into_context_iter();
                                                                                                                                                                                                                                                                                                                                                                                        while let Some(v394) = v393.next(ctx) {
                                                                                                                                                                                                                                                                                                                                                                                            if v394.0 == I64 {
                                                                                                                                                                                                                                                                                                                                                                                                if let &InstructionData::Binary {
                                                                                                                                                                                                                                                                                                                                                                                                    opcode: ref v397,
                                                                                                                                                                                                                                                                                                                                                                                                    args: ref v398,
                                                                                                                                                                                                                                                                                                                                                                                                } = &v394.1 {
                                                                                                                                                                                                                                                                                                                                                                                                    if let &Opcode::Band = v397 {
                                                                                                                                                                                                                                                                                                                                                                                                        let v399 = C::unpack_value_array_2(ctx, v398);
                                                                                                                                                                                                                                                                                                                                                                                                        if v355.0 == v399.0 {
                                                                                                                                                                                                                                                                                                                                                                                                            let mut v402 = C::inst_data_value_etor_returns::default();
                                                                                                                                                                                                                                                                                                                                                                                                            C::inst_data_value_etor(ctx, v399.1, &mut v402);
                                                                                                                                                                                                                                                                                                                                                                                                            let mut v402 = v402.into_context_iter();
                                                                                                                                                                                                                                                                                                                                                                                                            while let Some(v403) = v402.next(ctx) {
                                                                                                                                                                                                                                                                                                                                                                                                                if v403.0 == I64 {
                                                                                                                                                                                                                                                                                                                                                                                                                    if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                                                                                                                                                                                        opcode: ref v406,
                                                                                                                                                                                                                                                                                                                                                                                                                        imm: v407,
                                                                                                                                                                                                                                                                                                                                                                                                                    } = &v403.1 {
                                                                                                                                                                                                                                                                                                                                                                                                                        if let &Opcode::Iconst = v406 {
                                                                                                                                                                                                                                                                                                                                                                                                                            let v408 = C::u64_from_imm64(ctx, v407);
                                                                                                                                                                                                                                                                                                                                                                                                                            if v408 == 0xff0000_u64 {
                                                                                                                                                                                                                                                                                                                                                                                                                                let v411 = C::unpack_value_array_2(ctx, v410);
                                                                                                                                                                                                                                                                                                                                                                                                                                let mut v414 = C::inst_data_value_etor_returns::default();
                                                                                                                                                                                                                                                                                                                                                                                                                                C::inst_data_value_etor(ctx, v411.0, &mut v414);
                                                                                                                                                                                                                                                                                                                                                                                                                                let mut v414 = v414.into_context_iter();
                                                                                                                                                                                                                                                                                                                                                                                                                                while let Some(v415) = v414.next(ctx) {
                                                                                                                                                                                                                                                                                                                                                                                                                                    if v415.0 == I64 {
                                                                                                                                                                                                                                                                                                                                                                                                                                        if let &InstructionData::Binary {
                                                                                                                                                                                                                                                                                                                                                                                                                                            opcode: ref v418,
                                                                                                                                                                                                                                                                                                                                                                                                                                            args: ref v419,
                                                                                                                                                                                                                                                                                                                                                                                                                                        } = &v415.1 {
                                                                                                                                                                                                                                                                                                                                                                                                                                            if let &Opcode::Band = v418 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                let v420 = C::unpack_value_array_2(ctx, v419);
                                                                                                                                                                                                                                                                                                                                                                                                                                                if v355.0 == v420.0 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                    let mut v423 = C::inst_data_value_etor_returns::default();
                                                                                                                                                                                                                                                                                                                                                                                                                                                    C::inst_data_value_etor(ctx, v420.1, &mut v423);
                                                                                                                                                                                                                                                                                                                                                                                                                                                    let mut v423 = v423.into_context_iter();
                                                                                                                                                                                                                                                                                                                                                                                                                                                    while let Some(v424) = v423.next(ctx) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                        if v424.0 == I64 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                            if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                opcode: ref v427,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                imm: v428,
                                                                                                                                                                                                                                                                                                                                                                                                                                                            } = &v424.1 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                if let &Opcode::Iconst = v427 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    let v429 = C::u64_from_imm64(ctx, v428);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if v429 == 0xff000000_u64 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        let mut v430 = C::inst_data_value_etor_returns::default();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        C::inst_data_value_etor(ctx, v411.1, &mut v430);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        let mut v430 = v430.into_context_iter();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        while let Some(v431) = v430.next(ctx) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if v431.0 == I64 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    opcode: ref v434,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    imm: v435,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                } = &v431.1 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if let &Opcode::Iconst = v434 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        let v436 = C::u64_from_imm64(ctx, v435);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if v436 == 0x8_u64 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            let mut v437 = C::inst_data_value_etor_returns::default();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            C::inst_data_value_etor(ctx, v324.0, &mut v437);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            let mut v437 = v437.into_context_iter();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            while let Some(v438) = v437.next(ctx) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if v438.0 == I64 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if let &InstructionData::Binary {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        opcode: ref v441,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        args: ref v442,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    } = &v438.1 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if let &Opcode::Ushr = v441 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            let v443 = C::unpack_value_array_2(ctx, v442);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if v355.0 == v443.0 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                let mut v446 = C::inst_data_value_etor_returns::default();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                C::inst_data_value_etor(ctx, v443.1, &mut v446);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                let mut v446 = v446.into_context_iter();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                while let Some(v447) = v446.next(ctx) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if v447.0 == I64 {
if let &InstructionData::UnaryImm {
opcode: ref v450,
imm: v451,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        } = &v447.1 {
if let &Opcode::Iconst = v450 {
let v452 = C::u64_from_imm64(ctx, v451);
if v452 == 0x8_u64 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    let v455 = C::unpack_value_array_2(ctx, v454);
let mut v458 = C::inst_data_value_etor_returns::default();
inst_data_value_etor(ctx, v455.0, &mut v458);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    let mut v458 = v458.into_context_iter();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    while let Some(v459) = v458.next(ctx) {
if v459.0 == I64 {
if let &InstructionData::Binary {
opcode: ref v462,
args: ref v463,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            } = &v459.1 {
if let &Opcode::Ushr = v462 {
let v464 = C::unpack_value_array_2(ctx, v463);
if v355.0 == v464.0 {
let mut v467 = C::inst_data_value_etor_returns::default();
inst_data_value_etor(ctx, v464.1, &mut v467);
let mut v467 = v467.into_context_iter();
while let Some(v468) = v467.next(ctx) {
if v468.0 == I64 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if let &InstructionData::UnaryImm {
opcode: ref v471,
imm: v472,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                } = &v468.1 {
if let &Opcode::Iconst = v471 {
let v473 = C::u64_from_imm64(ctx, v472);
if v473 == 0x18_u64 {
let mut v474 = C::inst_data_value_etor_returns::default();
inst_data_value_etor(ctx, v455.1, &mut v474);
let mut v474 = v474.into_context_iter();
while let Some(v475) = v474.next(ctx) {
if v475.0 == I64 {
if let &InstructionData::UnaryImm {
opcode: ref v478,
imm: v479,
} = &v475.1 {
if let &Opcode::Iconst = v478 {
let v480 = C::u64_from_imm64(ctx, v479);
if v480 == 0xff0000_u64 {
let mut v481 = C::inst_data_value_etor_returns::default();
inst_data_value_etor(ctx, v115.0, &mut v481);
let mut v481 = v481.into_context_iter();
while let Some(v482) = v481.next(ctx) {
if v482.0 == I64 {
if let &InstructionData::Binary {
opcode: ref v485,
args: ref v486,
} = &v482.1 {
if let &Opcode::Band = v485 {
let v487 = C::unpack_value_array_2(ctx, v486);
let mut v490 = C::inst_data_value_etor_returns::default();
inst_data_value_etor(ctx, v487.0, &mut v490);
let mut v490 = v490.into_context_iter();
while let Some(v491) = v490.next(ctx) {
if v491.0 == I64 {
if let &InstructionData::Binary {
opcode: ref v494,
args: ref v495,
} = &v491.1 {
if let &Opcode::Ushr = v494 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                let v496 = C::unpack_value_array_2(ctx, v495);
if v355.0 == v496.0 {
let mut v499 = C::inst_data_value_etor_returns::default();
inst_data_value_etor(ctx, v496.1, &mut v499);
let mut v499 = v499.into_context_iter();
while let Some(v500) = v499.next(ctx) {
if v500.0 == I64 {
if let &InstructionData::UnaryImm {
opcode: ref v503,
imm: v504,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            } = &v500.1 {
if let &Opcode::Iconst = v503 {
let v505 = C::u64_from_imm64(ctx, v504);
if v505 == 0x28_u64 {
let mut v506 = C::inst_data_value_etor_returns::default();
inst_data_value_etor(ctx, v487.1, &mut v506);
let mut v506 = v506.into_context_iter();
while let Some(v507) = v506.next(ctx) {
if v507.0 == I64 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if let &InstructionData::UnaryImm {
opcode: ref v510,
imm: v511,
} = &v507.1 {
if let &Opcode::Iconst = v510 {
let v512 = C::u64_from_imm64(ctx, v511);
if v512 == 0xff00_u64 {
let mut v518 = C::inst_data_value_etor_returns::default();
inst_data_value_etor(ctx, v515.1, &mut v518);
let mut v518 = v518.into_context_iter();
while let Some(v519) = v518.next(ctx) {
if v519.0 == I64 {
if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        opcode: ref v522,
imm: v523,
} = &v519.1 {
if let &Opcode::Iconst = v522 {
let v524 = C::u64_from_imm64(ctx, v523);
if v524 == 0x38_u64 {
let v525 = constructor_bswap(ctx, v2.0, v355.0);
ule at src\opts\bitops.isle line 160.
returns.extend(Some(v525));
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
}
}
}
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                }
                                                                                                                                                                                                            }
                                                                                                                                                                                                        }
                                                                                                                                                                                                    }
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        &Opcode::Ushr => {
                                                                            if v2.0 == I32 {
                                                                                if v11.0 == I32 {
                                                                                    if v19.0 == I32 {
                                                                                        if v110.0 == I32 {
                                                                                            let v124 = C::unpack_value_array_2(ctx, v123);
                                                                                            let mut v127 = C::inst_data_value_etor_returns::default();
                                                                                            C::inst_data_value_etor(ctx, v124.0, &mut v127);
                                                                                            let mut v127 = v127.into_context_iter();
                                                                                            while let Some(v128) = v127.next(ctx) {
                                                                                                if v128.0 == I32 {
                                                                                                    if let &InstructionData::Binary {
                                                                                                        opcode: ref v131,
                                                                                                        args: ref v132,
                                                                                                    } = &v128.1 {
                                                                                                        if let &Opcode::Ishl = v131 {
                                                                                                            let v115 = C::unpack_value_array_2(ctx, v114);
                                                                                                            let v133 = C::unpack_value_array_2(ctx, v132);
                                                                                                            if v115.0 == v133.0 {
                                                                                                                let mut v199 = C::inst_data_value_etor_returns::default();
                                                                                                                C::inst_data_value_etor(ctx, v124.1, &mut v199);
                                                                                                                let mut v199 = v199.into_context_iter();
                                                                                                                while let Some(v200) = v199.next(ctx) {
                                                                                                                    if v200.0 == I32 {
                                                                                                                        if let &InstructionData::Binary {
                                                                                                                            opcode: ref v281,
                                                                                                                            args: ref v282,
                                                                                                                        } = &v200.1 {
                                                                                                                            if let &Opcode::Ishl = v281 {
                                                                                                                                let mut v274 = C::inst_data_value_etor_returns::default();
                                                                                                                                C::inst_data_value_etor(ctx, v133.1, &mut v274);
                                                                                                                                let mut v274 = v274.into_context_iter();
                                                                                                                                while let Some(v275) = v274.next(ctx) {
                                                                                                                                    if v275.0 == I32 {
                                                                                                                                        if let &InstructionData::UnaryImm {
                                                                                                                                            opcode: ref v278,
                                                                                                                                            imm: v279,
                                                                                                                                        } = &v275.1 {
                                                                                                                                            if let &Opcode::Iconst = v278 {
                                                                                                                                                let v280 = C::u64_from_imm64(ctx, v279);
                                                                                                                                                if v280 == 0x18_u64 {
                                                                                                                                                    let v283 = C::unpack_value_array_2(ctx, v282);
                                                                                                                                                    let mut v286 = C::inst_data_value_etor_returns::default();
                                                                                                                                                    C::inst_data_value_etor(ctx, v283.0, &mut v286);
                                                                                                                                                    let mut v286 = v286.into_context_iter();
                                                                                                                                                    while let Some(v287) = v286.next(ctx) {
                                                                                                                                                        if v287.0 == I32 {
                                                                                                                                                            if let &InstructionData::Binary {
                                                                                                                                                                opcode: ref v290,
                                                                                                                                                                args: ref v291,
                                                                                                                                                            } = &v287.1 {
                                                                                                                                                                if let &Opcode::Band = v290 {
                                                                                                                                                                    let v292 = C::unpack_value_array_2(ctx, v291);
                                                                                                                                                                    if v115.0 == v292.0 {
                                                                                                                                                                        let mut v295 = C::inst_data_value_etor_returns::default();
                                                                                                                                                                        C::inst_data_value_etor(ctx, v292.1, &mut v295);
                                                                                                                                                                        let mut v295 = v295.into_context_iter();
                                                                                                                                                                        while let Some(v296) = v295.next(ctx) {
                                                                                                                                                                            if v296.0 == I32 {
                                                                                                                                                                                if let &InstructionData::UnaryImm {
                                                                                                                                                                                    opcode: ref v299,
                                                                                                                                                                                    imm: v300,
                                                                                                                                                                                } = &v296.1 {
                                                                                                                                                                                    if let &Opcode::Iconst = v299 {
                                                                                                                                                                                        let v301 = C::u64_from_imm64(ctx, v300);
                                                                                                                                                                                        if v301 == 0xff00_u64 {
                                                                                                                                                                                            let mut v302 = C::inst_data_value_etor_returns::default();
                                                                                                                                                                                            C::inst_data_value_etor(ctx, v283.1, &mut v302);
                                                                                                                                                                                            let mut v302 = v302.into_context_iter();
                                                                                                                                                                                            while let Some(v303) = v302.next(ctx) {
                                                                                                                                                                                                if v303.0 == I32 {
                                                                                                                                                                                                    if let &InstructionData::UnaryImm {
                                                                                                                                                                                                        opcode: ref v306,
                                                                                                                                                                                                        imm: v307,
                                                                                                                                                                                                    } = &v303.1 {
                                                                                                                                                                                                        if let &Opcode::Iconst = v306 {
                                                                                                                                                                                                            let v308 = C::u64_from_imm64(ctx, v307);
                                                                                                                                                                                                            if v308 == 0x8_u64 {
                                                                                                                                                                                                                let mut v309 = C::inst_data_value_etor_returns::default();
                                                                                                                                                                                                                C::inst_data_value_etor(ctx, v106.0, &mut v309);
                                                                                                                                                                                                                let mut v309 = v309.into_context_iter();
                                                                                                                                                                                                                while let Some(v310) = v309.next(ctx) {
                                                                                                                                                                                                                    if v310.0 == I32 {
                                                                                                                                                                                                                        if let &InstructionData::Binary {
                                                                                                                                                                                                                            opcode: ref v313,
                                                                                                                                                                                                                            args: ref v314,
                                                                                                                                                                                                                        } = &v310.1 {
                                                                                                                                                                                                                            if let &Opcode::Band = v313 {
                                                                                                                                                                                                                                let v315 = C::unpack_value_array_2(ctx, v314);
                                                                                                                                                                                                                                let mut v318 = C::inst_data_value_etor_returns::default();
                                                                                                                                                                                                                                C::inst_data_value_etor(ctx, v315.0, &mut v318);
                                                                                                                                                                                                                                let mut v318 = v318.into_context_iter();
                                                                                                                                                                                                                                while let Some(v319) = v318.next(ctx) {
                                                                                                                                                                                                                                    if v319.0 == I32 {
                                                                                                                                                                                                                                        if let &InstructionData::Binary {
                                                                                                                                                                                                                                            opcode: ref v322,
                                                                                                                                                                                                                                            args: ref v323,
                                                                                                                                                                                                                                        } = &v319.1 {
                                                                                                                                                                                                                                            if let &Opcode::Ushr = v322 {
                                                                                                                                                                                                                                                let v324 = C::unpack_value_array_2(ctx, v323);
                                                                                                                                                                                                                                                if v115.0 == v324.0 {
                                                                                                                                                                                                                                                    let mut v327 = C::inst_data_value_etor_returns::default();
                                                                                                                                                                                                                                                    C::inst_data_value_etor(ctx, v324.1, &mut v327);
                                                                                                                                                                                                                                                    let mut v327 = v327.into_context_iter();
                                                                                                                                                                                                                                                    while let Some(v328) = v327.next(ctx) {
                                                                                                                                                                                                                                                        if v328.0 == I32 {
                                                                                                                                                                                                                                                            if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                                opcode: ref v331,
                                                                                                                                                                                                                                                                imm: v332,
                                                                                                                                                                                                                                                            } = &v328.1 {
                                                                                                                                                                                                                                                                if let &Opcode::Iconst = v331 {
                                                                                                                                                                                                                                                                    let v333 = C::u64_from_imm64(ctx, v332);
                                                                                                                                                                                                                                                                    if v333 == 0x8_u64 {
                                                                                                                                                                                                                                                                        let mut v334 = C::inst_data_value_etor_returns::default();
                                                                                                                                                                                                                                                                        C::inst_data_value_etor(ctx, v315.1, &mut v334);
                                                                                                                                                                                                                                                                        let mut v334 = v334.into_context_iter();
                                                                                                                                                                                                                                                                        while let Some(v335) = v334.next(ctx) {
                                                                                                                                                                                                                                                                            if v335.0 == I32 {
                                                                                                                                                                                                                                                                                if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                                                    opcode: ref v338,
                                                                                                                                                                                                                                                                                    imm: v339,
                                                                                                                                                                                                                                                                                } = &v335.1 {
                                                                                                                                                                                                                                                                                    if let &Opcode::Iconst = v338 {
                                                                                                                                                                                                                                                                                        let v340 = C::u64_from_imm64(ctx, v339);
                                                                                                                                                                                                                                                                                        if v340 == 0xff00_u64 {
                                                                                                                                                                                                                                                                                            let mut v341 = C::inst_data_value_etor_returns::default();
                                                                                                                                                                                                                                                                                            C::inst_data_value_etor(ctx, v115.1, &mut v341);
                                                                                                                                                                                                                                                                                            let mut v341 = v341.into_context_iter();
                                                                                                                                                                                                                                                                                            while let Some(v342) = v341.next(ctx) {
                                                                                                                                                                                                                                                                                                if v342.0 == I32 {
                                                                                                                                                                                                                                                                                                    if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                                                                        opcode: ref v345,
                                                                                                                                                                                                                                                                                                        imm: v346,
                                                                                                                                                                                                                                                                                                    } = &v342.1 {
                                                                                                                                                                                                                                                                                                        if let &Opcode::Iconst = v345 {
                                                                                                                                                                                                                                                                                                            let v347 = C::u64_from_imm64(ctx, v346);
                                                                                                                                                                                                                                                                                                            if v347 == 0x18_u64 {
                                                                                                                                                                                                                                                                                                                let v348 = constructor_bswap(ctx, v2.0, v133.0);
                                                                                                                                                                                                                                                                                                                // Rule at src\opts\bitops.isle line 147.
                                                                                                                                                                                                                                                                                                                returns.extend(Some(v348));
                                                                                                                                                                                                                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                }
                                                                                                                                                                                                            }
                                                                                                                                                                                                        }
                                                                                                                                                                                                    }
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        _ => {}
                                                                    }
                                                                }
                                                                &InstructionData::UnaryImm {
                                                                    opcode: ref v708,
                                                                    imm: v709,
                                                                } => {
                                                                    if let &Opcode::Iconst = v708 {
                                                                        if v2.0 == v11.0 {
                                                                            if v2.0 == v19.0 {
                                                                                let v124 = C::unpack_value_array_2(ctx, v123);
                                                                                let mut v199 = C::inst_data_value_etor_returns::default();
                                                                                C::inst_data_value_etor(ctx, v124.1, &mut v199);
                                                                                let mut v199 = v199.into_context_iter();
                                                                                while let Some(v200) = v199.next(ctx) {
                                                                                    if let &InstructionData::UnaryImm {
                                                                                        opcode: ref v226,
                                                                                        imm: v227,
                                                                                    } = &v200.1 {
                                                                                        if let &Opcode::Iconst = v226 {
                                                                                            let v719 = constructor_bor(ctx, v2.0, v124.0, v106.0);
                                                                                            let v720 = constructor_bor(ctx, v2.0, v124.1, v106.1);
                                                                                            let v721 = constructor_bor(ctx, v2.0, v719, v720);
                                                                                            // Rule at src\opts\cprop.isle line 252.
                                                                                            returns.extend(Some(v721));
                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                _ => {}
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Ishl => {
                                            let v52 = C::ty_int(ctx, v2.0);
                                            if let Some(v53) = v52 {
                                                if v11.0 == v53 {
                                                    let mut v18 = C::inst_data_value_etor_returns::default();
                                                    C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                                    let mut v18 = v18.into_context_iter();
                                                    while let Some(v19) = v18.next(ctx) {
                                                        if let &InstructionData::Binary {
                                                            opcode: ref v122,
                                                            args: ref v123,
                                                        } = &v19.1 {
                                                            if let &Opcode::Ushr = v122 {
                                                                if v11.0 == v19.0 {
                                                                    let v106 = C::unpack_value_array_2(ctx, v105);
                                                                    let v124 = C::unpack_value_array_2(ctx, v123);
                                                                    if v106.0 == v124.0 {
                                                                        let mut v109 = C::inst_data_value_etor_returns::default();
                                                                        C::inst_data_value_etor(ctx, v106.1, &mut v109);
                                                                        let mut v109 = v109.into_context_iter();
                                                                        while let Some(v110) = v109.next(ctx) {
                                                                            if let &InstructionData::UnaryImm {
                                                                                opcode: ref v708,
                                                                                imm: v709,
                                                                            } = &v110.1 {
                                                                                if let &Opcode::Iconst = v708 {
                                                                                    let mut v199 = C::inst_data_value_etor_returns::default();
                                                                                    C::inst_data_value_etor(ctx, v124.1, &mut v199);
                                                                                    let mut v199 = v199.into_context_iter();
                                                                                    while let Some(v200) = v199.next(ctx) {
                                                                                        if let &InstructionData::UnaryImm {
                                                                                            opcode: ref v226,
                                                                                            imm: v227,
                                                                                        } = &v200.1 {
                                                                                            if let &Opcode::Iconst = v226 {
                                                                                                let v228 = C::u64_from_imm64(ctx, v227);
                                                                                                let v1245 = C::lane_type(ctx, v53);
                                                                                                let v1246 = C::ty_bits_u64(ctx, v1245);
                                                                                                let v978 = C::u64_from_imm64(ctx, v709);
                                                                                                let v1250 = C::u64_sub(ctx, v1246, v978);
                                                                                                let v1251 = C::u64_eq(ctx, v228, v1250);
                                                                                                if v1251 == true {
                                                                                                    let v1252 = constructor_rotl(ctx, v53, v124.0, v106.1);
                                                                                                    // Rule at src\opts\shifts.isle line 280.
                                                                                                    returns.extend(Some(v1252));
                                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Ushr => {
                                            let v52 = C::ty_int(ctx, v2.0);
                                            if let Some(v53) = v52 {
                                                if v11.0 == v53 {
                                                    let mut v18 = C::inst_data_value_etor_returns::default();
                                                    C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                                    let mut v18 = v18.into_context_iter();
                                                    while let Some(v19) = v18.next(ctx) {
                                                        if let &InstructionData::Binary {
                                                            opcode: ref v122,
                                                            args: ref v123,
                                                        } = &v19.1 {
                                                            if let &Opcode::Ishl = v122 {
                                                                if v11.0 == v19.0 {
                                                                    let v106 = C::unpack_value_array_2(ctx, v105);
                                                                    let v124 = C::unpack_value_array_2(ctx, v123);
                                                                    if v106.0 == v124.0 {
                                                                        let mut v109 = C::inst_data_value_etor_returns::default();
                                                                        C::inst_data_value_etor(ctx, v106.1, &mut v109);
                                                                        let mut v109 = v109.into_context_iter();
                                                                        while let Some(v110) = v109.next(ctx) {
                                                                            if let &InstructionData::UnaryImm {
                                                                                opcode: ref v708,
                                                                                imm: v709,
                                                                            } = &v110.1 {
                                                                                if let &Opcode::Iconst = v708 {
                                                                                    let mut v199 = C::inst_data_value_etor_returns::default();
                                                                                    C::inst_data_value_etor(ctx, v124.1, &mut v199);
                                                                                    let mut v199 = v199.into_context_iter();
                                                                                    while let Some(v200) = v199.next(ctx) {
                                                                                        if let &InstructionData::UnaryImm {
                                                                                            opcode: ref v226,
                                                                                            imm: v227,
                                                                                        } = &v200.1 {
                                                                                            if let &Opcode::Iconst = v226 {
                                                                                                let v978 = C::u64_from_imm64(ctx, v709);
                                                                                                let v1245 = C::lane_type(ctx, v53);
                                                                                                let v1246 = C::ty_bits_u64(ctx, v1245);
                                                                                                let v228 = C::u64_from_imm64(ctx, v227);
                                                                                                let v1247 = C::u64_sub(ctx, v1246, v228);
                                                                                                let v1248 = C::u64_eq(ctx, v978, v1247);
                                                                                                if v1248 == true {
                                                                                                    let v1249 = constructor_rotl(ctx, v53, v124.0, v124.1);
                                                                                                    // Rule at src\opts\shifts.isle line 275.
                                                                                                    returns.extend(Some(v1249));
                                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::IntCompare {
                                    opcode: ref v1061,
                                    args: ref v1062,
                                    cond: ref v1063,
                                } => {
                                    if let &Opcode::Icmp = v1061 {
                                        let v526 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v527) = v526 {
                                            if v11.0 == v527 {
                                                let mut v18 = C::inst_data_value_etor_returns::default();
                                                C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if let &InstructionData::IntCompare {
                                                        opcode: ref v1031,
                                                        args: ref v1032,
                                                        cond: ref v1033,
                                                    } = &v19.1 {
                                                        if let &Opcode::Icmp = v1031 {
                                                            let v1067 = constructor_intcc_comparable(ctx, v1033, v1063);
                                                            if let Some(v1068) = v1067 {
                                                                if v11.0 == v19.0 {
                                                                    let v1034 = C::unpack_value_array_2(ctx, v1032);
                                                                    let v1064 = C::unpack_value_array_2(ctx, v1062);
                                                                    if v1034.0 == v1064.0 {
                                                                        if v1034.1 == v1064.1 {
                                                                            let v1069 = constructor_decompose_intcc(ctx, v1033);
                                                                            let v1070 = constructor_decompose_intcc(ctx, v1063);
                                                                            let v1073 = C::u64_or(ctx, v1069, v1070);
                                                                            let v1074 = constructor_compose_icmp(ctx, v527, v1073, v1068, v1034.0, v1034.1);
                                                                            // Rule at src\opts\icmp.isle line 179.
                                                                            returns.extend(Some(v1074));
                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v26,
                                    arg: v27,
                                } => {
                                    match v26 {
                                        &Opcode::Splat => {
                                            let v1346 = C::ty_vector_not_float(ctx, v2.0);
                                            if let Some(v1347) = v1346 {
                                                if v2.0 == v11.0 {
                                                    let mut v18 = C::inst_data_value_etor_returns::default();
                                                    C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                                    let mut v18 = v18.into_context_iter();
                                                    while let Some(v19) = v18.next(ctx) {
                                                        if let &InstructionData::Unary {
                                                            opcode: ref v29,
                                                            arg: v30,
                                                        } = &v19.1 {
                                                            if let &Opcode::Splat = v29 {
                                                                if v2.0 == v19.0 {
                                                                    let v1228 = C::lane_type(ctx, v2.0);
                                                                    let v1350 = constructor_bor(ctx, v1228, v30, v27);
                                                                    let v1351 = constructor_splat(ctx, v2.0, v1350);
                                                                    // Rule at src\opts\vector.isle line 18.
                                                                    returns.extend(Some(v1351));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Bnot => {
                                            let v52 = C::ty_int(ctx, v2.0);
                                            if let Some(v53) = v52 {
                                                if v7.0 == v27 {
                                                    if v11.0 == v53 {
                                                        let v218 = constructor_iconst_s(ctx, v53, -1_i64);
                                                        let v219 = C::subsume(ctx, v218);
                                                        // Rule at src\opts\bitops.isle line 24.
                                                        returns.extend(Some(v219));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                            if v2.0 == v11.0 {
                                                let mut v18 = C::inst_data_value_etor_returns::default();
                                                C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if let &InstructionData::Binary {
                                                        opcode: ref v122,
                                                        args: ref v123,
                                                    } = &v19.1 {
                                                        if let &Opcode::Band = v122 {
                                                            if v2.0 == v19.0 {
                                                                let v124 = C::unpack_value_array_2(ctx, v123);
                                                                if v27 == v124.1 {
                                                                    let v224 = constructor_bor(ctx, v2.0, v124.0, v7.1);
                                                                    // Rule at src\opts\bitops.isle line 49.
                                                                    returns.extend(Some(v224));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Uextend => {
                                            let mut v18 = C::inst_data_value_etor_returns::default();
                                            C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                            let mut v18 = v18.into_context_iter();
                                            while let Some(v19) = v18.next(ctx) {
                                                if let &InstructionData::Unary {
                                                    opcode: ref v29,
                                                    arg: v30,
                                                } = &v19.1 {
                                                    if let &Opcode::Uextend = v29 {
                                                        let v923 = C::value_type(ctx, v30);
                                                        let v958 = C::value_type(ctx, v27);
                                                        if v923 == v958 {
                                                            let v961 = constructor_bor(ctx, v923, v30, v27);
                                                            let v962 = constructor_uextend(ctx, v2.0, v961);
                                                            // Rule at src\opts\extends.isle line 72.
                                                            returns.extend(Some(v962));
                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        if v2.0 == v11.0 {
                                            let mut v18 = C::inst_data_value_etor_returns::default();
                                            C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                            let mut v18 = v18.into_context_iter();
                                            while let Some(v19) = v18.next(ctx) {
                                                if let &InstructionData::Binary {
                                                    opcode: ref v122,
                                                    args: ref v123,
                                                } = &v19.1 {
                                                    match v122 {
                                                        &Opcode::Band => {
                                                            if v2.0 == v19.0 {
                                                                let v124 = C::unpack_value_array_2(ctx, v123);
                                                                let mut v199 = C::inst_data_value_etor_returns::default();
                                                                C::inst_data_value_etor(ctx, v124.1, &mut v199);
                                                                let mut v199 = v199.into_context_iter();
                                                                while let Some(v200) = v199.next(ctx) {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v226,
                                                                        imm: v227,
                                                                    } = &v200.1 {
                                                                        if let &Opcode::Iconst = v226 {
                                                                            let v229 = C::ty_mask(ctx, v2.0);
                                                                            let v16 = C::u64_from_imm64(ctx, v15);
                                                                            let v230 = C::u64_and(ctx, v229, v16);
                                                                            let v228 = C::u64_from_imm64(ctx, v227);
                                                                            let v231 = C::u64_not(ctx, v228);
                                                                            let v232 = C::u64_and(ctx, v229, v231);
                                                                            let v233 = C::u64_eq(ctx, v230, v232);
                                                                            if v233 == true {
                                                                                if v2.0 == v200.0 {
                                                                                    let v224 = constructor_bor(ctx, v2.0, v124.0, v7.1);
                                                                                    // Rule at src\opts\bitops.isle line 69.
                                                                                    returns.extend(Some(v224));
                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Bor => {
                                                            if v2.0 == v19.0 {
                                                                let v124 = C::unpack_value_array_2(ctx, v123);
                                                                let mut v199 = C::inst_data_value_etor_returns::default();
                                                                C::inst_data_value_etor(ctx, v124.1, &mut v199);
                                                                let mut v199 = v199.into_context_iter();
                                                                while let Some(v200) = v199.next(ctx) {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v226,
                                                                        imm: v227,
                                                                    } = &v200.1 {
                                                                        if let &Opcode::Iconst = v226 {
                                                                            if v2.0 == v200.0 {
                                                                                let v625 = constructor_bor(ctx, v2.0, v124.1, v7.1);
                                                                                let v626 = constructor_bor(ctx, v2.0, v124.0, v625);
                                                                                // Rule at src\opts\cprop.isle line 157.
                                                                                returns.extend(Some(v626));
                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                            let v16 = C::u64_from_imm64(ctx, v15);
                                            if v16 == 0x0_u64 {
                                                let v17 = C::subsume(ctx, v7.0);
                                                // Rule at src\opts\bitops.isle line 3.
                                                returns.extend(Some(v17));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                        let v526 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v527) = v526 {
                                            if v11.0 == v527 {
                                                let mut v18 = C::inst_data_value_etor_returns::default();
                                                C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v22,
                                                        imm: v23,
                                                    } = &v19.1 {
                                                        if let &Opcode::Iconst = v22 {
                                                            if v11.0 == v19.0 {
                                                                let v24 = C::u64_from_imm64(ctx, v23);
                                                                let v16 = C::u64_from_imm64(ctx, v15);
                                                                let v540 = C::u64_or(ctx, v24, v16);
                                                                let v541 = C::imm64_masked(ctx, v527, v540);
                                                                let v542 = constructor_iconst(ctx, v527, v541);
                                                                let v543 = C::subsume(ctx, v542);
                                                                // Rule at src\opts\cprop.isle line 32.
                                                                returns.extend(Some(v543));
                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        let v1119 = C::remat(ctx, arg0);
                                        // Rule at src\opts\remat.isle line 17.
                                        returns.extend(Some(v1119));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v18 = C::inst_data_value_etor_returns::default();
                        C::inst_data_value_etor(ctx, v7.0, &mut v18);
                        let mut v18 = v18.into_context_iter();
                        while let Some(v19) = v18.next(ctx) {
                            match &v19.1 {
                                &InstructionData::Unary {
                                    opcode: ref v29,
                                    arg: v30,
                                } => {
                                    if let &Opcode::Bnot = v29 {
                                        if v7.1 == v30 {
                                            let v52 = C::ty_int(ctx, v2.0);
                                            if let Some(v53) = v52 {
                                                if v19.0 == v53 {
                                                    let v218 = constructor_iconst_s(ctx, v53, -1_i64);
                                                    let v219 = C::subsume(ctx, v218);
                                                    // Rule at src\opts\bitops.isle line 25.
                                                    returns.extend(Some(v219));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v22,
                                    imm: v23,
                                } => {
                                    if let &Opcode::Iconst = v22 {
                                        if v2.0 == v19.0 {
                                            let v596 = constructor_bor(ctx, v2.0, v7.1, v7.0);
                                            // Rule at src\opts\cprop.isle line 104.
                                            returns.extend(Some(v596));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        let v1119 = C::remat(ctx, arg0);
                                        // Rule at src\opts\remat.isle line 15.
                                        returns.extend(Some(v1119));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                                _ => {}
                            }
                        }
                        if v7.0 == v7.1 {
                            let v17 = C::subsume(ctx, v7.0);
                            // Rule at src\opts\bitops.isle line 7.
                            returns.extend(Some(v17));
                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                        }
                    }
                    &Opcode::Bxor => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_value_etor_returns::default();
                        C::inst_data_value_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Binary {
                                    opcode: ref v104,
                                    args: ref v105,
                                } => {
                                    if let &Opcode::Bxor = v104 {
                                        if v2.0 == v11.0 {
                                            let v106 = C::unpack_value_array_2(ctx, v105);
                                            let mut v109 = C::inst_data_value_etor_returns::default();
                                            C::inst_data_value_etor(ctx, v106.1, &mut v109);
                                            let mut v109 = v109.into_context_iter();
                                            while let Some(v110) = v109.next(ctx) {
                                                match &v110.1 {
                                                    &InstructionData::Binary {
                                                        opcode: ref v113,
                                                        args: ref v114,
                                                    } => {
                                                        if let &Opcode::Bxor = v113 {
                                                            if v2.0 == v110.0 {
                                                                let v156 = constructor_bxor(ctx, v2.0, v7.0, v106.0);
                                                                let v115 = C::unpack_value_array_2(ctx, v114);
                                                                let v157 = constructor_bxor(ctx, v2.0, v115.0, v115.1);
                                                                let v158 = constructor_bxor(ctx, v2.0, v156, v157);
                                                                let v159 = C::subsume(ctx, v158);
                                                                // Rule at src\opts\arithmetic.isle line 143.
                                                                returns.extend(Some(v159));
                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                            }
                                                        }
                                                    }
                                                    &InstructionData::UnaryImm {
                                                        opcode: ref v708,
                                                        imm: v709,
                                                    } => {
                                                        if let &Opcode::Iconst = v708 {
                                                            let mut v18 = C::inst_data_value_etor_returns::default();
                                                            C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                                            let mut v18 = v18.into_context_iter();
                                                            while let Some(v19) = v18.next(ctx) {
                                                                if let &InstructionData::Binary {
                                                                    opcode: ref v122,
                                                                    args: ref v123,
                                                                } = &v19.1 {
                                                                    if let &Opcode::Bxor = v122 {
                                                                        if v2.0 == v19.0 {
                                                                            let v124 = C::unpack_value_array_2(ctx, v123);
                                                                            let mut v199 = C::inst_data_value_etor_returns::default();
                                                                            C::inst_data_value_etor(ctx, v124.1, &mut v199);
                                                                            let mut v199 = v199.into_context_iter();
                                                                            while let Some(v200) = v199.next(ctx) {
                                                                                if let &InstructionData::UnaryImm {
                                                                                    opcode: ref v226,
                                                                                    imm: v227,
                                                                                } = &v200.1 {
                                                                                    if let &Opcode::Iconst = v226 {
                                                                                        let v722 = constructor_bxor(ctx, v2.0, v124.0, v106.0);
                                                                                        let v723 = constructor_bxor(ctx, v2.0, v124.1, v106.1);
                                                                                        let v724 = constructor_bxor(ctx, v2.0, v722, v723);
                                                                                        // Rule at src\opts\cprop.isle line 256.
                                                                                        returns.extend(Some(v724));
                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v26,
                                    arg: v27,
                                } => {
                                    match v26 {
                                        &Opcode::Splat => {
                                            let v1346 = C::ty_vector_not_float(ctx, v2.0);
                                            if let Some(v1347) = v1346 {
                                                if v2.0 == v11.0 {
                                                    let mut v18 = C::inst_data_value_etor_returns::default();
                                                    C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                                    let mut v18 = v18.into_context_iter();
                                                    while let Some(v19) = v18.next(ctx) {
                                                        if let &InstructionData::Unary {
                                                            opcode: ref v29,
                                                            arg: v30,
                                                        } = &v19.1 {
                                                            if let &Opcode::Splat = v29 {
                                                                if v2.0 == v19.0 {
                                                                    let v1228 = C::lane_type(ctx, v2.0);
                                                                    let v1352 = constructor_bxor(ctx, v1228, v30, v27);
                                                                    let v1353 = constructor_splat(ctx, v2.0, v1352);
                                                                    // Rule at src\opts\vector.isle line 22.
                                                                    returns.extend(Some(v1353));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Bnot => {
                                            let v52 = C::ty_int(ctx, v2.0);
                                            if let Some(v53) = v52 {
                                                if v7.0 == v27 {
                                                    if v11.0 == v53 {
                                                        let v218 = constructor_iconst_s(ctx, v53, -1_i64);
                                                        let v219 = C::subsume(ctx, v218);
                                                        // Rule at src\opts\bitops.isle line 22.
                                                        returns.extend(Some(v219));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Uextend => {
                                            let mut v18 = C::inst_data_value_etor_returns::default();
                                            C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                            let mut v18 = v18.into_context_iter();
                                            while let Some(v19) = v18.next(ctx) {
                                                if let &InstructionData::Unary {
                                                    opcode: ref v29,
                                                    arg: v30,
                                                } = &v19.1 {
                                                    if let &Opcode::Uextend = v29 {
                                                        let v923 = C::value_type(ctx, v30);
                                                        let v958 = C::value_type(ctx, v27);
                                                        if v923 == v958 {
                                                            let v963 = constructor_bxor(ctx, v923, v30, v27);
                                                            let v964 = constructor_uextend(ctx, v2.0, v963);
                                                            // Rule at src\opts\extends.isle line 74.
                                                            returns.extend(Some(v964));
                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        if v2.0 == v11.0 {
                                            let v16 = C::u64_from_imm64(ctx, v15);
                                            if v16 == 0x0_u64 {
                                                let v17 = C::subsume(ctx, v7.0);
                                                // Rule at src\opts\bitops.isle line 11.
                                                returns.extend(Some(v17));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                            let mut v18 = C::inst_data_value_etor_returns::default();
                                            C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                            let mut v18 = v18.into_context_iter();
                                            while let Some(v19) = v18.next(ctx) {
                                                if let &InstructionData::Binary {
                                                    opcode: ref v122,
                                                    args: ref v123,
                                                } = &v19.1 {
                                                    if let &Opcode::Bxor = v122 {
                                                        if v2.0 == v19.0 {
                                                            let v124 = C::unpack_value_array_2(ctx, v123);
                                                            let mut v199 = C::inst_data_value_etor_returns::default();
                                                            C::inst_data_value_etor(ctx, v124.1, &mut v199);
                                                            let mut v199 = v199.into_context_iter();
                                                            while let Some(v200) = v199.next(ctx) {
                                                                if let &InstructionData::UnaryImm {
                                                                    opcode: ref v226,
                                                                    imm: v227,
                                                                } = &v200.1 {
                                                                    if let &Opcode::Iconst = v226 {
                                                                        if v2.0 == v200.0 {
                                                                            let v629 = constructor_bxor(ctx, v2.0, v124.1, v7.1);
                                                                            let v630 = constructor_bxor(ctx, v2.0, v124.0, v629);
                                                                            // Rule at src\opts\cprop.isle line 163.
                                                                            returns.extend(Some(v630));
                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        let v526 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v527) = v526 {
                                            if v11.0 == v527 {
                                                let mut v18 = C::inst_data_value_etor_returns::default();
                                                C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v22,
                                                        imm: v23,
                                                    } = &v19.1 {
                                                        if let &Opcode::Iconst = v22 {
                                                            if v11.0 == v19.0 {
                                                                let v24 = C::u64_from_imm64(ctx, v23);
                                                                let v16 = C::u64_from_imm64(ctx, v15);
                                                                let v548 = C::u64_xor(ctx, v24, v16);
                                                                let v549 = C::imm64_masked(ctx, v527, v548);
                                                                let v550 = constructor_iconst(ctx, v527, v549);
                                                                let v551 = C::subsume(ctx, v550);
                                                                // Rule at src\opts\cprop.isle line 44.
                                                                returns.extend(Some(v551));
                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        let v1119 = C::remat(ctx, arg0);
                                        // Rule at src\opts\remat.isle line 21.
                                        returns.extend(Some(v1119));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v18 = C::inst_data_value_etor_returns::default();
                        C::inst_data_value_etor(ctx, v7.0, &mut v18);
                        let mut v18 = v18.into_context_iter();
                        while let Some(v19) = v18.next(ctx) {
                            match &v19.1 {
                                &InstructionData::Binary {
                                    opcode: ref v122,
                                    args: ref v123,
                                } => {
                                    if let &Opcode::Bxor = v122 {
                                        if v2.0 == v19.0 {
                                            let v124 = C::unpack_value_array_2(ctx, v123);
                                            let mut v127 = C::inst_data_value_etor_returns::default();
                                            C::inst_data_value_etor(ctx, v124.0, &mut v127);
                                            let mut v127 = v127.into_context_iter();
                                            while let Some(v128) = v127.next(ctx) {
                                                if let &InstructionData::Binary {
                                                    opcode: ref v131,
                                                    args: ref v132,
                                                } = &v128.1 {
                                                    if let &Opcode::Bxor = v131 {
                                                        if v2.0 == v128.0 {
                                                            let v133 = C::unpack_value_array_2(ctx, v132);
                                                            let v160 = constructor_bxor(ctx, v2.0, v133.0, v133.1);
                                                            let v161 = constructor_bxor(ctx, v2.0, v124.1, v7.1);
                                                            let v162 = constructor_bxor(ctx, v2.0, v160, v161);
                                                            let v163 = C::subsume(ctx, v162);
                                                            // Rule at src\opts\arithmetic.isle line 145.
                                                            returns.extend(Some(v163));
                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v29,
                                    arg: v30,
                                } => {
                                    if let &Opcode::Bnot = v29 {
                                        if v7.1 == v30 {
                                            let v52 = C::ty_int(ctx, v2.0);
                                            if let Some(v53) = v52 {
                                                if v19.0 == v53 {
                                                    let v218 = constructor_iconst_s(ctx, v53, -1_i64);
                                                    let v219 = C::subsume(ctx, v218);
                                                    // Rule at src\opts\bitops.isle line 23.
                                                    returns.extend(Some(v219));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v22,
                                    imm: v23,
                                } => {
                                    if let &Opcode::Iconst = v22 {
                                        if v2.0 == v19.0 {
                                            let v598 = constructor_bxor(ctx, v2.0, v7.1, v7.0);
                                            // Rule at src\opts\cprop.isle line 110.
                                            returns.extend(Some(v598));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        let v1119 = C::remat(ctx, arg0);
                                        // Rule at src\opts\remat.isle line 19.
                                        returns.extend(Some(v1119));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                                _ => {}
                            }
                        }
                        if v7.0 == v7.1 {
                            let v52 = C::ty_int(ctx, v2.0);
                            if let Some(v53) = v52 {
                                let v55 = constructor_iconst_u(ctx, v53, 0x0_u64);
                                let v56 = C::subsume(ctx, v55);
                                // Rule at src\opts\bitops.isle line 17.
                                returns.extend(Some(v56));
                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                            }
                        }
                        let mut v58 = C::inst_data_value_tupled_etor_returns::default();
                        C::inst_data_value_tupled_etor(ctx, v7.1, &mut v58);
                        let mut v58 = v58.into_context_iter();
                        while let Some(v59) = v58.next(ctx) {
                            let v60 = C::iconst_sextend_etor(ctx, v59);
                            if let Some(v61) = v60 {
                                if v61.1 == -1_i64 {
                                    if v2.0 == v61.0 {
                                        let v234 = constructor_bnot(ctx, v2.0, v7.0);
                                        // Rule at src\opts\bitops.isle line 77.
                                        returns.extend(Some(v234));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Rotl => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_value_etor_returns::default();
                        C::inst_data_value_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Binary {
                                    opcode: ref v104,
                                    args: ref v105,
                                } => {
                                    if let &Opcode::Iconcat = v104 {
                                        let v106 = C::unpack_value_array_2(ctx, v105);
                                        let v1224 = constructor_rotl(ctx, v2.0, v7.0, v106.0);
                                        // Rule at src\opts\shifts.isle line 142.
                                        returns.extend(Some(v1224));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v26,
                                    arg: v27,
                                } => {
                                    match v26 {
                                        &Opcode::Ireduce => {
                                            let v958 = C::value_type(ctx, v27);
                                            let v1213 = C::fits_in_64(ctx, v958);
                                            if let Some(v1214) = v1213 {
                                                let v1219 = constructor_rotl(ctx, v2.0, v7.0, v27);
                                                // Rule at src\opts\shifts.isle line 126.
                                                returns.extend(Some(v1219));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                        &Opcode::Uextend => {
                                            let v1219 = constructor_rotl(ctx, v2.0, v7.0, v27);
                                            // Rule at src\opts\shifts.isle line 127.
                                            returns.extend(Some(v1219));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        &Opcode::Sextend => {
                                            let v1219 = constructor_rotl(ctx, v2.0, v7.0, v27);
                                            // Rule at src\opts\shifts.isle line 128.
                                            returns.extend(Some(v1219));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        let mut v18 = C::inst_data_value_etor_returns::default();
                                        C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            if let &InstructionData::Binary {
                                                opcode: ref v122,
                                                args: ref v123,
                                            } = &v19.1 {
                                                match v122 {
                                                    &Opcode::Rotl => {
                                                        if v2.0 == v19.0 {
                                                            let v124 = C::unpack_value_array_2(ctx, v123);
                                                            let v1237 = constructor_iadd_uextend(ctx, v124.1, v7.1);
                                                            let v1238 = constructor_rotl(ctx, v2.0, v124.0, v1237);
                                                            // Rule at src\opts\shifts.isle line 239.
                                                            returns.extend(Some(v1238));
                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                        }
                                                    }
                                                    &Opcode::Rotr => {
                                                        if v2.0 == v19.0 {
                                                            let v124 = C::unpack_value_array_2(ctx, v123);
                                                            let v1240 = constructor_isub_uextend(ctx, v124.1, v7.1);
                                                            let v1242 = constructor_rotr(ctx, v2.0, v124.0, v1240);
                                                            // Rule at src\opts\shifts.isle line 246.
                                                            returns.extend(Some(v1242));
                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                        let v16 = C::u64_from_imm64(ctx, v15);
                                        if v16 == 0x0_u64 {
                                            if v2.0 == v11.0 {
                                                let v17 = C::subsume(ctx, v7.0);
                                                // Rule at src\opts\shifts.isle line 19.
                                                returns.extend(Some(v17));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                        let v235 = constructor_ty_shift_mask(ctx, v2.0);
                                        let v1226 = C::u64_and(ctx, v16, v235);
                                        let v1253 = C::u64_eq(ctx, v16, v1226);
                                        if v1253 == false {
                                            let v1254 = constructor_iconst_u(ctx, v11.0, v1226);
                                            let v1259 = constructor_rotl(ctx, v2.0, v7.0, v1254);
                                            // Rule at src\opts\shifts.isle line 304.
                                            returns.extend(Some(v1259));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v18 = C::inst_data_value_etor_returns::default();
                        C::inst_data_value_etor(ctx, v7.0, &mut v18);
                        let mut v18 = v18.into_context_iter();
                        while let Some(v19) = v18.next(ctx) {
                            match &v19.1 {
                                &InstructionData::Binary {
                                    opcode: ref v122,
                                    args: ref v123,
                                } => {
                                    match v122 {
                                        &Opcode::Rotl => {
                                            if v2.0 == v19.0 {
                                                let v124 = C::unpack_value_array_2(ctx, v123);
                                                let v1243 = C::value_type(ctx, v124.1);
                                                let v1244 = C::value_type(ctx, v7.1);
                                                if v1243 == v1244 {
                                                    let v1237 = constructor_iadd_uextend(ctx, v124.1, v7.1);
                                                    let v1238 = constructor_rotl(ctx, v2.0, v124.0, v1237);
                                                    // Rule at src\opts\shifts.isle line 260.
                                                    returns.extend(Some(v1238));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                                let mut v199 = C::inst_data_value_etor_returns::default();
                                                C::inst_data_value_etor(ctx, v124.1, &mut v199);
                                                let mut v199 = v199.into_context_iter();
                                                while let Some(v200) = v199.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v226,
                                                        imm: v227,
                                                    } = &v200.1 {
                                                        if let &Opcode::Iconst = v226 {
                                                            let v1237 = constructor_iadd_uextend(ctx, v124.1, v7.1);
                                                            let v1238 = constructor_rotl(ctx, v2.0, v124.0, v1237);
                                                            // Rule at src\opts\shifts.isle line 238.
                                                            returns.extend(Some(v1238));
                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Rotr => {
                                            if v2.0 == v19.0 {
                                                let v124 = C::unpack_value_array_2(ctx, v123);
                                                if v7.1 == v124.1 {
                                                    let v1236 = C::subsume(ctx, v124.0);
                                                    // Rule at src\opts\shifts.isle line 203.
                                                    returns.extend(Some(v1236));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                                let v1243 = C::value_type(ctx, v124.1);
                                                let v1244 = C::value_type(ctx, v7.1);
                                                if v1243 == v1244 {
                                                    let v1240 = constructor_isub_uextend(ctx, v124.1, v7.1);
                                                    let v1242 = constructor_rotr(ctx, v2.0, v124.0, v1240);
                                                    // Rule at src\opts\shifts.isle line 265.
                                                    returns.extend(Some(v1242));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                                let mut v199 = C::inst_data_value_etor_returns::default();
                                                C::inst_data_value_etor(ctx, v124.1, &mut v199);
                                                let mut v199 = v199.into_context_iter();
                                                while let Some(v200) = v199.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v226,
                                                        imm: v227,
                                                    } = &v200.1 {
                                                        if let &Opcode::Iconst = v226 {
                                                            let v1240 = constructor_isub_uextend(ctx, v124.1, v7.1);
                                                            let v1242 = constructor_rotr(ctx, v2.0, v124.0, v1240);
                                                            // Rule at src\opts\shifts.isle line 245.
                                                            returns.extend(Some(v1242));
                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v29,
                                    arg: v30,
                                } => {
                                    if let &Opcode::Splat = v29 {
                                        if v2.0 == v19.0 {
                                            let v1228 = C::lane_type(ctx, v2.0);
                                            let v1380 = constructor_rotl(ctx, v1228, v30, v7.1);
                                            let v1381 = constructor_splat(ctx, v2.0, v1380);
                                            // Rule at src\opts\vector.isle line 68.
                                            returns.extend(Some(v1381));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    &Opcode::Rotr => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_value_etor_returns::default();
                        C::inst_data_value_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Binary {
                                    opcode: ref v104,
                                    args: ref v105,
                                } => {
                                    if let &Opcode::Iconcat = v104 {
                                        let v106 = C::unpack_value_array_2(ctx, v105);
                                        let v1223 = constructor_rotr(ctx, v2.0, v7.0, v106.0);
                                        // Rule at src\opts\shifts.isle line 141.
                                        returns.extend(Some(v1223));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v26,
                                    arg: v27,
                                } => {
                                    match v26 {
                                        &Opcode::Ireduce => {
                                            let v958 = C::value_type(ctx, v27);
                                            let v1213 = C::fits_in_64(ctx, v958);
                                            if let Some(v1214) = v1213 {
                                                let v1218 = constructor_rotr(ctx, v2.0, v7.0, v27);
                                                // Rule at src\opts\shifts.isle line 123.
                                                returns.extend(Some(v1218));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                        &Opcode::Uextend => {
                                            let v1218 = constructor_rotr(ctx, v2.0, v7.0, v27);
                                            // Rule at src\opts\shifts.isle line 124.
                                            returns.extend(Some(v1218));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        &Opcode::Sextend => {
                                            let v1218 = constructor_rotr(ctx, v2.0, v7.0, v27);
                                            // Rule at src\opts\shifts.isle line 125.
                                            returns.extend(Some(v1218));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        let mut v18 = C::inst_data_value_etor_returns::default();
                                        C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            if let &InstructionData::Binary {
                                                opcode: ref v122,
                                                args: ref v123,
                                            } = &v19.1 {
                                                match v122 {
                                                    &Opcode::Rotl => {
                                                        if v2.0 == v19.0 {
                                                            let v124 = C::unpack_value_array_2(ctx, v123);
                                                            let v1240 = constructor_isub_uextend(ctx, v124.1, v7.1);
                                                            let v1241 = constructor_rotl(ctx, v2.0, v124.0, v1240);
                                                            // Rule at src\opts\shifts.isle line 244.
                                                            returns.extend(Some(v1241));
                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                        }
                                                    }
                                                    &Opcode::Rotr => {
                                                        if v2.0 == v19.0 {
                                                            let v124 = C::unpack_value_array_2(ctx, v123);
                                                            let v1237 = constructor_iadd_uextend(ctx, v124.1, v7.1);
                                                            let v1239 = constructor_rotr(ctx, v2.0, v124.0, v1237);
                                                            // Rule at src\opts\shifts.isle line 241.
                                                            returns.extend(Some(v1239));
                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                        let v16 = C::u64_from_imm64(ctx, v15);
                                        if v16 == 0x0_u64 {
                                            if v2.0 == v11.0 {
                                                let v17 = C::subsume(ctx, v7.0);
                                                // Rule at src\opts\shifts.isle line 15.
                                                returns.extend(Some(v17));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                        let v235 = constructor_ty_shift_mask(ctx, v2.0);
                                        let v1226 = C::u64_and(ctx, v16, v235);
                                        let v1253 = C::u64_eq(ctx, v16, v1226);
                                        if v1253 == false {
                                            let v1254 = constructor_iconst_u(ctx, v11.0, v1226);
                                            let v1258 = constructor_rotr(ctx, v2.0, v7.0, v1254);
                                            // Rule at src\opts\shifts.isle line 301.
                                            returns.extend(Some(v1258));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v18 = C::inst_data_value_etor_returns::default();
                        C::inst_data_value_etor(ctx, v7.0, &mut v18);
                        let mut v18 = v18.into_context_iter();
                        while let Some(v19) = v18.next(ctx) {
                            match &v19.1 {
                                &InstructionData::Binary {
                                    opcode: ref v122,
                                    args: ref v123,
                                } => {
                                    match v122 {
                                        &Opcode::Rotl => {
                                            if v2.0 == v19.0 {
                                                let v124 = C::unpack_value_array_2(ctx, v123);
                                                if v7.1 == v124.1 {
                                                    let v1236 = C::subsume(ctx, v124.0);
                                                    // Rule at src\opts\shifts.isle line 204.
                                                    returns.extend(Some(v1236));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                                let v1243 = C::value_type(ctx, v124.1);
                                                let v1244 = C::value_type(ctx, v7.1);
                                                if v1243 == v1244 {
                                                    let v1240 = constructor_isub_uextend(ctx, v124.1, v7.1);
                                                    let v1241 = constructor_rotl(ctx, v2.0, v124.0, v1240);
                                                    // Rule at src\opts\shifts.isle line 263.
                                                    returns.extend(Some(v1241));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                                let mut v199 = C::inst_data_value_etor_returns::default();
                                                C::inst_data_value_etor(ctx, v124.1, &mut v199);
                                                let mut v199 = v199.into_context_iter();
                                                while let Some(v200) = v199.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v226,
                                                        imm: v227,
                                                    } = &v200.1 {
                                                        if let &Opcode::Iconst = v226 {
                                                            let v1240 = constructor_isub_uextend(ctx, v124.1, v7.1);
                                                            let v1241 = constructor_rotl(ctx, v2.0, v124.0, v1240);
                                                            // Rule at src\opts\shifts.isle line 243.
                                                            returns.extend(Some(v1241));
                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Rotr => {
                                            if v2.0 == v19.0 {
                                                let v124 = C::unpack_value_array_2(ctx, v123);
                                                let v1243 = C::value_type(ctx, v124.1);
                                                let v1244 = C::value_type(ctx, v7.1);
                                                if v1243 == v1244 {
                                                    let v1237 = constructor_iadd_uextend(ctx, v124.1, v7.1);
                                                    let v1239 = constructor_rotr(ctx, v2.0, v124.0, v1237);
                                                    // Rule at src\opts\shifts.isle line 258.
                                                    returns.extend(Some(v1239));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                                let mut v199 = C::inst_data_value_etor_returns::default();
                                                C::inst_data_value_etor(ctx, v124.1, &mut v199);
                                                let mut v199 = v199.into_context_iter();
                                                while let Some(v200) = v199.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v226,
                                                        imm: v227,
                                                    } = &v200.1 {
                                                        if let &Opcode::Iconst = v226 {
                                                            let v1237 = constructor_iadd_uextend(ctx, v124.1, v7.1);
                                                            let v1239 = constructor_rotr(ctx, v2.0, v124.0, v1237);
                                                            // Rule at src\opts\shifts.isle line 240.
                                                            returns.extend(Some(v1239));
                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v29,
                                    arg: v30,
                                } => {
                                    if let &Opcode::Splat = v29 {
                                        if v2.0 == v19.0 {
                                            let v1228 = C::lane_type(ctx, v2.0);
                                            let v1382 = constructor_rotr(ctx, v1228, v30, v7.1);
                                            let v1383 = constructor_splat(ctx, v2.0, v1382);
                                            // Rule at src\opts\vector.isle line 71.
                                            returns.extend(Some(v1383));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    &Opcode::Ishl => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_value_etor_returns::default();
                        C::inst_data_value_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Binary {
                                    opcode: ref v104,
                                    args: ref v105,
                                } => {
                                    if let &Opcode::Iconcat = v104 {
                                        let v106 = C::unpack_value_array_2(ctx, v105);
                                        let v1220 = constructor_ishl(ctx, v2.0, v7.0, v106.0);
                                        // Rule at src\opts\shifts.isle line 138.
                                        returns.extend(Some(v1220));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v26,
                                    arg: v27,
                                } => {
                                    match v26 {
                                        &Opcode::Ireduce => {
                                            let v958 = C::value_type(ctx, v27);
                                            let v1213 = C::fits_in_64(ctx, v958);
                                            if let Some(v1214) = v1213 {
                                                let v1215 = constructor_ishl(ctx, v2.0, v7.0, v27);
                                                // Rule at src\opts\shifts.isle line 114.
                                                returns.extend(Some(v1215));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                        &Opcode::Uextend => {
                                            let v1215 = constructor_ishl(ctx, v2.0, v7.0, v27);
                                            // Rule at src\opts\shifts.isle line 115.
                                            returns.extend(Some(v1215));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        &Opcode::Sextend => {
                                            let v1215 = constructor_ishl(ctx, v2.0, v7.0, v27);
                                            // Rule at src\opts\shifts.isle line 116.
                                            returns.extend(Some(v1215));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        let mut v18 = C::inst_data_value_etor_returns::default();
                                        C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            match &v19.1 {
                                                &InstructionData::Binary {
                                                    opcode: ref v122,
                                                    args: ref v123,
                                                } => {
                                                    match v122 {
                                                        &Opcode::Ishl => {
                                                            if v2.0 == v19.0 {
                                                                let v124 = C::unpack_value_array_2(ctx, v123);
                                                                let mut v199 = C::inst_data_value_etor_returns::default();
                                                                C::inst_data_value_etor(ctx, v124.1, &mut v199);
                                                                let mut v199 = v199.into_context_iter();
                                                                while let Some(v200) = v199.next(ctx) {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v226,
                                                                        imm: v227,
                                                                    } = &v200.1 {
                                                                        if let &Opcode::Iconst = v226 {
                                                                            let v228 = C::u64_from_imm64(ctx, v227);
                                                                            let v235 = constructor_ty_shift_mask(ctx, v2.0);
                                                                            let v1225 = C::u64_and(ctx, v228, v235);
                                                                            let v16 = C::u64_from_imm64(ctx, v15);
                                                                            let v1226 = C::u64_and(ctx, v16, v235);
                                                                            let v1227 = C::u64_add(ctx, v1225, v1226);
                                                                            let v1228 = C::lane_type(ctx, v2.0);
                                                                            let v1229 = C::ty_bits_u64(ctx, v1228);
                                                                            let v1230 = C::u64_lt(ctx, v1227, v1229);
                                                                            if v1230 == true {
                                                                                let v1231 = constructor_iconst_u(ctx, v200.0, v1227);
                                                                                let v1232 = constructor_ishl(ctx, v2.0, v124.0, v1231);
                                                                                // Rule at src\opts\shifts.isle line 151.
                                                                                returns.extend(Some(v1232));
                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                            }
                                                                            let v1189 = C::ty_bits_u64(ctx, v2.0);
                                                                            let v1235 = C::u64_le(ctx, v1189, v1227);
                                                                            if v1235 == true {
                                                                                let v932 = constructor_iconst_u(ctx, v2.0, 0x0_u64);
                                                                                let v933 = C::subsume(ctx, v932);
                                                                                // Rule at src\opts\shifts.isle line 183.
                                                                                returns.extend(Some(v933));
                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                let mut v127 = C::inst_data_value_etor_returns::default();
                                                                C::inst_data_value_etor(ctx, v124.0, &mut v127);
                                                                let mut v127 = v127.into_context_iter();
                                                                while let Some(v128) = v127.next(ctx) {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v607,
                                                                        imm: v608,
                                                                    } = &v128.1 {
                                                                        if let &Opcode::Iconst = v607 {
                                                                            let v702 = constructor_ishl(ctx, v2.0, v124.0, v7.1);
                                                                            let v703 = constructor_ishl(ctx, v2.0, v702, v124.1);
                                                                            // Rule at src\opts\cprop.isle line 227.
                                                                            returns.extend(Some(v703));
                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Ushr => {
                                                            let v526 = C::fits_in_64(ctx, v2.0);
                                                            if let Some(v527) = v526 {
                                                                if v19.0 == v527 {
                                                                    let v124 = C::unpack_value_array_2(ctx, v123);
                                                                    let mut v199 = C::inst_data_value_etor_returns::default();
                                                                    C::inst_data_value_etor(ctx, v124.1, &mut v199);
                                                                    let mut v199 = v199.into_context_iter();
                                                                    while let Some(v200) = v199.next(ctx) {
                                                                        if let &InstructionData::UnaryImm {
                                                                            opcode: ref v226,
                                                                            imm: v227,
                                                                        } = &v200.1 {
                                                                            if let &Opcode::Iconst = v226 {
                                                                                if v15 == v227 {
                                                                                    let v1180 = C::imm64(ctx, 0xffffffffffffffff_u64);
                                                                                    let v1181 = C::imm64_shl(ctx, v527, v1180, v227);
                                                                                    let v1182 = constructor_iconst(ctx, v527, v1181);
                                                                                    let v1183 = constructor_band(ctx, v527, v124.0, v1182);
                                                                                    // Rule at src\opts\shifts.isle line 26.
                                                                                    returns.extend(Some(v1183));
                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Sshr => {
                                                            let v526 = C::fits_in_64(ctx, v2.0);
                                                            if let Some(v527) = v526 {
                                                                if v19.0 == v527 {
                                                                    let v124 = C::unpack_value_array_2(ctx, v123);
                                                                    let mut v199 = C::inst_data_value_etor_returns::default();
                                                                    C::inst_data_value_etor(ctx, v124.1, &mut v199);
                                                                    let mut v199 = v199.into_context_iter();
                                                                    while let Some(v200) = v199.next(ctx) {
                                                                        if let &InstructionData::UnaryImm {
                                                                            opcode: ref v226,
                                                                            imm: v227,
                                                                        } = &v200.1 {
                                                                            if let &Opcode::Iconst = v226 {
                                                                                if v15 == v227 {
                                                                                    let v1180 = C::imm64(ctx, 0xffffffffffffffff_u64);
                                                                                    let v1181 = C::imm64_shl(ctx, v527, v1180, v227);
                                                                                    let v1182 = constructor_iconst(ctx, v527, v1181);
                                                                                    let v1183 = constructor_band(ctx, v527, v124.0, v1182);
                                                                                    // Rule at src\opts\shifts.isle line 31.
                                                                                    returns.extend(Some(v1183));
                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                                &InstructionData::UnaryImm {
                                                    opcode: ref v22,
                                                    imm: v23,
                                                } => {
                                                    if let &Opcode::Iconst = v22 {
                                                        let v526 = C::fits_in_64(ctx, v2.0);
                                                        if let Some(v527) = v526 {
                                                            if v19.0 == v527 {
                                                                let v559 = C::imm64_shl(ctx, v527, v23, v15);
                                                                let v560 = constructor_iconst(ctx, v527, v559);
                                                                let v561 = C::subsume(ctx, v560);
                                                                // Rule at src\opts\cprop.isle line 55.
                                                                returns.extend(Some(v561));
                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                        let v16 = C::u64_from_imm64(ctx, v15);
                                        if v16 == 0x0_u64 {
                                            if v2.0 == v11.0 {
                                                let v17 = C::subsume(ctx, v7.0);
                                                // Rule at src\opts\shifts.isle line 3.
                                                returns.extend(Some(v17));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                        let v235 = constructor_ty_shift_mask(ctx, v2.0);
                                        let v1226 = C::u64_and(ctx, v16, v235);
                                        let v1253 = C::u64_eq(ctx, v16, v1226);
                                        if v1253 == false {
                                            let v1254 = constructor_iconst_u(ctx, v11.0, v1226);
                                            let v1255 = constructor_ishl(ctx, v2.0, v7.0, v1254);
                                            // Rule at src\opts\shifts.isle line 292.
                                            returns.extend(Some(v1255));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v18 = C::inst_data_value_etor_returns::default();
                        C::inst_data_value_etor(ctx, v7.0, &mut v18);
                        let mut v18 = v18.into_context_iter();
                        while let Some(v19) = v18.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v29,
                                arg: v30,
                            } = &v19.1 {
                                if let &Opcode::Splat = v29 {
                                    if v2.0 == v19.0 {
                                        let v1228 = C::lane_type(ctx, v2.0);
                                        let v1384 = constructor_ishl(ctx, v1228, v30, v7.1);
                                        let v1385 = constructor_splat(ctx, v2.0, v1384);
                                        // Rule at src\opts\vector.isle line 74.
                                        returns.extend(Some(v1385));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Ushr => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_value_etor_returns::default();
                        C::inst_data_value_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Binary {
                                    opcode: ref v104,
                                    args: ref v105,
                                } => {
                                    if let &Opcode::Iconcat = v104 {
                                        let v106 = C::unpack_value_array_2(ctx, v105);
                                        let v1221 = constructor_ushr(ctx, v2.0, v7.0, v106.0);
                                        // Rule at src\opts\shifts.isle line 139.
                                        returns.extend(Some(v1221));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v26,
                                    arg: v27,
                                } => {
                                    match v26 {
                                        &Opcode::Ireduce => {
                                            let v958 = C::value_type(ctx, v27);
                                            let v1213 = C::fits_in_64(ctx, v958);
                                            if let Some(v1214) = v1213 {
                                                let v1216 = constructor_ushr(ctx, v2.0, v7.0, v27);
                                                // Rule at src\opts\shifts.isle line 117.
                                                returns.extend(Some(v1216));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                        &Opcode::Uextend => {
                                            let v1216 = constructor_ushr(ctx, v2.0, v7.0, v27);
                                            // Rule at src\opts\shifts.isle line 118.
                                            returns.extend(Some(v1216));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        &Opcode::Sextend => {
                                            let v1216 = constructor_ushr(ctx, v2.0, v7.0, v27);
                                            // Rule at src\opts\shifts.isle line 119.
                                            returns.extend(Some(v1216));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        let mut v18 = C::inst_data_value_etor_returns::default();
                                        C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            match &v19.1 {
                                                &InstructionData::Binary {
                                                    opcode: ref v122,
                                                    args: ref v123,
                                                } => {
                                                    match v122 {
                                                        &Opcode::Imul => {
                                                            let v206 = C::ty_half_width(ctx, v2.0);
                                                            if let Some(v207) = v206 {
                                                                if v2.0 == v19.0 {
                                                                    let v124 = C::unpack_value_array_2(ctx, v123);
                                                                    let mut v127 = C::inst_data_value_etor_returns::default();
                                                                    C::inst_data_value_etor(ctx, v124.0, &mut v127);
                                                                    let mut v127 = v127.into_context_iter();
                                                                    while let Some(v128) = v127.next(ctx) {
                                                                        if let &InstructionData::Unary {
                                                                            opcode: ref v196,
                                                                            arg: v197,
                                                                        } = &v128.1 {
                                                                            if let &Opcode::Uextend = v196 {
                                                                                let v198 = C::value_type(ctx, v197);
                                                                                let v208 = C::ty_equal(ctx, v198, v207);
                                                                                if v208 == true {
                                                                                    let v16 = C::u64_from_imm64(ctx, v15);
                                                                                    let v209 = C::ty_bits_u64(ctx, v198);
                                                                                    let v210 = C::u64_eq(ctx, v16, v209);
                                                                                    if v210 == true {
                                                                                        let mut v199 = C::inst_data_value_etor_returns::default();
                                                                                        C::inst_data_value_etor(ctx, v124.1, &mut v199);
                                                                                        let mut v199 = v199.into_context_iter();
                                                                                        while let Some(v200) = v199.next(ctx) {
                                                                                            if let &InstructionData::Unary {
                                                                                                opcode: ref v203,
                                                                                                arg: v204,
                                                                                            } = &v200.1 {
                                                                                                if let &Opcode::Uextend = v203 {
                                                                                                    let v205 = C::value_type(ctx, v204);
                                                                                                    if v198 == v205 {
                                                                                                        let v213 = constructor_umulhi(ctx, v198, v197, v204);
                                                                                                        let v214 = constructor_uextend(ctx, v2.0, v213);
                                                                                                        // Rule at src\opts\arithmetic.isle line 218.
                                                                                                        returns.extend(Some(v214));
                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Ishl => {
                                                            let v124 = C::unpack_value_array_2(ctx, v123);
                                                            let mut v199 = C::inst_data_value_etor_returns::default();
                                                            C::inst_data_value_etor(ctx, v124.1, &mut v199);
                                                            let mut v199 = v199.into_context_iter();
                                                            while let Some(v200) = v199.next(ctx) {
                                                                if let &InstructionData::UnaryImm {
                                                                    opcode: ref v226,
                                                                    imm: v227,
                                                                } = &v200.1 {
                                                                    if let &Opcode::Iconst = v226 {
                                                                        if v15 == v227 {
                                                                            let v52 = C::ty_int(ctx, v2.0);
                                                                            if let Some(v53) = v52 {
                                                                                let v228 = C::u64_from_imm64(ctx, v227);
                                                                                let v1195 = C::u64_is_zero(ctx, v228);
                                                                                if v1195 == false {
                                                                                    let v1196 = C::ty_bits(ctx, v53);
                                                                                    let v1197 = C::u8_as_u64(ctx, v1196);
                                                                                    let v1198 = C::u64_sub(ctx, v1197, v228);
                                                                                    let v1199 = constructor_shift_amt_to_type(ctx, v1198);
                                                                                    if let Some(v1200) = v1199 {
                                                                                        if v19.0 == v53 {
                                                                                            let v1201 = constructor_ireduce(ctx, v1200, v124.0);
                                                                                            let v1203 = constructor_uextend(ctx, v53, v1201);
                                                                                            // Rule at src\opts\shifts.isle line 87.
                                                                                            returns.extend(Some(v1203));
                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            let v526 = C::fits_in_64(ctx, v2.0);
                                                                            if let Some(v527) = v526 {
                                                                                let v1047 = C::ty_int(ctx, v527);
                                                                                if let Some(v1048) = v1047 {
                                                                                    if v19.0 == v1048 {
                                                                                        let v1184 = C::ty_mask(ctx, v1048);
                                                                                        let v1185 = C::imm64(ctx, v1184);
                                                                                        let v1186 = C::imm64_ushr(ctx, v1048, v1185, v227);
                                                                                        let v1187 = constructor_iconst(ctx, v1048, v1186);
                                                                                        let v1188 = constructor_band(ctx, v1048, v124.0, v1187);
                                                                                        // Rule at src\opts\shifts.isle line 40.
                                                                                        returns.extend(Some(v1188));
                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Ushr => {
                                                            if v2.0 == v19.0 {
                                                                let v124 = C::unpack_value_array_2(ctx, v123);
                                                                let mut v199 = C::inst_data_value_etor_returns::default();
                                                                C::inst_data_value_etor(ctx, v124.1, &mut v199);
                                                                let mut v199 = v199.into_context_iter();
                                                                while let Some(v200) = v199.next(ctx) {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v226,
                                                                        imm: v227,
                                                                    } = &v200.1 {
                                                                        if let &Opcode::Iconst = v226 {
                                                                            let v228 = C::u64_from_imm64(ctx, v227);
                                                                            let v235 = constructor_ty_shift_mask(ctx, v2.0);
                                                                            let v1225 = C::u64_and(ctx, v228, v235);
                                                                            let v16 = C::u64_from_imm64(ctx, v15);
                                                                            let v1226 = C::u64_and(ctx, v16, v235);
                                                                            let v1227 = C::u64_add(ctx, v1225, v1226);
                                                                            let v1228 = C::lane_type(ctx, v2.0);
                                                                            let v1229 = C::ty_bits_u64(ctx, v1228);
                                                                            let v1230 = C::u64_lt(ctx, v1227, v1229);
                                                                            if v1230 == true {
                                                                                let v1231 = constructor_iconst_u(ctx, v200.0, v1227);
                                                                                let v1233 = constructor_ushr(ctx, v2.0, v124.0, v1231);
                                                                                // Rule at src\opts\shifts.isle line 160.
                                                                                returns.extend(Some(v1233));
                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                            }
                                                                            let v1189 = C::ty_bits_u64(ctx, v2.0);
                                                                            let v1235 = C::u64_le(ctx, v1189, v1227);
                                                                            if v1235 == true {
                                                                                let v932 = constructor_iconst_u(ctx, v2.0, 0x0_u64);
                                                                                let v933 = C::subsume(ctx, v932);
                                                                                // Rule at src\opts\shifts.isle line 192.
                                                                                returns.extend(Some(v933));
                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                let mut v127 = C::inst_data_value_etor_returns::default();
                                                                C::inst_data_value_etor(ctx, v124.0, &mut v127);
                                                                let mut v127 = v127.into_context_iter();
                                                                while let Some(v128) = v127.next(ctx) {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v607,
                                                                        imm: v608,
                                                                    } = &v128.1 {
                                                                        if let &Opcode::Iconst = v607 {
                                                                            let v704 = constructor_ushr(ctx, v2.0, v124.0, v7.1);
                                                                            let v705 = constructor_ushr(ctx, v2.0, v704, v124.1);
                                                                            // Rule at src\opts\cprop.isle line 229.
                                                                            returns.extend(Some(v705));
                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                                &InstructionData::UnaryImm {
                                                    opcode: ref v22,
                                                    imm: v23,
                                                } => {
                                                    if let &Opcode::Iconst = v22 {
                                                        let v526 = C::fits_in_64(ctx, v2.0);
                                                        if let Some(v527) = v526 {
                                                            if v19.0 == v527 {
                                                                let v562 = C::imm64_ushr(ctx, v527, v23, v15);
                                                                let v563 = constructor_iconst(ctx, v527, v562);
                                                                let v564 = C::subsume(ctx, v563);
                                                                // Rule at src\opts\cprop.isle line 60.
                                                                returns.extend(Some(v564));
                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                        let v16 = C::u64_from_imm64(ctx, v15);
                                        if v16 == 0x0_u64 {
                                            if v2.0 == v11.0 {
                                                let v17 = C::subsume(ctx, v7.0);
                                                // Rule at src\opts\shifts.isle line 7.
                                                returns.extend(Some(v17));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                        let v235 = constructor_ty_shift_mask(ctx, v2.0);
                                        let v1226 = C::u64_and(ctx, v16, v235);
                                        let v1253 = C::u64_eq(ctx, v16, v1226);
                                        if v1253 == false {
                                            let v1254 = constructor_iconst_u(ctx, v11.0, v1226);
                                            let v1256 = constructor_ushr(ctx, v2.0, v7.0, v1254);
                                            // Rule at src\opts\shifts.isle line 295.
                                            returns.extend(Some(v1256));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v18 = C::inst_data_value_etor_returns::default();
                        C::inst_data_value_etor(ctx, v7.0, &mut v18);
                        let mut v18 = v18.into_context_iter();
                        while let Some(v19) = v18.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v29,
                                arg: v30,
                            } = &v19.1 {
                                if let &Opcode::Splat = v29 {
                                    if v2.0 == v19.0 {
                                        let v1228 = C::lane_type(ctx, v2.0);
                                        let v1386 = constructor_ushr(ctx, v1228, v30, v7.1);
                                        let v1387 = constructor_splat(ctx, v2.0, v1386);
                                        // Rule at src\opts\vector.isle line 77.
                                        returns.extend(Some(v1387));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Sshr => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_value_etor_returns::default();
                        C::inst_data_value_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Binary {
                                    opcode: ref v104,
                                    args: ref v105,
                                } => {
                                    if let &Opcode::Iconcat = v104 {
                                        let v106 = C::unpack_value_array_2(ctx, v105);
                                        let v1222 = constructor_sshr(ctx, v2.0, v7.0, v106.0);
                                        // Rule at src\opts\shifts.isle line 140.
                                        returns.extend(Some(v1222));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v26,
                                    arg: v27,
                                } => {
                                    match v26 {
                                        &Opcode::Ireduce => {
                                            let v958 = C::value_type(ctx, v27);
                                            let v1213 = C::fits_in_64(ctx, v958);
                                            if let Some(v1214) = v1213 {
                                                let v1217 = constructor_sshr(ctx, v2.0, v7.0, v27);
                                                // Rule at src\opts\shifts.isle line 120.
                                                returns.extend(Some(v1217));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                        &Opcode::Uextend => {
                                            let v1217 = constructor_sshr(ctx, v2.0, v7.0, v27);
                                            // Rule at src\opts\shifts.isle line 121.
                                            returns.extend(Some(v1217));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        &Opcode::Sextend => {
                                            let v1217 = constructor_sshr(ctx, v2.0, v7.0, v27);
                                            // Rule at src\opts\shifts.isle line 122.
                                            returns.extend(Some(v1217));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        let mut v18 = C::inst_data_value_etor_returns::default();
                                        C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            match &v19.1 {
                                                &InstructionData::Binary {
                                                    opcode: ref v122,
                                                    args: ref v123,
                                                } => {
                                                    match v122 {
                                                        &Opcode::Imul => {
                                                            let v206 = C::ty_half_width(ctx, v2.0);
                                                            if let Some(v207) = v206 {
                                                                if v2.0 == v19.0 {
                                                                    let v124 = C::unpack_value_array_2(ctx, v123);
                                                                    let mut v127 = C::inst_data_value_etor_returns::default();
                                                                    C::inst_data_value_etor(ctx, v124.0, &mut v127);
                                                                    let mut v127 = v127.into_context_iter();
                                                                    while let Some(v128) = v127.next(ctx) {
                                                                        if let &InstructionData::Unary {
                                                                            opcode: ref v196,
                                                                            arg: v197,
                                                                        } = &v128.1 {
                                                                            if let &Opcode::Sextend = v196 {
                                                                                let v198 = C::value_type(ctx, v197);
                                                                                let v208 = C::ty_equal(ctx, v198, v207);
                                                                                if v208 == true {
                                                                                    let v16 = C::u64_from_imm64(ctx, v15);
                                                                                    let v209 = C::ty_bits_u64(ctx, v198);
                                                                                    let v210 = C::u64_eq(ctx, v16, v209);
                                                                                    if v210 == true {
                                                                                        let mut v199 = C::inst_data_value_etor_returns::default();
                                                                                        C::inst_data_value_etor(ctx, v124.1, &mut v199);
                                                                                        let mut v199 = v199.into_context_iter();
                                                                                        while let Some(v200) = v199.next(ctx) {
                                                                                            if let &InstructionData::Unary {
                                                                                                opcode: ref v203,
                                                                                                arg: v204,
                                                                                            } = &v200.1 {
                                                                                                if let &Opcode::Sextend = v203 {
                                                                                                    let v205 = C::value_type(ctx, v204);
                                                                                                    if v198 == v205 {
                                                                                                        let v211 = constructor_smulhi(ctx, v198, v197, v204);
                                                                                                        let v212 = constructor_sextend(ctx, v2.0, v211);
                                                                                                        // Rule at src\opts\arithmetic.isle line 212.
                                                                                                        returns.extend(Some(v212));
                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Bor => {
                                                            let v16 = C::u64_from_imm64(ctx, v15);
                                                            let v235 = constructor_ty_shift_mask(ctx, v2.0);
                                                            let v236 = C::u64_eq(ctx, v16, v235);
                                                            if v236 == true {
                                                                if v2.0 == v11.0 {
                                                                    if v2.0 == v19.0 {
                                                                        let v124 = C::unpack_value_array_2(ctx, v123);
                                                                        let mut v127 = C::inst_data_value_etor_returns::default();
                                                                        C::inst_data_value_etor(ctx, v124.0, &mut v127);
                                                                        let mut v127 = v127.into_context_iter();
                                                                        while let Some(v128) = v127.next(ctx) {
                                                                            if let &InstructionData::Unary {
                                                                                opcode: ref v196,
                                                                                arg: v197,
                                                                            } = &v128.1 {
                                                                                if let &Opcode::Ineg = v196 {
                                                                                    if v2.0 == v128.0 {
                                                                                        if v124.1 == v197 {
                                                                                            let v238 = constructor_bmask(ctx, v2.0, v197);
                                                                                            // Rule at src\opts\bitops.isle line 88.
                                                                                            returns.extend(Some(v238));
                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        let mut v199 = C::inst_data_value_etor_returns::default();
                                                                        C::inst_data_value_etor(ctx, v124.1, &mut v199);
                                                                        let mut v199 = v199.into_context_iter();
                                                                        while let Some(v200) = v199.next(ctx) {
                                                                            if let &InstructionData::Unary {
                                                                                opcode: ref v203,
                                                                                arg: v204,
                                                                            } = &v200.1 {
                                                                                if let &Opcode::Ineg = v203 {
                                                                                    if v124.0 == v204 {
                                                                                        if v2.0 == v200.0 {
                                                                                            let v237 = constructor_bmask(ctx, v2.0, v124.0);
                                                                                            // Rule at src\opts\bitops.isle line 84.
                                                                                            returns.extend(Some(v237));
                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Ishl => {
                                                            let v124 = C::unpack_value_array_2(ctx, v123);
                                                            let mut v199 = C::inst_data_value_etor_returns::default();
                                                            C::inst_data_value_etor(ctx, v124.1, &mut v199);
                                                            let mut v199 = v199.into_context_iter();
                                                            while let Some(v200) = v199.next(ctx) {
                                                                if let &InstructionData::UnaryImm {
                                                                    opcode: ref v226,
                                                                    imm: v227,
                                                                } = &v200.1 {
                                                                    if let &Opcode::Iconst = v226 {
                                                                        if v2.0 == v19.0 {
                                                                            let v16 = C::u64_from_imm64(ctx, v15);
                                                                            let v228 = C::u64_from_imm64(ctx, v227);
                                                                            if v16 == v228 {
                                                                                let mut v127 = C::inst_data_value_etor_returns::default();
                                                                                C::inst_data_value_etor(ctx, v124.0, &mut v127);
                                                                                let mut v127 = v127.into_context_iter();
                                                                                while let Some(v128) = v127.next(ctx) {
                                                                                    if let &InstructionData::Unary {
                                                                                        opcode: ref v196,
                                                                                        arg: v197,
                                                                                    } = &v128.1 {
                                                                                        match v196 {
                                                                                            &Opcode::Uextend => {
                                                                                                if v2.0 == v128.0 {
                                                                                                    let v1189 = C::ty_bits_u64(ctx, v2.0);
                                                                                                    let v198 = C::value_type(ctx, v197);
                                                                                                    let v209 = C::ty_bits_u64(ctx, v198);
                                                                                                    let v1190 = C::u64_sub(ctx, v1189, v209);
                                                                                                    let v1191 = C::u64_eq(ctx, v228, v1190);
                                                                                                    if v1191 == true {
                                                                                                        let v1192 = constructor_sextend(ctx, v2.0, v197);
                                                                                                        // Rule at src\opts\shifts.isle line 49.
                                                                                                        returns.extend(Some(v1192));
                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                    }
                                                                                                    let v1193 = C::u64_lt(ctx, v228, v1190);
                                                                                                    if v1193 == true {
                                                                                                        // Rule at src\opts\shifts.isle line 60.
                                                                                                        returns.extend(Some(v124.0));
                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            &Opcode::Sextend => {
                                                                                                let v1189 = C::ty_bits_u64(ctx, v2.0);
                                                                                                let v198 = C::value_type(ctx, v197);
                                                                                                let v209 = C::ty_bits_u64(ctx, v198);
                                                                                                let v1190 = C::u64_sub(ctx, v1189, v209);
                                                                                                let v1194 = C::u64_le(ctx, v228, v1190);
                                                                                                if v1194 == true {
                                                                                                    if v2.0 == v128.0 {
                                                                                                        // Rule at src\opts\shifts.isle line 70.
                                                                                                        returns.extend(Some(v124.0));
                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            _ => {}
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        if v15 == v227 {
                                                                            let v52 = C::ty_int(ctx, v2.0);
                                                                            if let Some(v53) = v52 {
                                                                                if v19.0 == v53 {
                                                                                    let v228 = C::u64_from_imm64(ctx, v227);
                                                                                    let v1195 = C::u64_is_zero(ctx, v228);
                                                                                    if v1195 == false {
                                                                                        let v1196 = C::ty_bits(ctx, v53);
                                                                                        let v1197 = C::u8_as_u64(ctx, v1196);
                                                                                        let v1198 = C::u64_sub(ctx, v1197, v228);
                                                                                        let v1199 = constructor_shift_amt_to_type(ctx, v1198);
                                                                                        if let Some(v1200) = v1199 {
                                                                                            let v1201 = constructor_ireduce(ctx, v1200, v124.0);
                                                                                            let v1202 = constructor_sextend(ctx, v53, v1201);
                                                                                            // Rule at src\opts\shifts.isle line 83.
                                                                                            returns.extend(Some(v1202));
                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Sshr => {
                                                            if v2.0 == v19.0 {
                                                                let v124 = C::unpack_value_array_2(ctx, v123);
                                                                let mut v127 = C::inst_data_value_etor_returns::default();
                                                                C::inst_data_value_etor(ctx, v124.0, &mut v127);
                                                                let mut v127 = v127.into_context_iter();
                                                                while let Some(v128) = v127.next(ctx) {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v607,
                                                                        imm: v608,
                                                                    } = &v128.1 {
                                                                        if let &Opcode::Iconst = v607 {
                                                                            let v706 = constructor_sshr(ctx, v2.0, v124.0, v7.1);
                                                                            let v707 = constructor_sshr(ctx, v2.0, v706, v124.1);
                                                                            // Rule at src\opts\cprop.isle line 231.
                                                                            returns.extend(Some(v707));
                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                        }
                                                                    }
                                                                }
                                                                let mut v199 = C::inst_data_value_etor_returns::default();
                                                                C::inst_data_value_etor(ctx, v124.1, &mut v199);
                                                                let mut v199 = v199.into_context_iter();
                                                                while let Some(v200) = v199.next(ctx) {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v226,
                                                                        imm: v227,
                                                                    } = &v200.1 {
                                                                        if let &Opcode::Iconst = v226 {
                                                                            let v228 = C::u64_from_imm64(ctx, v227);
                                                                            let v235 = constructor_ty_shift_mask(ctx, v2.0);
                                                                            let v1225 = C::u64_and(ctx, v228, v235);
                                                                            let v16 = C::u64_from_imm64(ctx, v15);
                                                                            let v1226 = C::u64_and(ctx, v16, v235);
                                                                            let v1227 = C::u64_add(ctx, v1225, v1226);
                                                                            let v1228 = C::lane_type(ctx, v2.0);
                                                                            let v1229 = C::ty_bits_u64(ctx, v1228);
                                                                            let v1230 = C::u64_lt(ctx, v1227, v1229);
                                                                            if v1230 == true {
                                                                                let v1231 = constructor_iconst_u(ctx, v200.0, v1227);
                                                                                let v1234 = constructor_sshr(ctx, v2.0, v124.0, v1231);
                                                                                // Rule at src\opts\shifts.isle line 169.
                                                                                returns.extend(Some(v1234));
                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                                &InstructionData::UnaryImm {
                                                    opcode: ref v22,
                                                    imm: v23,
                                                } => {
                                                    if let &Opcode::Iconst = v22 {
                                                        let v526 = C::fits_in_64(ctx, v2.0);
                                                        if let Some(v527) = v526 {
                                                            if v19.0 == v527 {
                                                                let v565 = C::imm64_sshr(ctx, v527, v23, v15);
                                                                let v566 = constructor_iconst(ctx, v527, v565);
                                                                let v567 = C::subsume(ctx, v566);
                                                                // Rule at src\opts\cprop.isle line 65.
                                                                returns.extend(Some(v567));
                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                        let v16 = C::u64_from_imm64(ctx, v15);
                                        if v16 == 0x0_u64 {
                                            if v2.0 == v11.0 {
                                                let v17 = C::subsume(ctx, v7.0);
                                                // Rule at src\opts\shifts.isle line 11.
                                                returns.extend(Some(v17));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                        let v235 = constructor_ty_shift_mask(ctx, v2.0);
                                        let v1226 = C::u64_and(ctx, v16, v235);
                                        let v1253 = C::u64_eq(ctx, v16, v1226);
                                        if v1253 == false {
                                            let v1254 = constructor_iconst_u(ctx, v11.0, v1226);
                                            let v1257 = constructor_sshr(ctx, v2.0, v7.0, v1254);
                                            // Rule at src\opts\shifts.isle line 298.
                                            returns.extend(Some(v1257));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v18 = C::inst_data_value_etor_returns::default();
                        C::inst_data_value_etor(ctx, v7.0, &mut v18);
                        let mut v18 = v18.into_context_iter();
                        while let Some(v19) = v18.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v29,
                                arg: v30,
                            } = &v19.1 {
                                if let &Opcode::Splat = v29 {
                                    if v2.0 == v19.0 {
                                        let v1228 = C::lane_type(ctx, v2.0);
                                        let v1388 = constructor_sshr(ctx, v1228, v30, v7.1);
                                        let v1389 = constructor_splat(ctx, v2.0, v1388);
                                        // Rule at src\opts\vector.isle line 80.
                                        returns.extend(Some(v1389));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Fadd => {
                        match v2.0 {
                            F32 => {
                                let v7 = C::unpack_value_array_2(ctx, v6);
                                let mut v10 = C::inst_data_value_etor_returns::default();
                                C::inst_data_value_etor(ctx, v7.1, &mut v10);
                                let mut v10 = v10.into_context_iter();
                                while let Some(v11) = v10.next(ctx) {
                                    if v11.0 == F32 {
                                        if let &InstructionData::UnaryIeee32 {
                                            opcode: ref v749,
                                            imm: v750,
                                        } = &v11.1 {
                                            if let &Opcode::F32const = v749 {
                                                let mut v18 = C::inst_data_value_etor_returns::default();
                                                C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if v19.0 == F32 {
                                                        if let &InstructionData::UnaryIeee32 {
                                                            opcode: ref v747,
                                                            imm: v748,
                                                        } = &v19.1 {
                                                            if let &Opcode::F32const = v747 {
                                                                let v751 = C::f32_add(ctx, v748, v750);
                                                                if let Some(v752) = v751 {
                                                                    let v753 = constructor_f32const(ctx, F32, v752);
                                                                    let v754 = C::subsume(ctx, v753);
                                                                    // Rule at src\opts\cprop.isle line 305.
                                                                    returns.extend(Some(v754));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            F64 => {
                                let v7 = C::unpack_value_array_2(ctx, v6);
                                let mut v10 = C::inst_data_value_etor_returns::default();
                                C::inst_data_value_etor(ctx, v7.1, &mut v10);
                                let mut v10 = v10.into_context_iter();
                                while let Some(v11) = v10.next(ctx) {
                                    if v11.0 == F64 {
                                        if let &InstructionData::UnaryIeee64 {
                                            opcode: ref v757,
                                            imm: v758,
                                        } = &v11.1 {
                                            if let &Opcode::F64const = v757 {
                                                let mut v18 = C::inst_data_value_etor_returns::default();
                                                C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if v19.0 == F64 {
                                                        if let &InstructionData::UnaryIeee64 {
                                                            opcode: ref v755,
                                                            imm: v756,
                                                        } = &v19.1 {
                                                            if let &Opcode::F64const = v755 {
                                                                let v759 = C::f64_add(ctx, v756, v758);
                                                                if let Some(v760) = v759 {
                                                                    let v761 = constructor_f64const(ctx, F64, v760);
                                                                    let v762 = C::subsume(ctx, v761);
                                                                    // Rule at src\opts\cprop.isle line 308.
                                                                    returns.extend(Some(v762));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                    }
                    &Opcode::Fsub => {
                        match v2.0 {
                            F32 => {
                                let v7 = C::unpack_value_array_2(ctx, v6);
                                let mut v10 = C::inst_data_value_etor_returns::default();
                                C::inst_data_value_etor(ctx, v7.1, &mut v10);
                                let mut v10 = v10.into_context_iter();
                                while let Some(v11) = v10.next(ctx) {
                                    if v11.0 == F32 {
                                        if let &InstructionData::UnaryIeee32 {
                                            opcode: ref v749,
                                            imm: v750,
                                        } = &v11.1 {
                                            if let &Opcode::F32const = v749 {
                                                let mut v18 = C::inst_data_value_etor_returns::default();
                                                C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if v19.0 == F32 {
                                                        if let &InstructionData::UnaryIeee32 {
                                                            opcode: ref v747,
                                                            imm: v748,
                                                        } = &v19.1 {
                                                            if let &Opcode::F32const = v747 {
                                                                let v763 = C::f32_sub(ctx, v748, v750);
                                                                if let Some(v764) = v763 {
                                                                    let v765 = constructor_f32const(ctx, F32, v764);
                                                                    let v766 = C::subsume(ctx, v765);
                                                                    // Rule at src\opts\cprop.isle line 312.
                                                                    returns.extend(Some(v766));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            F64 => {
                                let v7 = C::unpack_value_array_2(ctx, v6);
                                let mut v10 = C::inst_data_value_etor_returns::default();
                                C::inst_data_value_etor(ctx, v7.1, &mut v10);
                                let mut v10 = v10.into_context_iter();
                                while let Some(v11) = v10.next(ctx) {
                                    if v11.0 == F64 {
                                        if let &InstructionData::UnaryIeee64 {
                                            opcode: ref v757,
                                            imm: v758,
                                        } = &v11.1 {
                                            if let &Opcode::F64const = v757 {
                                                let mut v18 = C::inst_data_value_etor_returns::default();
                                                C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if v19.0 == F64 {
                                                        if let &InstructionData::UnaryIeee64 {
                                                            opcode: ref v755,
                                                            imm: v756,
                                                        } = &v19.1 {
                                                            if let &Opcode::F64const = v755 {
                                                                let v767 = C::f64_sub(ctx, v756, v758);
                                                                if let Some(v768) = v767 {
                                                                    let v769 = constructor_f64const(ctx, F64, v768);
                                                                    let v770 = C::subsume(ctx, v769);
                                                                    // Rule at src\opts\cprop.isle line 315.
                                                                    returns.extend(Some(v770));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                    }
                    &Opcode::Fmul => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_value_etor_returns::default();
                        C::inst_data_value_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Unary {
                                    opcode: ref v26,
                                    arg: v27,
                                } => {
                                    if let &Opcode::Fneg = v26 {
                                        if v2.0 == v11.0 {
                                            let mut v18 = C::inst_data_value_etor_returns::default();
                                            C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                            let mut v18 = v18.into_context_iter();
                                            while let Some(v19) = v18.next(ctx) {
                                                if let &InstructionData::Unary {
                                                    opcode: ref v29,
                                                    arg: v30,
                                                } = &v19.1 {
                                                    if let &Opcode::Fneg = v29 {
                                                        if v2.0 == v19.0 {
                                                            let v103 = constructor_fmul(ctx, v2.0, v30, v27);
                                                            // Rule at src\opts\arithmetic.isle line 107.
                                                            returns.extend(Some(v103));
                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::UnaryIeee32 {
                                    opcode: ref v749,
                                    imm: v750,
                                } => {
                                    if let &Opcode::F32const = v749 {
                                        if v2.0 == F32 {
                                            if v11.0 == F32 {
                                                let mut v18 = C::inst_data_value_etor_returns::default();
                                                C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if v19.0 == F32 {
                                                        if let &InstructionData::UnaryIeee32 {
                                                            opcode: ref v747,
                                                            imm: v748,
                                                        } = &v19.1 {
                                                            if let &Opcode::F32const = v747 {
                                                                let v771 = C::f32_mul(ctx, v748, v750);
                                                                if let Some(v772) = v771 {
                                                                    let v773 = constructor_f32const(ctx, F32, v772);
                                                                    let v774 = C::subsume(ctx, v773);
                                                                    // Rule at src\opts\cprop.isle line 319.
                                                                    returns.extend(Some(v774));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::UnaryIeee64 {
                                    opcode: ref v757,
                                    imm: v758,
                                } => {
                                    if let &Opcode::F64const = v757 {
                                        if v2.0 == F64 {
                                            if v11.0 == F64 {
                                                let mut v18 = C::inst_data_value_etor_returns::default();
                                                C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if v19.0 == F64 {
                                                        if let &InstructionData::UnaryIeee64 {
                                                            opcode: ref v755,
                                                            imm: v756,
                                                        } = &v19.1 {
                                                            if let &Opcode::F64const = v755 {
                                                                let v775 = C::f64_mul(ctx, v756, v758);
                                                                if let Some(v776) = v775 {
                                                                    let v777 = constructor_f64const(ctx, F64, v776);
                                                                    let v778 = C::subsume(ctx, v777);
                                                                    // Rule at src\opts\cprop.isle line 322.
                                                                    returns.extend(Some(v778));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    &Opcode::Fdiv => {
                        match v2.0 {
                            F32 => {
                                let v7 = C::unpack_value_array_2(ctx, v6);
                                let mut v10 = C::inst_data_value_etor_returns::default();
                                C::inst_data_value_etor(ctx, v7.1, &mut v10);
                                let mut v10 = v10.into_context_iter();
                                while let Some(v11) = v10.next(ctx) {
                                    if v11.0 == F32 {
                                        if let &InstructionData::UnaryIeee32 {
                                            opcode: ref v749,
                                            imm: v750,
                                        } = &v11.1 {
                                            if let &Opcode::F32const = v749 {
                                                let mut v18 = C::inst_data_value_etor_returns::default();
                                                C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if v19.0 == F32 {
                                                        if let &InstructionData::UnaryIeee32 {
                                                            opcode: ref v747,
                                                            imm: v748,
                                                        } = &v19.1 {
                                                            if let &Opcode::F32const = v747 {
                                                                let v779 = C::f32_div(ctx, v748, v750);
                                                                if let Some(v780) = v779 {
                                                                    let v781 = constructor_f32const(ctx, F32, v780);
                                                                    let v782 = C::subsume(ctx, v781);
                                                                    // Rule at src\opts\cprop.isle line 326.
                                                                    returns.extend(Some(v782));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            F64 => {
                                let v7 = C::unpack_value_array_2(ctx, v6);
                                let mut v10 = C::inst_data_value_etor_returns::default();
                                C::inst_data_value_etor(ctx, v7.1, &mut v10);
                                let mut v10 = v10.into_context_iter();
                                while let Some(v11) = v10.next(ctx) {
                                    if v11.0 == F64 {
                                        if let &InstructionData::UnaryIeee64 {
                                            opcode: ref v757,
                                            imm: v758,
                                        } = &v11.1 {
                                            if let &Opcode::F64const = v757 {
                                                let mut v18 = C::inst_data_value_etor_returns::default();
                                                C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if v19.0 == F64 {
                                                        if let &InstructionData::UnaryIeee64 {
                                                            opcode: ref v755,
                                                            imm: v756,
                                                        } = &v19.1 {
                                                            if let &Opcode::F64const = v755 {
                                                                let v783 = C::f64_div(ctx, v756, v758);
                                                                if let Some(v784) = v783 {
                                                                    let v785 = constructor_f64const(ctx, F64, v784);
                                                                    let v786 = C::subsume(ctx, v785);
                                                                    // Rule at src\opts\cprop.isle line 329.
                                                                    returns.extend(Some(v786));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                    }
                    &Opcode::Fcopysign => {
                        match v2.0 {
                            F16 => {
                                let v7 = C::unpack_value_array_2(ctx, v6);
                                let mut v10 = C::inst_data_value_etor_returns::default();
                                C::inst_data_value_etor(ctx, v7.1, &mut v10);
                                let mut v10 = v10.into_context_iter();
                                while let Some(v11) = v10.next(ctx) {
                                    if v11.0 == F16 {
                                        if let &InstructionData::UnaryIeee16 {
                                            opcode: ref v829,
                                            imm: v830,
                                        } = &v11.1 {
                                            if let &Opcode::F16const = v829 {
                                                let mut v18 = C::inst_data_value_etor_returns::default();
                                                C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if v19.0 == F16 {
                                                        if let &InstructionData::UnaryIeee16 {
                                                            opcode: ref v827,
                                                            imm: v828,
                                                        } = &v19.1 {
                                                            if let &Opcode::F16const = v827 {
                                                                let v907 = C::f16_copysign(ctx, v828, v830);
                                                                let v908 = constructor_f16const(ctx, F16, v907);
                                                                let v909 = C::subsume(ctx, v908);
                                                                // Rule at src\opts\cprop.isle line 412.
                                                                returns.extend(Some(v909));
                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            F32 => {
                                let v7 = C::unpack_value_array_2(ctx, v6);
                                let mut v10 = C::inst_data_value_etor_returns::default();
                                C::inst_data_value_etor(ctx, v7.1, &mut v10);
                                let mut v10 = v10.into_context_iter();
                                while let Some(v11) = v10.next(ctx) {
                                    if v11.0 == F32 {
                                        if let &InstructionData::UnaryIeee32 {
                                            opcode: ref v749,
                                            imm: v750,
                                        } = &v11.1 {
                                            if let &Opcode::F32const = v749 {
                                                let mut v18 = C::inst_data_value_etor_returns::default();
                                                C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if v19.0 == F32 {
                                                        if let &InstructionData::UnaryIeee32 {
                                                            opcode: ref v747,
                                                            imm: v748,
                                                        } = &v19.1 {
                                                            if let &Opcode::F32const = v747 {
                                                                let v910 = C::f32_copysign(ctx, v748, v750);
                                                                let v911 = constructor_f32const(ctx, F32, v910);
                                                                let v912 = C::subsume(ctx, v911);
                                                                // Rule at src\opts\cprop.isle line 414.
                                                                returns.extend(Some(v912));
                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            F64 => {
                                let v7 = C::unpack_value_array_2(ctx, v6);
                                let mut v10 = C::inst_data_value_etor_returns::default();
                                C::inst_data_value_etor(ctx, v7.1, &mut v10);
                                let mut v10 = v10.into_context_iter();
                                while let Some(v11) = v10.next(ctx) {
                                    if v11.0 == F64 {
                                        if let &InstructionData::UnaryIeee64 {
                                            opcode: ref v757,
                                            imm: v758,
                                        } = &v11.1 {
                                            if let &Opcode::F64const = v757 {
                                                let mut v18 = C::inst_data_value_etor_returns::default();
                                                C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if v19.0 == F64 {
                                                        if let &InstructionData::UnaryIeee64 {
                                                            opcode: ref v755,
                                                            imm: v756,
                                                        } = &v19.1 {
                                                            if let &Opcode::F64const = v755 {
                                                                let v913 = C::f64_copysign(ctx, v756, v758);
                                                                let v914 = constructor_f64const(ctx, F64, v913);
                                                                let v915 = C::subsume(ctx, v914);
                                                                // Rule at src\opts\cprop.isle line 416.
                                                                returns.extend(Some(v915));
                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            F128 => {
                                let v7 = C::unpack_value_array_2(ctx, v6);
                                let mut v10 = C::inst_data_value_etor_returns::default();
                                C::inst_data_value_etor(ctx, v7.1, &mut v10);
                                let mut v10 = v10.into_context_iter();
                                while let Some(v11) = v10.next(ctx) {
                                    if v11.0 == F128 {
                                        if let &InstructionData::UnaryConst {
                                            opcode: ref v847,
                                            constant_handle: v848,
                                        } = &v11.1 {
                                            if let &Opcode::F128const = v847 {
                                                let v849 = C::ieee128_constant_extractor(ctx, v848);
                                                if let Some(v850) = v849 {
                                                    let mut v18 = C::inst_data_value_etor_returns::default();
                                                    C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                                    let mut v18 = v18.into_context_iter();
                                                    while let Some(v19) = v18.next(ctx) {
                                                        if v19.0 == F128 {
                                                            if let &InstructionData::UnaryConst {
                                                                opcode: ref v843,
                                                                constant_handle: v844,
                                                            } = &v19.1 {
                                                                if let &Opcode::F128const = v843 {
                                                                    let v845 = C::ieee128_constant_extractor(ctx, v844);
                                                                    if let Some(v846) = v845 {
                                                                        let v916 = C::f128_copysign(ctx, v846, v850);
                                                                        let v917 = C::ieee128_constant(ctx, v916);
                                                                        let v918 = constructor_f128const(ctx, F128, v917);
                                                                        let v919 = C::subsume(ctx, v918);
                                                                        // Rule at src\opts\cprop.isle line 418.
                                                                        returns.extend(Some(v919));
                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                    }
                    &Opcode::Fmin => {
                        match v2.0 {
                            F16 => {
                                let v7 = C::unpack_value_array_2(ctx, v6);
                                let mut v10 = C::inst_data_value_etor_returns::default();
                                C::inst_data_value_etor(ctx, v7.1, &mut v10);
                                let mut v10 = v10.into_context_iter();
                                while let Some(v11) = v10.next(ctx) {
                                    if v11.0 == F16 {
                                        if let &InstructionData::UnaryIeee16 {
                                            opcode: ref v829,
                                            imm: v830,
                                        } = &v11.1 {
                                            if let &Opcode::F16const = v829 {
                                                let mut v18 = C::inst_data_value_etor_returns::default();
                                                C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if v19.0 == F16 {
                                                        if let &InstructionData::UnaryIeee16 {
                                                            opcode: ref v827,
                                                            imm: v828,
                                                        } = &v19.1 {
                                                            if let &Opcode::F16const = v827 {
                                                                let v831 = C::f16_min(ctx, v828, v830);
                                                                if let Some(v832) = v831 {
                                                                    let v833 = constructor_f16const(ctx, F32, v832);
                                                                    let v834 = C::subsume(ctx, v833);
                                                                    // Rule at src\opts\cprop.isle line 368.
                                                                    returns.extend(Some(v834));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            F32 => {
                                let v7 = C::unpack_value_array_2(ctx, v6);
                                let mut v10 = C::inst_data_value_etor_returns::default();
                                C::inst_data_value_etor(ctx, v7.1, &mut v10);
                                let mut v10 = v10.into_context_iter();
                                while let Some(v11) = v10.next(ctx) {
                                    if v11.0 == F32 {
                                        if let &InstructionData::UnaryIeee32 {
                                            opcode: ref v749,
                                            imm: v750,
                                        } = &v11.1 {
                                            if let &Opcode::F32const = v749 {
                                                let mut v18 = C::inst_data_value_etor_returns::default();
                                                C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if v19.0 == F32 {
                                                        if let &InstructionData::UnaryIeee32 {
                                                            opcode: ref v747,
                                                            imm: v748,
                                                        } = &v19.1 {
                                                            if let &Opcode::F32const = v747 {
                                                                let v835 = C::f32_min(ctx, v748, v750);
                                                                if let Some(v836) = v835 {
                                                                    let v837 = constructor_f32const(ctx, F32, v836);
                                                                    let v838 = C::subsume(ctx, v837);
                                                                    // Rule at src\opts\cprop.isle line 371.
                                                                    returns.extend(Some(v838));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            F64 => {
                                let v7 = C::unpack_value_array_2(ctx, v6);
                                let mut v10 = C::inst_data_value_etor_returns::default();
                                C::inst_data_value_etor(ctx, v7.1, &mut v10);
                                let mut v10 = v10.into_context_iter();
                                while let Some(v11) = v10.next(ctx) {
                                    if v11.0 == F64 {
                                        if let &InstructionData::UnaryIeee64 {
                                            opcode: ref v757,
                                            imm: v758,
                                        } = &v11.1 {
                                            if let &Opcode::F64const = v757 {
                                                let mut v18 = C::inst_data_value_etor_returns::default();
                                                C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if v19.0 == F64 {
                                                        if let &InstructionData::UnaryIeee64 {
                                                            opcode: ref v755,
                                                            imm: v756,
                                                        } = &v19.1 {
                                                            if let &Opcode::F64const = v755 {
                                                                let v839 = C::f64_min(ctx, v756, v758);
                                                                if let Some(v840) = v839 {
                                                                    let v841 = constructor_f64const(ctx, F64, v840);
                                                                    let v842 = C::subsume(ctx, v841);
                                                                    // Rule at src\opts\cprop.isle line 374.
                                                                    returns.extend(Some(v842));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            F128 => {
                                let v7 = C::unpack_value_array_2(ctx, v6);
                                let mut v10 = C::inst_data_value_etor_returns::default();
                                C::inst_data_value_etor(ctx, v7.1, &mut v10);
                                let mut v10 = v10.into_context_iter();
                                while let Some(v11) = v10.next(ctx) {
                                    if v11.0 == F128 {
                                        if let &InstructionData::UnaryConst {
                                            opcode: ref v847,
                                            constant_handle: v848,
                                        } = &v11.1 {
                                            if let &Opcode::F128const = v847 {
                                                let v849 = C::ieee128_constant_extractor(ctx, v848);
                                                if let Some(v850) = v849 {
                                                    let mut v18 = C::inst_data_value_etor_returns::default();
                                                    C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                                    let mut v18 = v18.into_context_iter();
                                                    while let Some(v19) = v18.next(ctx) {
                                                        if v19.0 == F128 {
                                                            if let &InstructionData::UnaryConst {
                                                                opcode: ref v843,
                                                                constant_handle: v844,
                                                            } = &v19.1 {
                                                                if let &Opcode::F128const = v843 {
                                                                    let v845 = C::ieee128_constant_extractor(ctx, v844);
                                                                    if let Some(v846) = v845 {
                                                                        let v851 = C::f128_min(ctx, v846, v850);
                                                                        if let Some(v852) = v851 {
                                                                            let v854 = C::ieee128_constant(ctx, v852);
                                                                            let v855 = constructor_f128const(ctx, F128, v854);
                                                                            let v856 = C::subsume(ctx, v855);
                                                                            // Rule at src\opts\cprop.isle line 377.
                                                                            returns.extend(Some(v856));
                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                    }
                    &Opcode::Fmax => {
                        match v2.0 {
                            F16 => {
                                let v7 = C::unpack_value_array_2(ctx, v6);
                                let mut v10 = C::inst_data_value_etor_returns::default();
                                C::inst_data_value_etor(ctx, v7.1, &mut v10);
                                let mut v10 = v10.into_context_iter();
                                while let Some(v11) = v10.next(ctx) {
                                    if v11.0 == F16 {
                                        if let &InstructionData::UnaryIeee16 {
                                            opcode: ref v829,
                                            imm: v830,
                                        } = &v11.1 {
                                            if let &Opcode::F16const = v829 {
                                                let mut v18 = C::inst_data_value_etor_returns::default();
                                                C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if v19.0 == F16 {
                                                        if let &InstructionData::UnaryIeee16 {
                                                            opcode: ref v827,
                                                            imm: v828,
                                                        } = &v19.1 {
                                                            if let &Opcode::F16const = v827 {
                                                                let v857 = C::f16_max(ctx, v828, v830);
                                                                if let Some(v858) = v857 {
                                                                    let v860 = constructor_f16const(ctx, F16, v858);
                                                                    let v861 = C::subsume(ctx, v860);
                                                                    // Rule at src\opts\cprop.isle line 381.
                                                                    returns.extend(Some(v861));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            F32 => {
                                let v7 = C::unpack_value_array_2(ctx, v6);
                                let mut v10 = C::inst_data_value_etor_returns::default();
                                C::inst_data_value_etor(ctx, v7.1, &mut v10);
                                let mut v10 = v10.into_context_iter();
                                while let Some(v11) = v10.next(ctx) {
                                    if v11.0 == F32 {
                                        if let &InstructionData::UnaryIeee32 {
                                            opcode: ref v749,
                                            imm: v750,
                                        } = &v11.1 {
                                            if let &Opcode::F32const = v749 {
                                                let mut v18 = C::inst_data_value_etor_returns::default();
                                                C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if v19.0 == F32 {
                                                        if let &InstructionData::UnaryIeee32 {
                                                            opcode: ref v747,
                                                            imm: v748,
                                                        } = &v19.1 {
                                                            if let &Opcode::F32const = v747 {
                                                                let v862 = C::f32_max(ctx, v748, v750);
                                                                if let Some(v863) = v862 {
                                                                    let v864 = constructor_f32const(ctx, F32, v863);
                                                                    let v865 = C::subsume(ctx, v864);
                                                                    // Rule at src\opts\cprop.isle line 384.
                                                                    returns.extend(Some(v865));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            F64 => {
                                let v7 = C::unpack_value_array_2(ctx, v6);
                                let mut v10 = C::inst_data_value_etor_returns::default();
                                C::inst_data_value_etor(ctx, v7.1, &mut v10);
                                let mut v10 = v10.into_context_iter();
                                while let Some(v11) = v10.next(ctx) {
                                    if v11.0 == F64 {
                                        if let &InstructionData::UnaryIeee64 {
                                            opcode: ref v757,
                                            imm: v758,
                                        } = &v11.1 {
                                            if let &Opcode::F64const = v757 {
                                                let mut v18 = C::inst_data_value_etor_returns::default();
                                                C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if v19.0 == F64 {
                                                        if let &InstructionData::UnaryIeee64 {
                                                            opcode: ref v755,
                                                            imm: v756,
                                                        } = &v19.1 {
                                                            if let &Opcode::F64const = v755 {
                                                                let v866 = C::f64_max(ctx, v756, v758);
                                                                if let Some(v867) = v866 {
                                                                    let v868 = constructor_f64const(ctx, F64, v867);
                                                                    let v869 = C::subsume(ctx, v868);
                                                                    // Rule at src\opts\cprop.isle line 387.
                                                                    returns.extend(Some(v869));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            F128 => {
                                let v7 = C::unpack_value_array_2(ctx, v6);
                                let mut v10 = C::inst_data_value_etor_returns::default();
                                C::inst_data_value_etor(ctx, v7.1, &mut v10);
                                let mut v10 = v10.into_context_iter();
                                while let Some(v11) = v10.next(ctx) {
                                    if v11.0 == F128 {
                                        if let &InstructionData::UnaryConst {
                                            opcode: ref v847,
                                            constant_handle: v848,
                                        } = &v11.1 {
                                            if let &Opcode::F128const = v847 {
                                                let v849 = C::ieee128_constant_extractor(ctx, v848);
                                                if let Some(v850) = v849 {
                                                    let mut v18 = C::inst_data_value_etor_returns::default();
                                                    C::inst_data_value_etor(ctx, v7.0, &mut v18);
                                                    let mut v18 = v18.into_context_iter();
                                                    while let Some(v19) = v18.next(ctx) {
                                                        if v19.0 == F128 {
                                                            if let &InstructionData::UnaryConst {
                                                                opcode: ref v843,
                                                                constant_handle: v844,
                                                            } = &v19.1 {
                                                                if let &Opcode::F128const = v843 {
                                                                    let v845 = C::ieee128_constant_extractor(ctx, v844);
                                                                    if let Some(v846) = v845 {
                                                                        let v870 = C::f128_max(ctx, v846, v850);
                                                                        if let Some(v871) = v870 {
                                                                            let v872 = C::ieee128_constant(ctx, v871);
                                                                            let v873 = constructor_f128const(ctx, F128, v872);
                                                                            let v874 = C::subsume(ctx, v873);
                                                                            // Rule at src\opts\cprop.isle line 390.
                                                                            returns.extend(Some(v874));
                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                    }
                    &Opcode::Iconcat => {
                        if v2.0 == I128 {
                            let v7 = C::unpack_value_array_2(ctx, v6);
                            let mut v10 = C::inst_data_value_etor_returns::default();
                            C::inst_data_value_etor(ctx, v7.1, &mut v10);
                            let mut v10 = v10.into_context_iter();
                            while let Some(v11) = v10.next(ctx) {
                                match &v11.1 {
                                    &InstructionData::Binary {
                                        opcode: ref v104,
                                        args: ref v105,
                                    } => {
                                        if let &Opcode::Sshr = v104 {
                                            let v106 = C::unpack_value_array_2(ctx, v105);
                                            if v7.0 == v106.0 {
                                                let mut v109 = C::inst_data_value_etor_returns::default();
                                                C::inst_data_value_etor(ctx, v106.1, &mut v109);
                                                let mut v109 = v109.into_context_iter();
                                                while let Some(v110) = v109.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v708,
                                                        imm: v709,
                                                    } = &v110.1 {
                                                        if let &Opcode::Iconst = v708 {
                                                            let v978 = C::u64_from_imm64(ctx, v709);
                                                            if v978 == 0x3f_u64 {
                                                                let v979 = constructor_sextend(ctx, I128, v7.0);
                                                                // Rule at src\opts\extends.isle line 94.
                                                                returns.extend(Some(v979));
                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    &InstructionData::UnaryImm {
                                        opcode: ref v14,
                                        imm: v15,
                                    } => {
                                        if let &Opcode::Iconst = v14 {
                                            let v16 = C::u64_from_imm64(ctx, v15);
                                            if v16 == 0x0_u64 {
                                                let v977 = constructor_uextend(ctx, I128, v7.0);
                                                // Rule at src\opts\extends.isle line 93.
                                                returns.extend(Some(v977));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                    }
                    _ => {}
                }
            }
            &InstructionData::IntCompare {
                opcode: ref v253,
                args: ref v254,
                cond: ref v255,
            } => {
                if let &Opcode::Icmp = v253 {
                    match v255 {
                        &IntCC::Equal => {
                            let v256 = C::unpack_value_array_2(ctx, v254);
                            let mut v583 = C::inst_data_value_etor_returns::default();
                            C::inst_data_value_etor(ctx, v256.0, &mut v583);
                            let mut v583 = v583.into_context_iter();
                            while let Some(v584) = v583.next(ctx) {
                                match &v584.1 {
                                    &InstructionData::Binary {
                                        opcode: ref v637,
                                        args: ref v638,
                                    } => {
                                        match v637 {
                                            &Opcode::Iadd => {
                                                let mut v259 = C::inst_data_value_etor_returns::default();
                                                C::inst_data_value_etor(ctx, v256.1, &mut v259);
                                                let mut v259 = v259.into_context_iter();
                                                while let Some(v260) = v259.next(ctx) {
                                                    match &v260.1 {
                                                        &InstructionData::Binary {
                                                            opcode: ref v654,
                                                            args: ref v655,
                                                        } => {
                                                            if let &Opcode::Iadd = v654 {
                                                                let v639 = C::unpack_value_array_2(ctx, v638);
                                                                let v656 = C::unpack_value_array_2(ctx, v655);
                                                                if v639.0 == v656.0 {
                                                                    let v988 = constructor_eq(ctx, v2.0, v639.1, v656.1);
                                                                    let v989 = C::subsume(ctx, v988);
                                                                    // Rule at src\opts\icmp.isle line 26.
                                                                    returns.extend(Some(v989));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                                if v639.0 == v656.1 {
                                                                    let v986 = constructor_eq(ctx, v2.0, v639.1, v656.0);
                                                                    let v987 = C::subsume(ctx, v986);
                                                                    // Rule at src\opts\icmp.isle line 24.
                                                                    returns.extend(Some(v987));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                                if v639.1 == v656.0 {
                                                                    let v984 = constructor_eq(ctx, v2.0, v639.0, v656.1);
                                                                    let v985 = C::subsume(ctx, v984);
                                                                    // Rule at src\opts\icmp.isle line 22.
                                                                    returns.extend(Some(v985));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                                if v639.1 == v656.1 {
                                                                    let v982 = constructor_eq(ctx, v2.0, v639.0, v656.0);
                                                                    let v983 = C::subsume(ctx, v982);
                                                                    // Rule at src\opts\icmp.isle line 20.
                                                                    returns.extend(Some(v983));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                                let mut v642 = C::inst_data_value_etor_returns::default();
                                                                C::inst_data_value_etor(ctx, v639.1, &mut v642);
                                                                let mut v642 = v642.into_context_iter();
                                                                while let Some(v643) = v642.next(ctx) {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v646,
                                                                        imm: v647,
                                                                    } = &v643.1 {
                                                                        if let &Opcode::Iconst = v646 {
                                                                            let mut v659 = C::inst_data_value_etor_returns::default();
                                                                            C::inst_data_value_etor(ctx, v656.1, &mut v659);
                                                                            let mut v659 = v659.into_context_iter();
                                                                            while let Some(v660) = v659.next(ctx) {
                                                                                if let &InstructionData::UnaryImm {
                                                                                    opcode: ref v663,
                                                                                    imm: v664,
                                                                                } = &v660.1 {
                                                                                    if let &Opcode::Iconst = v663 {
                                                                                        let v665 = constructor_isub(ctx, v260.0, v656.1, v639.1);
                                                                                        let v666 = constructor_iadd(ctx, v584.0, v656.0, v665);
                                                                                        let v667 = constructor_eq(ctx, v2.0, v639.0, v666);
                                                                                        // Rule at src\opts\cprop.isle line 184.
                                                                                        returns.extend(Some(v667));
                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &InstructionData::UnaryImm {
                                                            opcode: ref v263,
                                                            imm: v264,
                                                        } => {
                                                            if let &Opcode::Iconst = v263 {
                                                                let v639 = C::unpack_value_array_2(ctx, v638);
                                                                let mut v642 = C::inst_data_value_etor_returns::default();
                                                                C::inst_data_value_etor(ctx, v639.1, &mut v642);
                                                                let mut v642 = v642.into_context_iter();
                                                                while let Some(v643) = v642.next(ctx) {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v646,
                                                                        imm: v647,
                                                                    } = &v643.1 {
                                                                        if let &Opcode::Iconst = v646 {
                                                                            let v648 = constructor_isub(ctx, v584.0, v256.1, v639.1);
                                                                            let v649 = constructor_eq(ctx, v2.0, v639.0, v648);
                                                                            // Rule at src\opts\cprop.isle line 174.
                                                                            returns.extend(Some(v649));
                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                            &Opcode::Isub => {
                                                let v639 = C::unpack_value_array_2(ctx, v638);
                                                let mut v642 = C::inst_data_value_etor_returns::default();
                                                C::inst_data_value_etor(ctx, v639.1, &mut v642);
                                                let mut v642 = v642.into_context_iter();
                                                while let Some(v643) = v642.next(ctx) {
                                                    match &v643.1 {
                                                        &InstructionData::IntCompare {
                                                            opcode: ref v1326,
                                                            args: ref v1327,
                                                            cond: ref v1328,
                                                        } => {
                                                            if let &Opcode::Icmp = v1326 {
                                                                match v1328 {
                                                                    &IntCC::SignedLessThan => {
                                                                        if v584.0 == I8 {
                                                                            let mut v937 = C::inst_data_value_tupled_etor_returns::default();
                                                                            C::inst_data_value_tupled_etor(ctx, v256.1, &mut v937);
                                                                            let mut v937 = v937.into_context_iter();
                                                                            while let Some(v938) = v937.next(ctx) {
                                                                                let v939 = C::iconst_sextend_etor(ctx, v938);
                                                                                if let Some(v940) = v939 {
                                                                                    match v940.1 {
                                                                                        -1_i64 => {
                                                                                            let mut v1316 = C::inst_data_value_etor_returns::default();
                                                                                            C::inst_data_value_etor(ctx, v639.0, &mut v1316);
                                                                                            let mut v1316 = v1316.into_context_iter();
                                                                                            while let Some(v1317) = v1316.next(ctx) {
                                                                                                if let &InstructionData::IntCompare {
                                                                                                    opcode: ref v1320,
                                                                                                    args: ref v1321,
                                                                                                    cond: ref v1322,
                                                                                                } = &v1317.1 {
                                                                                                    if let &Opcode::Icmp = v1320 {
                                                                                                        if let &IntCC::SignedGreaterThan = v1322 {
                                                                                                            if v643.0 == v1317.0 {
                                                                                                                let v1323 = C::unpack_value_array_2(ctx, v1321);
                                                                                                                let v1329 = C::unpack_value_array_2(ctx, v1327);
                                                                                                                if v1323.0 == v1329.0 {
                                                                                                                    if v1323.1 == v1329.1 {
                                                                                                                        let v1334 = constructor_slt(ctx, v1317.0, v1323.0, v1323.1);
                                                                                                                        // Rule at src\opts\spaceship.isle line 178.
                                                                                                                        returns.extend(Some(v1334));
                                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        0_i64 => {
                                                                                            let mut v1316 = C::inst_data_value_etor_returns::default();
                                                                                            C::inst_data_value_etor(ctx, v639.0, &mut v1316);
                                                                                            let mut v1316 = v1316.into_context_iter();
                                                                                            while let Some(v1317) = v1316.next(ctx) {
                                                                                                if let &InstructionData::IntCompare {
                                                                                                    opcode: ref v1320,
                                                                                                    args: ref v1321,
                                                                                                    cond: ref v1322,
                                                                                                } = &v1317.1 {
                                                                                                    if let &Opcode::Icmp = v1320 {
                                                                                                        if let &IntCC::SignedGreaterThan = v1322 {
                                                                                                            if v643.0 == v1317.0 {
                                                                                                                let v1323 = C::unpack_value_array_2(ctx, v1321);
                                                                                                                let v1329 = C::unpack_value_array_2(ctx, v1327);
                                                                                                                if v1323.0 == v1329.0 {
                                                                                                                    if v1323.1 == v1329.1 {
                                                                                                                        let v1332 = constructor_eq(ctx, v1317.0, v1323.0, v1323.1);
                                                                                                                        // Rule at src\opts\spaceship.isle line 145.
                                                                                                                        returns.extend(Some(v1332));
                                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        1_i64 => {
                                                                                            let mut v1316 = C::inst_data_value_etor_returns::default();
                                                                                            C::inst_data_value_etor(ctx, v639.0, &mut v1316);
                                                                                            let mut v1316 = v1316.into_context_iter();
                                                                                            while let Some(v1317) = v1316.next(ctx) {
                                                                                                if let &InstructionData::IntCompare {
                                                                                                    opcode: ref v1320,
                                                                                                    args: ref v1321,
                                                                                                    cond: ref v1322,
                                                                                                } = &v1317.1 {
                                                                                                    if let &Opcode::Icmp = v1320 {
                                                                                                        if let &IntCC::SignedGreaterThan = v1322 {
                                                                                                            if v643.0 == v1317.0 {
                                                                                                                let v1323 = C::unpack_value_array_2(ctx, v1321);
                                                                                                                let v1329 = C::unpack_value_array_2(ctx, v1327);
                                                                                                                if v1323.0 == v1329.0 {
                                                                                                                    if v1323.1 == v1329.1 {
                                                                                                                        let v1338 = constructor_sgt(ctx, v1317.0, v1323.0, v1323.1);
                                                                                                                        // Rule at src\opts\spaceship.isle line 186.
                                                                                                                        returns.extend(Some(v1338));
                                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        _ => {}
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    &IntCC::UnsignedLessThan => {
                                                                        if v584.0 == I8 {
                                                                            let mut v937 = C::inst_data_value_tupled_etor_returns::default();
                                                                            C::inst_data_value_tupled_etor(ctx, v256.1, &mut v937);
                                                                            let mut v937 = v937.into_context_iter();
                                                                            while let Some(v938) = v937.next(ctx) {
                                                                                let v939 = C::iconst_sextend_etor(ctx, v938);
                                                                                if let Some(v940) = v939 {
                                                                                    match v940.1 {
                                                                                        -1_i64 => {
                                                                                            let mut v1316 = C::inst_data_value_etor_returns::default();
                                                                                            C::inst_data_value_etor(ctx, v639.0, &mut v1316);
                                                                                            let mut v1316 = v1316.into_context_iter();
                                                                                            while let Some(v1317) = v1316.next(ctx) {
                                                                                                if let &InstructionData::IntCompare {
                                                                                                    opcode: ref v1320,
                                                                                                    args: ref v1321,
                                                                                                    cond: ref v1322,
                                                                                                } = &v1317.1 {
                                                                                                    if let &Opcode::Icmp = v1320 {
                                                                                                        if let &IntCC::UnsignedGreaterThan = v1322 {
                                                                                                            if v643.0 == v1317.0 {
                                                                                                                let v1323 = C::unpack_value_array_2(ctx, v1321);
                                                                                                                let v1329 = C::unpack_value_array_2(ctx, v1327);
                                                                                                                if v1323.0 == v1329.0 {
                                                                                                                    if v1323.1 == v1329.1 {
                                                                                                                        let v1335 = constructor_ult(ctx, v1317.0, v1323.0, v1323.1);
                                                                                                                        // Rule at src\opts\spaceship.isle line 180.
                                                                                                                        returns.extend(Some(v1335));
                                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        0_i64 => {
                                                                                            let mut v1316 = C::inst_data_value_etor_returns::default();
                                                                                            C::inst_data_value_etor(ctx, v639.0, &mut v1316);
                                                                                            let mut v1316 = v1316.into_context_iter();
                                                                                            while let Some(v1317) = v1316.next(ctx) {
                                                                                                if let &InstructionData::IntCompare {
                                                                                                    opcode: ref v1320,
                                                                                                    args: ref v1321,
                                                                                                    cond: ref v1322,
                                                                                                } = &v1317.1 {
                                                                                                    if let &Opcode::Icmp = v1320 {
                                                                                                        if let &IntCC::UnsignedGreaterThan = v1322 {
                                                                                                            if v643.0 == v1317.0 {
                                                                                                                let v1323 = C::unpack_value_array_2(ctx, v1321);
                                                                                                                let v1329 = C::unpack_value_array_2(ctx, v1327);
                                                                                                                if v1323.0 == v1329.0 {
                                                                                                                    if v1323.1 == v1329.1 {
                                                                                                                        let v1332 = constructor_eq(ctx, v1317.0, v1323.0, v1323.1);
                                                                                                                        // Rule at src\opts\spaceship.isle line 147.
                                                                                                                        returns.extend(Some(v1332));
                                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        1_i64 => {
                                                                                            let mut v1316 = C::inst_data_value_etor_returns::default();
                                                                                            C::inst_data_value_etor(ctx, v639.0, &mut v1316);
                                                                                            let mut v1316 = v1316.into_context_iter();
                                                                                            while let Some(v1317) = v1316.next(ctx) {
                                                                                                if let &InstructionData::IntCompare {
                                                                                                    opcode: ref v1320,
                                                                                                    args: ref v1321,
                                                                                                    cond: ref v1322,
                                                                                                } = &v1317.1 {
                                                                                                    if let &Opcode::Icmp = v1320 {
                                                                                                        if let &IntCC::UnsignedGreaterThan = v1322 {
                                                                                                            if v643.0 == v1317.0 {
                                                                                                                let v1323 = C::unpack_value_array_2(ctx, v1321);
                                                                                                                let v1329 = C::unpack_value_array_2(ctx, v1327);
                                                                                                                if v1323.0 == v1329.0 {
                                                                                                                    if v1323.1 == v1329.1 {
                                                                                                                        let v1339 = constructor_ugt(ctx, v1317.0, v1323.0, v1323.1);
                                                                                                                        // Rule at src\opts\spaceship.isle line 188.
                                                                                                                        returns.extend(Some(v1339));
                                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        _ => {}
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    _ => {}
                                                                }
                                                            }
                                                        }
                                                        &InstructionData::UnaryImm {
                                                            opcode: ref v646,
                                                            imm: v647,
                                                        } => {
                                                            if let &Opcode::Iconst = v646 {
                                                                let mut v259 = C::inst_data_value_etor_returns::default();
                                                                C::inst_data_value_etor(ctx, v256.1, &mut v259);
                                                                let mut v259 = v259.into_context_iter();
                                                                while let Some(v260) = v259.next(ctx) {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v263,
                                                                        imm: v264,
                                                                    } = &v260.1 {
                                                                        if let &Opcode::Iconst = v263 {
                                                                            let v651 = constructor_iadd(ctx, v584.0, v256.1, v639.1);
                                                                            let v652 = constructor_eq(ctx, v2.0, v639.0, v651);
                                                                            // Rule at src\opts\cprop.isle line 179.
                                                                            returns.extend(Some(v652));
                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                                let mut v259 = C::inst_data_value_etor_returns::default();
                                                C::inst_data_value_etor(ctx, v256.1, &mut v259);
                                                let mut v259 = v259.into_context_iter();
                                                while let Some(v260) = v259.next(ctx) {
                                                    if let &InstructionData::Binary {
                                                        opcode: ref v654,
                                                        args: ref v655,
                                                    } = &v260.1 {
                                                        if let &Opcode::Isub = v654 {
                                                            let v656 = C::unpack_value_array_2(ctx, v655);
                                                            let v998 = constructor_iadd(ctx, v584.0, v639.0, v656.1);
                                                            let v999 = constructor_iadd(ctx, v260.0, v656.0, v639.1);
                                                            let v1000 = constructor_eq(ctx, v2.0, v998, v999);
                                                            // Rule at src\opts\icmp.isle line 40.
                                                            returns.extend(Some(v1000));
                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                    &InstructionData::Unary {
                                        opcode: ref v929,
                                        arg: v930,
                                    } => {
                                        if let &Opcode::Sextend = v929 {
                                            let mut v937 = C::inst_data_value_tupled_etor_returns::default();
                                            C::inst_data_value_tupled_etor(ctx, v256.1, &mut v937);
                                            let mut v937 = v937.into_context_iter();
                                            while let Some(v938) = v937.next(ctx) {
                                                let v939 = C::iconst_sextend_etor(ctx, v938);
                                                if let Some(v940) = v939 {
                                                    if v940.1 == 0_i64 {
                                                        let v931 = C::value_type(ctx, v930);
                                                        let v944 = constructor_iconst_s(ctx, v931, 0_i64);
                                                        let v945 = constructor_eq(ctx, v931, v930, v944);
                                                        // Rule at src\opts\extends.isle line 39.
                                                        returns.extend(Some(v945));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                            let mut v259 = C::inst_data_value_etor_returns::default();
                            C::inst_data_value_etor(ctx, v256.1, &mut v259);
                            let mut v259 = v259.into_context_iter();
                            while let Some(v260) = v259.next(ctx) {
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v263,
                                    imm: v264,
                                } = &v260.1 {
                                    if let &Opcode::Iconst = v263 {
                                        let v265 = C::u64_from_imm64(ctx, v264);
                                        match v265 {
                                            0x0_u64 => {
                                                let mut v1002 = C::uextend_maybe_etor_returns::default();
                                                C::uextend_maybe_etor(ctx, v256.0, &mut v1002);
                                                let mut v1002 = v1002.into_context_iter();
                                                while let Some(v1003) = v1002.next(ctx) {
                                                    let mut v1006 = C::inst_data_value_etor_returns::default();
                                                    C::inst_data_value_etor(ctx, v1003.1, &mut v1006);
                                                    let mut v1006 = v1006.into_context_iter();
                                                    while let Some(v1007) = v1006.next(ctx) {
                                                        if let &InstructionData::IntCompare {
                                                            opcode: ref v1010,
                                                            args: ref v1011,
                                                            cond: ref v1012,
                                                        } = &v1007.1 {
                                                            if let &Opcode::Icmp = v1010 {
                                                                if v2.0 == v1007.0 {
                                                                    let v1017 = &C::intcc_complement(ctx, v1012);
                                                                    let v1013 = C::unpack_value_array_2(ctx, v1011);
                                                                    let v1018 = constructor_icmp(ctx, v2.0, v1017, v1013.0, v1013.1);
                                                                    let v1019 = C::subsume(ctx, v1018);
                                                                    // Rule at src\opts\icmp.isle line 55.
                                                                    returns.extend(Some(v1019));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            0x1_u64 => {
                                                let mut v1002 = C::uextend_maybe_etor_returns::default();
                                                C::uextend_maybe_etor(ctx, v256.0, &mut v1002);
                                                let mut v1002 = v1002.into_context_iter();
                                                while let Some(v1003) = v1002.next(ctx) {
                                                    let mut v1006 = C::inst_data_value_etor_returns::default();
                                                    C::inst_data_value_etor(ctx, v1003.1, &mut v1006);
                                                    let mut v1006 = v1006.into_context_iter();
                                                    while let Some(v1007) = v1006.next(ctx) {
                                                        if let &InstructionData::IntCompare {
                                                            opcode: ref v1010,
                                                            args: ref v1011,
                                                            cond: ref v1012,
                                                        } = &v1007.1 {
                                                            if let &Opcode::Icmp = v1010 {
                                                                let v1016 = C::subsume(ctx, v1003.1);
                                                                // Rule at src\opts\icmp.isle line 69.
                                                                returns.extend(Some(v1016));
                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                            if v256.0 == v256.1 {
                                let v52 = C::ty_int(ctx, v2.0);
                                if let Some(v53) = v52 {
                                    let v980 = constructor_iconst_u(ctx, v53, 0x1_u64);
                                    let v981 = C::subsume(ctx, v980);
                                    // Rule at src\opts\icmp.isle line 4.
                                    returns.extend(Some(v981));
                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                }
                            }
                        }
                        &IntCC::NotEqual => {
                            let v256 = C::unpack_value_array_2(ctx, v254);
                            let mut v583 = C::inst_data_value_etor_returns::default();
                            C::inst_data_value_etor(ctx, v256.0, &mut v583);
                            let mut v583 = v583.into_context_iter();
                            while let Some(v584) = v583.next(ctx) {
                                match &v584.1 {
                                    &InstructionData::Binary {
                                        opcode: ref v637,
                                        args: ref v638,
                                    } => {
                                        match v637 {
                                            &Opcode::Iadd => {
                                                let mut v259 = C::inst_data_value_etor_returns::default();
                                                C::inst_data_value_etor(ctx, v256.1, &mut v259);
                                                let mut v259 = v259.into_context_iter();
                                                while let Some(v260) = v259.next(ctx) {
                                                    match &v260.1 {
                                                        &InstructionData::Binary {
                                                            opcode: ref v654,
                                                            args: ref v655,
                                                        } => {
                                                            if let &Opcode::Iadd = v654 {
                                                                let v639 = C::unpack_value_array_2(ctx, v638);
                                                                let v656 = C::unpack_value_array_2(ctx, v655);
                                                                if v639.0 == v656.0 {
                                                                    let v996 = constructor_ne(ctx, v2.0, v639.1, v656.1);
                                                                    let v997 = C::subsume(ctx, v996);
                                                                    // Rule at src\opts\icmp.isle line 34.
                                                                    returns.extend(Some(v997));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                                if v639.0 == v656.1 {
                                                                    let v994 = constructor_ne(ctx, v2.0, v639.1, v656.0);
                                                                    let v995 = C::subsume(ctx, v994);
                                                                    // Rule at src\opts\icmp.isle line 32.
                                                                    returns.extend(Some(v995));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                                if v639.1 == v656.0 {
                                                                    let v992 = constructor_ne(ctx, v2.0, v639.0, v656.1);
                                                                    let v993 = C::subsume(ctx, v992);
                                                                    // Rule at src\opts\icmp.isle line 30.
                                                                    returns.extend(Some(v993));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                                if v639.1 == v656.1 {
                                                                    let v990 = constructor_ne(ctx, v2.0, v639.0, v656.0);
                                                                    let v991 = C::subsume(ctx, v990);
                                                                    // Rule at src\opts\icmp.isle line 28.
                                                                    returns.extend(Some(v991));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                                let mut v642 = C::inst_data_value_etor_returns::default();
                                                                C::inst_data_value_etor(ctx, v639.1, &mut v642);
                                                                let mut v642 = v642.into_context_iter();
                                                                while let Some(v643) = v642.next(ctx) {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v646,
                                                                        imm: v647,
                                                                    } = &v643.1 {
                                                                        if let &Opcode::Iconst = v646 {
                                                                            let mut v659 = C::inst_data_value_etor_returns::default();
                                                                            C::inst_data_value_etor(ctx, v656.1, &mut v659);
                                                                            let mut v659 = v659.into_context_iter();
                                                                            while let Some(v660) = v659.next(ctx) {
                                                                                if let &InstructionData::UnaryImm {
                                                                                    opcode: ref v663,
                                                                                    imm: v664,
                                                                                } = &v660.1 {
                                                                                    if let &Opcode::Iconst = v663 {
                                                                                        let v665 = constructor_isub(ctx, v260.0, v656.1, v639.1);
                                                                                        let v666 = constructor_iadd(ctx, v584.0, v656.0, v665);
                                                                                        let v668 = constructor_ne(ctx, v2.0, v639.0, v666);
                                                                                        // Rule at src\opts\cprop.isle line 186.
                                                                                        returns.extend(Some(v668));
                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &InstructionData::UnaryImm {
                                                            opcode: ref v263,
                                                            imm: v264,
                                                        } => {
                                                            if let &Opcode::Iconst = v263 {
                                                                let v639 = C::unpack_value_array_2(ctx, v638);
                                                                let mut v642 = C::inst_data_value_etor_returns::default();
                                                                C::inst_data_value_etor(ctx, v639.1, &mut v642);
                                                                let mut v642 = v642.into_context_iter();
                                                                while let Some(v643) = v642.next(ctx) {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v646,
                                                                        imm: v647,
                                                                    } = &v643.1 {
                                                                        if let &Opcode::Iconst = v646 {
                                                                            let v648 = constructor_isub(ctx, v584.0, v256.1, v639.1);
                                                                            let v650 = constructor_ne(ctx, v2.0, v639.0, v648);
                                                                            // Rule at src\opts\cprop.isle line 176.
                                                                            returns.extend(Some(v650));
                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                            &Opcode::Isub => {
                                                let v639 = C::unpack_value_array_2(ctx, v638);
                                                let mut v642 = C::inst_data_value_etor_returns::default();
                                                C::inst_data_value_etor(ctx, v639.1, &mut v642);
                                                let mut v642 = v642.into_context_iter();
                                                while let Some(v643) = v642.next(ctx) {
                                                    match &v643.1 {
                                                        &InstructionData::IntCompare {
                                                            opcode: ref v1326,
                                                            args: ref v1327,
                                                            cond: ref v1328,
                                                        } => {
                                                            if let &Opcode::Icmp = v1326 {
                                                                match v1328 {
                                                                    &IntCC::SignedLessThan => {
                                                                        if v584.0 == I8 {
                                                                            let mut v937 = C::inst_data_value_tupled_etor_returns::default();
                                                                            C::inst_data_value_tupled_etor(ctx, v256.1, &mut v937);
                                                                            let mut v937 = v937.into_context_iter();
                                                                            while let Some(v938) = v937.next(ctx) {
                                                                                let v939 = C::iconst_sextend_etor(ctx, v938);
                                                                                if let Some(v940) = v939 {
                                                                                    match v940.1 {
                                                                                        -1_i64 => {
                                                                                            let mut v1316 = C::inst_data_value_etor_returns::default();
                                                                                            C::inst_data_value_etor(ctx, v639.0, &mut v1316);
                                                                                            let mut v1316 = v1316.into_context_iter();
                                                                                            while let Some(v1317) = v1316.next(ctx) {
                                                                                                if let &InstructionData::IntCompare {
                                                                                                    opcode: ref v1320,
                                                                                                    args: ref v1321,
                                                                                                    cond: ref v1322,
                                                                                                } = &v1317.1 {
                                                                                                    if let &Opcode::Icmp = v1320 {
                                                                                                        if let &IntCC::SignedGreaterThan = v1322 {
                                                                                                            if v643.0 == v1317.0 {
                                                                                                                let v1323 = C::unpack_value_array_2(ctx, v1321);
                                                                                                                let v1329 = C::unpack_value_array_2(ctx, v1327);
                                                                                                                if v1323.0 == v1329.0 {
                                                                                                                    if v1323.1 == v1329.1 {
                                                                                                                        let v1340 = constructor_sge(ctx, v1317.0, v1323.0, v1323.1);
                                                                                                                        // Rule at src\opts\spaceship.isle line 182.
                                                                                                                        returns.extend(Some(v1340));
                                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        0_i64 => {
                                                                                            let mut v1316 = C::inst_data_value_etor_returns::default();
                                                                                            C::inst_data_value_etor(ctx, v639.0, &mut v1316);
                                                                                            let mut v1316 = v1316.into_context_iter();
                                                                                            while let Some(v1317) = v1316.next(ctx) {
                                                                                                if let &InstructionData::IntCompare {
                                                                                                    opcode: ref v1320,
                                                                                                    args: ref v1321,
                                                                                                    cond: ref v1322,
                                                                                                } = &v1317.1 {
                                                                                                    if let &Opcode::Icmp = v1320 {
                                                                                                        if let &IntCC::SignedGreaterThan = v1322 {
                                                                                                            if v643.0 == v1317.0 {
                                                                                                                let v1323 = C::unpack_value_array_2(ctx, v1321);
                                                                                                                let v1329 = C::unpack_value_array_2(ctx, v1327);
                                                                                                                if v1323.0 == v1329.0 {
                                                                                                                    if v1323.1 == v1329.1 {
                                                                                                                        let v1333 = constructor_ne(ctx, v1317.0, v1323.0, v1323.1);
                                                                                                                        // Rule at src\opts\spaceship.isle line 150.
                                                                                                                        returns.extend(Some(v1333));
                                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        1_i64 => {
                                                                                            let mut v1316 = C::inst_data_value_etor_returns::default();
                                                                                            C::inst_data_value_etor(ctx, v639.0, &mut v1316);
                                                                                            let mut v1316 = v1316.into_context_iter();
                                                                                            while let Some(v1317) = v1316.next(ctx) {
                                                                                                if let &InstructionData::IntCompare {
                                                                                                    opcode: ref v1320,
                                                                                                    args: ref v1321,
                                                                                                    cond: ref v1322,
                                                                                                } = &v1317.1 {
                                                                                                    if let &Opcode::Icmp = v1320 {
                                                                                                        if let &IntCC::SignedGreaterThan = v1322 {
                                                                                                            if v643.0 == v1317.0 {
                                                                                                                let v1323 = C::unpack_value_array_2(ctx, v1321);
                                                                                                                let v1329 = C::unpack_value_array_2(ctx, v1327);
                                                                                                                if v1323.0 == v1329.0 {
                                                                                                                    if v1323.1 == v1329.1 {
                                                                                                                        let v1336 = constructor_sle(ctx, v1317.0, v1323.0, v1323.1);
                                                                                                                        // Rule at src\opts\spaceship.isle line 190.
                                                                                                                        returns.extend(Some(v1336));
                                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        _ => {}
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    &IntCC::UnsignedLessThan => {
                                                                        if v584.0 == I8 {
                                                                            let mut v937 = C::inst_data_value_tupled_etor_returns::default();
                                                                            C::inst_data_value_tupled_etor(ctx, v256.1, &mut v937);
                                                                            let mut v937 = v937.into_context_iter();
                                                                            while let Some(v938) = v937.next(ctx) {
                                                                                let v939 = C::iconst_sextend_etor(ctx, v938);
                                                                                if let Some(v940) = v939 {
                                                                                    match v940.1 {
                                                                                        -1_i64 => {
                                                                                            let mut v1316 = C::inst_data_value_etor_returns::default();
                                                                                            C::inst_data_value_etor(ctx, v639.0, &mut v1316);
                                                                                            let mut v1316 = v1316.into_context_iter();
                                                                                            while let Some(v1317) = v1316.next(ctx) {
                                                                                                if let &InstructionData::IntCompare {
                                                                                                    opcode: ref v1320,
                                                                                                    args: ref v1321,
                                                                                                    cond: ref v1322,
                                                                                                } = &v1317.1 {
                                                                                                    if let &Opcode::Icmp = v1320 {
                                                                                                        if let &IntCC::UnsignedGreaterThan = v1322 {
                                                                                                            if v643.0 == v1317.0 {
                                                                                                                let v1323 = C::unpack_value_array_2(ctx, v1321);
                                                                                                                let v1329 = C::unpack_value_array_2(ctx, v1327);
                                                                                                                if v1323.0 == v1329.0 {
                                                                                                                    if v1323.1 == v1329.1 {
                                                                                                                        let v1341 = constructor_uge(ctx, v1317.0, v1323.0, v1323.1);
                                                                                                                        // Rule at src\opts\spaceship.isle line 184.
                                                                                                                        returns.extend(Some(v1341));
                                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        0_i64 => {
                                                                                            let mut v1316 = C::inst_data_value_etor_returns::default();
                                                                                            C::inst_data_value_etor(ctx, v639.0, &mut v1316);
                                                                                            let mut v1316 = v1316.into_context_iter();
                                                                                            while let Some(v1317) = v1316.next(ctx) {
                                                                                                if let &InstructionData::IntCompare {
                                                                                                    opcode: ref v1320,
                                                                                                    args: ref v1321,
                                                                                                    cond: ref v1322,
                                                                                                } = &v1317.1 {
                                                                                                    if let &Opcode::Icmp = v1320 {
                                                                                                        if let &IntCC::UnsignedGreaterThan = v1322 {
                                                                                                            if v643.0 == v1317.0 {
                                                                                                                let v1323 = C::unpack_value_array_2(ctx, v1321);
                                                                                                                let v1329 = C::unpack_value_array_2(ctx, v1327);
                                                                                                                if v1323.0 == v1329.0 {
                                                                                                                    if v1323.1 == v1329.1 {
                                                                                                                        let v1333 = constructor_ne(ctx, v1317.0, v1323.0, v1323.1);
                                                                                                                        // Rule at src\opts\spaceship.isle line 152.
                                                                                                                        returns.extend(Some(v1333));
                                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        1_i64 => {
                                                                                            let mut v1316 = C::inst_data_value_etor_returns::default();
                                                                                            C::inst_data_value_etor(ctx, v639.0, &mut v1316);
                                                                                            let mut v1316 = v1316.into_context_iter();
                                                                                            while let Some(v1317) = v1316.next(ctx) {
                                                                                                if let &InstructionData::IntCompare {
                                                                                                    opcode: ref v1320,
                                                                                                    args: ref v1321,
                                                                                                    cond: ref v1322,
                                                                                                } = &v1317.1 {
                                                                                                    if let &Opcode::Icmp = v1320 {
                                                                                                        if let &IntCC::UnsignedGreaterThan = v1322 {
                                                                                                            if v643.0 == v1317.0 {
                                                                                                                let v1323 = C::unpack_value_array_2(ctx, v1321);
                                                                                                                let v1329 = C::unpack_value_array_2(ctx, v1327);
                                                                                                                if v1323.0 == v1329.0 {
                                                                                                                    if v1323.1 == v1329.1 {
                                                                                                                        let v1337 = constructor_ule(ctx, v1317.0, v1323.0, v1323.1);
                                                                                                                        // Rule at src\opts\spaceship.isle line 192.
                                                                                                                        returns.extend(Some(v1337));
                                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        _ => {}
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    _ => {}
                                                                }
                                                            }
                                                        }
                                                        &InstructionData::UnaryImm {
                                                            opcode: ref v646,
                                                            imm: v647,
                                                        } => {
                                                            if let &Opcode::Iconst = v646 {
                                                                let mut v259 = C::inst_data_value_etor_returns::default();
                                                                C::inst_data_value_etor(ctx, v256.1, &mut v259);
                                                                let mut v259 = v259.into_context_iter();
                                                                while let Some(v260) = v259.next(ctx) {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v263,
                                                                        imm: v264,
                                                                    } = &v260.1 {
                                                                        if let &Opcode::Iconst = v263 {
                                                                            let v651 = constructor_iadd(ctx, v584.0, v256.1, v639.1);
                                                                            let v653 = constructor_ne(ctx, v2.0, v639.0, v651);
                                                                            // Rule at src\opts\cprop.isle line 181.
                                                                            returns.extend(Some(v653));
                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                                let mut v259 = C::inst_data_value_etor_returns::default();
                                                C::inst_data_value_etor(ctx, v256.1, &mut v259);
                                                let mut v259 = v259.into_context_iter();
                                                while let Some(v260) = v259.next(ctx) {
                                                    if let &InstructionData::Binary {
                                                        opcode: ref v654,
                                                        args: ref v655,
                                                    } = &v260.1 {
                                                        if let &Opcode::Isub = v654 {
                                                            let v656 = C::unpack_value_array_2(ctx, v655);
                                                            let v998 = constructor_iadd(ctx, v584.0, v639.0, v656.1);
                                                            let v999 = constructor_iadd(ctx, v260.0, v656.0, v639.1);
                                                            let v1001 = constructor_ne(ctx, v2.0, v998, v999);
                                                            // Rule at src\opts\icmp.isle line 42.
                                                            returns.extend(Some(v1001));
                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                    &InstructionData::Unary {
                                        opcode: ref v929,
                                        arg: v930,
                                    } => {
                                        if let &Opcode::Sextend = v929 {
                                            let mut v937 = C::inst_data_value_tupled_etor_returns::default();
                                            C::inst_data_value_tupled_etor(ctx, v256.1, &mut v937);
                                            let mut v937 = v937.into_context_iter();
                                            while let Some(v938) = v937.next(ctx) {
                                                let v939 = C::iconst_sextend_etor(ctx, v938);
                                                if let Some(v940) = v939 {
                                                    if v940.1 == 0_i64 {
                                                        let v931 = C::value_type(ctx, v930);
                                                        let v944 = constructor_iconst_s(ctx, v931, 0_i64);
                                                        let v946 = constructor_ne(ctx, v931, v930, v944);
                                                        // Rule at src\opts\extends.isle line 41.
                                                        returns.extend(Some(v946));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                            let mut v259 = C::inst_data_value_etor_returns::default();
                            C::inst_data_value_etor(ctx, v256.1, &mut v259);
                            let mut v259 = v259.into_context_iter();
                            while let Some(v260) = v259.next(ctx) {
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v263,
                                    imm: v264,
                                } = &v260.1 {
                                    if let &Opcode::Iconst = v263 {
                                        let v265 = C::u64_from_imm64(ctx, v264);
                                        match v265 {
                                            0x0_u64 => {
                                                let mut v266 = ContextIterWrapper::<ConstructorVec<_>, _>::default();
                                                constructor_truthy(ctx, v256.0, &mut v266);
                                                let mut v266 = v266.into_context_iter();
                                                while let Some(v267) = v266.next(ctx) {
                                                    let v268 = C::value_type(ctx, v267);
                                                    let v269 = C::ty_int_ref_scalar_64_extract(ctx, v268);
                                                    if let Some(v270) = v269 {
                                                        let v271 = constructor_iconst_u(ctx, v270, 0x0_u64);
                                                        let v272 = constructor_ne(ctx, v2.0, v267, v271);
                                                        // Rule at src\opts\bitops.isle line 119.
                                                        returns.extend(Some(v272));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                                let mut v1002 = C::uextend_maybe_etor_returns::default();
                                                C::uextend_maybe_etor(ctx, v256.0, &mut v1002);
                                                let mut v1002 = v1002.into_context_iter();
                                                while let Some(v1003) = v1002.next(ctx) {
                                                    let mut v1006 = C::inst_data_value_etor_returns::default();
                                                    C::inst_data_value_etor(ctx, v1003.1, &mut v1006);
                                                    let mut v1006 = v1006.into_context_iter();
                                                    while let Some(v1007) = v1006.next(ctx) {
                                                        if let &InstructionData::IntCompare {
                                                            opcode: ref v1010,
                                                            args: ref v1011,
                                                            cond: ref v1012,
                                                        } = &v1007.1 {
                                                            if let &Opcode::Icmp = v1010 {
                                                                if v2.0 == v1007.0 {
                                                                    let v1016 = C::subsume(ctx, v1003.1);
                                                                    // Rule at src\opts\icmp.isle line 48.
                                                                    returns.extend(Some(v1016));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            0x1_u64 => {
                                                let mut v1002 = C::uextend_maybe_etor_returns::default();
                                                C::uextend_maybe_etor(ctx, v256.0, &mut v1002);
                                                let mut v1002 = v1002.into_context_iter();
                                                while let Some(v1003) = v1002.next(ctx) {
                                                    let mut v1006 = C::inst_data_value_etor_returns::default();
                                                    C::inst_data_value_etor(ctx, v1003.1, &mut v1006);
                                                    let mut v1006 = v1006.into_context_iter();
                                                    while let Some(v1007) = v1006.next(ctx) {
                                                        if let &InstructionData::IntCompare {
                                                            opcode: ref v1010,
                                                            args: ref v1011,
                                                            cond: ref v1012,
                                                        } = &v1007.1 {
                                                            if let &Opcode::Icmp = v1010 {
                                                                if v2.0 == v1007.0 {
                                                                    let v1017 = &C::intcc_complement(ctx, v1012);
                                                                    let v1013 = C::unpack_value_array_2(ctx, v1011);
                                                                    let v1018 = constructor_icmp(ctx, v2.0, v1017, v1013.0, v1013.1);
                                                                    let v1019 = C::subsume(ctx, v1018);
                                                                    // Rule at src\opts\icmp.isle line 62.
                                                                    returns.extend(Some(v1019));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                            if v256.0 == v256.1 {
                                let v52 = C::ty_int(ctx, v2.0);
                                if let Some(v53) = v52 {
                                    let v55 = constructor_iconst_u(ctx, v53, 0x0_u64);
                                    let v56 = C::subsume(ctx, v55);
                                    // Rule at src\opts\icmp.isle line 5.
                                    returns.extend(Some(v56));
                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                }
                            }
                        }
                        &IntCC::SignedGreaterThan => {
                            let v256 = C::unpack_value_array_2(ctx, v254);
                            let mut v937 = C::inst_data_value_tupled_etor_returns::default();
                            C::inst_data_value_tupled_etor(ctx, v256.1, &mut v937);
                            let mut v937 = v937.into_context_iter();
                            while let Some(v938) = v937.next(ctx) {
                                let v939 = C::iconst_sextend_etor(ctx, v938);
                                if let Some(v940) = v939 {
                                    match v940.1 {
                                        -1_i64 => {
                                            let v1078 = constructor_iconst_s(ctx, v940.0, 0_i64);
                                            let v1081 = constructor_sge(ctx, v2.0, v256.0, v1078);
                                            // Rule at src\opts\icmp.isle line 197.
                                            returns.extend(Some(v1081));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        0_i64 => {
                                            let mut v583 = C::inst_data_value_etor_returns::default();
                                            C::inst_data_value_etor(ctx, v256.0, &mut v583);
                                            let mut v583 = v583.into_context_iter();
                                            while let Some(v584) = v583.next(ctx) {
                                                if v584.0 == I8 {
                                                    if let &InstructionData::Binary {
                                                        opcode: ref v637,
                                                        args: ref v638,
                                                    } = &v584.1 {
                                                        if let &Opcode::Isub = v637 {
                                                            let v639 = C::unpack_value_array_2(ctx, v638);
                                                            let mut v642 = C::inst_data_value_etor_returns::default();
                                                            C::inst_data_value_etor(ctx, v639.1, &mut v642);
                                                            let mut v642 = v642.into_context_iter();
                                                            while let Some(v643) = v642.next(ctx) {
                                                                if let &InstructionData::IntCompare {
                                                                    opcode: ref v1326,
                                                                    args: ref v1327,
                                                                    cond: ref v1328,
                                                                } = &v643.1 {
                                                                    if let &Opcode::Icmp = v1326 {
                                                                        match v1328 {
                                                                            &IntCC::SignedLessThan => {
                                                                                let mut v1316 = C::inst_data_value_etor_returns::default();
                                                                                C::inst_data_value_etor(ctx, v639.0, &mut v1316);
                                                                                let mut v1316 = v1316.into_context_iter();
                                                                                while let Some(v1317) = v1316.next(ctx) {
                                                                                    if let &InstructionData::IntCompare {
                                                                                        opcode: ref v1320,
                                                                                        args: ref v1321,
                                                                                        cond: ref v1322,
                                                                                    } = &v1317.1 {
                                                                                        if let &Opcode::Icmp = v1320 {
                                                                                            if let &IntCC::SignedGreaterThan = v1322 {
                                                                                                if v643.0 == v1317.0 {
                                                                                                    let v1323 = C::unpack_value_array_2(ctx, v1321);
                                                                                                    let v1329 = C::unpack_value_array_2(ctx, v1327);
                                                                                                    if v1323.0 == v1329.0 {
                                                                                                        if v1323.1 == v1329.1 {
                                                                                                            let v1338 = constructor_sgt(ctx, v1317.0, v1323.0, v1323.1);
                                                                                                            // Rule at src\opts\spaceship.isle line 166.
                                                                                                            returns.extend(Some(v1338));
                                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            &IntCC::UnsignedLessThan => {
                                                                                let mut v1316 = C::inst_data_value_etor_returns::default();
                                                                                C::inst_data_value_etor(ctx, v639.0, &mut v1316);
                                                                                let mut v1316 = v1316.into_context_iter();
                                                                                while let Some(v1317) = v1316.next(ctx) {
                                                                                    if let &InstructionData::IntCompare {
                                                                                        opcode: ref v1320,
                                                                                        args: ref v1321,
                                                                                        cond: ref v1322,
                                                                                    } = &v1317.1 {
                                                                                        if let &Opcode::Icmp = v1320 {
                                                                                            if let &IntCC::UnsignedGreaterThan = v1322 {
                                                                                                if v643.0 == v1317.0 {
                                                                                                    let v1323 = C::unpack_value_array_2(ctx, v1321);
                                                                                                    let v1329 = C::unpack_value_array_2(ctx, v1327);
                                                                                                    if v1323.0 == v1329.0 {
                                                                                                        if v1323.1 == v1329.1 {
                                                                                                            let v1339 = constructor_ugt(ctx, v1317.0, v1323.0, v1323.1);
                                                                                                            // Rule at src\opts\spaceship.isle line 168.
                                                                                                            returns.extend(Some(v1339));
                                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            _ => {}
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            let v526 = C::fits_in_64(ctx, v2.0);
                            if let Some(v527) = v526 {
                                let v1047 = C::ty_int(ctx, v527);
                                if let Some(v1048) = v1047 {
                                    let mut v259 = C::inst_data_value_etor_returns::default();
                                    C::inst_data_value_etor(ctx, v256.1, &mut v259);
                                    let mut v259 = v259.into_context_iter();
                                    while let Some(v260) = v259.next(ctx) {
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v263,
                                            imm: v264,
                                        } = &v260.1 {
                                            if let &Opcode::Iconst = v263 {
                                                let v265 = C::u64_from_imm64(ctx, v264);
                                                let v1057 = C::ty_smin(ctx, v260.0);
                                                let v1058 = C::u64_eq(ctx, v265, v1057);
                                                if v1058 == true {
                                                    let v1052 = constructor_ne(ctx, v1048, v256.0, v256.1);
                                                    // Rule at src\opts\icmp.isle line 145.
                                                    returns.extend(Some(v1052));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                                let v1059 = C::ty_smax(ctx, v260.0);
                                                let v1060 = C::u64_eq(ctx, v265, v1059);
                                                if v1060 == true {
                                                    let v1049 = constructor_iconst_u(ctx, v1048, 0x0_u64);
                                                    let v1050 = C::subsume(ctx, v1049);
                                                    // Rule at src\opts\icmp.isle line 165.
                                                    returns.extend(Some(v1050));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let v52 = C::ty_int(ctx, v2.0);
                            if let Some(v53) = v52 {
                                if v256.0 == v256.1 {
                                    let v55 = constructor_iconst_u(ctx, v53, 0x0_u64);
                                    let v56 = C::subsume(ctx, v55);
                                    // Rule at src\opts\icmp.isle line 8.
                                    returns.extend(Some(v56));
                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                }
                            }
                        }
                        &IntCC::SignedGreaterThanOrEqual => {
                            let v256 = C::unpack_value_array_2(ctx, v254);
                            let mut v259 = C::inst_data_value_etor_returns::default();
                            C::inst_data_value_etor(ctx, v256.1, &mut v259);
                            let mut v259 = v259.into_context_iter();
                            while let Some(v260) = v259.next(ctx) {
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v263,
                                    imm: v264,
                                } = &v260.1 {
                                    if let &Opcode::Iconst = v263 {
                                        let v526 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v527) = v526 {
                                            let v1047 = C::ty_int(ctx, v527);
                                            if let Some(v1048) = v1047 {
                                                let v265 = C::u64_from_imm64(ctx, v264);
                                                let v1057 = C::ty_smin(ctx, v260.0);
                                                let v1058 = C::u64_eq(ctx, v265, v1057);
                                                if v1058 == true {
                                                    let v1053 = constructor_iconst_u(ctx, v1048, 0x1_u64);
                                                    let v1054 = C::subsume(ctx, v1053);
                                                    // Rule at src\opts\icmp.isle line 150.
                                                    returns.extend(Some(v1054));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                                let v1059 = C::ty_smax(ctx, v260.0);
                                                let v1060 = C::u64_eq(ctx, v265, v1059);
                                                if v1060 == true {
                                                    let v1051 = constructor_eq(ctx, v1048, v256.0, v256.1);
                                                    // Rule at src\opts\icmp.isle line 170.
                                                    returns.extend(Some(v1051));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                        }
                                        let v265 = C::u64_from_imm64(ctx, v264);
                                        if v265 == 0x0_u64 {
                                            let mut v583 = C::inst_data_value_etor_returns::default();
                                            C::inst_data_value_etor(ctx, v256.0, &mut v583);
                                            let mut v583 = v583.into_context_iter();
                                            while let Some(v584) = v583.next(ctx) {
                                                if v584.0 == I64 {
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v929,
                                                        arg: v930,
                                                    } = &v584.1 {
                                                        if let &Opcode::Uextend = v929 {
                                                            let v931 = C::value_type(ctx, v930);
                                                            if v931 == I32 {
                                                                let v935 = constructor_iconst_u(ctx, v2.0, 0x1_u64);
                                                                let v936 = C::subsume(ctx, v935);
                                                                // Rule at src\opts\extends.isle line 32.
                                                                returns.extend(Some(v936));
                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let mut v937 = C::inst_data_value_tupled_etor_returns::default();
                            C::inst_data_value_tupled_etor(ctx, v256.1, &mut v937);
                            let mut v937 = v937.into_context_iter();
                            while let Some(v938) = v937.next(ctx) {
                                let v939 = C::iconst_sextend_etor(ctx, v938);
                                if let Some(v940) = v939 {
                                    match v940.1 {
                                        0_i64 => {
                                            let mut v583 = C::inst_data_value_etor_returns::default();
                                            C::inst_data_value_etor(ctx, v256.0, &mut v583);
                                            let mut v583 = v583.into_context_iter();
                                            while let Some(v584) = v583.next(ctx) {
                                                if v584.0 == I8 {
                                                    if let &InstructionData::Binary {
                                                        opcode: ref v637,
                                                        args: ref v638,
                                                    } = &v584.1 {
                                                        if let &Opcode::Isub = v637 {
                                                            let v639 = C::unpack_value_array_2(ctx, v638);
                                                            let mut v642 = C::inst_data_value_etor_returns::default();
                                                            C::inst_data_value_etor(ctx, v639.1, &mut v642);
                                                            let mut v642 = v642.into_context_iter();
                                                            while let Some(v643) = v642.next(ctx) {
                                                                if let &InstructionData::IntCompare {
                                                                    opcode: ref v1326,
                                                                    args: ref v1327,
                                                                    cond: ref v1328,
                                                                } = &v643.1 {
                                                                    if let &Opcode::Icmp = v1326 {
                                                                        match v1328 {
                                                                            &IntCC::SignedLessThan => {
                                                                                let mut v1316 = C::inst_data_value_etor_returns::default();
                                                                                C::inst_data_value_etor(ctx, v639.0, &mut v1316);
                                                                                let mut v1316 = v1316.into_context_iter();
                                                                                while let Some(v1317) = v1316.next(ctx) {
                                                                                    if let &InstructionData::IntCompare {
                                                                                        opcode: ref v1320,
                                                                                        args: ref v1321,
                                                                                        cond: ref v1322,
                                                                                    } = &v1317.1 {
                                                                                        if let &Opcode::Icmp = v1320 {
                                                                                            if let &IntCC::SignedGreaterThan = v1322 {
                                                                                                if v643.0 == v1317.0 {
                                                                                                    let v1323 = C::unpack_value_array_2(ctx, v1321);
                                                                                                    let v1329 = C::unpack_value_array_2(ctx, v1327);
                                                                                                    if v1323.0 == v1329.0 {
                                                                                                        if v1323.1 == v1329.1 {
                                                                                                            let v1340 = constructor_sge(ctx, v1317.0, v1323.0, v1323.1);
                                                                                                            // Rule at src\opts\spaceship.isle line 171.
                                                                                                            returns.extend(Some(v1340));
                                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            &IntCC::UnsignedLessThan => {
                                                                                let mut v1316 = C::inst_data_value_etor_returns::default();
                                                                                C::inst_data_value_etor(ctx, v639.0, &mut v1316);
                                                                                let mut v1316 = v1316.into_context_iter();
                                                                                while let Some(v1317) = v1316.next(ctx) {
                                                                                    if let &InstructionData::IntCompare {
                                                                                        opcode: ref v1320,
                                                                                        args: ref v1321,
                                                                                        cond: ref v1322,
                                                                                    } = &v1317.1 {
                                                                                        if let &Opcode::Icmp = v1320 {
                                                                                            if let &IntCC::UnsignedGreaterThan = v1322 {
                                                                                                if v643.0 == v1317.0 {
                                                                                                    let v1323 = C::unpack_value_array_2(ctx, v1321);
                                                                                                    let v1329 = C::unpack_value_array_2(ctx, v1327);
                                                                                                    if v1323.0 == v1329.0 {
                                                                                                        if v1323.1 == v1329.1 {
                                                                                                            let v1341 = constructor_uge(ctx, v1317.0, v1323.0, v1323.1);
                                                                                                            // Rule at src\opts\spaceship.isle line 173.
                                                                                                            returns.extend(Some(v1341));
                                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            _ => {}
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        1_i64 => {
                                            let v1078 = constructor_iconst_s(ctx, v940.0, 0_i64);
                                            let v1079 = constructor_sgt(ctx, v2.0, v256.0, v1078);
                                            // Rule at src\opts\icmp.isle line 191.
                                            returns.extend(Some(v1079));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            let v52 = C::ty_int(ctx, v2.0);
                            if let Some(v53) = v52 {
                                if v256.0 == v256.1 {
                                    let v980 = constructor_iconst_u(ctx, v53, 0x1_u64);
                                    let v981 = C::subsume(ctx, v980);
                                    // Rule at src\opts\icmp.isle line 9.
                                    returns.extend(Some(v981));
                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                }
                            }
                        }
                        &IntCC::SignedLessThan => {
                            let v256 = C::unpack_value_array_2(ctx, v254);
                            let mut v259 = C::inst_data_value_etor_returns::default();
                            C::inst_data_value_etor(ctx, v256.1, &mut v259);
                            let mut v259 = v259.into_context_iter();
                            while let Some(v260) = v259.next(ctx) {
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v263,
                                    imm: v264,
                                } = &v260.1 {
                                    if let &Opcode::Iconst = v263 {
                                        let v526 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v527) = v526 {
                                            let v1047 = C::ty_int(ctx, v527);
                                            if let Some(v1048) = v1047 {
                                                let v265 = C::u64_from_imm64(ctx, v264);
                                                let v1057 = C::ty_smin(ctx, v260.0);
                                                let v1058 = C::u64_eq(ctx, v265, v1057);
                                                if v1058 == true {
                                                    let v1049 = constructor_iconst_u(ctx, v1048, 0x0_u64);
                                                    let v1050 = C::subsume(ctx, v1049);
                                                    // Rule at src\opts\icmp.isle line 135.
                                                    returns.extend(Some(v1050));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                                let v1059 = C::ty_smax(ctx, v260.0);
                                                let v1060 = C::u64_eq(ctx, v265, v1059);
                                                if v1060 == true {
                                                    let v1052 = constructor_ne(ctx, v1048, v256.0, v256.1);
                                                    // Rule at src\opts\icmp.isle line 155.
                                                    returns.extend(Some(v1052));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                        }
                                        let v265 = C::u64_from_imm64(ctx, v264);
                                        if v265 == 0x0_u64 {
                                            let mut v583 = C::inst_data_value_etor_returns::default();
                                            C::inst_data_value_etor(ctx, v256.0, &mut v583);
                                            let mut v583 = v583.into_context_iter();
                                            while let Some(v584) = v583.next(ctx) {
                                                if v584.0 == I64 {
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v929,
                                                        arg: v930,
                                                    } = &v584.1 {
                                                        if let &Opcode::Uextend = v929 {
                                                            let v931 = C::value_type(ctx, v930);
                                                            if v931 == I32 {
                                                                let v932 = constructor_iconst_u(ctx, v2.0, 0x0_u64);
                                                                let v933 = C::subsume(ctx, v932);
                                                                // Rule at src\opts\extends.isle line 27.
                                                                returns.extend(Some(v933));
                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let mut v937 = C::inst_data_value_tupled_etor_returns::default();
                            C::inst_data_value_tupled_etor(ctx, v256.1, &mut v937);
                            let mut v937 = v937.into_context_iter();
                            while let Some(v938) = v937.next(ctx) {
                                let v939 = C::iconst_sextend_etor(ctx, v938);
                                if let Some(v940) = v939 {
                                    match v940.1 {
                                        0_i64 => {
                                            let mut v583 = C::inst_data_value_etor_returns::default();
                                            C::inst_data_value_etor(ctx, v256.0, &mut v583);
                                            let mut v583 = v583.into_context_iter();
                                            while let Some(v584) = v583.next(ctx) {
                                                if v584.0 == I8 {
                                                    if let &InstructionData::Binary {
                                                        opcode: ref v637,
                                                        args: ref v638,
                                                    } = &v584.1 {
                                                        if let &Opcode::Isub = v637 {
                                                            let v639 = C::unpack_value_array_2(ctx, v638);
                                                            let mut v642 = C::inst_data_value_etor_returns::default();
                                                            C::inst_data_value_etor(ctx, v639.1, &mut v642);
                                                            let mut v642 = v642.into_context_iter();
                                                            while let Some(v643) = v642.next(ctx) {
                                                                if let &InstructionData::IntCompare {
                                                                    opcode: ref v1326,
                                                                    args: ref v1327,
                                                                    cond: ref v1328,
                                                                } = &v643.1 {
                                                                    if let &Opcode::Icmp = v1326 {
                                                                        match v1328 {
                                                                            &IntCC::SignedLessThan => {
                                                                                let mut v1316 = C::inst_data_value_etor_returns::default();
                                                                                C::inst_data_value_etor(ctx, v639.0, &mut v1316);
                                                                                let mut v1316 = v1316.into_context_iter();
                                                                                while let Some(v1317) = v1316.next(ctx) {
                                                                                    if let &InstructionData::IntCompare {
                                                                                        opcode: ref v1320,
                                                                                        args: ref v1321,
                                                                                        cond: ref v1322,
                                                                                    } = &v1317.1 {
                                                                                        if let &Opcode::Icmp = v1320 {
                                                                                            if let &IntCC::SignedGreaterThan = v1322 {
                                                                                                if v643.0 == v1317.0 {
                                                                                                    let v1323 = C::unpack_value_array_2(ctx, v1321);
                                                                                                    let v1329 = C::unpack_value_array_2(ctx, v1327);
                                                                                                    if v1323.0 == v1329.0 {
                                                                                                        if v1323.1 == v1329.1 {
                                                                                                            let v1334 = constructor_slt(ctx, v1317.0, v1323.0, v1323.1);
                                                                                                            // Rule at src\opts\spaceship.isle line 156.
                                                                                                            returns.extend(Some(v1334));
                                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            &IntCC::UnsignedLessThan => {
                                                                                let mut v1316 = C::inst_data_value_etor_returns::default();
                                                                                C::inst_data_value_etor(ctx, v639.0, &mut v1316);
                                                                                let mut v1316 = v1316.into_context_iter();
                                                                                while let Some(v1317) = v1316.next(ctx) {
                                                                                    if let &InstructionData::IntCompare {
                                                                                        opcode: ref v1320,
                                                                                        args: ref v1321,
                                                                                        cond: ref v1322,
                                                                                    } = &v1317.1 {
                                                                                        if let &Opcode::Icmp = v1320 {
                                                                                            if let &IntCC::UnsignedGreaterThan = v1322 {
                                                                                                if v643.0 == v1317.0 {
                                                                                                    let v1323 = C::unpack_value_array_2(ctx, v1321);
                                                                                                    let v1329 = C::unpack_value_array_2(ctx, v1327);
                                                                                                    if v1323.0 == v1329.0 {
                                                                                                        if v1323.1 == v1329.1 {
                                                                                                            let v1335 = constructor_ult(ctx, v1317.0, v1323.0, v1323.1);
                                                                                                            // Rule at src\opts\spaceship.isle line 158.
                                                                                                            returns.extend(Some(v1335));
                                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            _ => {}
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        1_i64 => {
                                            let v1078 = constructor_iconst_s(ctx, v940.0, 0_i64);
                                            let v1080 = constructor_sle(ctx, v2.0, v256.0, v1078);
                                            // Rule at src\opts\icmp.isle line 194.
                                            returns.extend(Some(v1080));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            let v52 = C::ty_int(ctx, v2.0);
                            if let Some(v53) = v52 {
                                if v256.0 == v256.1 {
                                    let v55 = constructor_iconst_u(ctx, v53, 0x0_u64);
                                    let v56 = C::subsume(ctx, v55);
                                    // Rule at src\opts\icmp.isle line 12.
                                    returns.extend(Some(v56));
                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                }
                            }
                        }
                        &IntCC::SignedLessThanOrEqual => {
                            let v256 = C::unpack_value_array_2(ctx, v254);
                            let mut v937 = C::inst_data_value_tupled_etor_returns::default();
                            C::inst_data_value_tupled_etor(ctx, v256.1, &mut v937);
                            let mut v937 = v937.into_context_iter();
                            while let Some(v938) = v937.next(ctx) {
                                let v939 = C::iconst_sextend_etor(ctx, v938);
                                if let Some(v940) = v939 {
                                    match v940.1 {
                                        -1_i64 => {
                                            let v1078 = constructor_iconst_s(ctx, v940.0, 0_i64);
                                            let v1082 = constructor_slt(ctx, v2.0, v256.0, v1078);
                                            // Rule at src\opts\icmp.isle line 200.
                                            returns.extend(Some(v1082));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        0_i64 => {
                                            let mut v583 = C::inst_data_value_etor_returns::default();
                                            C::inst_data_value_etor(ctx, v256.0, &mut v583);
                                            let mut v583 = v583.into_context_iter();
                                            while let Some(v584) = v583.next(ctx) {
                                                if v584.0 == I8 {
                                                    if let &InstructionData::Binary {
                                                        opcode: ref v637,
                                                        args: ref v638,
                                                    } = &v584.1 {
                                                        if let &Opcode::Isub = v637 {
                                                            let v639 = C::unpack_value_array_2(ctx, v638);
                                                            let mut v642 = C::inst_data_value_etor_returns::default();
                                                            C::inst_data_value_etor(ctx, v639.1, &mut v642);
                                                            let mut v642 = v642.into_context_iter();
                                                            while let Some(v643) = v642.next(ctx) {
                                                                if let &InstructionData::IntCompare {
                                                                    opcode: ref v1326,
                                                                    args: ref v1327,
                                                                    cond: ref v1328,
                                                                } = &v643.1 {
                                                                    if let &Opcode::Icmp = v1326 {
                                                                        match v1328 {
                                                                            &IntCC::SignedLessThan => {
                                                                                let mut v1316 = C::inst_data_value_etor_returns::default();
                                                                                C::inst_data_value_etor(ctx, v639.0, &mut v1316);
                                                                                let mut v1316 = v1316.into_context_iter();
                                                                                while let Some(v1317) = v1316.next(ctx) {
                                                                                    if let &InstructionData::IntCompare {
                                                                                        opcode: ref v1320,
                                                                                        args: ref v1321,
                                                                                        cond: ref v1322,
                                                                                    } = &v1317.1 {
                                                                                        if let &Opcode::Icmp = v1320 {
                                                                                            if let &IntCC::SignedGreaterThan = v1322 {
                                                                                                if v643.0 == v1317.0 {
                                                                                                    let v1323 = C::unpack_value_array_2(ctx, v1321);
                                                                                                    let v1329 = C::unpack_value_array_2(ctx, v1327);
                                                                                                    if v1323.0 == v1329.0 {
                                                                                                        if v1323.1 == v1329.1 {
                                                                                                            let v1336 = constructor_sle(ctx, v1317.0, v1323.0, v1323.1);
                                                                                                            // Rule at src\opts\spaceship.isle line 161.
                                                                                                            returns.extend(Some(v1336));
                                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            &IntCC::UnsignedLessThan => {
                                                                                let mut v1316 = C::inst_data_value_etor_returns::default();
                                                                                C::inst_data_value_etor(ctx, v639.0, &mut v1316);
                                                                                let mut v1316 = v1316.into_context_iter();
                                                                                while let Some(v1317) = v1316.next(ctx) {
                                                                                    if let &InstructionData::IntCompare {
                                                                                        opcode: ref v1320,
                                                                                        args: ref v1321,
                                                                                        cond: ref v1322,
                                                                                    } = &v1317.1 {
                                                                                        if let &Opcode::Icmp = v1320 {
                                                                                            if let &IntCC::UnsignedGreaterThan = v1322 {
                                                                                                if v643.0 == v1317.0 {
                                                                                                    let v1323 = C::unpack_value_array_2(ctx, v1321);
                                                                                                    let v1329 = C::unpack_value_array_2(ctx, v1327);
                                                                                                    if v1323.0 == v1329.0 {
                                                                                                        if v1323.1 == v1329.1 {
                                                                                                            let v1337 = constructor_ule(ctx, v1317.0, v1323.0, v1323.1);
                                                                                                            // Rule at src\opts\spaceship.isle line 163.
                                                                                                            returns.extend(Some(v1337));
                                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            _ => {}
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            let v526 = C::fits_in_64(ctx, v2.0);
                            if let Some(v527) = v526 {
                                let v1047 = C::ty_int(ctx, v527);
                                if let Some(v1048) = v1047 {
                                    let mut v259 = C::inst_data_value_etor_returns::default();
                                    C::inst_data_value_etor(ctx, v256.1, &mut v259);
                                    let mut v259 = v259.into_context_iter();
                                    while let Some(v260) = v259.next(ctx) {
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v263,
                                            imm: v264,
                                        } = &v260.1 {
                                            if let &Opcode::Iconst = v263 {
                                                let v265 = C::u64_from_imm64(ctx, v264);
                                                let v1057 = C::ty_smin(ctx, v260.0);
                                                let v1058 = C::u64_eq(ctx, v265, v1057);
                                                if v1058 == true {
                                                    let v1051 = constructor_eq(ctx, v1048, v256.0, v256.1);
                                                    // Rule at src\opts\icmp.isle line 140.
                                                    returns.extend(Some(v1051));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                                let v1059 = C::ty_smax(ctx, v260.0);
                                                let v1060 = C::u64_eq(ctx, v265, v1059);
                                                if v1060 == true {
                                                    let v1053 = constructor_iconst_u(ctx, v1048, 0x1_u64);
                                                    let v1054 = C::subsume(ctx, v1053);
                                                    // Rule at src\opts\icmp.isle line 160.
                                                    returns.extend(Some(v1054));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let v52 = C::ty_int(ctx, v2.0);
                            if let Some(v53) = v52 {
                                if v256.0 == v256.1 {
                                    let v980 = constructor_iconst_u(ctx, v53, 0x1_u64);
                                    let v981 = C::subsume(ctx, v980);
                                    // Rule at src\opts\icmp.isle line 13.
                                    returns.extend(Some(v981));
                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                }
                            }
                        }
                        &IntCC::UnsignedGreaterThan => {
                            let v526 = C::fits_in_64(ctx, v2.0);
                            if let Some(v527) = v526 {
                                let v1047 = C::ty_int(ctx, v527);
                                if let Some(v1048) = v1047 {
                                    let v256 = C::unpack_value_array_2(ctx, v254);
                                    let mut v259 = C::inst_data_value_etor_returns::default();
                                    C::inst_data_value_etor(ctx, v256.1, &mut v259);
                                    let mut v259 = v259.into_context_iter();
                                    while let Some(v260) = v259.next(ctx) {
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v263,
                                            imm: v264,
                                        } = &v260.1 {
                                            if let &Opcode::Iconst = v263 {
                                                let v265 = C::u64_from_imm64(ctx, v264);
                                                if v265 == 0x0_u64 {
                                                    let v1052 = constructor_ne(ctx, v1048, v256.0, v256.1);
                                                    // Rule at src\opts\icmp.isle line 107.
                                                    returns.extend(Some(v1052));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                                let v1055 = C::ty_umax(ctx, v260.0);
                                                let v1056 = C::u64_eq(ctx, v265, v1055);
                                                if v1056 == true {
                                                    let v1049 = constructor_iconst_u(ctx, v1048, 0x0_u64);
                                                    let v1050 = C::subsume(ctx, v1049);
                                                    // Rule at src\opts\icmp.isle line 125.
                                                    returns.extend(Some(v1050));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let v52 = C::ty_int(ctx, v2.0);
                            if let Some(v53) = v52 {
                                let v256 = C::unpack_value_array_2(ctx, v254);
                                if v256.0 == v256.1 {
                                    let v55 = constructor_iconst_u(ctx, v53, 0x0_u64);
                                    let v56 = C::subsume(ctx, v55);
                                    // Rule at src\opts\icmp.isle line 6.
                                    returns.extend(Some(v56));
                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                }
                            }
                        }
                        &IntCC::UnsignedGreaterThanOrEqual => {
                            let v256 = C::unpack_value_array_2(ctx, v254);
                            let mut v259 = C::inst_data_value_etor_returns::default();
                            C::inst_data_value_etor(ctx, v256.1, &mut v259);
                            let mut v259 = v259.into_context_iter();
                            while let Some(v260) = v259.next(ctx) {
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v263,
                                    imm: v264,
                                } = &v260.1 {
                                    if let &Opcode::Iconst = v263 {
                                        let v265 = C::u64_from_imm64(ctx, v264);
                                        match v265 {
                                            0x0_u64 => {
                                                let v526 = C::fits_in_64(ctx, v2.0);
                                                if let Some(v527) = v526 {
                                                    let v1047 = C::ty_int(ctx, v527);
                                                    if let Some(v1048) = v1047 {
                                                        let v1053 = constructor_iconst_u(ctx, v1048, 0x1_u64);
                                                        let v1054 = C::subsume(ctx, v1053);
                                                        // Rule at src\opts\icmp.isle line 111.
                                                        returns.extend(Some(v1054));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                            0x1_u64 => {
                                                let v1075 = constructor_iconst_u(ctx, v260.0, 0x0_u64);
                                                let v1076 = constructor_ne(ctx, v2.0, v256.0, v1075);
                                                // Rule at src\opts\icmp.isle line 185.
                                                returns.extend(Some(v1076));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                            _ => {}
                                        }
                                        let v526 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v527) = v526 {
                                            let v1047 = C::ty_int(ctx, v527);
                                            if let Some(v1048) = v1047 {
                                                let v1055 = C::ty_umax(ctx, v260.0);
                                                let v1056 = C::u64_eq(ctx, v265, v1055);
                                                if v1056 == true {
                                                    let v1051 = constructor_eq(ctx, v1048, v256.0, v256.1);
                                                    // Rule at src\opts\icmp.isle line 130.
                                                    returns.extend(Some(v1051));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let v52 = C::ty_int(ctx, v2.0);
                            if let Some(v53) = v52 {
                                if v256.0 == v256.1 {
                                    let v980 = constructor_iconst_u(ctx, v53, 0x1_u64);
                                    let v981 = C::subsume(ctx, v980);
                                    // Rule at src\opts\icmp.isle line 7.
                                    returns.extend(Some(v981));
                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                }
                            }
                        }
                        &IntCC::UnsignedLessThan => {
                            let v256 = C::unpack_value_array_2(ctx, v254);
                            let mut v259 = C::inst_data_value_etor_returns::default();
                            C::inst_data_value_etor(ctx, v256.1, &mut v259);
                            let mut v259 = v259.into_context_iter();
                            while let Some(v260) = v259.next(ctx) {
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v263,
                                    imm: v264,
                                } = &v260.1 {
                                    if let &Opcode::Iconst = v263 {
                                        let v265 = C::u64_from_imm64(ctx, v264);
                                        match v265 {
                                            0x0_u64 => {
                                                let v526 = C::fits_in_64(ctx, v2.0);
                                                if let Some(v527) = v526 {
                                                    let v1047 = C::ty_int(ctx, v527);
                                                    if let Some(v1048) = v1047 {
                                                        let v1049 = constructor_iconst_u(ctx, v1048, 0x0_u64);
                                                        let v1050 = C::subsume(ctx, v1049);
                                                        // Rule at src\opts\icmp.isle line 99.
                                                        returns.extend(Some(v1050));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                            0x1_u64 => {
                                                let v1075 = constructor_iconst_u(ctx, v260.0, 0x0_u64);
                                                let v1077 = constructor_eq(ctx, v2.0, v256.0, v1075);
                                                // Rule at src\opts\icmp.isle line 188.
                                                returns.extend(Some(v1077));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                            _ => {}
                                        }
                                        let v526 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v527) = v526 {
                                            let v1047 = C::ty_int(ctx, v527);
                                            if let Some(v1048) = v1047 {
                                                let v1055 = C::ty_umax(ctx, v260.0);
                                                let v1056 = C::u64_eq(ctx, v265, v1055);
                                                if v1056 == true {
                                                    let v1052 = constructor_ne(ctx, v1048, v256.0, v256.1);
                                                    // Rule at src\opts\icmp.isle line 115.
                                                    returns.extend(Some(v1052));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let v52 = C::ty_int(ctx, v2.0);
                            if let Some(v53) = v52 {
                                if v256.0 == v256.1 {
                                    let v55 = constructor_iconst_u(ctx, v53, 0x0_u64);
                                    let v56 = C::subsume(ctx, v55);
                                    // Rule at src\opts\icmp.isle line 10.
                                    returns.extend(Some(v56));
                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                }
                            }
                        }
                        &IntCC::UnsignedLessThanOrEqual => {
                            let v526 = C::fits_in_64(ctx, v2.0);
                            if let Some(v527) = v526 {
                                let v1047 = C::ty_int(ctx, v527);
                                if let Some(v1048) = v1047 {
                                    let v256 = C::unpack_value_array_2(ctx, v254);
                                    let mut v259 = C::inst_data_value_etor_returns::default();
                                    C::inst_data_value_etor(ctx, v256.1, &mut v259);
                                    let mut v259 = v259.into_context_iter();
                                    while let Some(v260) = v259.next(ctx) {
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v263,
                                            imm: v264,
                                        } = &v260.1 {
                                            if let &Opcode::Iconst = v263 {
                                                let v265 = C::u64_from_imm64(ctx, v264);
                                                if v265 == 0x0_u64 {
                                                    let v1051 = constructor_eq(ctx, v1048, v256.0, v256.1);
                                                    // Rule at src\opts\icmp.isle line 103.
                                                    returns.extend(Some(v1051));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                                let v1055 = C::ty_umax(ctx, v260.0);
                                                let v1056 = C::u64_eq(ctx, v265, v1055);
                                                if v1056 == true {
                                                    let v1053 = constructor_iconst_u(ctx, v1048, 0x1_u64);
                                                    let v1054 = C::subsume(ctx, v1053);
                                                    // Rule at src\opts\icmp.isle line 120.
                                                    returns.extend(Some(v1054));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let v52 = C::ty_int(ctx, v2.0);
                            if let Some(v53) = v52 {
                                let v256 = C::unpack_value_array_2(ctx, v254);
                                if v256.0 == v256.1 {
                                    let v980 = constructor_iconst_u(ctx, v53, 0x1_u64);
                                    let v981 = C::subsume(ctx, v980);
                                    // Rule at src\opts\icmp.isle line 11.
                                    returns.extend(Some(v981));
                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                }
                            }
                        }
                        _ => {}
                    }
                    let v256 = C::unpack_value_array_2(ctx, v254);
                    let mut v583 = C::inst_data_value_etor_returns::default();
                    C::inst_data_value_etor(ctx, v256.0, &mut v583);
                    let mut v583 = v583.into_context_iter();
                    while let Some(v584) = v583.next(ctx) {
                        match &v584.1 {
                            &InstructionData::Unary {
                                opcode: ref v929,
                                arg: v930,
                            } => {
                                if let &Opcode::Sextend = v929 {
                                    let v947 = &C::signed_cond_code(ctx, v255);
                                    if let Some(v948) = v947 {
                                        let mut v937 = C::inst_data_value_tupled_etor_returns::default();
                                        C::inst_data_value_tupled_etor(ctx, v256.1, &mut v937);
                                        let mut v937 = v937.into_context_iter();
                                        while let Some(v938) = v937.next(ctx) {
                                            let v939 = C::iconst_sextend_etor(ctx, v938);
                                            if let Some(v940) = v939 {
                                                if v940.1 == 0_i64 {
                                                    let v931 = C::value_type(ctx, v930);
                                                    let v944 = constructor_iconst_s(ctx, v931, 0_i64);
                                                    let v949 = constructor_icmp(ctx, v931, v255, v930, v944);
                                                    // Rule at src\opts\extends.isle line 43.
                                                    returns.extend(Some(v949));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            &InstructionData::UnaryImm {
                                opcode: ref v587,
                                imm: v588,
                            } => {
                                if let &Opcode::Iconst = v587 {
                                    let mut v259 = C::inst_data_value_etor_returns::default();
                                    C::inst_data_value_etor(ctx, v256.1, &mut v259);
                                    let mut v259 = v259.into_context_iter();
                                    while let Some(v260) = v259.next(ctx) {
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v263,
                                            imm: v264,
                                        } = &v260.1 {
                                            if let &Opcode::Iconst = v263 {
                                                if v260.0 == v584.0 {
                                                    let v589 = C::imm64_icmp(ctx, v584.0, v255, v588, v264);
                                                    let v590 = constructor_iconst(ctx, v2.0, v589);
                                                    let v591 = C::subsume(ctx, v590);
                                                    // Rule at src\opts\cprop.isle line 80.
                                                    returns.extend(Some(v591));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                        }
                                    }
                                    let v599 = &C::intcc_swap_args(ctx, v255);
                                    let v600 = constructor_icmp(ctx, v2.0, v599, v256.1, v256.0);
                                    // Rule at src\opts\cprop.isle line 114.
                                    returns.extend(Some(v600));
                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                }
                            }
                            _ => {}
                        }
                    }
                }
            }
            &InstructionData::Ternary {
                opcode: ref v84,
                args: ref v85,
            } => {
                match v84 {
                    &Opcode::Select => {
                        let v86 = C::unpack_value_array_3(ctx, v85);
                        let mut v90 = C::inst_data_value_etor_returns::default();
                        C::inst_data_value_etor(ctx, v86.0, &mut v90);
                        let mut v90 = v90.into_context_iter();
                        while let Some(v91) = v90.next(ctx) {
                            match &v91.1 {
                                &InstructionData::IntCompare {
                                    opcode: ref v1083,
                                    args: ref v1084,
                                    cond: ref v1085,
                                } => {
                                    if let &Opcode::Icmp = v1083 {
                                        match v1085 {
                                            &IntCC::Equal => {
                                                let mut v1099 = C::inst_data_value_etor_returns::default();
                                                C::inst_data_value_etor(ctx, v86.2, &mut v1099);
                                                let mut v1099 = v1099.into_context_iter();
                                                while let Some(v1100) = v1099.next(ctx) {
                                                    match &v1100.1 {
                                                        &InstructionData::IntCompare {
                                                            opcode: ref v1103,
                                                            args: ref v1104,
                                                            cond: ref v1105,
                                                        } => {
                                                            if let &Opcode::Icmp = v1103 {
                                                                match v1105 {
                                                                    &IntCC::SignedGreaterThan => {
                                                                        let v1086 = C::unpack_value_array_2(ctx, v1084);
                                                                        let v1089 = C::value_type(ctx, v1086.0);
                                                                        if v1089 == I64 {
                                                                            let v1090 = C::value_type(ctx, v1086.1);
                                                                            if v1090 == I64 {
                                                                                if v2.0 == v1100.0 {
                                                                                    let v1106 = C::unpack_value_array_2(ctx, v1104);
                                                                                    if v1086.0 == v1106.0 {
                                                                                        if v1086.1 == v1106.1 {
                                                                                            let mut v96 = C::inst_data_value_etor_returns::default();
                                                                                            C::inst_data_value_etor(ctx, v86.1, &mut v96);
                                                                                            let mut v96 = v96.into_context_iter();
                                                                                            while let Some(v97) = v96.next(ctx) {
                                                                                                if let &InstructionData::IntCompare {
                                                                                                    opcode: ref v1091,
                                                                                                    args: ref v1092,
                                                                                                    cond: ref v1093,
                                                                                                } = &v97.1 {
                                                                                                    if let &Opcode::Icmp = v1091 {
                                                                                                        if let &IntCC::UnsignedGreaterThan = v1093 {
                                                                                                            let v1094 = C::unpack_value_array_2(ctx, v1092);
                                                                                                            let v1097 = C::value_type(ctx, v1094.0);
                                                                                                            if v1097 == I64 {
                                                                                                                let v1098 = C::value_type(ctx, v1094.1);
                                                                                                                if v1098 == I64 {
                                                                                                                    if v2.0 == v97.0 {
                                                                                                                        let v1109 = constructor_iconcat(ctx, I64, v1094.0, v1086.0);
                                                                                                                        let v1110 = constructor_iconcat(ctx, I64, v1094.1, v1086.1);
                                                                                                                        let v1114 = constructor_sgt(ctx, v2.0, v1109, v1110);
                                                                                                                        // Rule at src\opts\icmp.isle line 264.
                                                                                                                        returns.extend(Some(v1114));
                                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    &IntCC::SignedGreaterThanOrEqual => {
                                                                        let v1086 = C::unpack_value_array_2(ctx, v1084);
                                                                        let v1089 = C::value_type(ctx, v1086.0);
                                                                        if v1089 == I64 {
                                                                            let v1090 = C::value_type(ctx, v1086.1);
                                                                            if v1090 == I64 {
                                                                                if v2.0 == v1100.0 {
                                                                                    let v1106 = C::unpack_value_array_2(ctx, v1104);
                                                                                    if v1086.0 == v1106.0 {
                                                                                        if v1086.1 == v1106.1 {
                                                                                            let mut v96 = C::inst_data_value_etor_returns::default();
                                                                                            C::inst_data_value_etor(ctx, v86.1, &mut v96);
                                                                                            let mut v96 = v96.into_context_iter();
                                                                                            while let Some(v97) = v96.next(ctx) {
                                                                                                if let &InstructionData::IntCompare {
                                                                                                    opcode: ref v1091,
                                                                                                    args: ref v1092,
                                                                                                    cond: ref v1093,
                                                                                                } = &v97.1 {
                                                                                                    if let &Opcode::Icmp = v1091 {
                                                                                                        if let &IntCC::UnsignedGreaterThanOrEqual = v1093 {
                                                                                                            let v1094 = C::unpack_value_array_2(ctx, v1092);
                                                                                                            let v1097 = C::value_type(ctx, v1094.0);
                                                                                                            if v1097 == I64 {
                                                                                                                let v1098 = C::value_type(ctx, v1094.1);
                                                                                                                if v1098 == I64 {
                                                                                                                    if v2.0 == v97.0 {
                                                                                                                        let v1109 = constructor_iconcat(ctx, I64, v1094.0, v1086.0);
                                                                                                                        let v1110 = constructor_iconcat(ctx, I64, v1094.1, v1086.1);
                                                                                                                        let v1112 = constructor_sge(ctx, v2.0, v1109, v1110);
                                                                                                                        // Rule at src\opts\icmp.isle line 254.
                                                                                                                        returns.extend(Some(v1112));
                                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    &IntCC::SignedLessThan => {
                                                                        let v1086 = C::unpack_value_array_2(ctx, v1084);
                                                                        let v1089 = C::value_type(ctx, v1086.0);
                                                                        if v1089 == I64 {
                                                                            let v1090 = C::value_type(ctx, v1086.1);
                                                                            if v1090 == I64 {
                                                                                if v2.0 == v1100.0 {
                                                                                    let v1106 = C::unpack_value_array_2(ctx, v1104);
                                                                                    if v1086.0 == v1106.0 {
                                                                                        if v1086.1 == v1106.1 {
                                                                                            let mut v96 = C::inst_data_value_etor_returns::default();
                                                                                            C::inst_data_value_etor(ctx, v86.1, &mut v96);
                                                                                            let mut v96 = v96.into_context_iter();
                                                                                            while let Some(v97) = v96.next(ctx) {
                                                                                                if let &InstructionData::IntCompare {
                                                                                                    opcode: ref v1091,
                                                                                                    args: ref v1092,
                                                                                                    cond: ref v1093,
                                                                                                } = &v97.1 {
                                                                                                    if let &Opcode::Icmp = v1091 {
                                                                                                        if let &IntCC::UnsignedLessThan = v1093 {
                                                                                                            let v1094 = C::unpack_value_array_2(ctx, v1092);
                                                                                                            let v1097 = C::value_type(ctx, v1094.0);
                                                                                                            if v1097 == I64 {
                                                                                                                let v1098 = C::value_type(ctx, v1094.1);
                                                                                                                if v1098 == I64 {
                                                                                                                    if v2.0 == v97.0 {
                                                                                                                        let v1109 = constructor_iconcat(ctx, I64, v1094.0, v1086.0);
                                                                                                                        let v1110 = constructor_iconcat(ctx, I64, v1094.1, v1086.1);
                                                                                                                        let v1118 = constructor_slt(ctx, v2.0, v1109, v1110);
                                                                                                                        // Rule at src\opts\icmp.isle line 284.
                                                                                                                        returns.extend(Some(v1118));
                                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    &IntCC::SignedLessThanOrEqual => {
                                                                        let v1086 = C::unpack_value_array_2(ctx, v1084);
                                                                        let v1089 = C::value_type(ctx, v1086.0);
                                                                        if v1089 == I64 {
                                                                            let v1090 = C::value_type(ctx, v1086.1);
                                                                            if v1090 == I64 {
                                                                                if v2.0 == v1100.0 {
                                                                                    let v1106 = C::unpack_value_array_2(ctx, v1104);
                                                                                    if v1086.0 == v1106.0 {
                                                                                        if v1086.1 == v1106.1 {
                                                                                            let mut v96 = C::inst_data_value_etor_returns::default();
                                                                                            C::inst_data_value_etor(ctx, v86.1, &mut v96);
                                                                                            let mut v96 = v96.into_context_iter();
                                                                                            while let Some(v97) = v96.next(ctx) {
                                                                                                if let &InstructionData::IntCompare {
                                                                                                    opcode: ref v1091,
                                                                                                    args: ref v1092,
                                                                                                    cond: ref v1093,
                                                                                                } = &v97.1 {
                                                                                                    if let &Opcode::Icmp = v1091 {
                                                                                                        if let &IntCC::UnsignedLessThanOrEqual = v1093 {
                                                                                                            let v1094 = C::unpack_value_array_2(ctx, v1092);
                                                                                                            let v1097 = C::value_type(ctx, v1094.0);
                                                                                                            if v1097 == I64 {
                                                                                                                let v1098 = C::value_type(ctx, v1094.1);
                                                                                                                if v1098 == I64 {
                                                                                                                    if v2.0 == v97.0 {
                                                                                                                        let v1109 = constructor_iconcat(ctx, I64, v1094.0, v1086.0);
                                                                                                                        let v1110 = constructor_iconcat(ctx, I64, v1094.1, v1086.1);
                                                                                                                        let v1116 = constructor_sle(ctx, v2.0, v1109, v1110);
                                                                                                                        // Rule at src\opts\icmp.isle line 274.
                                                                                                                        returns.extend(Some(v1116));
                                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    &IntCC::UnsignedGreaterThan => {
                                                                        let v1086 = C::unpack_value_array_2(ctx, v1084);
                                                                        let v1089 = C::value_type(ctx, v1086.0);
                                                                        if v1089 == I64 {
                                                                            let v1090 = C::value_type(ctx, v1086.1);
                                                                            if v1090 == I64 {
                                                                                if v2.0 == v1100.0 {
                                                                                    let v1106 = C::unpack_value_array_2(ctx, v1104);
                                                                                    if v1086.0 == v1106.0 {
                                                                                        if v1086.1 == v1106.1 {
                                                                                            let mut v96 = C::inst_data_value_etor_returns::default();
                                                                                            C::inst_data_value_etor(ctx, v86.1, &mut v96);
                                                                                            let mut v96 = v96.into_context_iter();
                                                                                            while let Some(v97) = v96.next(ctx) {
                                                                                                if let &InstructionData::IntCompare {
                                                                                                    opcode: ref v1091,
                                                                                                    args: ref v1092,
                                                                                                    cond: ref v1093,
                                                                                                } = &v97.1 {
                                                                                                    if let &Opcode::Icmp = v1091 {
                                                                                                        if let &IntCC::UnsignedGreaterThan = v1093 {
                                                                                                            let v1094 = C::unpack_value_array_2(ctx, v1092);
                                                                                                            let v1097 = C::value_type(ctx, v1094.0);
                                                                                                            if v1097 == I64 {
                                                                                                                let v1098 = C::value_type(ctx, v1094.1);
                                                                                                                if v1098 == I64 {
                                                                                                                    if v2.0 == v97.0 {
                                                                                                                        let v1109 = constructor_iconcat(ctx, I64, v1094.0, v1086.0);
                                                                                                                        let v1110 = constructor_iconcat(ctx, I64, v1094.1, v1086.1);
                                                                                                                        let v1113 = constructor_ugt(ctx, v2.0, v1109, v1110);
                                                                                                                        // Rule at src\opts\icmp.isle line 259.
                                                                                                                        returns.extend(Some(v1113));
                                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    &IntCC::UnsignedGreaterThanOrEqual => {
                                                                        let v1086 = C::unpack_value_array_2(ctx, v1084);
                                                                        let v1089 = C::value_type(ctx, v1086.0);
                                                                        if v1089 == I64 {
                                                                            let v1090 = C::value_type(ctx, v1086.1);
                                                                            if v1090 == I64 {
                                                                                if v2.0 == v1100.0 {
                                                                                    let v1106 = C::unpack_value_array_2(ctx, v1104);
                                                                                    if v1086.0 == v1106.0 {
                                                                                        if v1086.1 == v1106.1 {
                                                                                            let mut v96 = C::inst_data_value_etor_returns::default();
                                                                                            C::inst_data_value_etor(ctx, v86.1, &mut v96);
                                                                                            let mut v96 = v96.into_context_iter();
                                                                                            while let Some(v97) = v96.next(ctx) {
                                                                                                if let &InstructionData::IntCompare {
                                                                                                    opcode: ref v1091,
                                                                                                    args: ref v1092,
                                                                                                    cond: ref v1093,
                                                                                                } = &v97.1 {
                                                                                                    if let &Opcode::Icmp = v1091 {
                                                                                                        if let &IntCC::UnsignedGreaterThanOrEqual = v1093 {
                                                                                                            let v1094 = C::unpack_value_array_2(ctx, v1092);
                                                                                                            let v1097 = C::value_type(ctx, v1094.0);
                                                                                                            if v1097 == I64 {
                                                                                                                let v1098 = C::value_type(ctx, v1094.1);
                                                                                                                if v1098 == I64 {
                                                                                                                    if v2.0 == v97.0 {
                                                                                                                        let v1109 = constructor_iconcat(ctx, I64, v1094.0, v1086.0);
                                                                                                                        let v1110 = constructor_iconcat(ctx, I64, v1094.1, v1086.1);
                                                                                                                        let v1111 = constructor_uge(ctx, v2.0, v1109, v1110);
                                                                                                                        // Rule at src\opts\icmp.isle line 249.
                                                                                                                        returns.extend(Some(v1111));
                                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    &IntCC::UnsignedLessThan => {
                                                                        let v1086 = C::unpack_value_array_2(ctx, v1084);
                                                                        let v1089 = C::value_type(ctx, v1086.0);
                                                                        if v1089 == I64 {
                                                                            let v1090 = C::value_type(ctx, v1086.1);
                                                                            if v1090 == I64 {
                                                                                if v2.0 == v1100.0 {
                                                                                    let v1106 = C::unpack_value_array_2(ctx, v1104);
                                                                                    if v1086.0 == v1106.0 {
                                                                                        if v1086.1 == v1106.1 {
                                                                                            let mut v96 = C::inst_data_value_etor_returns::default();
                                                                                            C::inst_data_value_etor(ctx, v86.1, &mut v96);
                                                                                            let mut v96 = v96.into_context_iter();
                                                                                            while let Some(v97) = v96.next(ctx) {
                                                                                                if let &InstructionData::IntCompare {
                                                                                                    opcode: ref v1091,
                                                                                                    args: ref v1092,
                                                                                                    cond: ref v1093,
                                                                                                } = &v97.1 {
                                                                                                    if let &Opcode::Icmp = v1091 {
                                                                                                        if let &IntCC::UnsignedLessThan = v1093 {
                                                                                                            let v1094 = C::unpack_value_array_2(ctx, v1092);
                                                                                                            let v1097 = C::value_type(ctx, v1094.0);
                                                                                                            if v1097 == I64 {
                                                                                                                let v1098 = C::value_type(ctx, v1094.1);
                                                                                                                if v1098 == I64 {
                                                                                                                    if v2.0 == v97.0 {
                                                                                                                        let v1109 = constructor_iconcat(ctx, I64, v1094.0, v1086.0);
                                                                                                                        let v1110 = constructor_iconcat(ctx, I64, v1094.1, v1086.1);
                                                                                                                        let v1117 = constructor_ult(ctx, v2.0, v1109, v1110);
                                                                                                                        // Rule at src\opts\icmp.isle line 279.
                                                                                                                        returns.extend(Some(v1117));
                                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    &IntCC::UnsignedLessThanOrEqual => {
                                                                        let v1086 = C::unpack_value_array_2(ctx, v1084);
                                                                        let v1089 = C::value_type(ctx, v1086.0);
                                                                        if v1089 == I64 {
                                                                            let v1090 = C::value_type(ctx, v1086.1);
                                                                            if v1090 == I64 {
                                                                                if v2.0 == v1100.0 {
                                                                                    let v1106 = C::unpack_value_array_2(ctx, v1104);
                                                                                    if v1086.0 == v1106.0 {
                                                                                        if v1086.1 == v1106.1 {
                                                                                            let mut v96 = C::inst_data_value_etor_returns::default();
                                                                                            C::inst_data_value_etor(ctx, v86.1, &mut v96);
                                                                                            let mut v96 = v96.into_context_iter();
                                                                                            while let Some(v97) = v96.next(ctx) {
                                                                                                if let &InstructionData::IntCompare {
                                                                                                    opcode: ref v1091,
                                                                                                    args: ref v1092,
                                                                                                    cond: ref v1093,
                                                                                                } = &v97.1 {
                                                                                                    if let &Opcode::Icmp = v1091 {
                                                                                                        if let &IntCC::UnsignedLessThanOrEqual = v1093 {
                                                                                                            let v1094 = C::unpack_value_array_2(ctx, v1092);
                                                                                                            let v1097 = C::value_type(ctx, v1094.0);
                                                                                                            if v1097 == I64 {
                                                                                                                let v1098 = C::value_type(ctx, v1094.1);
                                                                                                                if v1098 == I64 {
                                                                                                                    if v2.0 == v97.0 {
                                                                                                                        let v1109 = constructor_iconcat(ctx, I64, v1094.0, v1086.0);
                                                                                                                        let v1110 = constructor_iconcat(ctx, I64, v1094.1, v1086.1);
                                                                                                                        let v1115 = constructor_ule(ctx, v2.0, v1109, v1110);
                                                                                                                        // Rule at src\opts\icmp.isle line 269.
                                                                                                                        returns.extend(Some(v1115));
                                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    _ => {}
                                                                }
                                                            }
                                                        }
                                                        &InstructionData::Ternary {
                                                            opcode: ref v1276,
                                                            args: ref v1277,
                                                        } => {
                                                            if let &Opcode::Select = v1276 {
                                                                if v2.0 == v1100.0 {
                                                                    let mut v1137 = C::inst_data_value_tupled_etor_returns::default();
                                                                    C::inst_data_value_tupled_etor(ctx, v86.1, &mut v1137);
                                                                    let mut v1137 = v1137.into_context_iter();
                                                                    while let Some(v1138) = v1137.next(ctx) {
                                                                        let v1139 = C::iconst_sextend_etor(ctx, v1138);
                                                                        if let Some(v1140) = v1139 {
                                                                            if v1140.1 == 0_i64 {
                                                                                if v2.0 == v1140.0 {
                                                                                    let v1278 = C::unpack_value_array_3(ctx, v1277);
                                                                                    let mut v1282 = C::inst_data_value_etor_returns::default();
                                                                                    C::inst_data_value_etor(ctx, v1278.0, &mut v1282);
                                                                                    let mut v1282 = v1282.into_context_iter();
                                                                                    while let Some(v1283) = v1282.next(ctx) {
                                                                                        if let &InstructionData::IntCompare {
                                                                                            opcode: ref v1286,
                                                                                            args: ref v1287,
                                                                                            cond: ref v1288,
                                                                                        } = &v1283.1 {
                                                                                            if let &Opcode::Icmp = v1286 {
                                                                                                match v1288 {
                                                                                                    &IntCC::SignedGreaterThan => {
                                                                                                        if v91.0 == v1283.0 {
                                                                                                            let v1086 = C::unpack_value_array_2(ctx, v1084);
                                                                                                            let v1289 = C::unpack_value_array_2(ctx, v1287);
                                                                                                            if v1086.0 == v1289.0 {
                                                                                                                if v1086.1 == v1289.1 {
                                                                                                                    let mut v1292 = C::inst_data_value_tupled_etor_returns::default();
                                                                                                                    C::inst_data_value_tupled_etor(ctx, v1278.1, &mut v1292);
                                                                                                                    let mut v1292 = v1292.into_context_iter();
                                                                                                                    while let Some(v1293) = v1292.next(ctx) {
                                                                                                                        let v1294 = C::iconst_sextend_etor(ctx, v1293);
                                                                                                                        if let Some(v1295) = v1294 {
                                                                                                                            if v1295.1 == 1_i64 {
                                                                                                                                if v2.0 == v1295.0 {
                                                                                                                                    let mut v1298 = C::inst_data_value_tupled_etor_returns::default();
                                                                                                                                    C::inst_data_value_tupled_etor(ctx, v1278.2, &mut v1298);
                                                                                                                                    let mut v1298 = v1298.into_context_iter();
                                                                                                                                    while let Some(v1299) = v1298.next(ctx) {
                                                                                                                                        let v1300 = C::iconst_sextend_etor(ctx, v1299);
                                                                                                                                        if let Some(v1301) = v1300 {
                                                                                                                                            if v1301.1 == -1_i64 {
                                                                                                                                                if v2.0 == v1301.0 {
                                                                                                                                                    let v1314 = constructor_spaceship_s(ctx, v91.0, v1086.0, v1086.1);
                                                                                                                                                    let v1315 = constructor_sextend_maybe(ctx, v2.0, v1314);
                                                                                                                                                    // Rule at src\opts\spaceship.isle line 103.
                                                                                                                                                    returns.extend(Some(v1315));
                                                                                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    &IntCC::SignedGreaterThanOrEqual => {
                                                                                                        if v91.0 == v1283.0 {
                                                                                                            let v1086 = C::unpack_value_array_2(ctx, v1084);
                                                                                                            let v1289 = C::unpack_value_array_2(ctx, v1287);
                                                                                                            if v1086.0 == v1289.0 {
                                                                                                                if v1086.1 == v1289.1 {
                                                                                                                    let mut v1292 = C::inst_data_value_tupled_etor_returns::default();
                                                                                                                    C::inst_data_value_tupled_etor(ctx, v1278.1, &mut v1292);
                                                                                                                    let mut v1292 = v1292.into_context_iter();
                                                                                                                    while let Some(v1293) = v1292.next(ctx) {
                                                                                                                        let v1294 = C::iconst_sextend_etor(ctx, v1293);
                                                                                                                        if let Some(v1295) = v1294 {
                                                                                                                            if v1295.1 == 1_i64 {
                                                                                                                                if v2.0 == v1295.0 {
                                                                                                                                    let mut v1298 = C::inst_data_value_tupled_etor_returns::default();
                                                                                                                                    C::inst_data_value_tupled_etor(ctx, v1278.2, &mut v1298);
                                                                                                                                    let mut v1298 = v1298.into_context_iter();
                                                                                                                                    while let Some(v1299) = v1298.next(ctx) {
                                                                                                                                        let v1300 = C::iconst_sextend_etor(ctx, v1299);
                                                                                                                                        if let Some(v1301) = v1300 {
                                                                                                                                            if v1301.1 == -1_i64 {
                                                                                                                                                if v2.0 == v1301.0 {
                                                                                                                                                    let v1314 = constructor_spaceship_s(ctx, v91.0, v1086.0, v1086.1);
                                                                                                                                                    let v1315 = constructor_sextend_maybe(ctx, v2.0, v1314);
                                                                                                                                                    // Rule at src\opts\spaceship.isle line 110.
                                                                                                                                                    returns.extend(Some(v1315));
                                                                                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    &IntCC::SignedLessThan => {
                                                                                                        if v91.0 == v1283.0 {
                                                                                                            let v1086 = C::unpack_value_array_2(ctx, v1084);
                                                                                                            let v1289 = C::unpack_value_array_2(ctx, v1287);
                                                                                                            if v1086.0 == v1289.0 {
                                                                                                                if v1086.1 == v1289.1 {
                                                                                                                    let mut v1292 = C::inst_data_value_tupled_etor_returns::default();
                                                                                                                    C::inst_data_value_tupled_etor(ctx, v1278.1, &mut v1292);
                                                                                                                    let mut v1292 = v1292.into_context_iter();
                                                                                                                    while let Some(v1293) = v1292.next(ctx) {
                                                                                                                        let v1294 = C::iconst_sextend_etor(ctx, v1293);
                                                                                                                        if let Some(v1295) = v1294 {
                                                                                                                            if v1295.1 == -1_i64 {
                                                                                                                                if v2.0 == v1295.0 {
                                                                                                                                    let mut v1298 = C::inst_data_value_tupled_etor_returns::default();
                                                                                                                                    C::inst_data_value_tupled_etor(ctx, v1278.2, &mut v1298);
                                                                                                                                    let mut v1298 = v1298.into_context_iter();
                                                                                                                                    while let Some(v1299) = v1298.next(ctx) {
                                                                                                                                        let v1300 = C::iconst_sextend_etor(ctx, v1299);
                                                                                                                                        if let Some(v1301) = v1300 {
                                                                                                                                            if v1301.1 == 1_i64 {
                                                                                                                                                if v2.0 == v1301.0 {
                                                                                                                                                    let v1314 = constructor_spaceship_s(ctx, v91.0, v1086.0, v1086.1);
                                                                                                                                                    let v1315 = constructor_sextend_maybe(ctx, v2.0, v1314);
                                                                                                                                                    // Rule at src\opts\spaceship.isle line 89.
                                                                                                                                                    returns.extend(Some(v1315));
                                                                                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    &IntCC::SignedLessThanOrEqual => {
                                                                                                        if v91.0 == v1283.0 {
                                                                                                            let v1086 = C::unpack_value_array_2(ctx, v1084);
                                                                                                            let v1289 = C::unpack_value_array_2(ctx, v1287);
                                                                                                            if v1086.0 == v1289.0 {
                                                                                                                if v1086.1 == v1289.1 {
                                                                                                                    let mut v1292 = C::inst_data_value_tupled_etor_returns::default();
                                                                                                                    C::inst_data_value_tupled_etor(ctx, v1278.1, &mut v1292);
                                                                                                                    let mut v1292 = v1292.into_context_iter();
                                                                                                                    while let Some(v1293) = v1292.next(ctx) {
                                                                                                                        let v1294 = C::iconst_sextend_etor(ctx, v1293);
                                                                                                                        if let Some(v1295) = v1294 {
                                                                                                                            if v1295.1 == -1_i64 {
                                                                                                                                if v2.0 == v1295.0 {
                                                                                                                                    let mut v1298 = C::inst_data_value_tupled_etor_returns::default();
                                                                                                                                    C::inst_data_value_tupled_etor(ctx, v1278.2, &mut v1298);
                                                                                                                                    let mut v1298 = v1298.into_context_iter();
                                                                                                                                    while let Some(v1299) = v1298.next(ctx) {
                                                                                                                                        let v1300 = C::iconst_sextend_etor(ctx, v1299);
                                                                                                                                        if let Some(v1301) = v1300 {
                                                                                                                                            if v1301.1 == 1_i64 {
                                                                                                                                                if v2.0 == v1301.0 {
                                                                                                                                                    let v1314 = constructor_spaceship_s(ctx, v91.0, v1086.0, v1086.1);
                                                                                                                                                    let v1315 = constructor_sextend_maybe(ctx, v2.0, v1314);
                                                                                                                                                    // Rule at src\opts\spaceship.isle line 96.
                                                                                                                                                    returns.extend(Some(v1315));
                                                                                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    &IntCC::UnsignedGreaterThan => {
                                                                                                        if v91.0 == v1283.0 {
                                                                                                            let v1086 = C::unpack_value_array_2(ctx, v1084);
                                                                                                            let v1289 = C::unpack_value_array_2(ctx, v1287);
                                                                                                            if v1086.0 == v1289.0 {
                                                                                                                if v1086.1 == v1289.1 {
                                                                                                                    let mut v1292 = C::inst_data_value_tupled_etor_returns::default();
                                                                                                                    C::inst_data_value_tupled_etor(ctx, v1278.1, &mut v1292);
                                                                                                                    let mut v1292 = v1292.into_context_iter();
                                                                                                                    while let Some(v1293) = v1292.next(ctx) {
                                                                                                                        let v1294 = C::iconst_sextend_etor(ctx, v1293);
                                                                                                                        if let Some(v1295) = v1294 {
                                                                                                                            if v1295.1 == 1_i64 {
                                                                                                                                if v2.0 == v1295.0 {
                                                                                                                                    let mut v1298 = C::inst_data_value_tupled_etor_returns::default();
                                                                                                                                    C::inst_data_value_tupled_etor(ctx, v1278.2, &mut v1298);
                                                                                                                                    let mut v1298 = v1298.into_context_iter();
                                                                                                                                    while let Some(v1299) = v1298.next(ctx) {
                                                                                                                                        let v1300 = C::iconst_sextend_etor(ctx, v1299);
                                                                                                                                        if let Some(v1301) = v1300 {
                                                                                                                                            if v1301.1 == -1_i64 {
                                                                                                                                                if v2.0 == v1301.0 {
                                                                                                                                                    let v1274 = constructor_spaceship_u(ctx, v91.0, v1086.0, v1086.1);
                                                                                                                                                    let v1275 = constructor_sextend_maybe(ctx, v2.0, v1274);
                                                                                                                                                    // Rule at src\opts\spaceship.isle line 38.
                                                                                                                                                    returns.extend(Some(v1275));
                                                                                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    &IntCC::UnsignedGreaterThanOrEqual => {
                                                                                                        if v91.0 == v1283.0 {
                                                                                                            let v1086 = C::unpack_value_array_2(ctx, v1084);
                                                                                                            let v1289 = C::unpack_value_array_2(ctx, v1287);
                                                                                                            if v1086.0 == v1289.0 {
                                                                                                                if v1086.1 == v1289.1 {
                                                                                                                    let mut v1292 = C::inst_data_value_tupled_etor_returns::default();
                                                                                                                    C::inst_data_value_tupled_etor(ctx, v1278.1, &mut v1292);
                                                                                                                    let mut v1292 = v1292.into_context_iter();
                                                                                                                    while let Some(v1293) = v1292.next(ctx) {
                                                                                                                        let v1294 = C::iconst_sextend_etor(ctx, v1293);
                                                                                                                        if let Some(v1295) = v1294 {
                                                                                                                            if v1295.1 == 1_i64 {
                                                                                                                                if v2.0 == v1295.0 {
                                                                                                                                    let mut v1298 = C::inst_data_value_tupled_etor_returns::default();
                                                                                                                                    C::inst_data_value_tupled_etor(ctx, v1278.2, &mut v1298);
                                                                                                                                    let mut v1298 = v1298.into_context_iter();
                                                                                                                                    while let Some(v1299) = v1298.next(ctx) {
                                                                                                                                        let v1300 = C::iconst_sextend_etor(ctx, v1299);
                                                                                                                                        if let Some(v1301) = v1300 {
                                                                                                                                            if v1301.1 == -1_i64 {
                                                                                                                                                if v2.0 == v1301.0 {
                                                                                                                                                    let v1274 = constructor_spaceship_u(ctx, v91.0, v1086.0, v1086.1);
                                                                                                                                                    let v1275 = constructor_sextend_maybe(ctx, v2.0, v1274);
                                                                                                                                                    // Rule at src\opts\spaceship.isle line 45.
                                                                                                                                                    returns.extend(Some(v1275));
                                                                                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    &IntCC::UnsignedLessThan => {
                                                                                                        if v91.0 == v1283.0 {
                                                                                                            let v1086 = C::unpack_value_array_2(ctx, v1084);
                                                                                                            let v1289 = C::unpack_value_array_2(ctx, v1287);
                                                                                                            if v1086.0 == v1289.0 {
                                                                                                                if v1086.1 == v1289.1 {
                                                                                                                    let mut v1292 = C::inst_data_value_tupled_etor_returns::default();
                                                                                                                    C::inst_data_value_tupled_etor(ctx, v1278.1, &mut v1292);
                                                                                                                    let mut v1292 = v1292.into_context_iter();
                                                                                                                    while let Some(v1293) = v1292.next(ctx) {
                                                                                                                        let v1294 = C::iconst_sextend_etor(ctx, v1293);
                                                                                                                        if let Some(v1295) = v1294 {
                                                                                                                            if v1295.1 == -1_i64 {
                                                                                                                                if v2.0 == v1295.0 {
                                                                                                                                    let mut v1298 = C::inst_data_value_tupled_etor_returns::default();
                                                                                                                                    C::inst_data_value_tupled_etor(ctx, v1278.2, &mut v1298);
                                                                                                                                    let mut v1298 = v1298.into_context_iter();
                                                                                                                                    while let Some(v1299) = v1298.next(ctx) {
                                                                                                                                        let v1300 = C::iconst_sextend_etor(ctx, v1299);
                                                                                                                                        if let Some(v1301) = v1300 {
                                                                                                                                            if v1301.1 == 1_i64 {
                                                                                                                                                if v2.0 == v1301.0 {
                                                                                                                                                    let v1274 = constructor_spaceship_u(ctx, v91.0, v1086.0, v1086.1);
                                                                                                                                                    let v1275 = constructor_sextend_maybe(ctx, v2.0, v1274);
                                                                                                                                                    // Rule at src\opts\spaceship.isle line 24.
                                                                                                                                                    returns.extend(Some(v1275));
                                                                                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    &IntCC::UnsignedLessThanOrEqual => {
                                                                                                        if v91.0 == v1283.0 {
                                                                                                            let v1086 = C::unpack_value_array_2(ctx, v1084);
                                                                                                            let v1289 = C::unpack_value_array_2(ctx, v1287);
                                                                                                            if v1086.0 == v1289.0 {
                                                                                                                if v1086.1 == v1289.1 {
                                                                                                                    let mut v1292 = C::inst_data_value_tupled_etor_returns::default();
                                                                                                                    C::inst_data_value_tupled_etor(ctx, v1278.1, &mut v1292);
                                                                                                                    let mut v1292 = v1292.into_context_iter();
                                                                                                                    while let Some(v1293) = v1292.next(ctx) {
                                                                                                                        let v1294 = C::iconst_sextend_etor(ctx, v1293);
                                                                                                                        if let Some(v1295) = v1294 {
                                                                                                                            if v1295.1 == -1_i64 {
                                                                                                                                if v2.0 == v1295.0 {
                                                                                                                                    let mut v1298 = C::inst_data_value_tupled_etor_returns::default();
                                                                                                                                    C::inst_data_value_tupled_etor(ctx, v1278.2, &mut v1298);
                                                                                                                                    let mut v1298 = v1298.into_context_iter();
                                                                                                                                    while let Some(v1299) = v1298.next(ctx) {
                                                                                                                                        let v1300 = C::iconst_sextend_etor(ctx, v1299);
                                                                                                                                        if let Some(v1301) = v1300 {
                                                                                                                                            if v1301.1 == 1_i64 {
                                                                                                                                                if v2.0 == v1301.0 {
                                                                                                                                                    let v1274 = constructor_spaceship_u(ctx, v91.0, v1086.0, v1086.1);
                                                                                                                                                    let v1275 = constructor_sextend_maybe(ctx, v2.0, v1274);
                                                                                                                                                    // Rule at src\opts\spaceship.isle line 31.
                                                                                                                                                    returns.extend(Some(v1275));
                                                                                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    _ => {}
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                            &IntCC::SignedGreaterThan => {
                                                let mut v1099 = C::inst_data_value_etor_returns::default();
                                                C::inst_data_value_etor(ctx, v86.2, &mut v1099);
                                                let mut v1099 = v1099.into_context_iter();
                                                while let Some(v1100) = v1099.next(ctx) {
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v1173,
                                                        arg: v1174,
                                                    } = &v1100.1 {
                                                        match v1173 {
                                                            &Opcode::Ineg => {
                                                                if v91.0 == v1100.0 {
                                                                    let mut v1137 = C::inst_data_value_tupled_etor_returns::default();
                                                                    C::inst_data_value_tupled_etor(ctx, v86.1, &mut v1137);
                                                                    let mut v1137 = v1137.into_context_iter();
                                                                    while let Some(v1138) = v1137.next(ctx) {
                                                                        let v1139 = C::iconst_sextend_etor(ctx, v1138);
                                                                        if let Some(v1140) = v1139 {
                                                                            if v1140.1 == 1_i64 {
                                                                                if v2.0 == v1140.0 {
                                                                                    let mut v1304 = C::inst_data_value_etor_returns::default();
                                                                                    C::inst_data_value_etor(ctx, v1174, &mut v1304);
                                                                                    let mut v1304 = v1304.into_context_iter();
                                                                                    while let Some(v1305) = v1304.next(ctx) {
                                                                                        if let &InstructionData::IntCompare {
                                                                                            opcode: ref v1308,
                                                                                            args: ref v1309,
                                                                                            cond: ref v1310,
                                                                                        } = &v1305.1 {
                                                                                            if let &Opcode::Icmp = v1308 {
                                                                                                match v1310 {
                                                                                                    &IntCC::NotEqual => {
                                                                                                        if v91.0 == v1305.0 {
                                                                                                            let v1086 = C::unpack_value_array_2(ctx, v1084);
                                                                                                            let v1311 = C::unpack_value_array_2(ctx, v1309);
                                                                                                            if v1086.0 == v1311.0 {
                                                                                                                if v1086.1 == v1311.1 {
                                                                                                                    let v1314 = constructor_spaceship_s(ctx, v91.0, v1086.0, v1086.1);
                                                                                                                    let v1315 = constructor_sextend_maybe(ctx, v2.0, v1314);
                                                                                                                    // Rule at src\opts\spaceship.isle line 129.
                                                                                                                    returns.extend(Some(v1315));
                                                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    &IntCC::SignedLessThan => {
                                                                                                        if v91.0 == v1305.0 {
                                                                                                            let v1086 = C::unpack_value_array_2(ctx, v1084);
                                                                                                            let v1311 = C::unpack_value_array_2(ctx, v1309);
                                                                                                            if v1086.0 == v1311.0 {
                                                                                                                if v1086.1 == v1311.1 {
                                                                                                                    let v1314 = constructor_spaceship_s(ctx, v91.0, v1086.0, v1086.1);
                                                                                                                    let v1315 = constructor_sextend_maybe(ctx, v2.0, v1314);
                                                                                                                    // Rule at src\opts\spaceship.isle line 119.
                                                                                                                    returns.extend(Some(v1315));
                                                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    _ => {}
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            &Opcode::Bmask => {
                                                                if v2.0 == v1100.0 {
                                                                    let mut v1137 = C::inst_data_value_tupled_etor_returns::default();
                                                                    C::inst_data_value_tupled_etor(ctx, v86.1, &mut v1137);
                                                                    let mut v1137 = v1137.into_context_iter();
                                                                    while let Some(v1138) = v1137.next(ctx) {
                                                                        let v1139 = C::iconst_sextend_etor(ctx, v1138);
                                                                        if let Some(v1140) = v1139 {
                                                                            if v1140.1 == 1_i64 {
                                                                                if v2.0 == v1140.0 {
                                                                                    let mut v1304 = C::inst_data_value_etor_returns::default();
                                                                                    C::inst_data_value_etor(ctx, v1174, &mut v1304);
                                                                                    let mut v1304 = v1304.into_context_iter();
                                                                                    while let Some(v1305) = v1304.next(ctx) {
                                                                                        if let &InstructionData::IntCompare {
                                                                                            opcode: ref v1308,
                                                                                            args: ref v1309,
                                                                                            cond: ref v1310,
                                                                                        } = &v1305.1 {
                                                                                            if let &Opcode::Icmp = v1308 {
                                                                                                match v1310 {
                                                                                                    &IntCC::NotEqual => {
                                                                                                        if v91.0 == v1305.0 {
                                                                                                            let v1086 = C::unpack_value_array_2(ctx, v1084);
                                                                                                            let v1311 = C::unpack_value_array_2(ctx, v1309);
                                                                                                            if v1086.0 == v1311.0 {
                                                                                                                if v1086.1 == v1311.1 {
                                                                                                                    let v1314 = constructor_spaceship_s(ctx, v91.0, v1086.0, v1086.1);
                                                                                                                    let v1315 = constructor_sextend_maybe(ctx, v2.0, v1314);
                                                                                                                    // Rule at src\opts\spaceship.isle line 133.
                                                                                                                    returns.extend(Some(v1315));
                                                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    &IntCC::SignedLessThan => {
                                                                                                        if v91.0 == v1305.0 {
                                                                                                            let v1086 = C::unpack_value_array_2(ctx, v1084);
                                                                                                            let v1311 = C::unpack_value_array_2(ctx, v1309);
                                                                                                            if v1086.0 == v1311.0 {
                                                                                                                if v1086.1 == v1311.1 {
                                                                                                                    let v1314 = constructor_spaceship_s(ctx, v91.0, v1086.0, v1086.1);
                                                                                                                    let v1315 = constructor_sextend_maybe(ctx, v2.0, v1314);
                                                                                                                    // Rule at src\opts\spaceship.isle line 123.
                                                                                                                    returns.extend(Some(v1315));
                                                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    _ => {}
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                let v1086 = C::unpack_value_array_2(ctx, v1084);
                                                if v86.1 == v1086.0 {
                                                    if v86.2 == v1086.1 {
                                                        let v1150 = constructor_smax(ctx, v2.0, v1086.0, v1086.1);
                                                        // Rule at src\opts\selects.isle line 25.
                                                        returns.extend(Some(v1150));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                                if v86.2 == v1086.0 {
                                                    if v86.1 == v1086.1 {
                                                        let v1152 = constructor_smin(ctx, v2.0, v1086.0, v1086.1);
                                                        // Rule at src\opts\selects.isle line 39.
                                                        returns.extend(Some(v1152));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                            &IntCC::SignedGreaterThanOrEqual => {
                                                let v1086 = C::unpack_value_array_2(ctx, v1084);
                                                if v86.1 == v1086.0 {
                                                    if v86.2 == v1086.1 {
                                                        let v1150 = constructor_smax(ctx, v2.0, v1086.0, v1086.1);
                                                        // Rule at src\opts\selects.isle line 26.
                                                        returns.extend(Some(v1150));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                                if v86.1 == v1086.1 {
                                                    if v86.2 == v1086.0 {
                                                        let v1152 = constructor_smin(ctx, v2.0, v1086.0, v1086.1);
                                                        // Rule at src\opts\selects.isle line 40.
                                                        returns.extend(Some(v1152));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                            &IntCC::SignedLessThan => {
                                                let mut v1137 = C::inst_data_value_tupled_etor_returns::default();
                                                C::inst_data_value_tupled_etor(ctx, v86.1, &mut v1137);
                                                let mut v1137 = v1137.into_context_iter();
                                                while let Some(v1138) = v1137.next(ctx) {
                                                    let v1139 = C::iconst_sextend_etor(ctx, v1138);
                                                    if let Some(v1140) = v1139 {
                                                        if v1140.1 == -1_i64 {
                                                            if v2.0 == v1140.0 {
                                                                let mut v1260 = C::uextend_maybe_etor_returns::default();
                                                                C::uextend_maybe_etor(ctx, v86.2, &mut v1260);
                                                                let mut v1260 = v1260.into_context_iter();
                                                                while let Some(v1261) = v1260.next(ctx) {
                                                                    if v2.0 == v1261.0 {
                                                                        let mut v1264 = C::inst_data_value_etor_returns::default();
                                                                        C::inst_data_value_etor(ctx, v1261.1, &mut v1264);
                                                                        let mut v1264 = v1264.into_context_iter();
                                                                        while let Some(v1265) = v1264.next(ctx) {
                                                                            if let &InstructionData::IntCompare {
                                                                                opcode: ref v1268,
                                                                                args: ref v1269,
                                                                                cond: ref v1270,
                                                                            } = &v1265.1 {
                                                                                if let &Opcode::Icmp = v1268 {
                                                                                    match v1270 {
                                                                                        &IntCC::NotEqual => {
                                                                                            if v91.0 == v1265.0 {
                                                                                                let v1086 = C::unpack_value_array_2(ctx, v1084);
                                                                                                let v1271 = C::unpack_value_array_2(ctx, v1269);
                                                                                                if v1086.0 == v1271.0 {
                                                                                                    if v1086.1 == v1271.1 {
                                                                                                        let v1314 = constructor_spaceship_s(ctx, v91.0, v1086.0, v1086.1);
                                                                                                        let v1315 = constructor_sextend_maybe(ctx, v2.0, v1314);
                                                                                                        // Rule at src\opts\spaceship.isle line 77.
                                                                                                        returns.extend(Some(v1315));
                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        &IntCC::SignedGreaterThan => {
                                                                                            if v91.0 == v1265.0 {
                                                                                                let v1086 = C::unpack_value_array_2(ctx, v1084);
                                                                                                let v1271 = C::unpack_value_array_2(ctx, v1269);
                                                                                                if v1086.0 == v1271.0 {
                                                                                                    if v1086.1 == v1271.1 {
                                                                                                        let v1314 = constructor_spaceship_s(ctx, v91.0, v1086.0, v1086.1);
                                                                                                        let v1315 = constructor_sextend_maybe(ctx, v2.0, v1314);
                                                                                                        // Rule at src\opts\spaceship.isle line 83.
                                                                                                        returns.extend(Some(v1315));
                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        _ => {}
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                let v1086 = C::unpack_value_array_2(ctx, v1084);
                                                if v86.1 == v1086.0 {
                                                    if v86.2 == v1086.1 {
                                                        let v1152 = constructor_smin(ctx, v2.0, v1086.0, v1086.1);
                                                        // Rule at src\opts\selects.isle line 29.
                                                        returns.extend(Some(v1152));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                                if v86.1 == v1086.1 {
                                                    if v86.2 == v1086.0 {
                                                        let v1150 = constructor_smax(ctx, v2.0, v1086.0, v1086.1);
                                                        // Rule at src\opts\selects.isle line 35.
                                                        returns.extend(Some(v1150));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                            &IntCC::SignedLessThanOrEqual => {
                                                let v1086 = C::unpack_value_array_2(ctx, v1084);
                                                if v86.1 == v1086.0 {
                                                    if v86.2 == v1086.1 {
                                                        let v1152 = constructor_smin(ctx, v2.0, v1086.0, v1086.1);
                                                        // Rule at src\opts\selects.isle line 30.
                                                        returns.extend(Some(v1152));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                                if v86.1 == v1086.1 {
                                                    if v86.2 == v1086.0 {
                                                        let v1150 = constructor_smax(ctx, v2.0, v1086.0, v1086.1);
                                                        // Rule at src\opts\selects.isle line 36.
                                                        returns.extend(Some(v1150));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                            &IntCC::UnsignedGreaterThan => {
                                                let mut v1099 = C::inst_data_value_etor_returns::default();
                                                C::inst_data_value_etor(ctx, v86.2, &mut v1099);
                                                let mut v1099 = v1099.into_context_iter();
                                                while let Some(v1100) = v1099.next(ctx) {
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v1173,
                                                        arg: v1174,
                                                    } = &v1100.1 {
                                                        match v1173 {
                                                            &Opcode::Ineg => {
                                                                if v91.0 == v1100.0 {
                                                                    let mut v1137 = C::inst_data_value_tupled_etor_returns::default();
                                                                    C::inst_data_value_tupled_etor(ctx, v86.1, &mut v1137);
                                                                    let mut v1137 = v1137.into_context_iter();
                                                                    while let Some(v1138) = v1137.next(ctx) {
                                                                        let v1139 = C::iconst_sextend_etor(ctx, v1138);
                                                                        if let Some(v1140) = v1139 {
                                                                            if v1140.1 == 1_i64 {
                                                                                if v2.0 == v1140.0 {
                                                                                    let mut v1304 = C::inst_data_value_etor_returns::default();
                                                                                    C::inst_data_value_etor(ctx, v1174, &mut v1304);
                                                                                    let mut v1304 = v1304.into_context_iter();
                                                                                    while let Some(v1305) = v1304.next(ctx) {
                                                                                        if let &InstructionData::IntCompare {
                                                                                            opcode: ref v1308,
                                                                                            args: ref v1309,
                                                                                            cond: ref v1310,
                                                                                        } = &v1305.1 {
                                                                                            if let &Opcode::Icmp = v1308 {
                                                                                                match v1310 {
                                                                                                    &IntCC::NotEqual => {
                                                                                                        if v91.0 == v1305.0 {
                                                                                                            let v1086 = C::unpack_value_array_2(ctx, v1084);
                                                                                                            let v1311 = C::unpack_value_array_2(ctx, v1309);
                                                                                                            if v1086.0 == v1311.0 {
                                                                                                                if v1086.1 == v1311.1 {
                                                                                                                    let v1274 = constructor_spaceship_u(ctx, v91.0, v1086.0, v1086.1);
                                                                                                                    let v1275 = constructor_sextend_maybe(ctx, v2.0, v1274);
                                                                                                                    // Rule at src\opts\spaceship.isle line 64.
                                                                                                                    returns.extend(Some(v1275));
                                                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    &IntCC::UnsignedLessThan => {
                                                                                                        if v91.0 == v1305.0 {
                                                                                                            let v1086 = C::unpack_value_array_2(ctx, v1084);
                                                                                                            let v1311 = C::unpack_value_array_2(ctx, v1309);
                                                                                                            if v1086.0 == v1311.0 {
                                                                                                                if v1086.1 == v1311.1 {
                                                                                                                    let v1274 = constructor_spaceship_u(ctx, v91.0, v1086.0, v1086.1);
                                                                                                                    let v1275 = constructor_sextend_maybe(ctx, v2.0, v1274);
                                                                                                                    // Rule at src\opts\spaceship.isle line 54.
                                                                                                                    returns.extend(Some(v1275));
                                                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    _ => {}
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            &Opcode::Bmask => {
                                                                if v2.0 == v1100.0 {
                                                                    let mut v1137 = C::inst_data_value_tupled_etor_returns::default();
                                                                    C::inst_data_value_tupled_etor(ctx, v86.1, &mut v1137);
                                                                    let mut v1137 = v1137.into_context_iter();
                                                                    while let Some(v1138) = v1137.next(ctx) {
                                                                        let v1139 = C::iconst_sextend_etor(ctx, v1138);
                                                                        if let Some(v1140) = v1139 {
                                                                            if v1140.1 == 1_i64 {
                                                                                if v2.0 == v1140.0 {
                                                                                    let mut v1304 = C::inst_data_value_etor_returns::default();
                                                                                    C::inst_data_value_etor(ctx, v1174, &mut v1304);
                                                                                    let mut v1304 = v1304.into_context_iter();
                                                                                    while let Some(v1305) = v1304.next(ctx) {
                                                                                        if let &InstructionData::IntCompare {
                                                                                            opcode: ref v1308,
                                                                                            args: ref v1309,
                                                                                            cond: ref v1310,
                                                                                        } = &v1305.1 {
                                                                                            if let &Opcode::Icmp = v1308 {
                                                                                                match v1310 {
                                                                                                    &IntCC::NotEqual => {
                                                                                                        if v91.0 == v1305.0 {
                                                                                                            let v1086 = C::unpack_value_array_2(ctx, v1084);
                                                                                                            let v1311 = C::unpack_value_array_2(ctx, v1309);
                                                                                                            if v1086.0 == v1311.0 {
                                                                                                                if v1086.1 == v1311.1 {
                                                                                                                    let v1274 = constructor_spaceship_u(ctx, v91.0, v1086.0, v1086.1);
                                                                                                                    let v1275 = constructor_sextend_maybe(ctx, v2.0, v1274);
                                                                                                                    // Rule at src\opts\spaceship.isle line 68.
                                                                                                                    returns.extend(Some(v1275));
                                                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    &IntCC::UnsignedLessThan => {
                                                                                                        if v91.0 == v1305.0 {
                                                                                                            let v1086 = C::unpack_value_array_2(ctx, v1084);
                                                                                                            let v1311 = C::unpack_value_array_2(ctx, v1309);
                                                                                                            if v1086.0 == v1311.0 {
                                                                                                                if v1086.1 == v1311.1 {
                                                                                                                    let v1274 = constructor_spaceship_u(ctx, v91.0, v1086.0, v1086.1);
                                                                                                                    let v1275 = constructor_sextend_maybe(ctx, v2.0, v1274);
                                                                                                                    // Rule at src\opts\spaceship.isle line 58.
                                                                                                                    returns.extend(Some(v1275));
                                                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    _ => {}
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                let v1086 = C::unpack_value_array_2(ctx, v1084);
                                                if v86.1 == v1086.0 {
                                                    if v86.2 == v1086.1 {
                                                        let v1151 = constructor_umax(ctx, v2.0, v1086.0, v1086.1);
                                                        // Rule at src\opts\selects.isle line 27.
                                                        returns.extend(Some(v1151));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                                if v86.2 == v1086.0 {
                                                    if v86.1 == v1086.1 {
                                                        let v1153 = constructor_umin(ctx, v2.0, v1086.0, v1086.1);
                                                        // Rule at src\opts\selects.isle line 41.
                                                        returns.extend(Some(v1153));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                            &IntCC::UnsignedGreaterThanOrEqual => {
                                                let v1086 = C::unpack_value_array_2(ctx, v1084);
                                                if v86.1 == v1086.0 {
                                                    if v86.2 == v1086.1 {
                                                        let v1151 = constructor_umax(ctx, v2.0, v1086.0, v1086.1);
                                                        // Rule at src\opts\selects.isle line 28.
                                                        returns.extend(Some(v1151));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                                if v86.1 == v1086.1 {
                                                    if v86.2 == v1086.0 {
                                                        let v1153 = constructor_umin(ctx, v2.0, v1086.0, v1086.1);
                                                        // Rule at src\opts\selects.isle line 42.
                                                        returns.extend(Some(v1153));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                            &IntCC::UnsignedLessThan => {
                                                let mut v1137 = C::inst_data_value_tupled_etor_returns::default();
                                                C::inst_data_value_tupled_etor(ctx, v86.1, &mut v1137);
                                                let mut v1137 = v1137.into_context_iter();
                                                while let Some(v1138) = v1137.next(ctx) {
                                                    let v1139 = C::iconst_sextend_etor(ctx, v1138);
                                                    if let Some(v1140) = v1139 {
                                                        if v1140.1 == -1_i64 {
                                                            if v2.0 == v1140.0 {
                                                                let mut v1260 = C::uextend_maybe_etor_returns::default();
                                                                C::uextend_maybe_etor(ctx, v86.2, &mut v1260);
                                                                let mut v1260 = v1260.into_context_iter();
                                                                while let Some(v1261) = v1260.next(ctx) {
                                                                    if v2.0 == v1261.0 {
                                                                        let mut v1264 = C::inst_data_value_etor_returns::default();
                                                                        C::inst_data_value_etor(ctx, v1261.1, &mut v1264);
                                                                        let mut v1264 = v1264.into_context_iter();
                                                                        while let Some(v1265) = v1264.next(ctx) {
                                                                            if let &InstructionData::IntCompare {
                                                                                opcode: ref v1268,
                                                                                args: ref v1269,
                                                                                cond: ref v1270,
                                                                            } = &v1265.1 {
                                                                                if let &Opcode::Icmp = v1268 {
                                                                                    match v1270 {
                                                                                        &IntCC::NotEqual => {
                                                                                            if v91.0 == v1265.0 {
                                                                                                let v1086 = C::unpack_value_array_2(ctx, v1084);
                                                                                                let v1271 = C::unpack_value_array_2(ctx, v1269);
                                                                                                if v1086.0 == v1271.0 {
                                                                                                    if v1086.1 == v1271.1 {
                                                                                                        let v1274 = constructor_spaceship_u(ctx, v91.0, v1086.0, v1086.1);
                                                                                                        let v1275 = constructor_sextend_maybe(ctx, v2.0, v1274);
                                                                                                        // Rule at src\opts\spaceship.isle line 12.
                                                                                                        returns.extend(Some(v1275));
                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        &IntCC::UnsignedGreaterThan => {
                                                                                            if v91.0 == v1265.0 {
                                                                                                let v1086 = C::unpack_value_array_2(ctx, v1084);
                                                                                                let v1271 = C::unpack_value_array_2(ctx, v1269);
                                                                                                if v1086.0 == v1271.0 {
                                                                                                    if v1086.1 == v1271.1 {
                                                                                                        let v1274 = constructor_spaceship_u(ctx, v91.0, v1086.0, v1086.1);
                                                                                                        let v1275 = constructor_sextend_maybe(ctx, v2.0, v1274);
                                                                                                        // Rule at src\opts\spaceship.isle line 18.
                                                                                                        returns.extend(Some(v1275));
                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        _ => {}
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                let v1086 = C::unpack_value_array_2(ctx, v1084);
                                                if v86.1 == v1086.0 {
                                                    if v86.2 == v1086.1 {
                                                        let v1153 = constructor_umin(ctx, v2.0, v1086.0, v1086.1);
                                                        // Rule at src\opts\selects.isle line 31.
                                                        returns.extend(Some(v1153));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                                if v86.1 == v1086.1 {
                                                    if v86.2 == v1086.0 {
                                                        let v1151 = constructor_umax(ctx, v2.0, v1086.0, v1086.1);
                                                        // Rule at src\opts\selects.isle line 37.
                                                        returns.extend(Some(v1151));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                            &IntCC::UnsignedLessThanOrEqual => {
                                                let v1086 = C::unpack_value_array_2(ctx, v1084);
                                                if v86.1 == v1086.0 {
                                                    if v86.2 == v1086.1 {
                                                        let v1153 = constructor_umin(ctx, v2.0, v1086.0, v1086.1);
                                                        // Rule at src\opts\selects.isle line 32.
                                                        returns.extend(Some(v1153));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                                if v86.1 == v1086.1 {
                                                    if v86.2 == v1086.0 {
                                                        let v1151 = constructor_umax(ctx, v2.0, v1086.0, v1086.1);
                                                        // Rule at src\opts\selects.isle line 38.
                                                        returns.extend(Some(v1151));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                        let mut v96 = C::inst_data_value_etor_returns::default();
                                        C::inst_data_value_etor(ctx, v86.1, &mut v96);
                                        let mut v96 = v96.into_context_iter();
                                        while let Some(v97) = v96.next(ctx) {
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v1126,
                                                imm: v1127,
                                            } = &v97.1 {
                                                if let &Opcode::Iconst = v1126 {
                                                    let v1128 = C::u64_from_imm64(ctx, v1127);
                                                    match v1128 {
                                                        0x0_u64 => {
                                                            let mut v1099 = C::inst_data_value_etor_returns::default();
                                                            C::inst_data_value_etor(ctx, v86.2, &mut v1099);
                                                            let mut v1099 = v1099.into_context_iter();
                                                            while let Some(v1100) = v1099.next(ctx) {
                                                                if let &InstructionData::UnaryImm {
                                                                    opcode: ref v1129,
                                                                    imm: v1130,
                                                                } = &v1100.1 {
                                                                    if let &Opcode::Iconst = v1129 {
                                                                        let v1131 = C::u64_from_imm64(ctx, v1130);
                                                                        let v1132 = C::u64_is_zero(ctx, v1131);
                                                                        if v1132 == false {
                                                                            let v1133 = &C::intcc_complement(ctx, v1085);
                                                                            let v1086 = C::unpack_value_array_2(ctx, v1084);
                                                                            let v1134 = constructor_icmp(ctx, v91.0, v1133, v1086.0, v1086.1);
                                                                            let v1135 = constructor_select(ctx, v2.0, v1134, v86.2, v86.1);
                                                                            // Rule at src\opts\selects.isle line 8.
                                                                            returns.extend(Some(v1135));
                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        0x1_u64 => {
                                                            let mut v1099 = C::inst_data_value_etor_returns::default();
                                                            C::inst_data_value_etor(ctx, v86.2, &mut v1099);
                                                            let mut v1099 = v1099.into_context_iter();
                                                            while let Some(v1100) = v1099.next(ctx) {
                                                                if let &InstructionData::UnaryImm {
                                                                    opcode: ref v1129,
                                                                    imm: v1130,
                                                                } = &v1100.1 {
                                                                    if let &Opcode::Iconst = v1129 {
                                                                        let v1131 = C::u64_from_imm64(ctx, v1130);
                                                                        if v1131 == 0x0_u64 {
                                                                            let v1136 = constructor_uextend_maybe(ctx, v2.0, v86.0);
                                                                            // Rule at src\opts\selects.isle line 14.
                                                                            returns.extend(Some(v1136));
                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                        }
                                        let mut v1137 = C::inst_data_value_tupled_etor_returns::default();
                                        C::inst_data_value_tupled_etor(ctx, v86.1, &mut v1137);
                                        let mut v1137 = v1137.into_context_iter();
                                        while let Some(v1138) = v1137.next(ctx) {
                                            let v1139 = C::iconst_sextend_etor(ctx, v1138);
                                            if let Some(v1140) = v1139 {
                                                if v1140.1 == -1_i64 {
                                                    let mut v1143 = C::inst_data_value_tupled_etor_returns::default();
                                                    C::inst_data_value_tupled_etor(ctx, v86.2, &mut v1143);
                                                    let mut v1143 = v1143.into_context_iter();
                                                    while let Some(v1144) = v1143.next(ctx) {
                                                        let v1145 = C::iconst_sextend_etor(ctx, v1144);
                                                        if let Some(v1146) = v1145 {
                                                            if v1146.1 == 0_i64 {
                                                                let v1149 = constructor_bmask(ctx, v2.0, v86.0);
                                                                // Rule at src\opts\selects.isle line 19.
                                                                returns.extend(Some(v1149));
                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v94,
                                    arg: v95,
                                } => {
                                    if let &Opcode::Uextend = v94 {
                                        let mut v1020 = C::inst_data_value_etor_returns::default();
                                        C::inst_data_value_etor(ctx, v95, &mut v1020);
                                        let mut v1020 = v1020.into_context_iter();
                                        while let Some(v1021) = v1020.next(ctx) {
                                            if let &InstructionData::IntCompare {
                                                opcode: ref v1024,
                                                args: ref v1025,
                                                cond: ref v1026,
                                            } = &v1021.1 {
                                                if let &Opcode::Icmp = v1024 {
                                                    let v1030 = constructor_select(ctx, v2.0, v95, v86.1, v86.2);
                                                    // Rule at src\opts\icmp.isle line 76.
                                                    returns.extend(Some(v1030));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    // Rule at src\opts\icmp.isle line 79.
                                                    returns.extend(Some(v1030));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v631,
                                    imm: v632,
                                } => {
                                    if let &Opcode::Iconst = v631 {
                                        let v633 = C::u64_from_imm64(ctx, v632);
                                        if v633 == 0x0_u64 {
                                            let v636 = C::subsume(ctx, v86.2);
                                            // Rule at src\opts\cprop.isle line 169.
                                            returns.extend(Some(v636));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        let v634 = C::u64_is_zero(ctx, v633);
                                        if v634 == false {
                                            let v635 = C::subsume(ctx, v86.1);
                                            // Rule at src\opts\cprop.isle line 167.
                                            returns.extend(Some(v635));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v96 = C::inst_data_value_etor_returns::default();
                        C::inst_data_value_etor(ctx, v86.1, &mut v96);
                        let mut v96 = v96.into_context_iter();
                        while let Some(v97) = v96.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v100,
                                arg: v101,
                            } = &v97.1 {
                                match v100 {
                                    &Opcode::Uextend => {
                                        if v2.0 == v97.0 {
                                            let mut v1099 = C::inst_data_value_etor_returns::default();
                                            C::inst_data_value_etor(ctx, v86.2, &mut v1099);
                                            let mut v1099 = v1099.into_context_iter();
                                            while let Some(v1100) = v1099.next(ctx) {
                                                if let &InstructionData::Unary {
                                                    opcode: ref v1173,
                                                    arg: v1174,
                                                } = &v1100.1 {
                                                    if let &Opcode::Uextend = v1173 {
                                                        if v2.0 == v1100.0 {
                                                            let v1172 = C::value_type(ctx, v101);
                                                            let v1175 = C::value_type(ctx, v1174);
                                                            if v1172 == v1175 {
                                                                let v1176 = constructor_select(ctx, v1172, v86.0, v101, v1174);
                                                                let v1177 = constructor_uextend(ctx, v2.0, v1176);
                                                                // Rule at src\opts\selects.isle line 80.
                                                                returns.extend(Some(v1177));
                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    &Opcode::Sextend => {
                                        if v2.0 == v97.0 {
                                            let mut v1099 = C::inst_data_value_etor_returns::default();
                                            C::inst_data_value_etor(ctx, v86.2, &mut v1099);
                                            let mut v1099 = v1099.into_context_iter();
                                            while let Some(v1100) = v1099.next(ctx) {
                                                if let &InstructionData::Unary {
                                                    opcode: ref v1173,
                                                    arg: v1174,
                                                } = &v1100.1 {
                                                    if let &Opcode::Sextend = v1173 {
                                                        if v2.0 == v1100.0 {
                                                            let v1172 = C::value_type(ctx, v101);
                                                            let v1175 = C::value_type(ctx, v1174);
                                                            if v1172 == v1175 {
                                                                let v1176 = constructor_select(ctx, v1172, v86.0, v101, v1174);
                                                                let v1178 = constructor_sextend(ctx, v2.0, v1176);
                                                                // Rule at src\opts\selects.isle line 84.
                                                                returns.extend(Some(v1178));
                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        if v86.1 == v86.2 {
                            let v635 = C::subsume(ctx, v86.1);
                            // Rule at src\opts\selects.isle line 3.
                            returns.extend(Some(v635));
                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                        }
                        let mut v250 = ContextIterWrapper::<ConstructorVec<_>, _>::default();
                        constructor_truthy(ctx, v86.0, &mut v250);
                        let mut v250 = v250.into_context_iter();
                        while let Some(v251) = v250.next(ctx) {
                            let v252 = constructor_select(ctx, v2.0, v251, v86.1, v86.2);
                            // Rule at src\opts\bitops.isle line 117.
                            returns.extend(Some(v252));
                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                        }
                    }
                    &Opcode::SelectSpectreGuard => {
                        let v86 = C::unpack_value_array_3(ctx, v85);
                        let mut v90 = C::inst_data_value_etor_returns::default();
                        C::inst_data_value_etor(ctx, v86.0, &mut v90);
                        let mut v90 = v90.into_context_iter();
                        while let Some(v91) = v90.next(ctx) {
                            if let &InstructionData::UnaryImm {
                                opcode: ref v631,
                                imm: v632,
                            } = &v91.1 {
                                if let &Opcode::Iconst = v631 {
                                    let v633 = C::u64_from_imm64(ctx, v632);
                                    if v633 == 0x0_u64 {
                                        let v636 = C::subsume(ctx, v86.2);
                                        // Rule at src\opts\spectre.isle line 12.
                                        returns.extend(Some(v636));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                    let v634 = C::u64_is_zero(ctx, v633);
                                    if v634 == false {
                                        let v635 = C::subsume(ctx, v86.1);
                                        // Rule at src\opts\spectre.isle line 10.
                                        returns.extend(Some(v635));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                            }
                        }
                        if v86.1 == v86.2 {
                            let v635 = C::subsume(ctx, v86.1);
                            // Rule at src\opts\spectre.isle line 8.
                            returns.extend(Some(v635));
                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                        }
                    }
                    &Opcode::Bitselect => {
                        let v1154 = C::multi_lane(ctx, v2.0);
                        if let Some(v1155) = v1154 {
                            let v86 = C::unpack_value_array_3(ctx, v85);
                            let mut v90 = C::inst_data_value_etor_returns::default();
                            C::inst_data_value_etor(ctx, v86.0, &mut v90);
                            let mut v90 = v90.into_context_iter();
                            while let Some(v91) = v90.next(ctx) {
                                if let &InstructionData::IntCompare {
                                    opcode: ref v1083,
                                    args: ref v1084,
                                    cond: ref v1085,
                                } = &v91.1 {
                                    if let &Opcode::Icmp = v1083 {
                                        match v1085 {
                                            &IntCC::SignedGreaterThan => {
                                                let v1086 = C::unpack_value_array_2(ctx, v1084);
                                                if v86.1 == v1086.0 {
                                                    if v86.2 == v1086.1 {
                                                        let v1150 = constructor_smax(ctx, v2.0, v1086.0, v1086.1);
                                                        // Rule at src\opts\selects.isle line 45.
                                                        returns.extend(Some(v1150));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                                if v86.1 == v1086.1 {
                                                    if v86.2 == v1086.0 {
                                                        let v1152 = constructor_smin(ctx, v2.0, v1086.0, v1086.1);
                                                        // Rule at src\opts\selects.isle line 59.
                                                        returns.extend(Some(v1152));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                            &IntCC::SignedGreaterThanOrEqual => {
                                                let v1086 = C::unpack_value_array_2(ctx, v1084);
                                                if v86.1 == v1086.0 {
                                                    if v86.2 == v1086.1 {
                                                        let v1150 = constructor_smax(ctx, v2.0, v1086.0, v1086.1);
                                                        // Rule at src\opts\selects.isle line 46.
                                                        returns.extend(Some(v1150));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                                if v86.1 == v1086.1 {
                                                    if v86.2 == v1086.0 {
                                                        let v1152 = constructor_smin(ctx, v2.0, v1086.0, v1086.1);
                                                        // Rule at src\opts\selects.isle line 60.
                                                        returns.extend(Some(v1152));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                            &IntCC::SignedLessThan => {
                                                let v1086 = C::unpack_value_array_2(ctx, v1084);
                                                if v86.1 == v1086.0 {
                                                    if v86.2 == v1086.1 {
                                                        let v1152 = constructor_smin(ctx, v2.0, v1086.0, v1086.1);
                                                        // Rule at src\opts\selects.isle line 49.
                                                        returns.extend(Some(v1152));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                                if v86.1 == v1086.1 {
                                                    if v86.2 == v1086.0 {
                                                        let v1150 = constructor_smax(ctx, v2.0, v1086.0, v1086.1);
                                                        // Rule at src\opts\selects.isle line 55.
                                                        returns.extend(Some(v1150));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                            &IntCC::SignedLessThanOrEqual => {
                                                let v1086 = C::unpack_value_array_2(ctx, v1084);
                                                if v86.1 == v1086.0 {
                                                    if v86.2 == v1086.1 {
                                                        let v1152 = constructor_smin(ctx, v2.0, v1086.0, v1086.1);
                                                        // Rule at src\opts\selects.isle line 50.
                                                        returns.extend(Some(v1152));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                                if v86.1 == v1086.1 {
                                                    if v86.2 == v1086.0 {
                                                        let v1150 = constructor_smax(ctx, v2.0, v1086.0, v1086.1);
                                                        // Rule at src\opts\selects.isle line 56.
                                                        returns.extend(Some(v1150));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                            &IntCC::UnsignedGreaterThan => {
                                                let v1086 = C::unpack_value_array_2(ctx, v1084);
                                                if v86.1 == v1086.0 {
                                                    if v86.2 == v1086.1 {
                                                        let v1151 = constructor_umax(ctx, v2.0, v1086.0, v1086.1);
                                                        // Rule at src\opts\selects.isle line 47.
                                                        returns.extend(Some(v1151));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                                if v86.1 == v1086.1 {
                                                    if v86.2 == v1086.0 {
                                                        let v1153 = constructor_umin(ctx, v2.0, v1086.0, v1086.1);
                                                        // Rule at src\opts\selects.isle line 61.
                                                        returns.extend(Some(v1153));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                            &IntCC::UnsignedGreaterThanOrEqual => {
                                                let v1086 = C::unpack_value_array_2(ctx, v1084);
                                                if v86.1 == v1086.0 {
                                                    if v86.2 == v1086.1 {
                                                        let v1151 = constructor_umax(ctx, v2.0, v1086.0, v1086.1);
                                                        // Rule at src\opts\selects.isle line 48.
                                                        returns.extend(Some(v1151));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                                if v86.1 == v1086.1 {
                                                    if v86.2 == v1086.0 {
                                                        let v1153 = constructor_umin(ctx, v2.0, v1086.0, v1086.1);
                                                        // Rule at src\opts\selects.isle line 62.
                                                        returns.extend(Some(v1153));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                            &IntCC::UnsignedLessThan => {
                                                let v1086 = C::unpack_value_array_2(ctx, v1084);
                                                if v86.1 == v1086.0 {
                                                    if v86.2 == v1086.1 {
                                                        let v1153 = constructor_umin(ctx, v2.0, v1086.0, v1086.1);
                                                        // Rule at src\opts\selects.isle line 51.
                                                        returns.extend(Some(v1153));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                                if v86.1 == v1086.1 {
                                                    if v86.2 == v1086.0 {
                                                        let v1151 = constructor_umax(ctx, v2.0, v1086.0, v1086.1);
                                                        // Rule at src\opts\selects.isle line 57.
                                                        returns.extend(Some(v1151));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                            &IntCC::UnsignedLessThanOrEqual => {
                                                let v1086 = C::unpack_value_array_2(ctx, v1084);
                                                if v86.1 == v1086.0 {
                                                    if v86.2 == v1086.1 {
                                                        let v1153 = constructor_umin(ctx, v2.0, v1086.0, v1086.1);
                                                        // Rule at src\opts\selects.isle line 52.
                                                        returns.extend(Some(v1153));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                                if v86.1 == v1086.1 {
                                                    if v86.2 == v1086.0 {
                                                        let v1151 = constructor_umax(ctx, v2.0, v1086.0, v1086.1);
                                                        // Rule at src\opts\selects.isle line 58.
                                                        returns.extend(Some(v1151));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                        }
                        let v86 = C::unpack_value_array_3(ctx, v85);
                        if v86.1 == v86.2 {
                            let v635 = C::subsume(ctx, v86.1);
                            // Rule at src\opts\selects.isle line 4.
                            returns.extend(Some(v635));
                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                        }
                    }
                    &Opcode::Fma => {
                        let v86 = C::unpack_value_array_3(ctx, v85);
                        let mut v90 = C::inst_data_value_etor_returns::default();
                        C::inst_data_value_etor(ctx, v86.0, &mut v90);
                        let mut v90 = v90.into_context_iter();
                        while let Some(v91) = v90.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v94,
                                arg: v95,
                            } = &v91.1 {
                                if let &Opcode::Fneg = v94 {
                                    if v2.0 == v91.0 {
                                        let mut v96 = C::inst_data_value_etor_returns::default();
                                        C::inst_data_value_etor(ctx, v86.1, &mut v96);
                                        let mut v96 = v96.into_context_iter();
                                        while let Some(v97) = v96.next(ctx) {
                                            if let &InstructionData::Unary {
                                                opcode: ref v100,
                                                arg: v101,
                                            } = &v97.1 {
                                                if let &Opcode::Fneg = v100 {
                                                    if v2.0 == v97.0 {
                                                        let v102 = constructor_fma(ctx, v2.0, v95, v101, v86.2);
                                                        // Rule at src\opts\arithmetic.isle line 102.
                                                        returns.extend(Some(v102));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    _ => {}
                }
            }
            &InstructionData::Unary {
                opcode: ref v32,
                arg: v33,
            } => {
                match v32 {
                    &Opcode::Splat => {
                        let mut v34 = C::inst_data_value_etor_returns::default();
                        C::inst_data_value_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            match &v35.1 {
                                &InstructionData::UnaryIeee32 {
                                    opcode: ref v691,
                                    imm: v692,
                                } => {
                                    if let &Opcode::F32const = v691 {
                                        let v693 = C::u32_from_ieee32(ctx, v692);
                                        let v694 = C::u32_as_u64(ctx, v693);
                                        let v695 = constructor_splat32(ctx, v694);
                                        let v696 = constructor_vconst(ctx, v2.0, v695);
                                        // Rule at src\opts\cprop.isle line 210.
                                        returns.extend(Some(v696));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                                &InstructionData::UnaryIeee64 {
                                    opcode: ref v697,
                                    imm: v698,
                                } => {
                                    if let &Opcode::F64const = v697 {
                                        let v699 = C::u64_from_ieee64(ctx, v698);
                                        let v700 = C::splat64(ctx, v699);
                                        let v701 = constructor_vconst(ctx, v2.0, v700);
                                        // Rule at src\opts\cprop.isle line 212.
                                        returns.extend(Some(v701));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v552,
                                    imm: v553,
                                } => {
                                    if let &Opcode::Iconst = v552 {
                                        match v35.0 {
                                            I8 => {
                                                let v676 = C::u64_uextend_imm64(ctx, I8, v553);
                                                let v677 = constructor_splat8(ctx, v676);
                                                let v678 = constructor_vconst(ctx, v2.0, v677);
                                                // Rule at src\opts\cprop.isle line 202.
                                                returns.extend(Some(v678));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                            I16 => {
                                                let v680 = C::u64_uextend_imm64(ctx, I16, v553);
                                                let v681 = constructor_splat16(ctx, v680);
                                                let v682 = constructor_vconst(ctx, v2.0, v681);
                                                // Rule at src\opts\cprop.isle line 204.
                                                returns.extend(Some(v682));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                            I32 => {
                                                let v684 = C::u64_uextend_imm64(ctx, I32, v553);
                                                let v685 = constructor_splat32(ctx, v684);
                                                let v686 = constructor_vconst(ctx, v2.0, v685);
                                                // Rule at src\opts\cprop.isle line 206.
                                                returns.extend(Some(v686));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                            I64 => {
                                                let v688 = C::u64_uextend_imm64(ctx, I64, v553);
                                                let v689 = C::splat64(ctx, v688);
                                                let v690 = constructor_vconst(ctx, v2.0, v689);
                                                // Rule at src\opts\cprop.isle line 208.
                                                returns.extend(Some(v690));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    &Opcode::Ineg => {
                        let mut v34 = C::inst_data_value_etor_returns::default();
                        C::inst_data_value_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            match &v35.1 {
                                &InstructionData::Binary {
                                    opcode: ref v38,
                                    args: ref v39,
                                } => {
                                    match v38 {
                                        &Opcode::Isub => {
                                            if v2.0 == v35.0 {
                                                let v40 = C::unpack_value_array_2(ctx, v39);
                                                let v43 = constructor_isub(ctx, v2.0, v40.1, v40.0);
                                                // Rule at src\opts\arithmetic.isle line 27.
                                                returns.extend(Some(v43));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                        &Opcode::Ushr => {
                                            if v2.0 == v35.0 {
                                                let v40 = C::unpack_value_array_2(ctx, v39);
                                                let mut v1204 = C::inst_data_value_etor_returns::default();
                                                C::inst_data_value_etor(ctx, v40.1, &mut v1204);
                                                let mut v1204 = v1204.into_context_iter();
                                                while let Some(v1205) = v1204.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v1208,
                                                        imm: v1209,
                                                    } = &v1205.1 {
                                                        if let &Opcode::Iconst = v1208 {
                                                            let v1210 = C::u64_from_imm64(ctx, v1209);
                                                            let v235 = constructor_ty_shift_mask(ctx, v2.0);
                                                            let v1211 = C::u64_eq(ctx, v1210, v235);
                                                            if v1211 == true {
                                                                if v2.0 == v1205.0 {
                                                                    let v1212 = constructor_sshr(ctx, v2.0, v40.0, v40.1);
                                                                    // Rule at src\opts\shifts.isle line 98.
                                                                    returns.extend(Some(v1212));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v45,
                                    arg: v46,
                                } => {
                                    match v45 {
                                        &Opcode::Splat => {
                                            if v2.0 == v35.0 {
                                                let v1228 = C::lane_type(ctx, v2.0);
                                                let v1366 = constructor_ineg(ctx, v1228, v46);
                                                let v1367 = constructor_splat(ctx, v2.0, v1366);
                                                // Rule at src\opts\vector.isle line 45.
                                                returns.extend(Some(v1367));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                        &Opcode::Ineg => {
                                            if v2.0 == v35.0 {
                                                let v47 = C::subsume(ctx, v46);
                                                // Rule at src\opts\arithmetic.isle line 34.
                                                returns.extend(Some(v47));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    &Opcode::Iabs => {
                        let mut v34 = C::inst_data_value_etor_returns::default();
                        C::inst_data_value_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v45,
                                arg: v46,
                            } = &v35.1 {
                                match v45 {
                                    &Opcode::Splat => {
                                        if v2.0 == v35.0 {
                                            let v1228 = C::lane_type(ctx, v2.0);
                                            let v1368 = constructor_iabs(ctx, v1228, v46);
                                            let v1369 = constructor_splat(ctx, v2.0, v1368);
                                            // Rule at src\opts\vector.isle line 48.
                                            returns.extend(Some(v1369));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                    }
                                    &Opcode::Ineg => {
                                        if v2.0 == v35.0 {
                                            let v50 = constructor_iabs(ctx, v2.0, v46);
                                            // Rule at src\opts\arithmetic.isle line 41.
                                            returns.extend(Some(v50));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                    }
                                    &Opcode::Iabs => {
                                        if v2.0 == v35.0 {
                                            let v51 = C::subsume(ctx, v33);
                                            // Rule at src\opts\arithmetic.isle line 45.
                                            returns.extend(Some(v51));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                    }
                    &Opcode::Bnot => {
                        let mut v34 = C::inst_data_value_etor_returns::default();
                        C::inst_data_value_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            match &v35.1 {
                                &InstructionData::Binary {
                                    opcode: ref v38,
                                    args: ref v39,
                                } => {
                                    match v38 {
                                        &Opcode::Iadd => {
                                            if v2.0 == v35.0 {
                                                let v40 = C::unpack_value_array_2(ctx, v39);
                                                let mut v66 = C::inst_data_value_tupled_etor_returns::default();
                                                C::inst_data_value_tupled_etor(ctx, v40.1, &mut v66);
                                                let mut v66 = v66.into_context_iter();
                                                while let Some(v67) = v66.next(ctx) {
                                                    let v68 = C::iconst_sextend_etor(ctx, v67);
                                                    if let Some(v69) = v68 {
                                                        if v69.1 == -1_i64 {
                                                            if v2.0 == v69.0 {
                                                                let v72 = constructor_ineg(ctx, v2.0, v40.0);
                                                                // Rule at src\opts\arithmetic.isle line 74.
                                                                returns.extend(Some(v72));
                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Isub => {
                                            if v2.0 == v35.0 {
                                                let v40 = C::unpack_value_array_2(ctx, v39);
                                                let mut v66 = C::inst_data_value_tupled_etor_returns::default();
                                                C::inst_data_value_tupled_etor(ctx, v40.1, &mut v66);
                                                let mut v66 = v66.into_context_iter();
                                                while let Some(v67) = v66.next(ctx) {
                                                    let v68 = C::iconst_sextend_etor(ctx, v67);
                                                    if let Some(v69) = v68 {
                                                        if v69.1 == 1_i64 {
                                                            if v2.0 == v69.0 {
                                                                let v72 = constructor_ineg(ctx, v2.0, v40.0);
                                                                // Rule at src\opts\arithmetic.isle line 72.
                                                                returns.extend(Some(v72));
                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Band => {
                                            let v40 = C::unpack_value_array_2(ctx, v39);
                                            let v220 = constructor_bnot(ctx, v2.0, v40.0);
                                            let v221 = constructor_bnot(ctx, v2.0, v40.1);
                                            let v223 = constructor_bor(ctx, v2.0, v220, v221);
                                            // Rule at src\opts\bitops.isle line 45.
                                            returns.extend(Some(v223));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        &Opcode::Bor => {
                                            if v2.0 == v35.0 {
                                                let v40 = C::unpack_value_array_2(ctx, v39);
                                                let v220 = constructor_bnot(ctx, v2.0, v40.0);
                                                let v221 = constructor_bnot(ctx, v2.0, v40.1);
                                                let v222 = constructor_band(ctx, v2.0, v220, v221);
                                                // Rule at src\opts\bitops.isle line 42.
                                                returns.extend(Some(v222));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v45,
                                    arg: v46,
                                } => {
                                    match v45 {
                                        &Opcode::Splat => {
                                            let v1346 = C::ty_vector_not_float(ctx, v2.0);
                                            if let Some(v1347) = v1346 {
                                                if v2.0 == v35.0 {
                                                    let v1228 = C::lane_type(ctx, v2.0);
                                                    let v1354 = constructor_bnot(ctx, v1228, v46);
                                                    let v1355 = constructor_splat(ctx, v2.0, v1354);
                                                    // Rule at src\opts\vector.isle line 26.
                                                    returns.extend(Some(v1355));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                        }
                                        &Opcode::Bnot => {
                                            if v2.0 == v35.0 {
                                                let v47 = C::subsume(ctx, v46);
                                                // Rule at src\opts\bitops.isle line 38.
                                                returns.extend(Some(v47));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v552,
                                    imm: v553,
                                } => {
                                    if let &Opcode::Iconst = v552 {
                                        let v526 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v527) = v526 {
                                            if v35.0 == v527 {
                                                let v554 = C::u64_from_imm64(ctx, v553);
                                                let v555 = C::u64_not(ctx, v554);
                                                let v556 = C::imm64_masked(ctx, v527, v555);
                                                let v557 = constructor_iconst(ctx, v527, v556);
                                                let v558 = C::subsume(ctx, v557);
                                                // Rule at src\opts\cprop.isle line 50.
                                                returns.extend(Some(v558));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v1119 = C::remat(ctx, arg0);
                        // Rule at src\opts\remat.isle line 23.
                        returns.extend(Some(v1119));
                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                    }
                    &Opcode::Bitrev => {
                        let mut v34 = C::inst_data_value_etor_returns::default();
                        C::inst_data_value_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v45,
                                arg: v46,
                            } = &v35.1 {
                                if let &Opcode::Bitrev = v45 {
                                    if v2.0 == v35.0 {
                                        let v47 = C::subsume(ctx, v46);
                                        // Rule at src\opts\bitops.isle line 136.
                                        returns.extend(Some(v47));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Bswap => {
                        let mut v34 = C::inst_data_value_etor_returns::default();
                        C::inst_data_value_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            match &v35.1 {
                                &InstructionData::Unary {
                                    opcode: ref v45,
                                    arg: v46,
                                } => {
                                    if let &Opcode::Bswap = v45 {
                                        if v2.0 == v35.0 {
                                            let v47 = C::subsume(ctx, v46);
                                            // Rule at src\opts\bitops.isle line 133.
                                            returns.extend(Some(v47));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v552,
                                    imm: v553,
                                } => {
                                    if let &Opcode::Iconst = v552 {
                                        match v2.0 {
                                            I16 => {
                                                let v554 = C::u64_from_imm64(ctx, v553);
                                                let v735 = C::u64_bswap16(ctx, v554);
                                                let v736 = C::imm64(ctx, v735);
                                                let v737 = constructor_iconst(ctx, I16, v736);
                                                let v738 = C::subsume(ctx, v737);
                                                // Rule at src\opts\cprop.isle line 282.
                                                returns.extend(Some(v738));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                            I32 => {
                                                let v554 = C::u64_from_imm64(ctx, v553);
                                                let v739 = C::u64_bswap32(ctx, v554);
                                                let v740 = C::imm64(ctx, v739);
                                                let v741 = constructor_iconst(ctx, I32, v740);
                                                let v742 = C::subsume(ctx, v741);
                                                // Rule at src\opts\cprop.isle line 284.
                                                returns.extend(Some(v742));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                            I64 => {
                                                let v554 = C::u64_from_imm64(ctx, v553);
                                                let v743 = C::u64_bswap64(ctx, v554);
                                                let v744 = C::imm64(ctx, v743);
                                                let v745 = constructor_iconst(ctx, I64, v744);
                                                let v746 = C::subsume(ctx, v745);
                                                // Rule at src\opts\cprop.isle line 286.
                                                returns.extend(Some(v746));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    &Opcode::Popcnt => {
                        let mut v34 = C::inst_data_value_etor_returns::default();
                        C::inst_data_value_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v45,
                                arg: v46,
                            } = &v35.1 {
                                if let &Opcode::Splat = v45 {
                                    if v2.0 == v35.0 {
                                        let v1228 = C::lane_type(ctx, v2.0);
                                        let v1370 = constructor_popcnt(ctx, v1228, v46);
                                        let v1371 = constructor_splat(ctx, v2.0, v1370);
                                        // Rule at src\opts\vector.isle line 51.
                                        returns.extend(Some(v1371));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Sqrt => {
                        match v2.0 {
                            F32 => {
                                let mut v34 = C::inst_data_value_etor_returns::default();
                                C::inst_data_value_etor(ctx, v33, &mut v34);
                                let mut v34 = v34.into_context_iter();
                                while let Some(v35) = v34.next(ctx) {
                                    if v35.0 == F32 {
                                        if let &InstructionData::UnaryIeee32 {
                                            opcode: ref v691,
                                            imm: v692,
                                        } = &v35.1 {
                                            if let &Opcode::F32const = v691 {
                                                let v787 = C::f32_sqrt(ctx, v692);
                                                if let Some(v788) = v787 {
                                                    let v789 = constructor_f32const(ctx, F32, v788);
                                                    let v790 = C::subsume(ctx, v789);
                                                    // Rule at src\opts\cprop.isle line 333.
                                                    returns.extend(Some(v790));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            F64 => {
                                let mut v34 = C::inst_data_value_etor_returns::default();
                                C::inst_data_value_etor(ctx, v33, &mut v34);
                                let mut v34 = v34.into_context_iter();
                                while let Some(v35) = v34.next(ctx) {
                                    if v35.0 == F64 {
                                        if let &InstructionData::UnaryIeee64 {
                                            opcode: ref v697,
                                            imm: v698,
                                        } = &v35.1 {
                                            if let &Opcode::F64const = v697 {
                                                let v791 = C::f64_sqrt(ctx, v698);
                                                if let Some(v792) = v791 {
                                                    let v793 = constructor_f64const(ctx, F64, v792);
                                                    let v794 = C::subsume(ctx, v793);
                                                    // Rule at src\opts\cprop.isle line 336.
                                                    returns.extend(Some(v794));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                    }
                    &Opcode::Fneg => {
                        let mut v34 = C::inst_data_value_etor_returns::default();
                        C::inst_data_value_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            match &v35.1 {
                                &InstructionData::Unary {
                                    opcode: ref v45,
                                    arg: v46,
                                } => {
                                    if let &Opcode::Fneg = v45 {
                                        if v2.0 == v35.0 {
                                            let v47 = C::subsume(ctx, v46);
                                            // Rule at src\opts\arithmetic.isle line 98.
                                            returns.extend(Some(v47));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                    }
                                }
                                &InstructionData::UnaryConst {
                                    opcode: ref v886,
                                    constant_handle: v887,
                                } => {
                                    if let &Opcode::F128const = v886 {
                                        if v2.0 == F128 {
                                            if v35.0 == F128 {
                                                let v888 = C::ieee128_constant_extractor(ctx, v887);
                                                if let Some(v889) = v888 {
                                                    let v890 = C::f128_neg(ctx, v889);
                                                    let v891 = C::ieee128_constant(ctx, v890);
                                                    let v892 = constructor_f128const(ctx, F128, v891);
                                                    let v893 = C::subsume(ctx, v892);
                                                    // Rule at src\opts\cprop.isle line 400.
                                                    returns.extend(Some(v893));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::UnaryIeee16 {
                                    opcode: ref v875,
                                    imm: v876,
                                } => {
                                    if let &Opcode::F16const = v875 {
                                        if v2.0 == F16 {
                                            if v35.0 == F16 {
                                                let v877 = C::f16_neg(ctx, v876);
                                                let v878 = constructor_f16const(ctx, F16, v877);
                                                let v879 = C::subsume(ctx, v878);
                                                // Rule at src\opts\cprop.isle line 394.
                                                returns.extend(Some(v879));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::UnaryIeee32 {
                                    opcode: ref v691,
                                    imm: v692,
                                } => {
                                    if let &Opcode::F32const = v691 {
                                        if v2.0 == F32 {
                                            if v35.0 == F32 {
                                                let v880 = C::f32_neg(ctx, v692);
                                                let v881 = constructor_f32const(ctx, F32, v880);
                                                let v882 = C::subsume(ctx, v881);
                                                // Rule at src\opts\cprop.isle line 396.
                                                returns.extend(Some(v882));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::UnaryIeee64 {
                                    opcode: ref v697,
                                    imm: v698,
                                } => {
                                    if let &Opcode::F64const = v697 {
                                        if v2.0 == F64 {
                                            if v35.0 == F64 {
                                                let v883 = C::f64_neg(ctx, v698);
                                                let v884 = constructor_f64const(ctx, F64, v883);
                                                let v885 = C::subsume(ctx, v884);
                                                // Rule at src\opts\cprop.isle line 398.
                                                returns.extend(Some(v885));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    &Opcode::Fabs => {
                        match v2.0 {
                            F16 => {
                                let mut v34 = C::inst_data_value_etor_returns::default();
                                C::inst_data_value_etor(ctx, v33, &mut v34);
                                let mut v34 = v34.into_context_iter();
                                while let Some(v35) = v34.next(ctx) {
                                    if v35.0 == F16 {
                                        if let &InstructionData::UnaryIeee16 {
                                            opcode: ref v875,
                                            imm: v876,
                                        } = &v35.1 {
                                            if let &Opcode::F16const = v875 {
                                                let v894 = C::f16_abs(ctx, v876);
                                                let v895 = constructor_f16const(ctx, F16, v894);
                                                let v896 = C::subsume(ctx, v895);
                                                // Rule at src\opts\cprop.isle line 403.
                                                returns.extend(Some(v896));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                    }
                                }
                            }
                            F32 => {
                                let mut v34 = C::inst_data_value_etor_returns::default();
                                C::inst_data_value_etor(ctx, v33, &mut v34);
                                let mut v34 = v34.into_context_iter();
                                while let Some(v35) = v34.next(ctx) {
                                    if v35.0 == F32 {
                                        if let &InstructionData::UnaryIeee32 {
                                            opcode: ref v691,
                                            imm: v692,
                                        } = &v35.1 {
                                            if let &Opcode::F32const = v691 {
                                                let v897 = C::f32_abs(ctx, v692);
                                                let v898 = constructor_f32const(ctx, F32, v897);
                                                let v899 = C::subsume(ctx, v898);
                                                // Rule at src\opts\cprop.isle line 405.
                                                returns.extend(Some(v899));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                    }
                                }
                            }
                            F64 => {
                                let mut v34 = C::inst_data_value_etor_returns::default();
                                C::inst_data_value_etor(ctx, v33, &mut v34);
                                let mut v34 = v34.into_context_iter();
                                while let Some(v35) = v34.next(ctx) {
                                    if v35.0 == F64 {
                                        if let &InstructionData::UnaryIeee64 {
                                            opcode: ref v697,
                                            imm: v698,
                                        } = &v35.1 {
                                            if let &Opcode::F64const = v697 {
                                                let v900 = C::f64_abs(ctx, v698);
                                                let v901 = constructor_f64const(ctx, F64, v900);
                                                let v902 = C::subsume(ctx, v901);
                                                // Rule at src\opts\cprop.isle line 407.
                                                returns.extend(Some(v902));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                    }
                                }
                            }
                            F128 => {
                                let mut v34 = C::inst_data_value_etor_returns::default();
                                C::inst_data_value_etor(ctx, v33, &mut v34);
                                let mut v34 = v34.into_context_iter();
                                while let Some(v35) = v34.next(ctx) {
                                    if v35.0 == F128 {
                                        if let &InstructionData::UnaryConst {
                                            opcode: ref v886,
                                            constant_handle: v887,
                                        } = &v35.1 {
                                            if let &Opcode::F128const = v886 {
                                                let v888 = C::ieee128_constant_extractor(ctx, v887);
                                                if let Some(v889) = v888 {
                                                    let v903 = C::f128_abs(ctx, v889);
                                                    let v904 = C::ieee128_constant(ctx, v903);
                                                    let v905 = constructor_f128const(ctx, F128, v904);
                                                    let v906 = C::subsume(ctx, v905);
                                                    // Rule at src\opts\cprop.isle line 409.
                                                    returns.extend(Some(v906));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                    }
                    &Opcode::Ceil => {
                        match v2.0 {
                            F32 => {
                                let mut v34 = C::inst_data_value_etor_returns::default();
                                C::inst_data_value_etor(ctx, v33, &mut v34);
                                let mut v34 = v34.into_context_iter();
                                while let Some(v35) = v34.next(ctx) {
                                    if v35.0 == F32 {
                                        if let &InstructionData::UnaryIeee32 {
                                            opcode: ref v691,
                                            imm: v692,
                                        } = &v35.1 {
                                            if let &Opcode::F32const = v691 {
                                                let v795 = C::f32_ceil(ctx, v692);
                                                if let Some(v796) = v795 {
                                                    let v797 = constructor_f32const(ctx, F32, v796);
                                                    let v798 = C::subsume(ctx, v797);
                                                    // Rule at src\opts\cprop.isle line 340.
                                                    returns.extend(Some(v798));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            F64 => {
                                let mut v34 = C::inst_data_value_etor_returns::default();
                                C::inst_data_value_etor(ctx, v33, &mut v34);
                                let mut v34 = v34.into_context_iter();
                                while let Some(v35) = v34.next(ctx) {
                                    if v35.0 == F64 {
                                        if let &InstructionData::UnaryIeee64 {
                                            opcode: ref v697,
                                            imm: v698,
                                        } = &v35.1 {
                                            if let &Opcode::F64const = v697 {
                                                let v799 = C::f64_ceil(ctx, v698);
                                                if let Some(v800) = v799 {
                                                    let v801 = constructor_f64const(ctx, F64, v800);
                                                    let v802 = C::subsume(ctx, v801);
                                                    // Rule at src\opts\cprop.isle line 343.
                                                    returns.extend(Some(v802));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                    }
                    &Opcode::Floor => {
                        match v2.0 {
                            F32 => {
                                let mut v34 = C::inst_data_value_etor_returns::default();
                                C::inst_data_value_etor(ctx, v33, &mut v34);
                                let mut v34 = v34.into_context_iter();
                                while let Some(v35) = v34.next(ctx) {
                                    if v35.0 == F32 {
                                        if let &InstructionData::UnaryIeee32 {
                                            opcode: ref v691,
                                            imm: v692,
                                        } = &v35.1 {
                                            if let &Opcode::F32const = v691 {
                                                let v803 = C::f32_floor(ctx, v692);
                                                if let Some(v804) = v803 {
                                                    let v805 = constructor_f32const(ctx, F32, v804);
                                                    let v806 = C::subsume(ctx, v805);
                                                    // Rule at src\opts\cprop.isle line 347.
                                                    returns.extend(Some(v806));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            F64 => {
                                let mut v34 = C::inst_data_value_etor_returns::default();
                                C::inst_data_value_etor(ctx, v33, &mut v34);
                                let mut v34 = v34.into_context_iter();
                                while let Some(v35) = v34.next(ctx) {
                                    if v35.0 == F64 {
                                        if let &InstructionData::UnaryIeee64 {
                                            opcode: ref v697,
                                            imm: v698,
                                        } = &v35.1 {
                                            if let &Opcode::F64const = v697 {
                                                let v807 = C::f64_floor(ctx, v698);
                                                if let Some(v808) = v807 {
                                                    let v809 = constructor_f64const(ctx, F64, v808);
                                                    let v810 = C::subsume(ctx, v809);
                                                    // Rule at src\opts\cprop.isle line 350.
                                                    returns.extend(Some(v810));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                    }
                    &Opcode::Trunc => {
                        match v2.0 {
                            F32 => {
                                let mut v34 = C::inst_data_value_etor_returns::default();
                                C::inst_data_value_etor(ctx, v33, &mut v34);
                                let mut v34 = v34.into_context_iter();
                                while let Some(v35) = v34.next(ctx) {
                                    if v35.0 == F32 {
                                        if let &InstructionData::UnaryIeee32 {
                                            opcode: ref v691,
                                            imm: v692,
                                        } = &v35.1 {
                                            if let &Opcode::F32const = v691 {
                                                let v811 = C::f32_trunc(ctx, v692);
                                                if let Some(v812) = v811 {
                                                    let v813 = constructor_f32const(ctx, F32, v812);
                                                    let v814 = C::subsume(ctx, v813);
                                                    // Rule at src\opts\cprop.isle line 354.
                                                    returns.extend(Some(v814));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            F64 => {
                                let mut v34 = C::inst_data_value_etor_returns::default();
                                C::inst_data_value_etor(ctx, v33, &mut v34);
                                let mut v34 = v34.into_context_iter();
                                while let Some(v35) = v34.next(ctx) {
                                    if v35.0 == F64 {
                                        if let &InstructionData::UnaryIeee64 {
                                            opcode: ref v697,
                                            imm: v698,
                                        } = &v35.1 {
                                            if let &Opcode::F64const = v697 {
                                                let v815 = C::f64_trunc(ctx, v698);
                                                if let Some(v816) = v815 {
                                                    let v817 = constructor_f64const(ctx, F64, v816);
                                                    let v818 = C::subsume(ctx, v817);
                                                    // Rule at src\opts\cprop.isle line 357.
                                                    returns.extend(Some(v818));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                    }
                    &Opcode::Nearest => {
                        match v2.0 {
                            F32 => {
                                let mut v34 = C::inst_data_value_etor_returns::default();
                                C::inst_data_value_etor(ctx, v33, &mut v34);
                                let mut v34 = v34.into_context_iter();
                                while let Some(v35) = v34.next(ctx) {
                                    if v35.0 == F32 {
                                        if let &InstructionData::UnaryIeee32 {
                                            opcode: ref v691,
                                            imm: v692,
                                        } = &v35.1 {
                                            if let &Opcode::F32const = v691 {
                                                let v819 = C::f32_nearest(ctx, v692);
                                                if let Some(v820) = v819 {
                                                    let v821 = constructor_f32const(ctx, F32, v820);
                                                    let v822 = C::subsume(ctx, v821);
                                                    // Rule at src\opts\cprop.isle line 361.
                                                    returns.extend(Some(v822));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            F64 => {
                                let mut v34 = C::inst_data_value_etor_returns::default();
                                C::inst_data_value_etor(ctx, v33, &mut v34);
                                let mut v34 = v34.into_context_iter();
                                while let Some(v35) = v34.next(ctx) {
                                    if v35.0 == F64 {
                                        if let &InstructionData::UnaryIeee64 {
                                            opcode: ref v697,
                                            imm: v698,
                                        } = &v35.1 {
                                            if let &Opcode::F64const = v697 {
                                                let v823 = C::f64_nearest(ctx, v698);
                                                if let Some(v824) = v823 {
                                                    let v825 = constructor_f64const(ctx, F64, v824);
                                                    let v826 = C::subsume(ctx, v825);
                                                    // Rule at src\opts\cprop.isle line 364.
                                                    returns.extend(Some(v826));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                    }
                    &Opcode::Bmask => {
                        if v2.0 == I8 {
                            let mut v34 = C::inst_data_value_etor_returns::default();
                            C::inst_data_value_etor(ctx, v33, &mut v34);
                            let mut v34 = v34.into_context_iter();
                            while let Some(v35) = v34.next(ctx) {
                                if v35.0 == I8 {
                                    if let &InstructionData::IntCompare {
                                        opcode: ref v239,
                                        args: ref v240,
                                        cond: ref v241,
                                    } = &v35.1 {
                                        if let &Opcode::Icmp = v239 {
                                            let v246 = constructor_ineg(ctx, I8, v33);
                                            // Rule at src\opts\bitops.isle line 94.
                                            returns.extend(Some(v246));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                    }
                                }
                            }
                        }
                        let mut v247 = ContextIterWrapper::<ConstructorVec<_>, _>::default();
                        constructor_truthy(ctx, v33, &mut v247);
                        let mut v247 = v247.into_context_iter();
                        while let Some(v248) = v247.next(ctx) {
                            let v249 = constructor_bmask(ctx, v2.0, v248);
                            // Rule at src\opts\bitops.isle line 116.
                            returns.extend(Some(v249));
                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                        }
                    }
                    &Opcode::Ireduce => {
                        let mut v34 = C::inst_data_value_etor_returns::default();
                        C::inst_data_value_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            match &v35.1 {
                                &InstructionData::Binary {
                                    opcode: ref v38,
                                    args: ref v39,
                                } => {
                                    match v38 {
                                        &Opcode::Iadd => {
                                            let v40 = C::unpack_value_array_2(ctx, v39);
                                            let v968 = constructor_ireduce(ctx, v2.0, v40.0);
                                            let v969 = constructor_ireduce(ctx, v2.0, v40.1);
                                            let v970 = constructor_iadd(ctx, v2.0, v968, v969);
                                            // Rule at src\opts\extends.isle line 85.
                                            returns.extend(Some(v970));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        &Opcode::Isub => {
                                            let v40 = C::unpack_value_array_2(ctx, v39);
                                            let v968 = constructor_ireduce(ctx, v2.0, v40.0);
                                            let v969 = constructor_ireduce(ctx, v2.0, v40.1);
                                            let v971 = constructor_isub(ctx, v2.0, v968, v969);
                                            // Rule at src\opts\extends.isle line 86.
                                            returns.extend(Some(v971));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        &Opcode::Imul => {
                                            let v40 = C::unpack_value_array_2(ctx, v39);
                                            let v968 = constructor_ireduce(ctx, v2.0, v40.0);
                                            let v969 = constructor_ireduce(ctx, v2.0, v40.1);
                                            let v972 = constructor_imul(ctx, v2.0, v968, v969);
                                            // Rule at src\opts\extends.isle line 87.
                                            returns.extend(Some(v972));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        &Opcode::Band => {
                                            let v40 = C::unpack_value_array_2(ctx, v39);
                                            let v968 = constructor_ireduce(ctx, v2.0, v40.0);
                                            let v969 = constructor_ireduce(ctx, v2.0, v40.1);
                                            let v975 = constructor_band(ctx, v2.0, v968, v969);
                                            // Rule at src\opts\extends.isle line 90.
                                            returns.extend(Some(v975));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        &Opcode::Bor => {
                                            let v40 = C::unpack_value_array_2(ctx, v39);
                                            let v968 = constructor_ireduce(ctx, v2.0, v40.0);
                                            let v969 = constructor_ireduce(ctx, v2.0, v40.1);
                                            let v973 = constructor_bor(ctx, v2.0, v968, v969);
                                            // Rule at src\opts\extends.isle line 88.
                                            returns.extend(Some(v973));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        &Opcode::Bxor => {
                                            let v40 = C::unpack_value_array_2(ctx, v39);
                                            let v968 = constructor_ireduce(ctx, v2.0, v40.0);
                                            let v969 = constructor_ireduce(ctx, v2.0, v40.1);
                                            let v974 = constructor_bxor(ctx, v2.0, v968, v969);
                                            // Rule at src\opts\extends.isle line 89.
                                            returns.extend(Some(v974));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v45,
                                    arg: v46,
                                } => {
                                    match v45 {
                                        &Opcode::Ineg => {
                                            let v965 = constructor_ireduce(ctx, v2.0, v46);
                                            let v966 = constructor_ineg(ctx, v2.0, v965);
                                            // Rule at src\opts\extends.isle line 82.
                                            returns.extend(Some(v966));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        &Opcode::Bnot => {
                                            let v965 = constructor_ireduce(ctx, v2.0, v46);
                                            let v967 = constructor_bnot(ctx, v2.0, v965);
                                            // Rule at src\opts\extends.isle line 83.
                                            returns.extend(Some(v967));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        &Opcode::Bmask => {
                                            let v273 = constructor_bmask(ctx, v2.0, v46);
                                            // Rule at src\opts\bitops.isle line 130.
                                            returns.extend(Some(v273));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        &Opcode::Uextend => {
                                            let v52 = C::ty_int(ctx, v2.0);
                                            if let Some(v53) = v52 {
                                                let v951 = C::ty_bits_u64(ctx, v53);
                                                let v950 = C::value_type(ctx, v46);
                                                let v952 = C::ty_bits_u64(ctx, v950);
                                                let v953 = C::u64_lt(ctx, v951, v952);
                                                if v953 == true {
                                                    let v954 = constructor_ireduce(ctx, v53, v46);
                                                    // Rule at src\opts\extends.isle line 57.
                                                    returns.extend(Some(v954));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                                let v955 = C::u64_lt(ctx, v952, v951);
                                                if v955 == true {
                                                    let v957 = constructor_uextend(ctx, v53, v46);
                                                    // Rule at src\opts\extends.isle line 64.
                                                    returns.extend(Some(v957));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                            let v950 = C::value_type(ctx, v46);
                                            if v2.0 == v950 {
                                                let v47 = C::subsume(ctx, v46);
                                                // Rule at src\opts\extends.isle line 50.
                                                returns.extend(Some(v47));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                        &Opcode::Sextend => {
                                            let v52 = C::ty_int(ctx, v2.0);
                                            if let Some(v53) = v52 {
                                                let v951 = C::ty_bits_u64(ctx, v53);
                                                let v950 = C::value_type(ctx, v46);
                                                let v952 = C::ty_bits_u64(ctx, v950);
                                                let v953 = C::u64_lt(ctx, v951, v952);
                                                if v953 == true {
                                                    let v954 = constructor_ireduce(ctx, v53, v46);
                                                    // Rule at src\opts\extends.isle line 54.
                                                    returns.extend(Some(v954));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                                let v955 = C::u64_lt(ctx, v952, v951);
                                                if v955 == true {
                                                    let v956 = constructor_sextend(ctx, v53, v46);
                                                    // Rule at src\opts\extends.isle line 61.
                                                    returns.extend(Some(v956));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                            let v950 = C::value_type(ctx, v46);
                                            if v2.0 == v950 {
                                                let v47 = C::subsume(ctx, v46);
                                                // Rule at src\opts\extends.isle line 49.
                                                returns.extend(Some(v47));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v552,
                                    imm: v553,
                                } => {
                                    if let &Opcode::Iconst = v552 {
                                        let v568 = C::fits_in_64(ctx, v35.0);
                                        if let Some(v569) = v568 {
                                            let v554 = C::u64_from_imm64(ctx, v553);
                                            let v570 = C::imm64_masked(ctx, v2.0, v554);
                                            let v571 = constructor_iconst(ctx, v2.0, v570);
                                            let v572 = C::subsume(ctx, v571);
                                            // Rule at src\opts\cprop.isle line 70.
                                            returns.extend(Some(v572));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    &Opcode::SwidenLow => {
                        let mut v34 = C::inst_data_value_etor_returns::default();
                        C::inst_data_value_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v45,
                                arg: v46,
                            } = &v35.1 {
                                if let &Opcode::Splat = v45 {
                                    let v1228 = C::lane_type(ctx, v2.0);
                                    let v1390 = constructor_sextend(ctx, v1228, v46);
                                    let v1391 = constructor_splat(ctx, v2.0, v1390);
                                    // Rule at src\opts\vector.isle line 85.
                                    returns.extend(Some(v1391));
                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                }
                            }
                        }
                    }
                    &Opcode::SwidenHigh => {
                        let mut v34 = C::inst_data_value_etor_returns::default();
                        C::inst_data_value_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v45,
                                arg: v46,
                            } = &v35.1 {
                                if let &Opcode::Splat = v45 {
                                    let v1228 = C::lane_type(ctx, v2.0);
                                    let v1390 = constructor_sextend(ctx, v1228, v46);
                                    let v1391 = constructor_splat(ctx, v2.0, v1390);
                                    // Rule at src\opts\vector.isle line 84.
                                    returns.extend(Some(v1391));
                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                }
                            }
                        }
                    }
                    &Opcode::UwidenLow => {
                        let mut v34 = C::inst_data_value_etor_returns::default();
                        C::inst_data_value_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v45,
                                arg: v46,
                            } = &v35.1 {
                                if let &Opcode::Splat = v45 {
                                    let v1228 = C::lane_type(ctx, v2.0);
                                    let v1392 = constructor_uextend(ctx, v1228, v46);
                                    let v1393 = constructor_splat(ctx, v2.0, v1392);
                                    // Rule at src\opts\vector.isle line 88.
                                    returns.extend(Some(v1393));
                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                }
                            }
                        }
                    }
                    &Opcode::UwidenHigh => {
                        let mut v34 = C::inst_data_value_etor_returns::default();
                        C::inst_data_value_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v45,
                                arg: v46,
                            } = &v35.1 {
                                if let &Opcode::Splat = v45 {
                                    let v1228 = C::lane_type(ctx, v2.0);
                                    let v1392 = constructor_uextend(ctx, v1228, v46);
                                    let v1393 = constructor_splat(ctx, v2.0, v1392);
                                    // Rule at src\opts\vector.isle line 87.
                                    returns.extend(Some(v1393));
                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                }
                            }
                        }
                    }
                    &Opcode::Uextend => {
                        let mut v34 = C::inst_data_value_etor_returns::default();
                        C::inst_data_value_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            match &v35.1 {
                                &InstructionData::Unary {
                                    opcode: ref v45,
                                    arg: v46,
                                } => {
                                    if let &Opcode::Uextend = v45 {
                                        let v920 = constructor_uextend(ctx, v2.0, v46);
                                        // Rule at src\opts\extends.isle line 1.
                                        returns.extend(Some(v920));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v552,
                                    imm: v553,
                                } => {
                                    if let &Opcode::Iconst = v552 {
                                        let v526 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v527) = v526 {
                                            let v554 = C::u64_from_imm64(ctx, v553);
                                            let v573 = constructor_iconst_u(ctx, v527, v554);
                                            let v574 = C::subsume(ctx, v573);
                                            // Rule at src\opts\cprop.isle line 75.
                                            returns.extend(Some(v574));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    &Opcode::Sextend => {
                        let mut v34 = C::inst_data_value_etor_returns::default();
                        C::inst_data_value_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            match &v35.1 {
                                &InstructionData::IntCompare {
                                    opcode: ref v239,
                                    args: ref v240,
                                    cond: ref v241,
                                } => {
                                    if let &Opcode::Icmp = v239 {
                                        let v922 = constructor_uextend(ctx, v2.0, v33);
                                        // Rule at src\opts\extends.isle line 11.
                                        returns.extend(Some(v922));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v45,
                                    arg: v46,
                                } => {
                                    match v45 {
                                        &Opcode::Bmask => {
                                            let v273 = constructor_bmask(ctx, v2.0, v46);
                                            // Rule at src\opts\bitops.isle line 129.
                                            returns.extend(Some(v273));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        &Opcode::Uextend => {
                                            let v920 = constructor_uextend(ctx, v2.0, v46);
                                            // Rule at src\opts\extends.isle line 7.
                                            returns.extend(Some(v920));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        &Opcode::Sextend => {
                                            let v921 = constructor_sextend(ctx, v2.0, v46);
                                            // Rule at src\opts\extends.isle line 3.
                                            returns.extend(Some(v921));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        _ => {}
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v526 = C::fits_in_64(ctx, v2.0);
                        if let Some(v527) = v526 {
                            let mut v575 = C::inst_data_value_tupled_etor_returns::default();
                            C::inst_data_value_tupled_etor(ctx, v33, &mut v575);
                            let mut v575 = v575.into_context_iter();
                            while let Some(v576) = v575.next(ctx) {
                                let v577 = C::iconst_sextend_etor(ctx, v576);
                                if let Some(v578) = v577 {
                                    let v581 = constructor_iconst_s(ctx, v527, v578.1);
                                    let v582 = C::subsume(ctx, v581);
                                    // Rule at src\opts\cprop.isle line 77.
                                    returns.extend(Some(v582));
                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                }
                            }
                        }
                    }
                    &Opcode::FcvtFromUint => {
                        let mut v34 = C::inst_data_value_etor_returns::default();
                        C::inst_data_value_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            match &v35.1 {
                                &InstructionData::Unary {
                                    opcode: ref v45,
                                    arg: v46,
                                } => {
                                    match v45 {
                                        &Opcode::Splat => {
                                            let v1228 = C::lane_type(ctx, v2.0);
                                            let v1342 = constructor_fcvt_from_uint(ctx, v1228, v46);
                                            let v1343 = constructor_splat(ctx, v2.0, v1342);
                                            // Rule at src\opts\vector.isle line 6.
                                            returns.extend(Some(v1343));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        &Opcode::Uextend => {
                                            let v215 = constructor_fcvt_from_uint(ctx, v2.0, v46);
                                            // Rule at src\opts\arithmetic.isle line 230.
                                            returns.extend(Some(v215));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v552,
                                    imm: v553,
                                } => {
                                    if let &Opcode::Iconst = v552 {
                                        match v2.0 {
                                            F32 => {
                                                let v554 = C::u64_from_imm64(ctx, v553);
                                                let v726 = C::f32_from_uint(ctx, v554);
                                                let v727 = constructor_f32const(ctx, F32, v726);
                                                // Rule at src\opts\cprop.isle line 263.
                                                returns.extend(Some(v727));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                            F64 => {
                                                let v554 = C::u64_from_imm64(ctx, v553);
                                                let v729 = C::f64_from_uint(ctx, v554);
                                                let v730 = constructor_f64const(ctx, F64, v729);
                                                // Rule at src\opts\cprop.isle line 265.
                                                returns.extend(Some(v730));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    &Opcode::FcvtFromSint => {
                        match v2.0 {
                            F32 => {
                                let mut v575 = C::inst_data_value_tupled_etor_returns::default();
                                C::inst_data_value_tupled_etor(ctx, v33, &mut v575);
                                let mut v575 = v575.into_context_iter();
                                while let Some(v576) = v575.next(ctx) {
                                    let v577 = C::iconst_sextend_etor(ctx, v576);
                                    if let Some(v578) = v577 {
                                        let v731 = C::f32_from_sint(ctx, v578.1);
                                        let v732 = constructor_f32const(ctx, F32, v731);
                                        // Rule at src\opts\cprop.isle line 267.
                                        returns.extend(Some(v732));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                            }
                            F64 => {
                                let mut v575 = C::inst_data_value_tupled_etor_returns::default();
                                C::inst_data_value_tupled_etor(ctx, v33, &mut v575);
                                let mut v575 = v575.into_context_iter();
                                while let Some(v576) = v575.next(ctx) {
                                    let v577 = C::iconst_sextend_etor(ctx, v576);
                                    if let Some(v578) = v577 {
                                        let v733 = C::f64_from_sint(ctx, v578.1);
                                        let v734 = constructor_f64const(ctx, F64, v733);
                                        // Rule at src\opts\cprop.isle line 269.
                                        returns.extend(Some(v734));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                            }
                            _ => {}
                        }
                        let mut v34 = C::inst_data_value_etor_returns::default();
                        C::inst_data_value_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v45,
                                arg: v46,
                            } = &v35.1 {
                                match v45 {
                                    &Opcode::Splat => {
                                        let v1228 = C::lane_type(ctx, v2.0);
                                        let v1344 = constructor_fcvt_from_sint(ctx, v1228, v46);
                                        let v1345 = constructor_splat(ctx, v2.0, v1344);
                                        // Rule at src\opts\vector.isle line 8.
                                        returns.extend(Some(v1345));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                    &Opcode::Sextend => {
                                        let v216 = constructor_fcvt_from_sint(ctx, v2.0, v46);
                                        // Rule at src\opts\arithmetic.isle line 232.
                                        returns.extend(Some(v216));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                    _ => {}
                                }
                            }
                        }
                    }
                    _ => {}
                }
            }
            &InstructionData::UnaryIeee32 {
                opcode: ref v1122,
                imm: v1123,
            } => {
                if let &Opcode::F32const = v1122 {
                    let v1119 = C::remat(ctx, arg0);
                    // Rule at src\opts\remat.isle line 27.
                    returns.extend(Some(v1119));
                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                }
            }
            &InstructionData::UnaryIeee64 {
                opcode: ref v1124,
                imm: v1125,
            } => {
                if let &Opcode::F64const = v1124 {
                    let v1119 = C::remat(ctx, arg0);
                    // Rule at src\opts\remat.isle line 29.
                    returns.extend(Some(v1119));
                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                }
            }
            &InstructionData::UnaryImm {
                opcode: ref v1120,
                imm: v1121,
            } => {
                if let &Opcode::Iconst = v1120 {
                    let v1119 = C::remat(ctx, arg0);
                    // Rule at src\opts\remat.isle line 25.
                    returns.extend(Some(v1119));
                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                }
            }
            _ => {}
        }
    }
}

// Generated as internal constructor for term inst_to_skeleton_inst_simplification.
pub fn constructor_inst_to_skeleton_inst_simplification<C: Context>(
    ctx: &mut C,
    arg0: Inst,
) -> SkeletonInstSimplification {
    let v1 = SkeletonInstSimplification::Replace {
        inst: arg0,
    };
    // Rule at src\prelude_opt.isle line 91.
    return v1;
}

// Generated as internal constructor for term value_to_skeleton_inst_simplification.
pub fn constructor_value_to_skeleton_inst_simplification<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> SkeletonInstSimplification {
    let v1 = SkeletonInstSimplification::RemoveWithVal {
        val: arg0,
    };
    // Rule at src\prelude_opt.isle line 95.
    return v1;
}

// Generated as internal constructor for term remove_inst.
pub fn constructor_remove_inst<C: Context>(
    ctx: &mut C,
) -> SkeletonInstSimplification {
    // Rule at src\prelude_opt.isle line 99.
    return SkeletonInstSimplification::Remove;
}

// Generated as internal constructor for term replace_with_val.
pub fn constructor_replace_with_val<C: Context>(
    ctx: &mut C,
    arg0: Inst,
    arg1: Value,
) -> SkeletonInstSimplification {
    let v2 = SkeletonInstSimplification::ReplaceWithVal {
        inst: arg0,
        val: arg1,
    };
    // Rule at src\prelude_opt.isle line 102.
    return v2;
}

// Generated as internal constructor for term simplify_skeleton.
pub fn constructor_simplify_skeleton<C: Context>(
    ctx: &mut C,
    arg0: Inst,
    returns: &mut (impl Extend<SkeletonInstSimplification> + Length),
) -> () {
    let v1 = &C::inst_data_etor(ctx, arg0);
    if let Some(v2) = v1 {
        match v2 {
            &InstructionData::Binary {
                opcode: ref v3,
                args: ref v4,
            } => {
                match v3 {
                    &Opcode::Udiv => {
                        let v5 = C::unpack_value_array_2(ctx, v4);
                        let mut v15 = C::inst_data_value_etor_returns::default();
                        C::inst_data_value_etor(ctx, v5.1, &mut v15);
                        let mut v15 = v15.into_context_iter();
                        while let Some(v16) = v15.next(ctx) {
                            if let &InstructionData::UnaryImm {
                                opcode: ref v19,
                                imm: v20,
                            } = &v16.1 {
                                if let &Opcode::Iconst = v19 {
                                    let v21 = C::u64_from_imm64(ctx, v20);
                                    if v21 == 0x1_u64 {
                                        let v14 = &constructor_value_to_skeleton_inst_simplification(ctx, v5.0);
                                        // Rule at src\opts\arithmetic.isle line 79.
                                        returns.extend(Some(v14.clone()));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                    let mut v22 = C::inst_data_value_etor_returns::default();
                                    C::inst_data_value_etor(ctx, v5.0, &mut v22);
                                    let mut v22 = v22.into_context_iter();
                                    while let Some(v23) = v22.next(ctx) {
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v26,
                                            imm: v27,
                                        } = &v23.1 {
                                            if let &Opcode::Iconst = v26 {
                                                let v32 = C::u64_from_imm64(ctx, v27);
                                                let v33 = C::u64_udiv(ctx, v32, v21);
                                                if let Some(v34) = v33 {
                                                    if v16.0 == v23.0 {
                                                        let v35 = C::imm64_masked(ctx, v23.0, v34);
                                                        let v36 = constructor_iconst(ctx, v23.0, v35);
                                                        let v37 = &constructor_value_to_skeleton_inst_simplification(ctx, v36);
                                                        // Rule at src\opts\cprop.isle line 26.
                                                        returns.extend(Some(v37.clone()));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Sdiv => {
                        let v5 = C::unpack_value_array_2(ctx, v4);
                        let mut v8 = C::inst_data_value_tupled_etor_returns::default();
                        C::inst_data_value_tupled_etor(ctx, v5.1, &mut v8);
                        let mut v8 = v8.into_context_iter();
                        while let Some(v9) = v8.next(ctx) {
                            let v10 = C::iconst_sextend_etor(ctx, v9);
                            if let Some(v11) = v10 {
                                if v11.1 == 1_i64 {
                                    let v14 = &constructor_value_to_skeleton_inst_simplification(ctx, v5.0);
                                    // Rule at src\opts\arithmetic.isle line 78.
                                    returns.extend(Some(v14.clone()));
                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                }
                            }
                        }
                        let mut v15 = C::inst_data_value_etor_returns::default();
                        C::inst_data_value_etor(ctx, v5.1, &mut v15);
                        let mut v15 = v15.into_context_iter();
                        while let Some(v16) = v15.next(ctx) {
                            if let &InstructionData::UnaryImm {
                                opcode: ref v19,
                                imm: v20,
                            } = &v16.1 {
                                if let &Opcode::Iconst = v19 {
                                    let mut v22 = C::inst_data_value_etor_returns::default();
                                    C::inst_data_value_etor(ctx, v5.0, &mut v22);
                                    let mut v22 = v22.into_context_iter();
                                    while let Some(v23) = v22.next(ctx) {
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v26,
                                            imm: v27,
                                        } = &v23.1 {
                                            if let &Opcode::Iconst = v26 {
                                                let v28 = C::imm64_sdiv(ctx, v23.0, v27, v20);
                                                if let Some(v29) = v28 {
                                                    let v30 = constructor_iconst(ctx, v23.0, v29);
                                                    let v31 = &constructor_value_to_skeleton_inst_simplification(ctx, v30);
                                                    // Rule at src\opts\cprop.isle line 20.
                                                    returns.extend(Some(v31.clone()));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    _ => {}
                }
            }
            &InstructionData::CondTrap {
                opcode: ref v38,
                arg: v39,
                code: ref v40,
            } => {
                match v38 {
                    &Opcode::Trapz => {
                        let mut v41 = C::inst_data_value_etor_returns::default();
                        C::inst_data_value_etor(ctx, v39, &mut v41);
                        let mut v41 = v41.into_context_iter();
                        while let Some(v42) = v41.next(ctx) {
                            if let &InstructionData::UnaryImm {
                                opcode: ref v45,
                                imm: v46,
                            } = &v42.1 {
                                if let &Opcode::Iconst = v45 {
                                    let v47 = C::u64_from_imm64(ctx, v46);
                                    let v48 = C::u64_is_zero(ctx, v47);
                                    if v48 == false {
                                        let v49 = &constructor_remove_inst(ctx);
                                        // Rule at src\opts\skeleton.isle line 6.
                                        returns.extend(Some(v49.clone()));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Trapnz => {
                        let mut v41 = C::inst_data_value_etor_returns::default();
                        C::inst_data_value_etor(ctx, v39, &mut v41);
                        let mut v41 = v41.into_context_iter();
                        while let Some(v42) = v41.next(ctx) {
                            if let &InstructionData::UnaryImm {
                                opcode: ref v45,
                                imm: v46,
                            } = &v42.1 {
                                if let &Opcode::Iconst = v45 {
                                    let v47 = C::u64_from_imm64(ctx, v46);
                                    if v47 == 0x0_u64 {
                                        let v49 = &constructor_remove_inst(ctx);
                                        // Rule at src\opts\skeleton.isle line 8.
                                        returns.extend(Some(v49.clone()));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                            }
                        }
                    }
                    _ => {}
                }
            }
            &InstructionData::IntAddTrap {
                opcode: ref v50,
                args: ref v51,
                code: ref v52,
            } => {
                if let &Opcode::UaddOverflowTrap = v50 {
                    let v53 = C::unpack_value_array_2(ctx, v51);
                    let mut v56 = C::inst_data_value_etor_returns::default();
                    C::inst_data_value_etor(ctx, v53.0, &mut v56);
                    let mut v56 = v56.into_context_iter();
                    while let Some(v57) = v56.next(ctx) {
                        match &v57.1 {
                            &InstructionData::Unary {
                                opcode: ref v74,
                                arg: v75,
                            } => {
                                if let &Opcode::Uextend = v74 {
                                    let mut v63 = C::inst_data_value_etor_returns::default();
                                    C::inst_data_value_etor(ctx, v53.1, &mut v63);
                                    let mut v63 = v63.into_context_iter();
                                    while let Some(v64) = v63.next(ctx) {
                                        if let &InstructionData::Unary {
                                            opcode: ref v76,
                                            arg: v77,
                                        } = &v64.1 {
                                            if let &Opcode::Uextend = v76 {
                                                if v57.0 == v64.0 {
                                                    let v78 = constructor_iadd(ctx, v57.0, v53.0, v53.1);
                                                    let v79 = &constructor_value_to_skeleton_inst_simplification(ctx, v78);
                                                    // Rule at src\opts\skeleton.isle line 17.
                                                    returns.extend(Some(v79.clone()));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            &InstructionData::UnaryImm {
                                opcode: ref v60,
                                imm: v61,
                            } => {
                                if let &Opcode::Iconst = v60 {
                                    let mut v63 = C::inst_data_value_etor_returns::default();
                                    C::inst_data_value_etor(ctx, v53.1, &mut v63);
                                    let mut v63 = v63.into_context_iter();
                                    while let Some(v64) = v63.next(ctx) {
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v67,
                                            imm: v68,
                                        } = &v64.1 {
                                            if let &Opcode::Iconst = v67 {
                                                let v62 = C::u64_from_imm64(ctx, v61);
                                                let v69 = C::u64_from_imm64(ctx, v68);
                                                let v70 = C::checked_add_with_type(ctx, v57.0, v62, v69);
                                                if let Some(v71) = v70 {
                                                    if v57.0 == v64.0 {
                                                        let v72 = constructor_iconst_u(ctx, v57.0, v71);
                                                        let v73 = &constructor_value_to_skeleton_inst_simplification(ctx, v72);
                                                        // Rule at src\opts\skeleton.isle line 12.
                                                        returns.extend(Some(v73.clone()));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                    }
                }
            }
            _ => {}
        }
    }
}

// Generated as internal constructor for term iconst_s.
pub fn constructor_iconst_s<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: i64,
) -> Value {
    if arg0 == I128 {
        let v12 = constructor_iconst_s(ctx, I64, arg1);
        let v13 = constructor_sextend(ctx, I128, v12);
        // Rule at src\prelude_opt.isle line 140.
        return v13;
    }
    let v2 = C::i64_as_u64(ctx, arg1);
    let v3 = C::ty_umax(ctx, arg0);
    let v4 = C::u64_and(ctx, v2, v3);
    let v5 = C::i64_sextend_u64(ctx, arg0, v4);
    let v6 = C::i64_as_u64(ctx, v5);
    let v7 = C::u64_eq(ctx, v2, v6);
    if v7 == true {
        let v8 = C::imm64(ctx, v4);
        let v9 = constructor_iconst(ctx, arg0, v8);
        // Rule at src\prelude_opt.isle line 135.
        return v9;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "iconst_s", "src\\prelude_opt.isle line 133")
}

// Generated as internal constructor for term iconst_u.
pub fn constructor_iconst_u<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: u64,
) -> Value {
    if arg0 == I128 {
        let v8 = constructor_iconst_u(ctx, I64, arg1);
        let v9 = constructor_uextend(ctx, I128, v8);
        // Rule at src\prelude_opt.isle line 153.
        return v9;
    }
    let v2 = C::ty_umax(ctx, arg0);
    let v3 = C::u64_le(ctx, arg1, v2);
    if v3 == true {
        let v4 = C::imm64(ctx, arg1);
        let v5 = constructor_iconst(ctx, arg0, v4);
        // Rule at src\prelude_opt.isle line 150.
        return v5;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "iconst_u", "src\\prelude_opt.isle line 148")
}

// Generated as internal constructor for term uextend_maybe.
pub fn constructor_uextend_maybe<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = C::value_type(ctx, arg1);
    if arg0 == v3 {
        // Rule at src\prelude_opt.isle line 173.
        return arg1;
    }
    let v2 = constructor_uextend(ctx, arg0, arg1);
    // Rule at src\prelude_opt.isle line 172.
    return v2;
}

// Generated as internal constructor for term sextend_maybe.
pub fn constructor_sextend_maybe<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = C::value_type(ctx, arg1);
    if arg0 == v3 {
        // Rule at src\prelude_opt.isle line 179.
        return arg1;
    }
    let v2 = constructor_sextend(ctx, arg0, arg1);
    // Rule at src\prelude_opt.isle line 178.
    return v2;
}

// Generated as internal constructor for term eq.
pub fn constructor_eq<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::Equal, arg1, arg2);
    // Rule at src\prelude_opt.isle line 38.
    return v4;
}

// Generated as internal constructor for term ne.
pub fn constructor_ne<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::NotEqual, arg1, arg2);
    // Rule at src\prelude_opt.isle line 39.
    return v4;
}

// Generated as internal constructor for term ult.
pub fn constructor_ult<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::UnsignedLessThan, arg1, arg2);
    // Rule at src\prelude_opt.isle line 40.
    return v4;
}

// Generated as internal constructor for term ule.
pub fn constructor_ule<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::UnsignedLessThanOrEqual, arg1, arg2);
    // Rule at src\prelude_opt.isle line 41.
    return v4;
}

// Generated as internal constructor for term ugt.
pub fn constructor_ugt<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::UnsignedGreaterThan, arg1, arg2);
    // Rule at src\prelude_opt.isle line 42.
    return v4;
}

// Generated as internal constructor for term uge.
pub fn constructor_uge<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::UnsignedGreaterThanOrEqual, arg1, arg2);
    // Rule at src\prelude_opt.isle line 43.
    return v4;
}

// Generated as internal constructor for term slt.
pub fn constructor_slt<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::SignedLessThan, arg1, arg2);
    // Rule at src\prelude_opt.isle line 44.
    return v4;
}

// Generated as internal constructor for term sle.
pub fn constructor_sle<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::SignedLessThanOrEqual, arg1, arg2);
    // Rule at src\prelude_opt.isle line 45.
    return v4;
}

// Generated as internal constructor for term sgt.
pub fn constructor_sgt<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::SignedGreaterThan, arg1, arg2);
    // Rule at src\prelude_opt.isle line 46.
    return v4;
}

// Generated as internal constructor for term sge.
pub fn constructor_sge<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::SignedGreaterThanOrEqual, arg1, arg2);
    // Rule at src\prelude_opt.isle line 47.
    return v4;
}

// Generated as internal constructor for term truthy.
pub fn constructor_truthy<C: Context>(
    ctx: &mut C,
    arg0: Value,
    returns: &mut (impl Extend<Value> + Length),
) -> () {
    let mut v1 = C::inst_data_value_etor_returns::default();
    C::inst_data_value_etor(ctx, arg0, &mut v1);
    let mut v1 = v1.into_context_iter();
    while let Some(v2) = v1.next(ctx) {
        match &v2.1 {
            &InstructionData::Binary {
                opcode: ref v7,
                args: ref v8,
            } => {
                match v7 {
                    &Opcode::Rotl => {
                        let v9 = C::unpack_value_array_2(ctx, v8);
                        // Rule at src\opts\bitops.isle line 108.
                        returns.extend(Some(v9.0));
                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                    }
                    &Opcode::Rotr => {
                        let v9 = C::unpack_value_array_2(ctx, v8);
                        // Rule at src\opts\bitops.isle line 109.
                        returns.extend(Some(v9.0));
                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                    }
                    _ => {}
                }
            }
            &InstructionData::IntCompare {
                opcode: ref v33,
                args: ref v34,
                cond: ref v35,
            } => {
                if let &Opcode::Icmp = v33 {
                    if let &IntCC::NotEqual = v35 {
                        let v36 = C::unpack_value_array_2(ctx, v34);
                        let mut v39 = C::inst_data_value_etor_returns::default();
                        C::inst_data_value_etor(ctx, v36.1, &mut v39);
                        let mut v39 = v39.into_context_iter();
                        while let Some(v40) = v39.next(ctx) {
                            if let &InstructionData::UnaryImm {
                                opcode: ref v43,
                                imm: v44,
                            } = &v40.1 {
                                if let &Opcode::Iconst = v43 {
                                    let v45 = C::u64_from_imm64(ctx, v44);
                                    if v45 == 0x0_u64 {
                                        // Rule at src\opts\bitops.isle line 112.
                                        returns.extend(Some(v36.0));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            &InstructionData::Ternary {
                opcode: ref v12,
                args: ref v13,
            } => {
                if let &Opcode::Select = v12 {
                    let v14 = C::unpack_value_array_3(ctx, v13);
                    let mut v18 = C::inst_data_value_etor_returns::default();
                    C::inst_data_value_etor(ctx, v14.1, &mut v18);
                    let mut v18 = v18.into_context_iter();
                    while let Some(v19) = v18.next(ctx) {
                        if let &InstructionData::UnaryImm {
                            opcode: ref v22,
                            imm: v23,
                        } = &v19.1 {
                            if let &Opcode::Iconst = v22 {
                                let v24 = C::u64_from_imm64(ctx, v23);
                                let v25 = C::u64_is_zero(ctx, v24);
                                if v25 == false {
                                    let mut v26 = C::inst_data_value_etor_returns::default();
                                    C::inst_data_value_etor(ctx, v14.2, &mut v26);
                                    let mut v26 = v26.into_context_iter();
                                    while let Some(v27) = v26.next(ctx) {
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v30,
                                            imm: v31,
                                        } = &v27.1 {
                                            if let &Opcode::Iconst = v30 {
                                                let v32 = C::u64_from_imm64(ctx, v31);
                                                if v32 == 0x0_u64 {
                                                    // Rule at src\opts\bitops.isle line 110.
                                                    returns.extend(Some(v14.0));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            &InstructionData::Unary {
                opcode: ref v5,
                arg: v6,
            } => {
                match v5 {
                    &Opcode::Ineg => {
                        // Rule at src\opts\bitops.isle line 104.
                        returns.extend(Some(v6));
                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                    }
                    &Opcode::Bitrev => {
                        // Rule at src\opts\bitops.isle line 106.
                        returns.extend(Some(v6));
                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                    }
                    &Opcode::Bswap => {
                        // Rule at src\opts\bitops.isle line 105.
                        returns.extend(Some(v6));
                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                    }
                    &Opcode::Popcnt => {
                        // Rule at src\opts\bitops.isle line 107.
                        returns.extend(Some(v6));
                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                    }
                    &Opcode::Bmask => {
                        // Rule at src\opts\bitops.isle line 103.
                        returns.extend(Some(v6));
                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                    }
                    &Opcode::Uextend => {
                        // Rule at src\opts\bitops.isle line 102.
                        returns.extend(Some(v6));
                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                    }
                    &Opcode::Sextend => {
                        // Rule at src\opts\bitops.isle line 101.
                        returns.extend(Some(v6));
                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                    }
                    _ => {}
                }
            }
            _ => {}
        }
    }
}

// Generated as internal constructor for term splat8.
pub fn constructor_splat8<C: Context>(
    ctx: &mut C,
    arg0: u64,
) -> Constant {
    let v2 = C::u64_shl(ctx, arg0, 0x8_u64);
    let v3 = C::u64_or(ctx, arg0, v2);
    let v4 = constructor_splat16(ctx, v3);
    // Rule at src\opts\cprop.isle line 216.
    return v4;
}

// Generated as internal constructor for term splat16.
pub fn constructor_splat16<C: Context>(
    ctx: &mut C,
    arg0: u64,
) -> Constant {
    let v2 = C::u64_shl(ctx, arg0, 0x10_u64);
    let v3 = C::u64_or(ctx, arg0, v2);
    let v4 = constructor_splat32(ctx, v3);
    // Rule at src\opts\cprop.isle line 218.
    return v4;
}

// Generated as internal constructor for term splat32.
pub fn constructor_splat32<C: Context>(
    ctx: &mut C,
    arg0: u64,
) -> Constant {
    let v2 = C::u64_shl(ctx, arg0, 0x20_u64);
    let v3 = C::u64_or(ctx, arg0, v2);
    let v4 = C::splat64(ctx, v3);
    // Rule at src\opts\cprop.isle line 220.
    return v4;
}

// Generated as internal constructor for term intcc_comparable.
pub fn constructor_intcc_comparable<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: &IntCC,
) -> Option<bool> {
    let v2 = constructor_intcc_class(ctx, arg0);
    let v3 = constructor_intcc_class(ctx, arg1);
    let v4 = C::u64_and(ctx, v2, v3);
    let v5 = C::u64_is_zero(ctx, v4);
    if v5 == false {
        let v7 = C::u64_eq(ctx, 0x2_u64, v4);
        let v8 = Some(v7);
        // Rule at src\opts\icmp.isle line 204.
        return v8;
    }
    None
}

// Generated as internal constructor for term decompose_intcc.
pub fn constructor_decompose_intcc<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
) -> u64 {
    match arg0 {
        &IntCC::Equal => {
            // Rule at src\opts\icmp.isle line 209.
            return 0x1_u64;
        }
        &IntCC::NotEqual => {
            // Rule at src\opts\icmp.isle line 218.
            return 0x6_u64;
        }
        &IntCC::SignedGreaterThan => {
            // Rule at src\opts\icmp.isle line 215.
            return 0x4_u64;
        }
        &IntCC::SignedGreaterThanOrEqual => {
            // Rule at src\opts\icmp.isle line 217.
            return 0x5_u64;
        }
        &IntCC::SignedLessThan => {
            // Rule at src\opts\icmp.isle line 211.
            return 0x2_u64;
        }
        &IntCC::SignedLessThanOrEqual => {
            // Rule at src\opts\icmp.isle line 213.
            return 0x3_u64;
        }
        &IntCC::UnsignedGreaterThan => {
            // Rule at src\opts\icmp.isle line 214.
            return 0x4_u64;
        }
        &IntCC::UnsignedGreaterThanOrEqual => {
            // Rule at src\opts\icmp.isle line 216.
            return 0x5_u64;
        }
        &IntCC::UnsignedLessThan => {
            // Rule at src\opts\icmp.isle line 210.
            return 0x2_u64;
        }
        &IntCC::UnsignedLessThanOrEqual => {
            // Rule at src\opts\icmp.isle line 212.
            return 0x3_u64;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "decompose_intcc", "src\\opts\\icmp.isle line 208")
}

// Generated as internal constructor for term compose_icmp.
pub fn constructor_compose_icmp<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: u64,
    arg2: bool,
    arg3: Value,
    arg4: Value,
) -> Value {
    match arg1 {
        0x0_u64 => {
            let v6 = constructor_iconst_u(ctx, arg0, 0x0_u64);
            let v7 = C::subsume(ctx, v6);
            // Rule at src\opts\icmp.isle line 221.
            return v7;
        }
        0x1_u64 => {
            let v9 = constructor_icmp(ctx, arg0, &IntCC::Equal, arg3, arg4);
            // Rule at src\opts\icmp.isle line 222.
            return v9;
        }
        0x2_u64 => {
            match arg2 {
                false => {
                    let v11 = constructor_icmp(ctx, arg0, &IntCC::UnsignedLessThan, arg3, arg4);
                    // Rule at src\opts\icmp.isle line 223.
                    return v11;
                }
                true => {
                    let v13 = constructor_icmp(ctx, arg0, &IntCC::SignedLessThan, arg3, arg4);
                    // Rule at src\opts\icmp.isle line 224.
                    return v13;
                }
                _ => {}
            }
        }
        0x3_u64 => {
            match arg2 {
                false => {
                    let v15 = constructor_icmp(ctx, arg0, &IntCC::UnsignedLessThanOrEqual, arg3, arg4);
                    // Rule at src\opts\icmp.isle line 225.
                    return v15;
                }
                true => {
                    let v17 = constructor_icmp(ctx, arg0, &IntCC::SignedLessThanOrEqual, arg3, arg4);
                    // Rule at src\opts\icmp.isle line 226.
                    return v17;
                }
                _ => {}
            }
        }
        0x4_u64 => {
            match arg2 {
                false => {
                    let v19 = constructor_icmp(ctx, arg0, &IntCC::UnsignedGreaterThan, arg3, arg4);
                    // Rule at src\opts\icmp.isle line 227.
                    return v19;
                }
                true => {
                    let v21 = constructor_icmp(ctx, arg0, &IntCC::SignedGreaterThan, arg3, arg4);
                    // Rule at src\opts\icmp.isle line 228.
                    return v21;
                }
                _ => {}
            }
        }
        0x5_u64 => {
            match arg2 {
                false => {
                    let v23 = constructor_icmp(ctx, arg0, &IntCC::UnsignedGreaterThanOrEqual, arg3, arg4);
                    // Rule at src\opts\icmp.isle line 229.
                    return v23;
                }
                true => {
                    let v25 = constructor_icmp(ctx, arg0, &IntCC::SignedGreaterThanOrEqual, arg3, arg4);
                    // Rule at src\opts\icmp.isle line 230.
                    return v25;
                }
                _ => {}
            }
        }
        0x6_u64 => {
            let v27 = constructor_icmp(ctx, arg0, &IntCC::NotEqual, arg3, arg4);
            // Rule at src\opts\icmp.isle line 231.
            return v27;
        }
        0x7_u64 => {
            let v29 = constructor_iconst_u(ctx, arg0, 0x1_u64);
            let v30 = C::subsume(ctx, v29);
            // Rule at src\opts\icmp.isle line 232.
            return v30;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "compose_icmp", "src\\opts\\icmp.isle line 220")
}

// Generated as internal constructor for term intcc_class.
pub fn constructor_intcc_class<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
) -> u64 {
    match arg0 {
        &IntCC::Equal => {
            // Rule at src\opts\icmp.isle line 243.
            return 0x3_u64;
        }
        &IntCC::NotEqual => {
            // Rule at src\opts\icmp.isle line 244.
            return 0x3_u64;
        }
        &IntCC::SignedGreaterThan => {
            // Rule at src\opts\icmp.isle line 241.
            return 0x2_u64;
        }
        &IntCC::SignedGreaterThanOrEqual => {
            // Rule at src\opts\icmp.isle line 242.
            return 0x2_u64;
        }
        &IntCC::SignedLessThan => {
            // Rule at src\opts\icmp.isle line 239.
            return 0x2_u64;
        }
        &IntCC::SignedLessThanOrEqual => {
            // Rule at src\opts\icmp.isle line 240.
            return 0x2_u64;
        }
        &IntCC::UnsignedGreaterThan => {
            // Rule at src\opts\icmp.isle line 237.
            return 0x1_u64;
        }
        &IntCC::UnsignedGreaterThanOrEqual => {
            // Rule at src\opts\icmp.isle line 238.
            return 0x1_u64;
        }
        &IntCC::UnsignedLessThan => {
            // Rule at src\opts\icmp.isle line 235.
            return 0x1_u64;
        }
        &IntCC::UnsignedLessThanOrEqual => {
            // Rule at src\opts\icmp.isle line 236.
            return 0x1_u64;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "intcc_class", "src\\opts\\icmp.isle line 234")
}

// Generated as internal constructor for term shift_amt_to_type.
pub fn constructor_shift_amt_to_type<C: Context>(
    ctx: &mut C,
    arg0: u64,
) -> Option<Type> {
    match arg0 {
        0x8_u64 => {
            let v2 = Some(I8);
            // Rule at src\opts\shifts.isle line 93.
            return v2;
        }
        0x10_u64 => {
            let v4 = Some(I16);
            // Rule at src\opts\shifts.isle line 94.
            return v4;
        }
        0x20_u64 => {
            let v6 = Some(I32);
            // Rule at src\opts\shifts.isle line 95.
            return v6;
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term iadd_uextend.
pub fn constructor_iadd_uextend<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: Value,
) -> Value {
    let v3 = C::value_type(ctx, arg1);
    let v6 = C::ty_bits_u64(ctx, v3);
    let v1 = C::value_type(ctx, arg0);
    let v5 = C::ty_bits_u64(ctx, v1);
    let v10 = C::u64_lt(ctx, v6, v5);
    if v10 == true {
        let v11 = constructor_uextend(ctx, v1, arg1);
        let v12 = constructor_iadd(ctx, v1, arg0, v11);
        // Rule at src\opts\shifts.isle line 214.
        return v12;
    }
    let v7 = C::u64_lt(ctx, v5, v6);
    if v7 == true {
        let v8 = constructor_uextend(ctx, v3, arg0);
        let v9 = constructor_iadd(ctx, v3, v8, arg1);
        // Rule at src\opts\shifts.isle line 211.
        return v9;
    }
    if v1 == v3 {
        let v4 = constructor_iadd(ctx, v1, arg0, arg1);
        // Rule at src\opts\shifts.isle line 209.
        return v4;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "iadd_uextend", "src\\opts\\shifts.isle line 208")
}

// Generated as internal constructor for term isub_uextend.
pub fn constructor_isub_uextend<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: Value,
) -> Value {
    let v3 = C::value_type(ctx, arg1);
    let v6 = C::ty_bits_u64(ctx, v3);
    let v1 = C::value_type(ctx, arg0);
    let v5 = C::ty_bits_u64(ctx, v1);
    let v10 = C::u64_lt(ctx, v6, v5);
    if v10 == true {
        let v11 = constructor_uextend(ctx, v1, arg1);
        let v12 = constructor_isub(ctx, v1, arg0, v11);
        // Rule at src\opts\shifts.isle line 226.
        return v12;
    }
    let v7 = C::u64_lt(ctx, v5, v6);
    if v7 == true {
        let v8 = constructor_uextend(ctx, v3, arg0);
        let v9 = constructor_isub(ctx, v3, v8, arg1);
        // Rule at src\opts\shifts.isle line 223.
        return v9;
    }
    if v1 == v3 {
        let v4 = constructor_isub(ctx, v1, arg0, arg1);
        // Rule at src\opts\shifts.isle line 221.
        return v4;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "isub_uextend", "src\\opts\\shifts.isle line 220")
}

// Generated as internal constructor for term jump.
pub fn constructor_jump<C: Context>(
    ctx: &mut C,
    arg0: BlockCall,
) -> Inst {
    let v2 = InstructionData::Jump {
        opcode: Opcode::Jump,
        destination: arg0,
    };
    let v3 = C::make_skeleton_inst_ctor(ctx, &v2);
    // Rule at <OUT_DIR>\clif_opt.isle line 363.
    return v3;
}

// Generated as internal constructor for term brif.
pub fn constructor_brif<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: BlockCall,
    arg2: BlockCall,
) -> Inst {
    let v4 = &C::pack_block_array_2(ctx, arg1, arg2);
    let v5 = InstructionData::Brif {
        opcode: Opcode::Brif,
        arg: arg0,
        blocks: v4.clone(),
    };
    let v6 = C::make_skeleton_inst_ctor(ctx, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 372.
    return v6;
}

// Generated as internal constructor for term br_table.
pub fn constructor_br_table<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: JumpTable,
) -> Inst {
    let v3 = InstructionData::BranchTable {
        opcode: Opcode::BrTable,
        arg: arg0,
        table: arg1,
    };
    let v4 = C::make_skeleton_inst_ctor(ctx, &v3);
    // Rule at <OUT_DIR>\clif_opt.isle line 381.
    return v4;
}

// Generated as internal constructor for term debugtrap.
pub fn constructor_debugtrap<C: Context>(
    ctx: &mut C,
) -> Inst {
    let v1 = InstructionData::NullAry {
        opcode: Opcode::Debugtrap,
    };
    let v2 = C::make_skeleton_inst_ctor(ctx, &v1);
    // Rule at <OUT_DIR>\clif_opt.isle line 390.
    return v2;
}

// Generated as internal constructor for term trap.
pub fn constructor_trap<C: Context>(
    ctx: &mut C,
    arg0: &TrapCode,
) -> Inst {
    let v2 = InstructionData::Trap {
        opcode: Opcode::Trap,
        code: arg0.clone(),
    };
    let v3 = C::make_skeleton_inst_ctor(ctx, &v2);
    // Rule at <OUT_DIR>\clif_opt.isle line 399.
    return v3;
}

// Generated as internal constructor for term trapz.
pub fn constructor_trapz<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: &TrapCode,
) -> Inst {
    let v3 = InstructionData::CondTrap {
        opcode: Opcode::Trapz,
        arg: arg0,
        code: arg1.clone(),
    };
    let v4 = C::make_skeleton_inst_ctor(ctx, &v3);
    // Rule at <OUT_DIR>\clif_opt.isle line 408.
    return v4;
}

// Generated as internal constructor for term trapnz.
pub fn constructor_trapnz<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: &TrapCode,
) -> Inst {
    let v3 = InstructionData::CondTrap {
        opcode: Opcode::Trapnz,
        arg: arg0,
        code: arg1.clone(),
    };
    let v4 = C::make_skeleton_inst_ctor(ctx, &v3);
    // Rule at <OUT_DIR>\clif_opt.isle line 417.
    return v4;
}

// Generated as internal constructor for term func_addr.
pub fn constructor_func_addr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: FuncRef,
) -> Value {
    let v3 = InstructionData::FuncAddr {
        opcode: Opcode::FuncAddr,
        func_ref: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at <OUT_DIR>\clif_opt.isle line 426.
    return v4;
}

// Generated as internal constructor for term splat.
pub fn constructor_splat<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Splat,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at <OUT_DIR>\clif_opt.isle line 435.
    return v4;
}

// Generated as internal constructor for term swizzle.
pub fn constructor_swizzle<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Swizzle,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 444.
    return v6;
}

// Generated as internal constructor for term x86_pshufb.
pub fn constructor_x86_pshufb<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::X86Pshufb,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 453.
    return v6;
}

// Generated as internal constructor for term insertlane.
pub fn constructor_insertlane<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Uimm8,
) -> Value {
    let v5 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v6 = InstructionData::TernaryImm8 {
        opcode: Opcode::Insertlane,
        args: v5.clone(),
        imm: arg3,
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at <OUT_DIR>\clif_opt.isle line 462.
    return v7;
}

// Generated as internal constructor for term extractlane.
pub fn constructor_extractlane<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Uimm8,
) -> Value {
    let v4 = InstructionData::BinaryImm8 {
        opcode: Opcode::Extractlane,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at <OUT_DIR>\clif_opt.isle line 471.
    return v5;
}

// Generated as internal constructor for term smin.
pub fn constructor_smin<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Smin,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 480.
    return v6;
}

// Generated as internal constructor for term umin.
pub fn constructor_umin<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Umin,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 489.
    return v6;
}

// Generated as internal constructor for term smax.
pub fn constructor_smax<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Smax,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 498.
    return v6;
}

// Generated as internal constructor for term umax.
pub fn constructor_umax<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Umax,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 507.
    return v6;
}

// Generated as internal constructor for term avg_round.
pub fn constructor_avg_round<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::AvgRound,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 516.
    return v6;
}

// Generated as internal constructor for term uadd_sat.
pub fn constructor_uadd_sat<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::UaddSat,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 525.
    return v6;
}

// Generated as internal constructor for term sadd_sat.
pub fn constructor_sadd_sat<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::SaddSat,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 534.
    return v6;
}

// Generated as internal constructor for term usub_sat.
pub fn constructor_usub_sat<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::UsubSat,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 543.
    return v6;
}

// Generated as internal constructor for term ssub_sat.
pub fn constructor_ssub_sat<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::SsubSat,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 552.
    return v6;
}

// Generated as internal constructor for term load.
pub fn constructor_load<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Load,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 561.
    return v6;
}

// Generated as internal constructor for term store.
pub fn constructor_store<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Value,
    arg3: Offset32,
) -> Inst {
    let v5 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v6 = InstructionData::Store {
        opcode: Opcode::Store,
        args: v5.clone(),
        flags: arg0,
        offset: arg3,
    };
    let v7 = C::make_skeleton_inst_ctor(ctx, &v6);
    // Rule at <OUT_DIR>\clif_opt.isle line 570.
    return v7;
}

// Generated as internal constructor for term uload8.
pub fn constructor_uload8<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Uload8,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 579.
    return v6;
}

// Generated as internal constructor for term sload8.
pub fn constructor_sload8<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Sload8,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 588.
    return v6;
}

// Generated as internal constructor for term istore8.
pub fn constructor_istore8<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Value,
    arg3: Offset32,
) -> Inst {
    let v5 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v6 = InstructionData::Store {
        opcode: Opcode::Istore8,
        args: v5.clone(),
        flags: arg0,
        offset: arg3,
    };
    let v7 = C::make_skeleton_inst_ctor(ctx, &v6);
    // Rule at <OUT_DIR>\clif_opt.isle line 597.
    return v7;
}

// Generated as internal constructor for term uload16.
pub fn constructor_uload16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Uload16,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 606.
    return v6;
}

// Generated as internal constructor for term sload16.
pub fn constructor_sload16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Sload16,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 615.
    return v6;
}

// Generated as internal constructor for term istore16.
pub fn constructor_istore16<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Value,
    arg3: Offset32,
) -> Inst {
    let v5 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v6 = InstructionData::Store {
        opcode: Opcode::Istore16,
        args: v5.clone(),
        flags: arg0,
        offset: arg3,
    };
    let v7 = C::make_skeleton_inst_ctor(ctx, &v6);
    // Rule at <OUT_DIR>\clif_opt.isle line 624.
    return v7;
}

// Generated as internal constructor for term uload32.
pub fn constructor_uload32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Uload32,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 633.
    return v6;
}

// Generated as internal constructor for term sload32.
pub fn constructor_sload32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Sload32,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 642.
    return v6;
}

// Generated as internal constructor for term istore32.
pub fn constructor_istore32<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Value,
    arg3: Offset32,
) -> Inst {
    let v5 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v6 = InstructionData::Store {
        opcode: Opcode::Istore32,
        args: v5.clone(),
        flags: arg0,
        offset: arg3,
    };
    let v7 = C::make_skeleton_inst_ctor(ctx, &v6);
    // Rule at <OUT_DIR>\clif_opt.isle line 651.
    return v7;
}

// Generated as internal constructor for term stack_switch.
pub fn constructor_stack_switch<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: Value,
    arg2: Value,
) -> Inst {
    let v4 = &C::value_array_3_ctor(ctx, arg0, arg1, arg2);
    let v5 = InstructionData::Ternary {
        opcode: Opcode::StackSwitch,
        args: v4.clone(),
    };
    let v6 = C::make_skeleton_inst_ctor(ctx, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 660.
    return v6;
}

// Generated as internal constructor for term uload8x8.
pub fn constructor_uload8x8<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Uload8x8,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 669.
    return v6;
}

// Generated as internal constructor for term sload8x8.
pub fn constructor_sload8x8<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Sload8x8,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 678.
    return v6;
}

// Generated as internal constructor for term uload16x4.
pub fn constructor_uload16x4<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Uload16x4,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 687.
    return v6;
}

// Generated as internal constructor for term sload16x4.
pub fn constructor_sload16x4<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Sload16x4,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 696.
    return v6;
}

// Generated as internal constructor for term uload32x2.
pub fn constructor_uload32x2<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Uload32x2,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 705.
    return v6;
}

// Generated as internal constructor for term sload32x2.
pub fn constructor_sload32x2<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Sload32x2,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 714.
    return v6;
}

// Generated as internal constructor for term stack_load.
pub fn constructor_stack_load<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: StackSlot,
    arg2: Offset32,
) -> Value {
    let v4 = InstructionData::StackLoad {
        opcode: Opcode::StackLoad,
        stack_slot: arg1,
        offset: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at <OUT_DIR>\clif_opt.isle line 723.
    return v5;
}

// Generated as internal constructor for term stack_store.
pub fn constructor_stack_store<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: StackSlot,
    arg2: Offset32,
) -> Inst {
    let v4 = InstructionData::StackStore {
        opcode: Opcode::StackStore,
        arg: arg0,
        stack_slot: arg1,
        offset: arg2,
    };
    let v5 = C::make_skeleton_inst_ctor(ctx, &v4);
    // Rule at <OUT_DIR>\clif_opt.isle line 732.
    return v5;
}

// Generated as internal constructor for term stack_addr.
pub fn constructor_stack_addr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: StackSlot,
    arg2: Offset32,
) -> Value {
    let v4 = InstructionData::StackLoad {
        opcode: Opcode::StackAddr,
        stack_slot: arg1,
        offset: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at <OUT_DIR>\clif_opt.isle line 741.
    return v5;
}

// Generated as internal constructor for term dynamic_stack_load.
pub fn constructor_dynamic_stack_load<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: DynamicStackSlot,
) -> Value {
    let v3 = InstructionData::DynamicStackLoad {
        opcode: Opcode::DynamicStackLoad,
        dynamic_stack_slot: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at <OUT_DIR>\clif_opt.isle line 750.
    return v4;
}

// Generated as internal constructor for term dynamic_stack_store.
pub fn constructor_dynamic_stack_store<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: DynamicStackSlot,
) -> Inst {
    let v3 = InstructionData::DynamicStackStore {
        opcode: Opcode::DynamicStackStore,
        arg: arg0,
        dynamic_stack_slot: arg1,
    };
    let v4 = C::make_skeleton_inst_ctor(ctx, &v3);
    // Rule at <OUT_DIR>\clif_opt.isle line 759.
    return v4;
}

// Generated as internal constructor for term dynamic_stack_addr.
pub fn constructor_dynamic_stack_addr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: DynamicStackSlot,
) -> Value {
    let v3 = InstructionData::DynamicStackLoad {
        opcode: Opcode::DynamicStackAddr,
        dynamic_stack_slot: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at <OUT_DIR>\clif_opt.isle line 768.
    return v4;
}

// Generated as internal constructor for term global_value.
pub fn constructor_global_value<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: GlobalValue,
) -> Value {
    let v3 = InstructionData::UnaryGlobalValue {
        opcode: Opcode::GlobalValue,
        global_value: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at <OUT_DIR>\clif_opt.isle line 777.
    return v4;
}

// Generated as internal constructor for term symbol_value.
pub fn constructor_symbol_value<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: GlobalValue,
) -> Value {
    let v3 = InstructionData::UnaryGlobalValue {
        opcode: Opcode::SymbolValue,
        global_value: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at <OUT_DIR>\clif_opt.isle line 786.
    return v4;
}

// Generated as internal constructor for term tls_value.
pub fn constructor_tls_value<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: GlobalValue,
) -> Value {
    let v3 = InstructionData::UnaryGlobalValue {
        opcode: Opcode::TlsValue,
        global_value: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at <OUT_DIR>\clif_opt.isle line 795.
    return v4;
}

// Generated as internal constructor for term get_pinned_reg.
pub fn constructor_get_pinned_reg<C: Context>(
    ctx: &mut C,
) -> Inst {
    let v1 = InstructionData::NullAry {
        opcode: Opcode::GetPinnedReg,
    };
    let v2 = C::make_skeleton_inst_ctor(ctx, &v1);
    // Rule at <OUT_DIR>\clif_opt.isle line 804.
    return v2;
}

// Generated as internal constructor for term set_pinned_reg.
pub fn constructor_set_pinned_reg<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> Inst {
    let v2 = InstructionData::Unary {
        opcode: Opcode::SetPinnedReg,
        arg: arg0,
    };
    let v3 = C::make_skeleton_inst_ctor(ctx, &v2);
    // Rule at <OUT_DIR>\clif_opt.isle line 813.
    return v3;
}

// Generated as internal constructor for term get_frame_pointer.
pub fn constructor_get_frame_pointer<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> Value {
    let v2 = InstructionData::NullAry {
        opcode: Opcode::GetFramePointer,
    };
    let v3 = C::make_inst_ctor(ctx, arg0, &v2);
    // Rule at <OUT_DIR>\clif_opt.isle line 822.
    return v3;
}

// Generated as internal constructor for term get_stack_pointer.
pub fn constructor_get_stack_pointer<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> Value {
    let v2 = InstructionData::NullAry {
        opcode: Opcode::GetStackPointer,
    };
    let v3 = C::make_inst_ctor(ctx, arg0, &v2);
    // Rule at <OUT_DIR>\clif_opt.isle line 831.
    return v3;
}

// Generated as internal constructor for term get_return_address.
pub fn constructor_get_return_address<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> Value {
    let v2 = InstructionData::NullAry {
        opcode: Opcode::GetReturnAddress,
    };
    let v3 = C::make_inst_ctor(ctx, arg0, &v2);
    // Rule at <OUT_DIR>\clif_opt.isle line 840.
    return v3;
}

// Generated as internal constructor for term iconst.
pub fn constructor_iconst<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Imm64,
) -> Value {
    let v3 = InstructionData::UnaryImm {
        opcode: Opcode::Iconst,
        imm: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at <OUT_DIR>\clif_opt.isle line 849.
    return v4;
}

// Generated as internal constructor for term f16const.
pub fn constructor_f16const<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Ieee16,
) -> Value {
    let v3 = InstructionData::UnaryIeee16 {
        opcode: Opcode::F16const,
        imm: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at <OUT_DIR>\clif_opt.isle line 858.
    return v4;
}

// Generated as internal constructor for term f32const.
pub fn constructor_f32const<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Ieee32,
) -> Value {
    let v3 = InstructionData::UnaryIeee32 {
        opcode: Opcode::F32const,
        imm: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at <OUT_DIR>\clif_opt.isle line 867.
    return v4;
}

// Generated as internal constructor for term f64const.
pub fn constructor_f64const<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Ieee64,
) -> Value {
    let v3 = InstructionData::UnaryIeee64 {
        opcode: Opcode::F64const,
        imm: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at <OUT_DIR>\clif_opt.isle line 876.
    return v4;
}

// Generated as internal constructor for term f128const.
pub fn constructor_f128const<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Constant,
) -> Value {
    let v3 = InstructionData::UnaryConst {
        opcode: Opcode::F128const,
        constant_handle: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at <OUT_DIR>\clif_opt.isle line 885.
    return v4;
}

// Generated as internal constructor for term vconst.
pub fn constructor_vconst<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Constant,
) -> Value {
    let v3 = InstructionData::UnaryConst {
        opcode: Opcode::Vconst,
        constant_handle: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at <OUT_DIR>\clif_opt.isle line 894.
    return v4;
}

// Generated as internal constructor for term shuffle.
pub fn constructor_shuffle<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Immediate,
) -> Value {
    let v5 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v6 = InstructionData::Shuffle {
        opcode: Opcode::Shuffle,
        args: v5.clone(),
        imm: arg3,
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at <OUT_DIR>\clif_opt.isle line 903.
    return v7;
}

// Generated as internal constructor for term nop.
pub fn constructor_nop<C: Context>(
    ctx: &mut C,
) -> Inst {
    let v1 = InstructionData::NullAry {
        opcode: Opcode::Nop,
    };
    let v2 = C::make_skeleton_inst_ctor(ctx, &v1);
    // Rule at <OUT_DIR>\clif_opt.isle line 912.
    return v2;
}

// Generated as internal constructor for term select.
pub fn constructor_select<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Value {
    let v5 = &C::value_array_3_ctor(ctx, arg1, arg2, arg3);
    let v6 = InstructionData::Ternary {
        opcode: Opcode::Select,
        args: v5.clone(),
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at <OUT_DIR>\clif_opt.isle line 921.
    return v7;
}

// Generated as internal constructor for term select_spectre_guard.
pub fn constructor_select_spectre_guard<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Value {
    let v5 = &C::value_array_3_ctor(ctx, arg1, arg2, arg3);
    let v6 = InstructionData::Ternary {
        opcode: Opcode::SelectSpectreGuard,
        args: v5.clone(),
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at <OUT_DIR>\clif_opt.isle line 930.
    return v7;
}

// Generated as internal constructor for term bitselect.
pub fn constructor_bitselect<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Value {
    let v5 = &C::value_array_3_ctor(ctx, arg1, arg2, arg3);
    let v6 = InstructionData::Ternary {
        opcode: Opcode::Bitselect,
        args: v5.clone(),
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at <OUT_DIR>\clif_opt.isle line 939.
    return v7;
}

// Generated as internal constructor for term x86_blendv.
pub fn constructor_x86_blendv<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Value {
    let v5 = &C::value_array_3_ctor(ctx, arg1, arg2, arg3);
    let v6 = InstructionData::Ternary {
        opcode: Opcode::X86Blendv,
        args: v5.clone(),
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at <OUT_DIR>\clif_opt.isle line 948.
    return v7;
}

// Generated as internal constructor for term vany_true.
pub fn constructor_vany_true<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::VanyTrue,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at <OUT_DIR>\clif_opt.isle line 957.
    return v4;
}

// Generated as internal constructor for term vall_true.
pub fn constructor_vall_true<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::VallTrue,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at <OUT_DIR>\clif_opt.isle line 966.
    return v4;
}

// Generated as internal constructor for term vhigh_bits.
pub fn constructor_vhigh_bits<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::VhighBits,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at <OUT_DIR>\clif_opt.isle line 975.
    return v4;
}

// Generated as internal constructor for term icmp.
pub fn constructor_icmp<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &IntCC,
    arg2: Value,
    arg3: Value,
) -> Value {
    let v5 = &C::value_array_2_ctor(ctx, arg2, arg3);
    let v6 = InstructionData::IntCompare {
        opcode: Opcode::Icmp,
        args: v5.clone(),
        cond: arg1.clone(),
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at <OUT_DIR>\clif_opt.isle line 984.
    return v7;
}

// Generated as internal constructor for term icmp_imm.
pub fn constructor_icmp_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &IntCC,
    arg2: Value,
    arg3: Imm64,
) -> Value {
    let v5 = InstructionData::IntCompareImm {
        opcode: Opcode::IcmpImm,
        arg: arg2,
        cond: arg1.clone(),
        imm: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 993.
    return v6;
}

// Generated as internal constructor for term iadd.
pub fn constructor_iadd<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Iadd,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 1002.
    return v6;
}

// Generated as internal constructor for term isub.
pub fn constructor_isub<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Isub,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 1011.
    return v6;
}

// Generated as internal constructor for term ineg.
pub fn constructor_ineg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Ineg,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at <OUT_DIR>\clif_opt.isle line 1020.
    return v4;
}

// Generated as internal constructor for term iabs.
pub fn constructor_iabs<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Iabs,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at <OUT_DIR>\clif_opt.isle line 1029.
    return v4;
}

// Generated as internal constructor for term imul.
pub fn constructor_imul<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Imul,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 1038.
    return v6;
}

// Generated as internal constructor for term umulhi.
pub fn constructor_umulhi<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Umulhi,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 1047.
    return v6;
}

// Generated as internal constructor for term smulhi.
pub fn constructor_smulhi<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Smulhi,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 1056.
    return v6;
}

// Generated as internal constructor for term sqmul_round_sat.
pub fn constructor_sqmul_round_sat<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::SqmulRoundSat,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 1065.
    return v6;
}

// Generated as internal constructor for term x86_pmulhrsw.
pub fn constructor_x86_pmulhrsw<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::X86Pmulhrsw,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 1074.
    return v6;
}

// Generated as internal constructor for term udiv.
pub fn constructor_udiv<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: Value,
) -> Inst {
    let v3 = &C::value_array_2_ctor(ctx, arg0, arg1);
    let v4 = InstructionData::Binary {
        opcode: Opcode::Udiv,
        args: v3.clone(),
    };
    let v5 = C::make_skeleton_inst_ctor(ctx, &v4);
    // Rule at <OUT_DIR>\clif_opt.isle line 1083.
    return v5;
}

// Generated as internal constructor for term sdiv.
pub fn constructor_sdiv<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: Value,
) -> Inst {
    let v3 = &C::value_array_2_ctor(ctx, arg0, arg1);
    let v4 = InstructionData::Binary {
        opcode: Opcode::Sdiv,
        args: v3.clone(),
    };
    let v5 = C::make_skeleton_inst_ctor(ctx, &v4);
    // Rule at <OUT_DIR>\clif_opt.isle line 1092.
    return v5;
}

// Generated as internal constructor for term urem.
pub fn constructor_urem<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: Value,
) -> Inst {
    let v3 = &C::value_array_2_ctor(ctx, arg0, arg1);
    let v4 = InstructionData::Binary {
        opcode: Opcode::Urem,
        args: v3.clone(),
    };
    let v5 = C::make_skeleton_inst_ctor(ctx, &v4);
    // Rule at <OUT_DIR>\clif_opt.isle line 1101.
    return v5;
}

// Generated as internal constructor for term srem.
pub fn constructor_srem<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: Value,
) -> Inst {
    let v3 = &C::value_array_2_ctor(ctx, arg0, arg1);
    let v4 = InstructionData::Binary {
        opcode: Opcode::Srem,
        args: v3.clone(),
    };
    let v5 = C::make_skeleton_inst_ctor(ctx, &v4);
    // Rule at <OUT_DIR>\clif_opt.isle line 1110.
    return v5;
}

// Generated as internal constructor for term iadd_imm.
pub fn constructor_iadd_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::IaddImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at <OUT_DIR>\clif_opt.isle line 1119.
    return v5;
}

// Generated as internal constructor for term imul_imm.
pub fn constructor_imul_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::ImulImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at <OUT_DIR>\clif_opt.isle line 1128.
    return v5;
}

// Generated as internal constructor for term udiv_imm.
pub fn constructor_udiv_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::UdivImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at <OUT_DIR>\clif_opt.isle line 1137.
    return v5;
}

// Generated as internal constructor for term sdiv_imm.
pub fn constructor_sdiv_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::SdivImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at <OUT_DIR>\clif_opt.isle line 1146.
    return v5;
}

// Generated as internal constructor for term urem_imm.
pub fn constructor_urem_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::UremImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at <OUT_DIR>\clif_opt.isle line 1155.
    return v5;
}

// Generated as internal constructor for term srem_imm.
pub fn constructor_srem_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::SremImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at <OUT_DIR>\clif_opt.isle line 1164.
    return v5;
}

// Generated as internal constructor for term irsub_imm.
pub fn constructor_irsub_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::IrsubImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at <OUT_DIR>\clif_opt.isle line 1173.
    return v5;
}

// Generated as internal constructor for term sadd_overflow_cin.
pub fn constructor_sadd_overflow_cin<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: Value,
    arg2: Value,
) -> Inst {
    let v4 = &C::value_array_3_ctor(ctx, arg0, arg1, arg2);
    let v5 = InstructionData::Ternary {
        opcode: Opcode::SaddOverflowCin,
        args: v4.clone(),
    };
    let v6 = C::make_skeleton_inst_ctor(ctx, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 1182.
    return v6;
}

// Generated as internal constructor for term uadd_overflow_cin.
pub fn constructor_uadd_overflow_cin<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: Value,
    arg2: Value,
) -> Inst {
    let v4 = &C::value_array_3_ctor(ctx, arg0, arg1, arg2);
    let v5 = InstructionData::Ternary {
        opcode: Opcode::UaddOverflowCin,
        args: v4.clone(),
    };
    let v6 = C::make_skeleton_inst_ctor(ctx, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 1191.
    return v6;
}

// Generated as internal constructor for term uadd_overflow.
pub fn constructor_uadd_overflow<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: Value,
) -> Inst {
    let v3 = &C::value_array_2_ctor(ctx, arg0, arg1);
    let v4 = InstructionData::Binary {
        opcode: Opcode::UaddOverflow,
        args: v3.clone(),
    };
    let v5 = C::make_skeleton_inst_ctor(ctx, &v4);
    // Rule at <OUT_DIR>\clif_opt.isle line 1200.
    return v5;
}

// Generated as internal constructor for term sadd_overflow.
pub fn constructor_sadd_overflow<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: Value,
) -> Inst {
    let v3 = &C::value_array_2_ctor(ctx, arg0, arg1);
    let v4 = InstructionData::Binary {
        opcode: Opcode::SaddOverflow,
        args: v3.clone(),
    };
    let v5 = C::make_skeleton_inst_ctor(ctx, &v4);
    // Rule at <OUT_DIR>\clif_opt.isle line 1209.
    return v5;
}

// Generated as internal constructor for term usub_overflow.
pub fn constructor_usub_overflow<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: Value,
) -> Inst {
    let v3 = &C::value_array_2_ctor(ctx, arg0, arg1);
    let v4 = InstructionData::Binary {
        opcode: Opcode::UsubOverflow,
        args: v3.clone(),
    };
    let v5 = C::make_skeleton_inst_ctor(ctx, &v4);
    // Rule at <OUT_DIR>\clif_opt.isle line 1218.
    return v5;
}

// Generated as internal constructor for term ssub_overflow.
pub fn constructor_ssub_overflow<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: Value,
) -> Inst {
    let v3 = &C::value_array_2_ctor(ctx, arg0, arg1);
    let v4 = InstructionData::Binary {
        opcode: Opcode::SsubOverflow,
        args: v3.clone(),
    };
    let v5 = C::make_skeleton_inst_ctor(ctx, &v4);
    // Rule at <OUT_DIR>\clif_opt.isle line 1227.
    return v5;
}

// Generated as internal constructor for term umul_overflow.
pub fn constructor_umul_overflow<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: Value,
) -> Inst {
    let v3 = &C::value_array_2_ctor(ctx, arg0, arg1);
    let v4 = InstructionData::Binary {
        opcode: Opcode::UmulOverflow,
        args: v3.clone(),
    };
    let v5 = C::make_skeleton_inst_ctor(ctx, &v4);
    // Rule at <OUT_DIR>\clif_opt.isle line 1236.
    return v5;
}

// Generated as internal constructor for term smul_overflow.
pub fn constructor_smul_overflow<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: Value,
) -> Inst {
    let v3 = &C::value_array_2_ctor(ctx, arg0, arg1);
    let v4 = InstructionData::Binary {
        opcode: Opcode::SmulOverflow,
        args: v3.clone(),
    };
    let v5 = C::make_skeleton_inst_ctor(ctx, &v4);
    // Rule at <OUT_DIR>\clif_opt.isle line 1245.
    return v5;
}

// Generated as internal constructor for term uadd_overflow_trap.
pub fn constructor_uadd_overflow_trap<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: Value,
    arg2: &TrapCode,
) -> Inst {
    let v4 = &C::value_array_2_ctor(ctx, arg0, arg1);
    let v5 = InstructionData::IntAddTrap {
        opcode: Opcode::UaddOverflowTrap,
        args: v4.clone(),
        code: arg2.clone(),
    };
    let v6 = C::make_skeleton_inst_ctor(ctx, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 1254.
    return v6;
}

// Generated as internal constructor for term ssub_overflow_bin.
pub fn constructor_ssub_overflow_bin<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: Value,
    arg2: Value,
) -> Inst {
    let v4 = &C::value_array_3_ctor(ctx, arg0, arg1, arg2);
    let v5 = InstructionData::Ternary {
        opcode: Opcode::SsubOverflowBin,
        args: v4.clone(),
    };
    let v6 = C::make_skeleton_inst_ctor(ctx, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 1263.
    return v6;
}

// Generated as internal constructor for term usub_overflow_bin.
pub fn constructor_usub_overflow_bin<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: Value,
    arg2: Value,
) -> Inst {
    let v4 = &C::value_array_3_ctor(ctx, arg0, arg1, arg2);
    let v5 = InstructionData::Ternary {
        opcode: Opcode::UsubOverflowBin,
        args: v4.clone(),
    };
    let v6 = C::make_skeleton_inst_ctor(ctx, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 1272.
    return v6;
}

// Generated as internal constructor for term band.
pub fn constructor_band<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Band,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 1281.
    return v6;
}

// Generated as internal constructor for term bor.
pub fn constructor_bor<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Bor,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 1290.
    return v6;
}

// Generated as internal constructor for term bxor.
pub fn constructor_bxor<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Bxor,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 1299.
    return v6;
}

// Generated as internal constructor for term bnot.
pub fn constructor_bnot<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Bnot,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at <OUT_DIR>\clif_opt.isle line 1308.
    return v4;
}

// Generated as internal constructor for term band_not.
pub fn constructor_band_not<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::BandNot,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 1317.
    return v6;
}

// Generated as internal constructor for term bor_not.
pub fn constructor_bor_not<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::BorNot,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 1326.
    return v6;
}

// Generated as internal constructor for term bxor_not.
pub fn constructor_bxor_not<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::BxorNot,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 1335.
    return v6;
}

// Generated as internal constructor for term band_imm.
pub fn constructor_band_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::BandImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at <OUT_DIR>\clif_opt.isle line 1344.
    return v5;
}

// Generated as internal constructor for term bor_imm.
pub fn constructor_bor_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::BorImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at <OUT_DIR>\clif_opt.isle line 1353.
    return v5;
}

// Generated as internal constructor for term bxor_imm.
pub fn constructor_bxor_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::BxorImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at <OUT_DIR>\clif_opt.isle line 1362.
    return v5;
}

// Generated as internal constructor for term rotl.
pub fn constructor_rotl<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Rotl,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 1371.
    return v6;
}

// Generated as internal constructor for term rotr.
pub fn constructor_rotr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Rotr,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 1380.
    return v6;
}

// Generated as internal constructor for term rotl_imm.
pub fn constructor_rotl_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::RotlImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at <OUT_DIR>\clif_opt.isle line 1389.
    return v5;
}

// Generated as internal constructor for term rotr_imm.
pub fn constructor_rotr_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::RotrImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at <OUT_DIR>\clif_opt.isle line 1398.
    return v5;
}

// Generated as internal constructor for term ishl.
pub fn constructor_ishl<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Ishl,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 1407.
    return v6;
}

// Generated as internal constructor for term ushr.
pub fn constructor_ushr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Ushr,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 1416.
    return v6;
}

// Generated as internal constructor for term sshr.
pub fn constructor_sshr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Sshr,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 1425.
    return v6;
}

// Generated as internal constructor for term ishl_imm.
pub fn constructor_ishl_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::IshlImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at <OUT_DIR>\clif_opt.isle line 1434.
    return v5;
}

// Generated as internal constructor for term ushr_imm.
pub fn constructor_ushr_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::UshrImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at <OUT_DIR>\clif_opt.isle line 1443.
    return v5;
}

// Generated as internal constructor for term sshr_imm.
pub fn constructor_sshr_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::SshrImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at <OUT_DIR>\clif_opt.isle line 1452.
    return v5;
}

// Generated as internal constructor for term bitrev.
pub fn constructor_bitrev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Bitrev,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at <OUT_DIR>\clif_opt.isle line 1461.
    return v4;
}

// Generated as internal constructor for term clz.
pub fn constructor_clz<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Clz,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at <OUT_DIR>\clif_opt.isle line 1470.
    return v4;
}

// Generated as internal constructor for term cls.
pub fn constructor_cls<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Cls,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at <OUT_DIR>\clif_opt.isle line 1479.
    return v4;
}

// Generated as internal constructor for term ctz.
pub fn constructor_ctz<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Ctz,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at <OUT_DIR>\clif_opt.isle line 1488.
    return v4;
}

// Generated as internal constructor for term bswap.
pub fn constructor_bswap<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Bswap,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at <OUT_DIR>\clif_opt.isle line 1497.
    return v4;
}

// Generated as internal constructor for term popcnt.
pub fn constructor_popcnt<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Popcnt,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at <OUT_DIR>\clif_opt.isle line 1506.
    return v4;
}

// Generated as internal constructor for term fcmp.
pub fn constructor_fcmp<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FloatCC,
    arg2: Value,
    arg3: Value,
) -> Value {
    let v5 = &C::value_array_2_ctor(ctx, arg2, arg3);
    let v6 = InstructionData::FloatCompare {
        opcode: Opcode::Fcmp,
        args: v5.clone(),
        cond: arg1.clone(),
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at <OUT_DIR>\clif_opt.isle line 1515.
    return v7;
}

// Generated as internal constructor for term fadd.
pub fn constructor_fadd<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Fadd,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 1524.
    return v6;
}

// Generated as internal constructor for term fsub.
pub fn constructor_fsub<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Fsub,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 1533.
    return v6;
}

// Generated as internal constructor for term fmul.
pub fn constructor_fmul<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Fmul,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 1542.
    return v6;
}

// Generated as internal constructor for term fdiv.
pub fn constructor_fdiv<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Fdiv,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 1551.
    return v6;
}

// Generated as internal constructor for term sqrt.
pub fn constructor_sqrt<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Sqrt,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at <OUT_DIR>\clif_opt.isle line 1560.
    return v4;
}

// Generated as internal constructor for term fma.
pub fn constructor_fma<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Value {
    let v5 = &C::value_array_3_ctor(ctx, arg1, arg2, arg3);
    let v6 = InstructionData::Ternary {
        opcode: Opcode::Fma,
        args: v5.clone(),
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at <OUT_DIR>\clif_opt.isle line 1569.
    return v7;
}

// Generated as internal constructor for term fneg.
pub fn constructor_fneg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Fneg,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at <OUT_DIR>\clif_opt.isle line 1578.
    return v4;
}

// Generated as internal constructor for term fabs.
pub fn constructor_fabs<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Fabs,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at <OUT_DIR>\clif_opt.isle line 1587.
    return v4;
}

// Generated as internal constructor for term fcopysign.
pub fn constructor_fcopysign<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Fcopysign,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 1596.
    return v6;
}

// Generated as internal constructor for term fmin.
pub fn constructor_fmin<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Fmin,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 1605.
    return v6;
}

// Generated as internal constructor for term fmax.
pub fn constructor_fmax<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Fmax,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 1614.
    return v6;
}

// Generated as internal constructor for term ceil.
pub fn constructor_ceil<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Ceil,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at <OUT_DIR>\clif_opt.isle line 1623.
    return v4;
}

// Generated as internal constructor for term floor.
pub fn constructor_floor<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Floor,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at <OUT_DIR>\clif_opt.isle line 1632.
    return v4;
}

// Generated as internal constructor for term trunc.
pub fn constructor_trunc<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Trunc,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at <OUT_DIR>\clif_opt.isle line 1641.
    return v4;
}

// Generated as internal constructor for term nearest.
pub fn constructor_nearest<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Nearest,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at <OUT_DIR>\clif_opt.isle line 1650.
    return v4;
}

// Generated as internal constructor for term bitcast.
pub fn constructor_bitcast<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
) -> Value {
    let v4 = InstructionData::LoadNoOffset {
        opcode: Opcode::Bitcast,
        arg: arg2,
        flags: arg1,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at <OUT_DIR>\clif_opt.isle line 1659.
    return v5;
}

// Generated as internal constructor for term scalar_to_vector.
pub fn constructor_scalar_to_vector<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::ScalarToVector,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at <OUT_DIR>\clif_opt.isle line 1668.
    return v4;
}

// Generated as internal constructor for term bmask.
pub fn constructor_bmask<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Bmask,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at <OUT_DIR>\clif_opt.isle line 1677.
    return v4;
}

// Generated as internal constructor for term ireduce.
pub fn constructor_ireduce<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Ireduce,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at <OUT_DIR>\clif_opt.isle line 1686.
    return v4;
}

// Generated as internal constructor for term snarrow.
pub fn constructor_snarrow<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Snarrow,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 1695.
    return v6;
}

// Generated as internal constructor for term unarrow.
pub fn constructor_unarrow<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Unarrow,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 1704.
    return v6;
}

// Generated as internal constructor for term uunarrow.
pub fn constructor_uunarrow<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Uunarrow,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 1713.
    return v6;
}

// Generated as internal constructor for term swiden_low.
pub fn constructor_swiden_low<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::SwidenLow,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at <OUT_DIR>\clif_opt.isle line 1722.
    return v4;
}

// Generated as internal constructor for term swiden_high.
pub fn constructor_swiden_high<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::SwidenHigh,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at <OUT_DIR>\clif_opt.isle line 1731.
    return v4;
}

// Generated as internal constructor for term uwiden_low.
pub fn constructor_uwiden_low<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::UwidenLow,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at <OUT_DIR>\clif_opt.isle line 1740.
    return v4;
}

// Generated as internal constructor for term uwiden_high.
pub fn constructor_uwiden_high<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::UwidenHigh,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at <OUT_DIR>\clif_opt.isle line 1749.
    return v4;
}

// Generated as internal constructor for term iadd_pairwise.
pub fn constructor_iadd_pairwise<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::IaddPairwise,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 1758.
    return v6;
}

// Generated as internal constructor for term x86_pmaddubsw.
pub fn constructor_x86_pmaddubsw<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::X86Pmaddubsw,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 1767.
    return v6;
}

// Generated as internal constructor for term uextend.
pub fn constructor_uextend<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Uextend,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at <OUT_DIR>\clif_opt.isle line 1776.
    return v4;
}

// Generated as internal constructor for term sextend.
pub fn constructor_sextend<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Sextend,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at <OUT_DIR>\clif_opt.isle line 1785.
    return v4;
}

// Generated as internal constructor for term fpromote.
pub fn constructor_fpromote<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Fpromote,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at <OUT_DIR>\clif_opt.isle line 1794.
    return v4;
}

// Generated as internal constructor for term fdemote.
pub fn constructor_fdemote<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Fdemote,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at <OUT_DIR>\clif_opt.isle line 1803.
    return v4;
}

// Generated as internal constructor for term fvdemote.
pub fn constructor_fvdemote<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Fvdemote,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at <OUT_DIR>\clif_opt.isle line 1812.
    return v4;
}

// Generated as internal constructor for term fvpromote_low.
pub fn constructor_fvpromote_low<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::FvpromoteLow,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at <OUT_DIR>\clif_opt.isle line 1821.
    return v4;
}

// Generated as internal constructor for term fcvt_to_uint.
pub fn constructor_fcvt_to_uint<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> Inst {
    let v2 = InstructionData::Unary {
        opcode: Opcode::FcvtToUint,
        arg: arg0,
    };
    let v3 = C::make_skeleton_inst_ctor(ctx, &v2);
    // Rule at <OUT_DIR>\clif_opt.isle line 1830.
    return v3;
}

// Generated as internal constructor for term fcvt_to_sint.
pub fn constructor_fcvt_to_sint<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> Inst {
    let v2 = InstructionData::Unary {
        opcode: Opcode::FcvtToSint,
        arg: arg0,
    };
    let v3 = C::make_skeleton_inst_ctor(ctx, &v2);
    // Rule at <OUT_DIR>\clif_opt.isle line 1839.
    return v3;
}

// Generated as internal constructor for term fcvt_to_uint_sat.
pub fn constructor_fcvt_to_uint_sat<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::FcvtToUintSat,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at <OUT_DIR>\clif_opt.isle line 1848.
    return v4;
}

// Generated as internal constructor for term fcvt_to_sint_sat.
pub fn constructor_fcvt_to_sint_sat<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::FcvtToSintSat,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at <OUT_DIR>\clif_opt.isle line 1857.
    return v4;
}

// Generated as internal constructor for term x86_cvtt2dq.
pub fn constructor_x86_cvtt2dq<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::X86Cvtt2dq,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at <OUT_DIR>\clif_opt.isle line 1866.
    return v4;
}

// Generated as internal constructor for term fcvt_from_uint.
pub fn constructor_fcvt_from_uint<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::FcvtFromUint,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at <OUT_DIR>\clif_opt.isle line 1875.
    return v4;
}

// Generated as internal constructor for term fcvt_from_sint.
pub fn constructor_fcvt_from_sint<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::FcvtFromSint,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at <OUT_DIR>\clif_opt.isle line 1884.
    return v4;
}

// Generated as internal constructor for term isplit.
pub fn constructor_isplit<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> Inst {
    let v2 = InstructionData::Unary {
        opcode: Opcode::Isplit,
        arg: arg0,
    };
    let v3 = C::make_skeleton_inst_ctor(ctx, &v2);
    // Rule at <OUT_DIR>\clif_opt.isle line 1893.
    return v3;
}

// Generated as internal constructor for term iconcat.
pub fn constructor_iconcat<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Iconcat,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 1902.
    return v6;
}

// Generated as internal constructor for term atomic_rmw.
pub fn constructor_atomic_rmw<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: &AtomicRmwOp,
    arg2: Value,
    arg3: Value,
) -> Inst {
    let v5 = &C::value_array_2_ctor(ctx, arg2, arg3);
    let v6 = InstructionData::AtomicRmw {
        opcode: Opcode::AtomicRmw,
        args: v5.clone(),
        flags: arg0,
        op: arg1.clone(),
    };
    let v7 = C::make_skeleton_inst_ctor(ctx, &v6);
    // Rule at <OUT_DIR>\clif_opt.isle line 1911.
    return v7;
}

// Generated as internal constructor for term atomic_cas.
pub fn constructor_atomic_cas<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Inst {
    let v5 = &C::value_array_3_ctor(ctx, arg1, arg2, arg3);
    let v6 = InstructionData::AtomicCas {
        opcode: Opcode::AtomicCas,
        args: v5.clone(),
        flags: arg0,
    };
    let v7 = C::make_skeleton_inst_ctor(ctx, &v6);
    // Rule at <OUT_DIR>\clif_opt.isle line 1920.
    return v7;
}

// Generated as internal constructor for term atomic_load.
pub fn constructor_atomic_load<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
) -> Inst {
    let v3 = InstructionData::LoadNoOffset {
        opcode: Opcode::AtomicLoad,
        arg: arg1,
        flags: arg0,
    };
    let v4 = C::make_skeleton_inst_ctor(ctx, &v3);
    // Rule at <OUT_DIR>\clif_opt.isle line 1929.
    return v4;
}

// Generated as internal constructor for term atomic_store.
pub fn constructor_atomic_store<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Value,
) -> Inst {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::StoreNoOffset {
        opcode: Opcode::AtomicStore,
        args: v4.clone(),
        flags: arg0,
    };
    let v6 = C::make_skeleton_inst_ctor(ctx, &v5);
    // Rule at <OUT_DIR>\clif_opt.isle line 1938.
    return v6;
}

// Generated as internal constructor for term fence.
pub fn constructor_fence<C: Context>(
    ctx: &mut C,
) -> Inst {
    let v1 = InstructionData::NullAry {
        opcode: Opcode::Fence,
    };
    let v2 = C::make_skeleton_inst_ctor(ctx, &v1);
    // Rule at <OUT_DIR>\clif_opt.isle line 1947.
    return v2;
}

// Generated as internal constructor for term extract_vector.
pub fn constructor_extract_vector<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Uimm8,
) -> Value {
    let v4 = InstructionData::BinaryImm8 {
        opcode: Opcode::ExtractVector,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at <OUT_DIR>\clif_opt.isle line 1956.
    return v5;
}
