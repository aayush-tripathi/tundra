#[doc(hidden)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:36
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub enum Inst<R: Registers> {
    addb_i(addb_i<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    addw_i(addw_i<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    addl_i(addl_i<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    addq_i_sxl(addq_i_sxl<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    addb_mi(addb_mi<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    addw_mi(addw_mi<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    addl_mi(addl_mi<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    addq_mi_sxl(addq_mi_sxl<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    addl_mi_sxb(addl_mi_sxb<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    addq_mi_sxb(addq_mi_sxb<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    addb_mr(addb_mr<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    addw_mr(addw_mr<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    addl_mr(addl_mr<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    addq_mr(addq_mr<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    addb_rm(addb_rm<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    addw_rm(addw_rm<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    addl_rm(addl_rm<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    addq_rm(addq_rm<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    adcb_i(adcb_i<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    adcw_i(adcw_i<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    adcl_i(adcl_i<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    adcq_i_sxl(adcq_i_sxl<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    adcb_mi(adcb_mi<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    adcw_mi(adcw_mi<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    adcl_mi(adcl_mi<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    adcq_mi_sxl(adcq_mi_sxl<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    adcl_mi_sxb(adcl_mi_sxb<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    adcq_mi_sxb(adcq_mi_sxb<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    adcb_mr(adcb_mr<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    adcw_mr(adcw_mr<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    adcl_mr(adcl_mr<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    adcq_mr(adcq_mr<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    adcb_rm(adcb_rm<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    adcw_rm(adcw_rm<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    adcl_rm(adcl_rm<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    adcq_rm(adcq_rm<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_addb_mi(lock_addb_mi<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_addw_mi(lock_addw_mi<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_addl_mi(lock_addl_mi<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_addq_mi_sxl(lock_addq_mi_sxl<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_addl_mi_sxb(lock_addl_mi_sxb<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_addq_mi_sxb(lock_addq_mi_sxb<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_addb_mr(lock_addb_mr<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_addw_mr(lock_addw_mr<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_addl_mr(lock_addl_mr<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_addq_mr(lock_addq_mr<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_adcb_mi(lock_adcb_mi<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_adcw_mi(lock_adcw_mi<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_adcl_mi(lock_adcl_mi<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_adcq_mi_sxl(lock_adcq_mi_sxl<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_adcl_mi_sxb(lock_adcl_mi_sxb<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_adcq_mi_sxb(lock_adcq_mi_sxb<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_adcb_mr(lock_adcb_mr<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_adcw_mr(lock_adcw_mr<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_adcl_mr(lock_adcl_mr<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_adcq_mr(lock_adcq_mr<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    addss_a(addss_a<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    addsd_a(addsd_a<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    addps_a(addps_a<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    addpd_a(addpd_a<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    andb_i(andb_i<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    andw_i(andw_i<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    andl_i(andl_i<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    andq_i_sxl(andq_i_sxl<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    andb_mi(andb_mi<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    andw_mi(andw_mi<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    andl_mi(andl_mi<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    andq_mi_sxl(andq_mi_sxl<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    andl_mi_sxb(andl_mi_sxb<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    andq_mi_sxb(andq_mi_sxb<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    andb_mr(andb_mr<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    andw_mr(andw_mr<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    andl_mr(andl_mr<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    andq_mr(andq_mr<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    andb_rm(andb_rm<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    andw_rm(andw_rm<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    andl_rm(andl_rm<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    andq_rm(andq_rm<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_andb_mi(lock_andb_mi<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_andw_mi(lock_andw_mi<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_andl_mi(lock_andl_mi<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_andq_mi_sxl(lock_andq_mi_sxl<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_andl_mi_sxb(lock_andl_mi_sxb<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_andq_mi_sxb(lock_andq_mi_sxb<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_andb_mr(lock_andb_mr<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_andw_mr(lock_andw_mr<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_andl_mr(lock_andl_mr<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_andq_mr(lock_andq_mr<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    andps_a(andps_a<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    andpd_a(andpd_a<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    orb_i(orb_i<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    orw_i(orw_i<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    orl_i(orl_i<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    orq_i_sxl(orq_i_sxl<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    orb_mi(orb_mi<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    orw_mi(orw_mi<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    orl_mi(orl_mi<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    orq_mi_sxl(orq_mi_sxl<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    orl_mi_sxb(orl_mi_sxb<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    orq_mi_sxb(orq_mi_sxb<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    orb_mr(orb_mr<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    orw_mr(orw_mr<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    orl_mr(orl_mr<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    orq_mr(orq_mr<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    orb_rm(orb_rm<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    orw_rm(orw_rm<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    orl_rm(orl_rm<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    orq_rm(orq_rm<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_orb_mi(lock_orb_mi<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_orw_mi(lock_orw_mi<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_orl_mi(lock_orl_mi<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_orq_mi_sxl(lock_orq_mi_sxl<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_orl_mi_sxb(lock_orl_mi_sxb<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_orq_mi_sxb(lock_orq_mi_sxb<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_orb_mr(lock_orb_mr<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_orw_mr(lock_orw_mr<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_orl_mr(lock_orl_mr<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_orq_mr(lock_orq_mr<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    orps_a(orps_a<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    orpd_a(orpd_a<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    shldw_mri(shldw_mri<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    shldw_mrc(shldw_mrc<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    shldl_mri(shldl_mri<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    shldq_mri(shldq_mri<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    shldl_mrc(shldl_mrc<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    shldq_mrc(shldq_mrc<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    subb_i(subb_i<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    subw_i(subw_i<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    subl_i(subl_i<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    subq_i_sxl(subq_i_sxl<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    subb_mi(subb_mi<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    subw_mi(subw_mi<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    subl_mi(subl_mi<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    subq_mi_sxl(subq_mi_sxl<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    subl_mi_sxb(subl_mi_sxb<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    subq_mi_sxb(subq_mi_sxb<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    subb_mr(subb_mr<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    subw_mr(subw_mr<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    subl_mr(subl_mr<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    subq_mr(subq_mr<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    subb_rm(subb_rm<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    subw_rm(subw_rm<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    subl_rm(subl_rm<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    subq_rm(subq_rm<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    sbbb_i(sbbb_i<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    sbbw_i(sbbw_i<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    sbbl_i(sbbl_i<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    sbbq_i_sxl(sbbq_i_sxl<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    sbbb_mi(sbbb_mi<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    sbbw_mi(sbbw_mi<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    sbbl_mi(sbbl_mi<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    sbbq_mi_sxl(sbbq_mi_sxl<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    sbbl_mi_sxb(sbbl_mi_sxb<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    sbbq_mi_sxb(sbbq_mi_sxb<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    sbbb_mr(sbbb_mr<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    sbbw_mr(sbbw_mr<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    sbbl_mr(sbbl_mr<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    sbbq_mr(sbbq_mr<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    sbbb_rm(sbbb_rm<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    sbbw_rm(sbbw_rm<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    sbbl_rm(sbbl_rm<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    sbbq_rm(sbbq_rm<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_subb_mi(lock_subb_mi<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_subw_mi(lock_subw_mi<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_subl_mi(lock_subl_mi<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_subq_mi_sxl(lock_subq_mi_sxl<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_subl_mi_sxb(lock_subl_mi_sxb<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_subq_mi_sxb(lock_subq_mi_sxb<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_subb_mr(lock_subb_mr<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_subw_mr(lock_subw_mr<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_subl_mr(lock_subl_mr<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_subq_mr(lock_subq_mr<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_sbbb_mi(lock_sbbb_mi<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_sbbw_mi(lock_sbbw_mi<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_sbbl_mi(lock_sbbl_mi<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_sbbq_mi_sxl(lock_sbbq_mi_sxl<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_sbbl_mi_sxb(lock_sbbl_mi_sxb<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_sbbq_mi_sxb(lock_sbbq_mi_sxb<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_sbbb_mr(lock_sbbb_mr<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_sbbw_mr(lock_sbbw_mr<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_sbbl_mr(lock_sbbl_mr<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_sbbq_mr(lock_sbbq_mr<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    subss_a(subss_a<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    subsd_a(subsd_a<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    subps_a(subps_a<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    subpd_a(subpd_a<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    xorb_i(xorb_i<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    xorw_i(xorw_i<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    xorl_i(xorl_i<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    xorq_i_sxl(xorq_i_sxl<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    xorb_mi(xorb_mi<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    xorw_mi(xorw_mi<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    xorl_mi(xorl_mi<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    xorq_mi_sxl(xorq_mi_sxl<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    xorl_mi_sxb(xorl_mi_sxb<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    xorq_mi_sxb(xorq_mi_sxb<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    xorb_mr(xorb_mr<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    xorw_mr(xorw_mr<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    xorl_mr(xorl_mr<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    xorq_mr(xorq_mr<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    xorb_rm(xorb_rm<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    xorw_rm(xorw_rm<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    xorl_rm(xorl_rm<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    xorq_rm(xorq_rm<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_xorb_mi(lock_xorb_mi<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_xorw_mi(lock_xorw_mi<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_xorl_mi(lock_xorl_mi<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_xorq_mi_sxl(lock_xorq_mi_sxl<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_xorl_mi_sxb(lock_xorl_mi_sxb<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_xorq_mi_sxb(lock_xorq_mi_sxb<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_xorb_mr(lock_xorb_mr<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_xorw_mr(lock_xorw_mr<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_xorl_mr(lock_xorl_mr<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    lock_xorq_mr(lock_xorq_mr<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    xorps_a(xorps_a<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
    xorpd_a(xorpd_a<R>), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:43
}
impl<R: Registers> std::fmt::Display for Inst<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::addb_i(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::addw_i(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::addl_i(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::addq_i_sxl(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::addb_mi(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::addw_mi(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::addl_mi(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::addq_mi_sxl(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::addl_mi_sxb(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::addq_mi_sxb(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::addb_mr(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::addw_mr(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::addl_mr(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::addq_mr(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::addb_rm(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::addw_rm(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::addl_rm(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::addq_rm(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::adcb_i(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::adcw_i(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::adcl_i(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::adcq_i_sxl(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::adcb_mi(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::adcw_mi(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::adcl_mi(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::adcq_mi_sxl(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::adcl_mi_sxb(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::adcq_mi_sxb(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::adcb_mr(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::adcw_mr(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::adcl_mr(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::adcq_mr(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::adcb_rm(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::adcw_rm(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::adcl_rm(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::adcq_rm(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_addb_mi(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_addw_mi(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_addl_mi(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_addq_mi_sxl(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_addl_mi_sxb(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_addq_mi_sxb(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_addb_mr(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_addw_mr(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_addl_mr(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_addq_mr(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_adcb_mi(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_adcw_mi(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_adcl_mi(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_adcq_mi_sxl(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_adcl_mi_sxb(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_adcq_mi_sxb(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_adcb_mr(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_adcw_mr(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_adcl_mr(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_adcq_mr(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::addss_a(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::addsd_a(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::addps_a(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::addpd_a(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::andb_i(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::andw_i(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::andl_i(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::andq_i_sxl(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::andb_mi(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::andw_mi(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::andl_mi(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::andq_mi_sxl(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::andl_mi_sxb(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::andq_mi_sxb(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::andb_mr(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::andw_mr(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::andl_mr(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::andq_mr(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::andb_rm(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::andw_rm(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::andl_rm(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::andq_rm(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_andb_mi(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_andw_mi(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_andl_mi(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_andq_mi_sxl(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_andl_mi_sxb(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_andq_mi_sxb(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_andb_mr(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_andw_mr(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_andl_mr(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_andq_mr(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::andps_a(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::andpd_a(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::orb_i(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::orw_i(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::orl_i(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::orq_i_sxl(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::orb_mi(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::orw_mi(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::orl_mi(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::orq_mi_sxl(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::orl_mi_sxb(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::orq_mi_sxb(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::orb_mr(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::orw_mr(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::orl_mr(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::orq_mr(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::orb_rm(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::orw_rm(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::orl_rm(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::orq_rm(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_orb_mi(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_orw_mi(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_orl_mi(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_orq_mi_sxl(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_orl_mi_sxb(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_orq_mi_sxb(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_orb_mr(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_orw_mr(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_orl_mr(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_orq_mr(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::orps_a(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::orpd_a(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::shldw_mri(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::shldw_mrc(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::shldl_mri(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::shldq_mri(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::shldl_mrc(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::shldq_mrc(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::subb_i(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::subw_i(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::subl_i(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::subq_i_sxl(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::subb_mi(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::subw_mi(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::subl_mi(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::subq_mi_sxl(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::subl_mi_sxb(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::subq_mi_sxb(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::subb_mr(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::subw_mr(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::subl_mr(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::subq_mr(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::subb_rm(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::subw_rm(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::subl_rm(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::subq_rm(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::sbbb_i(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::sbbw_i(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::sbbl_i(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::sbbq_i_sxl(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::sbbb_mi(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::sbbw_mi(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::sbbl_mi(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::sbbq_mi_sxl(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::sbbl_mi_sxb(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::sbbq_mi_sxb(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::sbbb_mr(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::sbbw_mr(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::sbbl_mr(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::sbbq_mr(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::sbbb_rm(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::sbbw_rm(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::sbbl_rm(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::sbbq_rm(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_subb_mi(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_subw_mi(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_subl_mi(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_subq_mi_sxl(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_subl_mi_sxb(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_subq_mi_sxb(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_subb_mr(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_subw_mr(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_subl_mr(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_subq_mr(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_sbbb_mi(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_sbbw_mi(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_sbbl_mi(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_sbbq_mi_sxl(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_sbbl_mi_sxb(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_sbbq_mi_sxb(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_sbbb_mr(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_sbbw_mr(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_sbbl_mr(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_sbbq_mr(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::subss_a(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::subsd_a(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::subps_a(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::subpd_a(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::xorb_i(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::xorw_i(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::xorl_i(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::xorq_i_sxl(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::xorb_mi(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::xorw_mi(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::xorl_mi(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::xorq_mi_sxl(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::xorl_mi_sxb(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::xorq_mi_sxb(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::xorb_mr(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::xorw_mr(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::xorl_mr(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::xorq_mr(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::xorb_rm(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::xorw_rm(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::xorl_rm(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::xorq_rm(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_xorb_mi(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_xorw_mi(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_xorl_mi(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_xorq_mi_sxl(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_xorl_mi_sxb(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_xorq_mi_sxb(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_xorb_mr(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_xorw_mr(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_xorl_mr(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::lock_xorq_mr(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::xorps_a(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
            Self::xorpd_a(i) => write!(f, "{i}"), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:70
        }
    }
}
impl<R: Registers> Inst<R> {
    pub fn encode(&self, b: &mut impl CodeSink, o: &impl KnownOffsetTable) {
        match self {
            Self::addb_i(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::addw_i(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::addl_i(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::addq_i_sxl(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::addb_mi(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::addw_mi(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::addl_mi(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::addq_mi_sxl(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::addl_mi_sxb(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::addq_mi_sxb(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::addb_mr(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::addw_mr(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::addl_mr(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::addq_mr(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::addb_rm(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::addw_rm(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::addl_rm(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::addq_rm(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::adcb_i(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::adcw_i(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::adcl_i(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::adcq_i_sxl(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::adcb_mi(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::adcw_mi(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::adcl_mi(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::adcq_mi_sxl(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::adcl_mi_sxb(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::adcq_mi_sxb(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::adcb_mr(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::adcw_mr(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::adcl_mr(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::adcq_mr(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::adcb_rm(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::adcw_rm(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::adcl_rm(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::adcq_rm(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_addb_mi(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_addw_mi(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_addl_mi(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_addq_mi_sxl(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_addl_mi_sxb(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_addq_mi_sxb(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_addb_mr(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_addw_mr(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_addl_mr(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_addq_mr(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_adcb_mi(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_adcw_mi(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_adcl_mi(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_adcq_mi_sxl(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_adcl_mi_sxb(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_adcq_mi_sxb(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_adcb_mr(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_adcw_mr(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_adcl_mr(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_adcq_mr(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::addss_a(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::addsd_a(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::addps_a(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::addpd_a(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::andb_i(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::andw_i(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::andl_i(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::andq_i_sxl(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::andb_mi(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::andw_mi(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::andl_mi(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::andq_mi_sxl(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::andl_mi_sxb(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::andq_mi_sxb(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::andb_mr(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::andw_mr(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::andl_mr(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::andq_mr(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::andb_rm(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::andw_rm(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::andl_rm(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::andq_rm(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_andb_mi(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_andw_mi(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_andl_mi(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_andq_mi_sxl(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_andl_mi_sxb(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_andq_mi_sxb(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_andb_mr(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_andw_mr(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_andl_mr(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_andq_mr(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::andps_a(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::andpd_a(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::orb_i(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::orw_i(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::orl_i(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::orq_i_sxl(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::orb_mi(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::orw_mi(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::orl_mi(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::orq_mi_sxl(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::orl_mi_sxb(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::orq_mi_sxb(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::orb_mr(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::orw_mr(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::orl_mr(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::orq_mr(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::orb_rm(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::orw_rm(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::orl_rm(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::orq_rm(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_orb_mi(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_orw_mi(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_orl_mi(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_orq_mi_sxl(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_orl_mi_sxb(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_orq_mi_sxb(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_orb_mr(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_orw_mr(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_orl_mr(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_orq_mr(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::orps_a(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::orpd_a(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::shldw_mri(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::shldw_mrc(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::shldl_mri(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::shldq_mri(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::shldl_mrc(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::shldq_mrc(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::subb_i(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::subw_i(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::subl_i(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::subq_i_sxl(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::subb_mi(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::subw_mi(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::subl_mi(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::subq_mi_sxl(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::subl_mi_sxb(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::subq_mi_sxb(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::subb_mr(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::subw_mr(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::subl_mr(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::subq_mr(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::subb_rm(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::subw_rm(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::subl_rm(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::subq_rm(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::sbbb_i(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::sbbw_i(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::sbbl_i(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::sbbq_i_sxl(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::sbbb_mi(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::sbbw_mi(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::sbbl_mi(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::sbbq_mi_sxl(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::sbbl_mi_sxb(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::sbbq_mi_sxb(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::sbbb_mr(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::sbbw_mr(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::sbbl_mr(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::sbbq_mr(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::sbbb_rm(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::sbbw_rm(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::sbbl_rm(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::sbbq_rm(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_subb_mi(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_subw_mi(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_subl_mi(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_subq_mi_sxl(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_subl_mi_sxb(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_subq_mi_sxb(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_subb_mr(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_subw_mr(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_subl_mr(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_subq_mr(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_sbbb_mi(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_sbbw_mi(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_sbbl_mi(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_sbbq_mi_sxl(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_sbbl_mi_sxb(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_sbbq_mi_sxb(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_sbbb_mr(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_sbbw_mr(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_sbbl_mr(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_sbbq_mr(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::subss_a(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::subsd_a(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::subps_a(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::subpd_a(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::xorb_i(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::xorw_i(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::xorl_i(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::xorq_i_sxl(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::xorb_mi(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::xorw_mi(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::xorl_mi(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::xorq_mi_sxl(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::xorl_mi_sxb(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::xorq_mi_sxb(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::xorb_mr(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::xorw_mr(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::xorl_mr(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::xorq_mr(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::xorb_rm(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::xorw_rm(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::xorl_rm(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::xorq_rm(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_xorb_mi(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_xorw_mi(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_xorl_mi(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_xorq_mi_sxl(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_xorl_mi_sxb(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_xorq_mi_sxb(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_xorb_mr(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_xorw_mr(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_xorl_mr(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::lock_xorq_mr(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::xorps_a(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
            Self::xorpd_a(i) => i.encode(b, o), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:84
        }
    }
}
impl<R: Registers> Inst<R> {
    pub fn visit(&mut self, v: &mut impl RegisterVisitor<R>) {
        match self {
            Self::addb_i(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::addw_i(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::addl_i(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::addq_i_sxl(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::addb_mi(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::addw_mi(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::addl_mi(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::addq_mi_sxl(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::addl_mi_sxb(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::addq_mi_sxb(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::addb_mr(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::addw_mr(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::addl_mr(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::addq_mr(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::addb_rm(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::addw_rm(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::addl_rm(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::addq_rm(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::adcb_i(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::adcw_i(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::adcl_i(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::adcq_i_sxl(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::adcb_mi(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::adcw_mi(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::adcl_mi(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::adcq_mi_sxl(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::adcl_mi_sxb(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::adcq_mi_sxb(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::adcb_mr(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::adcw_mr(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::adcl_mr(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::adcq_mr(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::adcb_rm(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::adcw_rm(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::adcl_rm(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::adcq_rm(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_addb_mi(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_addw_mi(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_addl_mi(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_addq_mi_sxl(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_addl_mi_sxb(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_addq_mi_sxb(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_addb_mr(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_addw_mr(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_addl_mr(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_addq_mr(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_adcb_mi(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_adcw_mi(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_adcl_mi(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_adcq_mi_sxl(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_adcl_mi_sxb(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_adcq_mi_sxb(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_adcb_mr(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_adcw_mr(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_adcl_mr(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_adcq_mr(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::addss_a(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::addsd_a(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::addps_a(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::addpd_a(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::andb_i(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::andw_i(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::andl_i(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::andq_i_sxl(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::andb_mi(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::andw_mi(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::andl_mi(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::andq_mi_sxl(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::andl_mi_sxb(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::andq_mi_sxb(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::andb_mr(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::andw_mr(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::andl_mr(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::andq_mr(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::andb_rm(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::andw_rm(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::andl_rm(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::andq_rm(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_andb_mi(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_andw_mi(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_andl_mi(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_andq_mi_sxl(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_andl_mi_sxb(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_andq_mi_sxb(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_andb_mr(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_andw_mr(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_andl_mr(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_andq_mr(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::andps_a(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::andpd_a(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::orb_i(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::orw_i(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::orl_i(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::orq_i_sxl(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::orb_mi(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::orw_mi(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::orl_mi(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::orq_mi_sxl(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::orl_mi_sxb(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::orq_mi_sxb(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::orb_mr(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::orw_mr(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::orl_mr(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::orq_mr(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::orb_rm(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::orw_rm(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::orl_rm(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::orq_rm(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_orb_mi(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_orw_mi(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_orl_mi(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_orq_mi_sxl(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_orl_mi_sxb(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_orq_mi_sxb(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_orb_mr(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_orw_mr(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_orl_mr(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_orq_mr(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::orps_a(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::orpd_a(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::shldw_mri(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::shldw_mrc(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::shldl_mri(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::shldq_mri(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::shldl_mrc(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::shldq_mrc(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::subb_i(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::subw_i(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::subl_i(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::subq_i_sxl(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::subb_mi(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::subw_mi(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::subl_mi(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::subq_mi_sxl(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::subl_mi_sxb(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::subq_mi_sxb(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::subb_mr(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::subw_mr(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::subl_mr(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::subq_mr(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::subb_rm(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::subw_rm(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::subl_rm(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::subq_rm(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::sbbb_i(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::sbbw_i(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::sbbl_i(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::sbbq_i_sxl(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::sbbb_mi(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::sbbw_mi(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::sbbl_mi(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::sbbq_mi_sxl(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::sbbl_mi_sxb(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::sbbq_mi_sxb(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::sbbb_mr(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::sbbw_mr(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::sbbl_mr(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::sbbq_mr(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::sbbb_rm(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::sbbw_rm(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::sbbl_rm(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::sbbq_rm(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_subb_mi(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_subw_mi(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_subl_mi(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_subq_mi_sxl(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_subl_mi_sxb(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_subq_mi_sxb(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_subb_mr(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_subw_mr(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_subl_mr(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_subq_mr(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_sbbb_mi(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_sbbw_mi(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_sbbl_mi(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_sbbq_mi_sxl(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_sbbl_mi_sxb(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_sbbq_mi_sxb(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_sbbb_mr(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_sbbw_mr(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_sbbl_mr(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_sbbq_mr(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::subss_a(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::subsd_a(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::subps_a(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::subpd_a(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::xorb_i(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::xorw_i(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::xorl_i(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::xorq_i_sxl(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::xorb_mi(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::xorw_mi(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::xorl_mi(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::xorq_mi_sxl(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::xorl_mi_sxb(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::xorq_mi_sxb(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::xorb_mr(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::xorw_mr(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::xorl_mr(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::xorq_mr(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::xorb_rm(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::xorw_rm(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::xorl_rm(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::xorq_rm(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_xorb_mi(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_xorw_mi(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_xorl_mi(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_xorq_mi_sxl(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_xorl_mi_sxb(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_xorq_mi_sxb(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_xorb_mr(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_xorw_mr(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_xorl_mr(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::lock_xorq_mr(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::xorps_a(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
            Self::xorpd_a(i) => i.visit(v), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:101
        }
    }
}
impl<R: Registers> Inst<R> {
    pub fn features(&self) -> Vec<Feature> {
        match self {
            Self::addb_i(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::addw_i(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::addl_i(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::addq_i_sxl(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::addb_mi(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::addw_mi(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::addl_mi(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::addq_mi_sxl(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::addl_mi_sxb(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::addq_mi_sxb(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::addb_mr(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::addw_mr(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::addl_mr(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::addq_mr(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::addb_rm(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::addw_rm(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::addl_rm(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::addq_rm(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::adcb_i(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::adcw_i(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::adcl_i(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::adcq_i_sxl(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::adcb_mi(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::adcw_mi(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::adcl_mi(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::adcq_mi_sxl(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::adcl_mi_sxb(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::adcq_mi_sxb(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::adcb_mr(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::adcw_mr(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::adcl_mr(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::adcq_mr(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::adcb_rm(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::adcw_rm(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::adcl_rm(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::adcq_rm(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_addb_mi(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_addw_mi(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_addl_mi(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_addq_mi_sxl(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_addl_mi_sxb(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_addq_mi_sxb(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_addb_mr(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_addw_mr(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_addl_mr(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_addq_mr(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_adcb_mi(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_adcw_mi(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_adcl_mi(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_adcq_mi_sxl(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_adcl_mi_sxb(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_adcq_mi_sxb(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_adcb_mr(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_adcw_mr(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_adcl_mr(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_adcq_mr(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::addss_a(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::addsd_a(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::addps_a(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::addpd_a(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::andb_i(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::andw_i(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::andl_i(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::andq_i_sxl(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::andb_mi(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::andw_mi(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::andl_mi(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::andq_mi_sxl(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::andl_mi_sxb(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::andq_mi_sxb(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::andb_mr(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::andw_mr(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::andl_mr(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::andq_mr(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::andb_rm(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::andw_rm(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::andl_rm(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::andq_rm(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_andb_mi(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_andw_mi(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_andl_mi(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_andq_mi_sxl(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_andl_mi_sxb(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_andq_mi_sxb(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_andb_mr(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_andw_mr(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_andl_mr(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_andq_mr(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::andps_a(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::andpd_a(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::orb_i(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::orw_i(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::orl_i(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::orq_i_sxl(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::orb_mi(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::orw_mi(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::orl_mi(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::orq_mi_sxl(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::orl_mi_sxb(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::orq_mi_sxb(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::orb_mr(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::orw_mr(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::orl_mr(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::orq_mr(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::orb_rm(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::orw_rm(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::orl_rm(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::orq_rm(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_orb_mi(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_orw_mi(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_orl_mi(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_orq_mi_sxl(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_orl_mi_sxb(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_orq_mi_sxb(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_orb_mr(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_orw_mr(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_orl_mr(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_orq_mr(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::orps_a(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::orpd_a(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::shldw_mri(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::shldw_mrc(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::shldl_mri(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::shldq_mri(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::shldl_mrc(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::shldq_mrc(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::subb_i(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::subw_i(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::subl_i(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::subq_i_sxl(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::subb_mi(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::subw_mi(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::subl_mi(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::subq_mi_sxl(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::subl_mi_sxb(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::subq_mi_sxb(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::subb_mr(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::subw_mr(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::subl_mr(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::subq_mr(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::subb_rm(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::subw_rm(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::subl_rm(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::subq_rm(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::sbbb_i(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::sbbw_i(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::sbbl_i(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::sbbq_i_sxl(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::sbbb_mi(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::sbbw_mi(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::sbbl_mi(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::sbbq_mi_sxl(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::sbbl_mi_sxb(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::sbbq_mi_sxb(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::sbbb_mr(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::sbbw_mr(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::sbbl_mr(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::sbbq_mr(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::sbbb_rm(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::sbbw_rm(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::sbbl_rm(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::sbbq_rm(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_subb_mi(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_subw_mi(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_subl_mi(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_subq_mi_sxl(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_subl_mi_sxb(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_subq_mi_sxb(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_subb_mr(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_subw_mr(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_subl_mr(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_subq_mr(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_sbbb_mi(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_sbbw_mi(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_sbbl_mi(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_sbbq_mi_sxl(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_sbbl_mi_sxb(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_sbbq_mi_sxb(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_sbbb_mr(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_sbbw_mr(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_sbbl_mr(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_sbbq_mr(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::subss_a(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::subsd_a(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::subps_a(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::subpd_a(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::xorb_i(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::xorw_i(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::xorl_i(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::xorq_i_sxl(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::xorb_mi(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::xorw_mi(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::xorl_mi(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::xorq_mi_sxl(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::xorl_mi_sxb(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::xorq_mi_sxb(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::xorb_mr(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::xorw_mr(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::xorl_mr(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::xorq_mr(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::xorb_rm(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::xorw_rm(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::xorl_rm(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::xorq_rm(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_xorb_mi(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_xorw_mi(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_xorl_mi(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_xorq_mi_sxl(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_xorl_mi_sxb(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_xorq_mi_sxb(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_xorb_mr(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_xorw_mr(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_xorl_mr(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::lock_xorq_mr(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::xorps_a(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
            Self::xorpd_a(i) => i.features(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:118
        }
    }
}

/// `addb: I(al[rw], imm8) => 0x04 ib [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct addb_i<R> where R: Registers {
    pub al: Fixed<R::ReadWriteGpr, { gpr::enc::RAX }>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm8: Imm8, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> addb_i<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(al: impl Into<Fixed<R::ReadWriteGpr, { gpr::enc::RAX }>>, imm8: impl Into<Imm8>) -> Self {
        Self {
            al: al.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm8: imm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, _: &impl KnownOffsetTable) {

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:87
        rex.emit_two_op(buf, digit, self.al.enc()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:88

        // Emit opcode(s).
        buf.put1(0x4); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit immediate.
        self.imm8.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        let enc = self.al.expected_enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:138
        visitor.fixed_read_write_gpr(&mut self.al.0, enc); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:139
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for addb_i<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let al = "%al"; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm8 = self.imm8.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "addb {imm8}, {al}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<addb_i<R>> for Inst<R> {
    fn from(inst: addb_i<R>) -> Self {
        Self::addb_i(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `addw: I(ax[rw], imm16) => 0x66 + 0x05 iw [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct addw_i<R> where R: Registers {
    pub ax: Fixed<R::ReadWriteGpr, { gpr::enc::RAX }>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm16: Imm16, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> addw_i<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(ax: impl Into<Fixed<R::ReadWriteGpr, { gpr::enc::RAX }>>, imm16: impl Into<Imm16>) -> Self {
        Self {
            ax: ax.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm16: imm16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, _: &impl KnownOffsetTable) {

        // Emit prefixes.
        buf.put1(0x66); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:48

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:87
        rex.emit_two_op(buf, digit, self.ax.enc()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:88

        // Emit opcode(s).
        buf.put1(0x5); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit immediate.
        self.imm16.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        let enc = self.ax.expected_enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:138
        visitor.fixed_read_write_gpr(&mut self.ax.0, enc); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:139
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for addw_i<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let ax = "%ax"; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm16 = self.imm16.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "addw {imm16}, {ax}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<addw_i<R>> for Inst<R> {
    fn from(inst: addw_i<R>) -> Self {
        Self::addw_i(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `addl: I(eax[rw], imm32) => 0x05 id [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct addl_i<R> where R: Registers {
    pub eax: Fixed<R::ReadWriteGpr, { gpr::enc::RAX }>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm32: Imm32, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> addl_i<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(eax: impl Into<Fixed<R::ReadWriteGpr, { gpr::enc::RAX }>>, imm32: impl Into<Imm32>) -> Self {
        Self {
            eax: eax.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm32: imm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, _: &impl KnownOffsetTable) {

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:87
        rex.emit_two_op(buf, digit, self.eax.enc()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:88

        // Emit opcode(s).
        buf.put1(0x5); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit immediate.
        self.imm32.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        let enc = self.eax.expected_enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:138
        visitor.fixed_read_write_gpr(&mut self.eax.0, enc); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:139
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for addl_i<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let eax = "%eax"; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm32 = self.imm32.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "addl {imm32}, {eax}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<addl_i<R>> for Inst<R> {
    fn from(inst: addl_i<R>) -> Self {
        Self::addl_i(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `addq: I_SXL(rax[rw], imm32[sxq]) => REX.W + 0x05 id [_64b]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct addq_i_sxl<R> where R: Registers {
    pub rax: Fixed<R::ReadWriteGpr, { gpr::enc::RAX }>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm32: Simm32, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> addq_i_sxl<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rax: impl Into<Fixed<R::ReadWriteGpr, { gpr::enc::RAX }>>, imm32: impl Into<Simm32>) -> Self {
        Self {
            rax: rax.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm32: imm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, _: &impl KnownOffsetTable) {

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:87
        rex.emit_two_op(buf, digit, self.rax.enc()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:88

        // Emit opcode(s).
        buf.put1(0x5); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit immediate.
        self.imm32.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        let enc = self.rax.expected_enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:138
        visitor.fixed_read_write_gpr(&mut self.rax.0, enc); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:139
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for addq_i_sxl<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rax = "%rax"; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm32 = self.imm32.to_string(Extension::SignExtendQuad); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "addq {imm32}, {rax}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<addq_i_sxl<R>> for Inst<R> {
    fn from(inst: addq_i_sxl<R>) -> Self {
        Self::addq_i_sxl(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `addb: MI(rm8[rw], imm8) => 0x80 /0 ib [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct addb_mi<R> where R: Registers {
    pub rm8: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm8: Imm8, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> addb_mi<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm8: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, imm8: impl Into<Imm8>) -> Self {
        Self {
            rm8: rm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm8: imm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm8) = &self.rm8 {
            if let Some(trap_code) = rm8.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let mut rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:75
        self.rm8.always_emit_if_8bit_needed(&mut rex); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:77
        let digit = 0x0; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:97
        match &self.rm8 {
            GprMem::Gpr(rm8) => rex.emit_two_op(buf, digit, rm8.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:99
            GprMem::Mem(rm8) => rm8.emit_rex_prefix(rex, digit, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:100
        }

        // Emit opcode(s).
        buf.put1(0x80); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x0; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:161
        match &self.rm8 {
            GprMem::Gpr(rm8) => emit_modrm(buf, digit, rm8.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:163
            GprMem::Mem(rm8) => emit_modrm_sib_disp(buf, off, digit, rm8, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:164
        }

        // Emit immediate.
        self.imm8.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm8 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for addb_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm8 = self.rm8.to_string(Size::Byte); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm8 = self.imm8.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "addb {imm8}, {rm8}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<addb_mi<R>> for Inst<R> {
    fn from(inst: addb_mi<R>) -> Self {
        Self::addb_mi(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `addw: MI(rm16[rw], imm16) => 0x66 + 0x81 /0 iw [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct addw_mi<R> where R: Registers {
    pub rm16: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm16: Imm16, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> addw_mi<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm16: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, imm16: impl Into<Imm16>) -> Self {
        Self {
            rm16: rm16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm16: imm16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm16) = &self.rm16 {
            if let Some(trap_code) = rm16.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit prefixes.
        buf.put1(0x66); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:48

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x0; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:97
        match &self.rm16 {
            GprMem::Gpr(rm16) => rex.emit_two_op(buf, digit, rm16.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:99
            GprMem::Mem(rm16) => rm16.emit_rex_prefix(rex, digit, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:100
        }

        // Emit opcode(s).
        buf.put1(0x81); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x0; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:161
        match &self.rm16 {
            GprMem::Gpr(rm16) => emit_modrm(buf, digit, rm16.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:163
            GprMem::Mem(rm16) => emit_modrm_sib_disp(buf, off, digit, rm16, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:164
        }

        // Emit immediate.
        self.imm16.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm16 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for addw_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm16 = self.rm16.to_string(Size::Word); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm16 = self.imm16.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "addw {imm16}, {rm16}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<addw_mi<R>> for Inst<R> {
    fn from(inst: addw_mi<R>) -> Self {
        Self::addw_mi(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `addl: MI(rm32[rw], imm32) => 0x81 /0 id [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct addl_mi<R> where R: Registers {
    pub rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm32: Imm32, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> addl_mi<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm32: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, imm32: impl Into<Imm32>) -> Self {
        Self {
            rm32: rm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm32: imm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x0; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:97
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, digit, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:99
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, digit, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:100
        }

        // Emit opcode(s).
        buf.put1(0x81); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x0; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:161
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, digit, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:163
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, digit, rm32, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:164
        }

        // Emit immediate.
        self.imm32.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for addl_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm32 = self.rm32.to_string(Size::Doubleword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm32 = self.imm32.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "addl {imm32}, {rm32}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<addl_mi<R>> for Inst<R> {
    fn from(inst: addl_mi<R>) -> Self {
        Self::addl_mi(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `addq: MI_SXL(rm64[rw], imm32[sxq]) => REX.W + 0x81 /0 id [_64b]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct addq_mi_sxl<R> where R: Registers {
    pub rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm32: Simm32, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> addq_mi_sxl<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm64: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, imm32: impl Into<Simm32>) -> Self {
        Self {
            rm64: rm64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm32: imm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x0; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:97
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, digit, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:99
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, digit, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:100
        }

        // Emit opcode(s).
        buf.put1(0x81); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x0; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:161
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, digit, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:163
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, digit, rm64, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:164
        }

        // Emit immediate.
        self.imm32.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for addq_mi_sxl<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm64 = self.rm64.to_string(Size::Quadword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm32 = self.imm32.to_string(Extension::SignExtendQuad); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "addq {imm32}, {rm64}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<addq_mi_sxl<R>> for Inst<R> {
    fn from(inst: addq_mi_sxl<R>) -> Self {
        Self::addq_mi_sxl(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `addl: MI_SXB(rm32[rw], imm8[sxl]) => 0x83 /0 ib [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct addl_mi_sxb<R> where R: Registers {
    pub rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm8: Simm8, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> addl_mi_sxb<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm32: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, imm8: impl Into<Simm8>) -> Self {
        Self {
            rm32: rm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm8: imm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x0; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:97
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, digit, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:99
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, digit, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:100
        }

        // Emit opcode(s).
        buf.put1(0x83); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x0; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:161
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, digit, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:163
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, digit, rm32, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:164
        }

        // Emit immediate.
        self.imm8.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for addl_mi_sxb<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm32 = self.rm32.to_string(Size::Doubleword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm8 = self.imm8.to_string(Extension::SignExtendLong); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "addl {imm8}, {rm32}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<addl_mi_sxb<R>> for Inst<R> {
    fn from(inst: addl_mi_sxb<R>) -> Self {
        Self::addl_mi_sxb(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `addq: MI_SXB(rm64[rw], imm8[sxq]) => REX.W + 0x83 /0 ib [_64b]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct addq_mi_sxb<R> where R: Registers {
    pub rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm8: Simm8, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> addq_mi_sxb<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm64: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, imm8: impl Into<Simm8>) -> Self {
        Self {
            rm64: rm64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm8: imm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x0; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:97
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, digit, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:99
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, digit, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:100
        }

        // Emit opcode(s).
        buf.put1(0x83); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x0; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:161
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, digit, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:163
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, digit, rm64, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:164
        }

        // Emit immediate.
        self.imm8.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for addq_mi_sxb<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm64 = self.rm64.to_string(Size::Quadword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm8 = self.imm8.to_string(Extension::SignExtendQuad); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "addq {imm8}, {rm64}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<addq_mi_sxb<R>> for Inst<R> {
    fn from(inst: addq_mi_sxb<R>) -> Self {
        Self::addq_mi_sxb(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `addb: MR(rm8[rw], r8) => 0x00 /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct addb_mr<R> where R: Registers {
    pub rm8: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r8: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> addb_mr<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm8: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, r8: impl Into<Gpr<R::ReadGpr>>) -> Self {
        Self {
            rm8: rm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r8: r8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm8) = &self.rm8 {
            if let Some(trap_code) = rm8.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let mut rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:75
        self.rm8.always_emit_if_8bit_needed(&mut rex); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:77
        self.r8.always_emit_if_8bit_needed(&mut rex); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:77
        let r8 = self.r8.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:123
        match &self.rm8 {
            GprMem::Gpr(rm8) => rex.emit_two_op(buf, r8, rm8.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:130
            GprMem::Mem(rm8) => rm8.emit_rex_prefix(rex, r8, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:131
        }

        // Emit opcode(s).
        buf.put1(0x0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r8 = self.r8.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:187
        match &self.rm8 {
            GprMem::Gpr(rm8) => emit_modrm(buf, r8, rm8.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:195
            GprMem::Mem(rm8) => emit_modrm_sib_disp(buf, off, r8, rm8, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:196
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm8 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
        visitor.read_gpr(self.r8.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for addb_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm8 = self.rm8.to_string(Size::Byte); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r8 = self.r8.to_string(Size::Byte); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "addb {r8}, {rm8}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<addb_mr<R>> for Inst<R> {
    fn from(inst: addb_mr<R>) -> Self {
        Self::addb_mr(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `addw: MR(rm16[rw], r16) => 0x66 + 0x01 /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct addw_mr<R> where R: Registers {
    pub rm16: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r16: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> addw_mr<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm16: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, r16: impl Into<Gpr<R::ReadGpr>>) -> Self {
        Self {
            rm16: rm16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r16: r16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm16) = &self.rm16 {
            if let Some(trap_code) = rm16.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit prefixes.
        buf.put1(0x66); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:48

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r16 = self.r16.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:123
        match &self.rm16 {
            GprMem::Gpr(rm16) => rex.emit_two_op(buf, r16, rm16.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:130
            GprMem::Mem(rm16) => rm16.emit_rex_prefix(rex, r16, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:131
        }

        // Emit opcode(s).
        buf.put1(0x1); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r16 = self.r16.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:187
        match &self.rm16 {
            GprMem::Gpr(rm16) => emit_modrm(buf, r16, rm16.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:195
            GprMem::Mem(rm16) => emit_modrm_sib_disp(buf, off, r16, rm16, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:196
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm16 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
        visitor.read_gpr(self.r16.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for addw_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm16 = self.rm16.to_string(Size::Word); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r16 = self.r16.to_string(Size::Word); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "addw {r16}, {rm16}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<addw_mr<R>> for Inst<R> {
    fn from(inst: addw_mr<R>) -> Self {
        Self::addw_mr(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `addl: MR(rm32[rw], r32) => 0x01 /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct addl_mr<R> where R: Registers {
    pub rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r32: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> addl_mr<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm32: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, r32: impl Into<Gpr<R::ReadGpr>>) -> Self {
        Self {
            rm32: rm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r32: r32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r32 = self.r32.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:123
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, r32, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:130
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, r32, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:131
        }

        // Emit opcode(s).
        buf.put1(0x1); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r32 = self.r32.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:187
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, r32, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:195
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, r32, rm32, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:196
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
        visitor.read_gpr(self.r32.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for addl_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm32 = self.rm32.to_string(Size::Doubleword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r32 = self.r32.to_string(Size::Doubleword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "addl {r32}, {rm32}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<addl_mr<R>> for Inst<R> {
    fn from(inst: addl_mr<R>) -> Self {
        Self::addl_mr(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `addq: MR(rm64[rw], r64) => REX.W + 0x01 /r [_64b]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct addq_mr<R> where R: Registers {
    pub rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r64: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> addq_mr<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm64: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, r64: impl Into<Gpr<R::ReadGpr>>) -> Self {
        Self {
            rm64: rm64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r64: r64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r64 = self.r64.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:123
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, r64, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:130
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, r64, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:131
        }

        // Emit opcode(s).
        buf.put1(0x1); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r64 = self.r64.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:187
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, r64, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:195
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, r64, rm64, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:196
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
        visitor.read_gpr(self.r64.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for addq_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm64 = self.rm64.to_string(Size::Quadword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r64 = self.r64.to_string(Size::Quadword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "addq {r64}, {rm64}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<addq_mr<R>> for Inst<R> {
    fn from(inst: addq_mr<R>) -> Self {
        Self::addq_mr(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `addb: RM(r8[rw], rm8) => 0x02 /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct addb_rm<R> where R: Registers {
    pub r8: Gpr<R::ReadWriteGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub rm8: GprMem<R::ReadGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> addb_rm<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(r8: impl Into<Gpr<R::ReadWriteGpr>>, rm8: impl Into<GprMem<R::ReadGpr, R::ReadGpr>>) -> Self {
        Self {
            r8: r8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            rm8: rm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm8) = &self.rm8 {
            if let Some(trap_code) = rm8.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let mut rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:75
        self.r8.always_emit_if_8bit_needed(&mut rex); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:77
        self.rm8.always_emit_if_8bit_needed(&mut rex); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:77
        let r8 = self.r8.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:104
        match &self.rm8 {
            GprMem::Gpr(rm8) => rex.emit_two_op(buf, r8, rm8.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:112
            GprMem::Mem(rm8) => rm8.emit_rex_prefix(rex, r8, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:113
        }

        // Emit opcode(s).
        buf.put1(0x2); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r8 = self.r8.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:168
        match &self.rm8 {
            GprMem::Gpr(rm8) => emit_modrm(buf, r8, rm8.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:176
            GprMem::Mem(rm8) => emit_modrm_sib_disp(buf, off, r8, rm8, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:177
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write_gpr(self.r8.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
        match &mut self.rm8 {
            GprMem::Gpr(r) => visitor.read_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for addb_rm<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let r8 = self.r8.to_string(Size::Byte); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let rm8 = self.rm8.to_string(Size::Byte); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "addb {rm8}, {r8}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<addb_rm<R>> for Inst<R> {
    fn from(inst: addb_rm<R>) -> Self {
        Self::addb_rm(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `addw: RM(r16[rw], rm16) => 0x66 + 0x03 /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct addw_rm<R> where R: Registers {
    pub r16: Gpr<R::ReadWriteGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub rm16: GprMem<R::ReadGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> addw_rm<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(r16: impl Into<Gpr<R::ReadWriteGpr>>, rm16: impl Into<GprMem<R::ReadGpr, R::ReadGpr>>) -> Self {
        Self {
            r16: r16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            rm16: rm16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm16) = &self.rm16 {
            if let Some(trap_code) = rm16.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit prefixes.
        buf.put1(0x66); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:48

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r16 = self.r16.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:104
        match &self.rm16 {
            GprMem::Gpr(rm16) => rex.emit_two_op(buf, r16, rm16.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:112
            GprMem::Mem(rm16) => rm16.emit_rex_prefix(rex, r16, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:113
        }

        // Emit opcode(s).
        buf.put1(0x3); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r16 = self.r16.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:168
        match &self.rm16 {
            GprMem::Gpr(rm16) => emit_modrm(buf, r16, rm16.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:176
            GprMem::Mem(rm16) => emit_modrm_sib_disp(buf, off, r16, rm16, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:177
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write_gpr(self.r16.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
        match &mut self.rm16 {
            GprMem::Gpr(r) => visitor.read_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for addw_rm<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let r16 = self.r16.to_string(Size::Word); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let rm16 = self.rm16.to_string(Size::Word); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "addw {rm16}, {r16}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<addw_rm<R>> for Inst<R> {
    fn from(inst: addw_rm<R>) -> Self {
        Self::addw_rm(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `addl: RM(r32[rw], rm32) => 0x03 /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct addl_rm<R> where R: Registers {
    pub r32: Gpr<R::ReadWriteGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub rm32: GprMem<R::ReadGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> addl_rm<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(r32: impl Into<Gpr<R::ReadWriteGpr>>, rm32: impl Into<GprMem<R::ReadGpr, R::ReadGpr>>) -> Self {
        Self {
            r32: r32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            rm32: rm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r32 = self.r32.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:104
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, r32, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:112
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, r32, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:113
        }

        // Emit opcode(s).
        buf.put1(0x3); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r32 = self.r32.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:168
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, r32, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:176
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, r32, rm32, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:177
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write_gpr(self.r32.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for addl_rm<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let r32 = self.r32.to_string(Size::Doubleword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let rm32 = self.rm32.to_string(Size::Doubleword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "addl {rm32}, {r32}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<addl_rm<R>> for Inst<R> {
    fn from(inst: addl_rm<R>) -> Self {
        Self::addl_rm(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `addq: RM(r64[rw], rm64) => REX.W + 0x03 /r [_64b]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct addq_rm<R> where R: Registers {
    pub r64: Gpr<R::ReadWriteGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub rm64: GprMem<R::ReadGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> addq_rm<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(r64: impl Into<Gpr<R::ReadWriteGpr>>, rm64: impl Into<GprMem<R::ReadGpr, R::ReadGpr>>) -> Self {
        Self {
            r64: r64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            rm64: rm64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r64 = self.r64.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:104
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, r64, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:112
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, r64, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:113
        }

        // Emit opcode(s).
        buf.put1(0x3); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r64 = self.r64.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:168
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, r64, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:176
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, r64, rm64, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:177
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write_gpr(self.r64.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for addq_rm<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let r64 = self.r64.to_string(Size::Quadword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let rm64 = self.rm64.to_string(Size::Quadword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "addq {rm64}, {r64}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<addq_rm<R>> for Inst<R> {
    fn from(inst: addq_rm<R>) -> Self {
        Self::addq_rm(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `adcb: I(al[rw], imm8) => 0x14 ib [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct adcb_i<R> where R: Registers {
    pub al: Fixed<R::ReadWriteGpr, { gpr::enc::RAX }>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm8: Imm8, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> adcb_i<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(al: impl Into<Fixed<R::ReadWriteGpr, { gpr::enc::RAX }>>, imm8: impl Into<Imm8>) -> Self {
        Self {
            al: al.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm8: imm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, _: &impl KnownOffsetTable) {

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:87
        rex.emit_two_op(buf, digit, self.al.enc()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:88

        // Emit opcode(s).
        buf.put1(0x14); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit immediate.
        self.imm8.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        let enc = self.al.expected_enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:138
        visitor.fixed_read_write_gpr(&mut self.al.0, enc); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:139
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for adcb_i<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let al = "%al"; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm8 = self.imm8.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "adcb {imm8}, {al}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<adcb_i<R>> for Inst<R> {
    fn from(inst: adcb_i<R>) -> Self {
        Self::adcb_i(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `adcw: I(ax[rw], imm16) => 0x66 + 0x15 iw [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct adcw_i<R> where R: Registers {
    pub ax: Fixed<R::ReadWriteGpr, { gpr::enc::RAX }>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm16: Imm16, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> adcw_i<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(ax: impl Into<Fixed<R::ReadWriteGpr, { gpr::enc::RAX }>>, imm16: impl Into<Imm16>) -> Self {
        Self {
            ax: ax.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm16: imm16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, _: &impl KnownOffsetTable) {

        // Emit prefixes.
        buf.put1(0x66); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:48

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:87
        rex.emit_two_op(buf, digit, self.ax.enc()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:88

        // Emit opcode(s).
        buf.put1(0x15); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit immediate.
        self.imm16.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        let enc = self.ax.expected_enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:138
        visitor.fixed_read_write_gpr(&mut self.ax.0, enc); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:139
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for adcw_i<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let ax = "%ax"; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm16 = self.imm16.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "adcw {imm16}, {ax}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<adcw_i<R>> for Inst<R> {
    fn from(inst: adcw_i<R>) -> Self {
        Self::adcw_i(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `adcl: I(eax[rw], imm32) => 0x15 id [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct adcl_i<R> where R: Registers {
    pub eax: Fixed<R::ReadWriteGpr, { gpr::enc::RAX }>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm32: Imm32, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> adcl_i<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(eax: impl Into<Fixed<R::ReadWriteGpr, { gpr::enc::RAX }>>, imm32: impl Into<Imm32>) -> Self {
        Self {
            eax: eax.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm32: imm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, _: &impl KnownOffsetTable) {

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:87
        rex.emit_two_op(buf, digit, self.eax.enc()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:88

        // Emit opcode(s).
        buf.put1(0x15); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit immediate.
        self.imm32.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        let enc = self.eax.expected_enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:138
        visitor.fixed_read_write_gpr(&mut self.eax.0, enc); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:139
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for adcl_i<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let eax = "%eax"; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm32 = self.imm32.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "adcl {imm32}, {eax}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<adcl_i<R>> for Inst<R> {
    fn from(inst: adcl_i<R>) -> Self {
        Self::adcl_i(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `adcq: I_SXL(rax[rw], imm32[sxq]) => REX.W + 0x15 id [_64b]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct adcq_i_sxl<R> where R: Registers {
    pub rax: Fixed<R::ReadWriteGpr, { gpr::enc::RAX }>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm32: Simm32, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> adcq_i_sxl<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rax: impl Into<Fixed<R::ReadWriteGpr, { gpr::enc::RAX }>>, imm32: impl Into<Simm32>) -> Self {
        Self {
            rax: rax.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm32: imm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, _: &impl KnownOffsetTable) {

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:87
        rex.emit_two_op(buf, digit, self.rax.enc()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:88

        // Emit opcode(s).
        buf.put1(0x15); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit immediate.
        self.imm32.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        let enc = self.rax.expected_enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:138
        visitor.fixed_read_write_gpr(&mut self.rax.0, enc); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:139
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for adcq_i_sxl<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rax = "%rax"; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm32 = self.imm32.to_string(Extension::SignExtendQuad); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "adcq {imm32}, {rax}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<adcq_i_sxl<R>> for Inst<R> {
    fn from(inst: adcq_i_sxl<R>) -> Self {
        Self::adcq_i_sxl(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `adcb: MI(rm8[rw], imm8) => 0x80 /2 ib [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct adcb_mi<R> where R: Registers {
    pub rm8: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm8: Imm8, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> adcb_mi<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm8: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, imm8: impl Into<Imm8>) -> Self {
        Self {
            rm8: rm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm8: imm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm8) = &self.rm8 {
            if let Some(trap_code) = rm8.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let mut rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:75
        self.rm8.always_emit_if_8bit_needed(&mut rex); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:77
        let digit = 0x2; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:97
        match &self.rm8 {
            GprMem::Gpr(rm8) => rex.emit_two_op(buf, digit, rm8.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:99
            GprMem::Mem(rm8) => rm8.emit_rex_prefix(rex, digit, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:100
        }

        // Emit opcode(s).
        buf.put1(0x80); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x2; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:161
        match &self.rm8 {
            GprMem::Gpr(rm8) => emit_modrm(buf, digit, rm8.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:163
            GprMem::Mem(rm8) => emit_modrm_sib_disp(buf, off, digit, rm8, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:164
        }

        // Emit immediate.
        self.imm8.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm8 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for adcb_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm8 = self.rm8.to_string(Size::Byte); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm8 = self.imm8.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "adcb {imm8}, {rm8}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<adcb_mi<R>> for Inst<R> {
    fn from(inst: adcb_mi<R>) -> Self {
        Self::adcb_mi(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `adcw: MI(rm16[rw], imm16) => 0x66 + 0x81 /2 iw [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct adcw_mi<R> where R: Registers {
    pub rm16: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm16: Imm16, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> adcw_mi<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm16: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, imm16: impl Into<Imm16>) -> Self {
        Self {
            rm16: rm16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm16: imm16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm16) = &self.rm16 {
            if let Some(trap_code) = rm16.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit prefixes.
        buf.put1(0x66); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:48

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x2; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:97
        match &self.rm16 {
            GprMem::Gpr(rm16) => rex.emit_two_op(buf, digit, rm16.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:99
            GprMem::Mem(rm16) => rm16.emit_rex_prefix(rex, digit, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:100
        }

        // Emit opcode(s).
        buf.put1(0x81); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x2; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:161
        match &self.rm16 {
            GprMem::Gpr(rm16) => emit_modrm(buf, digit, rm16.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:163
            GprMem::Mem(rm16) => emit_modrm_sib_disp(buf, off, digit, rm16, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:164
        }

        // Emit immediate.
        self.imm16.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm16 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for adcw_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm16 = self.rm16.to_string(Size::Word); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm16 = self.imm16.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "adcw {imm16}, {rm16}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<adcw_mi<R>> for Inst<R> {
    fn from(inst: adcw_mi<R>) -> Self {
        Self::adcw_mi(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `adcl: MI(rm32[rw], imm32) => 0x81 /2 id [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct adcl_mi<R> where R: Registers {
    pub rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm32: Imm32, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> adcl_mi<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm32: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, imm32: impl Into<Imm32>) -> Self {
        Self {
            rm32: rm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm32: imm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x2; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:97
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, digit, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:99
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, digit, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:100
        }

        // Emit opcode(s).
        buf.put1(0x81); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x2; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:161
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, digit, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:163
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, digit, rm32, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:164
        }

        // Emit immediate.
        self.imm32.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for adcl_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm32 = self.rm32.to_string(Size::Doubleword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm32 = self.imm32.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "adcl {imm32}, {rm32}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<adcl_mi<R>> for Inst<R> {
    fn from(inst: adcl_mi<R>) -> Self {
        Self::adcl_mi(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `adcq: MI_SXL(rm64[rw], imm32[sxq]) => REX.W + 0x81 /2 id [_64b]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct adcq_mi_sxl<R> where R: Registers {
    pub rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm32: Simm32, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> adcq_mi_sxl<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm64: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, imm32: impl Into<Simm32>) -> Self {
        Self {
            rm64: rm64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm32: imm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x2; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:97
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, digit, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:99
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, digit, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:100
        }

        // Emit opcode(s).
        buf.put1(0x81); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x2; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:161
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, digit, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:163
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, digit, rm64, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:164
        }

        // Emit immediate.
        self.imm32.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for adcq_mi_sxl<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm64 = self.rm64.to_string(Size::Quadword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm32 = self.imm32.to_string(Extension::SignExtendQuad); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "adcq {imm32}, {rm64}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<adcq_mi_sxl<R>> for Inst<R> {
    fn from(inst: adcq_mi_sxl<R>) -> Self {
        Self::adcq_mi_sxl(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `adcl: MI_SXB(rm32[rw], imm8[sxl]) => 0x83 /2 ib [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct adcl_mi_sxb<R> where R: Registers {
    pub rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm8: Simm8, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> adcl_mi_sxb<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm32: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, imm8: impl Into<Simm8>) -> Self {
        Self {
            rm32: rm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm8: imm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x2; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:97
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, digit, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:99
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, digit, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:100
        }

        // Emit opcode(s).
        buf.put1(0x83); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x2; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:161
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, digit, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:163
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, digit, rm32, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:164
        }

        // Emit immediate.
        self.imm8.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for adcl_mi_sxb<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm32 = self.rm32.to_string(Size::Doubleword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm8 = self.imm8.to_string(Extension::SignExtendLong); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "adcl {imm8}, {rm32}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<adcl_mi_sxb<R>> for Inst<R> {
    fn from(inst: adcl_mi_sxb<R>) -> Self {
        Self::adcl_mi_sxb(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `adcq: MI_SXB(rm64[rw], imm8[sxq]) => REX.W + 0x83 /2 ib [_64b]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct adcq_mi_sxb<R> where R: Registers {
    pub rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm8: Simm8, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> adcq_mi_sxb<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm64: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, imm8: impl Into<Simm8>) -> Self {
        Self {
            rm64: rm64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm8: imm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x2; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:97
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, digit, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:99
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, digit, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:100
        }

        // Emit opcode(s).
        buf.put1(0x83); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x2; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:161
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, digit, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:163
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, digit, rm64, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:164
        }

        // Emit immediate.
        self.imm8.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for adcq_mi_sxb<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm64 = self.rm64.to_string(Size::Quadword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm8 = self.imm8.to_string(Extension::SignExtendQuad); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "adcq {imm8}, {rm64}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<adcq_mi_sxb<R>> for Inst<R> {
    fn from(inst: adcq_mi_sxb<R>) -> Self {
        Self::adcq_mi_sxb(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `adcb: MR(rm8[rw], r8) => 0x10 /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct adcb_mr<R> where R: Registers {
    pub rm8: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r8: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> adcb_mr<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm8: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, r8: impl Into<Gpr<R::ReadGpr>>) -> Self {
        Self {
            rm8: rm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r8: r8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm8) = &self.rm8 {
            if let Some(trap_code) = rm8.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let mut rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:75
        self.rm8.always_emit_if_8bit_needed(&mut rex); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:77
        self.r8.always_emit_if_8bit_needed(&mut rex); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:77
        let r8 = self.r8.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:123
        match &self.rm8 {
            GprMem::Gpr(rm8) => rex.emit_two_op(buf, r8, rm8.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:130
            GprMem::Mem(rm8) => rm8.emit_rex_prefix(rex, r8, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:131
        }

        // Emit opcode(s).
        buf.put1(0x10); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r8 = self.r8.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:187
        match &self.rm8 {
            GprMem::Gpr(rm8) => emit_modrm(buf, r8, rm8.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:195
            GprMem::Mem(rm8) => emit_modrm_sib_disp(buf, off, r8, rm8, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:196
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm8 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
        visitor.read_gpr(self.r8.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for adcb_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm8 = self.rm8.to_string(Size::Byte); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r8 = self.r8.to_string(Size::Byte); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "adcb {r8}, {rm8}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<adcb_mr<R>> for Inst<R> {
    fn from(inst: adcb_mr<R>) -> Self {
        Self::adcb_mr(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `adcw: MR(rm16[rw], r16) => 0x66 + 0x11 /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct adcw_mr<R> where R: Registers {
    pub rm16: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r16: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> adcw_mr<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm16: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, r16: impl Into<Gpr<R::ReadGpr>>) -> Self {
        Self {
            rm16: rm16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r16: r16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm16) = &self.rm16 {
            if let Some(trap_code) = rm16.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit prefixes.
        buf.put1(0x66); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:48

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r16 = self.r16.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:123
        match &self.rm16 {
            GprMem::Gpr(rm16) => rex.emit_two_op(buf, r16, rm16.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:130
            GprMem::Mem(rm16) => rm16.emit_rex_prefix(rex, r16, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:131
        }

        // Emit opcode(s).
        buf.put1(0x11); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r16 = self.r16.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:187
        match &self.rm16 {
            GprMem::Gpr(rm16) => emit_modrm(buf, r16, rm16.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:195
            GprMem::Mem(rm16) => emit_modrm_sib_disp(buf, off, r16, rm16, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:196
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm16 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
        visitor.read_gpr(self.r16.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for adcw_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm16 = self.rm16.to_string(Size::Word); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r16 = self.r16.to_string(Size::Word); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "adcw {r16}, {rm16}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<adcw_mr<R>> for Inst<R> {
    fn from(inst: adcw_mr<R>) -> Self {
        Self::adcw_mr(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `adcl: MR(rm32[rw], r32) => 0x11 /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct adcl_mr<R> where R: Registers {
    pub rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r32: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> adcl_mr<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm32: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, r32: impl Into<Gpr<R::ReadGpr>>) -> Self {
        Self {
            rm32: rm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r32: r32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r32 = self.r32.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:123
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, r32, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:130
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, r32, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:131
        }

        // Emit opcode(s).
        buf.put1(0x11); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r32 = self.r32.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:187
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, r32, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:195
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, r32, rm32, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:196
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
        visitor.read_gpr(self.r32.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for adcl_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm32 = self.rm32.to_string(Size::Doubleword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r32 = self.r32.to_string(Size::Doubleword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "adcl {r32}, {rm32}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<adcl_mr<R>> for Inst<R> {
    fn from(inst: adcl_mr<R>) -> Self {
        Self::adcl_mr(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `adcq: MR(rm64[rw], r64) => REX.W + 0x11 /r [_64b]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct adcq_mr<R> where R: Registers {
    pub rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r64: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> adcq_mr<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm64: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, r64: impl Into<Gpr<R::ReadGpr>>) -> Self {
        Self {
            rm64: rm64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r64: r64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r64 = self.r64.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:123
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, r64, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:130
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, r64, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:131
        }

        // Emit opcode(s).
        buf.put1(0x11); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r64 = self.r64.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:187
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, r64, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:195
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, r64, rm64, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:196
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
        visitor.read_gpr(self.r64.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for adcq_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm64 = self.rm64.to_string(Size::Quadword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r64 = self.r64.to_string(Size::Quadword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "adcq {r64}, {rm64}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<adcq_mr<R>> for Inst<R> {
    fn from(inst: adcq_mr<R>) -> Self {
        Self::adcq_mr(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `adcb: RM(r8[rw], rm8) => 0x12 /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct adcb_rm<R> where R: Registers {
    pub r8: Gpr<R::ReadWriteGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub rm8: GprMem<R::ReadGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> adcb_rm<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(r8: impl Into<Gpr<R::ReadWriteGpr>>, rm8: impl Into<GprMem<R::ReadGpr, R::ReadGpr>>) -> Self {
        Self {
            r8: r8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            rm8: rm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm8) = &self.rm8 {
            if let Some(trap_code) = rm8.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let mut rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:75
        self.r8.always_emit_if_8bit_needed(&mut rex); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:77
        self.rm8.always_emit_if_8bit_needed(&mut rex); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:77
        let r8 = self.r8.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:104
        match &self.rm8 {
            GprMem::Gpr(rm8) => rex.emit_two_op(buf, r8, rm8.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:112
            GprMem::Mem(rm8) => rm8.emit_rex_prefix(rex, r8, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:113
        }

        // Emit opcode(s).
        buf.put1(0x12); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r8 = self.r8.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:168
        match &self.rm8 {
            GprMem::Gpr(rm8) => emit_modrm(buf, r8, rm8.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:176
            GprMem::Mem(rm8) => emit_modrm_sib_disp(buf, off, r8, rm8, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:177
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write_gpr(self.r8.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
        match &mut self.rm8 {
            GprMem::Gpr(r) => visitor.read_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for adcb_rm<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let r8 = self.r8.to_string(Size::Byte); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let rm8 = self.rm8.to_string(Size::Byte); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "adcb {rm8}, {r8}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<adcb_rm<R>> for Inst<R> {
    fn from(inst: adcb_rm<R>) -> Self {
        Self::adcb_rm(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `adcw: RM(r16[rw], rm16) => 0x66 + 0x13 /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct adcw_rm<R> where R: Registers {
    pub r16: Gpr<R::ReadWriteGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub rm16: GprMem<R::ReadGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> adcw_rm<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(r16: impl Into<Gpr<R::ReadWriteGpr>>, rm16: impl Into<GprMem<R::ReadGpr, R::ReadGpr>>) -> Self {
        Self {
            r16: r16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            rm16: rm16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm16) = &self.rm16 {
            if let Some(trap_code) = rm16.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit prefixes.
        buf.put1(0x66); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:48

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r16 = self.r16.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:104
        match &self.rm16 {
            GprMem::Gpr(rm16) => rex.emit_two_op(buf, r16, rm16.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:112
            GprMem::Mem(rm16) => rm16.emit_rex_prefix(rex, r16, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:113
        }

        // Emit opcode(s).
        buf.put1(0x13); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r16 = self.r16.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:168
        match &self.rm16 {
            GprMem::Gpr(rm16) => emit_modrm(buf, r16, rm16.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:176
            GprMem::Mem(rm16) => emit_modrm_sib_disp(buf, off, r16, rm16, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:177
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write_gpr(self.r16.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
        match &mut self.rm16 {
            GprMem::Gpr(r) => visitor.read_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for adcw_rm<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let r16 = self.r16.to_string(Size::Word); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let rm16 = self.rm16.to_string(Size::Word); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "adcw {rm16}, {r16}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<adcw_rm<R>> for Inst<R> {
    fn from(inst: adcw_rm<R>) -> Self {
        Self::adcw_rm(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `adcl: RM(r32[rw], rm32) => 0x13 /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct adcl_rm<R> where R: Registers {
    pub r32: Gpr<R::ReadWriteGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub rm32: GprMem<R::ReadGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> adcl_rm<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(r32: impl Into<Gpr<R::ReadWriteGpr>>, rm32: impl Into<GprMem<R::ReadGpr, R::ReadGpr>>) -> Self {
        Self {
            r32: r32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            rm32: rm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r32 = self.r32.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:104
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, r32, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:112
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, r32, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:113
        }

        // Emit opcode(s).
        buf.put1(0x13); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r32 = self.r32.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:168
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, r32, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:176
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, r32, rm32, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:177
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write_gpr(self.r32.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for adcl_rm<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let r32 = self.r32.to_string(Size::Doubleword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let rm32 = self.rm32.to_string(Size::Doubleword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "adcl {rm32}, {r32}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<adcl_rm<R>> for Inst<R> {
    fn from(inst: adcl_rm<R>) -> Self {
        Self::adcl_rm(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `adcq: RM(r64[rw], rm64) => REX.W + 0x13 /r [_64b]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct adcq_rm<R> where R: Registers {
    pub r64: Gpr<R::ReadWriteGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub rm64: GprMem<R::ReadGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> adcq_rm<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(r64: impl Into<Gpr<R::ReadWriteGpr>>, rm64: impl Into<GprMem<R::ReadGpr, R::ReadGpr>>) -> Self {
        Self {
            r64: r64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            rm64: rm64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r64 = self.r64.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:104
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, r64, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:112
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, r64, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:113
        }

        // Emit opcode(s).
        buf.put1(0x13); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r64 = self.r64.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:168
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, r64, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:176
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, r64, rm64, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:177
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write_gpr(self.r64.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for adcq_rm<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let r64 = self.r64.to_string(Size::Quadword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let rm64 = self.rm64.to_string(Size::Quadword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "adcq {rm64}, {r64}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<adcq_rm<R>> for Inst<R> {
    fn from(inst: adcq_rm<R>) -> Self {
        Self::adcq_rm(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_addb: MI(m8[rw], imm8) => 0xF0 + 0x80 /0 ib [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_addb_mi<R> where R: Registers {
    pub m8: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm8: Imm8, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_addb_mi<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m8: impl Into<Amode<R::ReadGpr>>, imm8: impl Into<Imm8>) -> Self {
        Self {
            m8: m8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm8: imm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m8.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x0; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:92
        self.m8.emit_rex_prefix(rex, digit, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:93

        // Emit opcode(s).
        buf.put1(0x80); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x0; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:156
        emit_modrm_sib_disp(buf, off, digit, &self.m8, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:157

        // Emit immediate.
        self.imm8.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m8, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_addb_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m8 = self.m8.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm8 = self.imm8.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock addb {imm8}, {m8}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_addb_mi<R>> for Inst<R> {
    fn from(inst: lock_addb_mi<R>) -> Self {
        Self::lock_addb_mi(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_addw: MI(m16[rw], imm16) => 0xF0 + 0x66 + 0x81 /0 iw [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_addw_mi<R> where R: Registers {
    pub m16: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm16: Imm16, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_addw_mi<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m16: impl Into<Amode<R::ReadGpr>>, imm16: impl Into<Imm16>) -> Self {
        Self {
            m16: m16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm16: imm16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m16.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42
        buf.put1(0x66); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:48

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x0; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:92
        self.m16.emit_rex_prefix(rex, digit, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:93

        // Emit opcode(s).
        buf.put1(0x81); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x0; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:156
        emit_modrm_sib_disp(buf, off, digit, &self.m16, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:157

        // Emit immediate.
        self.imm16.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m16, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_addw_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m16 = self.m16.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm16 = self.imm16.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock addw {imm16}, {m16}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_addw_mi<R>> for Inst<R> {
    fn from(inst: lock_addw_mi<R>) -> Self {
        Self::lock_addw_mi(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_addl: MI(m32[rw], imm32) => 0xF0 + 0x81 /0 id [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_addl_mi<R> where R: Registers {
    pub m32: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm32: Imm32, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_addl_mi<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m32: impl Into<Amode<R::ReadGpr>>, imm32: impl Into<Imm32>) -> Self {
        Self {
            m32: m32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm32: imm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m32.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x0; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:92
        self.m32.emit_rex_prefix(rex, digit, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:93

        // Emit opcode(s).
        buf.put1(0x81); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x0; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:156
        emit_modrm_sib_disp(buf, off, digit, &self.m32, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:157

        // Emit immediate.
        self.imm32.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m32, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_addl_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m32 = self.m32.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm32 = self.imm32.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock addl {imm32}, {m32}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_addl_mi<R>> for Inst<R> {
    fn from(inst: lock_addl_mi<R>) -> Self {
        Self::lock_addl_mi(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_addq: MI_SXL(m64[rw], imm32[sxq]) => 0xF0 + REX.W + 0x81 /0 id [_64b]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_addq_mi_sxl<R> where R: Registers {
    pub m64: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm32: Simm32, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_addq_mi_sxl<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m64: impl Into<Amode<R::ReadGpr>>, imm32: impl Into<Simm32>) -> Self {
        Self {
            m64: m64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm32: imm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m64.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x0; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:92
        self.m64.emit_rex_prefix(rex, digit, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:93

        // Emit opcode(s).
        buf.put1(0x81); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x0; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:156
        emit_modrm_sib_disp(buf, off, digit, &self.m64, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:157

        // Emit immediate.
        self.imm32.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m64, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_addq_mi_sxl<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m64 = self.m64.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm32 = self.imm32.to_string(Extension::SignExtendQuad); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock addq {imm32}, {m64}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_addq_mi_sxl<R>> for Inst<R> {
    fn from(inst: lock_addq_mi_sxl<R>) -> Self {
        Self::lock_addq_mi_sxl(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_addl: MI_SXB(m32[rw], imm8[sxl]) => 0xF0 + 0x83 /0 ib [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_addl_mi_sxb<R> where R: Registers {
    pub m32: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm8: Simm8, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_addl_mi_sxb<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m32: impl Into<Amode<R::ReadGpr>>, imm8: impl Into<Simm8>) -> Self {
        Self {
            m32: m32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm8: imm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m32.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x0; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:92
        self.m32.emit_rex_prefix(rex, digit, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:93

        // Emit opcode(s).
        buf.put1(0x83); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x0; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:156
        emit_modrm_sib_disp(buf, off, digit, &self.m32, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:157

        // Emit immediate.
        self.imm8.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m32, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_addl_mi_sxb<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m32 = self.m32.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm8 = self.imm8.to_string(Extension::SignExtendLong); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock addl {imm8}, {m32}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_addl_mi_sxb<R>> for Inst<R> {
    fn from(inst: lock_addl_mi_sxb<R>) -> Self {
        Self::lock_addl_mi_sxb(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_addq: MI_SXB(m64[rw], imm8[sxq]) => 0xF0 + REX.W + 0x83 /0 ib [_64b]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_addq_mi_sxb<R> where R: Registers {
    pub m64: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm8: Simm8, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_addq_mi_sxb<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m64: impl Into<Amode<R::ReadGpr>>, imm8: impl Into<Simm8>) -> Self {
        Self {
            m64: m64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm8: imm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m64.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x0; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:92
        self.m64.emit_rex_prefix(rex, digit, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:93

        // Emit opcode(s).
        buf.put1(0x83); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x0; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:156
        emit_modrm_sib_disp(buf, off, digit, &self.m64, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:157

        // Emit immediate.
        self.imm8.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m64, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_addq_mi_sxb<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m64 = self.m64.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm8 = self.imm8.to_string(Extension::SignExtendQuad); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock addq {imm8}, {m64}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_addq_mi_sxb<R>> for Inst<R> {
    fn from(inst: lock_addq_mi_sxb<R>) -> Self {
        Self::lock_addq_mi_sxb(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_addb: MR(m8[rw], r8) => 0xF0 + 0x00 /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_addb_mr<R> where R: Registers {
    pub m8: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r8: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_addb_mr<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m8: impl Into<Amode<R::ReadGpr>>, r8: impl Into<Gpr<R::ReadGpr>>) -> Self {
        Self {
            m8: m8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r8: r8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m8.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let mut rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:75
        self.r8.always_emit_if_8bit_needed(&mut rex); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:77
        let r8 = self.r8.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:119
        self.m8.emit_rex_prefix(rex, r8, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:120

        // Emit opcode(s).
        buf.put1(0x0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r8 = self.r8.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:183
        emit_modrm_sib_disp(buf, off, r8, &self.m8, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:184
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m8, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
        visitor.read_gpr(self.r8.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_addb_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m8 = self.m8.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r8 = self.r8.to_string(Size::Byte); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock addb {r8}, {m8}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_addb_mr<R>> for Inst<R> {
    fn from(inst: lock_addb_mr<R>) -> Self {
        Self::lock_addb_mr(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_addw: MR(m16[rw], r16) => 0xF0 + 0x66 + 0x01 /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_addw_mr<R> where R: Registers {
    pub m16: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r16: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_addw_mr<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m16: impl Into<Amode<R::ReadGpr>>, r16: impl Into<Gpr<R::ReadGpr>>) -> Self {
        Self {
            m16: m16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r16: r16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m16.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42
        buf.put1(0x66); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:48

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r16 = self.r16.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:119
        self.m16.emit_rex_prefix(rex, r16, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:120

        // Emit opcode(s).
        buf.put1(0x1); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r16 = self.r16.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:183
        emit_modrm_sib_disp(buf, off, r16, &self.m16, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:184
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m16, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
        visitor.read_gpr(self.r16.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_addw_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m16 = self.m16.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r16 = self.r16.to_string(Size::Word); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock addw {r16}, {m16}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_addw_mr<R>> for Inst<R> {
    fn from(inst: lock_addw_mr<R>) -> Self {
        Self::lock_addw_mr(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_addl: MR(m32[rw], r32) => 0xF0 + 0x01 /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_addl_mr<R> where R: Registers {
    pub m32: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r32: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_addl_mr<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m32: impl Into<Amode<R::ReadGpr>>, r32: impl Into<Gpr<R::ReadGpr>>) -> Self {
        Self {
            m32: m32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r32: r32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m32.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r32 = self.r32.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:119
        self.m32.emit_rex_prefix(rex, r32, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:120

        // Emit opcode(s).
        buf.put1(0x1); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r32 = self.r32.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:183
        emit_modrm_sib_disp(buf, off, r32, &self.m32, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:184
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m32, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
        visitor.read_gpr(self.r32.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_addl_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m32 = self.m32.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r32 = self.r32.to_string(Size::Doubleword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock addl {r32}, {m32}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_addl_mr<R>> for Inst<R> {
    fn from(inst: lock_addl_mr<R>) -> Self {
        Self::lock_addl_mr(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_addq: MR(m64[rw], r64) => 0xF0 + REX.W + 0x01 /r [_64b]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_addq_mr<R> where R: Registers {
    pub m64: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r64: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_addq_mr<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m64: impl Into<Amode<R::ReadGpr>>, r64: impl Into<Gpr<R::ReadGpr>>) -> Self {
        Self {
            m64: m64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r64: r64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m64.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r64 = self.r64.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:119
        self.m64.emit_rex_prefix(rex, r64, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:120

        // Emit opcode(s).
        buf.put1(0x1); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r64 = self.r64.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:183
        emit_modrm_sib_disp(buf, off, r64, &self.m64, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:184
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m64, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
        visitor.read_gpr(self.r64.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_addq_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m64 = self.m64.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r64 = self.r64.to_string(Size::Quadword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock addq {r64}, {m64}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_addq_mr<R>> for Inst<R> {
    fn from(inst: lock_addq_mr<R>) -> Self {
        Self::lock_addq_mr(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_adcb: MI(m8[rw], imm8) => 0xF0 + 0x80 /2 ib [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_adcb_mi<R> where R: Registers {
    pub m8: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm8: Imm8, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_adcb_mi<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m8: impl Into<Amode<R::ReadGpr>>, imm8: impl Into<Imm8>) -> Self {
        Self {
            m8: m8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm8: imm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m8.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x2; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:92
        self.m8.emit_rex_prefix(rex, digit, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:93

        // Emit opcode(s).
        buf.put1(0x80); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x2; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:156
        emit_modrm_sib_disp(buf, off, digit, &self.m8, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:157

        // Emit immediate.
        self.imm8.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m8, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_adcb_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m8 = self.m8.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm8 = self.imm8.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock adcb {imm8}, {m8}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_adcb_mi<R>> for Inst<R> {
    fn from(inst: lock_adcb_mi<R>) -> Self {
        Self::lock_adcb_mi(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_adcw: MI(m16[rw], imm16) => 0xF0 + 0x66 + 0x81 /2 iw [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_adcw_mi<R> where R: Registers {
    pub m16: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm16: Imm16, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_adcw_mi<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m16: impl Into<Amode<R::ReadGpr>>, imm16: impl Into<Imm16>) -> Self {
        Self {
            m16: m16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm16: imm16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m16.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42
        buf.put1(0x66); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:48

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x2; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:92
        self.m16.emit_rex_prefix(rex, digit, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:93

        // Emit opcode(s).
        buf.put1(0x81); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x2; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:156
        emit_modrm_sib_disp(buf, off, digit, &self.m16, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:157

        // Emit immediate.
        self.imm16.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m16, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_adcw_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m16 = self.m16.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm16 = self.imm16.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock adcw {imm16}, {m16}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_adcw_mi<R>> for Inst<R> {
    fn from(inst: lock_adcw_mi<R>) -> Self {
        Self::lock_adcw_mi(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_adcl: MI(m32[rw], imm32) => 0xF0 + 0x81 /2 id [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_adcl_mi<R> where R: Registers {
    pub m32: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm32: Imm32, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_adcl_mi<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m32: impl Into<Amode<R::ReadGpr>>, imm32: impl Into<Imm32>) -> Self {
        Self {
            m32: m32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm32: imm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m32.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x2; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:92
        self.m32.emit_rex_prefix(rex, digit, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:93

        // Emit opcode(s).
        buf.put1(0x81); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x2; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:156
        emit_modrm_sib_disp(buf, off, digit, &self.m32, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:157

        // Emit immediate.
        self.imm32.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m32, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_adcl_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m32 = self.m32.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm32 = self.imm32.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock adcl {imm32}, {m32}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_adcl_mi<R>> for Inst<R> {
    fn from(inst: lock_adcl_mi<R>) -> Self {
        Self::lock_adcl_mi(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_adcq: MI_SXL(m64[rw], imm32[sxq]) => 0xF0 + REX.W + 0x81 /2 id [_64b]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_adcq_mi_sxl<R> where R: Registers {
    pub m64: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm32: Simm32, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_adcq_mi_sxl<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m64: impl Into<Amode<R::ReadGpr>>, imm32: impl Into<Simm32>) -> Self {
        Self {
            m64: m64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm32: imm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m64.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x2; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:92
        self.m64.emit_rex_prefix(rex, digit, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:93

        // Emit opcode(s).
        buf.put1(0x81); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x2; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:156
        emit_modrm_sib_disp(buf, off, digit, &self.m64, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:157

        // Emit immediate.
        self.imm32.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m64, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_adcq_mi_sxl<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m64 = self.m64.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm32 = self.imm32.to_string(Extension::SignExtendQuad); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock adcq {imm32}, {m64}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_adcq_mi_sxl<R>> for Inst<R> {
    fn from(inst: lock_adcq_mi_sxl<R>) -> Self {
        Self::lock_adcq_mi_sxl(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_adcl: MI_SXB(m32[rw], imm8[sxl]) => 0xF0 + 0x83 /2 ib [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_adcl_mi_sxb<R> where R: Registers {
    pub m32: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm8: Simm8, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_adcl_mi_sxb<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m32: impl Into<Amode<R::ReadGpr>>, imm8: impl Into<Simm8>) -> Self {
        Self {
            m32: m32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm8: imm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m32.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x2; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:92
        self.m32.emit_rex_prefix(rex, digit, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:93

        // Emit opcode(s).
        buf.put1(0x83); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x2; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:156
        emit_modrm_sib_disp(buf, off, digit, &self.m32, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:157

        // Emit immediate.
        self.imm8.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m32, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_adcl_mi_sxb<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m32 = self.m32.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm8 = self.imm8.to_string(Extension::SignExtendLong); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock adcl {imm8}, {m32}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_adcl_mi_sxb<R>> for Inst<R> {
    fn from(inst: lock_adcl_mi_sxb<R>) -> Self {
        Self::lock_adcl_mi_sxb(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_adcq: MI_SXB(m64[rw], imm8[sxq]) => 0xF0 + REX.W + 0x83 /2 ib [_64b]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_adcq_mi_sxb<R> where R: Registers {
    pub m64: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm8: Simm8, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_adcq_mi_sxb<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m64: impl Into<Amode<R::ReadGpr>>, imm8: impl Into<Simm8>) -> Self {
        Self {
            m64: m64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm8: imm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m64.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x2; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:92
        self.m64.emit_rex_prefix(rex, digit, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:93

        // Emit opcode(s).
        buf.put1(0x83); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x2; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:156
        emit_modrm_sib_disp(buf, off, digit, &self.m64, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:157

        // Emit immediate.
        self.imm8.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m64, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_adcq_mi_sxb<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m64 = self.m64.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm8 = self.imm8.to_string(Extension::SignExtendQuad); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock adcq {imm8}, {m64}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_adcq_mi_sxb<R>> for Inst<R> {
    fn from(inst: lock_adcq_mi_sxb<R>) -> Self {
        Self::lock_adcq_mi_sxb(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_adcb: MR(m8[rw], r8) => 0xF0 + 0x10 /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_adcb_mr<R> where R: Registers {
    pub m8: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r8: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_adcb_mr<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m8: impl Into<Amode<R::ReadGpr>>, r8: impl Into<Gpr<R::ReadGpr>>) -> Self {
        Self {
            m8: m8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r8: r8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m8.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let mut rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:75
        self.r8.always_emit_if_8bit_needed(&mut rex); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:77
        let r8 = self.r8.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:119
        self.m8.emit_rex_prefix(rex, r8, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:120

        // Emit opcode(s).
        buf.put1(0x10); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r8 = self.r8.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:183
        emit_modrm_sib_disp(buf, off, r8, &self.m8, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:184
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m8, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
        visitor.read_gpr(self.r8.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_adcb_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m8 = self.m8.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r8 = self.r8.to_string(Size::Byte); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock adcb {r8}, {m8}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_adcb_mr<R>> for Inst<R> {
    fn from(inst: lock_adcb_mr<R>) -> Self {
        Self::lock_adcb_mr(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_adcw: MR(m16[rw], r16) => 0xF0 + 0x66 + 0x11 /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_adcw_mr<R> where R: Registers {
    pub m16: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r16: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_adcw_mr<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m16: impl Into<Amode<R::ReadGpr>>, r16: impl Into<Gpr<R::ReadGpr>>) -> Self {
        Self {
            m16: m16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r16: r16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m16.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42
        buf.put1(0x66); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:48

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r16 = self.r16.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:119
        self.m16.emit_rex_prefix(rex, r16, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:120

        // Emit opcode(s).
        buf.put1(0x11); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r16 = self.r16.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:183
        emit_modrm_sib_disp(buf, off, r16, &self.m16, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:184
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m16, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
        visitor.read_gpr(self.r16.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_adcw_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m16 = self.m16.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r16 = self.r16.to_string(Size::Word); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock adcw {r16}, {m16}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_adcw_mr<R>> for Inst<R> {
    fn from(inst: lock_adcw_mr<R>) -> Self {
        Self::lock_adcw_mr(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_adcl: MR(m32[rw], r32) => 0xF0 + 0x11 /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_adcl_mr<R> where R: Registers {
    pub m32: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r32: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_adcl_mr<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m32: impl Into<Amode<R::ReadGpr>>, r32: impl Into<Gpr<R::ReadGpr>>) -> Self {
        Self {
            m32: m32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r32: r32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m32.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r32 = self.r32.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:119
        self.m32.emit_rex_prefix(rex, r32, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:120

        // Emit opcode(s).
        buf.put1(0x11); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r32 = self.r32.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:183
        emit_modrm_sib_disp(buf, off, r32, &self.m32, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:184
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m32, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
        visitor.read_gpr(self.r32.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_adcl_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m32 = self.m32.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r32 = self.r32.to_string(Size::Doubleword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock adcl {r32}, {m32}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_adcl_mr<R>> for Inst<R> {
    fn from(inst: lock_adcl_mr<R>) -> Self {
        Self::lock_adcl_mr(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_adcq: MR(m64[rw], r64) => 0xF0 + REX.W + 0x11 /r [_64b]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_adcq_mr<R> where R: Registers {
    pub m64: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r64: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_adcq_mr<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m64: impl Into<Amode<R::ReadGpr>>, r64: impl Into<Gpr<R::ReadGpr>>) -> Self {
        Self {
            m64: m64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r64: r64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m64.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r64 = self.r64.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:119
        self.m64.emit_rex_prefix(rex, r64, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:120

        // Emit opcode(s).
        buf.put1(0x11); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r64 = self.r64.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:183
        emit_modrm_sib_disp(buf, off, r64, &self.m64, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:184
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m64, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
        visitor.read_gpr(self.r64.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_adcq_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m64 = self.m64.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r64 = self.r64.to_string(Size::Quadword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock adcq {r64}, {m64}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_adcq_mr<R>> for Inst<R> {
    fn from(inst: lock_adcq_mr<R>) -> Self {
        Self::lock_adcq_mr(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `addss: A(xmm[rw], xmm_m32) => 0xF3 + 0x0F + 0x58 /r [_64b | compat | sse]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct addss_a<R> where R: Registers {
    pub xmm: Xmm<R::ReadWriteXmm>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub xmm_m32: XmmMem<R::ReadXmm, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> addss_a<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(xmm: impl Into<Xmm<R::ReadWriteXmm>>, xmm_m32: impl Into<XmmMem<R::ReadXmm, R::ReadGpr>>) -> Self {
        Self {
            xmm: xmm.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            xmm_m32: xmm_m32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let XmmMem::Mem(xmm_m32) = &self.xmm_m32 {
            if let Some(trap_code) = xmm_m32.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit prefixes.
        buf.put1(0xF3); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let xmm = self.xmm.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:104
        match &self.xmm_m32 {
            XmmMem::Xmm(xmm_m32) => rex.emit_two_op(buf, xmm, xmm_m32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:108
            XmmMem::Mem(xmm_m32) => xmm_m32.emit_rex_prefix(rex, xmm, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:109
        }

        // Emit opcode(s).
        buf.put1(0x0f); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:60
        buf.put1(0x58); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let xmm = self.xmm.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:168
        match &self.xmm_m32 {
            XmmMem::Xmm(xmm_m32) => emit_modrm(buf, xmm, xmm_m32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:172
            XmmMem::Mem(xmm_m32) => emit_modrm_sib_disp(buf, off, xmm, xmm_m32, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:173
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write_xmm(self.xmm.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
        match &mut self.xmm_m32 {
            XmmMem::Xmm(r) => visitor.read_xmm(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            XmmMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat, Feature::sse] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for addss_a<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let xmm = self.xmm.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let xmm_m32 = self.xmm_m32.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "addss {xmm_m32}, {xmm}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<addss_a<R>> for Inst<R> {
    fn from(inst: addss_a<R>) -> Self {
        Self::addss_a(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `addsd: A(xmm[rw], xmm_m64) => 0xF2 + 0x0F + 0x58 /r [_64b | compat | sse2]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct addsd_a<R> where R: Registers {
    pub xmm: Xmm<R::ReadWriteXmm>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub xmm_m64: XmmMem<R::ReadXmm, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> addsd_a<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(xmm: impl Into<Xmm<R::ReadWriteXmm>>, xmm_m64: impl Into<XmmMem<R::ReadXmm, R::ReadGpr>>) -> Self {
        Self {
            xmm: xmm.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            xmm_m64: xmm_m64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let XmmMem::Mem(xmm_m64) = &self.xmm_m64 {
            if let Some(trap_code) = xmm_m64.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit prefixes.
        buf.put1(0xF2); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let xmm = self.xmm.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:104
        match &self.xmm_m64 {
            XmmMem::Xmm(xmm_m64) => rex.emit_two_op(buf, xmm, xmm_m64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:108
            XmmMem::Mem(xmm_m64) => xmm_m64.emit_rex_prefix(rex, xmm, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:109
        }

        // Emit opcode(s).
        buf.put1(0x0f); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:60
        buf.put1(0x58); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let xmm = self.xmm.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:168
        match &self.xmm_m64 {
            XmmMem::Xmm(xmm_m64) => emit_modrm(buf, xmm, xmm_m64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:172
            XmmMem::Mem(xmm_m64) => emit_modrm_sib_disp(buf, off, xmm, xmm_m64, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:173
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write_xmm(self.xmm.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
        match &mut self.xmm_m64 {
            XmmMem::Xmm(r) => visitor.read_xmm(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            XmmMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat, Feature::sse2] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for addsd_a<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let xmm = self.xmm.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let xmm_m64 = self.xmm_m64.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "addsd {xmm_m64}, {xmm}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<addsd_a<R>> for Inst<R> {
    fn from(inst: addsd_a<R>) -> Self {
        Self::addsd_a(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `addps: A(xmm[rw], xmm_m128[align]) => 0x0F + 0x58 /r [_64b | compat | sse]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct addps_a<R> where R: Registers {
    pub xmm: Xmm<R::ReadWriteXmm>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub xmm_m128: XmmMem<R::ReadXmm, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> addps_a<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(xmm: impl Into<Xmm<R::ReadWriteXmm>>, xmm_m128: impl Into<XmmMem<R::ReadXmm, R::ReadGpr>>) -> Self {
        Self {
            xmm: xmm.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            xmm_m128: xmm_m128.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let XmmMem::Mem(xmm_m128) = &self.xmm_m128 {
            if let Some(trap_code) = xmm_m128.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let xmm = self.xmm.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:104
        match &self.xmm_m128 {
            XmmMem::Xmm(xmm_m128) => rex.emit_two_op(buf, xmm, xmm_m128.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:108
            XmmMem::Mem(xmm_m128) => xmm_m128.emit_rex_prefix(rex, xmm, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:109
        }

        // Emit opcode(s).
        buf.put1(0x0f); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:60
        buf.put1(0x58); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let xmm = self.xmm.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:168
        match &self.xmm_m128 {
            XmmMem::Xmm(xmm_m128) => emit_modrm(buf, xmm, xmm_m128.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:172
            XmmMem::Mem(xmm_m128) => emit_modrm_sib_disp(buf, off, xmm, xmm_m128, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:173
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write_xmm(self.xmm.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
        match &mut self.xmm_m128 {
            XmmMem::Xmm(r) => visitor.read_xmm(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            XmmMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat, Feature::sse] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for addps_a<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let xmm = self.xmm.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let xmm_m128 = self.xmm_m128.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "addps {xmm_m128}, {xmm}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<addps_a<R>> for Inst<R> {
    fn from(inst: addps_a<R>) -> Self {
        Self::addps_a(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `addpd: A(xmm[rw], xmm_m128[align]) => 0x66 + 0x0F + 0x58 /r [_64b | compat | sse2]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct addpd_a<R> where R: Registers {
    pub xmm: Xmm<R::ReadWriteXmm>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub xmm_m128: XmmMem<R::ReadXmm, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> addpd_a<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(xmm: impl Into<Xmm<R::ReadWriteXmm>>, xmm_m128: impl Into<XmmMem<R::ReadXmm, R::ReadGpr>>) -> Self {
        Self {
            xmm: xmm.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            xmm_m128: xmm_m128.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let XmmMem::Mem(xmm_m128) = &self.xmm_m128 {
            if let Some(trap_code) = xmm_m128.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit prefixes.
        buf.put1(0x66); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:48

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let xmm = self.xmm.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:104
        match &self.xmm_m128 {
            XmmMem::Xmm(xmm_m128) => rex.emit_two_op(buf, xmm, xmm_m128.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:108
            XmmMem::Mem(xmm_m128) => xmm_m128.emit_rex_prefix(rex, xmm, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:109
        }

        // Emit opcode(s).
        buf.put1(0x0f); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:60
        buf.put1(0x58); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let xmm = self.xmm.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:168
        match &self.xmm_m128 {
            XmmMem::Xmm(xmm_m128) => emit_modrm(buf, xmm, xmm_m128.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:172
            XmmMem::Mem(xmm_m128) => emit_modrm_sib_disp(buf, off, xmm, xmm_m128, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:173
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write_xmm(self.xmm.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
        match &mut self.xmm_m128 {
            XmmMem::Xmm(r) => visitor.read_xmm(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            XmmMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat, Feature::sse2] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for addpd_a<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let xmm = self.xmm.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let xmm_m128 = self.xmm_m128.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "addpd {xmm_m128}, {xmm}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<addpd_a<R>> for Inst<R> {
    fn from(inst: addpd_a<R>) -> Self {
        Self::addpd_a(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `andb: I(al[rw], imm8) => 0x24 ib [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct andb_i<R> where R: Registers {
    pub al: Fixed<R::ReadWriteGpr, { gpr::enc::RAX }>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm8: Imm8, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> andb_i<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(al: impl Into<Fixed<R::ReadWriteGpr, { gpr::enc::RAX }>>, imm8: impl Into<Imm8>) -> Self {
        Self {
            al: al.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm8: imm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, _: &impl KnownOffsetTable) {

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:87
        rex.emit_two_op(buf, digit, self.al.enc()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:88

        // Emit opcode(s).
        buf.put1(0x24); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit immediate.
        self.imm8.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        let enc = self.al.expected_enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:138
        visitor.fixed_read_write_gpr(&mut self.al.0, enc); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:139
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for andb_i<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let al = "%al"; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm8 = self.imm8.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "andb {imm8}, {al}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<andb_i<R>> for Inst<R> {
    fn from(inst: andb_i<R>) -> Self {
        Self::andb_i(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `andw: I(ax[rw], imm16) => 0x66 + 0x25 iw [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct andw_i<R> where R: Registers {
    pub ax: Fixed<R::ReadWriteGpr, { gpr::enc::RAX }>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm16: Imm16, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> andw_i<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(ax: impl Into<Fixed<R::ReadWriteGpr, { gpr::enc::RAX }>>, imm16: impl Into<Imm16>) -> Self {
        Self {
            ax: ax.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm16: imm16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, _: &impl KnownOffsetTable) {

        // Emit prefixes.
        buf.put1(0x66); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:48

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:87
        rex.emit_two_op(buf, digit, self.ax.enc()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:88

        // Emit opcode(s).
        buf.put1(0x25); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit immediate.
        self.imm16.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        let enc = self.ax.expected_enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:138
        visitor.fixed_read_write_gpr(&mut self.ax.0, enc); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:139
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for andw_i<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let ax = "%ax"; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm16 = self.imm16.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "andw {imm16}, {ax}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<andw_i<R>> for Inst<R> {
    fn from(inst: andw_i<R>) -> Self {
        Self::andw_i(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `andl: I(eax[rw], imm32) => 0x25 id [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct andl_i<R> where R: Registers {
    pub eax: Fixed<R::ReadWriteGpr, { gpr::enc::RAX }>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm32: Imm32, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> andl_i<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(eax: impl Into<Fixed<R::ReadWriteGpr, { gpr::enc::RAX }>>, imm32: impl Into<Imm32>) -> Self {
        Self {
            eax: eax.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm32: imm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, _: &impl KnownOffsetTable) {

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:87
        rex.emit_two_op(buf, digit, self.eax.enc()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:88

        // Emit opcode(s).
        buf.put1(0x25); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit immediate.
        self.imm32.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        let enc = self.eax.expected_enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:138
        visitor.fixed_read_write_gpr(&mut self.eax.0, enc); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:139
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for andl_i<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let eax = "%eax"; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm32 = self.imm32.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "andl {imm32}, {eax}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<andl_i<R>> for Inst<R> {
    fn from(inst: andl_i<R>) -> Self {
        Self::andl_i(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `andq: I_SXL(rax[rw], imm32[sxq]) => REX.W + 0x25 id [_64b]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct andq_i_sxl<R> where R: Registers {
    pub rax: Fixed<R::ReadWriteGpr, { gpr::enc::RAX }>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm32: Simm32, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> andq_i_sxl<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rax: impl Into<Fixed<R::ReadWriteGpr, { gpr::enc::RAX }>>, imm32: impl Into<Simm32>) -> Self {
        Self {
            rax: rax.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm32: imm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, _: &impl KnownOffsetTable) {

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:87
        rex.emit_two_op(buf, digit, self.rax.enc()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:88

        // Emit opcode(s).
        buf.put1(0x25); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit immediate.
        self.imm32.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        let enc = self.rax.expected_enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:138
        visitor.fixed_read_write_gpr(&mut self.rax.0, enc); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:139
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for andq_i_sxl<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rax = "%rax"; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm32 = self.imm32.to_string(Extension::SignExtendQuad); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "andq {imm32}, {rax}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<andq_i_sxl<R>> for Inst<R> {
    fn from(inst: andq_i_sxl<R>) -> Self {
        Self::andq_i_sxl(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `andb: MI(rm8[rw], imm8) => 0x80 /4 ib [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct andb_mi<R> where R: Registers {
    pub rm8: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm8: Imm8, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> andb_mi<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm8: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, imm8: impl Into<Imm8>) -> Self {
        Self {
            rm8: rm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm8: imm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm8) = &self.rm8 {
            if let Some(trap_code) = rm8.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let mut rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:75
        self.rm8.always_emit_if_8bit_needed(&mut rex); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:77
        let digit = 0x4; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:97
        match &self.rm8 {
            GprMem::Gpr(rm8) => rex.emit_two_op(buf, digit, rm8.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:99
            GprMem::Mem(rm8) => rm8.emit_rex_prefix(rex, digit, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:100
        }

        // Emit opcode(s).
        buf.put1(0x80); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x4; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:161
        match &self.rm8 {
            GprMem::Gpr(rm8) => emit_modrm(buf, digit, rm8.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:163
            GprMem::Mem(rm8) => emit_modrm_sib_disp(buf, off, digit, rm8, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:164
        }

        // Emit immediate.
        self.imm8.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm8 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for andb_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm8 = self.rm8.to_string(Size::Byte); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm8 = self.imm8.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "andb {imm8}, {rm8}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<andb_mi<R>> for Inst<R> {
    fn from(inst: andb_mi<R>) -> Self {
        Self::andb_mi(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `andw: MI(rm16[rw], imm16) => 0x66 + 0x81 /4 iw [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct andw_mi<R> where R: Registers {
    pub rm16: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm16: Imm16, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> andw_mi<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm16: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, imm16: impl Into<Imm16>) -> Self {
        Self {
            rm16: rm16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm16: imm16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm16) = &self.rm16 {
            if let Some(trap_code) = rm16.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit prefixes.
        buf.put1(0x66); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:48

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x4; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:97
        match &self.rm16 {
            GprMem::Gpr(rm16) => rex.emit_two_op(buf, digit, rm16.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:99
            GprMem::Mem(rm16) => rm16.emit_rex_prefix(rex, digit, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:100
        }

        // Emit opcode(s).
        buf.put1(0x81); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x4; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:161
        match &self.rm16 {
            GprMem::Gpr(rm16) => emit_modrm(buf, digit, rm16.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:163
            GprMem::Mem(rm16) => emit_modrm_sib_disp(buf, off, digit, rm16, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:164
        }

        // Emit immediate.
        self.imm16.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm16 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for andw_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm16 = self.rm16.to_string(Size::Word); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm16 = self.imm16.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "andw {imm16}, {rm16}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<andw_mi<R>> for Inst<R> {
    fn from(inst: andw_mi<R>) -> Self {
        Self::andw_mi(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `andl: MI(rm32[rw], imm32) => 0x81 /4 id [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct andl_mi<R> where R: Registers {
    pub rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm32: Imm32, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> andl_mi<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm32: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, imm32: impl Into<Imm32>) -> Self {
        Self {
            rm32: rm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm32: imm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x4; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:97
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, digit, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:99
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, digit, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:100
        }

        // Emit opcode(s).
        buf.put1(0x81); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x4; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:161
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, digit, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:163
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, digit, rm32, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:164
        }

        // Emit immediate.
        self.imm32.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for andl_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm32 = self.rm32.to_string(Size::Doubleword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm32 = self.imm32.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "andl {imm32}, {rm32}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<andl_mi<R>> for Inst<R> {
    fn from(inst: andl_mi<R>) -> Self {
        Self::andl_mi(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `andq: MI_SXL(rm64[rw], imm32[sxq]) => REX.W + 0x81 /4 id [_64b]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct andq_mi_sxl<R> where R: Registers {
    pub rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm32: Simm32, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> andq_mi_sxl<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm64: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, imm32: impl Into<Simm32>) -> Self {
        Self {
            rm64: rm64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm32: imm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x4; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:97
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, digit, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:99
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, digit, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:100
        }

        // Emit opcode(s).
        buf.put1(0x81); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x4; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:161
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, digit, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:163
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, digit, rm64, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:164
        }

        // Emit immediate.
        self.imm32.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for andq_mi_sxl<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm64 = self.rm64.to_string(Size::Quadword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm32 = self.imm32.to_string(Extension::SignExtendQuad); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "andq {imm32}, {rm64}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<andq_mi_sxl<R>> for Inst<R> {
    fn from(inst: andq_mi_sxl<R>) -> Self {
        Self::andq_mi_sxl(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `andl: MI_SXB(rm32[rw], imm8[sxl]) => 0x83 /4 ib [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct andl_mi_sxb<R> where R: Registers {
    pub rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm8: Simm8, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> andl_mi_sxb<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm32: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, imm8: impl Into<Simm8>) -> Self {
        Self {
            rm32: rm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm8: imm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x4; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:97
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, digit, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:99
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, digit, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:100
        }

        // Emit opcode(s).
        buf.put1(0x83); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x4; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:161
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, digit, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:163
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, digit, rm32, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:164
        }

        // Emit immediate.
        self.imm8.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for andl_mi_sxb<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm32 = self.rm32.to_string(Size::Doubleword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm8 = self.imm8.to_string(Extension::SignExtendLong); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "andl {imm8}, {rm32}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<andl_mi_sxb<R>> for Inst<R> {
    fn from(inst: andl_mi_sxb<R>) -> Self {
        Self::andl_mi_sxb(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `andq: MI_SXB(rm64[rw], imm8[sxq]) => REX.W + 0x83 /4 ib [_64b]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct andq_mi_sxb<R> where R: Registers {
    pub rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm8: Simm8, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> andq_mi_sxb<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm64: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, imm8: impl Into<Simm8>) -> Self {
        Self {
            rm64: rm64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm8: imm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x4; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:97
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, digit, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:99
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, digit, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:100
        }

        // Emit opcode(s).
        buf.put1(0x83); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x4; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:161
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, digit, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:163
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, digit, rm64, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:164
        }

        // Emit immediate.
        self.imm8.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for andq_mi_sxb<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm64 = self.rm64.to_string(Size::Quadword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm8 = self.imm8.to_string(Extension::SignExtendQuad); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "andq {imm8}, {rm64}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<andq_mi_sxb<R>> for Inst<R> {
    fn from(inst: andq_mi_sxb<R>) -> Self {
        Self::andq_mi_sxb(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `andb: MR(rm8[rw], r8) => 0x20 /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct andb_mr<R> where R: Registers {
    pub rm8: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r8: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> andb_mr<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm8: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, r8: impl Into<Gpr<R::ReadGpr>>) -> Self {
        Self {
            rm8: rm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r8: r8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm8) = &self.rm8 {
            if let Some(trap_code) = rm8.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let mut rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:75
        self.rm8.always_emit_if_8bit_needed(&mut rex); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:77
        self.r8.always_emit_if_8bit_needed(&mut rex); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:77
        let r8 = self.r8.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:123
        match &self.rm8 {
            GprMem::Gpr(rm8) => rex.emit_two_op(buf, r8, rm8.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:130
            GprMem::Mem(rm8) => rm8.emit_rex_prefix(rex, r8, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:131
        }

        // Emit opcode(s).
        buf.put1(0x20); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r8 = self.r8.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:187
        match &self.rm8 {
            GprMem::Gpr(rm8) => emit_modrm(buf, r8, rm8.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:195
            GprMem::Mem(rm8) => emit_modrm_sib_disp(buf, off, r8, rm8, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:196
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm8 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
        visitor.read_gpr(self.r8.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for andb_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm8 = self.rm8.to_string(Size::Byte); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r8 = self.r8.to_string(Size::Byte); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "andb {r8}, {rm8}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<andb_mr<R>> for Inst<R> {
    fn from(inst: andb_mr<R>) -> Self {
        Self::andb_mr(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `andw: MR(rm16[rw], r16) => 0x66 + 0x21 /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct andw_mr<R> where R: Registers {
    pub rm16: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r16: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> andw_mr<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm16: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, r16: impl Into<Gpr<R::ReadGpr>>) -> Self {
        Self {
            rm16: rm16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r16: r16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm16) = &self.rm16 {
            if let Some(trap_code) = rm16.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit prefixes.
        buf.put1(0x66); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:48

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r16 = self.r16.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:123
        match &self.rm16 {
            GprMem::Gpr(rm16) => rex.emit_two_op(buf, r16, rm16.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:130
            GprMem::Mem(rm16) => rm16.emit_rex_prefix(rex, r16, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:131
        }

        // Emit opcode(s).
        buf.put1(0x21); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r16 = self.r16.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:187
        match &self.rm16 {
            GprMem::Gpr(rm16) => emit_modrm(buf, r16, rm16.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:195
            GprMem::Mem(rm16) => emit_modrm_sib_disp(buf, off, r16, rm16, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:196
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm16 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
        visitor.read_gpr(self.r16.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for andw_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm16 = self.rm16.to_string(Size::Word); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r16 = self.r16.to_string(Size::Word); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "andw {r16}, {rm16}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<andw_mr<R>> for Inst<R> {
    fn from(inst: andw_mr<R>) -> Self {
        Self::andw_mr(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `andl: MR(rm32[rw], r32) => 0x21 /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct andl_mr<R> where R: Registers {
    pub rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r32: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> andl_mr<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm32: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, r32: impl Into<Gpr<R::ReadGpr>>) -> Self {
        Self {
            rm32: rm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r32: r32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r32 = self.r32.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:123
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, r32, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:130
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, r32, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:131
        }

        // Emit opcode(s).
        buf.put1(0x21); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r32 = self.r32.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:187
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, r32, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:195
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, r32, rm32, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:196
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
        visitor.read_gpr(self.r32.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for andl_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm32 = self.rm32.to_string(Size::Doubleword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r32 = self.r32.to_string(Size::Doubleword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "andl {r32}, {rm32}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<andl_mr<R>> for Inst<R> {
    fn from(inst: andl_mr<R>) -> Self {
        Self::andl_mr(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `andq: MR(rm64[rw], r64) => REX.W + 0x21 /r [_64b]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct andq_mr<R> where R: Registers {
    pub rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r64: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> andq_mr<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm64: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, r64: impl Into<Gpr<R::ReadGpr>>) -> Self {
        Self {
            rm64: rm64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r64: r64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r64 = self.r64.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:123
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, r64, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:130
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, r64, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:131
        }

        // Emit opcode(s).
        buf.put1(0x21); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r64 = self.r64.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:187
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, r64, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:195
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, r64, rm64, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:196
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
        visitor.read_gpr(self.r64.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for andq_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm64 = self.rm64.to_string(Size::Quadword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r64 = self.r64.to_string(Size::Quadword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "andq {r64}, {rm64}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<andq_mr<R>> for Inst<R> {
    fn from(inst: andq_mr<R>) -> Self {
        Self::andq_mr(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `andb: RM(r8[rw], rm8) => 0x22 /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct andb_rm<R> where R: Registers {
    pub r8: Gpr<R::ReadWriteGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub rm8: GprMem<R::ReadGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> andb_rm<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(r8: impl Into<Gpr<R::ReadWriteGpr>>, rm8: impl Into<GprMem<R::ReadGpr, R::ReadGpr>>) -> Self {
        Self {
            r8: r8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            rm8: rm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm8) = &self.rm8 {
            if let Some(trap_code) = rm8.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let mut rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:75
        self.r8.always_emit_if_8bit_needed(&mut rex); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:77
        self.rm8.always_emit_if_8bit_needed(&mut rex); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:77
        let r8 = self.r8.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:104
        match &self.rm8 {
            GprMem::Gpr(rm8) => rex.emit_two_op(buf, r8, rm8.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:112
            GprMem::Mem(rm8) => rm8.emit_rex_prefix(rex, r8, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:113
        }

        // Emit opcode(s).
        buf.put1(0x22); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r8 = self.r8.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:168
        match &self.rm8 {
            GprMem::Gpr(rm8) => emit_modrm(buf, r8, rm8.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:176
            GprMem::Mem(rm8) => emit_modrm_sib_disp(buf, off, r8, rm8, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:177
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write_gpr(self.r8.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
        match &mut self.rm8 {
            GprMem::Gpr(r) => visitor.read_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for andb_rm<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let r8 = self.r8.to_string(Size::Byte); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let rm8 = self.rm8.to_string(Size::Byte); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "andb {rm8}, {r8}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<andb_rm<R>> for Inst<R> {
    fn from(inst: andb_rm<R>) -> Self {
        Self::andb_rm(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `andw: RM(r16[rw], rm16) => 0x66 + 0x23 /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct andw_rm<R> where R: Registers {
    pub r16: Gpr<R::ReadWriteGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub rm16: GprMem<R::ReadGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> andw_rm<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(r16: impl Into<Gpr<R::ReadWriteGpr>>, rm16: impl Into<GprMem<R::ReadGpr, R::ReadGpr>>) -> Self {
        Self {
            r16: r16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            rm16: rm16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm16) = &self.rm16 {
            if let Some(trap_code) = rm16.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit prefixes.
        buf.put1(0x66); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:48

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r16 = self.r16.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:104
        match &self.rm16 {
            GprMem::Gpr(rm16) => rex.emit_two_op(buf, r16, rm16.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:112
            GprMem::Mem(rm16) => rm16.emit_rex_prefix(rex, r16, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:113
        }

        // Emit opcode(s).
        buf.put1(0x23); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r16 = self.r16.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:168
        match &self.rm16 {
            GprMem::Gpr(rm16) => emit_modrm(buf, r16, rm16.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:176
            GprMem::Mem(rm16) => emit_modrm_sib_disp(buf, off, r16, rm16, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:177
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write_gpr(self.r16.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
        match &mut self.rm16 {
            GprMem::Gpr(r) => visitor.read_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for andw_rm<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let r16 = self.r16.to_string(Size::Word); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let rm16 = self.rm16.to_string(Size::Word); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "andw {rm16}, {r16}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<andw_rm<R>> for Inst<R> {
    fn from(inst: andw_rm<R>) -> Self {
        Self::andw_rm(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `andl: RM(r32[rw], rm32) => 0x23 /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct andl_rm<R> where R: Registers {
    pub r32: Gpr<R::ReadWriteGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub rm32: GprMem<R::ReadGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> andl_rm<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(r32: impl Into<Gpr<R::ReadWriteGpr>>, rm32: impl Into<GprMem<R::ReadGpr, R::ReadGpr>>) -> Self {
        Self {
            r32: r32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            rm32: rm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r32 = self.r32.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:104
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, r32, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:112
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, r32, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:113
        }

        // Emit opcode(s).
        buf.put1(0x23); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r32 = self.r32.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:168
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, r32, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:176
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, r32, rm32, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:177
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write_gpr(self.r32.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for andl_rm<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let r32 = self.r32.to_string(Size::Doubleword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let rm32 = self.rm32.to_string(Size::Doubleword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "andl {rm32}, {r32}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<andl_rm<R>> for Inst<R> {
    fn from(inst: andl_rm<R>) -> Self {
        Self::andl_rm(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `andq: RM(r64[rw], rm64) => REX.W + 0x23 /r [_64b]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct andq_rm<R> where R: Registers {
    pub r64: Gpr<R::ReadWriteGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub rm64: GprMem<R::ReadGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> andq_rm<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(r64: impl Into<Gpr<R::ReadWriteGpr>>, rm64: impl Into<GprMem<R::ReadGpr, R::ReadGpr>>) -> Self {
        Self {
            r64: r64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            rm64: rm64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r64 = self.r64.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:104
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, r64, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:112
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, r64, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:113
        }

        // Emit opcode(s).
        buf.put1(0x23); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r64 = self.r64.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:168
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, r64, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:176
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, r64, rm64, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:177
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write_gpr(self.r64.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for andq_rm<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let r64 = self.r64.to_string(Size::Quadword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let rm64 = self.rm64.to_string(Size::Quadword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "andq {rm64}, {r64}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<andq_rm<R>> for Inst<R> {
    fn from(inst: andq_rm<R>) -> Self {
        Self::andq_rm(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_andb: MI(m8[rw], imm8) => 0xF0 + 0x80 /4 ib [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_andb_mi<R> where R: Registers {
    pub m8: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm8: Imm8, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_andb_mi<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m8: impl Into<Amode<R::ReadGpr>>, imm8: impl Into<Imm8>) -> Self {
        Self {
            m8: m8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm8: imm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m8.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x4; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:92
        self.m8.emit_rex_prefix(rex, digit, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:93

        // Emit opcode(s).
        buf.put1(0x80); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x4; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:156
        emit_modrm_sib_disp(buf, off, digit, &self.m8, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:157

        // Emit immediate.
        self.imm8.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m8, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_andb_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m8 = self.m8.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm8 = self.imm8.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock andb {imm8}, {m8}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_andb_mi<R>> for Inst<R> {
    fn from(inst: lock_andb_mi<R>) -> Self {
        Self::lock_andb_mi(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_andw: MI(m16[rw], imm16) => 0xF0 + 0x66 + 0x81 /4 iw [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_andw_mi<R> where R: Registers {
    pub m16: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm16: Imm16, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_andw_mi<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m16: impl Into<Amode<R::ReadGpr>>, imm16: impl Into<Imm16>) -> Self {
        Self {
            m16: m16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm16: imm16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m16.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42
        buf.put1(0x66); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:48

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x4; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:92
        self.m16.emit_rex_prefix(rex, digit, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:93

        // Emit opcode(s).
        buf.put1(0x81); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x4; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:156
        emit_modrm_sib_disp(buf, off, digit, &self.m16, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:157

        // Emit immediate.
        self.imm16.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m16, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_andw_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m16 = self.m16.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm16 = self.imm16.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock andw {imm16}, {m16}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_andw_mi<R>> for Inst<R> {
    fn from(inst: lock_andw_mi<R>) -> Self {
        Self::lock_andw_mi(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_andl: MI(m32[rw], imm32) => 0xF0 + 0x81 /4 id [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_andl_mi<R> where R: Registers {
    pub m32: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm32: Imm32, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_andl_mi<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m32: impl Into<Amode<R::ReadGpr>>, imm32: impl Into<Imm32>) -> Self {
        Self {
            m32: m32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm32: imm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m32.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x4; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:92
        self.m32.emit_rex_prefix(rex, digit, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:93

        // Emit opcode(s).
        buf.put1(0x81); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x4; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:156
        emit_modrm_sib_disp(buf, off, digit, &self.m32, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:157

        // Emit immediate.
        self.imm32.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m32, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_andl_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m32 = self.m32.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm32 = self.imm32.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock andl {imm32}, {m32}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_andl_mi<R>> for Inst<R> {
    fn from(inst: lock_andl_mi<R>) -> Self {
        Self::lock_andl_mi(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_andq: MI_SXL(m64[rw], imm32[sxq]) => 0xF0 + REX.W + 0x81 /4 id [_64b]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_andq_mi_sxl<R> where R: Registers {
    pub m64: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm32: Simm32, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_andq_mi_sxl<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m64: impl Into<Amode<R::ReadGpr>>, imm32: impl Into<Simm32>) -> Self {
        Self {
            m64: m64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm32: imm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m64.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x4; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:92
        self.m64.emit_rex_prefix(rex, digit, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:93

        // Emit opcode(s).
        buf.put1(0x81); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x4; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:156
        emit_modrm_sib_disp(buf, off, digit, &self.m64, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:157

        // Emit immediate.
        self.imm32.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m64, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_andq_mi_sxl<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m64 = self.m64.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm32 = self.imm32.to_string(Extension::SignExtendQuad); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock andq {imm32}, {m64}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_andq_mi_sxl<R>> for Inst<R> {
    fn from(inst: lock_andq_mi_sxl<R>) -> Self {
        Self::lock_andq_mi_sxl(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_andl: MI_SXB(m32[rw], imm8[sxl]) => 0xF0 + 0x83 /4 ib [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_andl_mi_sxb<R> where R: Registers {
    pub m32: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm8: Simm8, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_andl_mi_sxb<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m32: impl Into<Amode<R::ReadGpr>>, imm8: impl Into<Simm8>) -> Self {
        Self {
            m32: m32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm8: imm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m32.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x4; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:92
        self.m32.emit_rex_prefix(rex, digit, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:93

        // Emit opcode(s).
        buf.put1(0x83); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x4; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:156
        emit_modrm_sib_disp(buf, off, digit, &self.m32, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:157

        // Emit immediate.
        self.imm8.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m32, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_andl_mi_sxb<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m32 = self.m32.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm8 = self.imm8.to_string(Extension::SignExtendLong); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock andl {imm8}, {m32}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_andl_mi_sxb<R>> for Inst<R> {
    fn from(inst: lock_andl_mi_sxb<R>) -> Self {
        Self::lock_andl_mi_sxb(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_andq: MI_SXB(m64[rw], imm8[sxq]) => 0xF0 + REX.W + 0x83 /4 ib [_64b]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_andq_mi_sxb<R> where R: Registers {
    pub m64: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm8: Simm8, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_andq_mi_sxb<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m64: impl Into<Amode<R::ReadGpr>>, imm8: impl Into<Simm8>) -> Self {
        Self {
            m64: m64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm8: imm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m64.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x4; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:92
        self.m64.emit_rex_prefix(rex, digit, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:93

        // Emit opcode(s).
        buf.put1(0x83); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x4; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:156
        emit_modrm_sib_disp(buf, off, digit, &self.m64, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:157

        // Emit immediate.
        self.imm8.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m64, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_andq_mi_sxb<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m64 = self.m64.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm8 = self.imm8.to_string(Extension::SignExtendQuad); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock andq {imm8}, {m64}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_andq_mi_sxb<R>> for Inst<R> {
    fn from(inst: lock_andq_mi_sxb<R>) -> Self {
        Self::lock_andq_mi_sxb(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_andb: MR(m8[rw], r8) => 0xF0 + 0x20 /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_andb_mr<R> where R: Registers {
    pub m8: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r8: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_andb_mr<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m8: impl Into<Amode<R::ReadGpr>>, r8: impl Into<Gpr<R::ReadGpr>>) -> Self {
        Self {
            m8: m8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r8: r8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m8.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let mut rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:75
        self.r8.always_emit_if_8bit_needed(&mut rex); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:77
        let r8 = self.r8.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:119
        self.m8.emit_rex_prefix(rex, r8, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:120

        // Emit opcode(s).
        buf.put1(0x20); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r8 = self.r8.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:183
        emit_modrm_sib_disp(buf, off, r8, &self.m8, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:184
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m8, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
        visitor.read_gpr(self.r8.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_andb_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m8 = self.m8.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r8 = self.r8.to_string(Size::Byte); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock andb {r8}, {m8}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_andb_mr<R>> for Inst<R> {
    fn from(inst: lock_andb_mr<R>) -> Self {
        Self::lock_andb_mr(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_andw: MR(m16[rw], r16) => 0xF0 + 0x66 + 0x21 /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_andw_mr<R> where R: Registers {
    pub m16: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r16: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_andw_mr<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m16: impl Into<Amode<R::ReadGpr>>, r16: impl Into<Gpr<R::ReadGpr>>) -> Self {
        Self {
            m16: m16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r16: r16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m16.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42
        buf.put1(0x66); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:48

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r16 = self.r16.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:119
        self.m16.emit_rex_prefix(rex, r16, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:120

        // Emit opcode(s).
        buf.put1(0x21); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r16 = self.r16.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:183
        emit_modrm_sib_disp(buf, off, r16, &self.m16, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:184
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m16, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
        visitor.read_gpr(self.r16.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_andw_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m16 = self.m16.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r16 = self.r16.to_string(Size::Word); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock andw {r16}, {m16}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_andw_mr<R>> for Inst<R> {
    fn from(inst: lock_andw_mr<R>) -> Self {
        Self::lock_andw_mr(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_andl: MR(m32[rw], r32) => 0xF0 + 0x21 /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_andl_mr<R> where R: Registers {
    pub m32: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r32: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_andl_mr<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m32: impl Into<Amode<R::ReadGpr>>, r32: impl Into<Gpr<R::ReadGpr>>) -> Self {
        Self {
            m32: m32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r32: r32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m32.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r32 = self.r32.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:119
        self.m32.emit_rex_prefix(rex, r32, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:120

        // Emit opcode(s).
        buf.put1(0x21); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r32 = self.r32.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:183
        emit_modrm_sib_disp(buf, off, r32, &self.m32, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:184
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m32, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
        visitor.read_gpr(self.r32.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_andl_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m32 = self.m32.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r32 = self.r32.to_string(Size::Doubleword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock andl {r32}, {m32}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_andl_mr<R>> for Inst<R> {
    fn from(inst: lock_andl_mr<R>) -> Self {
        Self::lock_andl_mr(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_andq: MR(m64[rw], r64) => 0xF0 + REX.W + 0x21 /r [_64b]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_andq_mr<R> where R: Registers {
    pub m64: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r64: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_andq_mr<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m64: impl Into<Amode<R::ReadGpr>>, r64: impl Into<Gpr<R::ReadGpr>>) -> Self {
        Self {
            m64: m64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r64: r64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m64.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r64 = self.r64.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:119
        self.m64.emit_rex_prefix(rex, r64, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:120

        // Emit opcode(s).
        buf.put1(0x21); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r64 = self.r64.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:183
        emit_modrm_sib_disp(buf, off, r64, &self.m64, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:184
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m64, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
        visitor.read_gpr(self.r64.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_andq_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m64 = self.m64.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r64 = self.r64.to_string(Size::Quadword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock andq {r64}, {m64}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_andq_mr<R>> for Inst<R> {
    fn from(inst: lock_andq_mr<R>) -> Self {
        Self::lock_andq_mr(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `andps: A(xmm[rw], xmm_m128[align]) => 0x0F + 0x54 /r [_64b | compat | sse]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct andps_a<R> where R: Registers {
    pub xmm: Xmm<R::ReadWriteXmm>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub xmm_m128: XmmMem<R::ReadXmm, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> andps_a<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(xmm: impl Into<Xmm<R::ReadWriteXmm>>, xmm_m128: impl Into<XmmMem<R::ReadXmm, R::ReadGpr>>) -> Self {
        Self {
            xmm: xmm.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            xmm_m128: xmm_m128.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let XmmMem::Mem(xmm_m128) = &self.xmm_m128 {
            if let Some(trap_code) = xmm_m128.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let xmm = self.xmm.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:104
        match &self.xmm_m128 {
            XmmMem::Xmm(xmm_m128) => rex.emit_two_op(buf, xmm, xmm_m128.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:108
            XmmMem::Mem(xmm_m128) => xmm_m128.emit_rex_prefix(rex, xmm, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:109
        }

        // Emit opcode(s).
        buf.put1(0x0f); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:60
        buf.put1(0x54); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let xmm = self.xmm.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:168
        match &self.xmm_m128 {
            XmmMem::Xmm(xmm_m128) => emit_modrm(buf, xmm, xmm_m128.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:172
            XmmMem::Mem(xmm_m128) => emit_modrm_sib_disp(buf, off, xmm, xmm_m128, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:173
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write_xmm(self.xmm.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
        match &mut self.xmm_m128 {
            XmmMem::Xmm(r) => visitor.read_xmm(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            XmmMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat, Feature::sse] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for andps_a<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let xmm = self.xmm.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let xmm_m128 = self.xmm_m128.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "andps {xmm_m128}, {xmm}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<andps_a<R>> for Inst<R> {
    fn from(inst: andps_a<R>) -> Self {
        Self::andps_a(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `andpd: A(xmm[rw], xmm_m128[align]) => 0x66 + 0x0F + 0x54 /r [_64b | compat | sse2]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct andpd_a<R> where R: Registers {
    pub xmm: Xmm<R::ReadWriteXmm>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub xmm_m128: XmmMem<R::ReadXmm, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> andpd_a<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(xmm: impl Into<Xmm<R::ReadWriteXmm>>, xmm_m128: impl Into<XmmMem<R::ReadXmm, R::ReadGpr>>) -> Self {
        Self {
            xmm: xmm.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            xmm_m128: xmm_m128.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let XmmMem::Mem(xmm_m128) = &self.xmm_m128 {
            if let Some(trap_code) = xmm_m128.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit prefixes.
        buf.put1(0x66); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:48

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let xmm = self.xmm.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:104
        match &self.xmm_m128 {
            XmmMem::Xmm(xmm_m128) => rex.emit_two_op(buf, xmm, xmm_m128.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:108
            XmmMem::Mem(xmm_m128) => xmm_m128.emit_rex_prefix(rex, xmm, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:109
        }

        // Emit opcode(s).
        buf.put1(0x0f); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:60
        buf.put1(0x54); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let xmm = self.xmm.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:168
        match &self.xmm_m128 {
            XmmMem::Xmm(xmm_m128) => emit_modrm(buf, xmm, xmm_m128.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:172
            XmmMem::Mem(xmm_m128) => emit_modrm_sib_disp(buf, off, xmm, xmm_m128, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:173
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write_xmm(self.xmm.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
        match &mut self.xmm_m128 {
            XmmMem::Xmm(r) => visitor.read_xmm(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            XmmMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat, Feature::sse2] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for andpd_a<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let xmm = self.xmm.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let xmm_m128 = self.xmm_m128.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "andpd {xmm_m128}, {xmm}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<andpd_a<R>> for Inst<R> {
    fn from(inst: andpd_a<R>) -> Self {
        Self::andpd_a(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `orb: I(al[rw], imm8) => 0x0c ib [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct orb_i<R> where R: Registers {
    pub al: Fixed<R::ReadWriteGpr, { gpr::enc::RAX }>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm8: Imm8, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> orb_i<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(al: impl Into<Fixed<R::ReadWriteGpr, { gpr::enc::RAX }>>, imm8: impl Into<Imm8>) -> Self {
        Self {
            al: al.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm8: imm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, _: &impl KnownOffsetTable) {

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:87
        rex.emit_two_op(buf, digit, self.al.enc()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:88

        // Emit opcode(s).
        buf.put1(0xc); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit immediate.
        self.imm8.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        let enc = self.al.expected_enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:138
        visitor.fixed_read_write_gpr(&mut self.al.0, enc); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:139
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for orb_i<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let al = "%al"; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm8 = self.imm8.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "orb {imm8}, {al}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<orb_i<R>> for Inst<R> {
    fn from(inst: orb_i<R>) -> Self {
        Self::orb_i(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `orw: I(ax[rw], imm16) => 0x66 + 0x0d iw [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct orw_i<R> where R: Registers {
    pub ax: Fixed<R::ReadWriteGpr, { gpr::enc::RAX }>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm16: Imm16, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> orw_i<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(ax: impl Into<Fixed<R::ReadWriteGpr, { gpr::enc::RAX }>>, imm16: impl Into<Imm16>) -> Self {
        Self {
            ax: ax.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm16: imm16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, _: &impl KnownOffsetTable) {

        // Emit prefixes.
        buf.put1(0x66); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:48

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:87
        rex.emit_two_op(buf, digit, self.ax.enc()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:88

        // Emit opcode(s).
        buf.put1(0xd); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit immediate.
        self.imm16.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        let enc = self.ax.expected_enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:138
        visitor.fixed_read_write_gpr(&mut self.ax.0, enc); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:139
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for orw_i<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let ax = "%ax"; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm16 = self.imm16.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "orw {imm16}, {ax}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<orw_i<R>> for Inst<R> {
    fn from(inst: orw_i<R>) -> Self {
        Self::orw_i(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `orl: I(eax[rw], imm32) => 0x0d id [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct orl_i<R> where R: Registers {
    pub eax: Fixed<R::ReadWriteGpr, { gpr::enc::RAX }>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm32: Imm32, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> orl_i<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(eax: impl Into<Fixed<R::ReadWriteGpr, { gpr::enc::RAX }>>, imm32: impl Into<Imm32>) -> Self {
        Self {
            eax: eax.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm32: imm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, _: &impl KnownOffsetTable) {

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:87
        rex.emit_two_op(buf, digit, self.eax.enc()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:88

        // Emit opcode(s).
        buf.put1(0xd); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit immediate.
        self.imm32.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        let enc = self.eax.expected_enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:138
        visitor.fixed_read_write_gpr(&mut self.eax.0, enc); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:139
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for orl_i<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let eax = "%eax"; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm32 = self.imm32.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "orl {imm32}, {eax}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<orl_i<R>> for Inst<R> {
    fn from(inst: orl_i<R>) -> Self {
        Self::orl_i(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `orq: I_SXL(rax[rw], imm32[sxq]) => REX.W + 0x0d id [_64b]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct orq_i_sxl<R> where R: Registers {
    pub rax: Fixed<R::ReadWriteGpr, { gpr::enc::RAX }>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm32: Simm32, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> orq_i_sxl<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rax: impl Into<Fixed<R::ReadWriteGpr, { gpr::enc::RAX }>>, imm32: impl Into<Simm32>) -> Self {
        Self {
            rax: rax.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm32: imm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, _: &impl KnownOffsetTable) {

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:87
        rex.emit_two_op(buf, digit, self.rax.enc()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:88

        // Emit opcode(s).
        buf.put1(0xd); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit immediate.
        self.imm32.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        let enc = self.rax.expected_enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:138
        visitor.fixed_read_write_gpr(&mut self.rax.0, enc); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:139
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for orq_i_sxl<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rax = "%rax"; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm32 = self.imm32.to_string(Extension::SignExtendQuad); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "orq {imm32}, {rax}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<orq_i_sxl<R>> for Inst<R> {
    fn from(inst: orq_i_sxl<R>) -> Self {
        Self::orq_i_sxl(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `orb: MI(rm8[rw], imm8) => 0x80 /1 ib [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct orb_mi<R> where R: Registers {
    pub rm8: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm8: Imm8, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> orb_mi<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm8: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, imm8: impl Into<Imm8>) -> Self {
        Self {
            rm8: rm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm8: imm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm8) = &self.rm8 {
            if let Some(trap_code) = rm8.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let mut rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:75
        self.rm8.always_emit_if_8bit_needed(&mut rex); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:77
        let digit = 0x1; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:97
        match &self.rm8 {
            GprMem::Gpr(rm8) => rex.emit_two_op(buf, digit, rm8.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:99
            GprMem::Mem(rm8) => rm8.emit_rex_prefix(rex, digit, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:100
        }

        // Emit opcode(s).
        buf.put1(0x80); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x1; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:161
        match &self.rm8 {
            GprMem::Gpr(rm8) => emit_modrm(buf, digit, rm8.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:163
            GprMem::Mem(rm8) => emit_modrm_sib_disp(buf, off, digit, rm8, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:164
        }

        // Emit immediate.
        self.imm8.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm8 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for orb_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm8 = self.rm8.to_string(Size::Byte); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm8 = self.imm8.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "orb {imm8}, {rm8}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<orb_mi<R>> for Inst<R> {
    fn from(inst: orb_mi<R>) -> Self {
        Self::orb_mi(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `orw: MI(rm16[rw], imm16) => 0x66 + 0x81 /1 iw [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct orw_mi<R> where R: Registers {
    pub rm16: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm16: Imm16, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> orw_mi<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm16: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, imm16: impl Into<Imm16>) -> Self {
        Self {
            rm16: rm16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm16: imm16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm16) = &self.rm16 {
            if let Some(trap_code) = rm16.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit prefixes.
        buf.put1(0x66); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:48

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x1; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:97
        match &self.rm16 {
            GprMem::Gpr(rm16) => rex.emit_two_op(buf, digit, rm16.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:99
            GprMem::Mem(rm16) => rm16.emit_rex_prefix(rex, digit, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:100
        }

        // Emit opcode(s).
        buf.put1(0x81); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x1; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:161
        match &self.rm16 {
            GprMem::Gpr(rm16) => emit_modrm(buf, digit, rm16.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:163
            GprMem::Mem(rm16) => emit_modrm_sib_disp(buf, off, digit, rm16, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:164
        }

        // Emit immediate.
        self.imm16.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm16 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for orw_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm16 = self.rm16.to_string(Size::Word); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm16 = self.imm16.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "orw {imm16}, {rm16}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<orw_mi<R>> for Inst<R> {
    fn from(inst: orw_mi<R>) -> Self {
        Self::orw_mi(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `orl: MI(rm32[rw], imm32) => 0x81 /1 id [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct orl_mi<R> where R: Registers {
    pub rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm32: Imm32, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> orl_mi<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm32: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, imm32: impl Into<Imm32>) -> Self {
        Self {
            rm32: rm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm32: imm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x1; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:97
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, digit, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:99
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, digit, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:100
        }

        // Emit opcode(s).
        buf.put1(0x81); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x1; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:161
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, digit, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:163
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, digit, rm32, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:164
        }

        // Emit immediate.
        self.imm32.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for orl_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm32 = self.rm32.to_string(Size::Doubleword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm32 = self.imm32.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "orl {imm32}, {rm32}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<orl_mi<R>> for Inst<R> {
    fn from(inst: orl_mi<R>) -> Self {
        Self::orl_mi(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `orq: MI_SXL(rm64[rw], imm32[sxq]) => REX.W + 0x81 /1 id [_64b]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct orq_mi_sxl<R> where R: Registers {
    pub rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm32: Simm32, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> orq_mi_sxl<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm64: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, imm32: impl Into<Simm32>) -> Self {
        Self {
            rm64: rm64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm32: imm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x1; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:97
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, digit, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:99
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, digit, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:100
        }

        // Emit opcode(s).
        buf.put1(0x81); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x1; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:161
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, digit, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:163
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, digit, rm64, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:164
        }

        // Emit immediate.
        self.imm32.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for orq_mi_sxl<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm64 = self.rm64.to_string(Size::Quadword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm32 = self.imm32.to_string(Extension::SignExtendQuad); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "orq {imm32}, {rm64}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<orq_mi_sxl<R>> for Inst<R> {
    fn from(inst: orq_mi_sxl<R>) -> Self {
        Self::orq_mi_sxl(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `orl: MI_SXB(rm32[rw], imm8[sxl]) => 0x83 /1 ib [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct orl_mi_sxb<R> where R: Registers {
    pub rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm8: Simm8, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> orl_mi_sxb<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm32: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, imm8: impl Into<Simm8>) -> Self {
        Self {
            rm32: rm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm8: imm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x1; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:97
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, digit, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:99
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, digit, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:100
        }

        // Emit opcode(s).
        buf.put1(0x83); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x1; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:161
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, digit, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:163
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, digit, rm32, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:164
        }

        // Emit immediate.
        self.imm8.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for orl_mi_sxb<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm32 = self.rm32.to_string(Size::Doubleword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm8 = self.imm8.to_string(Extension::SignExtendLong); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "orl {imm8}, {rm32}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<orl_mi_sxb<R>> for Inst<R> {
    fn from(inst: orl_mi_sxb<R>) -> Self {
        Self::orl_mi_sxb(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `orq: MI_SXB(rm64[rw], imm8[sxq]) => REX.W + 0x83 /1 ib [_64b]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct orq_mi_sxb<R> where R: Registers {
    pub rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm8: Simm8, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> orq_mi_sxb<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm64: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, imm8: impl Into<Simm8>) -> Self {
        Self {
            rm64: rm64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm8: imm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x1; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:97
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, digit, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:99
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, digit, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:100
        }

        // Emit opcode(s).
        buf.put1(0x83); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x1; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:161
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, digit, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:163
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, digit, rm64, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:164
        }

        // Emit immediate.
        self.imm8.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for orq_mi_sxb<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm64 = self.rm64.to_string(Size::Quadword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm8 = self.imm8.to_string(Extension::SignExtendQuad); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "orq {imm8}, {rm64}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<orq_mi_sxb<R>> for Inst<R> {
    fn from(inst: orq_mi_sxb<R>) -> Self {
        Self::orq_mi_sxb(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `orb: MR(rm8[rw], r8) => 0x08 /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct orb_mr<R> where R: Registers {
    pub rm8: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r8: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> orb_mr<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm8: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, r8: impl Into<Gpr<R::ReadGpr>>) -> Self {
        Self {
            rm8: rm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r8: r8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm8) = &self.rm8 {
            if let Some(trap_code) = rm8.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let mut rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:75
        self.rm8.always_emit_if_8bit_needed(&mut rex); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:77
        self.r8.always_emit_if_8bit_needed(&mut rex); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:77
        let r8 = self.r8.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:123
        match &self.rm8 {
            GprMem::Gpr(rm8) => rex.emit_two_op(buf, r8, rm8.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:130
            GprMem::Mem(rm8) => rm8.emit_rex_prefix(rex, r8, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:131
        }

        // Emit opcode(s).
        buf.put1(0x8); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r8 = self.r8.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:187
        match &self.rm8 {
            GprMem::Gpr(rm8) => emit_modrm(buf, r8, rm8.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:195
            GprMem::Mem(rm8) => emit_modrm_sib_disp(buf, off, r8, rm8, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:196
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm8 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
        visitor.read_gpr(self.r8.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for orb_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm8 = self.rm8.to_string(Size::Byte); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r8 = self.r8.to_string(Size::Byte); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "orb {r8}, {rm8}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<orb_mr<R>> for Inst<R> {
    fn from(inst: orb_mr<R>) -> Self {
        Self::orb_mr(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `orw: MR(rm16[rw], r16) => 0x66 + 0x09 /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct orw_mr<R> where R: Registers {
    pub rm16: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r16: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> orw_mr<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm16: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, r16: impl Into<Gpr<R::ReadGpr>>) -> Self {
        Self {
            rm16: rm16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r16: r16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm16) = &self.rm16 {
            if let Some(trap_code) = rm16.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit prefixes.
        buf.put1(0x66); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:48

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r16 = self.r16.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:123
        match &self.rm16 {
            GprMem::Gpr(rm16) => rex.emit_two_op(buf, r16, rm16.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:130
            GprMem::Mem(rm16) => rm16.emit_rex_prefix(rex, r16, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:131
        }

        // Emit opcode(s).
        buf.put1(0x9); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r16 = self.r16.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:187
        match &self.rm16 {
            GprMem::Gpr(rm16) => emit_modrm(buf, r16, rm16.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:195
            GprMem::Mem(rm16) => emit_modrm_sib_disp(buf, off, r16, rm16, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:196
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm16 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
        visitor.read_gpr(self.r16.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for orw_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm16 = self.rm16.to_string(Size::Word); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r16 = self.r16.to_string(Size::Word); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "orw {r16}, {rm16}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<orw_mr<R>> for Inst<R> {
    fn from(inst: orw_mr<R>) -> Self {
        Self::orw_mr(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `orl: MR(rm32[rw], r32) => 0x09 /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct orl_mr<R> where R: Registers {
    pub rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r32: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> orl_mr<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm32: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, r32: impl Into<Gpr<R::ReadGpr>>) -> Self {
        Self {
            rm32: rm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r32: r32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r32 = self.r32.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:123
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, r32, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:130
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, r32, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:131
        }

        // Emit opcode(s).
        buf.put1(0x9); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r32 = self.r32.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:187
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, r32, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:195
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, r32, rm32, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:196
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
        visitor.read_gpr(self.r32.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for orl_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm32 = self.rm32.to_string(Size::Doubleword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r32 = self.r32.to_string(Size::Doubleword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "orl {r32}, {rm32}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<orl_mr<R>> for Inst<R> {
    fn from(inst: orl_mr<R>) -> Self {
        Self::orl_mr(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `orq: MR(rm64[rw], r64) => REX.W + 0x09 /r [_64b]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct orq_mr<R> where R: Registers {
    pub rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r64: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> orq_mr<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm64: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, r64: impl Into<Gpr<R::ReadGpr>>) -> Self {
        Self {
            rm64: rm64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r64: r64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r64 = self.r64.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:123
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, r64, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:130
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, r64, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:131
        }

        // Emit opcode(s).
        buf.put1(0x9); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r64 = self.r64.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:187
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, r64, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:195
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, r64, rm64, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:196
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
        visitor.read_gpr(self.r64.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for orq_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm64 = self.rm64.to_string(Size::Quadword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r64 = self.r64.to_string(Size::Quadword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "orq {r64}, {rm64}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<orq_mr<R>> for Inst<R> {
    fn from(inst: orq_mr<R>) -> Self {
        Self::orq_mr(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `orb: RM(r8[rw], rm8) => 0x0a /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct orb_rm<R> where R: Registers {
    pub r8: Gpr<R::ReadWriteGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub rm8: GprMem<R::ReadGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> orb_rm<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(r8: impl Into<Gpr<R::ReadWriteGpr>>, rm8: impl Into<GprMem<R::ReadGpr, R::ReadGpr>>) -> Self {
        Self {
            r8: r8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            rm8: rm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm8) = &self.rm8 {
            if let Some(trap_code) = rm8.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let mut rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:75
        self.r8.always_emit_if_8bit_needed(&mut rex); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:77
        self.rm8.always_emit_if_8bit_needed(&mut rex); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:77
        let r8 = self.r8.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:104
        match &self.rm8 {
            GprMem::Gpr(rm8) => rex.emit_two_op(buf, r8, rm8.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:112
            GprMem::Mem(rm8) => rm8.emit_rex_prefix(rex, r8, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:113
        }

        // Emit opcode(s).
        buf.put1(0xa); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r8 = self.r8.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:168
        match &self.rm8 {
            GprMem::Gpr(rm8) => emit_modrm(buf, r8, rm8.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:176
            GprMem::Mem(rm8) => emit_modrm_sib_disp(buf, off, r8, rm8, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:177
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write_gpr(self.r8.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
        match &mut self.rm8 {
            GprMem::Gpr(r) => visitor.read_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for orb_rm<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let r8 = self.r8.to_string(Size::Byte); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let rm8 = self.rm8.to_string(Size::Byte); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "orb {rm8}, {r8}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<orb_rm<R>> for Inst<R> {
    fn from(inst: orb_rm<R>) -> Self {
        Self::orb_rm(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `orw: RM(r16[rw], rm16) => 0x66 + 0x0b /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct orw_rm<R> where R: Registers {
    pub r16: Gpr<R::ReadWriteGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub rm16: GprMem<R::ReadGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> orw_rm<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(r16: impl Into<Gpr<R::ReadWriteGpr>>, rm16: impl Into<GprMem<R::ReadGpr, R::ReadGpr>>) -> Self {
        Self {
            r16: r16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            rm16: rm16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm16) = &self.rm16 {
            if let Some(trap_code) = rm16.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit prefixes.
        buf.put1(0x66); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:48

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r16 = self.r16.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:104
        match &self.rm16 {
            GprMem::Gpr(rm16) => rex.emit_two_op(buf, r16, rm16.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:112
            GprMem::Mem(rm16) => rm16.emit_rex_prefix(rex, r16, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:113
        }

        // Emit opcode(s).
        buf.put1(0xb); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r16 = self.r16.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:168
        match &self.rm16 {
            GprMem::Gpr(rm16) => emit_modrm(buf, r16, rm16.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:176
            GprMem::Mem(rm16) => emit_modrm_sib_disp(buf, off, r16, rm16, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:177
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write_gpr(self.r16.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
        match &mut self.rm16 {
            GprMem::Gpr(r) => visitor.read_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for orw_rm<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let r16 = self.r16.to_string(Size::Word); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let rm16 = self.rm16.to_string(Size::Word); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "orw {rm16}, {r16}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<orw_rm<R>> for Inst<R> {
    fn from(inst: orw_rm<R>) -> Self {
        Self::orw_rm(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `orl: RM(r32[rw], rm32) => 0x0b /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct orl_rm<R> where R: Registers {
    pub r32: Gpr<R::ReadWriteGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub rm32: GprMem<R::ReadGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> orl_rm<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(r32: impl Into<Gpr<R::ReadWriteGpr>>, rm32: impl Into<GprMem<R::ReadGpr, R::ReadGpr>>) -> Self {
        Self {
            r32: r32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            rm32: rm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r32 = self.r32.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:104
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, r32, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:112
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, r32, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:113
        }

        // Emit opcode(s).
        buf.put1(0xb); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r32 = self.r32.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:168
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, r32, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:176
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, r32, rm32, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:177
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write_gpr(self.r32.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for orl_rm<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let r32 = self.r32.to_string(Size::Doubleword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let rm32 = self.rm32.to_string(Size::Doubleword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "orl {rm32}, {r32}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<orl_rm<R>> for Inst<R> {
    fn from(inst: orl_rm<R>) -> Self {
        Self::orl_rm(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `orq: RM(r64[rw], rm64) => REX.W + 0x0b /r [_64b]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct orq_rm<R> where R: Registers {
    pub r64: Gpr<R::ReadWriteGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub rm64: GprMem<R::ReadGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> orq_rm<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(r64: impl Into<Gpr<R::ReadWriteGpr>>, rm64: impl Into<GprMem<R::ReadGpr, R::ReadGpr>>) -> Self {
        Self {
            r64: r64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            rm64: rm64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r64 = self.r64.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:104
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, r64, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:112
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, r64, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:113
        }

        // Emit opcode(s).
        buf.put1(0xb); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r64 = self.r64.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:168
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, r64, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:176
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, r64, rm64, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:177
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write_gpr(self.r64.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for orq_rm<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let r64 = self.r64.to_string(Size::Quadword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let rm64 = self.rm64.to_string(Size::Quadword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "orq {rm64}, {r64}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<orq_rm<R>> for Inst<R> {
    fn from(inst: orq_rm<R>) -> Self {
        Self::orq_rm(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_orb: MI(m8[rw], imm8) => 0xF0 + 0x80 /1 ib [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_orb_mi<R> where R: Registers {
    pub m8: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm8: Imm8, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_orb_mi<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m8: impl Into<Amode<R::ReadGpr>>, imm8: impl Into<Imm8>) -> Self {
        Self {
            m8: m8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm8: imm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m8.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x1; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:92
        self.m8.emit_rex_prefix(rex, digit, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:93

        // Emit opcode(s).
        buf.put1(0x80); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x1; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:156
        emit_modrm_sib_disp(buf, off, digit, &self.m8, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:157

        // Emit immediate.
        self.imm8.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m8, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_orb_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m8 = self.m8.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm8 = self.imm8.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock orb {imm8}, {m8}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_orb_mi<R>> for Inst<R> {
    fn from(inst: lock_orb_mi<R>) -> Self {
        Self::lock_orb_mi(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_orw: MI(m16[rw], imm16) => 0xF0 + 0x66 + 0x81 /1 iw [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_orw_mi<R> where R: Registers {
    pub m16: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm16: Imm16, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_orw_mi<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m16: impl Into<Amode<R::ReadGpr>>, imm16: impl Into<Imm16>) -> Self {
        Self {
            m16: m16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm16: imm16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m16.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42
        buf.put1(0x66); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:48

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x1; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:92
        self.m16.emit_rex_prefix(rex, digit, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:93

        // Emit opcode(s).
        buf.put1(0x81); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x1; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:156
        emit_modrm_sib_disp(buf, off, digit, &self.m16, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:157

        // Emit immediate.
        self.imm16.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m16, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_orw_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m16 = self.m16.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm16 = self.imm16.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock orw {imm16}, {m16}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_orw_mi<R>> for Inst<R> {
    fn from(inst: lock_orw_mi<R>) -> Self {
        Self::lock_orw_mi(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_orl: MI(m32[rw], imm32) => 0xF0 + 0x81 /1 id [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_orl_mi<R> where R: Registers {
    pub m32: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm32: Imm32, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_orl_mi<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m32: impl Into<Amode<R::ReadGpr>>, imm32: impl Into<Imm32>) -> Self {
        Self {
            m32: m32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm32: imm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m32.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x1; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:92
        self.m32.emit_rex_prefix(rex, digit, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:93

        // Emit opcode(s).
        buf.put1(0x81); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x1; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:156
        emit_modrm_sib_disp(buf, off, digit, &self.m32, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:157

        // Emit immediate.
        self.imm32.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m32, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_orl_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m32 = self.m32.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm32 = self.imm32.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock orl {imm32}, {m32}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_orl_mi<R>> for Inst<R> {
    fn from(inst: lock_orl_mi<R>) -> Self {
        Self::lock_orl_mi(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_orq: MI_SXL(m64[rw], imm32[sxq]) => 0xF0 + REX.W + 0x81 /1 id [_64b]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_orq_mi_sxl<R> where R: Registers {
    pub m64: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm32: Simm32, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_orq_mi_sxl<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m64: impl Into<Amode<R::ReadGpr>>, imm32: impl Into<Simm32>) -> Self {
        Self {
            m64: m64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm32: imm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m64.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x1; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:92
        self.m64.emit_rex_prefix(rex, digit, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:93

        // Emit opcode(s).
        buf.put1(0x81); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x1; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:156
        emit_modrm_sib_disp(buf, off, digit, &self.m64, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:157

        // Emit immediate.
        self.imm32.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m64, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_orq_mi_sxl<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m64 = self.m64.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm32 = self.imm32.to_string(Extension::SignExtendQuad); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock orq {imm32}, {m64}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_orq_mi_sxl<R>> for Inst<R> {
    fn from(inst: lock_orq_mi_sxl<R>) -> Self {
        Self::lock_orq_mi_sxl(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_orl: MI_SXB(m32[rw], imm8[sxl]) => 0xF0 + 0x83 /1 ib [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_orl_mi_sxb<R> where R: Registers {
    pub m32: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm8: Simm8, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_orl_mi_sxb<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m32: impl Into<Amode<R::ReadGpr>>, imm8: impl Into<Simm8>) -> Self {
        Self {
            m32: m32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm8: imm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m32.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x1; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:92
        self.m32.emit_rex_prefix(rex, digit, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:93

        // Emit opcode(s).
        buf.put1(0x83); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x1; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:156
        emit_modrm_sib_disp(buf, off, digit, &self.m32, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:157

        // Emit immediate.
        self.imm8.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m32, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_orl_mi_sxb<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m32 = self.m32.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm8 = self.imm8.to_string(Extension::SignExtendLong); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock orl {imm8}, {m32}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_orl_mi_sxb<R>> for Inst<R> {
    fn from(inst: lock_orl_mi_sxb<R>) -> Self {
        Self::lock_orl_mi_sxb(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_orq: MI_SXB(m64[rw], imm8[sxq]) => 0xF0 + REX.W + 0x83 /1 ib [_64b]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_orq_mi_sxb<R> where R: Registers {
    pub m64: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm8: Simm8, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_orq_mi_sxb<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m64: impl Into<Amode<R::ReadGpr>>, imm8: impl Into<Simm8>) -> Self {
        Self {
            m64: m64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm8: imm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m64.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x1; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:92
        self.m64.emit_rex_prefix(rex, digit, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:93

        // Emit opcode(s).
        buf.put1(0x83); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x1; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:156
        emit_modrm_sib_disp(buf, off, digit, &self.m64, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:157

        // Emit immediate.
        self.imm8.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m64, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_orq_mi_sxb<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m64 = self.m64.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm8 = self.imm8.to_string(Extension::SignExtendQuad); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock orq {imm8}, {m64}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_orq_mi_sxb<R>> for Inst<R> {
    fn from(inst: lock_orq_mi_sxb<R>) -> Self {
        Self::lock_orq_mi_sxb(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_orb: MR(m8[rw], r8) => 0xF0 + 0x08 /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_orb_mr<R> where R: Registers {
    pub m8: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r8: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_orb_mr<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m8: impl Into<Amode<R::ReadGpr>>, r8: impl Into<Gpr<R::ReadGpr>>) -> Self {
        Self {
            m8: m8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r8: r8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m8.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let mut rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:75
        self.r8.always_emit_if_8bit_needed(&mut rex); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:77
        let r8 = self.r8.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:119
        self.m8.emit_rex_prefix(rex, r8, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:120

        // Emit opcode(s).
        buf.put1(0x8); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r8 = self.r8.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:183
        emit_modrm_sib_disp(buf, off, r8, &self.m8, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:184
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m8, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
        visitor.read_gpr(self.r8.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_orb_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m8 = self.m8.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r8 = self.r8.to_string(Size::Byte); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock orb {r8}, {m8}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_orb_mr<R>> for Inst<R> {
    fn from(inst: lock_orb_mr<R>) -> Self {
        Self::lock_orb_mr(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_orw: MR(m16[rw], r16) => 0xF0 + 0x66 + 0x09 /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_orw_mr<R> where R: Registers {
    pub m16: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r16: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_orw_mr<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m16: impl Into<Amode<R::ReadGpr>>, r16: impl Into<Gpr<R::ReadGpr>>) -> Self {
        Self {
            m16: m16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r16: r16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m16.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42
        buf.put1(0x66); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:48

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r16 = self.r16.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:119
        self.m16.emit_rex_prefix(rex, r16, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:120

        // Emit opcode(s).
        buf.put1(0x9); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r16 = self.r16.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:183
        emit_modrm_sib_disp(buf, off, r16, &self.m16, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:184
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m16, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
        visitor.read_gpr(self.r16.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_orw_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m16 = self.m16.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r16 = self.r16.to_string(Size::Word); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock orw {r16}, {m16}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_orw_mr<R>> for Inst<R> {
    fn from(inst: lock_orw_mr<R>) -> Self {
        Self::lock_orw_mr(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_orl: MR(m32[rw], r32) => 0xF0 + 0x09 /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_orl_mr<R> where R: Registers {
    pub m32: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r32: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_orl_mr<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m32: impl Into<Amode<R::ReadGpr>>, r32: impl Into<Gpr<R::ReadGpr>>) -> Self {
        Self {
            m32: m32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r32: r32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m32.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r32 = self.r32.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:119
        self.m32.emit_rex_prefix(rex, r32, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:120

        // Emit opcode(s).
        buf.put1(0x9); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r32 = self.r32.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:183
        emit_modrm_sib_disp(buf, off, r32, &self.m32, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:184
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m32, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
        visitor.read_gpr(self.r32.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_orl_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m32 = self.m32.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r32 = self.r32.to_string(Size::Doubleword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock orl {r32}, {m32}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_orl_mr<R>> for Inst<R> {
    fn from(inst: lock_orl_mr<R>) -> Self {
        Self::lock_orl_mr(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_orq: MR(m64[rw], r64) => 0xF0 + REX.W + 0x09 /r [_64b]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_orq_mr<R> where R: Registers {
    pub m64: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r64: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_orq_mr<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m64: impl Into<Amode<R::ReadGpr>>, r64: impl Into<Gpr<R::ReadGpr>>) -> Self {
        Self {
            m64: m64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r64: r64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m64.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r64 = self.r64.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:119
        self.m64.emit_rex_prefix(rex, r64, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:120

        // Emit opcode(s).
        buf.put1(0x9); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r64 = self.r64.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:183
        emit_modrm_sib_disp(buf, off, r64, &self.m64, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:184
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m64, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
        visitor.read_gpr(self.r64.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_orq_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m64 = self.m64.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r64 = self.r64.to_string(Size::Quadword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock orq {r64}, {m64}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_orq_mr<R>> for Inst<R> {
    fn from(inst: lock_orq_mr<R>) -> Self {
        Self::lock_orq_mr(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `orps: A(xmm[rw], xmm_m128[align]) => 0x0F + 0x56 /r [_64b | compat | sse]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct orps_a<R> where R: Registers {
    pub xmm: Xmm<R::ReadWriteXmm>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub xmm_m128: XmmMem<R::ReadXmm, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> orps_a<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(xmm: impl Into<Xmm<R::ReadWriteXmm>>, xmm_m128: impl Into<XmmMem<R::ReadXmm, R::ReadGpr>>) -> Self {
        Self {
            xmm: xmm.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            xmm_m128: xmm_m128.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let XmmMem::Mem(xmm_m128) = &self.xmm_m128 {
            if let Some(trap_code) = xmm_m128.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let xmm = self.xmm.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:104
        match &self.xmm_m128 {
            XmmMem::Xmm(xmm_m128) => rex.emit_two_op(buf, xmm, xmm_m128.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:108
            XmmMem::Mem(xmm_m128) => xmm_m128.emit_rex_prefix(rex, xmm, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:109
        }

        // Emit opcode(s).
        buf.put1(0x0f); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:60
        buf.put1(0x56); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let xmm = self.xmm.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:168
        match &self.xmm_m128 {
            XmmMem::Xmm(xmm_m128) => emit_modrm(buf, xmm, xmm_m128.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:172
            XmmMem::Mem(xmm_m128) => emit_modrm_sib_disp(buf, off, xmm, xmm_m128, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:173
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write_xmm(self.xmm.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
        match &mut self.xmm_m128 {
            XmmMem::Xmm(r) => visitor.read_xmm(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            XmmMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat, Feature::sse] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for orps_a<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let xmm = self.xmm.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let xmm_m128 = self.xmm_m128.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "orps {xmm_m128}, {xmm}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<orps_a<R>> for Inst<R> {
    fn from(inst: orps_a<R>) -> Self {
        Self::orps_a(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `orpd: A(xmm[rw], xmm_m128[align]) => 0x66 + 0x0F + 0x56 /r [_64b | compat | sse2]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct orpd_a<R> where R: Registers {
    pub xmm: Xmm<R::ReadWriteXmm>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub xmm_m128: XmmMem<R::ReadXmm, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> orpd_a<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(xmm: impl Into<Xmm<R::ReadWriteXmm>>, xmm_m128: impl Into<XmmMem<R::ReadXmm, R::ReadGpr>>) -> Self {
        Self {
            xmm: xmm.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            xmm_m128: xmm_m128.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let XmmMem::Mem(xmm_m128) = &self.xmm_m128 {
            if let Some(trap_code) = xmm_m128.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit prefixes.
        buf.put1(0x66); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:48

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let xmm = self.xmm.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:104
        match &self.xmm_m128 {
            XmmMem::Xmm(xmm_m128) => rex.emit_two_op(buf, xmm, xmm_m128.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:108
            XmmMem::Mem(xmm_m128) => xmm_m128.emit_rex_prefix(rex, xmm, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:109
        }

        // Emit opcode(s).
        buf.put1(0x0f); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:60
        buf.put1(0x56); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let xmm = self.xmm.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:168
        match &self.xmm_m128 {
            XmmMem::Xmm(xmm_m128) => emit_modrm(buf, xmm, xmm_m128.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:172
            XmmMem::Mem(xmm_m128) => emit_modrm_sib_disp(buf, off, xmm, xmm_m128, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:173
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write_xmm(self.xmm.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
        match &mut self.xmm_m128 {
            XmmMem::Xmm(r) => visitor.read_xmm(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            XmmMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat, Feature::sse2] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for orpd_a<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let xmm = self.xmm.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let xmm_m128 = self.xmm_m128.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "orpd {xmm_m128}, {xmm}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<orpd_a<R>> for Inst<R> {
    fn from(inst: orpd_a<R>) -> Self {
        Self::orpd_a(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `shldw: MRI(rm16[rw], r16, imm8) => 0x66 + 0x0F + 0xa4 ib [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct shldw_mri<R> where R: Registers {
    pub rm16: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r16: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm8: Imm8, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> shldw_mri<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm16: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, r16: impl Into<Gpr<R::ReadGpr>>, imm8: impl Into<Imm8>) -> Self {
        Self {
            rm16: rm16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r16: r16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm8: imm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm16) = &self.rm16 {
            if let Some(trap_code) = rm16.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit prefixes.
        buf.put1(0x66); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:48

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r16 = self.r16.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:123
        match &self.rm16 {
            GprMem::Gpr(rm16) => rex.emit_two_op(buf, r16, rm16.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:130
            GprMem::Mem(rm16) => rm16.emit_rex_prefix(rex, r16, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:131
        }

        // Emit opcode(s).
        buf.put1(0x0f); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:60
        buf.put1(0xa4); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r16 = self.r16.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:187
        match &self.rm16 {
            GprMem::Gpr(rm16) => emit_modrm(buf, r16, rm16.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:195
            GprMem::Mem(rm16) => emit_modrm_sib_disp(buf, off, r16, rm16, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:196
        }

        // Emit immediate.
        self.imm8.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm16 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
        visitor.read_gpr(self.r16.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for shldw_mri<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm16 = self.rm16.to_string(Size::Word); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r16 = self.r16.to_string(Size::Word); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm8 = self.imm8.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "shldw {imm8}, {r16}, {rm16}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<shldw_mri<R>> for Inst<R> {
    fn from(inst: shldw_mri<R>) -> Self {
        Self::shldw_mri(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `shldw: MRC(rm16[rw], r16, cl) => 0x66 + 0x0F + 0xa5 ib [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct shldw_mrc<R> where R: Registers {
    pub rm16: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r16: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub cl: Fixed<R::ReadGpr, { gpr::enc::RCX }>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> shldw_mrc<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm16: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, r16: impl Into<Gpr<R::ReadGpr>>, cl: impl Into<Fixed<R::ReadGpr, { gpr::enc::RCX }>>) -> Self {
        Self {
            rm16: rm16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r16: r16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            cl: cl.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm16) = &self.rm16 {
            if let Some(trap_code) = rm16.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit prefixes.
        buf.put1(0x66); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:48

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r16 = self.r16.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:123
        match &self.rm16 {
            GprMem::Gpr(rm16) => rex.emit_two_op(buf, r16, rm16.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:130
            GprMem::Mem(rm16) => rm16.emit_rex_prefix(rex, r16, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:131
        }

        // Emit opcode(s).
        buf.put1(0x0f); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:60
        buf.put1(0xa5); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r16 = self.r16.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:187
        match &self.rm16 {
            GprMem::Gpr(rm16) => emit_modrm(buf, r16, rm16.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:195
            GprMem::Mem(rm16) => emit_modrm_sib_disp(buf, off, r16, rm16, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:196
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm16 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
        visitor.read_gpr(self.r16.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
        let enc = self.cl.expected_enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:138
        visitor.fixed_read_gpr(&mut self.cl.0, enc); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:139
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for shldw_mrc<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm16 = self.rm16.to_string(Size::Word); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r16 = self.r16.to_string(Size::Word); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let cl = "%cl"; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "shldw {cl}, {r16}, {rm16}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<shldw_mrc<R>> for Inst<R> {
    fn from(inst: shldw_mrc<R>) -> Self {
        Self::shldw_mrc(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `shldl: MRI(rm32[rw], r32, imm8) => 0x0F + 0xa4 ib [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct shldl_mri<R> where R: Registers {
    pub rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r32: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm8: Imm8, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> shldl_mri<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm32: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, r32: impl Into<Gpr<R::ReadGpr>>, imm8: impl Into<Imm8>) -> Self {
        Self {
            rm32: rm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r32: r32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm8: imm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r32 = self.r32.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:123
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, r32, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:130
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, r32, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:131
        }

        // Emit opcode(s).
        buf.put1(0x0f); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:60
        buf.put1(0xa4); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r32 = self.r32.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:187
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, r32, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:195
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, r32, rm32, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:196
        }

        // Emit immediate.
        self.imm8.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
        visitor.read_gpr(self.r32.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for shldl_mri<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm32 = self.rm32.to_string(Size::Doubleword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r32 = self.r32.to_string(Size::Doubleword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm8 = self.imm8.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "shldl {imm8}, {r32}, {rm32}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<shldl_mri<R>> for Inst<R> {
    fn from(inst: shldl_mri<R>) -> Self {
        Self::shldl_mri(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `shldq: MRI(rm64[rw], r64, imm8) => REX.W + 0x0F + 0xa4 ib [_64b]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct shldq_mri<R> where R: Registers {
    pub rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r64: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm8: Imm8, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> shldq_mri<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm64: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, r64: impl Into<Gpr<R::ReadGpr>>, imm8: impl Into<Imm8>) -> Self {
        Self {
            rm64: rm64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r64: r64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm8: imm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r64 = self.r64.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:123
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, r64, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:130
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, r64, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:131
        }

        // Emit opcode(s).
        buf.put1(0x0f); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:60
        buf.put1(0xa4); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r64 = self.r64.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:187
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, r64, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:195
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, r64, rm64, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:196
        }

        // Emit immediate.
        self.imm8.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
        visitor.read_gpr(self.r64.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for shldq_mri<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm64 = self.rm64.to_string(Size::Quadword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r64 = self.r64.to_string(Size::Quadword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm8 = self.imm8.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "shldq {imm8}, {r64}, {rm64}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<shldq_mri<R>> for Inst<R> {
    fn from(inst: shldq_mri<R>) -> Self {
        Self::shldq_mri(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `shldl: MRC(rm32[rw], r32, cl) => 0x0F + 0xa5 ib [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct shldl_mrc<R> where R: Registers {
    pub rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r32: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub cl: Fixed<R::ReadGpr, { gpr::enc::RCX }>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> shldl_mrc<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm32: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, r32: impl Into<Gpr<R::ReadGpr>>, cl: impl Into<Fixed<R::ReadGpr, { gpr::enc::RCX }>>) -> Self {
        Self {
            rm32: rm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r32: r32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            cl: cl.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r32 = self.r32.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:123
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, r32, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:130
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, r32, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:131
        }

        // Emit opcode(s).
        buf.put1(0x0f); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:60
        buf.put1(0xa5); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r32 = self.r32.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:187
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, r32, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:195
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, r32, rm32, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:196
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
        visitor.read_gpr(self.r32.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
        let enc = self.cl.expected_enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:138
        visitor.fixed_read_gpr(&mut self.cl.0, enc); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:139
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for shldl_mrc<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm32 = self.rm32.to_string(Size::Doubleword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r32 = self.r32.to_string(Size::Doubleword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let cl = "%cl"; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "shldl {cl}, {r32}, {rm32}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<shldl_mrc<R>> for Inst<R> {
    fn from(inst: shldl_mrc<R>) -> Self {
        Self::shldl_mrc(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `shldq: MRC(rm64[rw], r64, cl) => REX.W + 0x0F + 0xa5 ib [_64b]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct shldq_mrc<R> where R: Registers {
    pub rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r64: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub cl: Fixed<R::ReadGpr, { gpr::enc::RCX }>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> shldq_mrc<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm64: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, r64: impl Into<Gpr<R::ReadGpr>>, cl: impl Into<Fixed<R::ReadGpr, { gpr::enc::RCX }>>) -> Self {
        Self {
            rm64: rm64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r64: r64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            cl: cl.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r64 = self.r64.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:123
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, r64, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:130
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, r64, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:131
        }

        // Emit opcode(s).
        buf.put1(0x0f); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:60
        buf.put1(0xa5); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r64 = self.r64.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:187
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, r64, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:195
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, r64, rm64, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:196
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
        visitor.read_gpr(self.r64.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
        let enc = self.cl.expected_enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:138
        visitor.fixed_read_gpr(&mut self.cl.0, enc); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:139
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for shldq_mrc<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm64 = self.rm64.to_string(Size::Quadword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r64 = self.r64.to_string(Size::Quadword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let cl = "%cl"; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "shldq {cl}, {r64}, {rm64}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<shldq_mrc<R>> for Inst<R> {
    fn from(inst: shldq_mrc<R>) -> Self {
        Self::shldq_mrc(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `subb: I(al[rw], imm8) => 0x2c ib [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct subb_i<R> where R: Registers {
    pub al: Fixed<R::ReadWriteGpr, { gpr::enc::RAX }>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm8: Imm8, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> subb_i<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(al: impl Into<Fixed<R::ReadWriteGpr, { gpr::enc::RAX }>>, imm8: impl Into<Imm8>) -> Self {
        Self {
            al: al.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm8: imm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, _: &impl KnownOffsetTable) {

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:87
        rex.emit_two_op(buf, digit, self.al.enc()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:88

        // Emit opcode(s).
        buf.put1(0x2c); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit immediate.
        self.imm8.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        let enc = self.al.expected_enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:138
        visitor.fixed_read_write_gpr(&mut self.al.0, enc); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:139
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for subb_i<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let al = "%al"; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm8 = self.imm8.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "subb {imm8}, {al}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<subb_i<R>> for Inst<R> {
    fn from(inst: subb_i<R>) -> Self {
        Self::subb_i(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `subw: I(ax[rw], imm16) => 0x66 + 0x2d iw [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct subw_i<R> where R: Registers {
    pub ax: Fixed<R::ReadWriteGpr, { gpr::enc::RAX }>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm16: Imm16, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> subw_i<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(ax: impl Into<Fixed<R::ReadWriteGpr, { gpr::enc::RAX }>>, imm16: impl Into<Imm16>) -> Self {
        Self {
            ax: ax.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm16: imm16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, _: &impl KnownOffsetTable) {

        // Emit prefixes.
        buf.put1(0x66); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:48

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:87
        rex.emit_two_op(buf, digit, self.ax.enc()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:88

        // Emit opcode(s).
        buf.put1(0x2d); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit immediate.
        self.imm16.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        let enc = self.ax.expected_enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:138
        visitor.fixed_read_write_gpr(&mut self.ax.0, enc); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:139
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for subw_i<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let ax = "%ax"; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm16 = self.imm16.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "subw {imm16}, {ax}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<subw_i<R>> for Inst<R> {
    fn from(inst: subw_i<R>) -> Self {
        Self::subw_i(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `subl: I(eax[rw], imm32) => 0x2d id [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct subl_i<R> where R: Registers {
    pub eax: Fixed<R::ReadWriteGpr, { gpr::enc::RAX }>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm32: Imm32, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> subl_i<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(eax: impl Into<Fixed<R::ReadWriteGpr, { gpr::enc::RAX }>>, imm32: impl Into<Imm32>) -> Self {
        Self {
            eax: eax.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm32: imm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, _: &impl KnownOffsetTable) {

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:87
        rex.emit_two_op(buf, digit, self.eax.enc()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:88

        // Emit opcode(s).
        buf.put1(0x2d); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit immediate.
        self.imm32.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        let enc = self.eax.expected_enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:138
        visitor.fixed_read_write_gpr(&mut self.eax.0, enc); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:139
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for subl_i<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let eax = "%eax"; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm32 = self.imm32.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "subl {imm32}, {eax}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<subl_i<R>> for Inst<R> {
    fn from(inst: subl_i<R>) -> Self {
        Self::subl_i(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `subq: I_SXL(rax[rw], imm32[sxq]) => REX.W + 0x2d id [_64b]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct subq_i_sxl<R> where R: Registers {
    pub rax: Fixed<R::ReadWriteGpr, { gpr::enc::RAX }>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm32: Simm32, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> subq_i_sxl<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rax: impl Into<Fixed<R::ReadWriteGpr, { gpr::enc::RAX }>>, imm32: impl Into<Simm32>) -> Self {
        Self {
            rax: rax.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm32: imm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, _: &impl KnownOffsetTable) {

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:87
        rex.emit_two_op(buf, digit, self.rax.enc()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:88

        // Emit opcode(s).
        buf.put1(0x2d); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit immediate.
        self.imm32.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        let enc = self.rax.expected_enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:138
        visitor.fixed_read_write_gpr(&mut self.rax.0, enc); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:139
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for subq_i_sxl<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rax = "%rax"; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm32 = self.imm32.to_string(Extension::SignExtendQuad); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "subq {imm32}, {rax}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<subq_i_sxl<R>> for Inst<R> {
    fn from(inst: subq_i_sxl<R>) -> Self {
        Self::subq_i_sxl(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `subb: MI(rm8[rw], imm8) => 0x80 /5 ib [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct subb_mi<R> where R: Registers {
    pub rm8: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm8: Imm8, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> subb_mi<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm8: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, imm8: impl Into<Imm8>) -> Self {
        Self {
            rm8: rm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm8: imm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm8) = &self.rm8 {
            if let Some(trap_code) = rm8.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let mut rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:75
        self.rm8.always_emit_if_8bit_needed(&mut rex); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:77
        let digit = 0x5; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:97
        match &self.rm8 {
            GprMem::Gpr(rm8) => rex.emit_two_op(buf, digit, rm8.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:99
            GprMem::Mem(rm8) => rm8.emit_rex_prefix(rex, digit, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:100
        }

        // Emit opcode(s).
        buf.put1(0x80); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x5; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:161
        match &self.rm8 {
            GprMem::Gpr(rm8) => emit_modrm(buf, digit, rm8.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:163
            GprMem::Mem(rm8) => emit_modrm_sib_disp(buf, off, digit, rm8, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:164
        }

        // Emit immediate.
        self.imm8.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm8 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for subb_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm8 = self.rm8.to_string(Size::Byte); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm8 = self.imm8.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "subb {imm8}, {rm8}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<subb_mi<R>> for Inst<R> {
    fn from(inst: subb_mi<R>) -> Self {
        Self::subb_mi(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `subw: MI(rm16[rw], imm16) => 0x66 + 0x81 /5 iw [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct subw_mi<R> where R: Registers {
    pub rm16: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm16: Imm16, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> subw_mi<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm16: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, imm16: impl Into<Imm16>) -> Self {
        Self {
            rm16: rm16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm16: imm16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm16) = &self.rm16 {
            if let Some(trap_code) = rm16.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit prefixes.
        buf.put1(0x66); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:48

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x5; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:97
        match &self.rm16 {
            GprMem::Gpr(rm16) => rex.emit_two_op(buf, digit, rm16.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:99
            GprMem::Mem(rm16) => rm16.emit_rex_prefix(rex, digit, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:100
        }

        // Emit opcode(s).
        buf.put1(0x81); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x5; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:161
        match &self.rm16 {
            GprMem::Gpr(rm16) => emit_modrm(buf, digit, rm16.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:163
            GprMem::Mem(rm16) => emit_modrm_sib_disp(buf, off, digit, rm16, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:164
        }

        // Emit immediate.
        self.imm16.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm16 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for subw_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm16 = self.rm16.to_string(Size::Word); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm16 = self.imm16.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "subw {imm16}, {rm16}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<subw_mi<R>> for Inst<R> {
    fn from(inst: subw_mi<R>) -> Self {
        Self::subw_mi(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `subl: MI(rm32[rw], imm32) => 0x81 /5 id [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct subl_mi<R> where R: Registers {
    pub rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm32: Imm32, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> subl_mi<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm32: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, imm32: impl Into<Imm32>) -> Self {
        Self {
            rm32: rm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm32: imm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x5; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:97
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, digit, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:99
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, digit, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:100
        }

        // Emit opcode(s).
        buf.put1(0x81); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x5; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:161
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, digit, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:163
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, digit, rm32, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:164
        }

        // Emit immediate.
        self.imm32.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for subl_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm32 = self.rm32.to_string(Size::Doubleword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm32 = self.imm32.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "subl {imm32}, {rm32}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<subl_mi<R>> for Inst<R> {
    fn from(inst: subl_mi<R>) -> Self {
        Self::subl_mi(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `subq: MI_SXL(rm64[rw], imm32[sxq]) => REX.W + 0x81 /5 id [_64b]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct subq_mi_sxl<R> where R: Registers {
    pub rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm32: Simm32, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> subq_mi_sxl<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm64: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, imm32: impl Into<Simm32>) -> Self {
        Self {
            rm64: rm64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm32: imm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x5; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:97
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, digit, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:99
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, digit, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:100
        }

        // Emit opcode(s).
        buf.put1(0x81); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x5; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:161
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, digit, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:163
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, digit, rm64, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:164
        }

        // Emit immediate.
        self.imm32.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for subq_mi_sxl<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm64 = self.rm64.to_string(Size::Quadword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm32 = self.imm32.to_string(Extension::SignExtendQuad); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "subq {imm32}, {rm64}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<subq_mi_sxl<R>> for Inst<R> {
    fn from(inst: subq_mi_sxl<R>) -> Self {
        Self::subq_mi_sxl(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `subl: MI_SXB(rm32[rw], imm8[sxl]) => 0x83 /5 ib [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct subl_mi_sxb<R> where R: Registers {
    pub rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm8: Simm8, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> subl_mi_sxb<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm32: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, imm8: impl Into<Simm8>) -> Self {
        Self {
            rm32: rm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm8: imm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x5; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:97
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, digit, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:99
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, digit, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:100
        }

        // Emit opcode(s).
        buf.put1(0x83); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x5; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:161
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, digit, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:163
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, digit, rm32, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:164
        }

        // Emit immediate.
        self.imm8.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for subl_mi_sxb<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm32 = self.rm32.to_string(Size::Doubleword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm8 = self.imm8.to_string(Extension::SignExtendLong); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "subl {imm8}, {rm32}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<subl_mi_sxb<R>> for Inst<R> {
    fn from(inst: subl_mi_sxb<R>) -> Self {
        Self::subl_mi_sxb(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `subq: MI_SXB(rm64[rw], imm8[sxq]) => REX.W + 0x83 /5 ib [_64b]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct subq_mi_sxb<R> where R: Registers {
    pub rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm8: Simm8, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> subq_mi_sxb<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm64: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, imm8: impl Into<Simm8>) -> Self {
        Self {
            rm64: rm64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm8: imm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x5; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:97
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, digit, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:99
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, digit, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:100
        }

        // Emit opcode(s).
        buf.put1(0x83); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x5; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:161
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, digit, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:163
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, digit, rm64, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:164
        }

        // Emit immediate.
        self.imm8.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for subq_mi_sxb<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm64 = self.rm64.to_string(Size::Quadword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm8 = self.imm8.to_string(Extension::SignExtendQuad); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "subq {imm8}, {rm64}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<subq_mi_sxb<R>> for Inst<R> {
    fn from(inst: subq_mi_sxb<R>) -> Self {
        Self::subq_mi_sxb(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `subb: MR(rm8[rw], r8) => 0x28 /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct subb_mr<R> where R: Registers {
    pub rm8: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r8: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> subb_mr<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm8: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, r8: impl Into<Gpr<R::ReadGpr>>) -> Self {
        Self {
            rm8: rm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r8: r8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm8) = &self.rm8 {
            if let Some(trap_code) = rm8.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let mut rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:75
        self.rm8.always_emit_if_8bit_needed(&mut rex); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:77
        self.r8.always_emit_if_8bit_needed(&mut rex); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:77
        let r8 = self.r8.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:123
        match &self.rm8 {
            GprMem::Gpr(rm8) => rex.emit_two_op(buf, r8, rm8.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:130
            GprMem::Mem(rm8) => rm8.emit_rex_prefix(rex, r8, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:131
        }

        // Emit opcode(s).
        buf.put1(0x28); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r8 = self.r8.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:187
        match &self.rm8 {
            GprMem::Gpr(rm8) => emit_modrm(buf, r8, rm8.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:195
            GprMem::Mem(rm8) => emit_modrm_sib_disp(buf, off, r8, rm8, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:196
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm8 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
        visitor.read_gpr(self.r8.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for subb_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm8 = self.rm8.to_string(Size::Byte); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r8 = self.r8.to_string(Size::Byte); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "subb {r8}, {rm8}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<subb_mr<R>> for Inst<R> {
    fn from(inst: subb_mr<R>) -> Self {
        Self::subb_mr(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `subw: MR(rm16[rw], r16) => 0x66 + 0x29 /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct subw_mr<R> where R: Registers {
    pub rm16: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r16: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> subw_mr<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm16: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, r16: impl Into<Gpr<R::ReadGpr>>) -> Self {
        Self {
            rm16: rm16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r16: r16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm16) = &self.rm16 {
            if let Some(trap_code) = rm16.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit prefixes.
        buf.put1(0x66); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:48

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r16 = self.r16.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:123
        match &self.rm16 {
            GprMem::Gpr(rm16) => rex.emit_two_op(buf, r16, rm16.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:130
            GprMem::Mem(rm16) => rm16.emit_rex_prefix(rex, r16, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:131
        }

        // Emit opcode(s).
        buf.put1(0x29); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r16 = self.r16.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:187
        match &self.rm16 {
            GprMem::Gpr(rm16) => emit_modrm(buf, r16, rm16.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:195
            GprMem::Mem(rm16) => emit_modrm_sib_disp(buf, off, r16, rm16, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:196
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm16 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
        visitor.read_gpr(self.r16.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for subw_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm16 = self.rm16.to_string(Size::Word); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r16 = self.r16.to_string(Size::Word); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "subw {r16}, {rm16}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<subw_mr<R>> for Inst<R> {
    fn from(inst: subw_mr<R>) -> Self {
        Self::subw_mr(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `subl: MR(rm32[rw], r32) => 0x29 /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct subl_mr<R> where R: Registers {
    pub rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r32: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> subl_mr<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm32: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, r32: impl Into<Gpr<R::ReadGpr>>) -> Self {
        Self {
            rm32: rm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r32: r32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r32 = self.r32.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:123
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, r32, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:130
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, r32, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:131
        }

        // Emit opcode(s).
        buf.put1(0x29); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r32 = self.r32.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:187
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, r32, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:195
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, r32, rm32, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:196
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
        visitor.read_gpr(self.r32.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for subl_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm32 = self.rm32.to_string(Size::Doubleword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r32 = self.r32.to_string(Size::Doubleword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "subl {r32}, {rm32}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<subl_mr<R>> for Inst<R> {
    fn from(inst: subl_mr<R>) -> Self {
        Self::subl_mr(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `subq: MR(rm64[rw], r64) => REX.W + 0x29 /r [_64b]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct subq_mr<R> where R: Registers {
    pub rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r64: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> subq_mr<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm64: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, r64: impl Into<Gpr<R::ReadGpr>>) -> Self {
        Self {
            rm64: rm64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r64: r64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r64 = self.r64.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:123
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, r64, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:130
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, r64, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:131
        }

        // Emit opcode(s).
        buf.put1(0x29); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r64 = self.r64.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:187
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, r64, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:195
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, r64, rm64, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:196
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
        visitor.read_gpr(self.r64.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for subq_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm64 = self.rm64.to_string(Size::Quadword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r64 = self.r64.to_string(Size::Quadword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "subq {r64}, {rm64}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<subq_mr<R>> for Inst<R> {
    fn from(inst: subq_mr<R>) -> Self {
        Self::subq_mr(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `subb: RM(r8[rw], rm8) => 0x2a /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct subb_rm<R> where R: Registers {
    pub r8: Gpr<R::ReadWriteGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub rm8: GprMem<R::ReadGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> subb_rm<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(r8: impl Into<Gpr<R::ReadWriteGpr>>, rm8: impl Into<GprMem<R::ReadGpr, R::ReadGpr>>) -> Self {
        Self {
            r8: r8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            rm8: rm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm8) = &self.rm8 {
            if let Some(trap_code) = rm8.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let mut rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:75
        self.r8.always_emit_if_8bit_needed(&mut rex); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:77
        self.rm8.always_emit_if_8bit_needed(&mut rex); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:77
        let r8 = self.r8.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:104
        match &self.rm8 {
            GprMem::Gpr(rm8) => rex.emit_two_op(buf, r8, rm8.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:112
            GprMem::Mem(rm8) => rm8.emit_rex_prefix(rex, r8, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:113
        }

        // Emit opcode(s).
        buf.put1(0x2a); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r8 = self.r8.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:168
        match &self.rm8 {
            GprMem::Gpr(rm8) => emit_modrm(buf, r8, rm8.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:176
            GprMem::Mem(rm8) => emit_modrm_sib_disp(buf, off, r8, rm8, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:177
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write_gpr(self.r8.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
        match &mut self.rm8 {
            GprMem::Gpr(r) => visitor.read_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for subb_rm<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let r8 = self.r8.to_string(Size::Byte); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let rm8 = self.rm8.to_string(Size::Byte); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "subb {rm8}, {r8}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<subb_rm<R>> for Inst<R> {
    fn from(inst: subb_rm<R>) -> Self {
        Self::subb_rm(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `subw: RM(r16[rw], rm16) => 0x66 + 0x2b /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct subw_rm<R> where R: Registers {
    pub r16: Gpr<R::ReadWriteGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub rm16: GprMem<R::ReadGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> subw_rm<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(r16: impl Into<Gpr<R::ReadWriteGpr>>, rm16: impl Into<GprMem<R::ReadGpr, R::ReadGpr>>) -> Self {
        Self {
            r16: r16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            rm16: rm16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm16) = &self.rm16 {
            if let Some(trap_code) = rm16.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit prefixes.
        buf.put1(0x66); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:48

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r16 = self.r16.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:104
        match &self.rm16 {
            GprMem::Gpr(rm16) => rex.emit_two_op(buf, r16, rm16.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:112
            GprMem::Mem(rm16) => rm16.emit_rex_prefix(rex, r16, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:113
        }

        // Emit opcode(s).
        buf.put1(0x2b); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r16 = self.r16.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:168
        match &self.rm16 {
            GprMem::Gpr(rm16) => emit_modrm(buf, r16, rm16.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:176
            GprMem::Mem(rm16) => emit_modrm_sib_disp(buf, off, r16, rm16, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:177
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write_gpr(self.r16.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
        match &mut self.rm16 {
            GprMem::Gpr(r) => visitor.read_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for subw_rm<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let r16 = self.r16.to_string(Size::Word); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let rm16 = self.rm16.to_string(Size::Word); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "subw {rm16}, {r16}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<subw_rm<R>> for Inst<R> {
    fn from(inst: subw_rm<R>) -> Self {
        Self::subw_rm(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `subl: RM(r32[rw], rm32) => 0x2b /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct subl_rm<R> where R: Registers {
    pub r32: Gpr<R::ReadWriteGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub rm32: GprMem<R::ReadGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> subl_rm<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(r32: impl Into<Gpr<R::ReadWriteGpr>>, rm32: impl Into<GprMem<R::ReadGpr, R::ReadGpr>>) -> Self {
        Self {
            r32: r32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            rm32: rm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r32 = self.r32.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:104
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, r32, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:112
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, r32, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:113
        }

        // Emit opcode(s).
        buf.put1(0x2b); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r32 = self.r32.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:168
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, r32, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:176
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, r32, rm32, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:177
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write_gpr(self.r32.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for subl_rm<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let r32 = self.r32.to_string(Size::Doubleword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let rm32 = self.rm32.to_string(Size::Doubleword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "subl {rm32}, {r32}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<subl_rm<R>> for Inst<R> {
    fn from(inst: subl_rm<R>) -> Self {
        Self::subl_rm(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `subq: RM(r64[rw], rm64) => REX.W + 0x2b /r [_64b]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct subq_rm<R> where R: Registers {
    pub r64: Gpr<R::ReadWriteGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub rm64: GprMem<R::ReadGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> subq_rm<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(r64: impl Into<Gpr<R::ReadWriteGpr>>, rm64: impl Into<GprMem<R::ReadGpr, R::ReadGpr>>) -> Self {
        Self {
            r64: r64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            rm64: rm64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r64 = self.r64.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:104
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, r64, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:112
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, r64, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:113
        }

        // Emit opcode(s).
        buf.put1(0x2b); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r64 = self.r64.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:168
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, r64, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:176
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, r64, rm64, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:177
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write_gpr(self.r64.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for subq_rm<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let r64 = self.r64.to_string(Size::Quadword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let rm64 = self.rm64.to_string(Size::Quadword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "subq {rm64}, {r64}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<subq_rm<R>> for Inst<R> {
    fn from(inst: subq_rm<R>) -> Self {
        Self::subq_rm(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `sbbb: I(al[rw], imm8) => 0x1c ib [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct sbbb_i<R> where R: Registers {
    pub al: Fixed<R::ReadWriteGpr, { gpr::enc::RAX }>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm8: Imm8, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> sbbb_i<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(al: impl Into<Fixed<R::ReadWriteGpr, { gpr::enc::RAX }>>, imm8: impl Into<Imm8>) -> Self {
        Self {
            al: al.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm8: imm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, _: &impl KnownOffsetTable) {

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:87
        rex.emit_two_op(buf, digit, self.al.enc()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:88

        // Emit opcode(s).
        buf.put1(0x1c); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit immediate.
        self.imm8.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        let enc = self.al.expected_enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:138
        visitor.fixed_read_write_gpr(&mut self.al.0, enc); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:139
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for sbbb_i<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let al = "%al"; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm8 = self.imm8.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "sbbb {imm8}, {al}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<sbbb_i<R>> for Inst<R> {
    fn from(inst: sbbb_i<R>) -> Self {
        Self::sbbb_i(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `sbbw: I(ax[rw], imm16) => 0x66 + 0x1d iw [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct sbbw_i<R> where R: Registers {
    pub ax: Fixed<R::ReadWriteGpr, { gpr::enc::RAX }>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm16: Imm16, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> sbbw_i<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(ax: impl Into<Fixed<R::ReadWriteGpr, { gpr::enc::RAX }>>, imm16: impl Into<Imm16>) -> Self {
        Self {
            ax: ax.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm16: imm16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, _: &impl KnownOffsetTable) {

        // Emit prefixes.
        buf.put1(0x66); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:48

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:87
        rex.emit_two_op(buf, digit, self.ax.enc()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:88

        // Emit opcode(s).
        buf.put1(0x1d); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit immediate.
        self.imm16.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        let enc = self.ax.expected_enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:138
        visitor.fixed_read_write_gpr(&mut self.ax.0, enc); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:139
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for sbbw_i<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let ax = "%ax"; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm16 = self.imm16.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "sbbw {imm16}, {ax}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<sbbw_i<R>> for Inst<R> {
    fn from(inst: sbbw_i<R>) -> Self {
        Self::sbbw_i(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `sbbl: I(eax[rw], imm32) => 0x1d id [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct sbbl_i<R> where R: Registers {
    pub eax: Fixed<R::ReadWriteGpr, { gpr::enc::RAX }>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm32: Imm32, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> sbbl_i<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(eax: impl Into<Fixed<R::ReadWriteGpr, { gpr::enc::RAX }>>, imm32: impl Into<Imm32>) -> Self {
        Self {
            eax: eax.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm32: imm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, _: &impl KnownOffsetTable) {

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:87
        rex.emit_two_op(buf, digit, self.eax.enc()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:88

        // Emit opcode(s).
        buf.put1(0x1d); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit immediate.
        self.imm32.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        let enc = self.eax.expected_enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:138
        visitor.fixed_read_write_gpr(&mut self.eax.0, enc); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:139
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for sbbl_i<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let eax = "%eax"; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm32 = self.imm32.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "sbbl {imm32}, {eax}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<sbbl_i<R>> for Inst<R> {
    fn from(inst: sbbl_i<R>) -> Self {
        Self::sbbl_i(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `sbbq: I_SXL(rax[rw], imm32[sxq]) => REX.W + 0x1d id [_64b]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct sbbq_i_sxl<R> where R: Registers {
    pub rax: Fixed<R::ReadWriteGpr, { gpr::enc::RAX }>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm32: Simm32, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> sbbq_i_sxl<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rax: impl Into<Fixed<R::ReadWriteGpr, { gpr::enc::RAX }>>, imm32: impl Into<Simm32>) -> Self {
        Self {
            rax: rax.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm32: imm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, _: &impl KnownOffsetTable) {

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:87
        rex.emit_two_op(buf, digit, self.rax.enc()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:88

        // Emit opcode(s).
        buf.put1(0x1d); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit immediate.
        self.imm32.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        let enc = self.rax.expected_enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:138
        visitor.fixed_read_write_gpr(&mut self.rax.0, enc); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:139
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for sbbq_i_sxl<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rax = "%rax"; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm32 = self.imm32.to_string(Extension::SignExtendQuad); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "sbbq {imm32}, {rax}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<sbbq_i_sxl<R>> for Inst<R> {
    fn from(inst: sbbq_i_sxl<R>) -> Self {
        Self::sbbq_i_sxl(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `sbbb: MI(rm8[rw], imm8) => 0x80 /3 ib [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct sbbb_mi<R> where R: Registers {
    pub rm8: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm8: Imm8, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> sbbb_mi<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm8: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, imm8: impl Into<Imm8>) -> Self {
        Self {
            rm8: rm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm8: imm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm8) = &self.rm8 {
            if let Some(trap_code) = rm8.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let mut rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:75
        self.rm8.always_emit_if_8bit_needed(&mut rex); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:77
        let digit = 0x3; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:97
        match &self.rm8 {
            GprMem::Gpr(rm8) => rex.emit_two_op(buf, digit, rm8.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:99
            GprMem::Mem(rm8) => rm8.emit_rex_prefix(rex, digit, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:100
        }

        // Emit opcode(s).
        buf.put1(0x80); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x3; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:161
        match &self.rm8 {
            GprMem::Gpr(rm8) => emit_modrm(buf, digit, rm8.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:163
            GprMem::Mem(rm8) => emit_modrm_sib_disp(buf, off, digit, rm8, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:164
        }

        // Emit immediate.
        self.imm8.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm8 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for sbbb_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm8 = self.rm8.to_string(Size::Byte); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm8 = self.imm8.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "sbbb {imm8}, {rm8}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<sbbb_mi<R>> for Inst<R> {
    fn from(inst: sbbb_mi<R>) -> Self {
        Self::sbbb_mi(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `sbbw: MI(rm16[rw], imm16) => 0x66 + 0x81 /3 iw [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct sbbw_mi<R> where R: Registers {
    pub rm16: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm16: Imm16, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> sbbw_mi<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm16: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, imm16: impl Into<Imm16>) -> Self {
        Self {
            rm16: rm16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm16: imm16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm16) = &self.rm16 {
            if let Some(trap_code) = rm16.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit prefixes.
        buf.put1(0x66); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:48

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x3; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:97
        match &self.rm16 {
            GprMem::Gpr(rm16) => rex.emit_two_op(buf, digit, rm16.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:99
            GprMem::Mem(rm16) => rm16.emit_rex_prefix(rex, digit, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:100
        }

        // Emit opcode(s).
        buf.put1(0x81); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x3; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:161
        match &self.rm16 {
            GprMem::Gpr(rm16) => emit_modrm(buf, digit, rm16.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:163
            GprMem::Mem(rm16) => emit_modrm_sib_disp(buf, off, digit, rm16, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:164
        }

        // Emit immediate.
        self.imm16.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm16 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for sbbw_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm16 = self.rm16.to_string(Size::Word); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm16 = self.imm16.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "sbbw {imm16}, {rm16}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<sbbw_mi<R>> for Inst<R> {
    fn from(inst: sbbw_mi<R>) -> Self {
        Self::sbbw_mi(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `sbbl: MI(rm32[rw], imm32) => 0x81 /3 id [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct sbbl_mi<R> where R: Registers {
    pub rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm32: Imm32, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> sbbl_mi<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm32: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, imm32: impl Into<Imm32>) -> Self {
        Self {
            rm32: rm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm32: imm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x3; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:97
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, digit, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:99
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, digit, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:100
        }

        // Emit opcode(s).
        buf.put1(0x81); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x3; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:161
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, digit, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:163
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, digit, rm32, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:164
        }

        // Emit immediate.
        self.imm32.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for sbbl_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm32 = self.rm32.to_string(Size::Doubleword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm32 = self.imm32.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "sbbl {imm32}, {rm32}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<sbbl_mi<R>> for Inst<R> {
    fn from(inst: sbbl_mi<R>) -> Self {
        Self::sbbl_mi(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `sbbq: MI_SXL(rm64[rw], imm32[sxq]) => REX.W + 0x81 /3 id [_64b]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct sbbq_mi_sxl<R> where R: Registers {
    pub rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm32: Simm32, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> sbbq_mi_sxl<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm64: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, imm32: impl Into<Simm32>) -> Self {
        Self {
            rm64: rm64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm32: imm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x3; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:97
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, digit, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:99
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, digit, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:100
        }

        // Emit opcode(s).
        buf.put1(0x81); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x3; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:161
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, digit, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:163
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, digit, rm64, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:164
        }

        // Emit immediate.
        self.imm32.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for sbbq_mi_sxl<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm64 = self.rm64.to_string(Size::Quadword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm32 = self.imm32.to_string(Extension::SignExtendQuad); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "sbbq {imm32}, {rm64}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<sbbq_mi_sxl<R>> for Inst<R> {
    fn from(inst: sbbq_mi_sxl<R>) -> Self {
        Self::sbbq_mi_sxl(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `sbbl: MI_SXB(rm32[rw], imm8[sxl]) => 0x83 /3 ib [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct sbbl_mi_sxb<R> where R: Registers {
    pub rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm8: Simm8, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> sbbl_mi_sxb<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm32: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, imm8: impl Into<Simm8>) -> Self {
        Self {
            rm32: rm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm8: imm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x3; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:97
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, digit, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:99
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, digit, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:100
        }

        // Emit opcode(s).
        buf.put1(0x83); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x3; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:161
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, digit, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:163
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, digit, rm32, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:164
        }

        // Emit immediate.
        self.imm8.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for sbbl_mi_sxb<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm32 = self.rm32.to_string(Size::Doubleword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm8 = self.imm8.to_string(Extension::SignExtendLong); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "sbbl {imm8}, {rm32}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<sbbl_mi_sxb<R>> for Inst<R> {
    fn from(inst: sbbl_mi_sxb<R>) -> Self {
        Self::sbbl_mi_sxb(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `sbbq: MI_SXB(rm64[rw], imm8[sxq]) => REX.W + 0x83 /3 ib [_64b]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct sbbq_mi_sxb<R> where R: Registers {
    pub rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm8: Simm8, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> sbbq_mi_sxb<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm64: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, imm8: impl Into<Simm8>) -> Self {
        Self {
            rm64: rm64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm8: imm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x3; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:97
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, digit, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:99
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, digit, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:100
        }

        // Emit opcode(s).
        buf.put1(0x83); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x3; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:161
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, digit, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:163
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, digit, rm64, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:164
        }

        // Emit immediate.
        self.imm8.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for sbbq_mi_sxb<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm64 = self.rm64.to_string(Size::Quadword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm8 = self.imm8.to_string(Extension::SignExtendQuad); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "sbbq {imm8}, {rm64}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<sbbq_mi_sxb<R>> for Inst<R> {
    fn from(inst: sbbq_mi_sxb<R>) -> Self {
        Self::sbbq_mi_sxb(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `sbbb: MR(rm8[rw], r8) => 0x18 /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct sbbb_mr<R> where R: Registers {
    pub rm8: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r8: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> sbbb_mr<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm8: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, r8: impl Into<Gpr<R::ReadGpr>>) -> Self {
        Self {
            rm8: rm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r8: r8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm8) = &self.rm8 {
            if let Some(trap_code) = rm8.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let mut rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:75
        self.rm8.always_emit_if_8bit_needed(&mut rex); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:77
        self.r8.always_emit_if_8bit_needed(&mut rex); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:77
        let r8 = self.r8.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:123
        match &self.rm8 {
            GprMem::Gpr(rm8) => rex.emit_two_op(buf, r8, rm8.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:130
            GprMem::Mem(rm8) => rm8.emit_rex_prefix(rex, r8, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:131
        }

        // Emit opcode(s).
        buf.put1(0x18); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r8 = self.r8.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:187
        match &self.rm8 {
            GprMem::Gpr(rm8) => emit_modrm(buf, r8, rm8.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:195
            GprMem::Mem(rm8) => emit_modrm_sib_disp(buf, off, r8, rm8, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:196
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm8 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
        visitor.read_gpr(self.r8.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for sbbb_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm8 = self.rm8.to_string(Size::Byte); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r8 = self.r8.to_string(Size::Byte); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "sbbb {r8}, {rm8}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<sbbb_mr<R>> for Inst<R> {
    fn from(inst: sbbb_mr<R>) -> Self {
        Self::sbbb_mr(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `sbbw: MR(rm16[rw], r16) => 0x66 + 0x19 /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct sbbw_mr<R> where R: Registers {
    pub rm16: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r16: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> sbbw_mr<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm16: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, r16: impl Into<Gpr<R::ReadGpr>>) -> Self {
        Self {
            rm16: rm16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r16: r16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm16) = &self.rm16 {
            if let Some(trap_code) = rm16.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit prefixes.
        buf.put1(0x66); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:48

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r16 = self.r16.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:123
        match &self.rm16 {
            GprMem::Gpr(rm16) => rex.emit_two_op(buf, r16, rm16.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:130
            GprMem::Mem(rm16) => rm16.emit_rex_prefix(rex, r16, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:131
        }

        // Emit opcode(s).
        buf.put1(0x19); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r16 = self.r16.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:187
        match &self.rm16 {
            GprMem::Gpr(rm16) => emit_modrm(buf, r16, rm16.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:195
            GprMem::Mem(rm16) => emit_modrm_sib_disp(buf, off, r16, rm16, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:196
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm16 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
        visitor.read_gpr(self.r16.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for sbbw_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm16 = self.rm16.to_string(Size::Word); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r16 = self.r16.to_string(Size::Word); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "sbbw {r16}, {rm16}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<sbbw_mr<R>> for Inst<R> {
    fn from(inst: sbbw_mr<R>) -> Self {
        Self::sbbw_mr(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `sbbl: MR(rm32[rw], r32) => 0x19 /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct sbbl_mr<R> where R: Registers {
    pub rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r32: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> sbbl_mr<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm32: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, r32: impl Into<Gpr<R::ReadGpr>>) -> Self {
        Self {
            rm32: rm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r32: r32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r32 = self.r32.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:123
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, r32, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:130
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, r32, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:131
        }

        // Emit opcode(s).
        buf.put1(0x19); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r32 = self.r32.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:187
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, r32, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:195
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, r32, rm32, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:196
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
        visitor.read_gpr(self.r32.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for sbbl_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm32 = self.rm32.to_string(Size::Doubleword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r32 = self.r32.to_string(Size::Doubleword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "sbbl {r32}, {rm32}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<sbbl_mr<R>> for Inst<R> {
    fn from(inst: sbbl_mr<R>) -> Self {
        Self::sbbl_mr(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `sbbq: MR(rm64[rw], r64) => REX.W + 0x19 /r [_64b]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct sbbq_mr<R> where R: Registers {
    pub rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r64: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> sbbq_mr<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm64: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, r64: impl Into<Gpr<R::ReadGpr>>) -> Self {
        Self {
            rm64: rm64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r64: r64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r64 = self.r64.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:123
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, r64, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:130
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, r64, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:131
        }

        // Emit opcode(s).
        buf.put1(0x19); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r64 = self.r64.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:187
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, r64, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:195
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, r64, rm64, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:196
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
        visitor.read_gpr(self.r64.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for sbbq_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm64 = self.rm64.to_string(Size::Quadword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r64 = self.r64.to_string(Size::Quadword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "sbbq {r64}, {rm64}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<sbbq_mr<R>> for Inst<R> {
    fn from(inst: sbbq_mr<R>) -> Self {
        Self::sbbq_mr(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `sbbb: RM(r8[rw], rm8) => 0x1a /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct sbbb_rm<R> where R: Registers {
    pub r8: Gpr<R::ReadWriteGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub rm8: GprMem<R::ReadGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> sbbb_rm<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(r8: impl Into<Gpr<R::ReadWriteGpr>>, rm8: impl Into<GprMem<R::ReadGpr, R::ReadGpr>>) -> Self {
        Self {
            r8: r8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            rm8: rm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm8) = &self.rm8 {
            if let Some(trap_code) = rm8.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let mut rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:75
        self.r8.always_emit_if_8bit_needed(&mut rex); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:77
        self.rm8.always_emit_if_8bit_needed(&mut rex); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:77
        let r8 = self.r8.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:104
        match &self.rm8 {
            GprMem::Gpr(rm8) => rex.emit_two_op(buf, r8, rm8.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:112
            GprMem::Mem(rm8) => rm8.emit_rex_prefix(rex, r8, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:113
        }

        // Emit opcode(s).
        buf.put1(0x1a); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r8 = self.r8.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:168
        match &self.rm8 {
            GprMem::Gpr(rm8) => emit_modrm(buf, r8, rm8.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:176
            GprMem::Mem(rm8) => emit_modrm_sib_disp(buf, off, r8, rm8, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:177
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write_gpr(self.r8.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
        match &mut self.rm8 {
            GprMem::Gpr(r) => visitor.read_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for sbbb_rm<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let r8 = self.r8.to_string(Size::Byte); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let rm8 = self.rm8.to_string(Size::Byte); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "sbbb {rm8}, {r8}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<sbbb_rm<R>> for Inst<R> {
    fn from(inst: sbbb_rm<R>) -> Self {
        Self::sbbb_rm(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `sbbw: RM(r16[rw], rm16) => 0x66 + 0x1b /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct sbbw_rm<R> where R: Registers {
    pub r16: Gpr<R::ReadWriteGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub rm16: GprMem<R::ReadGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> sbbw_rm<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(r16: impl Into<Gpr<R::ReadWriteGpr>>, rm16: impl Into<GprMem<R::ReadGpr, R::ReadGpr>>) -> Self {
        Self {
            r16: r16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            rm16: rm16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm16) = &self.rm16 {
            if let Some(trap_code) = rm16.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit prefixes.
        buf.put1(0x66); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:48

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r16 = self.r16.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:104
        match &self.rm16 {
            GprMem::Gpr(rm16) => rex.emit_two_op(buf, r16, rm16.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:112
            GprMem::Mem(rm16) => rm16.emit_rex_prefix(rex, r16, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:113
        }

        // Emit opcode(s).
        buf.put1(0x1b); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r16 = self.r16.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:168
        match &self.rm16 {
            GprMem::Gpr(rm16) => emit_modrm(buf, r16, rm16.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:176
            GprMem::Mem(rm16) => emit_modrm_sib_disp(buf, off, r16, rm16, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:177
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write_gpr(self.r16.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
        match &mut self.rm16 {
            GprMem::Gpr(r) => visitor.read_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for sbbw_rm<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let r16 = self.r16.to_string(Size::Word); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let rm16 = self.rm16.to_string(Size::Word); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "sbbw {rm16}, {r16}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<sbbw_rm<R>> for Inst<R> {
    fn from(inst: sbbw_rm<R>) -> Self {
        Self::sbbw_rm(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `sbbl: RM(r32[rw], rm32) => 0x1b /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct sbbl_rm<R> where R: Registers {
    pub r32: Gpr<R::ReadWriteGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub rm32: GprMem<R::ReadGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> sbbl_rm<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(r32: impl Into<Gpr<R::ReadWriteGpr>>, rm32: impl Into<GprMem<R::ReadGpr, R::ReadGpr>>) -> Self {
        Self {
            r32: r32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            rm32: rm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r32 = self.r32.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:104
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, r32, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:112
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, r32, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:113
        }

        // Emit opcode(s).
        buf.put1(0x1b); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r32 = self.r32.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:168
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, r32, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:176
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, r32, rm32, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:177
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write_gpr(self.r32.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for sbbl_rm<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let r32 = self.r32.to_string(Size::Doubleword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let rm32 = self.rm32.to_string(Size::Doubleword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "sbbl {rm32}, {r32}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<sbbl_rm<R>> for Inst<R> {
    fn from(inst: sbbl_rm<R>) -> Self {
        Self::sbbl_rm(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `sbbq: RM(r64[rw], rm64) => REX.W + 0x1b /r [_64b]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct sbbq_rm<R> where R: Registers {
    pub r64: Gpr<R::ReadWriteGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub rm64: GprMem<R::ReadGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> sbbq_rm<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(r64: impl Into<Gpr<R::ReadWriteGpr>>, rm64: impl Into<GprMem<R::ReadGpr, R::ReadGpr>>) -> Self {
        Self {
            r64: r64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            rm64: rm64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r64 = self.r64.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:104
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, r64, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:112
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, r64, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:113
        }

        // Emit opcode(s).
        buf.put1(0x1b); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r64 = self.r64.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:168
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, r64, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:176
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, r64, rm64, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:177
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write_gpr(self.r64.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for sbbq_rm<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let r64 = self.r64.to_string(Size::Quadword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let rm64 = self.rm64.to_string(Size::Quadword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "sbbq {rm64}, {r64}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<sbbq_rm<R>> for Inst<R> {
    fn from(inst: sbbq_rm<R>) -> Self {
        Self::sbbq_rm(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_subb: MI(m8[rw], imm8) => 0xF0 + 0x80 /5 ib [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_subb_mi<R> where R: Registers {
    pub m8: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm8: Imm8, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_subb_mi<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m8: impl Into<Amode<R::ReadGpr>>, imm8: impl Into<Imm8>) -> Self {
        Self {
            m8: m8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm8: imm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m8.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x5; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:92
        self.m8.emit_rex_prefix(rex, digit, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:93

        // Emit opcode(s).
        buf.put1(0x80); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x5; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:156
        emit_modrm_sib_disp(buf, off, digit, &self.m8, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:157

        // Emit immediate.
        self.imm8.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m8, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_subb_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m8 = self.m8.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm8 = self.imm8.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock subb {imm8}, {m8}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_subb_mi<R>> for Inst<R> {
    fn from(inst: lock_subb_mi<R>) -> Self {
        Self::lock_subb_mi(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_subw: MI(m16[rw], imm16) => 0xF0 + 0x66 + 0x81 /5 iw [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_subw_mi<R> where R: Registers {
    pub m16: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm16: Imm16, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_subw_mi<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m16: impl Into<Amode<R::ReadGpr>>, imm16: impl Into<Imm16>) -> Self {
        Self {
            m16: m16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm16: imm16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m16.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42
        buf.put1(0x66); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:48

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x5; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:92
        self.m16.emit_rex_prefix(rex, digit, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:93

        // Emit opcode(s).
        buf.put1(0x81); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x5; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:156
        emit_modrm_sib_disp(buf, off, digit, &self.m16, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:157

        // Emit immediate.
        self.imm16.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m16, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_subw_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m16 = self.m16.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm16 = self.imm16.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock subw {imm16}, {m16}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_subw_mi<R>> for Inst<R> {
    fn from(inst: lock_subw_mi<R>) -> Self {
        Self::lock_subw_mi(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_subl: MI(m32[rw], imm32) => 0xF0 + 0x81 /5 id [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_subl_mi<R> where R: Registers {
    pub m32: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm32: Imm32, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_subl_mi<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m32: impl Into<Amode<R::ReadGpr>>, imm32: impl Into<Imm32>) -> Self {
        Self {
            m32: m32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm32: imm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m32.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x5; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:92
        self.m32.emit_rex_prefix(rex, digit, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:93

        // Emit opcode(s).
        buf.put1(0x81); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x5; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:156
        emit_modrm_sib_disp(buf, off, digit, &self.m32, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:157

        // Emit immediate.
        self.imm32.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m32, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_subl_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m32 = self.m32.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm32 = self.imm32.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock subl {imm32}, {m32}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_subl_mi<R>> for Inst<R> {
    fn from(inst: lock_subl_mi<R>) -> Self {
        Self::lock_subl_mi(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_subq: MI_SXL(m64[rw], imm32[sxq]) => 0xF0 + REX.W + 0x81 /5 id [_64b]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_subq_mi_sxl<R> where R: Registers {
    pub m64: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm32: Simm32, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_subq_mi_sxl<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m64: impl Into<Amode<R::ReadGpr>>, imm32: impl Into<Simm32>) -> Self {
        Self {
            m64: m64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm32: imm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m64.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x5; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:92
        self.m64.emit_rex_prefix(rex, digit, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:93

        // Emit opcode(s).
        buf.put1(0x81); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x5; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:156
        emit_modrm_sib_disp(buf, off, digit, &self.m64, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:157

        // Emit immediate.
        self.imm32.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m64, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_subq_mi_sxl<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m64 = self.m64.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm32 = self.imm32.to_string(Extension::SignExtendQuad); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock subq {imm32}, {m64}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_subq_mi_sxl<R>> for Inst<R> {
    fn from(inst: lock_subq_mi_sxl<R>) -> Self {
        Self::lock_subq_mi_sxl(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_subl: MI_SXB(m32[rw], imm8[sxl]) => 0xF0 + 0x83 /5 ib [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_subl_mi_sxb<R> where R: Registers {
    pub m32: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm8: Simm8, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_subl_mi_sxb<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m32: impl Into<Amode<R::ReadGpr>>, imm8: impl Into<Simm8>) -> Self {
        Self {
            m32: m32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm8: imm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m32.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x5; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:92
        self.m32.emit_rex_prefix(rex, digit, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:93

        // Emit opcode(s).
        buf.put1(0x83); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x5; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:156
        emit_modrm_sib_disp(buf, off, digit, &self.m32, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:157

        // Emit immediate.
        self.imm8.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m32, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_subl_mi_sxb<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m32 = self.m32.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm8 = self.imm8.to_string(Extension::SignExtendLong); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock subl {imm8}, {m32}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_subl_mi_sxb<R>> for Inst<R> {
    fn from(inst: lock_subl_mi_sxb<R>) -> Self {
        Self::lock_subl_mi_sxb(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_subq: MI_SXB(m64[rw], imm8[sxq]) => 0xF0 + REX.W + 0x83 /5 ib [_64b]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_subq_mi_sxb<R> where R: Registers {
    pub m64: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm8: Simm8, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_subq_mi_sxb<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m64: impl Into<Amode<R::ReadGpr>>, imm8: impl Into<Simm8>) -> Self {
        Self {
            m64: m64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm8: imm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m64.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x5; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:92
        self.m64.emit_rex_prefix(rex, digit, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:93

        // Emit opcode(s).
        buf.put1(0x83); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x5; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:156
        emit_modrm_sib_disp(buf, off, digit, &self.m64, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:157

        // Emit immediate.
        self.imm8.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m64, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_subq_mi_sxb<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m64 = self.m64.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm8 = self.imm8.to_string(Extension::SignExtendQuad); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock subq {imm8}, {m64}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_subq_mi_sxb<R>> for Inst<R> {
    fn from(inst: lock_subq_mi_sxb<R>) -> Self {
        Self::lock_subq_mi_sxb(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_subb: MR(m8[rw], r8) => 0xF0 + 0x28 /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_subb_mr<R> where R: Registers {
    pub m8: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r8: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_subb_mr<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m8: impl Into<Amode<R::ReadGpr>>, r8: impl Into<Gpr<R::ReadGpr>>) -> Self {
        Self {
            m8: m8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r8: r8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m8.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let mut rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:75
        self.r8.always_emit_if_8bit_needed(&mut rex); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:77
        let r8 = self.r8.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:119
        self.m8.emit_rex_prefix(rex, r8, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:120

        // Emit opcode(s).
        buf.put1(0x28); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r8 = self.r8.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:183
        emit_modrm_sib_disp(buf, off, r8, &self.m8, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:184
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m8, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
        visitor.read_gpr(self.r8.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_subb_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m8 = self.m8.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r8 = self.r8.to_string(Size::Byte); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock subb {r8}, {m8}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_subb_mr<R>> for Inst<R> {
    fn from(inst: lock_subb_mr<R>) -> Self {
        Self::lock_subb_mr(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_subw: MR(m16[rw], r16) => 0xF0 + 0x66 + 0x29 /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_subw_mr<R> where R: Registers {
    pub m16: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r16: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_subw_mr<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m16: impl Into<Amode<R::ReadGpr>>, r16: impl Into<Gpr<R::ReadGpr>>) -> Self {
        Self {
            m16: m16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r16: r16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m16.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42
        buf.put1(0x66); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:48

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r16 = self.r16.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:119
        self.m16.emit_rex_prefix(rex, r16, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:120

        // Emit opcode(s).
        buf.put1(0x29); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r16 = self.r16.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:183
        emit_modrm_sib_disp(buf, off, r16, &self.m16, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:184
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m16, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
        visitor.read_gpr(self.r16.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_subw_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m16 = self.m16.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r16 = self.r16.to_string(Size::Word); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock subw {r16}, {m16}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_subw_mr<R>> for Inst<R> {
    fn from(inst: lock_subw_mr<R>) -> Self {
        Self::lock_subw_mr(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_subl: MR(m32[rw], r32) => 0xF0 + 0x29 /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_subl_mr<R> where R: Registers {
    pub m32: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r32: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_subl_mr<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m32: impl Into<Amode<R::ReadGpr>>, r32: impl Into<Gpr<R::ReadGpr>>) -> Self {
        Self {
            m32: m32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r32: r32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m32.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r32 = self.r32.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:119
        self.m32.emit_rex_prefix(rex, r32, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:120

        // Emit opcode(s).
        buf.put1(0x29); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r32 = self.r32.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:183
        emit_modrm_sib_disp(buf, off, r32, &self.m32, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:184
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m32, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
        visitor.read_gpr(self.r32.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_subl_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m32 = self.m32.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r32 = self.r32.to_string(Size::Doubleword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock subl {r32}, {m32}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_subl_mr<R>> for Inst<R> {
    fn from(inst: lock_subl_mr<R>) -> Self {
        Self::lock_subl_mr(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_subq: MR(m64[rw], r64) => 0xF0 + REX.W + 0x29 /r [_64b]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_subq_mr<R> where R: Registers {
    pub m64: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r64: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_subq_mr<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m64: impl Into<Amode<R::ReadGpr>>, r64: impl Into<Gpr<R::ReadGpr>>) -> Self {
        Self {
            m64: m64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r64: r64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m64.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r64 = self.r64.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:119
        self.m64.emit_rex_prefix(rex, r64, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:120

        // Emit opcode(s).
        buf.put1(0x29); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r64 = self.r64.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:183
        emit_modrm_sib_disp(buf, off, r64, &self.m64, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:184
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m64, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
        visitor.read_gpr(self.r64.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_subq_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m64 = self.m64.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r64 = self.r64.to_string(Size::Quadword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock subq {r64}, {m64}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_subq_mr<R>> for Inst<R> {
    fn from(inst: lock_subq_mr<R>) -> Self {
        Self::lock_subq_mr(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_sbbb: MI(m8[rw], imm8) => 0xF0 + 0x80 /3 ib [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_sbbb_mi<R> where R: Registers {
    pub m8: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm8: Imm8, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_sbbb_mi<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m8: impl Into<Amode<R::ReadGpr>>, imm8: impl Into<Imm8>) -> Self {
        Self {
            m8: m8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm8: imm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m8.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x3; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:92
        self.m8.emit_rex_prefix(rex, digit, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:93

        // Emit opcode(s).
        buf.put1(0x80); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x3; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:156
        emit_modrm_sib_disp(buf, off, digit, &self.m8, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:157

        // Emit immediate.
        self.imm8.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m8, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_sbbb_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m8 = self.m8.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm8 = self.imm8.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock sbbb {imm8}, {m8}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_sbbb_mi<R>> for Inst<R> {
    fn from(inst: lock_sbbb_mi<R>) -> Self {
        Self::lock_sbbb_mi(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_sbbw: MI(m16[rw], imm16) => 0xF0 + 0x66 + 0x81 /3 iw [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_sbbw_mi<R> where R: Registers {
    pub m16: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm16: Imm16, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_sbbw_mi<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m16: impl Into<Amode<R::ReadGpr>>, imm16: impl Into<Imm16>) -> Self {
        Self {
            m16: m16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm16: imm16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m16.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42
        buf.put1(0x66); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:48

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x3; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:92
        self.m16.emit_rex_prefix(rex, digit, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:93

        // Emit opcode(s).
        buf.put1(0x81); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x3; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:156
        emit_modrm_sib_disp(buf, off, digit, &self.m16, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:157

        // Emit immediate.
        self.imm16.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m16, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_sbbw_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m16 = self.m16.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm16 = self.imm16.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock sbbw {imm16}, {m16}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_sbbw_mi<R>> for Inst<R> {
    fn from(inst: lock_sbbw_mi<R>) -> Self {
        Self::lock_sbbw_mi(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_sbbl: MI(m32[rw], imm32) => 0xF0 + 0x81 /3 id [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_sbbl_mi<R> where R: Registers {
    pub m32: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm32: Imm32, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_sbbl_mi<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m32: impl Into<Amode<R::ReadGpr>>, imm32: impl Into<Imm32>) -> Self {
        Self {
            m32: m32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm32: imm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m32.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x3; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:92
        self.m32.emit_rex_prefix(rex, digit, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:93

        // Emit opcode(s).
        buf.put1(0x81); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x3; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:156
        emit_modrm_sib_disp(buf, off, digit, &self.m32, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:157

        // Emit immediate.
        self.imm32.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m32, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_sbbl_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m32 = self.m32.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm32 = self.imm32.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock sbbl {imm32}, {m32}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_sbbl_mi<R>> for Inst<R> {
    fn from(inst: lock_sbbl_mi<R>) -> Self {
        Self::lock_sbbl_mi(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_sbbq: MI_SXL(m64[rw], imm32[sxq]) => 0xF0 + REX.W + 0x81 /3 id [_64b]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_sbbq_mi_sxl<R> where R: Registers {
    pub m64: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm32: Simm32, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_sbbq_mi_sxl<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m64: impl Into<Amode<R::ReadGpr>>, imm32: impl Into<Simm32>) -> Self {
        Self {
            m64: m64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm32: imm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m64.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x3; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:92
        self.m64.emit_rex_prefix(rex, digit, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:93

        // Emit opcode(s).
        buf.put1(0x81); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x3; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:156
        emit_modrm_sib_disp(buf, off, digit, &self.m64, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:157

        // Emit immediate.
        self.imm32.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m64, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_sbbq_mi_sxl<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m64 = self.m64.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm32 = self.imm32.to_string(Extension::SignExtendQuad); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock sbbq {imm32}, {m64}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_sbbq_mi_sxl<R>> for Inst<R> {
    fn from(inst: lock_sbbq_mi_sxl<R>) -> Self {
        Self::lock_sbbq_mi_sxl(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_sbbl: MI_SXB(m32[rw], imm8[sxl]) => 0xF0 + 0x83 /3 ib [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_sbbl_mi_sxb<R> where R: Registers {
    pub m32: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm8: Simm8, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_sbbl_mi_sxb<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m32: impl Into<Amode<R::ReadGpr>>, imm8: impl Into<Simm8>) -> Self {
        Self {
            m32: m32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm8: imm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m32.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x3; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:92
        self.m32.emit_rex_prefix(rex, digit, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:93

        // Emit opcode(s).
        buf.put1(0x83); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x3; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:156
        emit_modrm_sib_disp(buf, off, digit, &self.m32, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:157

        // Emit immediate.
        self.imm8.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m32, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_sbbl_mi_sxb<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m32 = self.m32.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm8 = self.imm8.to_string(Extension::SignExtendLong); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock sbbl {imm8}, {m32}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_sbbl_mi_sxb<R>> for Inst<R> {
    fn from(inst: lock_sbbl_mi_sxb<R>) -> Self {
        Self::lock_sbbl_mi_sxb(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_sbbq: MI_SXB(m64[rw], imm8[sxq]) => 0xF0 + REX.W + 0x83 /3 ib [_64b]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_sbbq_mi_sxb<R> where R: Registers {
    pub m64: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm8: Simm8, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_sbbq_mi_sxb<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m64: impl Into<Amode<R::ReadGpr>>, imm8: impl Into<Simm8>) -> Self {
        Self {
            m64: m64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm8: imm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m64.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x3; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:92
        self.m64.emit_rex_prefix(rex, digit, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:93

        // Emit opcode(s).
        buf.put1(0x83); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x3; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:156
        emit_modrm_sib_disp(buf, off, digit, &self.m64, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:157

        // Emit immediate.
        self.imm8.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m64, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_sbbq_mi_sxb<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m64 = self.m64.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm8 = self.imm8.to_string(Extension::SignExtendQuad); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock sbbq {imm8}, {m64}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_sbbq_mi_sxb<R>> for Inst<R> {
    fn from(inst: lock_sbbq_mi_sxb<R>) -> Self {
        Self::lock_sbbq_mi_sxb(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_sbbb: MR(m8[rw], r8) => 0xF0 + 0x18 /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_sbbb_mr<R> where R: Registers {
    pub m8: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r8: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_sbbb_mr<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m8: impl Into<Amode<R::ReadGpr>>, r8: impl Into<Gpr<R::ReadGpr>>) -> Self {
        Self {
            m8: m8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r8: r8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m8.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let mut rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:75
        self.r8.always_emit_if_8bit_needed(&mut rex); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:77
        let r8 = self.r8.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:119
        self.m8.emit_rex_prefix(rex, r8, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:120

        // Emit opcode(s).
        buf.put1(0x18); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r8 = self.r8.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:183
        emit_modrm_sib_disp(buf, off, r8, &self.m8, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:184
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m8, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
        visitor.read_gpr(self.r8.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_sbbb_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m8 = self.m8.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r8 = self.r8.to_string(Size::Byte); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock sbbb {r8}, {m8}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_sbbb_mr<R>> for Inst<R> {
    fn from(inst: lock_sbbb_mr<R>) -> Self {
        Self::lock_sbbb_mr(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_sbbw: MR(m16[rw], r16) => 0xF0 + 0x66 + 0x19 /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_sbbw_mr<R> where R: Registers {
    pub m16: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r16: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_sbbw_mr<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m16: impl Into<Amode<R::ReadGpr>>, r16: impl Into<Gpr<R::ReadGpr>>) -> Self {
        Self {
            m16: m16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r16: r16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m16.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42
        buf.put1(0x66); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:48

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r16 = self.r16.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:119
        self.m16.emit_rex_prefix(rex, r16, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:120

        // Emit opcode(s).
        buf.put1(0x19); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r16 = self.r16.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:183
        emit_modrm_sib_disp(buf, off, r16, &self.m16, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:184
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m16, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
        visitor.read_gpr(self.r16.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_sbbw_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m16 = self.m16.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r16 = self.r16.to_string(Size::Word); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock sbbw {r16}, {m16}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_sbbw_mr<R>> for Inst<R> {
    fn from(inst: lock_sbbw_mr<R>) -> Self {
        Self::lock_sbbw_mr(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_sbbl: MR(m32[rw], r32) => 0xF0 + 0x19 /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_sbbl_mr<R> where R: Registers {
    pub m32: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r32: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_sbbl_mr<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m32: impl Into<Amode<R::ReadGpr>>, r32: impl Into<Gpr<R::ReadGpr>>) -> Self {
        Self {
            m32: m32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r32: r32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m32.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r32 = self.r32.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:119
        self.m32.emit_rex_prefix(rex, r32, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:120

        // Emit opcode(s).
        buf.put1(0x19); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r32 = self.r32.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:183
        emit_modrm_sib_disp(buf, off, r32, &self.m32, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:184
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m32, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
        visitor.read_gpr(self.r32.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_sbbl_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m32 = self.m32.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r32 = self.r32.to_string(Size::Doubleword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock sbbl {r32}, {m32}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_sbbl_mr<R>> for Inst<R> {
    fn from(inst: lock_sbbl_mr<R>) -> Self {
        Self::lock_sbbl_mr(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_sbbq: MR(m64[rw], r64) => 0xF0 + REX.W + 0x19 /r [_64b]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_sbbq_mr<R> where R: Registers {
    pub m64: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r64: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_sbbq_mr<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m64: impl Into<Amode<R::ReadGpr>>, r64: impl Into<Gpr<R::ReadGpr>>) -> Self {
        Self {
            m64: m64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r64: r64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m64.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r64 = self.r64.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:119
        self.m64.emit_rex_prefix(rex, r64, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:120

        // Emit opcode(s).
        buf.put1(0x19); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r64 = self.r64.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:183
        emit_modrm_sib_disp(buf, off, r64, &self.m64, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:184
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m64, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
        visitor.read_gpr(self.r64.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_sbbq_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m64 = self.m64.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r64 = self.r64.to_string(Size::Quadword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock sbbq {r64}, {m64}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_sbbq_mr<R>> for Inst<R> {
    fn from(inst: lock_sbbq_mr<R>) -> Self {
        Self::lock_sbbq_mr(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `subss: A(xmm[rw], xmm_m32) => 0xF3 + 0x0F + 0x5c /r [_64b | compat | sse]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct subss_a<R> where R: Registers {
    pub xmm: Xmm<R::ReadWriteXmm>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub xmm_m32: XmmMem<R::ReadXmm, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> subss_a<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(xmm: impl Into<Xmm<R::ReadWriteXmm>>, xmm_m32: impl Into<XmmMem<R::ReadXmm, R::ReadGpr>>) -> Self {
        Self {
            xmm: xmm.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            xmm_m32: xmm_m32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let XmmMem::Mem(xmm_m32) = &self.xmm_m32 {
            if let Some(trap_code) = xmm_m32.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit prefixes.
        buf.put1(0xF3); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let xmm = self.xmm.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:104
        match &self.xmm_m32 {
            XmmMem::Xmm(xmm_m32) => rex.emit_two_op(buf, xmm, xmm_m32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:108
            XmmMem::Mem(xmm_m32) => xmm_m32.emit_rex_prefix(rex, xmm, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:109
        }

        // Emit opcode(s).
        buf.put1(0x0f); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:60
        buf.put1(0x5c); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let xmm = self.xmm.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:168
        match &self.xmm_m32 {
            XmmMem::Xmm(xmm_m32) => emit_modrm(buf, xmm, xmm_m32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:172
            XmmMem::Mem(xmm_m32) => emit_modrm_sib_disp(buf, off, xmm, xmm_m32, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:173
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write_xmm(self.xmm.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
        match &mut self.xmm_m32 {
            XmmMem::Xmm(r) => visitor.read_xmm(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            XmmMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat, Feature::sse] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for subss_a<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let xmm = self.xmm.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let xmm_m32 = self.xmm_m32.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "subss {xmm_m32}, {xmm}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<subss_a<R>> for Inst<R> {
    fn from(inst: subss_a<R>) -> Self {
        Self::subss_a(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `subsd: A(xmm[rw], xmm_m64) => 0xF2 + 0x0F + 0x5c /r [_64b | compat | sse2]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct subsd_a<R> where R: Registers {
    pub xmm: Xmm<R::ReadWriteXmm>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub xmm_m64: XmmMem<R::ReadXmm, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> subsd_a<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(xmm: impl Into<Xmm<R::ReadWriteXmm>>, xmm_m64: impl Into<XmmMem<R::ReadXmm, R::ReadGpr>>) -> Self {
        Self {
            xmm: xmm.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            xmm_m64: xmm_m64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let XmmMem::Mem(xmm_m64) = &self.xmm_m64 {
            if let Some(trap_code) = xmm_m64.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit prefixes.
        buf.put1(0xF2); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let xmm = self.xmm.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:104
        match &self.xmm_m64 {
            XmmMem::Xmm(xmm_m64) => rex.emit_two_op(buf, xmm, xmm_m64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:108
            XmmMem::Mem(xmm_m64) => xmm_m64.emit_rex_prefix(rex, xmm, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:109
        }

        // Emit opcode(s).
        buf.put1(0x0f); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:60
        buf.put1(0x5c); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let xmm = self.xmm.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:168
        match &self.xmm_m64 {
            XmmMem::Xmm(xmm_m64) => emit_modrm(buf, xmm, xmm_m64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:172
            XmmMem::Mem(xmm_m64) => emit_modrm_sib_disp(buf, off, xmm, xmm_m64, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:173
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write_xmm(self.xmm.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
        match &mut self.xmm_m64 {
            XmmMem::Xmm(r) => visitor.read_xmm(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            XmmMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat, Feature::sse2] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for subsd_a<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let xmm = self.xmm.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let xmm_m64 = self.xmm_m64.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "subsd {xmm_m64}, {xmm}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<subsd_a<R>> for Inst<R> {
    fn from(inst: subsd_a<R>) -> Self {
        Self::subsd_a(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `subps: A(xmm[rw], xmm_m128[align]) => 0x0F + 0x5c /r [_64b | compat | sse]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct subps_a<R> where R: Registers {
    pub xmm: Xmm<R::ReadWriteXmm>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub xmm_m128: XmmMem<R::ReadXmm, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> subps_a<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(xmm: impl Into<Xmm<R::ReadWriteXmm>>, xmm_m128: impl Into<XmmMem<R::ReadXmm, R::ReadGpr>>) -> Self {
        Self {
            xmm: xmm.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            xmm_m128: xmm_m128.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let XmmMem::Mem(xmm_m128) = &self.xmm_m128 {
            if let Some(trap_code) = xmm_m128.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let xmm = self.xmm.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:104
        match &self.xmm_m128 {
            XmmMem::Xmm(xmm_m128) => rex.emit_two_op(buf, xmm, xmm_m128.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:108
            XmmMem::Mem(xmm_m128) => xmm_m128.emit_rex_prefix(rex, xmm, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:109
        }

        // Emit opcode(s).
        buf.put1(0x0f); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:60
        buf.put1(0x5c); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let xmm = self.xmm.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:168
        match &self.xmm_m128 {
            XmmMem::Xmm(xmm_m128) => emit_modrm(buf, xmm, xmm_m128.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:172
            XmmMem::Mem(xmm_m128) => emit_modrm_sib_disp(buf, off, xmm, xmm_m128, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:173
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write_xmm(self.xmm.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
        match &mut self.xmm_m128 {
            XmmMem::Xmm(r) => visitor.read_xmm(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            XmmMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat, Feature::sse] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for subps_a<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let xmm = self.xmm.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let xmm_m128 = self.xmm_m128.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "subps {xmm_m128}, {xmm}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<subps_a<R>> for Inst<R> {
    fn from(inst: subps_a<R>) -> Self {
        Self::subps_a(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `subpd: A(xmm[rw], xmm_m128[align]) => 0x66 + 0x0F + 0x5c /r [_64b | compat | sse2]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct subpd_a<R> where R: Registers {
    pub xmm: Xmm<R::ReadWriteXmm>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub xmm_m128: XmmMem<R::ReadXmm, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> subpd_a<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(xmm: impl Into<Xmm<R::ReadWriteXmm>>, xmm_m128: impl Into<XmmMem<R::ReadXmm, R::ReadGpr>>) -> Self {
        Self {
            xmm: xmm.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            xmm_m128: xmm_m128.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let XmmMem::Mem(xmm_m128) = &self.xmm_m128 {
            if let Some(trap_code) = xmm_m128.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit prefixes.
        buf.put1(0x66); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:48

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let xmm = self.xmm.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:104
        match &self.xmm_m128 {
            XmmMem::Xmm(xmm_m128) => rex.emit_two_op(buf, xmm, xmm_m128.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:108
            XmmMem::Mem(xmm_m128) => xmm_m128.emit_rex_prefix(rex, xmm, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:109
        }

        // Emit opcode(s).
        buf.put1(0x0f); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:60
        buf.put1(0x5c); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let xmm = self.xmm.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:168
        match &self.xmm_m128 {
            XmmMem::Xmm(xmm_m128) => emit_modrm(buf, xmm, xmm_m128.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:172
            XmmMem::Mem(xmm_m128) => emit_modrm_sib_disp(buf, off, xmm, xmm_m128, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:173
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write_xmm(self.xmm.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
        match &mut self.xmm_m128 {
            XmmMem::Xmm(r) => visitor.read_xmm(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            XmmMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat, Feature::sse2] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for subpd_a<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let xmm = self.xmm.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let xmm_m128 = self.xmm_m128.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "subpd {xmm_m128}, {xmm}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<subpd_a<R>> for Inst<R> {
    fn from(inst: subpd_a<R>) -> Self {
        Self::subpd_a(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `xorb: I(al[rw], imm8) => 0x34 ib [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct xorb_i<R> where R: Registers {
    pub al: Fixed<R::ReadWriteGpr, { gpr::enc::RAX }>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm8: Imm8, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> xorb_i<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(al: impl Into<Fixed<R::ReadWriteGpr, { gpr::enc::RAX }>>, imm8: impl Into<Imm8>) -> Self {
        Self {
            al: al.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm8: imm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, _: &impl KnownOffsetTable) {

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:87
        rex.emit_two_op(buf, digit, self.al.enc()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:88

        // Emit opcode(s).
        buf.put1(0x34); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit immediate.
        self.imm8.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        let enc = self.al.expected_enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:138
        visitor.fixed_read_write_gpr(&mut self.al.0, enc); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:139
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for xorb_i<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let al = "%al"; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm8 = self.imm8.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "xorb {imm8}, {al}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<xorb_i<R>> for Inst<R> {
    fn from(inst: xorb_i<R>) -> Self {
        Self::xorb_i(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `xorw: I(ax[rw], imm16) => 0x66 + 0x35 iw [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct xorw_i<R> where R: Registers {
    pub ax: Fixed<R::ReadWriteGpr, { gpr::enc::RAX }>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm16: Imm16, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> xorw_i<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(ax: impl Into<Fixed<R::ReadWriteGpr, { gpr::enc::RAX }>>, imm16: impl Into<Imm16>) -> Self {
        Self {
            ax: ax.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm16: imm16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, _: &impl KnownOffsetTable) {

        // Emit prefixes.
        buf.put1(0x66); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:48

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:87
        rex.emit_two_op(buf, digit, self.ax.enc()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:88

        // Emit opcode(s).
        buf.put1(0x35); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit immediate.
        self.imm16.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        let enc = self.ax.expected_enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:138
        visitor.fixed_read_write_gpr(&mut self.ax.0, enc); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:139
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for xorw_i<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let ax = "%ax"; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm16 = self.imm16.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "xorw {imm16}, {ax}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<xorw_i<R>> for Inst<R> {
    fn from(inst: xorw_i<R>) -> Self {
        Self::xorw_i(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `xorl: I(eax[rw], imm32) => 0x35 id [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct xorl_i<R> where R: Registers {
    pub eax: Fixed<R::ReadWriteGpr, { gpr::enc::RAX }>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm32: Imm32, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> xorl_i<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(eax: impl Into<Fixed<R::ReadWriteGpr, { gpr::enc::RAX }>>, imm32: impl Into<Imm32>) -> Self {
        Self {
            eax: eax.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm32: imm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, _: &impl KnownOffsetTable) {

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:87
        rex.emit_two_op(buf, digit, self.eax.enc()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:88

        // Emit opcode(s).
        buf.put1(0x35); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit immediate.
        self.imm32.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        let enc = self.eax.expected_enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:138
        visitor.fixed_read_write_gpr(&mut self.eax.0, enc); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:139
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for xorl_i<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let eax = "%eax"; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm32 = self.imm32.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "xorl {imm32}, {eax}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<xorl_i<R>> for Inst<R> {
    fn from(inst: xorl_i<R>) -> Self {
        Self::xorl_i(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `xorq: I_SXL(rax[rw], imm32[sxq]) => REX.W + 0x35 id [_64b]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct xorq_i_sxl<R> where R: Registers {
    pub rax: Fixed<R::ReadWriteGpr, { gpr::enc::RAX }>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm32: Simm32, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> xorq_i_sxl<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rax: impl Into<Fixed<R::ReadWriteGpr, { gpr::enc::RAX }>>, imm32: impl Into<Simm32>) -> Self {
        Self {
            rax: rax.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm32: imm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, _: &impl KnownOffsetTable) {

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:87
        rex.emit_two_op(buf, digit, self.rax.enc()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:88

        // Emit opcode(s).
        buf.put1(0x35); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit immediate.
        self.imm32.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        let enc = self.rax.expected_enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:138
        visitor.fixed_read_write_gpr(&mut self.rax.0, enc); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:139
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for xorq_i_sxl<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rax = "%rax"; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm32 = self.imm32.to_string(Extension::SignExtendQuad); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "xorq {imm32}, {rax}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<xorq_i_sxl<R>> for Inst<R> {
    fn from(inst: xorq_i_sxl<R>) -> Self {
        Self::xorq_i_sxl(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `xorb: MI(rm8[rw], imm8) => 0x80 /6 ib [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct xorb_mi<R> where R: Registers {
    pub rm8: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm8: Imm8, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> xorb_mi<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm8: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, imm8: impl Into<Imm8>) -> Self {
        Self {
            rm8: rm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm8: imm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm8) = &self.rm8 {
            if let Some(trap_code) = rm8.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let mut rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:75
        self.rm8.always_emit_if_8bit_needed(&mut rex); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:77
        let digit = 0x6; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:97
        match &self.rm8 {
            GprMem::Gpr(rm8) => rex.emit_two_op(buf, digit, rm8.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:99
            GprMem::Mem(rm8) => rm8.emit_rex_prefix(rex, digit, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:100
        }

        // Emit opcode(s).
        buf.put1(0x80); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x6; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:161
        match &self.rm8 {
            GprMem::Gpr(rm8) => emit_modrm(buf, digit, rm8.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:163
            GprMem::Mem(rm8) => emit_modrm_sib_disp(buf, off, digit, rm8, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:164
        }

        // Emit immediate.
        self.imm8.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm8 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for xorb_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm8 = self.rm8.to_string(Size::Byte); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm8 = self.imm8.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "xorb {imm8}, {rm8}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<xorb_mi<R>> for Inst<R> {
    fn from(inst: xorb_mi<R>) -> Self {
        Self::xorb_mi(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `xorw: MI(rm16[rw], imm16) => 0x66 + 0x81 /6 iw [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct xorw_mi<R> where R: Registers {
    pub rm16: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm16: Imm16, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> xorw_mi<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm16: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, imm16: impl Into<Imm16>) -> Self {
        Self {
            rm16: rm16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm16: imm16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm16) = &self.rm16 {
            if let Some(trap_code) = rm16.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit prefixes.
        buf.put1(0x66); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:48

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x6; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:97
        match &self.rm16 {
            GprMem::Gpr(rm16) => rex.emit_two_op(buf, digit, rm16.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:99
            GprMem::Mem(rm16) => rm16.emit_rex_prefix(rex, digit, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:100
        }

        // Emit opcode(s).
        buf.put1(0x81); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x6; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:161
        match &self.rm16 {
            GprMem::Gpr(rm16) => emit_modrm(buf, digit, rm16.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:163
            GprMem::Mem(rm16) => emit_modrm_sib_disp(buf, off, digit, rm16, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:164
        }

        // Emit immediate.
        self.imm16.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm16 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for xorw_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm16 = self.rm16.to_string(Size::Word); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm16 = self.imm16.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "xorw {imm16}, {rm16}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<xorw_mi<R>> for Inst<R> {
    fn from(inst: xorw_mi<R>) -> Self {
        Self::xorw_mi(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `xorl: MI(rm32[rw], imm32) => 0x81 /6 id [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct xorl_mi<R> where R: Registers {
    pub rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm32: Imm32, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> xorl_mi<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm32: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, imm32: impl Into<Imm32>) -> Self {
        Self {
            rm32: rm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm32: imm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x6; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:97
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, digit, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:99
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, digit, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:100
        }

        // Emit opcode(s).
        buf.put1(0x81); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x6; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:161
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, digit, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:163
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, digit, rm32, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:164
        }

        // Emit immediate.
        self.imm32.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for xorl_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm32 = self.rm32.to_string(Size::Doubleword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm32 = self.imm32.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "xorl {imm32}, {rm32}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<xorl_mi<R>> for Inst<R> {
    fn from(inst: xorl_mi<R>) -> Self {
        Self::xorl_mi(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `xorq: MI_SXL(rm64[rw], imm32[sxq]) => REX.W + 0x81 /6 id [_64b]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct xorq_mi_sxl<R> where R: Registers {
    pub rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm32: Simm32, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> xorq_mi_sxl<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm64: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, imm32: impl Into<Simm32>) -> Self {
        Self {
            rm64: rm64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm32: imm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x6; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:97
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, digit, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:99
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, digit, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:100
        }

        // Emit opcode(s).
        buf.put1(0x81); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x6; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:161
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, digit, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:163
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, digit, rm64, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:164
        }

        // Emit immediate.
        self.imm32.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for xorq_mi_sxl<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm64 = self.rm64.to_string(Size::Quadword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm32 = self.imm32.to_string(Extension::SignExtendQuad); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "xorq {imm32}, {rm64}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<xorq_mi_sxl<R>> for Inst<R> {
    fn from(inst: xorq_mi_sxl<R>) -> Self {
        Self::xorq_mi_sxl(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `xorl: MI_SXB(rm32[rw], imm8[sxl]) => 0x83 /6 ib [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct xorl_mi_sxb<R> where R: Registers {
    pub rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm8: Simm8, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> xorl_mi_sxb<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm32: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, imm8: impl Into<Simm8>) -> Self {
        Self {
            rm32: rm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm8: imm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x6; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:97
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, digit, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:99
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, digit, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:100
        }

        // Emit opcode(s).
        buf.put1(0x83); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x6; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:161
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, digit, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:163
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, digit, rm32, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:164
        }

        // Emit immediate.
        self.imm8.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for xorl_mi_sxb<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm32 = self.rm32.to_string(Size::Doubleword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm8 = self.imm8.to_string(Extension::SignExtendLong); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "xorl {imm8}, {rm32}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<xorl_mi_sxb<R>> for Inst<R> {
    fn from(inst: xorl_mi_sxb<R>) -> Self {
        Self::xorl_mi_sxb(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `xorq: MI_SXB(rm64[rw], imm8[sxq]) => REX.W + 0x83 /6 ib [_64b]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct xorq_mi_sxb<R> where R: Registers {
    pub rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm8: Simm8, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> xorq_mi_sxb<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm64: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, imm8: impl Into<Simm8>) -> Self {
        Self {
            rm64: rm64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm8: imm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x6; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:97
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, digit, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:99
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, digit, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:100
        }

        // Emit opcode(s).
        buf.put1(0x83); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x6; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:161
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, digit, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:163
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, digit, rm64, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:164
        }

        // Emit immediate.
        self.imm8.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for xorq_mi_sxb<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm64 = self.rm64.to_string(Size::Quadword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm8 = self.imm8.to_string(Extension::SignExtendQuad); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "xorq {imm8}, {rm64}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<xorq_mi_sxb<R>> for Inst<R> {
    fn from(inst: xorq_mi_sxb<R>) -> Self {
        Self::xorq_mi_sxb(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `xorb: MR(rm8[rw], r8) => 0x30 /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct xorb_mr<R> where R: Registers {
    pub rm8: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r8: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> xorb_mr<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm8: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, r8: impl Into<Gpr<R::ReadGpr>>) -> Self {
        Self {
            rm8: rm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r8: r8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm8) = &self.rm8 {
            if let Some(trap_code) = rm8.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let mut rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:75
        self.rm8.always_emit_if_8bit_needed(&mut rex); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:77
        self.r8.always_emit_if_8bit_needed(&mut rex); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:77
        let r8 = self.r8.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:123
        match &self.rm8 {
            GprMem::Gpr(rm8) => rex.emit_two_op(buf, r8, rm8.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:130
            GprMem::Mem(rm8) => rm8.emit_rex_prefix(rex, r8, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:131
        }

        // Emit opcode(s).
        buf.put1(0x30); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r8 = self.r8.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:187
        match &self.rm8 {
            GprMem::Gpr(rm8) => emit_modrm(buf, r8, rm8.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:195
            GprMem::Mem(rm8) => emit_modrm_sib_disp(buf, off, r8, rm8, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:196
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm8 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
        visitor.read_gpr(self.r8.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for xorb_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm8 = self.rm8.to_string(Size::Byte); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r8 = self.r8.to_string(Size::Byte); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "xorb {r8}, {rm8}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<xorb_mr<R>> for Inst<R> {
    fn from(inst: xorb_mr<R>) -> Self {
        Self::xorb_mr(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `xorw: MR(rm16[rw], r16) => 0x66 + 0x31 /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct xorw_mr<R> where R: Registers {
    pub rm16: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r16: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> xorw_mr<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm16: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, r16: impl Into<Gpr<R::ReadGpr>>) -> Self {
        Self {
            rm16: rm16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r16: r16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm16) = &self.rm16 {
            if let Some(trap_code) = rm16.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit prefixes.
        buf.put1(0x66); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:48

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r16 = self.r16.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:123
        match &self.rm16 {
            GprMem::Gpr(rm16) => rex.emit_two_op(buf, r16, rm16.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:130
            GprMem::Mem(rm16) => rm16.emit_rex_prefix(rex, r16, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:131
        }

        // Emit opcode(s).
        buf.put1(0x31); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r16 = self.r16.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:187
        match &self.rm16 {
            GprMem::Gpr(rm16) => emit_modrm(buf, r16, rm16.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:195
            GprMem::Mem(rm16) => emit_modrm_sib_disp(buf, off, r16, rm16, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:196
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm16 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
        visitor.read_gpr(self.r16.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for xorw_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm16 = self.rm16.to_string(Size::Word); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r16 = self.r16.to_string(Size::Word); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "xorw {r16}, {rm16}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<xorw_mr<R>> for Inst<R> {
    fn from(inst: xorw_mr<R>) -> Self {
        Self::xorw_mr(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `xorl: MR(rm32[rw], r32) => 0x31 /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct xorl_mr<R> where R: Registers {
    pub rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r32: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> xorl_mr<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm32: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, r32: impl Into<Gpr<R::ReadGpr>>) -> Self {
        Self {
            rm32: rm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r32: r32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r32 = self.r32.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:123
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, r32, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:130
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, r32, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:131
        }

        // Emit opcode(s).
        buf.put1(0x31); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r32 = self.r32.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:187
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, r32, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:195
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, r32, rm32, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:196
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
        visitor.read_gpr(self.r32.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for xorl_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm32 = self.rm32.to_string(Size::Doubleword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r32 = self.r32.to_string(Size::Doubleword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "xorl {r32}, {rm32}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<xorl_mr<R>> for Inst<R> {
    fn from(inst: xorl_mr<R>) -> Self {
        Self::xorl_mr(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `xorq: MR(rm64[rw], r64) => REX.W + 0x31 /r [_64b]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct xorq_mr<R> where R: Registers {
    pub rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r64: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> xorq_mr<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(rm64: impl Into<GprMem<R::ReadWriteGpr, R::ReadGpr>>, r64: impl Into<Gpr<R::ReadGpr>>) -> Self {
        Self {
            rm64: rm64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r64: r64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r64 = self.r64.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:123
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, r64, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:130
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, r64, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:131
        }

        // Emit opcode(s).
        buf.put1(0x31); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r64 = self.r64.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:187
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, r64, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:195
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, r64, rm64, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:196
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read_write_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
        visitor.read_gpr(self.r64.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for xorq_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm64 = self.rm64.to_string(Size::Quadword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r64 = self.r64.to_string(Size::Quadword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "xorq {r64}, {rm64}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<xorq_mr<R>> for Inst<R> {
    fn from(inst: xorq_mr<R>) -> Self {
        Self::xorq_mr(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `xorb: RM(r8[rw], rm8) => 0x32 /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct xorb_rm<R> where R: Registers {
    pub r8: Gpr<R::ReadWriteGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub rm8: GprMem<R::ReadGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> xorb_rm<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(r8: impl Into<Gpr<R::ReadWriteGpr>>, rm8: impl Into<GprMem<R::ReadGpr, R::ReadGpr>>) -> Self {
        Self {
            r8: r8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            rm8: rm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm8) = &self.rm8 {
            if let Some(trap_code) = rm8.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let mut rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:75
        self.r8.always_emit_if_8bit_needed(&mut rex); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:77
        self.rm8.always_emit_if_8bit_needed(&mut rex); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:77
        let r8 = self.r8.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:104
        match &self.rm8 {
            GprMem::Gpr(rm8) => rex.emit_two_op(buf, r8, rm8.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:112
            GprMem::Mem(rm8) => rm8.emit_rex_prefix(rex, r8, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:113
        }

        // Emit opcode(s).
        buf.put1(0x32); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r8 = self.r8.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:168
        match &self.rm8 {
            GprMem::Gpr(rm8) => emit_modrm(buf, r8, rm8.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:176
            GprMem::Mem(rm8) => emit_modrm_sib_disp(buf, off, r8, rm8, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:177
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write_gpr(self.r8.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
        match &mut self.rm8 {
            GprMem::Gpr(r) => visitor.read_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for xorb_rm<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let r8 = self.r8.to_string(Size::Byte); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let rm8 = self.rm8.to_string(Size::Byte); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "xorb {rm8}, {r8}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<xorb_rm<R>> for Inst<R> {
    fn from(inst: xorb_rm<R>) -> Self {
        Self::xorb_rm(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `xorw: RM(r16[rw], rm16) => 0x66 + 0x33 /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct xorw_rm<R> where R: Registers {
    pub r16: Gpr<R::ReadWriteGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub rm16: GprMem<R::ReadGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> xorw_rm<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(r16: impl Into<Gpr<R::ReadWriteGpr>>, rm16: impl Into<GprMem<R::ReadGpr, R::ReadGpr>>) -> Self {
        Self {
            r16: r16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            rm16: rm16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm16) = &self.rm16 {
            if let Some(trap_code) = rm16.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit prefixes.
        buf.put1(0x66); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:48

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r16 = self.r16.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:104
        match &self.rm16 {
            GprMem::Gpr(rm16) => rex.emit_two_op(buf, r16, rm16.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:112
            GprMem::Mem(rm16) => rm16.emit_rex_prefix(rex, r16, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:113
        }

        // Emit opcode(s).
        buf.put1(0x33); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r16 = self.r16.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:168
        match &self.rm16 {
            GprMem::Gpr(rm16) => emit_modrm(buf, r16, rm16.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:176
            GprMem::Mem(rm16) => emit_modrm_sib_disp(buf, off, r16, rm16, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:177
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write_gpr(self.r16.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
        match &mut self.rm16 {
            GprMem::Gpr(r) => visitor.read_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for xorw_rm<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let r16 = self.r16.to_string(Size::Word); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let rm16 = self.rm16.to_string(Size::Word); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "xorw {rm16}, {r16}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<xorw_rm<R>> for Inst<R> {
    fn from(inst: xorw_rm<R>) -> Self {
        Self::xorw_rm(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `xorl: RM(r32[rw], rm32) => 0x33 /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct xorl_rm<R> where R: Registers {
    pub r32: Gpr<R::ReadWriteGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub rm32: GprMem<R::ReadGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> xorl_rm<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(r32: impl Into<Gpr<R::ReadWriteGpr>>, rm32: impl Into<GprMem<R::ReadGpr, R::ReadGpr>>) -> Self {
        Self {
            r32: r32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            rm32: rm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r32 = self.r32.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:104
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, r32, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:112
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, r32, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:113
        }

        // Emit opcode(s).
        buf.put1(0x33); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r32 = self.r32.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:168
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, r32, rm32.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:176
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, r32, rm32, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:177
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write_gpr(self.r32.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for xorl_rm<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let r32 = self.r32.to_string(Size::Doubleword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let rm32 = self.rm32.to_string(Size::Doubleword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "xorl {rm32}, {r32}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<xorl_rm<R>> for Inst<R> {
    fn from(inst: xorl_rm<R>) -> Self {
        Self::xorl_rm(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `xorq: RM(r64[rw], rm64) => REX.W + 0x33 /r [_64b]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct xorq_rm<R> where R: Registers {
    pub r64: Gpr<R::ReadWriteGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub rm64: GprMem<R::ReadGpr, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> xorq_rm<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(r64: impl Into<Gpr<R::ReadWriteGpr>>, rm64: impl Into<GprMem<R::ReadGpr, R::ReadGpr>>) -> Self {
        Self {
            r64: r64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            rm64: rm64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r64 = self.r64.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:104
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, r64, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:112
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, r64, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:113
        }

        // Emit opcode(s).
        buf.put1(0x33); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r64 = self.r64.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:168
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, r64, rm64.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:176
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, r64, rm64, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:177
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write_gpr(self.r64.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read_gpr(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            GprMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for xorq_rm<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let r64 = self.r64.to_string(Size::Quadword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let rm64 = self.rm64.to_string(Size::Quadword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "xorq {rm64}, {r64}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<xorq_rm<R>> for Inst<R> {
    fn from(inst: xorq_rm<R>) -> Self {
        Self::xorq_rm(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_xorb: MI(m8[rw], imm8) => 0xF0 + 0x80 /6 ib [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_xorb_mi<R> where R: Registers {
    pub m8: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm8: Imm8, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_xorb_mi<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m8: impl Into<Amode<R::ReadGpr>>, imm8: impl Into<Imm8>) -> Self {
        Self {
            m8: m8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm8: imm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m8.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x6; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:92
        self.m8.emit_rex_prefix(rex, digit, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:93

        // Emit opcode(s).
        buf.put1(0x80); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x6; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:156
        emit_modrm_sib_disp(buf, off, digit, &self.m8, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:157

        // Emit immediate.
        self.imm8.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m8, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_xorb_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m8 = self.m8.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm8 = self.imm8.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock xorb {imm8}, {m8}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_xorb_mi<R>> for Inst<R> {
    fn from(inst: lock_xorb_mi<R>) -> Self {
        Self::lock_xorb_mi(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_xorw: MI(m16[rw], imm16) => 0xF0 + 0x66 + 0x81 /6 iw [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_xorw_mi<R> where R: Registers {
    pub m16: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm16: Imm16, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_xorw_mi<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m16: impl Into<Amode<R::ReadGpr>>, imm16: impl Into<Imm16>) -> Self {
        Self {
            m16: m16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm16: imm16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m16.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42
        buf.put1(0x66); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:48

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x6; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:92
        self.m16.emit_rex_prefix(rex, digit, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:93

        // Emit opcode(s).
        buf.put1(0x81); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x6; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:156
        emit_modrm_sib_disp(buf, off, digit, &self.m16, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:157

        // Emit immediate.
        self.imm16.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m16, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_xorw_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m16 = self.m16.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm16 = self.imm16.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock xorw {imm16}, {m16}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_xorw_mi<R>> for Inst<R> {
    fn from(inst: lock_xorw_mi<R>) -> Self {
        Self::lock_xorw_mi(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_xorl: MI(m32[rw], imm32) => 0xF0 + 0x81 /6 id [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_xorl_mi<R> where R: Registers {
    pub m32: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm32: Imm32, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_xorl_mi<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m32: impl Into<Amode<R::ReadGpr>>, imm32: impl Into<Imm32>) -> Self {
        Self {
            m32: m32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm32: imm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m32.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x6; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:92
        self.m32.emit_rex_prefix(rex, digit, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:93

        // Emit opcode(s).
        buf.put1(0x81); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x6; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:156
        emit_modrm_sib_disp(buf, off, digit, &self.m32, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:157

        // Emit immediate.
        self.imm32.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m32, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_xorl_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m32 = self.m32.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm32 = self.imm32.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock xorl {imm32}, {m32}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_xorl_mi<R>> for Inst<R> {
    fn from(inst: lock_xorl_mi<R>) -> Self {
        Self::lock_xorl_mi(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_xorq: MI_SXL(m64[rw], imm32[sxq]) => 0xF0 + REX.W + 0x81 /6 id [_64b]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_xorq_mi_sxl<R> where R: Registers {
    pub m64: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm32: Simm32, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_xorq_mi_sxl<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m64: impl Into<Amode<R::ReadGpr>>, imm32: impl Into<Simm32>) -> Self {
        Self {
            m64: m64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm32: imm32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m64.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x6; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:92
        self.m64.emit_rex_prefix(rex, digit, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:93

        // Emit opcode(s).
        buf.put1(0x81); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x6; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:156
        emit_modrm_sib_disp(buf, off, digit, &self.m64, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:157

        // Emit immediate.
        self.imm32.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m64, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_xorq_mi_sxl<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m64 = self.m64.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm32 = self.imm32.to_string(Extension::SignExtendQuad); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock xorq {imm32}, {m64}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_xorq_mi_sxl<R>> for Inst<R> {
    fn from(inst: lock_xorq_mi_sxl<R>) -> Self {
        Self::lock_xorq_mi_sxl(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_xorl: MI_SXB(m32[rw], imm8[sxl]) => 0xF0 + 0x83 /6 ib [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_xorl_mi_sxb<R> where R: Registers {
    pub m32: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm8: Simm8, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_xorl_mi_sxb<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m32: impl Into<Amode<R::ReadGpr>>, imm8: impl Into<Simm8>) -> Self {
        Self {
            m32: m32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm8: imm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m32.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x6; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:92
        self.m32.emit_rex_prefix(rex, digit, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:93

        // Emit opcode(s).
        buf.put1(0x83); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x6; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:156
        emit_modrm_sib_disp(buf, off, digit, &self.m32, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:157

        // Emit immediate.
        self.imm8.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m32, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_xorl_mi_sxb<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m32 = self.m32.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm8 = self.imm8.to_string(Extension::SignExtendLong); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock xorl {imm8}, {m32}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_xorl_mi_sxb<R>> for Inst<R> {
    fn from(inst: lock_xorl_mi_sxb<R>) -> Self {
        Self::lock_xorl_mi_sxb(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_xorq: MI_SXB(m64[rw], imm8[sxq]) => 0xF0 + REX.W + 0x83 /6 ib [_64b]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_xorq_mi_sxb<R> where R: Registers {
    pub m64: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub imm8: Simm8, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_xorq_mi_sxb<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m64: impl Into<Amode<R::ReadGpr>>, imm8: impl Into<Simm8>) -> Self {
        Self {
            m64: m64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            imm8: imm8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m64.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let digit = 0x6; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:92
        self.m64.emit_rex_prefix(rex, digit, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:93

        // Emit opcode(s).
        buf.put1(0x83); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let digit = 0x6; // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:156
        emit_modrm_sib_disp(buf, off, digit, &self.m64, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:157

        // Emit immediate.
        self.imm8.encode(buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:213
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m64, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_xorq_mi_sxb<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m64 = self.m64.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let imm8 = self.imm8.to_string(Extension::SignExtendQuad); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock xorq {imm8}, {m64}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_xorq_mi_sxb<R>> for Inst<R> {
    fn from(inst: lock_xorq_mi_sxb<R>) -> Self {
        Self::lock_xorq_mi_sxb(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_xorb: MR(m8[rw], r8) => 0xF0 + 0x30 /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_xorb_mr<R> where R: Registers {
    pub m8: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r8: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_xorb_mr<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m8: impl Into<Amode<R::ReadGpr>>, r8: impl Into<Gpr<R::ReadGpr>>) -> Self {
        Self {
            m8: m8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r8: r8.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m8.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let mut rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:75
        self.r8.always_emit_if_8bit_needed(&mut rex); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:77
        let r8 = self.r8.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:119
        self.m8.emit_rex_prefix(rex, r8, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:120

        // Emit opcode(s).
        buf.put1(0x30); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r8 = self.r8.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:183
        emit_modrm_sib_disp(buf, off, r8, &self.m8, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:184
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m8, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
        visitor.read_gpr(self.r8.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_xorb_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m8 = self.m8.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r8 = self.r8.to_string(Size::Byte); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock xorb {r8}, {m8}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_xorb_mr<R>> for Inst<R> {
    fn from(inst: lock_xorb_mr<R>) -> Self {
        Self::lock_xorb_mr(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_xorw: MR(m16[rw], r16) => 0xF0 + 0x66 + 0x31 /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_xorw_mr<R> where R: Registers {
    pub m16: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r16: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_xorw_mr<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m16: impl Into<Amode<R::ReadGpr>>, r16: impl Into<Gpr<R::ReadGpr>>) -> Self {
        Self {
            m16: m16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r16: r16.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m16.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42
        buf.put1(0x66); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:48

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r16 = self.r16.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:119
        self.m16.emit_rex_prefix(rex, r16, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:120

        // Emit opcode(s).
        buf.put1(0x31); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r16 = self.r16.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:183
        emit_modrm_sib_disp(buf, off, r16, &self.m16, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:184
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m16, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
        visitor.read_gpr(self.r16.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_xorw_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m16 = self.m16.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r16 = self.r16.to_string(Size::Word); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock xorw {r16}, {m16}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_xorw_mr<R>> for Inst<R> {
    fn from(inst: lock_xorw_mr<R>) -> Self {
        Self::lock_xorw_mr(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_xorl: MR(m32[rw], r32) => 0xF0 + 0x31 /r [_64b | compat]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_xorl_mr<R> where R: Registers {
    pub m32: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r32: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_xorl_mr<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m32: impl Into<Amode<R::ReadGpr>>, r32: impl Into<Gpr<R::ReadGpr>>) -> Self {
        Self {
            m32: m32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r32: r32.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m32.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r32 = self.r32.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:119
        self.m32.emit_rex_prefix(rex, r32, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:120

        // Emit opcode(s).
        buf.put1(0x31); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r32 = self.r32.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:183
        emit_modrm_sib_disp(buf, off, r32, &self.m32, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:184
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m32, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
        visitor.read_gpr(self.r32.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_xorl_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m32 = self.m32.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r32 = self.r32.to_string(Size::Doubleword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock xorl {r32}, {m32}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_xorl_mr<R>> for Inst<R> {
    fn from(inst: lock_xorl_mr<R>) -> Self {
        Self::lock_xorl_mr(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `lock_xorq: MR(m64[rw], r64) => 0xF0 + REX.W + 0x31 /r [_64b]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct lock_xorq_mr<R> where R: Registers {
    pub m64: Amode<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub r64: Gpr<R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> lock_xorq_mr<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(m64: impl Into<Amode<R::ReadGpr>>, r64: impl Into<Gpr<R::ReadGpr>>) -> Self {
        Self {
            m64: m64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            r64: r64.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let Some(trap_code) = self.m64.trap_code() {
            buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:100
        }

        // Emit prefixes.
        buf.put1(0xF0); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:42

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let r64 = self.r64.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:119
        self.m64.emit_rex_prefix(rex, r64, buf); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:120

        // Emit opcode(s).
        buf.put1(0x31); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let r64 = self.r64.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:183
        emit_modrm_sib_disp(buf, off, r64, &self.m64, 0, None); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:184
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visit_amode(&mut self.m64, visitor); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:154
        visitor.read_gpr(self.r64.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for lock_xorq_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let m64 = self.m64.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let r64 = self.r64.to_string(Size::Quadword); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "lock xorq {r64}, {m64}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<lock_xorq_mr<R>> for Inst<R> {
    fn from(inst: lock_xorq_mr<R>) -> Self {
        Self::lock_xorq_mr(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `xorps: A(xmm[rw], xmm_m128[align]) => 0x0F + 0x57 /r [_64b | compat | sse]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct xorps_a<R> where R: Registers {
    pub xmm: Xmm<R::ReadWriteXmm>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub xmm_m128: XmmMem<R::ReadXmm, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> xorps_a<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(xmm: impl Into<Xmm<R::ReadWriteXmm>>, xmm_m128: impl Into<XmmMem<R::ReadXmm, R::ReadGpr>>) -> Self {
        Self {
            xmm: xmm.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            xmm_m128: xmm_m128.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let XmmMem::Mem(xmm_m128) = &self.xmm_m128 {
            if let Some(trap_code) = xmm_m128.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let xmm = self.xmm.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:104
        match &self.xmm_m128 {
            XmmMem::Xmm(xmm_m128) => rex.emit_two_op(buf, xmm, xmm_m128.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:108
            XmmMem::Mem(xmm_m128) => xmm_m128.emit_rex_prefix(rex, xmm, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:109
        }

        // Emit opcode(s).
        buf.put1(0x0f); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:60
        buf.put1(0x57); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let xmm = self.xmm.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:168
        match &self.xmm_m128 {
            XmmMem::Xmm(xmm_m128) => emit_modrm(buf, xmm, xmm_m128.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:172
            XmmMem::Mem(xmm_m128) => emit_modrm_sib_disp(buf, off, xmm, xmm_m128, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:173
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write_xmm(self.xmm.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
        match &mut self.xmm_m128 {
            XmmMem::Xmm(r) => visitor.read_xmm(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            XmmMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat, Feature::sse] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for xorps_a<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let xmm = self.xmm.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let xmm_m128 = self.xmm_m128.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "xorps {xmm_m128}, {xmm}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<xorps_a<R>> for Inst<R> {
    fn from(inst: xorps_a<R>) -> Self {
        Self::xorps_a(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

/// `xorpd: A(xmm[rw], xmm_m128[align]) => 0x66 + 0x0F + 0x57 /r [_64b | compat | sse2]` // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:14
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[cfg_attr(any(test, feature = "fuzz"), arbitrary(bound = "R: crate::fuzz::RegistersArbitrary"))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:57
pub struct xorpd_a<R> where R: Registers {
    pub xmm: Xmm<R::ReadWriteXmm>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
    pub xmm_m128: XmmMem<R::ReadXmm, R::ReadGpr>, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:23
}
impl<R: Registers> xorpd_a<R> {
    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:74
    pub fn new(xmm: impl Into<Xmm<R::ReadWriteXmm>>, xmm_m128: impl Into<XmmMem<R::ReadXmm, R::ReadGpr>>) -> Self {
        Self {
            xmm: xmm.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
            xmm_m128: xmm_m128.into(), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:79
        }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let XmmMem::Mem(xmm_m128) = &self.xmm_m128 {
            if let Some(trap_code) = xmm_m128.trap_code() {
                buf.add_trap(trap_code); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:107
            }
        }

        // Emit prefixes.
        buf.put1(0x66); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:48

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:80
        let xmm = self.xmm.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:104
        match &self.xmm_m128 {
            XmmMem::Xmm(xmm_m128) => rex.emit_two_op(buf, xmm, xmm_m128.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:108
            XmmMem::Mem(xmm_m128) => xmm_m128.emit_rex_prefix(rex, xmm, buf), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:109
        }

        // Emit opcode(s).
        buf.put1(0x0f); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:60
        buf.put1(0x57); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:62

        // Emit ModR/M byte.
        let xmm = self.xmm.enc(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:168
        match &self.xmm_m128 {
            XmmMem::Xmm(xmm_m128) => emit_modrm(buf, xmm, xmm_m128.enc()), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:172
            XmmMem::Mem(xmm_m128) => emit_modrm_sib_disp(buf, off, xmm, xmm_m128, 0, None), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\format.rs:173
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write_xmm(self.xmm.as_mut()); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:143
        match &mut self.xmm_m128 {
            XmmMem::Xmm(r) => visitor.read_xmm(r), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:149
            XmmMem::Mem(m) => visit_amode(m, visitor), // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:150
        }
    }

    #[must_use] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:164
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat, Feature::sse2] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:171
    }
}
impl<R: Registers> std::fmt::Display for xorpd_a<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let xmm = self.xmm.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        let xmm_m128 = self.xmm_m128.to_string(); // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:184
        write!(f, "xorpd {xmm_m128}, {xmm}") // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:194
    }
}
impl<R: Registers> From<xorpd_a<R>> for Inst<R> {
    fn from(inst: xorpd_a<R>) -> Self {
        Self::xorpd_a(inst) // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\inst.rs:205
    }
}

#[doc(hidden)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\features.rs:12
#[derive(Clone, Debug)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:50
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate.rs:51
#[derive(Copy, PartialEq)] // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\features.rs:14
pub enum Feature {
    _64b, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\features.rs:17
    compat, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\features.rs:17
    sse, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\features.rs:17
    sse2, // C:\Users\ACER\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cranelift-assembler-x64-meta-0.120.0\src\generate\features.rs:17
}
